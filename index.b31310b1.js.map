{"mappings":"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CAAC,MAAM;IACxC,KAAA,CAAM,CAAC,GAAG,GAAA,CAAI,UAAU,CAAC,EAAE;IAC3B,EAAE,GAAG,CAAC;SACD,KAAA,CAAM,GAAE,IAAI,MAAM,CAAE,CAAzB;QACI,CAAC,CAAC,GAAG,CAAC,GAAE,EAAE,EAAE;QACZ,EAAE,IAAI,GAAE,CAAC,MAAM;IAClB,CAAA;WACM,CAAC;AACZ,CAAA;A,G,C,wB;;Q,I,G,6B;Q,M,G,Y;Q,O,G,O;Q,S,G,M;Q,S,G,M;S,O;Q,K;Y,K,G,gT;Y,Q,G,uN;Y,S,G,qnB;Y,M,G,gJ;;Q,e,E,S;Q,K;Y,gB;gB,I,G,gB;gB,O,E,C;gB,O;oB,O,E,C;oB,Q,E,C;oB,M,E,C;;;Y,W;gB,I,G,W;gB,O,E,C;gB,O;oB,K,E,C;oB,Y,E,C;oB,W,E,C;oB,Q,E,C;oB,e,E,C;oB,iB,E,G;;;;Q,S;Y,iB;gB,K,E,G;gB,G,E,K;;;Q,O;;gB,I,G,O;gB,I,G,Q;gB,U,E,C;gB,W,G,4M;gB,M;gB,S,E,I;;;gB,I,G,M;gB,I,G,Q;gB,U,E,C;gB,W,G,4M;gB,M;gB,S,E,I;;;gB,I,G,O;gB,I,G,Y;gB,U,E,I;gB,W,G,8H;gB,M;gB,S,E,I;;;gB,I,G,M;gB,I,G,Y;gB,U,E,I;gB,W,G,8H;gB,M;gB,S,E,I;;;gB,I,G,O;gB,I,G,Y;gB,U,E,I;gB,W,G,qH;gB,M;;;gB,I,G,M;gB,I,G,K;gB,U,E,C;gB,W,G,yC;gB,M;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,c;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;gB,I,G,O;gB,I,G,S;gB,U,E,C;gB,W,G,4E;gB,M;gB,S,E,I;;;gB,I,G,M;gB,I,G,S;gB,U,E,C;gB,W,G,4E;gB,M;gB,S,E,I;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,qG;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,K;gB,U,E,C;gB,W,G,4E;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,6D;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,4C;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,G;wB,U,E,C;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,0D;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,oD;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,sT;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,kB;gB,U,E,G;gB,W,G,gD;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,sE;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,gB;gB,U,E,C;gB,W,G,yE;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,4G;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6V;gB,M;;wB,I,G,I;wB,I,G,W;wB,O,E,C;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,O;;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,+E;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,C;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,0F;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,C;gB,W,G,iD;gB,M;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,oD;gB,M;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,W;wB,O,E,C;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;gB,I,G,K;gB,I,G,O;gB,U,E,C;gB,W,G,iE;gB,M;;;Q,I;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,K;Q,S,G,I;Q,S,G,I;S,O;Q,K;Y,K,G,4B;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;;;Q,I;;;Q,I,G,M;Q,M,G,Y;Q,O,G,O;Q,S,G,M;Q,S,G,M;S,O;a,K;;Q,K;Y,K,G,uB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;;;Q,I;;;Q,I,G,a;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,uB;Y,I,G,wqB;Y,M,G,yB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,U,G,oB;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,oF;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,iE;gB,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,iE;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,sE;gB,M;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,iD;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,4D;gB,M;;;Q,I;a,C;;Q,K,G,Q;;;Q,I,G,c;Q,M,G,U;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,yS;;Q,e,E,S;Q,K;Y,M;gB,I,G,M;gB,O,E,C;gB,O;oB,I,E,C;oB,E,E,C;oB,K,E,C;oB,I,E,C;oB,C,E,C;oB,C,E,C;oB,I,E,C;oB,M,E,C;oB,K,E,C;oB,I,E,E;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,2I;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,U;;;gB,I,G,K;gB,I,G,iB;gB,U,E,G;gB,W,G,sF;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;wB,Y,E,I;;;gB,U,G,K;;;gB,I,G,K;gB,I,G,I;gB,U,E,C;gB,W,G,iD;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,c,G,M;gB,U,G,E;;;gB,I,G,K;gB,I,G,E;gB,U,E,C;gB,W,G,iD;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,c,G,Q;gB,U,G,E;;;Q,I;Q,K,G,M;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;;Q,K;Y,K,G,wG;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,2E;gB,M;;wB,I,G,O;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,8H;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,Y,E,K;;;gB,U,G,M;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,2N;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;Q,I;;;Q,I,G,oB;Q,M,G,Y;Q,O,G,iB;Q,S,G,iB;Q,S,G,iB;S,O;a,K;;Q,K;Y,K,G,sE;;Q,e,E,S;Q,K;Y,gB;gB,I,G,gB;gB,O,E,C;gB,O;oB,S,E,C;oB,Y,E,C;oB,U,E,C;oB,a,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,wF;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,oG;gB,M;;wB,I,G,C;wB,I,G,gB;wB,O,E,C;;;gB,U,G,G;;;gB,I,G,O;gB,I,G,O;gB,U,E,G;gB,W,G,0C;gB,M;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,6C;gB,M;;;gB,I,G,O;gB,I,G,qB;gB,U,E,G;gB,W,G,mF;gB,M;;wB,I,G,iB;wB,I,G,M;wB,O,E,C;;;gB,U,E,I;gB,U,G,C;;;gB,I,G,K;gB,I,G,wB;gB,U,E,C;gB,W,G,yC;gB,M;;wB,I,G,iB;wB,I,G,gB;wB,O,E,C;;;gB,c,G,M;gB,U,G,G;;;Q,I;Q,K,G,G;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;;Q,K;Y,K,G,0J;;Q,e,E,S;Q,K;Y,M;gB,I,G,M;gB,O,E,C;gB,O;oB,K,E,C;oB,O,E,C;oB,M,E,C;oB,M,E,C;oB,O,E,C;oB,U,E,C;oB,K,E,C;oB,I,E,C;oB,G,E,E;oB,M,E,E;oB,M,E,E;oB,I,E,E;oB,I,E,E;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,uI;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,K;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,mQ;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,c,G,M;gB,U,G,I;;;Q,I;;;Q,I,G,S;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;a,O;;Q,K;Y,K,G,uD;Y,S,G,iC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,W,E,G;wB,W,E,I;wB,U,E,G;wB,U,E,I;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,K;gB,U,G,M;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,yF;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,S;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;;Q,K;Y,K,G,oN;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,+B;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,kB;gB,U,E,G;gB,W,G,4C;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,C;wB,W,E,C;wB,W,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,6E;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,C;wB,W,E,E;wB,W,E,C;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,iE;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,0D;gB,M;;wB,I,G,K;wB,O,E,I;wB,I,G,G;wB,O,E,C;;;gB,U,G,G;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,qE;gB,M;;wB,I,G,K;wB,O,E,I;wB,I,G,G;wB,O,E,C;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,K;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,2C;gB,M;;wB,I,G,I;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,M;gB,I,G,e;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,oB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,O;wB,I,G,K;wB,O,E,C;;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,iB;;;gB,I,G,M;gB,I,G,e;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,oB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,O;wB,I,G,K;wB,O,E,C;;;wB,I,G,K;wB,O,E,I;wB,I,G,G;wB,O,E,C;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,qB;;;gB,I,G,M;gB,I,G,e;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,oB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,O;wB,I,G,K;wB,O,E,C;;;wB,I,G,I;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,iB;;;Q,I;;;Q,I,G,U;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;;Q,K;Y,K,G,oD;;Q,e,E,S;Q,K;a,K;gB,I,G,K;gB,O,E,C;gB,O;oB,O,E,C;oB,c,E,C;oB,mB,E,C;oB,iB,E,C;oB,c,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,C;gB,W,G,+H;gB,M;gB,c,G,Q;gB,S,E,I;;;gB,I,G,M;gB,I,G,I;gB,U,E,C;gB,W,G,+H;gB,M;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,c;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,iB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,e;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,gF;gB,M;;wB,I,G,U;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,G;;;gB,I,G,M;gB,I,G,W;gB,U,E,G;gB,W,G,gF;gB,M;;wB,I,G,U;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,4a;gB,M;;wB,I,G,Y;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,U;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,K;wB,O,E,G;wB,Y,E,I;wB,Q,E,G;;;gB,S,E,I;gB,U,G,wC;;;gB,I,G,M;gB,I,G,S;gB,U,E,G;gB,W,G,4a;gB,M;;wB,I,G,U;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,U;wB,I,G,K;wB,O,E,C;;;wB,I,G,Y;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,W;;;Q,I;a,C;;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;a,O;;Q,K;Y,K,G,4E;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,U,G,E;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,sQ;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,M,E,I;gB,U,G,E;;;gB,I,G,K;gB,I,G,I;gB,U,E,C;gB,W,G,iD;gB,M;gB,c,G,M;;;gB,I,G,K;gB,I,G,E;gB,U,E,C;gB,W,G,mI;gB,M;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,c,G,Q;gB,U,G,G;;;gB,I,G,K;gB,I,G,I;gB,U,E,G;gB,W,G,oO;gB,M;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;Q,I;a,C;a,I;a,M;;Q,K,G,M;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;;Q,K;Y,K,G,gB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,C;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;wB,Y,E,C;;;gB,c,G,S;gB,U,G,I;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,0O;gB,M;;wB,I,G,M;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,W;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,8C;gB,M;;wB,I,G,S;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;wB,I,G,Q;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,M,E,I;gB,U,G,a;;;Q,I;a,C;a,I;;Q,K,G,K;;;Q,I,G,iB;Q,M,G,Y;Q,O,G,gB;Q,S,G,gB;Q,S,G,gB;S,O;a,K;;Q,K;Y,K,G,qD;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,gB;gB,U,G,K;;;gB,I,G,O;gB,I,G,S;gB,U,E,C;gB,W,G,4K;gB,M;gB,c,G,S;gB,S,E,I;;;gB,I,G,M;gB,I,G,S;gB,U,E,C;gB,W,G,4K;gB,M;gB,S,E,I;;;Q,I;a,I;;Q,K,G,M;;;Q,I,G,gB;Q,M,G,Y;Q,O,G,e;Q,S,G,e;Q,S,G,e;S,O;a,K;;Q,K;Y,K,G,kC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,G,E,C;oB,I,E,C;oB,O,E,C;;;Y,a;gB,I,G,a;gB,O,E,C;gB,O;oB,W,E,C;oB,W,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,uC;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,K;gB,U,G,C;;;gB,I,G,E;gB,I,G,U;gB,U,E,C;gB,W,G,wC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,c,G,S;gB,U,G,I;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,2C;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,C;wB,I,G,a;wB,O,E,C;;;gB,Q,E,I;gB,U,G,E;;;gB,I,G,K;gB,I,G,I;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,0D;gB,M;;wB,I,G,K;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,K;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,iC;gB,M;;;Q,I;Q,K,G,O;;;Q,I,G,iB;Q,M,G,Y;Q,O,G,e;Q,S,G,e;Q,S,G,e;S,O;a,K;;Q,K;Y,K,G,oc;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,+E;gB,M;;wB,I,G,M;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,2I;gB,M;;wB,I,G,M;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;Q,I;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;a,O;;Q,K;Y,K,G,iB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,sC;gB,M;;wB,I,G,G;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;wB,I,G,K;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;wB,I,G,I;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,iB;;;Q,I;a,I;;Q,K,G,O;;;Q,I,G,O;Q,M,G,Y;Q,O,G,O;Q,S,G,O;Q,S,G,O;S,O;a,K;a,O;;Q,K;Y,K,G,mC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,W,E,C;wB,W,E,G;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,kF;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,O;gB,I,G,S;gB,U,E,C;gB,W,G,8C;gB,M;gB,c,G,S;;;Q,I;;;Q,I,G,O;Q,M,G,Y;Q,O,G,O;Q,S,G,O;Q,S,G,O;S,O;a,K;;Q,K;Y,K,G,yP;;Q,e,E,C;Q,K;Y,a;gB,I,G,a;gB,O,E,C;gB,O,E,I;gB,O;oB,oB,E,E;oB,e,E,C;oB,e,E,C;oB,e,E,C;oB,e,E,C;oB,e,E,C;oB,e,E,E;oB,oB,E,E;oB,kB,E,E;oB,W,E,G;oB,iB,E,G;oB,c,E,I;oB,Q,E,I;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,Q;gB,U,E,C;gB,W,G,4oB;gB,M;gB,c,G,Q;gB,S,E,I;;;gB,I,G,M;gB,I,G,Q;gB,U,E,C;gB,W,G,4oB;gB,M;;wB,I,G,K;wB,I,G,a;wB,O,E,C;;;wB,I,G,Y;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;gB,S,E,I;gB,U,G,gB;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,qD;gB,M;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,6T;gB,M;gB,Q,E,I;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,yC;gB,M;gB,Q,E,I;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,6R;gB,M;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,S,E,I;gB,U,G,U;;;gB,I,G,M;gB,I,G,U;gB,U,E,G;gB,W,G,6R;gB,M;;wB,I,G,O;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,K;;;gB,I,G,O;gB,I,G,gB;gB,U,E,G;gB,W,G,kpB;gB,M;;wB,I,G,M;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,W;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,oC;gB,M;gB,Q,E,I;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,gO;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,kB;gB,U,E,G;gB,W,G,kE;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,C;;;gB,I,G,K;gB,I,G,kB;gB,U,E,G;gB,W,G,kF;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,W,E,S;wB,W,E,U;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,6B;gB,U,E,G;gB,W,G,uH;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,W,E,S;wB,W,E,U;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,gB;gB,U,E,G;gB,W,G,uD;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,C;;;gB,I,G,E;gB,I,G,e;gB,U,E,G;gB,W,G,iD;gB,M;;wB,I,G,C;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;wB,U,E,G;wB,U,E,G;;;gB,Q,E,I;gB,Q,E,I;gB,iB,E,K;gB,U,G,G;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,iB,E,K;gB,U,G,G;;;Q,I;a,C;a,I;;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;;Q,K;Y,K,G,0D;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,K,E,C;oB,G,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,8E;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,S;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;a,O;;Q,K;Y,K,G,yF;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,U,E,C;oB,Q,E,C;oB,K,E,C;oB,K,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,gC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,I;wB,U,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;;;Q,I,G,G;Q,M,G,Y;Q,O,G,G;Q,S,G,G;Q,S,G,G;S,O;a,K;;Q,K;Y,K,G,qN;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,iE;gB,M;;wB,I,G,Q;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;Q,I;;;Q,I,G,U;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;;Q,K;Y,K,G,0E;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,G,E,C;oB,O,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,I;gB,U,E,C;gB,W,G,wH;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,c,G,K;gB,U,G,C;;;gB,I,G,E;gB,I,G,U;gB,U,E,C;gB,W,G,6F;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,c,G,S;gB,U,G,I;;;gB,I,G,K;gB,I,G,I;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,+B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;Q,K,G,O;;;Q,I,G,gB;Q,M,G,Y;Q,O,G,I;Q,S,G,I;Q,S,G,I;S,O;a,K;a,O;;Q,K;Y,K,G,iC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,G,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,G;wB,U,E,I;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,mB;gB,U,E,G;gB,W,G,uF;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,I;Q,M,G,Y;Q,O,G,I;Q,S,G,I;Q,S,G,I;S,O;a,K;a,O;;Q,K;Y,K,G,+B;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,Y,E,C;oB,Y,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,oC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,iD;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,C;a,I;;Q,K,G,M;;;Q,I,G,S;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;a,O;;Q,K;Y,K,G,mB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,C;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,C;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,C;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,U,G,oB;;;gB,I,G,E;gB,I,G,oB;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,gD;gB,M;;wB,I,G,C;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,U,G,M;;;Q,I;Q,K,G,Q;;;Q,I,G,U;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;a,O;;Q,K;Y,K,G,qL;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,M,E,C;oB,K,E,C;oB,K,E,C;oB,I,E,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,E;wB,U,E,G;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,gB;gB,U,E,G;gB,W,G,gD;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;Q,K,G,S;;;Q,I,G,W;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;;Q,K;Y,K,G,wK;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,kB;gB,U,E,G;gB,W,G,kD;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,qB;gB,U,E,G;gB,W,G,8C;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,iB;gB,U,E,G;gB,W,G,qH;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;wB,I,G,oB;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,iB;gB,U,G,Q;;;gB,I,G,W;gB,I,G,a;gB,U,E,C;gB,W,G,qH;gB,M;;wB,I,G,oB;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,K;wB,O,E,C;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,e;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,iB;gB,U,G,oC;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,2G;gB,M;;wB,I,G,oB;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,K;wB,O,E,C;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,e;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,oC;;;gB,I,G,O;gB,I,G,a;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,oB;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,K;;;gB,I,G,O;gB,I,G,mB;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,oB;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,4D;gB,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,C;gB,W,G,uG;gB,M;gB,c,G,M;;;Q,I;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;;Q,K;Y,K,G,oU;;Q,e,E,S;Q,K;Y,S;gB,I,G,S;gB,O,E,C;gB,O,E,I;gB,O;oB,I,E,C;oB,W,E,C;oB,S,E,C;oB,O,E,C;oB,O,E,C;oB,Y,E,E;oB,U,E,E;oB,Q,E,E;oB,Q,E,G;;;Y,M;gB,I,G,M;gB,O,E,C;gB,O;oB,K,E,C;oB,E,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,G;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;wB,I,G,S;wB,I,G,S;wB,O,E,C;;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,Y;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,wB;gB,M;;;Q,I;a,I;;;;Q,I,G,S;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;;Q,K;Y,K,G,qB;;Q,e,E,S;Q,K;Y,M;gB,I,G,M;gB,O,E,C;gB,O,E,I;gB,O;oB,I,E,C;oB,K,E,C;oB,M,E,C;;;Y,W;gB,I,G,W;gB,O,E,C;gB,O;oB,E,E,C;oB,I,E,C;oB,K,E,C;oB,W,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,6P;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;wB,I,G,K;wB,I,G,W;wB,O,E,C;;;gB,U,G,M;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,4G;gB,M;;wB,I,G,E;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,E;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,W;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,uH;gB,M;;wB,I,G,E;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;Q,I;a,I;;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;a,O;;Q,K;Y,K,G,mD;Y,S,G,iC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,6D;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,G;wB,U,E,C;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,yF;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,Y;gB,U,E,G;gB,W,G,qC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,Y,E,C;;;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,Y;gB,U,E,G;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,Y,E,G;;;gB,c,G,W;gB,U,G,M;;;Q,I;a,C;a,I;;Q,K,G,W;;;Q,I,G,W;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;a,O;;Q,K;Y,K,G,+L;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,sD;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,M;wB,U,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;Q,I;a,I;a,M;;Q,K,G,O;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;;Q,K;Y,K,G,0G;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,Y;gB,U,E,G;gB,W,G,4D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,e;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,wG;gB,M;;wB,I,G,M;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,U;gB,U,E,C;gB,W,G,qE;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,I;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,4G;gB,M;;wB,I,G,I;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,c;;;gB,I,G,K;gB,I,G,c;gB,U,E,G;gB,W,G,4E;gB,M;;wB,I,G,C;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,wC;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,0f;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,oO;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;Q,I;;;Q,I,G,c;Q,M,G,Y;Q,O,G,c;Q,S,G,c;Q,S,G,c;S,O;a,K;;Q,K;Y,K,G,yI;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;Q,I;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;a,O;;Q,K;Y,K,G,+B;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O,E,I;gB,O;oB,I,E,C;oB,E,E,C;oB,K,E,C;oB,I,E,C;oB,C,E,E;oB,C,E,E;oB,I,E,E;oB,M,E,G;oB,K,E,G;oB,I,E,G;oB,C,E,I;oB,C,E,I;;;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,K,E,C;oB,U,E,C;oB,W,E,C;oB,O,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,kU;gB,M;;wB,I,G,O;wB,I,G,O;wB,O,E,C;;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,E;;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,U,G,e;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,8B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,iB;gB,U,E,G;gB,W,G,qQ;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,e;gB,U,E,C;gB,W,G,8C;gB,M;;wB,I,G,O;wB,I,G,O;wB,O,E,C;;;gB,c,G,M;gB,U,G,G;;;Q,I;a,I;a,M;;Q,K,G,M;;;Q,I,G,G;Q,M,G,Y;Q,O,G,G;Q,S,G,G;Q,S,G,G;S,O;a,K;;Q,K;Y,K,G,wE;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,W,E,C;oB,G,E,C;oB,K,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,O;gB,U,E,G;gB,W,G,yE;gB,M;;wB,I,G,M;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,O;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,W;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,6B;gB,M;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,Q;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,0D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;;;gB,Q,E,I;gB,c,G,S;gB,U,G,G;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,kE;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,wD;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,U,E,G;wB,U,E,G;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,kB;gB,U,E,G;gB,W,G,oE;gB,M;;wB,I,G,C;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,U,E,E;wB,U,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;a,M;;Q,K,G,K;;;Q,I,G,S;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;;Q,K;Y,K,G,4D;Y,I,G,ohF;;Q,e,E,S;Q,K;Y,S;gB,I,G,S;gB,O,E,C;gB,O;oB,W,E,C;oB,M,E,E;oB,M,E,E;;;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,K,E,C;oB,I,E,C;oB,K,E,C;oB,K,E,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,U;gB,U,E,C;gB,W,G,wF;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;wB,Y,E,I;;;gB,c,G,S;gB,U,G,I;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,6N;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,I;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,kK;gB,M;;wB,I,G,C;wB,I,G,S;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yP;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,E;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,sT;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,0D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;;;gB,c,G,S;gB,U,G,G;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,gG;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,+I;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,C;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,O;gB,I,G,G;gB,U,E,G;gB,W,G,qE;gB,M;;wB,I,G,O;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;Q,I;a,C;;Q,K,G,K;;;Q,I,G,W;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;a,O;;Q,K;Y,K,G,wC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,a,E,C;oB,S,E,C;oB,O,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,kB;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;a,M;;Q,K,G,O;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;;Q,K;Y,K,G,+C;;Q,e,E,S;Q,K;Y,Q;gB,I,G,Q;gB,O,E,C;gB,O;oB,K,E,C;oB,G,E,C;oB,O,E,C;qB,K,G,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,yW;gB,M;;wB,I,G,C;wB,I,G,Q;wB,O,E,C;wB,Y,E,C;;;gB,U,G,E;;;gB,I,G,M;gB,I,G,K;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,M;gB,I,G,G;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,M;gB,I,G,I;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,M;gB,I,G,K;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,O;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;Q,I;a,C;;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,U;Q,S,G,Y;Q,S,G,Y;S,O;a,K;a,O;;Q,K;Y,K,G,sB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,6H;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,W;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,sB;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,G;;;gB,I,G,O;gB,I,G,S;gB,U,E,C;gB,W,G,2F;gB,M;gB,c,G,S;;;Q,I;;;Q,I,G,a;Q,M,G,Y;Q,O,G,Y;Q,S,G,Y;Q,S,G,Y;S,O;a,K;a,O;;Q,K;Y,K,G,yC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,Q,E,C;oB,Q,E,C;oB,S,E,C;oB,iB,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,kK;gB,M;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,I;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,+B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,K;wB,I,G,O;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,I;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,6M;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,I;gB,U,E,C;gB,W,G,sF;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,c,G,M;gB,U,G,E;;;gB,I,G,K;gB,I,G,E;gB,U,E,C;gB,W,G,sF;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,c,G,Q;gB,U,G,E;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,yE;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,mE;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;Q,I;Q,K,G,M;;;Q,I,G,U;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;;Q,K;Y,K,G,4B;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,M;gB,U,E,G;gB,W,G,0N;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,M;gB,U,G,S;;;gB,I,G,E;gB,I,G,e;gB,U,E,G;gB,W,G,0F;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;Q,I;Q,K,G,K;;;Q,I,G,W;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;;Q,K;Y,K,G,qB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,2C;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,oF;gB,M;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,8D;gB,M;;wB,I,G,I;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;Q,I;Q,K,G,K;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;;Q,K;Y,K,G,+S;;Q,e,E,S;Q,K;Y,W;gB,I,G,W;gB,O,E,C;gB,O;oB,M,E,S;oB,I,E,S;oB,mB,E,S;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,oV;gB,M;;wB,I,G,U;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,G;;;gB,I,G,M;gB,I,G,S;gB,U,E,G;gB,W,G,oV;gB,M;;wB,I,G,U;wB,I,G,S;wB,O,E,C;;;gB,S,E,I;gB,Q,G,S;gB,U,G,G;;;gB,I,G,O;gB,I,G,O;gB,U,E,G;gB,W,G,iL;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,O;gB,S,E,I;gB,U,G,K;;;gB,I,G,M;gB,I,G,O;gB,U,E,G;gB,W,G,iL;gB,M;;wB,I,G,M;wB,I,G,S;wB,O,E,C;;;gB,S,E,I;gB,Q,G,O;gB,U,G,G;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,+R;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,oD;gB,M;;wB,I,G,M;wB,O,E,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,8B;gB,M;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;gB,U,G,M;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,+B;gB,M;;wB,I,G,S;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;gB,U,G,M;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,oB;gB,U,E,G;gB,W,G,kD;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,+B;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yE;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,qO;gB,M;;wB,I,G,C;wB,I,G,W;wB,O,E,C;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,c;gB,U,E,G;gB,W,G,gC;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,gH;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,U,G,E;;;Q,I;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;a,O;;Q,K;Y,K,G,0E;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,G,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,wD;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,E;;;gB,I,G,K;gB,I,G,Y;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,uB;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,Q;gB,U,E,C;gB,W,G,wB;gB,M;gB,c,G,M;;;Q,I;a,I;;Q,K,G,Q;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;;Q,K;Y,K,G,0B;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,I;gB,U,E,C;gB,W,G,sO;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,E;;;gB,c,G,K;gB,U,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,gF;gB,M;;wB,I,G,C;wB,I,G,K;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,oD;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;Q,I;a,C;a,I;;;;Q,I,G,U;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;a,O;;Q,K;Y,K,G,+C;Y,M,G,oD;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,kO;gB,M;;wB,I,G,W;wB,I,G,G;wB,O,E,E;wB,Y,E,I;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,K;gB,I,G,K;gB,U,E,C;gB,W,G,iC;gB,M;;wB,I,G,O;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,c,G,M;gB,U,G,G;;;gB,I,G,K;gB,I,G,O;gB,U,E,C;gB,W,G,2C;gB,M;;wB,I,G,O;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,c,G,Q;gB,U,G,G;;;gB,I,G,K;gB,I,G,G;gB,U,E,G;gB,W,G,+D;gB,M;;wB,I,G,O;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,6E;gB,M;;wB,I,G,O;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,4F;gB,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,4F;gB,M;;;Q,I;Q,K,G,M;;;Q,I,G,a;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,iC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,M,E,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,oC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,mD;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,C;a,I;;Q,K,G,M;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;;Q,K;Y,K,G,yB;Y,I,G,ukR;;Q,e,E,S;Q,K;Y,W;gB,I,G,W;gB,O,E,C;gB,O;oB,U,E,C;oB,Q,E,C;oB,Q,E,C;oB,a,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,8J;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;wB,Y,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,wL;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,G;wB,U,E,C;;;gB,Q,E,I;gB,c,G,S;gB,U,G,G;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,gN;gB,M;;wB,I,G,C;wB,I,G,W;wB,O,E,C;;;gB,Q,E,I;gB,U,G,E;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,O;gB,U,G,G;;;gB,I,G,E;gB,I,G,e;gB,U,E,G;gB,W,G,iB;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,U,E,I;wB,U,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,U,G,K;;;gB,I,G,K;gB,I,G,gB;gB,U,E,G;gB,W,G,kH;gB,M;;wB,I,G,C;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,sB;gB,U,E,G;gB,W,G,4O;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,oB;gB,U,E,G;gB,W,G,4O;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,K;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,qD;gB,M;;;gB,I,G,K;gB,I,G,oB;gB,U,E,C;gB,W,G,wC;gB,M;;wB,I,G,Y;wB,I,G,W;wB,O,E,C;;;gB,c,G,M;gB,U,G,E;;;Q,I;;;Q,I,G,e;Q,M,G,Y;Q,O,G,c;Q,S,G,c;Q,S,G,c;S,O;a,K;;Q,K;Y,K,G,iC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,S;gB,U,E,C;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,gB;gB,U,G,K;;;Q,I;a,I;;Q,K,G,M;;;Q,I,G,a;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;;Q,K;Y,K,G,6J;Y,I,G,4iB;Y,S,G,yH;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,O;gB,U,E,G;gB,W,G,2C;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,0B;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,0B;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,6B;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,6B;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,8C;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,E;gB,I,G,gB;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,a;;;gB,I,G,E;gB,I,G,gB;gB,U,E,G;gB,W,G,iE;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,a;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,iC;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,I;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,uD;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,I;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,wC;gB,M;;wB,I,G,I;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,K;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,K;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,iD;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,a;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,6C;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,I;;;gB,I,G,O;gB,I,G,M;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,I;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,O;gB,U,E,G;gB,W,G,2B;gB,M;;wB,I,G,K;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,e;gB,U,E,G;gB,W,G,0B;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,G;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,a;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,8B;gB,M;;wB,I,G,E;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,M;wB,I,G,M;wB,O,E,C;;;gB,U,G,I;;;gB,I,G,O;gB,I,G,a;gB,U,E,G;gB,W,G,oE;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,a;gB,U,G,K;;;gB,I,G,W;gB,I,G,O;gB,U,E,C;gB,W,G,oE;gB,M;;wB,I,G,I;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,a;gB,U,G,E;;;Q,I;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,qL;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,oC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;wB,U,E,E;wB,U,E,G;;;gB,Q,E,I;gB,c,G,O;gB,U,G,I;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,gD;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,I;;;Q,I;a,I;;Q,K,G,S;;;Q,I,G,U;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;a,O;;Q,K;Y,K,G,wF;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,oC;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,K;gB,U,G,M;;;gB,I,G,K;gB,I,G,uB;gB,U,E,G;gB,W,G,2D;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,kB;gB,U,G,M;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,e;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,oE;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,Q,E,C;oB,O,E,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yM;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,Y;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,C;;;wB,I,G,I;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,qB;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,2D;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,oD;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,8C;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,2C;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,K;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,Y;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,C;;;wB,I,G,I;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,E;;;gB,U,G,qB;;;Q,I;a,I;;;;Q,I,G,e;Q,M,G,Y;Q,O,G,c;Q,S,G,c;Q,S,G,c;S,O;a,K;a,O;;Q,K;Y,K,G,uF;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,e,E,C;oB,c,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,8F;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,I;gB,U,E,C;gB,W,G,mD;gB,M;gB,c,G,Q;;;gB,I,G,K;gB,I,G,K;gB,U,E,C;gB,W,G,mD;gB,M;gB,c,G,M;;;Q,I;a,I;;Q,K,G,O;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;;Q,K;Y,K,G,kB;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,iB,E,C;oB,U,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,C;gB,W,G,2E;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,iC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,qB;gB,U,E,G;gB,W,G,+C;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,uH;gB,M;gB,c,G,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,C;gB,W,G,wH;gB,M;gB,c,G,Q;;;Q,I;a,I;;;;Q,I,G,uB;Q,M,G,Y;Q,O,G,G;Q,S,G,G;Q,S,G,G;S,O;a,K;;Q,K;Y,K,G,sS;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,O,E,C;oB,Q,E,C;oB,S,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,uK;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,C;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,iZ;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;;Q,K;Y,K,G,0xB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,yc;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;wB,Y,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,mB;gB,U,E,G;gB,W,G,+D;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,oF;gB,M;;wB,I,G,S;wB,I,G,K;wB,O,E,C;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,O;;;gB,I,G,M;gB,I,G,Q;gB,U,E,G;gB,W,G,oF;gB,M;;wB,I,G,S;wB,I,G,K;wB,O,E,C;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,S,E,I;gB,U,G,S;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,kD;gB,M;;wB,I,G,S;wB,I,G,K;wB,O,E,C;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,S;;;gB,I,G,O;gB,I,G,e;gB,U,E,G;gB,W,G,yB;gB,M;;;gB,I,G,O;gB,I,G,iB;gB,U,E,G;gB,W,G,mC;gB,M;;wB,I,G,Y;wB,I,G,I;wB,O,E,E;;;gB,Q,G,iB;gB,U,G,K;;;gB,I,G,W;gB,I,G,Y;gB,U,E,C;gB,W,G,mC;gB,M;;wB,I,G,S;wB,I,G,K;wB,O,E,C;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,Q,G,iB;gB,U,G,S;;;gB,I,G,O;gB,I,G,mB;gB,U,E,G;gB,W,G,yG;gB,M;;wB,I,G,c;wB,I,G,I;wB,O,E,E;;;gB,Q,G,mB;gB,U,G,K;;;gB,I,G,W;gB,I,G,c;gB,U,E,C;gB,W,G,yG;gB,M;;wB,I,G,S;wB,I,G,K;wB,O,E,C;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,Q,G,mB;gB,U,G,a;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,yC;gB,M;gB,c,G,M;;;Q,I;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,qF;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,+I;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,G;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,sG;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;Q,I;a,C;a,I;;Q,K,G,M;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;a,O;;Q,K;Y,K,G,e;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,kD;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,E;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,E;wB,I,G,I;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;wB,I,G,O;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,U,G,kC;;;Q,I;;;Q,I,G,iB;Q,M,G,Y;Q,O,G,gB;Q,S,G,gB;Q,S,G,gB;S,O;a,K;;Q,K;Y,K,G,yJ;;Q,e,E,S;Q,K;Y,U;gB,I,G,U;gB,O,E,C;gB,O;oB,E,E,C;oB,E,E,G;oB,G,E,E;oB,G,E,G;oB,G,E,E;oB,G,E,G;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,oE;gB,M;;wB,I,G,iB;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,iB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,S;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;wB,I,G,a;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,U;wB,O,E,C;;;wB,I,G,Y;wB,I,G,E;wB,O,E,E;wB,Y,E,I;;;gB,U,G,mC;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,qE;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,sB;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,C;;;Q,I;;;Q,I,G,K;Q,M,G,Y;Q,O,G,K;Q,S,G,K;Q,S,G,K;S,O;a,K;;Q,K;Y,K,G,yL;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,K;gB,U,E,C;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;wB,U,E,G;wB,U,E,E;;;gB,c,G,K;gB,U,G,M;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,mE;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,U,G,M;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,6B;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;wB,Y,E,G;;;gB,c,G,S;gB,U,G,M;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,kD;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,S;gB,U,E,G;gB,W,G,8B;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;wB,Y,E,E;;;gB,c,G,S;gB,U,G,M;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,mD;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,K;gB,I,G,Y;gB,U,E,G;gB,W,G,0H;gB,M;;wB,I,G,C;wB,I,G,K;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,c;gB,U,E,G;gB,W,G,kB;gB,M;;wB,I,G,C;wB,I,G,M;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;Q,I;a,C;;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;;Q,K;Y,K,G,8D;Y,I,G,mR;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,G;gB,U,E,G;gB,W,G,qF;gB,M;;wB,I,G,G;wB,I,G,M;wB,O,E,C;;;gB,S,E,I;gB,U,G,C;;;gB,I,G,M;gB,I,G,G;gB,U,E,G;gB,W,G,qF;gB,M;;wB,I,G,G;wB,I,G,O;wB,O,E,C;;;wB,I,G,K;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,S,E,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,G;gB,U,E,G;gB,W,G,iC;gB,M;;wB,I,G,G;wB,I,G,O;wB,O,E,C;;;wB,I,G,K;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,E,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,M;gB,U,E,G;gB,W,G,uB;gB,M;;wB,I,G,G;wB,I,G,M;wB,O,E,C;;;gB,U,E,I;gB,U,G,C;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,S;gB,U,G,K;;;gB,I,G,W;gB,I,G,U;gB,U,E,C;gB,W,G,4B;gB,M;;wB,I,G,G;wB,I,G,M;wB,O,E,C;;;gB,Q,G,S;gB,U,G,C;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,uC;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,I;gB,U,G,K;;;gB,I,G,W;gB,I,G,Y;gB,U,E,C;gB,W,G,uC;gB,M;;wB,I,G,G;wB,I,G,O;wB,O,E,C;;;wB,I,G,K;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,gB;gB,M;gB,U,E,I;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,8C;gB,M;gB,c,G,M;;;Q,I;;;Q,I,G,iB;Q,M,G,Y;Q,O,G,mB;Q,S,G,mB;Q,S,G,mB;S,O;a,K;;Q,K;Y,K,G,qD;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,C;gB,W,G,8b;gB,M;;wB,I,G,C;wB,Q,G,M;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,K;gB,U,G,C;;;gB,I,G,E;gB,I,G,U;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,S;gB,U,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,sJ;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,U,G,E;;;gB,I,G,K;gB,I,G,W;gB,U,E,G;gB,W,G,8C;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,U,G,E;;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,O;gB,I,G,U;gB,U,E,G;gB,W,G,kE;gB,M;;wB,I,G,K;wB,O,E,I;wB,I,G,G;wB,O,E,C;;;gB,M,E,I;gB,U,G,G;;;gB,I,G,O;gB,I,G,Q;gB,U,E,G;gB,W,G,mF;gB,M;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,M,E,I;gB,U,G,C;;;Q,I;a,I;;Q,K,G,O;;;Q,I,G,a;Q,M,G,Y;Q,O,G,Y;Q,S,G,Y;Q,S,G,Y;S,O;a,K;a,O;;Q,K;Y,K,G,uB;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,S,E,C;oB,U,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,2D;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,qC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,Q;Q,S,G,Q;Q,S,G,Q;S,O;a,K;;Q,K;Y,K,G,yE;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,Q,E,C;oB,K,E,C;oB,K,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,C;gB,W,G,4E;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,oC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;;;Q,I,G,W;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;a,O;;Q,K;Y,K,G,8E;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,8B;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,+M;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,+M;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,c;gB,U,E,C;gB,W,G,wC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,gB;gB,U,G,K;;;gB,I,G,E;gB,I,G,e;gB,U,E,C;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,kB;gB,U,G,K;;;gB,I,G,K;gB,I,G,I;gB,U,E,C;gB,W,G,oC;gB,M;gB,c,G,M;;;gB,I,G,K;gB,I,G,K;gB,U,E,C;gB,W,G,6C;gB,M;gB,c,G,Q;;;Q,I;a,I;;Q,K,G,K;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;;Q,K;Y,K,G,qI;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,M;gB,U,E,C;gB,W,G,qG;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,c,G,S;gB,U,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,uB;gB,M;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,6C;gB,M;;wB,I,G,W;wB,I,G,I;wB,O,E,E;;;gB,Q,G,W;gB,U,G,K;;;gB,I,G,W;gB,I,G,gB;gB,U,E,C;gB,W,G,6C;gB,M;;wB,I,G,Q;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,Q,G,W;gB,U,G,K;;;Q,I;Q,K,G,K;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,6C;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,O;gB,U,G,C;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,6B;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,a;gB,U,E,G;gB,W,G,wF;gB,M;;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,C;wB,W,E,C;wB,W,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,sE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,sE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;gB,U,G,G;;;gB,I,G,E;gB,I,G,uB;gB,U,E,G;gB,W,G,qN;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;wB,Y,E,G;;;gB,U,G,I;;;Q,I;Q,K,G,K;;;Q,I,G,gB;Q,M,G,Y;Q,O,G,e;Q,S,G,e;Q,S,G,e;S,O;a,K;;Q,K;Y,K,G,oB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,yD;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,kF;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,C;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,sB;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;wB,Y,E,C;;;gB,Q,E,I;gB,U,G,I;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,oB;gB,M;;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,Y,E,C;wB,W,E,C;wB,W,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,mB;gB,M;;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,Y,E,C;wB,W,E,G;wB,W,E,E;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,O;gB,I,G,K;gB,U,E,G;gB,W,G,wH;gB,M;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,M;gB,U,E,G;gB,W,G,sE;gB,M;;;Q,I;;;Q,I,G,M;Q,M,G,Y;Q,O,G,M;Q,S,G,M;Q,S,G,M;S,O;a,K;a,O;;Q,K;Y,K,G,mC;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,K,E,C;oB,I,E,C;oB,U,E,C;oB,O,E,C;oB,M,E,C;oB,S,E,C;oB,Q,E,C;oB,S,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,sD;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,K;gB,I,G,c;gB,U,E,G;gB,W,G,wJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,E;gB,U,E,C;gB,W,G,gD;gB,M;gB,c,G,M;;;gB,I,G,K;gB,I,G,G;gB,U,E,C;gB,W,G,gD;gB,M;gB,c,G,Q;;;Q,I;a,I;;Q,K,G,M;;;Q,I,G,G;Q,M,G,Y;Q,O,G,G;Q,S,G,G;Q,S,G,G;S,O;a,K;;Q,K;Y,K,G,iD;Y,Q,G,Q;;Q,e,E,S;Q,K;Y,Q;gB,I,G,Q;gB,O,E,E;gB,O;oB,c,E,C;oB,qB,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,yH;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,I;gB,S,E,I;gB,U,G,K;;;gB,I,G,M;gB,I,G,I;gB,U,E,G;gB,W,G,yH;gB,M;;wB,I,G,a;wB,I,G,S;wB,O,E,C;;;gB,S,E,I;gB,Q,G,I;gB,U,G,G;;;gB,I,G,iB;gB,I,G,Q;gB,U,E,C;gB,W,G,uM;gB,M;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,M;wB,O,E,C;;;gB,Q,G,I;gB,U,G,K;;;gB,I,G,Y;gB,I,G,O;gB,U,E,C;gB,W,G,oE;gB,M;;wB,I,G,I;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,I;gB,U,G,C;;;gB,I,G,W;gB,I,G,M;gB,U,E,C;gB,W,G,4E;gB,M;;wB,I,G,I;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,Q,G,I;gB,U,G,C;;;gB,I,G,gB;gB,I,G,K;gB,U,E,C;gB,W,G,sG;gB,M;;wB,I,G,K;wB,I,G,Q;wB,O,E,E;;;gB,Q,G,I;gB,U,G,G;;;Q,I;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,Y;Q,S,G,Y;Q,S,G,Y;S,O;a,K;a,O;;Q,K;Y,K,G,yD;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,K,E,C;oB,K,E,C;oB,K,E,C;oB,K,E,C;oB,K,E,C;oB,K,E,C;oB,K,E,C;oB,K,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,gB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,wC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,c,G,W;gB,U,G,M;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,wG;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,W;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;a,O;;Q,K;Y,K,G,sD;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,O,E,C;oB,M,E,C;oB,I,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,gB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,wC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,e;gB,U,E,G;gB,W,G,yC;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,E;;;gB,c,G,W;gB,U,G,M;;;gB,I,G,E;gB,I,G,iB;gB,U,E,G;gB,W,G,wG;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,C;a,I;;Q,K,G,W;;;Q,I,G,a;Q,M,G,Y;Q,O,G,Y;Q,S,G,Y;Q,S,G,Y;S,O;a,K;;Q,K;Y,K,G,yD;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,G;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,kC;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;Q,I;a,I;;;;Q,I,G,+B;Q,M,G,Y;Q,O,G,I;Q,S,G,I;Q,S,G,I;S,O;a,K;a,O;;Q,K;Y,K,G,2D;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,W,E,C;wB,U,E,I;wB,U,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,Q;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,mB;gB,U,E,G;gB,W,G,uF;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,Q;Q,M,G,Y;Q,O,G,O;Q,S,G,O;Q,S,G,O;S,O;a,K;a,O;;Q,K;Y,K,G,iF;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,O,E,C;oB,U,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,Q;gB,U,E,G;gB,W,G,oD;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;wB,U,E,E;wB,U,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,6C;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;Q,K,G,W;;;Q,I,G,kB;Q,M,G,Y;Q,O,G,uB;Q,S,G,iB;Q,S,G,iB;S,O;a,K;;Q,K;Y,K,G,8I;;Q,e,E,S;Q,K;Y,M;gB,I,G,M;gB,O,E,C;gB,O;oB,O,E,C;oB,O,E,C;oB,M,E,C;;;Y,e;gB,I,G,e;gB,O,E,C;gB,O;oB,S,E,C;oB,Y,E,C;oB,M,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,gB;gB,U,E,G;gB,W,G,sF;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,yB;gB,U,E,G;gB,W,G,qE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,U,G,G;;;gB,I,G,K;gB,I,G,gB;gB,U,E,G;gB,W,G,wB;gB,M;;wB,I,G,C;wB,I,G,e;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,oB;gB,U,E,G;gB,W,G,qD;gB,M;;wB,I,G,U;wB,I,G,C;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,Q;wB,I,G,K;wB,O,E,C;wB,Y,E,I;;;gB,U,G,K;;;gB,I,G,O;gB,I,G,0B;gB,U,E,G;gB,W,G,2H;gB,M;;;gB,I,G,O;gB,I,G,4B;gB,U,E,G;gB,W,G,2K;gB,M;;;gB,I,G,K;gB,I,G,uB;gB,U,E,C;gB,W,G,+C;gB,M;;wB,I,G,gB;wB,I,G,M;wB,O,E,C;;;gB,c,G,M;gB,U,G,E;;;gB,I,G,K;gB,I,G,2B;gB,U,E,G;gB,W,G,oC;gB,M;;;Q,I;;;Q,I,G,e;Q,M,G,Y;Q,O,G,S;Q,S,G,c;Q,S,G,c;S,O;a,K;;Q,K;Y,K,G,kB;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,+D;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,O;gB,I,G,O;gB,U,E,G;gB,W,G,iG;gB,M;;wB,I,G,Q;wB,I,G,G;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,Y,E,I;;;wB,I,G,K;wB,I,G,C;wB,K,E,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,U;;;Q,I;;;Q,I,G,W;Q,M,G,Y;Q,O,G,U;Q,S,G,U;Q,S,G,U;S,O;a,K;a,O;;Q,K;Y,K,G,0C;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,S,E,C;oB,oB,E,C;oB,uB,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,K;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,C;wB,I,G,C;wB,K,E,E;wB,I,G,K;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,K;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,4B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;Q,I;a,I;;;;Q,I,G,Y;Q,M,G,Y;Q,O,G,W;Q,S,G,W;Q,S,G,W;S,O;a,K;a,O;;Q,K;Y,K,G,0B;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O;oB,I,E,C;oB,I,E,C;oB,O,E,C;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,M;gB,U,E,G;gB,W,G,oB;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,M;;;gB,I,G,E;gB,I,G,Y;gB,U,E,G;gB,W,G,2C;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,+K;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,0C;gB,M;;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,U,G,M;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,U;gB,U,E,G;gB,W,G,sC;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;gB,I,G,K;gB,I,G,iB;gB,U,E,G;gB,W,G,gD;gB,M;;wB,I,G,C;wB,I,G,E;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,kB;gB,U,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,G;gB,W,G,0B;gB,M;;wB,I,G,C;wB,I,G,O;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,U,G,E;;;gB,I,G,O;gB,I,G,qB;gB,U,E,G;gB,W,G,gH;gB,M;;;gB,I,G,O;gB,I,G,c;gB,U,E,G;gB,W,G,4D;gB,M;;wB,I,G,M;wB,I,G,C;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,U,G,M;;;Q,I;a,I;;;;Q,I,G,I;Q,M,G,Y;Q,O,G,I;Q,S,G,I;Q,S,G,I;S,O;a,K;;Q,K;Y,K,G,gc;;Q,e,E,S;Q,K;Y,O;gB,I,G,O;gB,O,E,C;gB,O,E,I;gB,O;oB,W,E,C;oB,G,E,C;oB,wB,E,C;oB,wB,E,C;oB,Y,E,G;oB,Y,E,G;oB,Y,E,I;oB,Y,E,I;oB,a,E,I;oB,a,E,I;oB,kB,E,K;;;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,O;gB,I,G,iB;gB,U,E,G;gB,W,G,uN;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,iB;gB,U,G,K;;;gB,I,G,W;gB,I,G,O;gB,U,E,C;gB,W,G,uN;gB,M;;wB,I,G,K;wB,I,G,O;wB,O,E,C;;;wB,I,G,Q;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,I;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;wB,U,E,I;wB,U,E,G;;;wB,I,G,O;wB,I,G,E;wB,O,E,C;wB,Y,E,I;wB,U,E,C;wB,U,E,E;;;wB,I,G,K;wB,I,G,K;wB,O,E,C;;;wB,I,G,I;wB,I,G,M;wB,O,E,E;wB,Q,E,E;;;gB,Q,G,iB;gB,U,G,wB;;;gB,I,G,O;gB,I,G,W;gB,U,E,G;gB,W,G,8F;gB,M;;wB,I,G,I;wB,I,G,O;wB,O,E,C;;;wB,I,G,Q;wB,I,G,O;wB,O,E,C;wB,U,E,I;;;gB,U,G,G;;;gB,I,G,O;gB,I,G,S;gB,U,E,G;gB,W,G,0J;gB,M;;;gB,I,G,O;gB,I,G,c;gB,U,E,G;gB,W,G,mH;gB,M;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,C;;;gB,I,G,O;gB,I,G,mB;gB,U,E,G;gB,W,G,iC;gB,M;;;gB,I,G,O;gB,I,G,oB;gB,U,E,G;gB,W,G,4F;gB,M;;wB,I,G,Q;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,U,G,K;;;gB,I,G,O;gB,I,G,I;gB,U,E,G;gB,W,G,mE;gB,M;;;gB,I,G,O;gB,I,G,mB;gB,U,E,G;gB,W,G,mE;gB,M;;wB,I,G,O;wB,I,G,I;wB,O,E,E;;;gB,Q,G,mB;gB,U,G,K;;;gB,I,G,W;gB,I,G,e;gB,U,E,C;gB,W,G,mE;gB,M;;wB,I,G,Q;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,K;wB,I,G,G;wB,O,E,E;wB,Y,E,I;;;wB,I,G,I;wB,I,G,M;wB,O,E,C;;;gB,Q,G,mB;gB,U,G,S;;;gB,I,G,E;gB,I,G,O;gB,U,E,C;gB,W,G,2E;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,c,G,S;gB,U,G,E;;;gB,I,G,E;gB,I,G,S;gB,U,E,G;gB,W,G,kE;gB,M;;wB,I,G,C;wB,I,G,I;wB,O,E,C;;;gB,U,G,E;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,+E;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,E;wB,Y,E,I;wB,Q,E,E;;;gB,U,G,K;;;gB,I,G,K;gB,I,G,M;gB,U,E,G;gB,W,G,6G;gB,M;;wB,I,G,C;wB,I,G,K;wB,O,E,C;wB,Y,E,I;wB,Q,E,C;;;gB,U,G,I;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,gG;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,E;wB,Q,E,E;;;gB,U,G,K;;;gB,I,G,E;gB,I,G,I;gB,U,E,G;gB,W,G,yD;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,E;wB,O,E,E;wB,Y,E,I;wB,U,E,I;wB,U,E,G;;;gB,Q,E,I;gB,U,G,E;;;gB,I,G,K;gB,I,G,M;gB,U,E,C;gB,W,G,uD;gB,M;gB,c,G,M;;;gB,I,G,K;gB,I,G,O;gB,U,E,C;gB,W,G,uC;gB,M;gB,c,G,Q;;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,2M;gB,M;;wB,I,G,Y;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,kB;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,U,G,O;;;gB,I,G,K;gB,I,G,gB;gB,U,E,G;gB,W,G,uD;gB,M;;;Q,I;Q,K,G,G;;;Q,I,G,c;Q,M,G,Y;Q,O,G,a;Q,S,G,a;Q,S,G,a;S,O;a,K;a,O;;Q,K;Y,K,G,sC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,c;gB,U,E,G;gB,W,G,0B;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,W,E,C;wB,W,E,G;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,I;gB,U,G,G;;;gB,I,G,E;gB,I,G,oB;gB,U,E,G;gB,W,G,mC;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,a;gB,U,G,G;;;Q,I;a,I;;;;Q,I,G,U;Q,M,G,Y;Q,O,G,S;Q,S,G,S;Q,S,G,S;S,O;a,K;a,O;;Q,K;Y,K,G,kC;;Q,e,E,S;Q,K;;Q,S;;Q,O;;gB,I,G,K;gB,I,G,a;gB,U,E,G;gB,W,G,gT;gB,M;;wB,I,G,C;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,C;gB,O,G,K;;;gB,I,G,E;gB,I,G,W;gB,U,E,G;gB,W,G,6c;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,W;gB,U,G,O;gB,O,G,K;;;gB,I,G,K;gB,I,G,mB;gB,U,E,C;gB,W,G,qD;gB,M;;wB,I,G,I;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;wB,I,G,W;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,mB;gB,U,G,O;gB,O,G,K;;;gB,I,G,E;gB,I,G,iB;gB,U,E,C;gB,W,G,uJ;gB,M;;wB,I,G,C;wB,I,G,C;wB,I,G,E;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,c,G,iB;gB,U,G,E;gB,O,G,O;;;gB,I,G,E;gB,I,G,kB;gB,U,E,C;gB,W,G,8D;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;wB,Y,E,G;wB,U,E,C;wB,U,E,K;;;gB,c,G,kB;gB,U,G,G;gB,O,G,O;;;gB,I,G,K;gB,I,G,4B;gB,U,E,G;gB,W,G,gE;gB,M;;wB,I,G,C;wB,I,G,E;wB,I,G,G;wB,O,E,C;wB,Y,E,I;;;gB,Q,E,I;gB,Q,E,I;gB,c,G,4B;gB,U,G,G;gB,O,G,O;;;gB,I,G,E;gB,I,G,U;gB,U,E,G;gB,W,G,yB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,O;gB,iB,E,K;gB,U,G,M;;;gB,I,G,E;gB,I,G,gB;gB,U,E,G;gB,W,G,oB;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,a;gB,U,G,M;;;gB,I,G,K;gB,I,G,c;gB,U,E,G;gB,W,G,iD;gB,M;;wB,I,G,C;wB,I,G,G;wB,K,E,E;wB,I,G,M;wB,O,E,C;;;gB,Q,E,I;gB,c,G,W;gB,U,G,M;;;Q,I;a,I;;;;A,G,C,kB;;Q,E,G,2C;Q,I,G,oB;Q,O,G,kB;Q,I;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,0C;Q,I,G,qB;Q,O,G,kB;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,8C;Q,I,G,sB;Q,O,G,kB;Q,I;Q,Q;Q,kB;Y,U;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,6C;Q,I,G,sB;Q,O,G,kB;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,U;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,wC;Q,I,G,iB;Q,O,G,kB;Q,I;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,uC;Q,I,G,e;Q,O,G,kB;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,gD;Q,I,G,wB;Q,O,G,kB;Q,I;Q,Q;Y,S;;Q,kB;Y,U;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,uC;Q,I,G,gB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,uC;Q,I,G,gB;Q,O,G,kB;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,qC;Q,I,G,qB;Q,O,G,kB;Q,W,G,kC;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,M,G,U;;;Q,E,G,2C;Q,I,G,sB;Q,O,G,kB;Q,I,G,+C;Q,Q;Y,S;Y,S;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,0C;Q,I,G,uB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;;;Q,E,G,sC;Q,I,G,gB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,wC;Q,I,G,kB;Q,O,G,kB;Q,W;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,iC;Q,I,G,iB;Q,O,G,kB;Q,W,G,oD;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,M,G,U;;;Q,E,G,sC;Q,I,G,uB;Q,O,G,kB;Q,W,G,iE;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,M,G,U;;;Q,E,G,oC;Q,I,G,c;Q,O,G,kB;Q,I,G,wC;Q,Q;Y,S;;Q,kB;Q,S,G,M;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,oC;Q,I,G,c;Q,O,G,kB;Q,I,G,wC;Q,Q;Y,S;;Q,kB;Y,S;;Q,S,G,M;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,iC;Q,I,G,W;Q,O,G,kB;Q,W;Q,I,G,uC;Q,Q;Y,S;Y,S;;Q,kB;Y,U;Y,S;;Q,I;a,G;;Q,S;;gB,I,G,oB;gB,G,G,mF;;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,qC;Q,I,G,e;Q,O,G,kB;Q,W;Q,I,G,uC;Q,Q;Y,S;Y,S;;Q,kB;Y,S;Y,S;;Q,I;a,G;;Q,S;;gB,I,G,oB;gB,G,G,uF;;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,gC;Q,I,G,S;Q,O,G,kB;Q,W;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,gC;Q,I,G,S;Q,O,G,kB;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,wC;Q,I,G,kB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,8B;Q,I,G,c;Q,O,G,kB;Q,W,G,gB;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,M,G,U;;;Q,E,G,wC;Q,I,G,oB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;;;Q,E,G,kC;Q,I,G,c;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,I;a,G;;Q,O,G,G;;;Q,E,G,mC;Q,I,G,iB;Q,O,G,kB;Q,W,G,oC;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,6B;Q,I,G,Q;Q,O,G,kB;Q,W,G,uC;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,4B;Q,I,G,O;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;;;Q,E,G,+B;Q,I,G,U;Q,O,G,kB;Q,W,G,6F;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;;;Q,E,G,qC;Q,I,G,kB;Q,O,G,kB;Q,W,G,kB;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,O,G,G;Q,gB,G,C;;;Q,E,G,6B;Q,I,G,M;Q,O,G,kB;Q,I;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,qC;Q,I,G,e;Q,O,G,kB;Q,W;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,U;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,qC;Q,I,G,e;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,qC;Q,I,G,e;Q,O,G,kB;Q,I,G,0C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;Q,O,G,G;Q,gB,G,E;;;Q,E,G,oC;Q,I,G,mB;Q,O,G,kB;Q,W,G,wE;Q,I,G,2C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Q,M,G,U;;;Q,E,G,0C;Q,I,G,qB;Q,O,G,kB;Q,I;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,Y;;;Q,E,G,6B;Q,I,G,Q;Q,O,G,kB;Q,W,G,6E;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,mC;Q,I,G,a;Q,O,G,kB;Q,W,G,yD;Q,I,G,+C;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,mC;Q,I,G,a;Q,O,G,kB;Q,W,G,uD;Q,I,G,+C;Q,Q;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,0B;Q,I,G,Q;Q,O,G,kB;Q,W,G,4F;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,M,G,U;;;Q,E,G,6B;Q,I,G,Q;Q,O,G,kB;Q,W,G,uE;Q,I,G,+C;Q,I,G,+C;Q,Q;Q,kB;Y,U;;Q,O,G,G;Q,M,G,U;;;Q,E,G,8B;Q,I,G,Y;Q,O,G,kB;Q,W,G,+D;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,8B;Q,I,G,Y;Q,O,G,kB;Q,W,G,iG;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,O,G,G;Q,M,G,U;;;Q,E,G,gC;Q,I,G,c;Q,O,G,kB;Q,W,G,4B;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,gC;Q,I,G,c;Q,O,G,kB;Q,W,G,+D;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,M,G,U;;;Q,E,G,mC;Q,I,G,c;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,uC;Q,I,G,kB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,oC;Q,I,G,e;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,2C;Q,I,G,0B;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Y,U;;Q,I;a,G;;Q,O,G,G;;;Q,E,G,sC;Q,I,G,iB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,gC;Q,I,G,S;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;Q,M,G,U;;;Q,E,G,gC;Q,I,G,S;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,I;a,G;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,8B;Q,I,G,S;Q,O,G,kB;Q,W,G,gC;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,U;;Q,O,G,G;Q,M,G,U;;;Q,E,G,yC;Q,I,G,mB;Q,O,G,kB;Q,I,G,+C;Q,Q;Y,S;;Q,kB;Y,S;;Q,O,G,G;Q,gB,G,E;;;Q,E,G,8C;Q,I,G,yB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Y,S;;Q,O,G,I;Q,gB,G,E;Q,M,G,U;;;Q,E,G,6C;Q,I,G,yB;Q,O,G,kB;Q,W;Q,I,G,+C;Q,I,G,+C;Q,Q;Y,S;Y,S;;Q,kB;Y,S;;Q,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,gBAAgB,CAAC,GAAG;;;WAE3D,KAAK;AAChB,CAAA;A,O,C,a,G,a;A,O,C,a,G,a;A,O,C,K,G,K;A,O,C,Q,G,Q;A,O,C,iB,G,iB;A,O,C,oC,G,oC;A,O,C,kC,G,kC;A,O,C,wB,G,wB;A,O,C,kC,G,kC;A,O,C,mB,G,mB;A,O,C,K,G,K;A,O,C,a,G,a;A,O,C,M,G,M;A,O,C,K,G,K;A,O,C,sB,G,sB;A,O,C,mB,G,mB;A,O,C,sB,G,sB;A,O,C,qB,G,qB;A,O,C,c,G,c;A,O,C,W,G,W;A,O,C,Y,G,Y;A,O,C,W,G,W;A,O,C,Y,G,Y;A,O,C,U,G,U;A,O,C,iB,G,iB;A,O,C,e,G,e;A,O,C,O,G,O;A,O,C,U,G,U;A,O,C,gB,G,gB;A,O,C,e,G,e;A,O,C,iB,G,iB;A,O,C,a,G,a;A,O,C,I,G,I;A,O,C,e,G,e;A,O,C,a,G,a;A,O,C,Y,G,Y;A,O,C,c,G,c;A,O,C,iB,G,iB;A,O,C,oB,G,oB;A,O,C,Y,G,Y;A,O,C,mB,G,mB;A,O,C,kB,G,kB;A,O,C,W,G,W;A,O,C,gB,G,gB;A,O,C,sB,G,sB;A,O,C,c,G,c;A,O,C,U,G,U;A,O,C,a,G,a;A,O,C,kB,G,kB;A,O,C,sB,G,sB;A,O,C,K,G,K;A,O,C,6B,G,6B;A,O,C,6B,G,6B;A,O,C,sB,G,sB;A,O,C,iB,G,iB;A,O,C,K,G,K;A,O,C,e,G,e;A,O,C,e,G,e;A,O,C,qB,G,qB;A,O,C,iB,G,iB;A,O,C,K,G,K;A,O,C,K,G,K;A,O,C,W,G,W;A,O,C,Q,G,Q;A,O,C,e,G,e;A,O,C,oB,G,oB;A,O,C,a,G,a;A,O,C,Y,G,Y;A,O,C,kB,G,kB;A,O,C,gB,G,gB;A,O,C,kB,G,kB;A,O,C,sB,G,sB;A,O,C,6B,G,6B;A,O,C,mB,G,mB;A,O,C,wB,G,wB;A,O,C,mB,G,mB;A,O,C,gB,G,gB;A,O,C,iB,G,iB;A,O,C,W,G,W;A,O,C,oB,G,oB;A,O,C,oB,G,oB;A,O,C,a,G,a;A,O,C,mB,G,mB;A,O,C,mB,G,mB;A,O,C,mB,G,mB;A,O,C,kB,G,kB;A,O,C,a,G,a;A,O,C,gB,G,gB;A,O,C,mB,G,mB;A,O,C,sB,G,sB;A,O,C,a,G,a;A,O,C,Q,G,Q;A,O,C,iB,G,iB;A,O,C,Y,G,Y;A,O,C,Q,G,Q;A,O,C,K,G,K;A,O,C,Q,G,Q;A,O,C,Q,G,Q;A,O,C,O,G,O;A,O,C,O,G,O;A,O,C,a,G,a;A,O,C,O,G,O;A,O,C,M,G,M;A,O,C,U,G,U;A,O,C,gB,G,gB;A,O,C,uB,G,uB;A,O,C,S,G,S;A,O,C,e,G,e;A,O,C,mB,G,mB;A,O,C,iB,G,iB;A,O,C,e,G,e;A,O,C,gC,G,gC;A,O,C,+B,G,+B;A,O,C,4B,G,4B;A,O,C,oB,G,oB;A,O,C,2B,G,2B;A,O,C,qB,G,qB;A,O,C,yC,G,yC;A,O,C,qB,G,qB;A,O,C,0B,G,0B;A,O,C,wB,G,wB;A,O,C,qB,G,qB;A,O,C,yB,G,yB;A,O,C,qB,G,qB;A,O,C,2B,G,2B;A,O,C,qB,G,qB;A,O,C,uB,G,uB;A,O,C,wB,G,wB;A,O,C,uB,G,uB;A,O,C,qB,G,qB;A,O,C,8B,G,8B;A,O,C,Y,G,Y;A,O,C,I,G,I;A,O,C,I,G,I;A,O,C,mB,G,mB;A,O,C,O,G,O;A,O,C,Q,G,Q;A,O,C,e,G,e;A,O,C,Q,G,Q;A,O,C,S,G,S;A,O,C,U,G,U;A,O,C,sB,G,sB;A,O,C,qB,G,qB;A,O,C,Y,G,Y;A,O,C,e,G,e;A,O,C,kB,G,kB;A,O,C,e,G,e;A,O,C,qB,G,qB;A,O,C,Y,G,Y;A,O,C,kB,G,kB;A,O,C,mB,G,mB;A,O,C,oB,G,oB;A,O,C,iB,G,iB;A,O,C,c,G,c;A,O,C,c,G,c;A,O,C,kB,G,kB;A,O,C,c,G,c;A,O,C,c,G,c;A,O,C,uB,G,uB;A,O,C,a,G,a;A,O,C,W,G,W;A,O,C,sB,G,sB;A,O,C,iB,G,iB;A,O,C,e,G,e;A,O,C,iB,G,iB;A,O,C,kB,G,kB;A,O,C,c,G,c;A,O,C,e,G,e;A,O,C,qB,G,qB;A,O,C,Q,G,Q;A,O,C,M,G,M;A,O,C,a,G,a;A,O,C,Y,G,Y;A,O,C,Y,G,Y;A,O,C,O,G,O;A,O,C,qB,G,qB;A,O,C,kB,G,kB;A,O,C,4B,G,4B;A,O,C,mC,G,mC;A,O,C,6B,G,6B;A,O,C,iC,G,iC;A,O,C,sC,G,sC;A,O,C,0C,G,0C;A,O,C,gC,G,gC;A,O,C,gB,G,gB;A,O,C,wB,G,wB;A,O,C,wB,G,wB;A,O,C,wB,G,wB;A,O,C,e,G,e;A,O,C,M,G,M;A,O,C,gB,G,gB;A,O,C,c,G,c;A,O,C,a,G,a;A,O,C,K,G,K;A,O,C,gB,G,gB;A,O,C,O,G,O;A,O,C,U,G,U;A,O,C,W,G,W;A,O,C,mB,G,mB;A,O,C,mB,G,mB;A,O,C,iB,G,iB;A,O,C,Y,G,Y;A,O,C,W,G,W;A,O,C,iB,G,iB;A,O,C,a,G,a;A,O,C,gB,G,gB;A,O,C,oB,G,oB;A,O,C,sB,G,sB;A,O,C,uB,G,uB;A,O,C,iB,G,iB;A,O,C,sB,G,sB;A,O,C,wB,G,wB;A,O,C,sB,G,sB;A,O,C,mB,G,mB;A,O,C,iB,G,iB;A,O,C,kB,G,kB;A,O,C,gB,G,gB;A,O,C,wB,G,wB;A,O,C,kB,G,kB;A,O,C,a,G,a;A,O,C,a,G,a;A,O,C,c,G,c;A,O,C,U,G,U;A,O,C,U,G,U;A,O,C,qB,G,qB;A,O,C,oB,G,oB;A,O,C,qB,G,qB;A,O,C,S,G,S;A,O,C,W,G,W;A,O,C,W,G,W;A,O,C,U,G,U;A,O,C,Y,G,Y;A,O,C,O,G,O;A,O,C,c,G,c;A,O,C,S,G,S;A,O,C,Q,G,Q;A,O,C,a,G,a;A,O,C,c,G,c;A,O,C,e,G,e;A,O,C,gB,G,gB;A,O,C,a,G,a;A,O,C,Y,G,Y;A,O,C,e,G,e;A,O,C,kB,G,kB;A,O,C,kB,G,kB;A,O,C,Y,G,Y;A,O,C,O,G,O;A,O,C,a,G,a;A,O,C,e,G,e;A,O,C,U,G,U;A,O,C,gB,G,gB;A,O,C,iB,G,iB;A,O,C,c,G,c;A,O,C,e,G,e;A,O,C,gB,G,gB;A,O,C,U,G,U;A,O,C,S,G,S;A,O,C,c,G,c;A,O,C,iB,G,iB;A,O,C,S,G,S;A,O,C,mB,G,mB;A,O,C,c,G,c;A,O,C,kB,G,kB;A,O,C,c,G,c;A,O,C,mB,G,mB;A,O,C,mB,G,mB;A,O,C,S,G,S;A,O,C,O,G,O;A,O,C,gB,G,gB;A,O,C,kB,G,kB;A,O,C,S,G,S;A,O,C,qB,G,qB;A,O,C,S,G,S;A,O,C,Y,G,Y;A,O,C,yB,G,yB;A,O,C,iB,G,iB;A,O,C,Y,G,Y;A,O,C,e,G,e;A,O,C,gB,G,gB;A,O,C,kB,G,kB;A,O,C,oB,G,oB;A,O,C,U,G,U;A,O,C,O,G,O;A,O,C,gB,G,gB;A,O,C,e,G,e;A,O,C,iB,G,iB;A,O,C,Q,G,Q;A,O,C,Y,G,Y;A,O,C,sB,G,sB;A,O,C,mB,G,mB;A,O,C,e,G,e;A,O,C,gB,G,gB;A,O,C,Q,G,Q;A,O,C,kB,G,kB;A,O,C,c,G,c;A,O,C,K,G,K;A,O,C,I,G,I;A,O,C,0B,G,0B;A,O,C,c,G,c;A,O,C,O,G,O;A,O,C,kB,G,kB;A,O,C,K,G,K;A,O,C,oB,G,oB;A,O,C,6B,G,6B;A,O,C,uB,G,uB;A,O,C,2B,G,2B;A,O,C,K,G,K;A,O,C,W,G,W;A,O,C,a,G,a;A,O,C,S,G,S;A,O,C,S,G,S;A,O,C,O,G,O;A,O,C,W,G,W;A,O,C,a,G,a;A,O,C,wB,G,wB;A,O,C,mB,G,mB;A,O,C,kB,G,kB;A,O,C,kB,G,kB;A,O,C,U,G,U;A,O,C,6B,G,6B;A,O,C,kB,G,kB;A,O,C,e,G,e;A,O,C,Y,G,Y;A,O,C,M,G,M;A,O,C,Y,G,Y;A,O,C,gB,G,gB;A,O,C,Q,G,Q;A,O,C,a,G,a;A,O,C,c,G,c;A,O,C,Q,G,Q;A,O,C,U,G,U;A,O,C,c,G,c;A,O,C,U,G,U;A,O,C,gC,G,gC;A,O,C,K,G,K;A,O,C,W,G,W;A,O,C,iB,G,iB;A,O,C,U,G,U;A,O,C,G,G,G;A,O,C,wB,G,wB;A,O,C,oB,G,oB;A,O,C,Y,G,Y;A,O,C,kB,G,kB;A,O,C,wB,G,wB;A,O,C,Y,G,Y;A,O,C,kB,G,kB;A,O,C,wB,G,wB;A,O,C,O,G,O;A,O,C,W,G,W;A,O,C,Q,G,Q;A,O,C,a,G,a;A,O,C,Y,G,Y;A,O,C,a,G,a;A,O,C,gB,G,gB;A,O,C,W,G,W;A,O,C,K,G,M;A,O,C,Y,G,Y;A,O,C,iB,G,iB;A,O,C,iC,G,iC;A,O,C,wC,G,wC;A,O,C,oB,G,oB;A,O,C,8B,G,8B;A,O,C,W,G,W;A,O,C,W,G,W;A,O,C,S,G,S;A,O,C,S,G,S;A,O,C,sB,G,sB;A,O,C,0B,G,0B;A,O,C,Y,G,Y;A,O,C,iB,G,iB;A,O,C,S,G,S;A,O,C,I,G,I;A,O,C,O,G,O;A,O,C,Q,G,Q;A,O,C,6B,G,6B;A,O,C,S,G,S;A,O,C,O,G,O;A,O,C,I,G,I;A,O,C,O,G,O;A,O,C,M,G,M;A,O,C,Q,G,Q;A,O,C,Q,G,Q;A,O,C,mB,G,mB;A,O,C,I,G,I;A,O,C,Q,G,Q;A,O,C,W,G,W;A,O,C,U,G,U;A,O,C,U,G,U;A,O,C,a,G,a;A,O,C,a,G,a;A,O,C,S,G,S;A,O,C,e,G,e;A,O,C,O,G,O;A,O,C,gB,G,gB;A,O,C,mB,G,mB;A,O,C,gB,G,gB;A,O,C,Y,G,Y;A,O,C,a,G,a;A,O,C,W,G,W;A,O,C,a,G,a;A,O,C,6B,G,6B;A,O,C,Y,G,Y;A,O,C,c,G,c;A,O,C,S,G,S;A,O,C,U,G,U;A,O,C,U,G,U;A,O,C,Q,G,Q;A,O,C,K,G,K;A,O,C,O,G,O;A,O,C,kB,G,kB;A,O,C,qB,G,qB;A,O,C,uB,G,uB;A,O,C,kB,G,kB;A,O,C,oB,G,oB;A,O,C,uB,G,uB;A,O,C,e,G,e;A,O,C,iB,G,iB;A,O,C,M,G,M;A,O,C,W,G,W;A,O,C,Q,G,Q;A,O,C,Y,G,Y;A,O,C,W,G,W;A,O,C,yB,G,yB;A,O,C,mB,G,mB;A,O,C,M,G,M;A,O,C,a,G,a;A,O,C,4B,G,4B;A,O,C,2B,G,2B;A,O,C,yB,G,yB;A,O,C,gB,G,gB;A,O,C,a,G,a;A,O,C,U,G,W;A,O,C,Q,G,Q;A,O,C,e,G,e;A,O,C,a,G,a;A,O,C,iB,G,iB;A,O,C,a,G,a;A,O,C,iB,G,iB;A,O,C,uC,G,uC;A,O,C,U,G,U;A,O,C,gB,G,gB;A,O,C,I,G,I;A,O,C,c,G,c;A,O,C,gB,G,gB;A,O,C,mB,G,mB;A,O,C,U,G,U;A,O,C,U,G,U;A,O,C,W,G,W;A,O,C,W,G,W;A,O,C,K,G,K;A,O,C,M,G,M;A,O,C,M,G,M;A,O,C,c,G,c;A,O,C,oB,G,oB;A,O,C,qB,G,qB;A,O,C,iB,G,iB;A,O,C,c,G,c;A,O,C,W,G,W;A,O,C,gB,G,gB;A,O,C,c,G,c;A,O,C,kB,G,kB;A,O,C,e,G,e;A,O,C,e,G,e;A,O,C,uB,G,uB;A,O,C,S,G,S;A,O,C,2B,G,2B;A,O,C,oB,G,oB;A,O,C,Y,G,a;A,O,C,U,G,U;A,O,C,W,G,W;A,O,C,yC,G,yC;A,O,C,qB,G,qB;A,O,C,uC,G,uC;A,O,C,4B,G,4B;A,O,C,8C,G,8C;A,O,C,qB,G,qB;A,O,C,iD,G,iD;A,O,C,W,G,W;A,O,C,S,G,S;A,O,C,a,G,a;A,O,C,M,G,M;A,O,C,kB,G,kB;A,O,C,O,G,O;A,O,C,e,G,e;A,O,C,W,G,W;A,O,C,K,G,K;A,O,C,a,G,a;A,O,C,U,G,U;A,O,C,oC,G,oC;A,O,C,gB,G,gB;A,O,C,M,G,M;A,O,C,c,G,c;A,O,C,kB,G,kB;A,O,C,Q,G,Q;A,O,C,U,G,U;A,O,C,O,G,O;A,O,C,O,G,O;A,O,C,S,G,S;A,O,C,K,G,K;A,O,C,K,G,K;A,O,C,M,G,M;A,O,C,S,G,S;A,O,C,W,G,W;A,O,C,mB,G,mB;A,O,C,kB,G,kB;A,O,C,Y,G,Y;A,O,C,M,G,M;A,O,C,S,G,S;A,O,C,U,G,U;A,O,C,e,G,e;A,O,C,K,G,K;A,O,C,gB,G,gB;A,O,C,gB,G,gB;A,O,C,gB,G,gB;A,O,C,Y,G,Y;A,O,C,kB,G,kB;A,O,C,O,G,O;A,O,C,O,G,O;;;;;yCE/DA,CAAA;;gDAAA,CAAA;;6CAAA,CAAA;;yCAAA,CAAA;;AAAA,GAAA;;SAASC,CAAAA,GAAAA,CAAAA;AAAAA,CAGT;SAASC,CAAAA,GAAAA,CACPA;IAAAA,CAAAA,CAAaC,IAAAA,CAAKC,IAAAA;AAAKC,CA6CzB;SAASC,CAAAA,CAAiBC,CAAAA,EAAAA,CACxB;iBAA2BC,CAAAA,MAAvBD,CAAAA,CAAKE,aAAAA,GACAP,CAAAA,CAAaQ,mBAAAA,GACfH,CAAAA,CAAKE,aAAAA;AAAAA,CAYd;SAASE,CAAAA,CAASC,CAAAA,EAASC,CAAAA,EAAMC,CAAAA,EAAAA,CAC/B;IAAA,EACeA,EADXD,CAAAA,EACFD,CAAAA,CAAQR,IAAAA,CAAKU,CAAAA;aAEb,GAAA,CAAIC,CAAAA,GAAMH,CAAAA,CAAQI,MAAAA,EACdC,CAAAA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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-e0a8c656c2212267.js","src/index.ts","node_modules/jacdac-ts/dist/jacdac.cjs.js","node_modules/jacdac-ts/jacdac-spec/dist/specconstants.ts","node_modules/jacdac-ts/src/jdom/constants.ts","node_modules/jacdac-ts/jacdac-spec/spectool/jdutils.ts","node_modules/jacdac-ts/jacdac-spec/spectool/jdspec.ts","node_modules/jacdac-ts/src/jdom/flags.ts","node_modules/jacdac-ts/src/jdom/utils.ts","node_modules/jacdac-ts/src/jdom/buffer.ts","node_modules/jacdac-ts/src/jdom/spec.ts","node_modules/jacdac-ts/src/jdom/pack.ts","node_modules/jacdac-ts/src/jdom/pretty.ts","node_modules/jacdac-ts/src/jdom/packet.ts","node_modules/jacdac-ts/src/jdom/trace/trace.ts","node_modules/jacdac-ts/src/jdom/eventsource.ts","node_modules/jacdac-ts/src/jdom/node.ts","node_modules/jacdac-ts/src/jdom/servicemembernode.ts","node_modules/jacdac-ts/src/jdom/field.ts","node_modules/jacdac-ts/src/jdom/packobject.ts","node_modules/jacdac-ts/src/jdom/register.ts","node_modules/jacdac-ts/src/jdom/event.ts","node_modules/jacdac-ts/src/jdom/client.ts","node_modules/jacdac-ts/src/jdom/random.ts","node_modules/jacdac-ts/src/jdom/pipes.ts","node_modules/jacdac-ts/src/jdom/service.ts","node_modules/jacdac-ts/src/jdom/ledcontroller.ts","node_modules/jacdac-ts/src/jdom/device.ts","node_modules/jacdac-ts/src/jdom/scheduler.ts","node_modules/jacdac-ts/src/jdom/flashing.ts","node_modules/jacdac-ts/src/jdom/servers/registerserver.ts","node_modules/jacdac-ts/src/jdom/servers/serviceserver.ts","node_modules/jacdac-ts/src/servers/sensorserver.ts","node_modules/jacdac-ts/src/servers/realtimeclockserver.ts","node_modules/jacdac-ts/src/jdom/transport/transport.ts","node_modules/jacdac-ts/src/jdom/busstats.ts","node_modules/jacdac-ts/src/jdom/servers/controlserver.ts","node_modules/jacdac-ts/src/jdom/servers/serviceprovider.ts","node_modules/jacdac-ts/src/jdom/servers/serverserviceprovider.ts","node_modules/jacdac-ts/src/jdom/servers/protocoltestserver.ts","node_modules/jacdac-ts/src/servers/buttonserver.ts","node_modules/jacdac-ts/src/servers/buzzerserver.ts","node_modules/jacdac-ts/src/servers/characterscreenserver.ts","node_modules/jacdac-ts/src/servers/joystickserver.ts","node_modules/jacdac-ts/src/servers/dotmatrixserver.ts","node_modules/jacdac-ts/src/jdom/lightconstants.ts","node_modules/jacdac-ts/src/servers/ledpixelserver.ts","node_modules/jacdac-ts/src/servers/matrixkeypadserver.ts","node_modules/jacdac-ts/src/servers/motorserver.ts","node_modules/jacdac-ts/src/servers/leveldetector.ts","node_modules/jacdac-ts/src/servers/analogsensorserver.ts","node_modules/jacdac-ts/src/servers/raingaugeserver.ts","node_modules/jacdac-ts/src/servers/reflectedlightserver.ts","node_modules/jacdac-ts/src/servers/rotaryencoderserver.ts","node_modules/jacdac-ts/src/servers/servoserver.ts","node_modules/jacdac-ts/src/servers/settingsserver.ts","node_modules/jacdac-ts/src/servers/speechsynthesisserver.ts","node_modules/jacdac-ts/src/servers/switchserver.ts","node_modules/jacdac-ts/src/servers/trafficlightserver.ts","node_modules/jacdac-ts/src/servers/ledserver.ts","node_modules/jacdac-ts/src/servers/soundplayerserver.ts","node_modules/jacdac-ts/src/servers/randomnumbergeneratorserver.ts","node_modules/jacdac-ts/src/servers/compassserver.ts","node_modules/jacdac-ts/src/servers/dmxserver.ts","node_modules/jacdac-ts/src/jdom/iframeclient.ts","node_modules/jacdac-ts/src/servers/bitradioserver.ts","node_modules/jacdac-ts/src/servers/powerserver.ts","node_modules/jacdac-ts/src/servers/capacitivebuttonserver.ts","node_modules/jacdac-ts/src/servers/hidkeyboardserver.ts","node_modules/jacdac-ts/src/servers/hidmouseserver.ts","node_modules/jacdac-ts/src/servers/dimmerserver.ts","node_modules/jacdac-ts/src/servers/azureiothubhealthserver.ts","node_modules/jacdac-ts/src/servers/vibrationmotorserver.ts","node_modules/jacdac-ts/src/servers/wifiserver.ts","node_modules/jacdac-ts/src/servers/servers.ts","node_modules/jacdac-ts/src/jdom/serviceclient.ts","node_modules/jacdac-ts/src/jdom/clients/rolemanagerclient.ts","node_modules/jacdac-ts/src/jdom/bus.ts","node_modules/jacdac-ts/src/jdom/trace/traceplayer.ts","node_modules/jacdac-ts/src/jdom/logparser.ts","node_modules/jacdac-ts/src/jdom/speedtest.ts","node_modules/jacdac-ts/src/jdom/command.ts","node_modules/jacdac-ts/src/jdom/packetfilter.ts","node_modules/jacdac-ts/src/jdom/trace/tracerecorder.ts","node_modules/jacdac-ts/src/jdom/trace/traceview.ts","node_modules/jacdac-ts/src/jdom/light.ts","node_modules/jacdac-ts/src/jdom/color.ts","node_modules/jacdac-ts/src/jdom/bridge.ts","node_modules/jacdac-ts/src/jdom/clients/settingsclient.ts","node_modules/jacdac-ts/src/jdom/transport/bluetooth.ts","node_modules/jacdac-ts/src/jdom/transport/hf2.ts","node_modules/jacdac-ts/src/jdom/transport/microbit.ts","node_modules/jacdac-ts/src/jdom/error.ts","node_modules/jacdac-ts/src/jdom/transport/usbio.ts","node_modules/jacdac-ts/src/jdom/transport/webserialio.ts","node_modules/jacdac-ts/src/jdom/transport/eventtargetobservable.ts","node_modules/jacdac-ts/src/jdom/transport/usb.ts","node_modules/jacdac-ts/src/jdom/transport/workertransport.ts","node_modules/jacdac-ts/src/jdom/transport/webserial.ts","node_modules/jacdac-ts/src/jdom/transport/nodewebusb.ts","node_modules/jacdac-ts/src/jdom/transport/nodewebserialio.ts","node_modules/jacdac-ts/src/jdom/bridges/iframebridge.ts","node_modules/jacdac-ts/src/jdom/transport/createbus.ts","node_modules/jacdac-ts/src/jdom/rolemanager.ts","node_modules/jacdac-ts/src/jdom/sensors.ts","node_modules/jacdac-ts/src/azure-iot/devicetwin.ts","node_modules/webusb/dist/webusb.esm.js","node_modules/webusb/node_modules/rollup-plugin-node-builtins/src/es6/events.js","node_modules/webusb/src/dispatcher.ts","node_modules/webusb/src/configuration.ts","node_modules/webusb/src/interface.ts","node_modules/webusb/src/alternate.ts","node_modules/webusb/src/endpoint.ts","node_modules/webusb/src/device.ts","node_modules/webusb/src/adapter.ts","node_modules/webusb/src/events.ts","node_modules/webusb/src/usb.ts","node_modules/webusb/src/index.ts","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/usb/usb.js","node_modules/process/browser.js","node_modules/bindings/bindings.js","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/path-browserify/index.js","node_modules/file-uri-to-path/index.js","node_modules/events/events.js","node_modules/util/util.js","node_modules/util/support/types.js","node_modules/is-arguments/index.js","node_modules/has-tostringtag/shams.js","node_modules/has-symbols/shams.js","node_modules/call-bind/callBound.js","node_modules/get-intrinsic/index.js","node_modules/has-symbols/index.js","node_modules/function-bind/index.js","node_modules/function-bind/implementation.js","node_modules/has/src/index.js","node_modules/call-bind/index.js","node_modules/is-generator-function/index.js","node_modules/which-typed-array/index.js","node_modules/foreach/index.js","node_modules/available-typed-arrays/index.js","node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js","node_modules/is-typed-array/index.js","node_modules/util/support/isBufferBrowser.js","node_modules/inherits/inherits_browser.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/bus.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"69f74e7f31319ffd\";module.bundle.HMR_BUNDLE_ID = \"0b7c8afcb31310b1\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      removeErrorOverlay();\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        } // Render the fancy html overlay\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n      document.body.appendChild(overlay);\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\\n          \").concat(stack, \"\\n        </pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n    return;\n  }\n\n  var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n  if (deps) {\n    var fn = new Function('require', 'module', 'exports', asset.output);\n    modules[asset.id] = [fn, deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(module.bundle.root, id).some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import { snapshotSensors, startDevTools, JoystickButtons } from \"jacdac-ts\";\r\nimport { initBus } from \"./bus\";\r\n\r\nconst debugEl = document.getElementById(\"debugbtn\") as HTMLButtonElement;\r\nconst connectDeviceEl = document.getElementById(\"connectbtn\") as HTMLButtonElement;\r\nconst wsAddressEl = document.getElementById(\"wsAddress\") as HTMLInputElement;\r\nconst wsConnectEl = document.getElementById(\"wsConnect\") as HTMLButtonElement;\r\nconst wsStatusEl = document.getElementById(\"wsStatus\") as HTMLElement;\r\n\r\nconst bus = initBus();\r\nlet ws: WebSocket;\r\nlet wsIsOpen = false;\r\n\r\nif (window.location.ancestorOrigins.length) {\r\n  debugEl.remove();\r\n  connectDeviceEl.remove();\r\n} else {\r\n  debugEl.onclick = (ev) => {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    if (!window.location.ancestorOrigins.length) {\r\n      startDevTools();\r\n    }\r\n  }\r\n  connectDeviceEl.onclick = (ev) => {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    bus.connected ? bus.disconnect() : bus.connect();\r\n  }\r\n}\r\n\r\nwsConnectEl.onclick = (ev) => {\r\n  ev.preventDefault();\r\n  ev.stopPropagation();\r\n  altspaceConnect(wsAddressEl.value);\r\n}\r\n\r\ntype Button = {\r\n  down: boolean;\r\n  pressed: boolean;\r\n  released: boolean;\r\n};\r\n\r\ntype Stick = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Input = {\r\n  button: Button;\r\n  stick: Stick;\r\n};\r\n\r\nconst input: Input = {\r\n  button: {\r\n    down: false,\r\n    pressed: false,\r\n    released: false\r\n  },\r\n  stick: {\r\n    x: 0,\r\n    y: 0\r\n  }\r\n};\r\n\r\n\r\nfunction step() {\r\n  const snap = snapshotSensors(bus);\r\n  //const str = JSON.stringify(snap);\r\n  //console.log(str);\r\n  const joysticks = snap.joystick;\r\n  if (joysticks.length) {\r\n    const joystick = joysticks[0];\r\n    const buttons = Number(joystick[\"buttons\"]);\r\n    // Update button state\r\n    input.button.pressed = false;\r\n    input.button.released = false;\r\n    if (buttons & JoystickButtons.A) {\r\n      input.button.pressed = !input.button.down;\r\n      input.button.down = true;\r\n    } else {\r\n      input.button.released = input.button.down;\r\n      input.button.down = false;\r\n    }\r\n    // Update stick state\r\n    input.stick.x = Number(joystick[\"x\"]) || 0;\r\n    input.stick.y = Number(joystick[\"y\"]) || 0;\r\n    //console.log(JSON.stringify(input));\r\n    if (wsIsOpen) {\r\n      const msg = {\r\n        type: 'input',\r\n        state: input\r\n      };\r\n      try {\r\n        ws.send(JSON.stringify(msg));\r\n      }\r\n      catch {\r\n        ws.close();\r\n        ws = null;\r\n      }\r\n    }\r\n  }\r\n  window.requestAnimationFrame(step);\r\n}\r\nwindow.requestAnimationFrame(step);\r\n\r\nfunction setSocketStatus(msg: string) {\r\n  wsStatusEl.innerText = msg;\r\n}\r\n\r\nfunction altspaceConnect(address: string) {\r\n  if (ws) {\r\n    try { ws.close(); } catch { }\r\n  }\r\n  setSocketStatus(\"Connecting...\");\r\n  ws = new WebSocket(address);\r\n  ws.onclose = (ev) => {\r\n    setSocketStatus(\"Disconnected\");\r\n    wsIsOpen = false;\r\n  };\r\n  ws.onerror = (ev) => {\r\n    setSocketStatus(\"Error\");\r\n    wsIsOpen = false;\r\n  };\r\n  ws.onopen = (ev) => {\r\n    setSocketStatus(\"Connected\");\r\n    wsIsOpen = true;\r\n  };\r\n}\r\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Service: Common registers and commands\nconst ANNOUNCE_INTERVAL = 0x1f4;\nexports.SystemReadingThreshold = void 0;\n(function (SystemReadingThreshold) {\n    SystemReadingThreshold[SystemReadingThreshold[\"Neutral\"] = 1] = \"Neutral\";\n    SystemReadingThreshold[SystemReadingThreshold[\"Inactive\"] = 2] = \"Inactive\";\n    SystemReadingThreshold[SystemReadingThreshold[\"Active\"] = 3] = \"Active\";\n})(exports.SystemReadingThreshold || (exports.SystemReadingThreshold = {}));\nexports.SystemStatusCodes = void 0;\n(function (SystemStatusCodes) {\n    SystemStatusCodes[SystemStatusCodes[\"Ready\"] = 0] = \"Ready\";\n    SystemStatusCodes[SystemStatusCodes[\"Initializing\"] = 1] = \"Initializing\";\n    SystemStatusCodes[SystemStatusCodes[\"Calibrating\"] = 2] = \"Calibrating\";\n    SystemStatusCodes[SystemStatusCodes[\"Sleeping\"] = 3] = \"Sleeping\";\n    SystemStatusCodes[SystemStatusCodes[\"WaitingForInput\"] = 4] = \"WaitingForInput\";\n    SystemStatusCodes[SystemStatusCodes[\"CalibrationNeeded\"] = 100] = \"CalibrationNeeded\";\n})(exports.SystemStatusCodes || (exports.SystemStatusCodes = {}));\nexports.SystemCmd = void 0;\n(function (SystemCmd) {\n    /**\n     * No args. Enumeration data for control service; service-specific advertisement data otherwise.\n     * Control broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\n     */\n    SystemCmd[SystemCmd[\"Announce\"] = 0] = \"Announce\";\n    /**\n     * No args. Registers number `N` is fetched by issuing command `0x1000 | N`.\n     * The report format is the same as the format of the register.\n     */\n    SystemCmd[SystemCmd[\"GetRegister\"] = 4096] = \"GetRegister\";\n    /**\n     * No args. Registers number `N` is set by issuing command `0x2000 | N`, with the format\n     * the same as the format of the register.\n     */\n    SystemCmd[SystemCmd[\"SetRegister\"] = 8192] = \"SetRegister\";\n    /**\n     * Event from sensor or a broadcast service.\n     *\n     * ```\n     * const [eventId, eventArgument] = jdunpack<[number, number]>(buf, \"u32 u32\")\n     * ```\n     */\n    SystemCmd[SystemCmd[\"Event\"] = 1] = \"Event\";\n    /**\n     * No args. Request to calibrate a sensor. The report indicates the calibration is done.\n     */\n    SystemCmd[SystemCmd[\"Calibrate\"] = 2] = \"Calibrate\";\n})(exports.SystemCmd || (exports.SystemCmd = {}));\nexports.SystemReg = void 0;\n(function (SystemReg) {\n    /**\n     * Read-write uint32_t. This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"Intensity\"] = 1] = \"Intensity\";\n    /**\n     * Read-write int32_t. The primary value of actuator (eg. servo pulse length, or motor duty cycle).\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"Value\"] = 2] = \"Value\";\n    /**\n     * Constant int32_t. The lowest value that can be reported for the value register.\n     *\n     * ```\n     * const [minValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"MinValue\"] = 272] = \"MinValue\";\n    /**\n     * Constant int32_t. The highest value that can be reported for the value register.\n     *\n     * ```\n     * const [maxValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"MaxValue\"] = 273] = \"MaxValue\";\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the service, in mA.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    SystemReg[SystemReg[\"MaxPower\"] = 7] = \"MaxPower\";\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SystemReg[SystemReg[\"StreamingSamples\"] = 3] = \"StreamingSamples\";\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"StreamingInterval\"] = 4] = \"StreamingInterval\";\n    /**\n     * Read-only int32_t. Read-only value of the sensor, also reported in streaming.\n     *\n     * ```\n     * const [reading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"Reading\"] = 257] = \"Reading\";\n    /**\n     * Constant int32_t. The lowest value that can be reported by the sensor.\n     *\n     * ```\n     * const [minReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"MinReading\"] = 260] = \"MinReading\";\n    /**\n     * Constant int32_t. The highest value that can be reported by the sensor.\n     *\n     * ```\n     * const [maxReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"MaxReading\"] = 261] = \"MaxReading\";\n    /**\n     * Read-only uint32_t. The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\n     * send a report in the same frame of the ``reading`` report.\n     *\n     * ```\n     * const [readingError] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"ReadingError\"] = 262] = \"ReadingError\";\n    /**\n     * Constant uint32_t. Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [readingResolution] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"ReadingResolution\"] = 264] = \"ReadingResolution\";\n    /**\n     * Read-write int32_t. Threshold when reading data gets inactive and triggers a ``inactive``.\n     *\n     * ```\n     * const [inactiveThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"InactiveThreshold\"] = 5] = \"InactiveThreshold\";\n    /**\n     * Read-write int32_t. Thresholds when reading data gets active and triggers a ``active`` event.\n     *\n     * ```\n     * const [activeThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"ActiveThreshold\"] = 6] = \"ActiveThreshold\";\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"StreamingPreferredInterval\"] = 258] = \"StreamingPreferredInterval\";\n    /**\n     * Constant uint32_t. The hardware variant of the service.\n     * For services which support this, there's an enum defining the meaning.\n     *\n     * ```\n     * const [variant] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SystemReg[SystemReg[\"Variant\"] = 263] = \"Variant\";\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    SystemReg[SystemReg[\"StatusCode\"] = 259] = \"StatusCode\";\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SystemReg[SystemReg[\"InstanceName\"] = 265] = \"InstanceName\";\n})(exports.SystemReg || (exports.SystemReg = {}));\nexports.SystemEvent = void 0;\n(function (SystemEvent) {\n    /**\n     * Notifies that the service has been activated (eg. button pressed, network connected, etc.)\n     */\n    SystemEvent[SystemEvent[\"Active\"] = 1] = \"Active\";\n    /**\n     * Notifies that the service has been dis-activated.\n     */\n    SystemEvent[SystemEvent[\"Inactive\"] = 2] = \"Inactive\";\n    /**\n     * Notifies that the some state of the service changed.\n     */\n    SystemEvent[SystemEvent[\"Change\"] = 3] = \"Change\";\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    SystemEvent[SystemEvent[\"StatusCodeChanged\"] = 4] = \"StatusCodeChanged\";\n    /**\n     * Notifies that the threshold is back between ``low`` and ``high``.\n     */\n    SystemEvent[SystemEvent[\"Neutral\"] = 7] = \"Neutral\";\n})(exports.SystemEvent || (exports.SystemEvent = {}));\n// Service: Base service\nexports.BaseReg = void 0;\n(function (BaseReg) {\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     * It often corresponds to what's printed on the device:\n     * for example, `A` for button A, or `S0` for servo channel 0.\n     * Words like `left` should be avoided because of localization issues (unless they are printed on the device).\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    BaseReg[BaseReg[\"InstanceName\"] = 265] = \"InstanceName\";\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet. If a service implements this register,\n     * it should also support the ``status_code_changed`` event defined below.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    BaseReg[BaseReg[\"StatusCode\"] = 259] = \"StatusCode\";\n})(exports.BaseReg || (exports.BaseReg = {}));\nexports.BaseEvent = void 0;\n(function (BaseEvent) {\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    BaseEvent[BaseEvent[\"StatusCodeChanged\"] = 4] = \"StatusCodeChanged\";\n})(exports.BaseEvent || (exports.BaseEvent = {}));\n// Service: Sensor\nexports.SensorReg = void 0;\n(function (SensorReg) {\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SensorReg[SensorReg[\"StreamingSamples\"] = 3] = \"StreamingSamples\";\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SensorReg[SensorReg[\"StreamingInterval\"] = 4] = \"StreamingInterval\";\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SensorReg[SensorReg[\"StreamingPreferredInterval\"] = 258] = \"StreamingPreferredInterval\";\n})(exports.SensorReg || (exports.SensorReg = {}));\n// Service: Accelerometer\nconst SRV_ACCELEROMETER = 0x1f140409;\nexports.AccelerometerReg = void 0;\n(function (AccelerometerReg) {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    AccelerometerReg[AccelerometerReg[\"Forces\"] = 257] = \"Forces\";\n    /**\n     * Read-only g i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    AccelerometerReg[AccelerometerReg[\"ForcesError\"] = 262] = \"ForcesError\";\n    /**\n     * Read-write g i12.20 (int32_t). Configures the range forces detected.\n     * Read-back after setting to get current value.\n     *\n     * ```\n     * const [maxForce] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    AccelerometerReg[AccelerometerReg[\"MaxForce\"] = 128] = \"MaxForce\";\n})(exports.AccelerometerReg || (exports.AccelerometerReg = {}));\nexports.AccelerometerEvent = void 0;\n(function (AccelerometerEvent) {\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"TiltUp\"] = 129] = \"TiltUp\";\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"TiltDown\"] = 130] = \"TiltDown\";\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"TiltLeft\"] = 131] = \"TiltLeft\";\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"TiltRight\"] = 132] = \"TiltRight\";\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"FaceUp\"] = 133] = \"FaceUp\";\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"FaceDown\"] = 134] = \"FaceDown\";\n    /**\n     * Emitted when total force acting on accelerometer is much less than 1g.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Freefall\"] = 135] = \"Freefall\";\n    /**\n     * Emitted when forces change violently a few times.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Shake\"] = 139] = \"Shake\";\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Force2g\"] = 140] = \"Force2g\";\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Force3g\"] = 136] = \"Force3g\";\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Force6g\"] = 137] = \"Force6g\";\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    AccelerometerEvent[AccelerometerEvent[\"Force8g\"] = 138] = \"Force8g\";\n})(exports.AccelerometerEvent || (exports.AccelerometerEvent = {}));\n// Service: Arcade Gamepad\nconst SRV_ARCADE_GAMEPAD = 0x1deaa06e;\nexports.ArcadeGamepadButton = void 0;\n(function (ArcadeGamepadButton) {\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Left\"] = 1] = \"Left\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Up\"] = 2] = \"Up\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Right\"] = 3] = \"Right\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Down\"] = 4] = \"Down\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"A\"] = 5] = \"A\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"B\"] = 6] = \"B\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Menu\"] = 7] = \"Menu\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Select\"] = 8] = \"Select\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Reset\"] = 9] = \"Reset\";\n    ArcadeGamepadButton[ArcadeGamepadButton[\"Exit\"] = 10] = \"Exit\";\n})(exports.ArcadeGamepadButton || (exports.ArcadeGamepadButton = {}));\nexports.ArcadeGamepadReg = void 0;\n(function (ArcadeGamepadReg) {\n    /**\n     * Indicates which buttons are currently active (pressed).\n     * `pressure` should be `0xff` for digital buttons, and proportional for analog ones.\n     *\n     * ```\n     * const [rest] = jdunpack<[([ArcadeGamepadButton, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [button, pressure] = rest[0]\n     * ```\n     */\n    ArcadeGamepadReg[ArcadeGamepadReg[\"Buttons\"] = 257] = \"Buttons\";\n    /**\n     * Constant. Indicates number of players supported and which buttons are present on the controller.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton[]]>(buf, \"u8[]\")\n     * ```\n     */\n    ArcadeGamepadReg[ArcadeGamepadReg[\"AvailableButtons\"] = 384] = \"AvailableButtons\";\n})(exports.ArcadeGamepadReg || (exports.ArcadeGamepadReg = {}));\nexports.ArcadeGamepadEvent = void 0;\n(function (ArcadeGamepadEvent) {\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from inactive to active.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    ArcadeGamepadEvent[ArcadeGamepadEvent[\"Down\"] = 1] = \"Down\";\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from active to inactive.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    ArcadeGamepadEvent[ArcadeGamepadEvent[\"Up\"] = 2] = \"Up\";\n})(exports.ArcadeGamepadEvent || (exports.ArcadeGamepadEvent = {}));\n// Service: Arcade sound\nconst SRV_ARCADE_SOUND = 0x1fc63606;\nexports.ArcadeSoundCmd = void 0;\n(function (ArcadeSoundCmd) {\n    /**\n     * Argument: samples bytes. Play samples, which are single channel, signed 16-bit little endian values.\n     *\n     * ```\n     * const [samples] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    ArcadeSoundCmd[ArcadeSoundCmd[\"Play\"] = 128] = \"Play\";\n})(exports.ArcadeSoundCmd || (exports.ArcadeSoundCmd = {}));\nexports.ArcadeSoundReg = void 0;\n(function (ArcadeSoundReg) {\n    /**\n     * Read-write Hz u22.10 (uint32_t). Get or set playback sample rate (in samples per second).\n     * If you set it, read it back, as the value may be rounded up or down.\n     *\n     * ```\n     * const [sampleRate] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ArcadeSoundReg[ArcadeSoundReg[\"SampleRate\"] = 128] = \"SampleRate\";\n    /**\n     * Constant B uint32_t. The size of the internal audio buffer.\n     *\n     * ```\n     * const [bufferSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ArcadeSoundReg[ArcadeSoundReg[\"BufferSize\"] = 384] = \"BufferSize\";\n    /**\n     * Read-only B uint32_t. How much data is still left in the buffer to play.\n     * Clients should not send more data than `buffer_size - buffer_pending`,\n     * but can keep the `buffer_pending` as low as they want to ensure low latency\n     * of audio playback.\n     *\n     * ```\n     * const [bufferPending] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ArcadeSoundReg[ArcadeSoundReg[\"BufferPending\"] = 385] = \"BufferPending\";\n})(exports.ArcadeSoundReg || (exports.ArcadeSoundReg = {}));\n// Service: Azure IoT Hub Health\nconst SRV_AZURE_IOT_HUB_HEALTH = 0x1462eefc;\nexports.AzureIotHubHealthConnectionStatus = void 0;\n(function (AzureIotHubHealthConnectionStatus) {\n    AzureIotHubHealthConnectionStatus[AzureIotHubHealthConnectionStatus[\"Connected\"] = 1] = \"Connected\";\n    AzureIotHubHealthConnectionStatus[AzureIotHubHealthConnectionStatus[\"Disconnected\"] = 2] = \"Disconnected\";\n    AzureIotHubHealthConnectionStatus[AzureIotHubHealthConnectionStatus[\"Connecting\"] = 3] = \"Connecting\";\n    AzureIotHubHealthConnectionStatus[AzureIotHubHealthConnectionStatus[\"Disconnecting\"] = 4] = \"Disconnecting\";\n})(exports.AzureIotHubHealthConnectionStatus || (exports.AzureIotHubHealthConnectionStatus = {}));\nexports.AzureIotHubHealthReg = void 0;\n(function (AzureIotHubHealthReg) {\n    /**\n     * Read-only string (bytes). Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured\n     *\n     * ```\n     * const [hubName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    AzureIotHubHealthReg[AzureIotHubHealthReg[\"HubName\"] = 384] = \"HubName\";\n    /**\n     * Read-only string (bytes). Device identifier in Azure Iot Hub\n     *\n     * ```\n     * const [hubDeviceId] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    AzureIotHubHealthReg[AzureIotHubHealthReg[\"HubDeviceId\"] = 385] = \"HubDeviceId\";\n    /**\n     * Read-only ConnectionStatus (uint16_t). Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    AzureIotHubHealthReg[AzureIotHubHealthReg[\"ConnectionStatus\"] = 386] = \"ConnectionStatus\";\n})(exports.AzureIotHubHealthReg || (exports.AzureIotHubHealthReg = {}));\nexports.AzureIotHubHealthCmd = void 0;\n(function (AzureIotHubHealthCmd) {\n    /**\n     * No args. Starts a connection to the IoT hub service\n     */\n    AzureIotHubHealthCmd[AzureIotHubHealthCmd[\"Connect\"] = 129] = \"Connect\";\n    /**\n     * No args. Starts disconnecting from the IoT hub service\n     */\n    AzureIotHubHealthCmd[AzureIotHubHealthCmd[\"Disconnect\"] = 130] = \"Disconnect\";\n    /**\n     * Argument: connection_string string (bytes). Restricted command to override the existing connection string to the Azure IoT Hub.\n     *\n     * ```\n     * const [connectionString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    AzureIotHubHealthCmd[AzureIotHubHealthCmd[\"SetConnectionString\"] = 134] = \"SetConnectionString\";\n})(exports.AzureIotHubHealthCmd || (exports.AzureIotHubHealthCmd = {}));\nexports.AzureIotHubHealthEvent = void 0;\n(function (AzureIotHubHealthEvent) {\n    /**\n     * Argument: connection_status ConnectionStatus (uint16_t). Raised when the connection status changes\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    AzureIotHubHealthEvent[AzureIotHubHealthEvent[\"ConnectionStatusChange\"] = 3] = \"ConnectionStatusChange\";\n})(exports.AzureIotHubHealthEvent || (exports.AzureIotHubHealthEvent = {}));\n// Service: Barcode reader\nconst SRV_BARCODE_READER = 0x1c739e6c;\nexports.BarcodeReaderFormat = void 0;\n(function (BarcodeReaderFormat) {\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Aztec\"] = 1] = \"Aztec\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Code128\"] = 2] = \"Code128\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Code39\"] = 3] = \"Code39\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Code93\"] = 4] = \"Code93\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Codabar\"] = 5] = \"Codabar\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"DataMatrix\"] = 6] = \"DataMatrix\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Ean13\"] = 8] = \"Ean13\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Ean8\"] = 9] = \"Ean8\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"ITF\"] = 10] = \"ITF\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"Pdf417\"] = 11] = \"Pdf417\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"QrCode\"] = 12] = \"QrCode\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"UpcA\"] = 13] = \"UpcA\";\n    BarcodeReaderFormat[BarcodeReaderFormat[\"UpcE\"] = 14] = \"UpcE\";\n})(exports.BarcodeReaderFormat || (exports.BarcodeReaderFormat = {}));\nexports.BarcodeReaderReg = void 0;\n(function (BarcodeReaderReg) {\n    /**\n     * Read-write bool (uint8_t). Turns on or off the detection of barcodes.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BarcodeReaderReg[BarcodeReaderReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Constant. Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\n     *\n     * ```\n     * const [format] = jdunpack<[BarcodeReaderFormat[]]>(buf, \"u8[]\")\n     * ```\n     */\n    BarcodeReaderReg[BarcodeReaderReg[\"Formats\"] = 384] = \"Formats\";\n})(exports.BarcodeReaderReg || (exports.BarcodeReaderReg = {}));\nexports.BarcodeReaderEvent = void 0;\n(function (BarcodeReaderEvent) {\n    /**\n     * Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\n     * In case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\n     *\n     * ```\n     * const [format, data] = jdunpack<[BarcodeReaderFormat, string]>(buf, \"u8 s\")\n     * ```\n     */\n    BarcodeReaderEvent[BarcodeReaderEvent[\"Detect\"] = 1] = \"Detect\";\n})(exports.BarcodeReaderEvent || (exports.BarcodeReaderEvent = {}));\n// Service: Barometer\nconst SRV_BAROMETER = 0x1e117cea;\nexports.BarometerReg = void 0;\n(function (BarometerReg) {\n    /**\n     * Read-only hPa u22.10 (uint32_t). The air pressure.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    BarometerReg[BarometerReg[\"Pressure\"] = 257] = \"Pressure\";\n    /**\n     * Read-only hPa u22.10 (uint32_t). The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\n     *\n     * ```\n     * const [pressureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    BarometerReg[BarometerReg[\"PressureError\"] = 262] = \"PressureError\";\n})(exports.BarometerReg || (exports.BarometerReg = {}));\n// Service: bit:radio\nconst SRV_BIT_RADIO = 0x1ac986cf;\nexports.BitRadioReg = void 0;\n(function (BitRadioReg) {\n    /**\n     * Read-write bool (uint8_t). Turns on/off the radio antenna.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitRadioReg[BitRadioReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-write uint8_t. Group used to filter packets\n     *\n     * ```\n     * const [group] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitRadioReg[BitRadioReg[\"Group\"] = 128] = \"Group\";\n    /**\n     * Read-write uint8_t. Antenna power to increase or decrease range.\n     *\n     * ```\n     * const [transmissionPower] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitRadioReg[BitRadioReg[\"TransmissionPower\"] = 129] = \"TransmissionPower\";\n    /**\n     * Read-write uint8_t. Change the transmission and reception band of the radio to the given channel.\n     *\n     * ```\n     * const [frequencyBand] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitRadioReg[BitRadioReg[\"FrequencyBand\"] = 130] = \"FrequencyBand\";\n})(exports.BitRadioReg || (exports.BitRadioReg = {}));\nexports.BitRadioCmd = void 0;\n(function (BitRadioCmd) {\n    /**\n     * Argument: message string (bytes). Sends a string payload as a radio message, maximum 18 characters.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"SendString\"] = 128] = \"SendString\";\n    /**\n     * Argument: value f64 (uint64_t). Sends a double precision number payload as a radio message\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"f64\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"SendNumber\"] = 129] = \"SendNumber\";\n    /**\n     * Sends a double precision number and a name payload as a radio message\n     *\n     * ```\n     * const [value, name] = jdunpack<[number, string]>(buf, \"f64 s\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"SendValue\"] = 130] = \"SendValue\";\n    /**\n     * Argument: data bytes. Sends a payload of bytes as a radio message\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"SendBuffer\"] = 131] = \"SendBuffer\";\n    /**\n     * Raised when a string packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, message] = jdunpack<[number, number, number, string]>(buf, \"u32 u32 i8 x[1] s\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"StringReceived\"] = 144] = \"StringReceived\";\n    /**\n     * Raised when a number packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, value, name] = jdunpack<[number, number, number, number, string]>(buf, \"u32 u32 i8 x[3] f64 s\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"NumberReceived\"] = 145] = \"NumberReceived\";\n    /**\n     * Raised when a buffer packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, data] = jdunpack<[number, number, number, Uint8Array]>(buf, \"u32 u32 i8 x[1] b\")\n     * ```\n     */\n    BitRadioCmd[BitRadioCmd[\"BufferReceived\"] = 146] = \"BufferReceived\";\n})(exports.BitRadioCmd || (exports.BitRadioCmd = {}));\n// Service: Bootloader\nconst SRV_BOOTLOADER = 0x1ffa9948;\nexports.BootloaderError = void 0;\n(function (BootloaderError) {\n    BootloaderError[BootloaderError[\"NoError\"] = 0] = \"NoError\";\n    BootloaderError[BootloaderError[\"PacketTooSmall\"] = 1] = \"PacketTooSmall\";\n    BootloaderError[BootloaderError[\"OutOfFlashableRange\"] = 2] = \"OutOfFlashableRange\";\n    BootloaderError[BootloaderError[\"InvalidPageOffset\"] = 3] = \"InvalidPageOffset\";\n    BootloaderError[BootloaderError[\"NotPageAligned\"] = 4] = \"NotPageAligned\";\n})(exports.BootloaderError || (exports.BootloaderError = {}));\nexports.BootloaderCmd = void 0;\n(function (BootloaderCmd) {\n    /**\n     * No args. The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\n     * that \"fits\" this device.\n     */\n    BootloaderCmd[BootloaderCmd[\"Info\"] = 0] = \"Info\";\n    /**\n     * report Info\n     * ```\n     * const [serviceClass, pageSize, flashableSize, productIdentifer] = jdunpack<[number, number, number, number]>(buf, \"u32 u32 u32 u32\")\n     * ```\n     */\n    /**\n     * Argument: session_id uint32_t. The flashing server should generate a random id, and use this command to set it.\n     *\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BootloaderCmd[BootloaderCmd[\"SetSession\"] = 129] = \"SetSession\";\n    /**\n     * report SetSession\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    /**\n     * Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\n     * Each chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\n     * and is included in response.\n     * Only the last chunk causes writing to flash and elicits response.\n     *\n     * ```\n     * const [pageAddress, pageOffset, chunkNo, chunkMax, sessionId, pageData] = jdunpack<[number, number, number, number, number, Uint8Array]>(buf, \"u32 u16 u8 u8 u32 x[4] x[4] x[4] x[4] b[208]\")\n     * ```\n     */\n    BootloaderCmd[BootloaderCmd[\"PageData\"] = 128] = \"PageData\";\n    /**\n     * report PageData\n     * ```\n     * const [sessionId, pageError, pageAddress] = jdunpack<[number, BootloaderError, number]>(buf, \"u32 u32 u32\")\n     * ```\n     */\n})(exports.BootloaderCmd || (exports.BootloaderCmd = {}));\n// Service: Button\nconst SRV_BUTTON = 0x1473a263;\nexports.ButtonReg = void 0;\n(function (ButtonReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the pressure state of the button, where ``0`` is open.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    ButtonReg[ButtonReg[\"Pressure\"] = 257] = \"Pressure\";\n    /**\n     * Constant bool (uint8_t). Indicates if the button provides analog ``pressure`` readings.\n     *\n     * ```\n     * const [analog] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ButtonReg[ButtonReg[\"Analog\"] = 384] = \"Analog\";\n    /**\n     * Read-only bool (uint8_t). Determines if the button is pressed currently.\n     */\n    ButtonReg[ButtonReg[\"Pressed\"] = 385] = \"Pressed\";\n})(exports.ButtonReg || (exports.ButtonReg = {}));\nexports.ButtonEvent = void 0;\n(function (ButtonEvent) {\n    /**\n     * Emitted when button goes from inactive to active.\n     */\n    ButtonEvent[ButtonEvent[\"Down\"] = 1] = \"Down\";\n    /**\n     * Argument: time ms uint32_t. Emitted when button goes from active to inactive. The 'time' parameter\n     * records the amount of time between the down and up events.\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ButtonEvent[ButtonEvent[\"Up\"] = 2] = \"Up\";\n    /**\n     * Argument: time ms uint32_t. Emitted when the press time is greater than 500ms, and then at least every 500ms\n     * as long as the button remains pressed. The 'time' parameter records the the amount of time\n     * that the button has been held (since the down event).\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ButtonEvent[ButtonEvent[\"Hold\"] = 129] = \"Hold\";\n})(exports.ButtonEvent || (exports.ButtonEvent = {}));\n// Service: Buzzer\nconst SRV_BUZZER = 0x1b57b1d7;\nexports.BuzzerReg = void 0;\n(function (BuzzerReg) {\n    /**\n     * Read-write ratio u0.8 (uint8_t). The volume (duty cycle) of the buzzer.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    BuzzerReg[BuzzerReg[\"Volume\"] = 1] = \"Volume\";\n})(exports.BuzzerReg || (exports.BuzzerReg = {}));\nexports.BuzzerCmd = void 0;\n(function (BuzzerCmd) {\n    /**\n     * Play a PWM tone with given period and duty for given duration.\n     * The duty is scaled down with `volume` register.\n     * To play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\n     * to send `P = 1000000 / F` and `D = P * V / 2`.\n     *\n     * ```\n     * const [period, duty, duration] = jdunpack<[number, number, number]>(buf, \"u16 u16 u16\")\n     * ```\n     */\n    BuzzerCmd[BuzzerCmd[\"PlayTone\"] = 128] = \"PlayTone\";\n    /**\n     * Play a note at the given frequency and volume.\n     */\n    BuzzerCmd[BuzzerCmd[\"PlayNote\"] = 129] = \"PlayNote\";\n})(exports.BuzzerCmd || (exports.BuzzerCmd = {}));\n// Service: Capacitive Button\nconst SRV_CAPACITIVE_BUTTON = 0x2865adc9;\nexports.CapacitiveButtonReg = void 0;\n(function (CapacitiveButtonReg) {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    CapacitiveButtonReg[CapacitiveButtonReg[\"Threshold\"] = 6] = \"Threshold\";\n})(exports.CapacitiveButtonReg || (exports.CapacitiveButtonReg = {}));\nexports.CapacitiveButtonCmd = void 0;\n(function (CapacitiveButtonCmd) {\n    /**\n     * No args. Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button.\n     * The report indicates the calibration is done.\n     */\n    CapacitiveButtonCmd[CapacitiveButtonCmd[\"Calibrate\"] = 2] = \"Calibrate\";\n})(exports.CapacitiveButtonCmd || (exports.CapacitiveButtonCmd = {}));\n// Service: Character Screen\nconst SRV_CHARACTER_SCREEN = 0x1f37c56a;\nexports.CharacterScreenVariant = void 0;\n(function (CharacterScreenVariant) {\n    CharacterScreenVariant[CharacterScreenVariant[\"LCD\"] = 1] = \"LCD\";\n    CharacterScreenVariant[CharacterScreenVariant[\"OLED\"] = 2] = \"OLED\";\n    CharacterScreenVariant[CharacterScreenVariant[\"Braille\"] = 3] = \"Braille\";\n})(exports.CharacterScreenVariant || (exports.CharacterScreenVariant = {}));\nexports.CharacterScreenTextDirection = void 0;\n(function (CharacterScreenTextDirection) {\n    CharacterScreenTextDirection[CharacterScreenTextDirection[\"LeftToRight\"] = 1] = \"LeftToRight\";\n    CharacterScreenTextDirection[CharacterScreenTextDirection[\"RightToLeft\"] = 2] = \"RightToLeft\";\n})(exports.CharacterScreenTextDirection || (exports.CharacterScreenTextDirection = {}));\nexports.CharacterScreenReg = void 0;\n(function (CharacterScreenReg) {\n    /**\n     * Read-write string (bytes). Text to show. Use `\\n` to break lines.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"Message\"] = 2] = \"Message\";\n    /**\n     * Read-write ratio u0.8 (uint8_t). Brightness of the screen. `0` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"Brightness\"] = 1] = \"Brightness\";\n    /**\n     * Constant Variant (uint8_t). Describes the type of character LED screen.\n     *\n     * ```\n     * const [variant] = jdunpack<[CharacterScreenVariant]>(buf, \"u8\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"Variant\"] = 263] = \"Variant\";\n    /**\n     * Read-write TextDirection (uint8_t). Specifies the RTL or LTR direction of the text.\n     *\n     * ```\n     * const [textDirection] = jdunpack<[CharacterScreenTextDirection]>(buf, \"u8\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"TextDirection\"] = 130] = \"TextDirection\";\n    /**\n     * Constant # uint8_t. Gets the number of rows.\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"Rows\"] = 384] = \"Rows\";\n    /**\n     * Constant # uint8_t. Gets the number of columns.\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CharacterScreenReg[CharacterScreenReg[\"Columns\"] = 385] = \"Columns\";\n})(exports.CharacterScreenReg || (exports.CharacterScreenReg = {}));\nexports.CharacterScreenCmd = void 0;\n(function (CharacterScreenCmd) {\n    /**\n     * Overrides the content of a single line at a 0-based index.\n     *\n     * ```\n     * const [index, message] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    CharacterScreenCmd[CharacterScreenCmd[\"SetLine\"] = 128] = \"SetLine\";\n    /**\n     * No args. Clears all text from the display.\n     */\n    CharacterScreenCmd[CharacterScreenCmd[\"Clear\"] = 129] = \"Clear\";\n})(exports.CharacterScreenCmd || (exports.CharacterScreenCmd = {}));\n// Service: CODAL Message Bus\nconst SRV_CODAL_MESSAGE_BUS = 0x121ff81d;\nexports.CodalMessageBusCmd = void 0;\n(function (CodalMessageBusCmd) {\n    /**\n     * Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    CodalMessageBusCmd[CodalMessageBusCmd[\"Send\"] = 128] = \"Send\";\n})(exports.CodalMessageBusCmd || (exports.CodalMessageBusCmd = {}));\nexports.CodalMessageBusEvent = void 0;\n(function (CodalMessageBusEvent) {\n    /**\n     * Raised by the server is triggered by the server. The filtering logic of which event to send over JACDAC is up to the server implementation.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    CodalMessageBusEvent[CodalMessageBusEvent[\"Message\"] = 128] = \"Message\";\n})(exports.CodalMessageBusEvent || (exports.CodalMessageBusEvent = {}));\n// Service: Color\nconst SRV_COLOR = 0x1630d567;\nexports.ColorReg = void 0;\n(function (ColorReg) {\n    /**\n     * Detected color in the RGB color space.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u0.16 u0.16 u0.16\")\n     * ```\n     */\n    ColorReg[ColorReg[\"Color\"] = 257] = \"Color\";\n})(exports.ColorReg || (exports.ColorReg = {}));\n// Service: Compass\nconst SRV_COMPASS = 0x15b7b9bf;\nexports.CompassReg = void 0;\n(function (CompassReg) {\n    /**\n     * Read-only ° u16.16 (uint32_t). The heading with respect to the magnetic north.\n     *\n     * ```\n     * const [heading] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    CompassReg[CompassReg[\"Heading\"] = 257] = \"Heading\";\n    /**\n     * Read-write bool (uint8_t). Turn on or off the sensor. Turning on the sensor may start a calibration sequence.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CompassReg[CompassReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-only ° u16.16 (uint32_t). Error on the heading reading\n     *\n     * ```\n     * const [headingError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    CompassReg[CompassReg[\"HeadingError\"] = 262] = \"HeadingError\";\n})(exports.CompassReg || (exports.CompassReg = {}));\nexports.CompassCmd = void 0;\n(function (CompassCmd) {\n    /**\n     * No args. Starts a calibration sequence for the compass.\n     */\n    CompassCmd[CompassCmd[\"Calibrate\"] = 2] = \"Calibrate\";\n})(exports.CompassCmd || (exports.CompassCmd = {}));\n// Service: Control\nconst SRV_CONTROL = 0x0;\nexports.ControlAnnounceFlags = void 0;\n(function (ControlAnnounceFlags) {\n    ControlAnnounceFlags[ControlAnnounceFlags[\"RestartCounterSteady\"] = 15] = \"RestartCounterSteady\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"RestartCounter1\"] = 1] = \"RestartCounter1\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"RestartCounter2\"] = 2] = \"RestartCounter2\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"RestartCounter4\"] = 4] = \"RestartCounter4\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"RestartCounter8\"] = 8] = \"RestartCounter8\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"StatusLightNone\"] = 0] = \"StatusLightNone\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"StatusLightMono\"] = 16] = \"StatusLightMono\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"StatusLightRgbNoFade\"] = 32] = \"StatusLightRgbNoFade\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"StatusLightRgbFade\"] = 48] = \"StatusLightRgbFade\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"SupportsACK\"] = 256] = \"SupportsACK\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"SupportsBroadcast\"] = 512] = \"SupportsBroadcast\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"SupportsFrames\"] = 1024] = \"SupportsFrames\";\n    ControlAnnounceFlags[ControlAnnounceFlags[\"IsClient\"] = 2048] = \"IsClient\";\n})(exports.ControlAnnounceFlags || (exports.ControlAnnounceFlags = {}));\nexports.ControlCmd = void 0;\n(function (ControlCmd) {\n    /**\n     * No args. The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\n     * If this number ever goes down, it indicates that the device restarted.\n     * `service_class` indicates class identifier for each service index (service index `0` is always control, so it's\n     * skipped in this enumeration).\n     * `packet_count` indicates the number of packets sent by the current device since last announce,\n     * including the current announce packet (it is always 0 if this feature is not supported).\n     * The command form can be used to induce report, which is otherwise broadcast every 500ms.\n     */\n    ControlCmd[ControlCmd[\"Services\"] = 0] = \"Services\";\n    /**\n     * report Services\n     * ```\n     * const [flags, packetCount, serviceClass] = jdunpack<[ControlAnnounceFlags, number, number[]]>(buf, \"u16 u8 x[1] u32[]\")\n     * ```\n     */\n    /**\n     * No args. Do nothing. Always ignored. Can be used to test ACKs.\n     */\n    ControlCmd[ControlCmd[\"Noop\"] = 128] = \"Noop\";\n    /**\n     * No args. Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\n     * For devices with status light (this can be discovered in the announce flags), the client should\n     * send the sequence of status light command to generate the identify animation.\n     */\n    ControlCmd[ControlCmd[\"Identify\"] = 129] = \"Identify\";\n    /**\n     * No args. Reset device. ACK may or may not be sent.\n     */\n    ControlCmd[ControlCmd[\"Reset\"] = 130] = \"Reset\";\n    /**\n     * The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\n     * to `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\n     * The `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n     *\n     * ```\n     * const [numResponses, startCounter, size] = jdunpack<[number, number, number]>(buf, \"u32 u32 u8\")\n     * ```\n     */\n    ControlCmd[ControlCmd[\"FloodPing\"] = 131] = \"FloodPing\";\n    /**\n     * report FloodPing\n     * ```\n     * const [counter, dummyPayload] = jdunpack<[number, Uint8Array]>(buf, \"u32 b\")\n     * ```\n     */\n    /**\n     * Initiates a color transition of the status light from its current color to the one specified.\n     * The transition will complete in about `512 / speed` frames\n     * (each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\n     * As a special case, if speed is `0` the transition is immediate.\n     * If MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\n     * If a monochrome LEDs is fitted, the average value of ``red``, ``green``, ``blue`` is used.\n     * If intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\n     * on, and `0` (for all three channels) should be considered off.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    ControlCmd[ControlCmd[\"SetStatusLight\"] = 132] = \"SetStatusLight\";\n    /**\n     * No args. Force client device into proxy mode.\n     */\n    ControlCmd[ControlCmd[\"Proxy\"] = 133] = \"Proxy\";\n})(exports.ControlCmd || (exports.ControlCmd = {}));\nexports.ControlReg = void 0;\n(function (ControlReg) {\n    /**\n     * Read-write μs uint32_t. When set to value other than `0`, it asks the device to reset after specified number of microseconds.\n     * This is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\n     * say 1.6s every 0.5s.\n     *\n     * ```\n     * const [resetIn] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ControlReg[ControlReg[\"ResetIn\"] = 128] = \"ResetIn\";\n    /**\n     * Constant string (bytes). Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n     *\n     * ```\n     * const [deviceDescription] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ControlReg[ControlReg[\"DeviceDescription\"] = 384] = \"DeviceDescription\";\n    /**\n     * Constant uint32_t. A numeric code for the string above; used to identify firmware images and devices.\n     *\n     * ```\n     * const [productIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ControlReg[ControlReg[\"ProductIdentifier\"] = 385] = \"ProductIdentifier\";\n    /**\n     * Constant uint32_t. Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n     *\n     * ```\n     * const [bootloaderProductIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ControlReg[ControlReg[\"BootloaderProductIdentifier\"] = 388] = \"BootloaderProductIdentifier\";\n    /**\n     * Constant string (bytes). A string describing firmware version; typically semver.\n     *\n     * ```\n     * const [firmwareVersion] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ControlReg[ControlReg[\"FirmwareVersion\"] = 389] = \"FirmwareVersion\";\n    /**\n     * Read-only °C int16_t. MCU temperature in degrees Celsius (approximate).\n     *\n     * ```\n     * const [mcuTemperature] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    ControlReg[ControlReg[\"McuTemperature\"] = 386] = \"McuTemperature\";\n    /**\n     * Read-only μs uint64_t. Number of microseconds since boot.\n     *\n     * ```\n     * const [uptime] = jdunpack<[number]>(buf, \"u64\")\n     * ```\n     */\n    ControlReg[ControlReg[\"Uptime\"] = 390] = \"Uptime\";\n})(exports.ControlReg || (exports.ControlReg = {}));\n// Service: Dimmer\nconst SRV_DIMMER = 0x1fb02645;\nexports.DimmerVariant = void 0;\n(function (DimmerVariant) {\n    DimmerVariant[DimmerVariant[\"Light\"] = 1] = \"Light\";\n    DimmerVariant[DimmerVariant[\"Fan\"] = 2] = \"Fan\";\n    DimmerVariant[DimmerVariant[\"Pump\"] = 3] = \"Pump\";\n})(exports.DimmerVariant || (exports.DimmerVariant = {}));\nexports.DimmerReg = void 0;\n(function (DimmerReg) {\n    /**\n     * Read-write ratio u0.16 (uint16_t). The intensity of the current. Set to ``0`` to turn off completely the current.\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    DimmerReg[DimmerReg[\"Intensity\"] = 1] = \"Intensity\";\n    /**\n     * Constant Variant (uint8_t). The type of physical device\n     *\n     * ```\n     * const [variant] = jdunpack<[DimmerVariant]>(buf, \"u8\")\n     * ```\n     */\n    DimmerReg[DimmerReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.DimmerReg || (exports.DimmerReg = {}));\n// Service: Distance\nconst SRV_DISTANCE = 0x141a6b8a;\nexports.DistanceVariant = void 0;\n(function (DistanceVariant) {\n    DistanceVariant[DistanceVariant[\"Ultrasonic\"] = 1] = \"Ultrasonic\";\n    DistanceVariant[DistanceVariant[\"Infrared\"] = 2] = \"Infrared\";\n    DistanceVariant[DistanceVariant[\"LiDAR\"] = 3] = \"LiDAR\";\n    DistanceVariant[DistanceVariant[\"Laser\"] = 4] = \"Laser\";\n})(exports.DistanceVariant || (exports.DistanceVariant = {}));\nexports.DistanceReg = void 0;\n(function (DistanceReg) {\n    /**\n     * Read-only m u16.16 (uint32_t). Current distance from the object\n     *\n     * ```\n     * const [distance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    DistanceReg[DistanceReg[\"Distance\"] = 257] = \"Distance\";\n    /**\n     * Constant m u16.16 (uint32_t). Minimum measurable distance\n     *\n     * ```\n     * const [minRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    DistanceReg[DistanceReg[\"MinRange\"] = 260] = \"MinRange\";\n    /**\n     * Constant m u16.16 (uint32_t). Maximum measurable distance\n     *\n     * ```\n     * const [maxRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    DistanceReg[DistanceReg[\"MaxRange\"] = 261] = \"MaxRange\";\n    /**\n     * Constant Variant (uint8_t). Determines the type of sensor used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DistanceVariant]>(buf, \"u8\")\n     * ```\n     */\n    DistanceReg[DistanceReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.DistanceReg || (exports.DistanceReg = {}));\n// Service: DMX\nconst SRV_DMX = 0x11cf8c05;\nexports.DmxReg = void 0;\n(function (DmxReg) {\n    /**\n     * Read-write bool (uint8_t). Determines if the DMX bridge is active\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DmxReg[DmxReg[\"Enabled\"] = 1] = \"Enabled\";\n})(exports.DmxReg || (exports.DmxReg = {}));\nexports.DmxCmd = void 0;\n(function (DmxCmd) {\n    /**\n     * Argument: channels bytes. Send a DMX packet, up to 236bytes long, including the start code.\n     *\n     * ```\n     * const [channels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    DmxCmd[DmxCmd[\"Send\"] = 128] = \"Send\";\n})(exports.DmxCmd || (exports.DmxCmd = {}));\n// Service: Dot Matrix\nconst SRV_DOT_MATRIX = 0x110d154b;\nexports.DotMatrixVariant = void 0;\n(function (DotMatrixVariant) {\n    DotMatrixVariant[DotMatrixVariant[\"LED\"] = 1] = \"LED\";\n    DotMatrixVariant[DotMatrixVariant[\"Braille\"] = 2] = \"Braille\";\n})(exports.DotMatrixVariant || (exports.DotMatrixVariant = {}));\nexports.DotMatrixReg = void 0;\n(function (DotMatrixReg) {\n    /**\n     * Read-write bytes. The state of the screen where dot on/off state is\n     * stored as a bit, column by column. The column should be byte aligned.\n     *\n     * ```\n     * const [dots] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    DotMatrixReg[DotMatrixReg[\"Dots\"] = 2] = \"Dots\";\n    /**\n     * Read-write ratio u0.8 (uint8_t). Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    DotMatrixReg[DotMatrixReg[\"Brightness\"] = 1] = \"Brightness\";\n    /**\n     * Constant # uint16_t. Number of rows on the screen\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    DotMatrixReg[DotMatrixReg[\"Rows\"] = 385] = \"Rows\";\n    /**\n     * Constant # uint16_t. Number of columns on the screen\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    DotMatrixReg[DotMatrixReg[\"Columns\"] = 386] = \"Columns\";\n    /**\n     * Constant Variant (uint8_t). Describes the type of matrix used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DotMatrixVariant]>(buf, \"u8\")\n     * ```\n     */\n    DotMatrixReg[DotMatrixReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.DotMatrixReg || (exports.DotMatrixReg = {}));\n// Service: Equivalent CO₂\nconst SRV_E_CO2 = 0x169c9dc6;\nexports.ECO2Variant = void 0;\n(function (ECO2Variant) {\n    ECO2Variant[ECO2Variant[\"VOC\"] = 1] = \"VOC\";\n    ECO2Variant[ECO2Variant[\"NDIR\"] = 2] = \"NDIR\";\n})(exports.ECO2Variant || (exports.ECO2Variant = {}));\nexports.ECO2Reg = void 0;\n(function (ECO2Reg) {\n    /**\n     * Read-only ppm u22.10 (uint32_t). Equivalent CO₂ (eCO₂) readings.\n     *\n     * ```\n     * const [eCO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"ECO2\"] = 257] = \"ECO2\";\n    /**\n     * Read-only ppm u22.10 (uint32_t). Error on the reading value.\n     *\n     * ```\n     * const [eCO2Error] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"ECO2Error\"] = 262] = \"ECO2Error\";\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"MinECO2\"] = 260] = \"MinECO2\";\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"MaxECO2\"] = 261] = \"MaxECO2\";\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"ConditioningPeriod\"] = 384] = \"ConditioningPeriod\";\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[ECO2Variant]>(buf, \"u8\")\n     * ```\n     */\n    ECO2Reg[ECO2Reg[\"Variant\"] = 263] = \"Variant\";\n})(exports.ECO2Reg || (exports.ECO2Reg = {}));\n// Service: Flex\nconst SRV_FLEX = 0x1f47c6c6;\nexports.FlexVariant = void 0;\n(function (FlexVariant) {\n    FlexVariant[FlexVariant[\"Linear22Inch\"] = 1] = \"Linear22Inch\";\n    FlexVariant[FlexVariant[\"Linear45Inch\"] = 2] = \"Linear45Inch\";\n})(exports.FlexVariant || (exports.FlexVariant = {}));\nexports.FlexReg = void 0;\n(function (FlexReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [bending] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    FlexReg[FlexReg[\"Bending\"] = 257] = \"Bending\";\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the flex sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[FlexVariant]>(buf, \"u8\")\n     * ```\n     */\n    FlexReg[FlexReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.FlexReg || (exports.FlexReg = {}));\n// Service: Gyroscope\nconst SRV_GYROSCOPE = 0x1e1b06f2;\nexports.GyroscopeReg = void 0;\n(function (GyroscopeReg) {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    GyroscopeReg[GyroscopeReg[\"RotationRates\"] = 257] = \"RotationRates\";\n    /**\n     * Read-only °/s i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [rotationRatesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    GyroscopeReg[GyroscopeReg[\"RotationRatesError\"] = 262] = \"RotationRatesError\";\n    /**\n     * Read-write °/s i12.20 (int32_t). Configures the range of range of rotation rates.\n     *\n     * ```\n     * const [maxRate] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    GyroscopeReg[GyroscopeReg[\"MaxRate\"] = 128] = \"MaxRate\";\n})(exports.GyroscopeReg || (exports.GyroscopeReg = {}));\n// Service: Heart Rate\nconst SRV_HEART_RATE = 0x166c6dc4;\nexports.HeartRateVariant = void 0;\n(function (HeartRateVariant) {\n    HeartRateVariant[HeartRateVariant[\"Finger\"] = 1] = \"Finger\";\n    HeartRateVariant[HeartRateVariant[\"Chest\"] = 2] = \"Chest\";\n    HeartRateVariant[HeartRateVariant[\"Wrist\"] = 3] = \"Wrist\";\n    HeartRateVariant[HeartRateVariant[\"Pump\"] = 4] = \"Pump\";\n    HeartRateVariant[HeartRateVariant[\"WebCam\"] = 5] = \"WebCam\";\n})(exports.HeartRateVariant || (exports.HeartRateVariant = {}));\nexports.HeartRateReg = void 0;\n(function (HeartRateReg) {\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated heart rate.\n     *\n     * ```\n     * const [heartRate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRateReg[HeartRateReg[\"HeartRate\"] = 257] = \"HeartRate\";\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [heartRateError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRateReg[HeartRateReg[\"HeartRateError\"] = 262] = \"HeartRateError\";\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[HeartRateVariant]>(buf, \"u8\")\n     * ```\n     */\n    HeartRateReg[HeartRateReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.HeartRateReg || (exports.HeartRateReg = {}));\n// Service: HID Adapter\nconst SRV_HID_ADAPTER = 0x1e5758b5;\nexports.HidAdapterReg = void 0;\n(function (HidAdapterReg) {\n    /**\n     * Read-write uint8_t. The number of configurations stored on the server.\n     *\n     * ```\n     * const [numConfigurations] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    HidAdapterReg[HidAdapterReg[\"NumConfigurations\"] = 128] = \"NumConfigurations\";\n    /**\n     * Read-write uint8_t. The current configuration the server is using.\n     *\n     * ```\n     * const [currentConfiguration] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    HidAdapterReg[HidAdapterReg[\"CurrentConfiguration\"] = 129] = \"CurrentConfiguration\";\n})(exports.HidAdapterReg || (exports.HidAdapterReg = {}));\nexports.HidAdapterCmd = void 0;\n(function (HidAdapterCmd) {\n    /**\n     * Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned\n     *\n     * ```\n     * const [results, configurationNumber] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u8\")\n     * ```\n     */\n    HidAdapterCmd[HidAdapterCmd[\"GetConfiguration\"] = 128] = \"GetConfiguration\";\n    /**\n     * Stores the given binding on the server. If a binding exists at this index, the new binding will replace it.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n     * ```\n     */\n    HidAdapterCmd[HidAdapterCmd[\"SetBinding\"] = 130] = \"SetBinding\";\n    /**\n     * Clears a specific binding stored on the device.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex] = jdunpack<[number, number]>(buf, \"u8 u8\")\n     * ```\n     */\n    HidAdapterCmd[HidAdapterCmd[\"ClearBinding\"] = 131] = \"ClearBinding\";\n    /**\n     * Argument: configuration_number uint8_t. Clears a specific configuration stored on the device.\n     *\n     * ```\n     * const [configurationNumber] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    HidAdapterCmd[HidAdapterCmd[\"ClearConfiguration\"] = 132] = \"ClearConfiguration\";\n    /**\n     * No args. Clears all configurations and bindings stored on the device.\n     */\n    HidAdapterCmd[HidAdapterCmd[\"Clear\"] = 133] = \"Clear\";\n})(exports.HidAdapterCmd || (exports.HidAdapterCmd = {}));\n/**\n * pipe_report Configuration\n * ```\n * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n * ```\n */\nexports.HidAdapterEvent = void 0;\n(function (HidAdapterEvent) {\n    /**\n     * Event that notifies clients that the server has swapped to a new configuration or changed key bindings.\n     */\n    HidAdapterEvent[HidAdapterEvent[\"Changed\"] = 3] = \"Changed\";\n})(exports.HidAdapterEvent || (exports.HidAdapterEvent = {}));\n// Service: HID Keyboard\nconst SRV_HID_KEYBOARD = 0x18b05b6a;\nexports.HidKeyboardModifiers = void 0;\n(function (HidKeyboardModifiers) {\n    HidKeyboardModifiers[HidKeyboardModifiers[\"None\"] = 0] = \"None\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"LeftControl\"] = 1] = \"LeftControl\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"LeftShift\"] = 2] = \"LeftShift\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"LeftAlt\"] = 4] = \"LeftAlt\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"LeftGUI\"] = 8] = \"LeftGUI\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"RightControl\"] = 16] = \"RightControl\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"RightShift\"] = 32] = \"RightShift\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"RightAlt\"] = 64] = \"RightAlt\";\n    HidKeyboardModifiers[HidKeyboardModifiers[\"RightGUI\"] = 128] = \"RightGUI\";\n})(exports.HidKeyboardModifiers || (exports.HidKeyboardModifiers = {}));\nexports.HidKeyboardAction = void 0;\n(function (HidKeyboardAction) {\n    HidKeyboardAction[HidKeyboardAction[\"Press\"] = 0] = \"Press\";\n    HidKeyboardAction[HidKeyboardAction[\"Up\"] = 1] = \"Up\";\n    HidKeyboardAction[HidKeyboardAction[\"Down\"] = 2] = \"Down\";\n})(exports.HidKeyboardAction || (exports.HidKeyboardAction = {}));\nexports.HidKeyboardCmd = void 0;\n(function (HidKeyboardCmd) {\n    /**\n     * Presses a key or a sequence of keys down.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, HidKeyboardModifiers, HidKeyboardAction])[]]>(buf, \"r: u16 u8 u8\")\n     * const [selector, modifiers, action] = rest[0]\n     * ```\n     */\n    HidKeyboardCmd[HidKeyboardCmd[\"Key\"] = 128] = \"Key\";\n    /**\n     * No args. Clears all pressed keys.\n     */\n    HidKeyboardCmd[HidKeyboardCmd[\"Clear\"] = 129] = \"Clear\";\n})(exports.HidKeyboardCmd || (exports.HidKeyboardCmd = {}));\n// Service: HID Mouse\nconst SRV_HID_MOUSE = 0x1885dc1c;\nexports.HidMouseButton = void 0;\n(function (HidMouseButton) {\n    HidMouseButton[HidMouseButton[\"Left\"] = 1] = \"Left\";\n    HidMouseButton[HidMouseButton[\"Right\"] = 2] = \"Right\";\n    HidMouseButton[HidMouseButton[\"Middle\"] = 4] = \"Middle\";\n})(exports.HidMouseButton || (exports.HidMouseButton = {}));\nexports.HidMouseButtonEvent = void 0;\n(function (HidMouseButtonEvent) {\n    HidMouseButtonEvent[HidMouseButtonEvent[\"Up\"] = 1] = \"Up\";\n    HidMouseButtonEvent[HidMouseButtonEvent[\"Down\"] = 2] = \"Down\";\n    HidMouseButtonEvent[HidMouseButtonEvent[\"Click\"] = 3] = \"Click\";\n    HidMouseButtonEvent[HidMouseButtonEvent[\"DoubleClick\"] = 4] = \"DoubleClick\";\n})(exports.HidMouseButtonEvent || (exports.HidMouseButtonEvent = {}));\nexports.HidMouseCmd = void 0;\n(function (HidMouseCmd) {\n    /**\n     * Sets the up/down state of one or more buttons.\n     * A ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\n     * A ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\n     *\n     * ```\n     * const [buttons, event] = jdunpack<[HidMouseButton, HidMouseButtonEvent]>(buf, \"u16 u8\")\n     * ```\n     */\n    HidMouseCmd[HidMouseCmd[\"SetButton\"] = 128] = \"SetButton\";\n    /**\n     * Moves the mouse by the distance specified.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dx, dy, time] = jdunpack<[number, number, number]>(buf, \"i16 i16 u16\")\n     * ```\n     */\n    HidMouseCmd[HidMouseCmd[\"Move\"] = 129] = \"Move\";\n    /**\n     * Turns the wheel up or down. Positive if scrolling up.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dy, time] = jdunpack<[number, number]>(buf, \"i16 u16\")\n     * ```\n     */\n    HidMouseCmd[HidMouseCmd[\"Wheel\"] = 130] = \"Wheel\";\n})(exports.HidMouseCmd || (exports.HidMouseCmd = {}));\n// Service: Humidity\nconst SRV_HUMIDITY = 0x16c810b8;\nexports.HumidityReg = void 0;\n(function (HumidityReg) {\n    /**\n     * Read-only %RH u22.10 (uint32_t). The relative humidity in percentage of full water saturation.\n     *\n     * ```\n     * const [humidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityReg[HumidityReg[\"Humidity\"] = 257] = \"Humidity\";\n    /**\n     * Read-only %RH u22.10 (uint32_t). The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\n     *\n     * ```\n     * const [humidityError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityReg[HumidityReg[\"HumidityError\"] = 262] = \"HumidityError\";\n    /**\n     * Constant %RH u22.10 (uint32_t). Lowest humidity that can be reported.\n     *\n     * ```\n     * const [minHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityReg[HumidityReg[\"MinHumidity\"] = 260] = \"MinHumidity\";\n    /**\n     * Constant %RH u22.10 (uint32_t). Highest humidity that can be reported.\n     *\n     * ```\n     * const [maxHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityReg[HumidityReg[\"MaxHumidity\"] = 261] = \"MaxHumidity\";\n})(exports.HumidityReg || (exports.HumidityReg = {}));\n// Service: Illuminance\nconst SRV_ILLUMINANCE = 0x1e6ecaf2;\nexports.IlluminanceReg = void 0;\n(function (IlluminanceReg) {\n    /**\n     * Read-only lux u22.10 (uint32_t). The amount of illuminance, as lumens per square metre.\n     *\n     * ```\n     * const [light] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    IlluminanceReg[IlluminanceReg[\"Light\"] = 257] = \"Light\";\n    /**\n     * Read-only lux u22.10 (uint32_t). Error on the reported sensor value.\n     *\n     * ```\n     * const [lightError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    IlluminanceReg[IlluminanceReg[\"LightError\"] = 262] = \"LightError\";\n})(exports.IlluminanceReg || (exports.IlluminanceReg = {}));\n// Service: Indexed screen\nconst SRV_INDEXED_SCREEN = 0x16fa36e5;\nexports.IndexedScreenCmd = void 0;\n(function (IndexedScreenCmd) {\n    /**\n     * Sets the update window for subsequent `set_pixels` commands.\n     *\n     * ```\n     * const [x, y, width, height] = jdunpack<[number, number, number, number]>(buf, \"u16 u16 u16 u16\")\n     * ```\n     */\n    IndexedScreenCmd[IndexedScreenCmd[\"StartUpdate\"] = 129] = \"StartUpdate\";\n    /**\n     * Argument: pixels bytes. Set pixels in current window, according to current palette.\n     * Each \"line\" of data is aligned to a byte.\n     *\n     * ```\n     * const [pixels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    IndexedScreenCmd[IndexedScreenCmd[\"SetPixels\"] = 131] = \"SetPixels\";\n})(exports.IndexedScreenCmd || (exports.IndexedScreenCmd = {}));\nexports.IndexedScreenReg = void 0;\n(function (IndexedScreenReg) {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set backlight brightness.\n     * If set to `0` the display may go to sleep.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"Brightness\"] = 1] = \"Brightness\";\n    /**\n     * The current palette.\n     * The color entry repeats `1 << bits_per_pixel` times.\n     * This register may be write-only.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number, number])[]]>(buf, \"r: u8 u8 u8 x[1]\")\n     * const [blue, green, red] = rest[0]\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"Palette\"] = 128] = \"Palette\";\n    /**\n     * Constant bit uint8_t. Determines the number of palette entries.\n     * Typical values are 1, 2, 4, or 8.\n     *\n     * ```\n     * const [bitsPerPixel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"BitsPerPixel\"] = 384] = \"BitsPerPixel\";\n    /**\n     * Constant px uint16_t. Screen width in \"natural\" orientation.\n     *\n     * ```\n     * const [width] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"Width\"] = 385] = \"Width\";\n    /**\n     * Constant px uint16_t. Screen height in \"natural\" orientation.\n     *\n     * ```\n     * const [height] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"Height\"] = 386] = \"Height\";\n    /**\n     * Read-write bool (uint8_t). If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\n     * If false, consecutive pixels in the \"height\" direction are sent next to each other.\n     * For embedded screen controllers, this is typically true iff `width < height`\n     * (in other words, it's only true for portrait orientation screens).\n     * Some controllers may allow the user to change this (though the refresh order may not be optimal then).\n     * This is independent of the `rotation` register.\n     *\n     * ```\n     * const [widthMajor] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"WidthMajor\"] = 129] = \"WidthMajor\";\n    /**\n     * Read-write px uint8_t. Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\n     * Some displays may allow changing this (which will also result in changes to `width` and `height`).\n     * Typical values are 1 and 2.\n     *\n     * ```\n     * const [upSampling] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"UpSampling\"] = 130] = \"UpSampling\";\n    /**\n     * Read-write ° uint16_t. Possible values are 0, 90, 180 and 270 only.\n     * Write to this register do not affect `width` and `height` registers,\n     * and may be ignored by some screens.\n     *\n     * ```\n     * const [rotation] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    IndexedScreenReg[IndexedScreenReg[\"Rotation\"] = 131] = \"Rotation\";\n})(exports.IndexedScreenReg || (exports.IndexedScreenReg = {}));\n// Service: Infrastructure\nconst SRV_INFRASTRUCTURE = 0x1e1589eb;\n// Service: Joystick\nconst SRV_JOYSTICK = 0x108f7456;\nexports.JoystickButtons = void 0;\n(function (JoystickButtons) {\n    JoystickButtons[JoystickButtons[\"Left\"] = 1] = \"Left\";\n    JoystickButtons[JoystickButtons[\"Up\"] = 2] = \"Up\";\n    JoystickButtons[JoystickButtons[\"Right\"] = 4] = \"Right\";\n    JoystickButtons[JoystickButtons[\"Down\"] = 8] = \"Down\";\n    JoystickButtons[JoystickButtons[\"A\"] = 16] = \"A\";\n    JoystickButtons[JoystickButtons[\"B\"] = 32] = \"B\";\n    JoystickButtons[JoystickButtons[\"Menu\"] = 64] = \"Menu\";\n    JoystickButtons[JoystickButtons[\"Select\"] = 128] = \"Select\";\n    JoystickButtons[JoystickButtons[\"Reset\"] = 256] = \"Reset\";\n    JoystickButtons[JoystickButtons[\"Exit\"] = 512] = \"Exit\";\n    JoystickButtons[JoystickButtons[\"X\"] = 1024] = \"X\";\n    JoystickButtons[JoystickButtons[\"Y\"] = 2048] = \"Y\";\n})(exports.JoystickButtons || (exports.JoystickButtons = {}));\nexports.JoystickVariant = void 0;\n(function (JoystickVariant) {\n    JoystickVariant[JoystickVariant[\"Thumb\"] = 1] = \"Thumb\";\n    JoystickVariant[JoystickVariant[\"ArcadeBall\"] = 2] = \"ArcadeBall\";\n    JoystickVariant[JoystickVariant[\"ArcadeStick\"] = 3] = \"ArcadeStick\";\n    JoystickVariant[JoystickVariant[\"Gamepad\"] = 4] = \"Gamepad\";\n})(exports.JoystickVariant || (exports.JoystickVariant = {}));\nexports.JoystickReg = void 0;\n(function (JoystickReg) {\n    /**\n     * If the joystick is analog, the directional buttons should be \"simulated\", based on joystick position\n     * (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\n     * If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\n     * The primary button on the joystick is `A`.\n     *\n     * ```\n     * const [buttons, x, y] = jdunpack<[JoystickButtons, number, number]>(buf, \"u32 i1.15 i1.15\")\n     * ```\n     */\n    JoystickReg[JoystickReg[\"Direction\"] = 257] = \"Direction\";\n    /**\n     * Constant Variant (uint8_t). The type of physical joystick.\n     *\n     * ```\n     * const [variant] = jdunpack<[JoystickVariant]>(buf, \"u8\")\n     * ```\n     */\n    JoystickReg[JoystickReg[\"Variant\"] = 263] = \"Variant\";\n    /**\n     * Constant Buttons (uint32_t). Indicates a bitmask of the buttons that are mounted on the joystick.\n     * If the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\n     * Even when marked as not available, they will still be simulated based on the analog joystick.\n     *\n     * ```\n     * const [buttonsAvailable] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    JoystickReg[JoystickReg[\"ButtonsAvailable\"] = 384] = \"ButtonsAvailable\";\n})(exports.JoystickReg || (exports.JoystickReg = {}));\nexports.JoystickEvent = void 0;\n(function (JoystickEvent) {\n    /**\n     * Argument: buttons Buttons (uint32_t). Emitted whenever the state of buttons changes.\n     *\n     * ```\n     * const [buttons] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    JoystickEvent[JoystickEvent[\"ButtonsChanged\"] = 3] = \"ButtonsChanged\";\n})(exports.JoystickEvent || (exports.JoystickEvent = {}));\n// Service: LED\nconst SRV_LED = 0x1e3048f8;\nexports.LedVariant = void 0;\n(function (LedVariant) {\n    LedVariant[LedVariant[\"ThroughHole\"] = 1] = \"ThroughHole\";\n    LedVariant[LedVariant[\"SMD\"] = 2] = \"SMD\";\n    LedVariant[LedVariant[\"Power\"] = 3] = \"Power\";\n    LedVariant[LedVariant[\"Bead\"] = 4] = \"Bead\";\n})(exports.LedVariant || (exports.LedVariant = {}));\nexports.LedCmd = void 0;\n(function (LedCmd) {\n    /**\n     * This has the same semantics as `set_status_light` in the control service.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    LedCmd[LedCmd[\"Animate\"] = 128] = \"Animate\";\n})(exports.LedCmd || (exports.LedCmd = {}));\nexports.LedReg = void 0;\n(function (LedReg) {\n    /**\n     * The current color of the LED.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u8 u8 u8\")\n     * ```\n     */\n    LedReg[LedReg[\"Color\"] = 384] = \"Color\";\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedReg[LedReg[\"MaxPower\"] = 7] = \"MaxPower\";\n    /**\n     * Constant uint16_t. If known, specifies the number of LEDs in parallel on this device.\n     *\n     * ```\n     * const [ledCount] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedReg[LedReg[\"LedCount\"] = 387] = \"LedCount\";\n    /**\n     * Constant nm uint16_t. If monochrome LED, specifies the wave length of the LED.\n     *\n     * ```\n     * const [waveLength] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedReg[LedReg[\"WaveLength\"] = 385] = \"WaveLength\";\n    /**\n     * Constant mcd uint16_t. The luminous intensity of the LED, at full value, in micro candella.\n     *\n     * ```\n     * const [luminousIntensity] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedReg[LedReg[\"LuminousIntensity\"] = 386] = \"LuminousIntensity\";\n    /**\n     * Constant Variant (uint8_t). The physical type of LED.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedVariant]>(buf, \"u8\")\n     * ```\n     */\n    LedReg[LedReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.LedReg || (exports.LedReg = {}));\n// Service: LED Pixel\nconst SRV_LED_PIXEL = 0x126f00e0;\nexports.LedPixelLightType = void 0;\n(function (LedPixelLightType) {\n    LedPixelLightType[LedPixelLightType[\"WS2812B_GRB\"] = 0] = \"WS2812B_GRB\";\n    LedPixelLightType[LedPixelLightType[\"APA102\"] = 16] = \"APA102\";\n    LedPixelLightType[LedPixelLightType[\"SK9822\"] = 17] = \"SK9822\";\n})(exports.LedPixelLightType || (exports.LedPixelLightType = {}));\nexports.LedPixelVariant = void 0;\n(function (LedPixelVariant) {\n    LedPixelVariant[LedPixelVariant[\"Strip\"] = 1] = \"Strip\";\n    LedPixelVariant[LedPixelVariant[\"Ring\"] = 2] = \"Ring\";\n    LedPixelVariant[LedPixelVariant[\"Stick\"] = 3] = \"Stick\";\n    LedPixelVariant[LedPixelVariant[\"Jewel\"] = 4] = \"Jewel\";\n    LedPixelVariant[LedPixelVariant[\"Matrix\"] = 5] = \"Matrix\";\n})(exports.LedPixelVariant || (exports.LedPixelVariant = {}));\nexports.LedPixelReg = void 0;\n(function (LedPixelReg) {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set the luminosity of the strip.\n     * At `0` the power to the strip is completely shut down.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"Brightness\"] = 1] = \"Brightness\";\n    /**\n     * Read-only ratio u0.8 (uint8_t). This is the luminosity actually applied to the strip.\n     * May be lower than `brightness` if power-limited by the `max_power` register.\n     * It will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n     *\n     * ```\n     * const [actualBrightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"ActualBrightness\"] = 384] = \"ActualBrightness\";\n    /**\n     * Read-write LightType (uint8_t). Specifies the type of light strip connected to controller.\n     * Controllers which are sold with lights should default to the correct type\n     * and could not allow change.\n     *\n     * ```\n     * const [lightType] = jdunpack<[LedPixelLightType]>(buf, \"u8\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"LightType\"] = 128] = \"LightType\";\n    /**\n     * Read-write # uint16_t. Specifies the number of pixels in the strip.\n     * Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"NumPixels\"] = 129] = \"NumPixels\";\n    /**\n     * Read-write # uint16_t. If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numColumns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"NumColumns\"] = 131] = \"NumColumns\";\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"MaxPower\"] = 7] = \"MaxPower\";\n    /**\n     * Constant # uint16_t. The maximum supported number of pixels.\n     * All writes to `num_pixels` are clamped to `max_pixels`.\n     *\n     * ```\n     * const [maxPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"MaxPixels\"] = 385] = \"MaxPixels\";\n    /**\n     * Read-write # uint16_t. How many times to repeat the program passed in `run` command.\n     * Should be set before the `run` command.\n     * Setting to `0` means to repeat forever.\n     *\n     * ```\n     * const [numRepeats] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"NumRepeats\"] = 130] = \"NumRepeats\";\n    /**\n     * Constant Variant (uint8_t). Specifies the shape of the light strip.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedPixelVariant]>(buf, \"u8\")\n     * ```\n     */\n    LedPixelReg[LedPixelReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.LedPixelReg || (exports.LedPixelReg = {}));\nexports.LedPixelCmd = void 0;\n(function (LedPixelCmd) {\n    /**\n     * Argument: program bytes. Run the given light \"program\". See service description for details.\n     *\n     * ```\n     * const [program] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    LedPixelCmd[LedPixelCmd[\"Run\"] = 129] = \"Run\";\n})(exports.LedPixelCmd || (exports.LedPixelCmd = {}));\n// Service: Light level\nconst SRV_LIGHT_LEVEL = 0x17dc9a1c;\nexports.LightLevelVariant = void 0;\n(function (LightLevelVariant) {\n    LightLevelVariant[LightLevelVariant[\"PhotoResistor\"] = 1] = \"PhotoResistor\";\n    LightLevelVariant[LightLevelVariant[\"LEDMatrix\"] = 2] = \"LEDMatrix\";\n    LightLevelVariant[LightLevelVariant[\"Ambient\"] = 3] = \"Ambient\";\n})(exports.LightLevelVariant || (exports.LightLevelVariant = {}));\nexports.LightLevelReg = void 0;\n(function (LightLevelReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Detect light level\n     *\n     * ```\n     * const [lightLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    LightLevelReg[LightLevelReg[\"LightLevel\"] = 257] = \"LightLevel\";\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[LightLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    LightLevelReg[LightLevelReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.LightLevelReg || (exports.LightLevelReg = {}));\n// Service: Logger\nconst SRV_LOGGER = 0x12dc1fca;\nexports.LoggerPriority = void 0;\n(function (LoggerPriority) {\n    LoggerPriority[LoggerPriority[\"Debug\"] = 0] = \"Debug\";\n    LoggerPriority[LoggerPriority[\"Log\"] = 1] = \"Log\";\n    LoggerPriority[LoggerPriority[\"Warning\"] = 2] = \"Warning\";\n    LoggerPriority[LoggerPriority[\"Error\"] = 3] = \"Error\";\n    LoggerPriority[LoggerPriority[\"Silent\"] = 4] = \"Silent\";\n})(exports.LoggerPriority || (exports.LoggerPriority = {}));\nexports.LoggerReg = void 0;\n(function (LoggerReg) {\n    /**\n     * Read-write Priority (uint8_t). Messages with level lower than this won't be emitted. The default setting may vary.\n     * Loggers should revert this to their default setting if the register has not been\n     * updated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\n     * Thus, clients should write this register every 1000ms and ignore messages which are\n     * too verbose for them.\n     *\n     * ```\n     * const [minPriority] = jdunpack<[LoggerPriority]>(buf, \"u8\")\n     * ```\n     */\n    LoggerReg[LoggerReg[\"MinPriority\"] = 128] = \"MinPriority\";\n})(exports.LoggerReg || (exports.LoggerReg = {}));\nexports.LoggerCmd = void 0;\n(function (LoggerCmd) {\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LoggerCmd[LoggerCmd[\"Debug\"] = 128] = \"Debug\";\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LoggerCmd[LoggerCmd[\"Log\"] = 129] = \"Log\";\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LoggerCmd[LoggerCmd[\"Warn\"] = 130] = \"Warn\";\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LoggerCmd[LoggerCmd[\"Error\"] = 131] = \"Error\";\n})(exports.LoggerCmd || (exports.LoggerCmd = {}));\n// Service: Magnetometer\nconst SRV_MAGNETOMETER = 0x13029088;\nexports.MagnetometerReg = void 0;\n(function (MagnetometerReg) {\n    /**\n     * Indicates the current magnetic field on magnetometer.\n     * For reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i32 i32 i32\")\n     * ```\n     */\n    MagnetometerReg[MagnetometerReg[\"Forces\"] = 257] = \"Forces\";\n    /**\n     * Read-only nT int32_t. Error on the readings.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MagnetometerReg[MagnetometerReg[\"ForcesError\"] = 262] = \"ForcesError\";\n})(exports.MagnetometerReg || (exports.MagnetometerReg = {}));\nexports.MagnetometerCmd = void 0;\n(function (MagnetometerCmd) {\n    /**\n     * No args. Forces a calibration sequence where the user/device\n     * might have to rotate to be calibrated.\n     */\n    MagnetometerCmd[MagnetometerCmd[\"Calibrate\"] = 2] = \"Calibrate\";\n})(exports.MagnetometerCmd || (exports.MagnetometerCmd = {}));\n// Service: Matrix Keypad\nconst SRV_MATRIX_KEYPAD = 0x13062dc8;\nexports.MatrixKeypadVariant = void 0;\n(function (MatrixKeypadVariant) {\n    MatrixKeypadVariant[MatrixKeypadVariant[\"Membrane\"] = 1] = \"Membrane\";\n    MatrixKeypadVariant[MatrixKeypadVariant[\"Keyboard\"] = 2] = \"Keyboard\";\n    MatrixKeypadVariant[MatrixKeypadVariant[\"Elastomer\"] = 3] = \"Elastomer\";\n    MatrixKeypadVariant[MatrixKeypadVariant[\"ElastomerLEDPixel\"] = 4] = \"ElastomerLEDPixel\";\n})(exports.MatrixKeypadVariant || (exports.MatrixKeypadVariant = {}));\nexports.MatrixKeypadReg = void 0;\n(function (MatrixKeypadReg) {\n    /**\n     * Read-only. The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n     * ``row = index / columns``, ``column = index % columns``.\n     *\n     * ```\n     * const [index] = jdunpack<[number[]]>(buf, \"u8[]\")\n     * ```\n     */\n    MatrixKeypadReg[MatrixKeypadReg[\"Pressed\"] = 257] = \"Pressed\";\n    /**\n     * Constant # uint8_t. Number of rows in the matrix\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadReg[MatrixKeypadReg[\"Rows\"] = 384] = \"Rows\";\n    /**\n     * Constant # uint8_t. Number of columns in the matrix\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadReg[MatrixKeypadReg[\"Columns\"] = 385] = \"Columns\";\n    /**\n     * Constant. The characters printed on the keys if any, in indexing sequence.\n     *\n     * ```\n     * const [label] = jdunpack<[string[]]>(buf, \"z[]\")\n     * ```\n     */\n    MatrixKeypadReg[MatrixKeypadReg[\"Labels\"] = 386] = \"Labels\";\n    /**\n     * Constant Variant (uint8_t). The type of physical keypad. If the variant is ``ElastomerLEDPixel``\n     * and the next service on the device is a ``LEDPixel`` service, it is considered\n     * as the service controlling the LED pixel on the keypad.\n     *\n     * ```\n     * const [variant] = jdunpack<[MatrixKeypadVariant]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadReg[MatrixKeypadReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.MatrixKeypadReg || (exports.MatrixKeypadReg = {}));\nexports.MatrixKeypadEvent = void 0;\n(function (MatrixKeypadEvent) {\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\n     *\n     * ```\n     * const [down] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadEvent[MatrixKeypadEvent[\"Down\"] = 1] = \"Down\";\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\n     *\n     * ```\n     * const [up] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadEvent[MatrixKeypadEvent[\"Up\"] = 2] = \"Up\";\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was not longer than 500ms.\n     *\n     * ```\n     * const [click] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadEvent[MatrixKeypadEvent[\"Click\"] = 128] = \"Click\";\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was more than 500ms.\n     *\n     * ```\n     * const [longClick] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MatrixKeypadEvent[MatrixKeypadEvent[\"LongClick\"] = 129] = \"LongClick\";\n})(exports.MatrixKeypadEvent || (exports.MatrixKeypadEvent = {}));\n// Service: Microphone\nconst SRV_MICROPHONE = 0x113dac86;\nexports.MicrophoneCmd = void 0;\n(function (MicrophoneCmd) {\n    /**\n     * The samples will be streamed back over the `samples` pipe.\n     * If `num_samples` is `0`, streaming will only stop when the pipe is closed.\n     * Otherwise the specified number of samples is streamed.\n     * Samples are sent as `i16`.\n     *\n     * ```\n     * const [samples, numSamples] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u32\")\n     * ```\n     */\n    MicrophoneCmd[MicrophoneCmd[\"Sample\"] = 129] = \"Sample\";\n})(exports.MicrophoneCmd || (exports.MicrophoneCmd = {}));\nexports.MicrophoneReg = void 0;\n(function (MicrophoneReg) {\n    /**\n     * Read-write μs uint32_t. Get or set microphone sampling period.\n     * Sampling rate is `1_000_000 / sampling_period Hz`.\n     *\n     * ```\n     * const [samplingPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MicrophoneReg[MicrophoneReg[\"SamplingPeriod\"] = 128] = \"SamplingPeriod\";\n})(exports.MicrophoneReg || (exports.MicrophoneReg = {}));\n// Service: MIDI output\nconst SRV_MIDI_OUTPUT = 0x1a848cd7;\nexports.MidiOutputReg = void 0;\n(function (MidiOutputReg) {\n    /**\n     * Read-write bool (uint8_t). Opens or closes the port to the MIDI device\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MidiOutputReg[MidiOutputReg[\"Enabled\"] = 1] = \"Enabled\";\n})(exports.MidiOutputReg || (exports.MidiOutputReg = {}));\nexports.MidiOutputCmd = void 0;\n(function (MidiOutputCmd) {\n    /**\n     * No args. Clears any pending send data that has not yet been sent from the MIDIOutput's queue.\n     */\n    MidiOutputCmd[MidiOutputCmd[\"Clear\"] = 128] = \"Clear\";\n    /**\n     * Argument: data bytes. Enqueues the message to be sent to the corresponding MIDI port\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    MidiOutputCmd[MidiOutputCmd[\"Send\"] = 129] = \"Send\";\n})(exports.MidiOutputCmd || (exports.MidiOutputCmd = {}));\n// Service: Model Runner\nconst SRV_MODEL_RUNNER = 0x140f9a78;\nexports.ModelRunnerModelFormat = void 0;\n(function (ModelRunnerModelFormat) {\n    ModelRunnerModelFormat[ModelRunnerModelFormat[\"TFLite\"] = 860636756] = \"TFLite\";\n    ModelRunnerModelFormat[ModelRunnerModelFormat[\"ML4F\"] = 809963362] = \"ML4F\";\n    ModelRunnerModelFormat[ModelRunnerModelFormat[\"EdgeImpulseCompiled\"] = 810961221] = \"EdgeImpulseCompiled\";\n})(exports.ModelRunnerModelFormat || (exports.ModelRunnerModelFormat = {}));\nexports.ModelRunnerCmd = void 0;\n(function (ModelRunnerCmd) {\n    /**\n     * Argument: model_size B uint32_t. Open pipe for streaming in the model. The size of the model has to be declared upfront.\n     * The model is streamed over regular pipe data packets.\n     * The format supported by this instance of the service is specified in `format` register.\n     * When the pipe is closed, the model is written all into flash, and the device running the service may reset.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerCmd[ModelRunnerCmd[\"SetModel\"] = 128] = \"SetModel\";\n    /**\n     * report SetModel\n     * ```\n     * const [modelPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    /**\n     * Argument: outputs pipe (bytes). Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\n     * and results are send over the `outputs` pipe.\n     *\n     * ```\n     * const [outputs] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ModelRunnerCmd[ModelRunnerCmd[\"Predict\"] = 129] = \"Predict\";\n    /**\n     * report Predict\n     * ```\n     * const [inputs] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n})(exports.ModelRunnerCmd || (exports.ModelRunnerCmd = {}));\nexports.ModelRunnerReg = void 0;\n(function (ModelRunnerReg) {\n    /**\n     * Read-write uint16_t. When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\n     * Model may be run less often if it takes longer to run than `N * sampling_interval`.\n     * The `outputs` register will stream its value after each run.\n     * This register is not stored in flash.\n     *\n     * ```\n     * const [autoInvokeEvery] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"AutoInvokeEvery\"] = 128] = \"AutoInvokeEvery\";\n    /**\n     * Read-only. Results of last model invocation as `float32` array.\n     *\n     * ```\n     * const [output] = jdunpack<[number[]]>(buf, \"f32[]\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"Outputs\"] = 257] = \"Outputs\";\n    /**\n     * Read-only. The shape of the input tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"InputShape\"] = 384] = \"InputShape\";\n    /**\n     * Read-only. The shape of the output tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"OutputShape\"] = 385] = \"OutputShape\";\n    /**\n     * Read-only μs uint32_t. The time consumed in last model execution.\n     *\n     * ```\n     * const [lastRunTime] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"LastRunTime\"] = 386] = \"LastRunTime\";\n    /**\n     * Read-only B uint32_t. Number of RAM bytes allocated for model execution.\n     *\n     * ```\n     * const [allocatedArenaSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"AllocatedArenaSize\"] = 387] = \"AllocatedArenaSize\";\n    /**\n     * Read-only B uint32_t. The size of the model in bytes.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"ModelSize\"] = 388] = \"ModelSize\";\n    /**\n     * Read-only string (bytes). Textual description of last error when running or loading model (if any).\n     *\n     * ```\n     * const [lastError] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"LastError\"] = 389] = \"LastError\";\n    /**\n     * Constant ModelFormat (uint32_t). The type of ML models supported by this service.\n     * `TFLite` is flatbuffer `.tflite` file.\n     * `ML4F` is compiled machine code model for Cortex-M4F.\n     * The format is typically present as first or second little endian word of model file.\n     *\n     * ```\n     * const [format] = jdunpack<[ModelRunnerModelFormat]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"Format\"] = 390] = \"Format\";\n    /**\n     * Constant uint32_t. A version number for the format.\n     *\n     * ```\n     * const [formatVersion] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"FormatVersion\"] = 391] = \"FormatVersion\";\n    /**\n     * Constant bool (uint8_t). If present and true this service can run models independently of other\n     * instances of this service on the device.\n     *\n     * ```\n     * const [parallel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ModelRunnerReg[ModelRunnerReg[\"Parallel\"] = 392] = \"Parallel\";\n})(exports.ModelRunnerReg || (exports.ModelRunnerReg = {}));\n// Service: Motion\nconst SRV_MOTION = 0x1179a749;\nexports.MotionVariant = void 0;\n(function (MotionVariant) {\n    MotionVariant[MotionVariant[\"PIR\"] = 1] = \"PIR\";\n})(exports.MotionVariant || (exports.MotionVariant = {}));\nexports.MotionReg = void 0;\n(function (MotionReg) {\n    /**\n     * Read-only bool (uint8_t). Reports is movement is currently detected by the sensor.\n     *\n     * ```\n     * const [moving] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MotionReg[MotionReg[\"Moving\"] = 257] = \"Moving\";\n    /**\n     * Constant m u16.16 (uint32_t). Maximum distance where objects can be detected.\n     *\n     * ```\n     * const [maxDistance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MotionReg[MotionReg[\"MaxDistance\"] = 384] = \"MaxDistance\";\n    /**\n     * Constant ° uint16_t. Opening of the field of view\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MotionReg[MotionReg[\"Angle\"] = 385] = \"Angle\";\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[MotionVariant]>(buf, \"u8\")\n     * ```\n     */\n    MotionReg[MotionReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.MotionReg || (exports.MotionReg = {}));\nexports.MotionEvent = void 0;\n(function (MotionEvent) {\n    /**\n     * A movement was detected.\n     */\n    MotionEvent[MotionEvent[\"Movement\"] = 1] = \"Movement\";\n})(exports.MotionEvent || (exports.MotionEvent = {}));\n// Service: Motor\nconst SRV_MOTOR = 0x17004cd8;\nexports.MotorReg = void 0;\n(function (MotorReg) {\n    /**\n     * Read-write ratio i1.15 (int16_t). PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\n     * Positive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0``\n     * while ``enabled`` acts as brake.\n     *\n     * ```\n     * const [duty] = jdunpack<[number]>(buf, \"i1.15\")\n     * ```\n     */\n    MotorReg[MotorReg[\"Duty\"] = 2] = \"Duty\";\n    /**\n     * Read-write bool (uint8_t). Turn the power to the motor on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    MotorReg[MotorReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Constant kg/cm u16.16 (uint32_t). Torque required to produce the rated power of an electrical motor at load speed.\n     *\n     * ```\n     * const [loadTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MotorReg[MotorReg[\"LoadTorque\"] = 384] = \"LoadTorque\";\n    /**\n     * Constant rpm u16.16 (uint32_t). Revolutions per minute of the motor under full load.\n     *\n     * ```\n     * const [loadSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MotorReg[MotorReg[\"LoadSpeed\"] = 385] = \"LoadSpeed\";\n})(exports.MotorReg || (exports.MotorReg = {}));\n// Service: Multitouch\nconst SRV_MULTITOUCH = 0x18d55e2b;\nexports.MultitouchReg = void 0;\n(function (MultitouchReg) {\n    /**\n     * Read-only. Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\n     * no touch, wheres a value of around `100` or more indicates touch.\n     * It's best to ignore this (unless debugging), and use events.\n     *\n     * ```\n     * const [capacitance] = jdunpack<[number[]]>(buf, \"i32[]\")\n     * ```\n     */\n    MultitouchReg[MultitouchReg[\"Capacity\"] = 257] = \"Capacity\";\n})(exports.MultitouchReg || (exports.MultitouchReg = {}));\nexports.MultitouchEvent = void 0;\n(function (MultitouchEvent) {\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MultitouchEvent[MultitouchEvent[\"Touch\"] = 1] = \"Touch\";\n    /**\n     * Argument: channel uint32_t. Emitted when an input is no longer touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MultitouchEvent[MultitouchEvent[\"Release\"] = 2] = \"Release\";\n    /**\n     * Argument: channel uint32_t. Emitted when an input is briefly touched. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MultitouchEvent[MultitouchEvent[\"Tap\"] = 128] = \"Tap\";\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched for longer than 500ms. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MultitouchEvent[MultitouchEvent[\"LongPress\"] = 129] = \"LongPress\";\n    /**\n     * Emitted when input channels are successively touched in order of increasing channel numbers.\n     */\n    MultitouchEvent[MultitouchEvent[\"SwipePos\"] = 144] = \"SwipePos\";\n    /**\n     * Emitted when input channels are successively touched in order of decreasing channel numbers.\n     */\n    MultitouchEvent[MultitouchEvent[\"SwipeNeg\"] = 145] = \"SwipeNeg\";\n})(exports.MultitouchEvent || (exports.MultitouchEvent = {}));\n// Service: Potentiometer\nconst SRV_POTENTIOMETER = 0x1f274746;\nexports.PotentiometerVariant = void 0;\n(function (PotentiometerVariant) {\n    PotentiometerVariant[PotentiometerVariant[\"Slider\"] = 1] = \"Slider\";\n    PotentiometerVariant[PotentiometerVariant[\"Rotary\"] = 2] = \"Rotary\";\n})(exports.PotentiometerVariant || (exports.PotentiometerVariant = {}));\nexports.PotentiometerReg = void 0;\n(function (PotentiometerReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    PotentiometerReg[PotentiometerReg[\"Position\"] = 257] = \"Position\";\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the potentiometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[PotentiometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    PotentiometerReg[PotentiometerReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.PotentiometerReg || (exports.PotentiometerReg = {}));\n// Service: Power\nconst SRV_POWER = 0x1fa4c95a;\nexports.PowerPowerStatus = void 0;\n(function (PowerPowerStatus) {\n    PowerPowerStatus[PowerPowerStatus[\"Disallowed\"] = 0] = \"Disallowed\";\n    PowerPowerStatus[PowerPowerStatus[\"Powering\"] = 1] = \"Powering\";\n    PowerPowerStatus[PowerPowerStatus[\"Overload\"] = 2] = \"Overload\";\n    PowerPowerStatus[PowerPowerStatus[\"Overprovision\"] = 3] = \"Overprovision\";\n})(exports.PowerPowerStatus || (exports.PowerPowerStatus = {}));\nexports.PowerReg = void 0;\n(function (PowerReg) {\n    /**\n     * Read-write bool (uint8_t). Can be used to completely disable the service.\n     * When allowed, the service may still not be providing power, see\n     * `power_status` for the actual current state.\n     *\n     * ```\n     * const [allowed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    PowerReg[PowerReg[\"Allowed\"] = 1] = \"Allowed\";\n    /**\n     * Read-write mA uint16_t. Limit the power provided by the service. The actual maximum limit will depend on hardware.\n     * This field may be read-only in some implementations - you should read it back after setting.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"MaxPower\"] = 7] = \"MaxPower\";\n    /**\n     * Read-only PowerStatus (uint8_t). Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\n     * `Overprovision` means there was another power provider, and we stopped not to overprovision the bus.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerReg[PowerReg[\"PowerStatus\"] = 385] = \"PowerStatus\";\n    /**\n     * Read-only mA uint16_t. Present current draw from the bus.\n     *\n     * ```\n     * const [currentDraw] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"CurrentDraw\"] = 257] = \"CurrentDraw\";\n    /**\n     * Read-only mV uint16_t. Voltage on input.\n     *\n     * ```\n     * const [batteryVoltage] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"BatteryVoltage\"] = 384] = \"BatteryVoltage\";\n    /**\n     * Read-only ratio u0.16 (uint16_t). Fraction of charge in the battery.\n     *\n     * ```\n     * const [batteryCharge] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"BatteryCharge\"] = 386] = \"BatteryCharge\";\n    /**\n     * Constant mWh uint32_t. Energy that can be delivered to the bus when battery is fully charged.\n     * This excludes conversion overheads if any.\n     *\n     * ```\n     * const [batteryCapacity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    PowerReg[PowerReg[\"BatteryCapacity\"] = 387] = \"BatteryCapacity\";\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulseDuration] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"KeepOnPulseDuration\"] = 128] = \"KeepOnPulseDuration\";\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulsePeriod] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    PowerReg[PowerReg[\"KeepOnPulsePeriod\"] = 129] = \"KeepOnPulsePeriod\";\n})(exports.PowerReg || (exports.PowerReg = {}));\nexports.PowerCmd = void 0;\n(function (PowerCmd) {\n    /**\n     * No args. Sent by the power service periodically, as broadcast.\n     */\n    PowerCmd[PowerCmd[\"Shutdown\"] = 128] = \"Shutdown\";\n})(exports.PowerCmd || (exports.PowerCmd = {}));\nexports.PowerEvent = void 0;\n(function (PowerEvent) {\n    /**\n     * Argument: power_status PowerStatus (uint8_t). Emitted whenever `power_status` changes.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerEvent[PowerEvent[\"PowerStatusChanged\"] = 3] = \"PowerStatusChanged\";\n})(exports.PowerEvent || (exports.PowerEvent = {}));\n// Service: Pressure Button\nconst SRV_PRESSURE_BUTTON = 0x281740c3;\nexports.PressureButtonReg = void 0;\n(function (PressureButtonReg) {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    PressureButtonReg[PressureButtonReg[\"Threshold\"] = 6] = \"Threshold\";\n})(exports.PressureButtonReg || (exports.PressureButtonReg = {}));\n// Service: Protocol Test\nconst SRV_PROTO_TEST = 0x16c7466a;\nexports.ProtoTestReg = void 0;\n(function (ProtoTestReg) {\n    /**\n     * Read-write bool (uint8_t). A read write bool register.\n     *\n     * ```\n     * const [rwBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwBool\"] = 129] = \"RwBool\";\n    /**\n     * Read-only bool (uint8_t). A read only bool register. Mirrors rw_bool.\n     *\n     * ```\n     * const [roBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoBool\"] = 385] = \"RoBool\";\n    /**\n     * Read-write uint32_t. A read write u32 register.\n     *\n     * ```\n     * const [rwU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwU32\"] = 130] = \"RwU32\";\n    /**\n     * Read-only uint32_t. A read only u32 register.. Mirrors rw_u32.\n     *\n     * ```\n     * const [roU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoU32\"] = 386] = \"RoU32\";\n    /**\n     * Read-write int32_t. A read write i32 register.\n     *\n     * ```\n     * const [rwI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwI32\"] = 131] = \"RwI32\";\n    /**\n     * Read-only int32_t. A read only i32 register.. Mirrors rw_i32.\n     *\n     * ```\n     * const [roI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoI32\"] = 387] = \"RoI32\";\n    /**\n     * Read-write string (bytes). A read write string register.\n     *\n     * ```\n     * const [rwString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwString\"] = 132] = \"RwString\";\n    /**\n     * Read-only string (bytes). A read only string register. Mirrors rw_string.\n     *\n     * ```\n     * const [roString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoString\"] = 388] = \"RoString\";\n    /**\n     * Read-write bytes. A read write string register.\n     *\n     * ```\n     * const [rwBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwBytes\"] = 133] = \"RwBytes\";\n    /**\n     * Read-only bytes. A read only string register. Mirrors ro_bytes.\n     *\n     * ```\n     * const [roBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoBytes\"] = 389] = \"RoBytes\";\n    /**\n     * A read write i8, u8, u16, i32 register.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwI8U8U16I32\"] = 134] = \"RwI8U8U16I32\";\n    /**\n     * A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoI8U8U16I32\"] = 390] = \"RoI8U8U16I32\";\n    /**\n     * A read write u8, string register.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RwU8String\"] = 135] = \"RwU8String\";\n    /**\n     * A read only u8, string register.. Mirrors rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    ProtoTestReg[ProtoTestReg[\"RoU8String\"] = 391] = \"RoU8String\";\n})(exports.ProtoTestReg || (exports.ProtoTestReg = {}));\nexports.ProtoTestEvent = void 0;\n(function (ProtoTestEvent) {\n    /**\n     * Argument: bool bool (uint8_t). An event raised when rw_bool is modified\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EBool\"] = 129] = \"EBool\";\n    /**\n     * Argument: u32 uint32_t. An event raised when rw_u32 is modified\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EU32\"] = 130] = \"EU32\";\n    /**\n     * Argument: i32 int32_t. An event raised when rw_i32 is modified\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EI32\"] = 131] = \"EI32\";\n    /**\n     * Argument: string string (bytes). An event raised when rw_string is modified\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EString\"] = 132] = \"EString\";\n    /**\n     * Argument: bytes bytes. An event raised when rw_bytes is modified\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EBytes\"] = 133] = \"EBytes\";\n    /**\n     * An event raised when rw_i8_u8_u16_i32 is modified\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EI8U8U16I32\"] = 134] = \"EI8U8U16I32\";\n    /**\n     * An event raised when rw_u8_string is modified\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    ProtoTestEvent[ProtoTestEvent[\"EU8String\"] = 135] = \"EU8String\";\n})(exports.ProtoTestEvent || (exports.ProtoTestEvent = {}));\nexports.ProtoTestCmd = void 0;\n(function (ProtoTestCmd) {\n    /**\n     * Argument: bool bool (uint8_t). A command to set rw_bool.\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CBool\"] = 129] = \"CBool\";\n    /**\n     * Argument: u32 uint32_t. A command to set rw_u32.\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CU32\"] = 130] = \"CU32\";\n    /**\n     * Argument: i32 int32_t. A command to set rw_i32.\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CI32\"] = 131] = \"CI32\";\n    /**\n     * Argument: string string (bytes). A command to set rw_string.\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CString\"] = 132] = \"CString\";\n    /**\n     * Argument: bytes bytes. A command to set rw_string.\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CBytes\"] = 133] = \"CBytes\";\n    /**\n     * A command to set rw_bytes.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CI8U8U16I32\"] = 134] = \"CI8U8U16I32\";\n    /**\n     * A command to set rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CU8String\"] = 135] = \"CU8String\";\n    /**\n     * Argument: p_bytes pipe (bytes). A command to read the content of rw_bytes, byte per byte, as a pipe.\n     *\n     * ```\n     * const [pBytes] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ProtoTestCmd[ProtoTestCmd[\"CReportPipe\"] = 144] = \"CReportPipe\";\n})(exports.ProtoTestCmd || (exports.ProtoTestCmd = {}));\n/**\n * pipe_report PBytes\n * ```\n * const [byte] = jdunpack<[number]>(buf, \"u8\")\n * ```\n */\n// Service: Pulse Oximeter\nconst SRV_PULSE_OXIMETER = 0x10bb4eb6;\nexports.PulseOximeterReg = void 0;\n(function (PulseOximeterReg) {\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated oxygen level in blood.\n     *\n     * ```\n     * const [oxygen] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    PulseOximeterReg[PulseOximeterReg[\"Oxygen\"] = 257] = \"Oxygen\";\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [oxygenError] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    PulseOximeterReg[PulseOximeterReg[\"OxygenError\"] = 262] = \"OxygenError\";\n})(exports.PulseOximeterReg || (exports.PulseOximeterReg = {}));\n// Service: Rain gauge\nconst SRV_RAIN_GAUGE = 0x13734c95;\nexports.RainGaugeReg = void 0;\n(function (RainGaugeReg) {\n    /**\n     * Read-only mm u16.16 (uint32_t). Total precipitation recorded so far.\n     *\n     * ```\n     * const [precipitation] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    RainGaugeReg[RainGaugeReg[\"Precipitation\"] = 257] = \"Precipitation\";\n    /**\n     * Constant mm u16.16 (uint32_t). Typically the amount of rain needed for tipping the bucket.\n     *\n     * ```\n     * const [precipitationPrecision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    RainGaugeReg[RainGaugeReg[\"PrecipitationPrecision\"] = 264] = \"PrecipitationPrecision\";\n})(exports.RainGaugeReg || (exports.RainGaugeReg = {}));\n// Service: Real time clock\nconst SRV_REAL_TIME_CLOCK = 0x1a8b1a28;\nexports.RealTimeClockVariant = void 0;\n(function (RealTimeClockVariant) {\n    RealTimeClockVariant[RealTimeClockVariant[\"Computer\"] = 1] = \"Computer\";\n    RealTimeClockVariant[RealTimeClockVariant[\"Crystal\"] = 2] = \"Crystal\";\n    RealTimeClockVariant[RealTimeClockVariant[\"Cuckoo\"] = 3] = \"Cuckoo\";\n})(exports.RealTimeClockVariant || (exports.RealTimeClockVariant = {}));\nexports.RealTimeClockReg = void 0;\n(function (RealTimeClockReg) {\n    /**\n     * Current time in 24h representation.\n     * * ``day_of_month`` is day of the month, starting at ``1``\n     * * ``day_of_week`` is day of the week, starting at ``1`` as monday\n     * Default streaming period is 1 second.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    RealTimeClockReg[RealTimeClockReg[\"LocalTime\"] = 257] = \"LocalTime\";\n    /**\n     * Read-only s u16.16 (uint32_t). Time drift since the last call to the ``set_time`` command.\n     *\n     * ```\n     * const [error] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    RealTimeClockReg[RealTimeClockReg[\"Error\"] = 384] = \"Error\";\n    /**\n     * Constant ppm u16.16 (uint32_t). Error on the clock, in parts per million of seconds.\n     *\n     * ```\n     * const [precision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    RealTimeClockReg[RealTimeClockReg[\"Precision\"] = 385] = \"Precision\";\n    /**\n     * Constant Variant (uint8_t). The type of physical clock used by the sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[RealTimeClockVariant]>(buf, \"u8\")\n     * ```\n     */\n    RealTimeClockReg[RealTimeClockReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.RealTimeClockReg || (exports.RealTimeClockReg = {}));\nexports.RealTimeClockCmd = void 0;\n(function (RealTimeClockCmd) {\n    /**\n     * Sets the current time and resets the error.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    RealTimeClockCmd[RealTimeClockCmd[\"SetTime\"] = 128] = \"SetTime\";\n})(exports.RealTimeClockCmd || (exports.RealTimeClockCmd = {}));\n// Service: Reflected light\nconst SRV_REFLECTED_LIGHT = 0x126c4cb2;\nexports.ReflectedLightVariant = void 0;\n(function (ReflectedLightVariant) {\n    ReflectedLightVariant[ReflectedLightVariant[\"InfraredDigital\"] = 1] = \"InfraredDigital\";\n    ReflectedLightVariant[ReflectedLightVariant[\"InfraredAnalog\"] = 2] = \"InfraredAnalog\";\n})(exports.ReflectedLightVariant || (exports.ReflectedLightVariant = {}));\nexports.ReflectedLightReg = void 0;\n(function (ReflectedLightReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    ReflectedLightReg[ReflectedLightReg[\"Brightness\"] = 257] = \"Brightness\";\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor used\n     *\n     * ```\n     * const [variant] = jdunpack<[ReflectedLightVariant]>(buf, \"u8\")\n     * ```\n     */\n    ReflectedLightReg[ReflectedLightReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.ReflectedLightReg || (exports.ReflectedLightReg = {}));\nexports.ReflectedLightEvent = void 0;\n(function (ReflectedLightEvent) {\n    /**\n     * The sensor detected a transition from light to dark\n     */\n    ReflectedLightEvent[ReflectedLightEvent[\"Dark\"] = 2] = \"Dark\";\n    /**\n     * The sensor detected a transition from dark to light\n     */\n    ReflectedLightEvent[ReflectedLightEvent[\"Light\"] = 1] = \"Light\";\n})(exports.ReflectedLightEvent || (exports.ReflectedLightEvent = {}));\n// Service: Relay\nconst SRV_RELAY = 0x183fe656;\nexports.RelayVariant = void 0;\n(function (RelayVariant) {\n    RelayVariant[RelayVariant[\"Electromechanical\"] = 1] = \"Electromechanical\";\n    RelayVariant[RelayVariant[\"SolidState\"] = 2] = \"SolidState\";\n    RelayVariant[RelayVariant[\"Reed\"] = 3] = \"Reed\";\n})(exports.RelayVariant || (exports.RelayVariant = {}));\nexports.RelayReg = void 0;\n(function (RelayReg) {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the relay circuit is currently energized (closed) or not.\n     *\n     * ```\n     * const [closed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RelayReg[RelayReg[\"Closed\"] = 1] = \"Closed\";\n    /**\n     * Constant Variant (uint8_t). Describes the type of relay used.\n     *\n     * ```\n     * const [variant] = jdunpack<[RelayVariant]>(buf, \"u8\")\n     * ```\n     */\n    RelayReg[RelayReg[\"Variant\"] = 263] = \"Variant\";\n    /**\n     * Constant mA uint32_t. Maximum switching current for a resistive load.\n     *\n     * ```\n     * const [maxSwitchingCurrent] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    RelayReg[RelayReg[\"MaxSwitchingCurrent\"] = 384] = \"MaxSwitchingCurrent\";\n})(exports.RelayReg || (exports.RelayReg = {}));\nexports.RelayEvent = void 0;\n(function (RelayEvent) {\n    /**\n     * Emitted when relay goes from `inactive` to `active` state.\n     * Normally open (NO) relays close the circuit when activated.\n     */\n    RelayEvent[RelayEvent[\"Active\"] = 1] = \"Active\";\n    /**\n     * Emitted when relay goes from `active` to `inactive` state.\n     * Normally closed (NC) relays open the circuit when activated.\n     */\n    RelayEvent[RelayEvent[\"Inactive\"] = 2] = \"Inactive\";\n})(exports.RelayEvent || (exports.RelayEvent = {}));\n// Service: Random Number Generator\nconst SRV_RNG = 0x1789f0a2;\nexports.RngVariant = void 0;\n(function (RngVariant) {\n    RngVariant[RngVariant[\"Quantum\"] = 1] = \"Quantum\";\n    RngVariant[RngVariant[\"ADCNoise\"] = 2] = \"ADCNoise\";\n    RngVariant[RngVariant[\"WebCrypto\"] = 3] = \"WebCrypto\";\n})(exports.RngVariant || (exports.RngVariant = {}));\nexports.RngReg = void 0;\n(function (RngReg) {\n    /**\n     * Read-only bytes. A register that returns a 64 bytes random buffer on every request.\n     * This never blocks for a long time. If you need additional random bytes, keep querying the register.\n     *\n     * ```\n     * const [random] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    RngReg[RngReg[\"Random\"] = 384] = \"Random\";\n    /**\n     * Constant Variant (uint8_t). The type of algorithm/technique used to generate the number.\n     * `Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n     * `ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n     * `WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\n     *\n     * ```\n     * const [variant] = jdunpack<[RngVariant]>(buf, \"u8\")\n     * ```\n     */\n    RngReg[RngReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.RngReg || (exports.RngReg = {}));\n// Service: Role Manager\nconst SRV_ROLE_MANAGER = 0x1e4b7e66;\nexports.RoleManagerReg = void 0;\n(function (RoleManagerReg) {\n    /**\n     * Read-write bool (uint8_t). Normally, if some roles are unfilled, and there are idle services that can fulfill them,\n     * the brain device will assign roles (bind) automatically.\n     * Such automatic assignment happens every second or so, and is trying to be smart about\n     * co-locating roles that share \"host\" (part before first slash),\n     * as well as reasonably stable assignments.\n     * Once user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.\n     *\n     * ```\n     * const [autoBind] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RoleManagerReg[RoleManagerReg[\"AutoBind\"] = 128] = \"AutoBind\";\n    /**\n     * Read-only bool (uint8_t). Indicates if all required roles have been allocated to devices.\n     *\n     * ```\n     * const [allRolesAllocated] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RoleManagerReg[RoleManagerReg[\"AllRolesAllocated\"] = 385] = \"AllRolesAllocated\";\n})(exports.RoleManagerReg || (exports.RoleManagerReg = {}));\nexports.RoleManagerCmd = void 0;\n(function (RoleManagerCmd) {\n    /**\n     * Get the role corresponding to given device identifer. Returns empty string if unset.\n     *\n     * ```\n     * const [deviceId, serviceIdx] = jdunpack<[Uint8Array, number]>(buf, \"b[8] u8\")\n     * ```\n     */\n    RoleManagerCmd[RoleManagerCmd[\"GetRole\"] = 128] = \"GetRole\";\n    /**\n     * report GetRole\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n    /**\n     * Set role. Can set to empty to remove role binding.\n     *\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n    RoleManagerCmd[RoleManagerCmd[\"SetRole\"] = 129] = \"SetRole\";\n    /**\n     * No args. Remove all role bindings.\n     */\n    RoleManagerCmd[RoleManagerCmd[\"ClearAllRoles\"] = 132] = \"ClearAllRoles\";\n    /**\n     * Argument: stored_roles pipe (bytes). Return all roles stored internally.\n     *\n     * ```\n     * const [storedRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    RoleManagerCmd[RoleManagerCmd[\"ListStoredRoles\"] = 130] = \"ListStoredRoles\";\n    /**\n     * Argument: required_roles pipe (bytes). List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\n     *\n     * ```\n     * const [requiredRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    RoleManagerCmd[RoleManagerCmd[\"ListRequiredRoles\"] = 131] = \"ListRequiredRoles\";\n})(exports.RoleManagerCmd || (exports.RoleManagerCmd = {}));\n/**\n * pipe_report StoredRoles\n * ```\n * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n * ```\n */\n/**\n * pipe_report RequiredRoles\n * ```\n * const [deviceId, serviceClass, serviceIdx, role] = jdunpack<[Uint8Array, number, number, string]>(buf, \"b[8] u32 u8 s\")\n * ```\n */\nexports.RoleManagerEvent = void 0;\n(function (RoleManagerEvent) {\n    /**\n     * Notifies that role bindings have changed.\n     */\n    RoleManagerEvent[RoleManagerEvent[\"Change\"] = 3] = \"Change\";\n})(exports.RoleManagerEvent || (exports.RoleManagerEvent = {}));\n// Service: Rotary encoder\nconst SRV_ROTARY_ENCODER = 0x10fa29c9;\nexports.RotaryEncoderReg = void 0;\n(function (RotaryEncoderReg) {\n    /**\n     * Read-only # int32_t. Upon device reset starts at `0` (regardless of the shaft position).\n     * Increases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    RotaryEncoderReg[RotaryEncoderReg[\"Position\"] = 257] = \"Position\";\n    /**\n     * Constant # uint16_t. This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.\n     *\n     * ```\n     * const [clicksPerTurn] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    RotaryEncoderReg[RotaryEncoderReg[\"ClicksPerTurn\"] = 384] = \"ClicksPerTurn\";\n})(exports.RotaryEncoderReg || (exports.RotaryEncoderReg = {}));\n// Service: Rover\nconst SRV_ROVER = 0x19f4d06b;\nexports.RoverReg = void 0;\n(function (RoverReg) {\n    /**\n     * The current position and orientation of the robot.\n     *\n     * ```\n     * const [x, y, vx, vy, heading] = jdunpack<[number, number, number, number, number]>(buf, \"i16.16 i16.16 i16.16 i16.16 i16.16\")\n     * ```\n     */\n    RoverReg[RoverReg[\"Kinematics\"] = 257] = \"Kinematics\";\n})(exports.RoverReg || (exports.RoverReg = {}));\n// Service: Sensor Aggregator\nconst SRV_SENSOR_AGGREGATOR = 0x1d90e1c5;\nexports.SensorAggregatorSampleType = void 0;\n(function (SensorAggregatorSampleType) {\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"U8\"] = 8] = \"U8\";\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"I8\"] = 136] = \"I8\";\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"U16\"] = 16] = \"U16\";\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"I16\"] = 144] = \"I16\";\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"U32\"] = 32] = \"U32\";\n    SensorAggregatorSampleType[SensorAggregatorSampleType[\"I32\"] = 160] = \"I32\";\n})(exports.SensorAggregatorSampleType || (exports.SensorAggregatorSampleType = {}));\nexports.SensorAggregatorReg = void 0;\n(function (SensorAggregatorReg) {\n    /**\n     * Set automatic input collection.\n     * These settings are stored in flash.\n     *\n     * ```\n     * const [samplingInterval, samplesInWindow, rest] = jdunpack<[number, number, ([Uint8Array, number, number, number, SensorAggregatorSampleType, number])[]]>(buf, \"u16 u16 x[4] r: b[8] u32 u8 u8 u8 i8\")\n     * const [deviceId, serviceClass, serviceNum, sampleSize, sampleType, sampleShift] = rest[0]\n     * ```\n     */\n    SensorAggregatorReg[SensorAggregatorReg[\"Inputs\"] = 128] = \"Inputs\";\n    /**\n     * Read-only uint32_t. Number of input samples collected so far.\n     *\n     * ```\n     * const [numSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SensorAggregatorReg[SensorAggregatorReg[\"NumSamples\"] = 384] = \"NumSamples\";\n    /**\n     * Read-only B uint8_t. Size of a single sample.\n     *\n     * ```\n     * const [sampleSize] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SensorAggregatorReg[SensorAggregatorReg[\"SampleSize\"] = 385] = \"SampleSize\";\n    /**\n     * Read-write # uint32_t. When set to `N`, will stream `N` samples as `current_sample` reading.\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SensorAggregatorReg[SensorAggregatorReg[\"StreamingSamples\"] = 129] = \"StreamingSamples\";\n    /**\n     * Read-only bytes. Last collected sample.\n     *\n     * ```\n     * const [currentSample] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SensorAggregatorReg[SensorAggregatorReg[\"CurrentSample\"] = 257] = \"CurrentSample\";\n})(exports.SensorAggregatorReg || (exports.SensorAggregatorReg = {}));\n// Service: Servo\nconst SRV_SERVO = 0x12fc9103;\nexports.ServoReg = void 0;\n(function (ServoReg) {\n    /**\n     * Read-write ° i16.16 (int32_t). Specifies the angle of the arm (request).\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"Angle\"] = 2] = \"Angle\";\n    /**\n     * Read-write bool (uint8_t). Turn the power to the servo on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ServoReg[ServoReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-write ° i16.16 (int32_t). Correction applied to the angle to account for the servo arm drift.\n     *\n     * ```\n     * const [offset] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"Offset\"] = 129] = \"Offset\";\n    /**\n     * Constant ° i16.16 (int32_t). Lowest angle that can be set.\n     *\n     * ```\n     * const [minAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"MinAngle\"] = 272] = \"MinAngle\";\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to lowest angle.\n     *\n     * ```\n     * const [minPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"MinPulse\"] = 131] = \"MinPulse\";\n    /**\n     * Constant ° i16.16 (int32_t). Highest angle that can be set.\n     *\n     * ```\n     * const [maxAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"MaxAngle\"] = 273] = \"MaxAngle\";\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to highest angle.\n     *\n     * ```\n     * const [maxPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"MaxPulse\"] = 133] = \"MaxPulse\";\n    /**\n     * Constant kg/cm u16.16 (uint32_t). The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\n     *\n     * ```\n     * const [stallTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"StallTorque\"] = 384] = \"StallTorque\";\n    /**\n     * Constant s/60° u16.16 (uint32_t). Time to move 60°.\n     *\n     * ```\n     * const [responseSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"ResponseSpeed\"] = 385] = \"ResponseSpeed\";\n    /**\n     * Read-only ° i16.16 (int32_t). The current physical position of the arm.\n     *\n     * ```\n     * const [currentAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    ServoReg[ServoReg[\"CurrentAngle\"] = 257] = \"CurrentAngle\";\n})(exports.ServoReg || (exports.ServoReg = {}));\n// Service: Settings\nconst SRV_SETTINGS = 0x1107dc4a;\nexports.SettingsCmd = void 0;\n(function (SettingsCmd) {\n    /**\n     * Argument: key string (bytes). Get the value of given setting. If no such entry exists, the value returned is empty.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SettingsCmd[SettingsCmd[\"Get\"] = 128] = \"Get\";\n    /**\n     * report Get\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n    /**\n     * Set the value of a given setting.\n     *\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n    SettingsCmd[SettingsCmd[\"Set\"] = 129] = \"Set\";\n    /**\n     * Argument: key string (bytes). Delete a given setting.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SettingsCmd[SettingsCmd[\"Delete\"] = 132] = \"Delete\";\n    /**\n     * Argument: results pipe (bytes). Return keys of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    SettingsCmd[SettingsCmd[\"ListKeys\"] = 130] = \"ListKeys\";\n    /**\n     * Argument: results pipe (bytes). Return keys and values of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    SettingsCmd[SettingsCmd[\"List\"] = 131] = \"List\";\n    /**\n     * No args. Clears all keys.\n     */\n    SettingsCmd[SettingsCmd[\"Clear\"] = 133] = \"Clear\";\n})(exports.SettingsCmd || (exports.SettingsCmd = {}));\n/**\n * pipe_report ListedKey\n * ```\n * const [key] = jdunpack<[string]>(buf, \"s\")\n * ```\n */\n/**\n * pipe_report ListedEntry\n * ```\n * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n * ```\n */\nexports.SettingsEvent = void 0;\n(function (SettingsEvent) {\n    /**\n     * Notifies that some setting have been modified.\n     */\n    SettingsEvent[SettingsEvent[\"Change\"] = 3] = \"Change\";\n})(exports.SettingsEvent || (exports.SettingsEvent = {}));\n// Service: 7-segment display\nconst SRV_SEVEN_SEGMENT_DISPLAY = 0x196158f7;\nexports.SevenSegmentDisplayReg = void 0;\n(function (SevenSegmentDisplayReg) {\n    /**\n     * Read-write bytes. Each byte encodes the display status of a digit using,\n     * where bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\n     * If incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\n     * Thus, sending an empty ``digits`` payload clears the screen.\n     *\n     * ```\n     * const [digits] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SevenSegmentDisplayReg[SevenSegmentDisplayReg[\"Digits\"] = 2] = \"Digits\";\n    /**\n     * Read-write ratio u0.16 (uint16_t). Controls the brightness of the LEDs. ``0`` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SevenSegmentDisplayReg[SevenSegmentDisplayReg[\"Brightness\"] = 1] = \"Brightness\";\n    /**\n     * Read-write bool (uint8_t). Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\n     * If the column LEDs is not supported, the value remains false.\n     *\n     * ```\n     * const [doubleDots] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SevenSegmentDisplayReg[SevenSegmentDisplayReg[\"DoubleDots\"] = 128] = \"DoubleDots\";\n    /**\n     * Constant uint8_t. The number of digits available on the display.\n     *\n     * ```\n     * const [digitCount] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SevenSegmentDisplayReg[SevenSegmentDisplayReg[\"DigitCount\"] = 384] = \"DigitCount\";\n    /**\n     * Constant bool (uint8_t). True if decimal points are available (on all digits).\n     *\n     * ```\n     * const [decimalPoint] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SevenSegmentDisplayReg[SevenSegmentDisplayReg[\"DecimalPoint\"] = 385] = \"DecimalPoint\";\n})(exports.SevenSegmentDisplayReg || (exports.SevenSegmentDisplayReg = {}));\nexports.SevenSegmentDisplayCmd = void 0;\n(function (SevenSegmentDisplayCmd) {\n    /**\n     * Argument: value f64 (uint64_t). Shows the number on the screen using the decimal dot if available.\n     */\n    SevenSegmentDisplayCmd[SevenSegmentDisplayCmd[\"SetNumber\"] = 128] = \"SetNumber\";\n    /**\n     * Argument: text string (bytes). Shows the text on the screen. The client may decide to scroll the text if too long.\n     */\n    SevenSegmentDisplayCmd[SevenSegmentDisplayCmd[\"SetText\"] = 129] = \"SetText\";\n})(exports.SevenSegmentDisplayCmd || (exports.SevenSegmentDisplayCmd = {}));\n// Service: Soil moisture\nconst SRV_SOIL_MOISTURE = 0x1d4aa3b3;\nexports.SoilMoistureVariant = void 0;\n(function (SoilMoistureVariant) {\n    SoilMoistureVariant[SoilMoistureVariant[\"Resistive\"] = 1] = \"Resistive\";\n    SoilMoistureVariant[SoilMoistureVariant[\"Capacitive\"] = 2] = \"Capacitive\";\n})(exports.SoilMoistureVariant || (exports.SoilMoistureVariant = {}));\nexports.SoilMoistureReg = void 0;\n(function (SoilMoistureReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the wetness of the soil, from ``dry`` to ``wet``.\n     *\n     * ```\n     * const [moisture] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoilMoistureReg[SoilMoistureReg[\"Moisture\"] = 257] = \"Moisture\";\n    /**\n     * Constant Variant (uint8_t). Describe the type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[SoilMoistureVariant]>(buf, \"u8\")\n     * ```\n     */\n    SoilMoistureReg[SoilMoistureReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.SoilMoistureReg || (exports.SoilMoistureReg = {}));\n// Service: Solenoid\nconst SRV_SOLENOID = 0x171723ca;\nexports.SolenoidVariant = void 0;\n(function (SolenoidVariant) {\n    SolenoidVariant[SolenoidVariant[\"PushPull\"] = 1] = \"PushPull\";\n    SolenoidVariant[SolenoidVariant[\"Valve\"] = 2] = \"Valve\";\n    SolenoidVariant[SolenoidVariant[\"Latch\"] = 3] = \"Latch\";\n})(exports.SolenoidVariant || (exports.SolenoidVariant = {}));\nexports.SolenoidReg = void 0;\n(function (SolenoidReg) {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the solenoid is energized and pulled (on) or pushed (off).\n     *\n     * ```\n     * const [pulled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SolenoidReg[SolenoidReg[\"Pulled\"] = 1] = \"Pulled\";\n    /**\n     * Constant Variant (uint8_t). Describes the type of solenoid used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SolenoidVariant]>(buf, \"u8\")\n     * ```\n     */\n    SolenoidReg[SolenoidReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.SolenoidReg || (exports.SolenoidReg = {}));\n// Service: Sound level\nconst SRV_SOUND_LEVEL = 0x14ad1a5d;\nexports.SoundLevelReg = void 0;\n(function (SoundLevelReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The sound level detected by the microphone\n     *\n     * ```\n     * const [soundLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"SoundLevel\"] = 257] = \"SoundLevel\";\n    /**\n     * Read-write bool (uint8_t). Turn on or off the microphone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-write dB int16_t. The minimum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"MinDecibels\"] = 129] = \"MinDecibels\";\n    /**\n     * Read-write dB int16_t. The maximum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"MaxDecibels\"] = 130] = \"MaxDecibels\";\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a loud event.\n     *\n     * ```\n     * const [loudThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"LoudThreshold\"] = 6] = \"LoudThreshold\";\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a quiet event.\n     *\n     * ```\n     * const [quietThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundLevelReg[SoundLevelReg[\"QuietThreshold\"] = 5] = \"QuietThreshold\";\n})(exports.SoundLevelReg || (exports.SoundLevelReg = {}));\nexports.SoundLevelEvent = void 0;\n(function (SoundLevelEvent) {\n    /**\n     * Raised when a loud sound is detected\n     */\n    SoundLevelEvent[SoundLevelEvent[\"Loud\"] = 1] = \"Loud\";\n    /**\n     * Raised when a period of quietness is detected\n     */\n    SoundLevelEvent[SoundLevelEvent[\"Quiet\"] = 2] = \"Quiet\";\n})(exports.SoundLevelEvent || (exports.SoundLevelEvent = {}));\n// Service: Sound player\nconst SRV_SOUND_PLAYER = 0x1403d338;\nexports.SoundPlayerReg = void 0;\n(function (SoundPlayerReg) {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundPlayerReg[SoundPlayerReg[\"Volume\"] = 1] = \"Volume\";\n})(exports.SoundPlayerReg || (exports.SoundPlayerReg = {}));\nexports.SoundPlayerCmd = void 0;\n(function (SoundPlayerCmd) {\n    /**\n     * Argument: name string (bytes). Starts playing a sound.\n     *\n     * ```\n     * const [name] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SoundPlayerCmd[SoundPlayerCmd[\"Play\"] = 128] = \"Play\";\n    /**\n     * Argument: sounds_port pipe (bytes). Returns the list of sounds available to play.\n     *\n     * ```\n     * const [soundsPort] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    SoundPlayerCmd[SoundPlayerCmd[\"ListSounds\"] = 129] = \"ListSounds\";\n})(exports.SoundPlayerCmd || (exports.SoundPlayerCmd = {}));\n/**\n * pipe_report ListSoundsPipe\n * ```\n * const [duration, name] = jdunpack<[number, string]>(buf, \"u32 s\")\n * ```\n */\n// Service: Sound Spectrum\nconst SRV_SOUND_SPECTRUM = 0x157abc1e;\nexports.SoundSpectrumReg = void 0;\n(function (SoundSpectrumReg) {\n    /**\n     * Read-only bytes. The computed frequency data.\n     *\n     * ```\n     * const [frequencyBins] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"FrequencyBins\"] = 257] = \"FrequencyBins\";\n    /**\n     * Read-write bool (uint8_t). Turns on/off the micropohone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-write uint8_t. The power of 2 used as the size of the FFT to be used to determine the frequency domain.\n     *\n     * ```\n     * const [fftPow2Size] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"FftPow2Size\"] = 128] = \"FftPow2Size\";\n    /**\n     * Read-write dB int16_t. The minimum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"MinDecibels\"] = 129] = \"MinDecibels\";\n    /**\n     * Read-write dB int16_t. The maximum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"MaxDecibels\"] = 130] = \"MaxDecibels\";\n    /**\n     * Read-write ratio u0.8 (uint8_t). The averaging constant with the last analysis frame.\n     * If ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".\n     *\n     * ```\n     * const [smoothingTimeConstant] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    SoundSpectrumReg[SoundSpectrumReg[\"SmoothingTimeConstant\"] = 131] = \"SmoothingTimeConstant\";\n})(exports.SoundSpectrumReg || (exports.SoundSpectrumReg = {}));\n// Service: Speech synthesis\nconst SRV_SPEECH_SYNTHESIS = 0x1204d995;\nexports.SpeechSynthesisReg = void 0;\n(function (SpeechSynthesisReg) {\n    /**\n     * Read-write bool (uint8_t). Determines if the speech engine is in a non-paused state.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SpeechSynthesisReg[SpeechSynthesisReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-write string (bytes). Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\n     *\n     * ```\n     * const [lang] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SpeechSynthesisReg[SpeechSynthesisReg[\"Lang\"] = 128] = \"Lang\";\n    /**\n     * Read-write ratio u0.8 (uint8_t). Volume for utterances.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    SpeechSynthesisReg[SpeechSynthesisReg[\"Volume\"] = 129] = \"Volume\";\n    /**\n     * Read-write u16.16 (uint32_t). Pitch for utterances\n     *\n     * ```\n     * const [pitch] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    SpeechSynthesisReg[SpeechSynthesisReg[\"Pitch\"] = 130] = \"Pitch\";\n    /**\n     * Read-write u16.16 (uint32_t). Rate for utterances\n     *\n     * ```\n     * const [rate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    SpeechSynthesisReg[SpeechSynthesisReg[\"Rate\"] = 131] = \"Rate\";\n})(exports.SpeechSynthesisReg || (exports.SpeechSynthesisReg = {}));\nexports.SpeechSynthesisCmd = void 0;\n(function (SpeechSynthesisCmd) {\n    /**\n     * Argument: text string (bytes). Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n     *\n     * ```\n     * const [text] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SpeechSynthesisCmd[SpeechSynthesisCmd[\"Speak\"] = 128] = \"Speak\";\n    /**\n     * No args. Cancels current utterance and all utterances from the utterance queue.\n     */\n    SpeechSynthesisCmd[SpeechSynthesisCmd[\"Cancel\"] = 129] = \"Cancel\";\n})(exports.SpeechSynthesisCmd || (exports.SpeechSynthesisCmd = {}));\n// Service: Switch\nconst SRV_SWITCH = 0x1ad29402;\nexports.SwitchVariant = void 0;\n(function (SwitchVariant) {\n    SwitchVariant[SwitchVariant[\"Slide\"] = 1] = \"Slide\";\n    SwitchVariant[SwitchVariant[\"Tilt\"] = 2] = \"Tilt\";\n    SwitchVariant[SwitchVariant[\"PushButton\"] = 3] = \"PushButton\";\n    SwitchVariant[SwitchVariant[\"Tactile\"] = 4] = \"Tactile\";\n    SwitchVariant[SwitchVariant[\"Toggle\"] = 5] = \"Toggle\";\n    SwitchVariant[SwitchVariant[\"Proximity\"] = 6] = \"Proximity\";\n    SwitchVariant[SwitchVariant[\"Magnetic\"] = 7] = \"Magnetic\";\n    SwitchVariant[SwitchVariant[\"FootPedal\"] = 8] = \"FootPedal\";\n})(exports.SwitchVariant || (exports.SwitchVariant = {}));\nexports.SwitchReg = void 0;\n(function (SwitchReg) {\n    /**\n     * Read-only bool (uint8_t). Indicates whether the switch is currently active (on).\n     *\n     * ```\n     * const [active] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SwitchReg[SwitchReg[\"Active\"] = 257] = \"Active\";\n    /**\n     * Constant Variant (uint8_t). Describes the type of switch used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SwitchVariant]>(buf, \"u8\")\n     * ```\n     */\n    SwitchReg[SwitchReg[\"Variant\"] = 263] = \"Variant\";\n    /**\n     * Constant s u16.16 (uint32_t). Specifies the delay without activity to automatically turn off after turning on.\n     * For example, some light switches in staircases have such a capability.\n     *\n     * ```\n     * const [autoOffDelay] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    SwitchReg[SwitchReg[\"AutoOffDelay\"] = 384] = \"AutoOffDelay\";\n})(exports.SwitchReg || (exports.SwitchReg = {}));\nexports.SwitchEvent = void 0;\n(function (SwitchEvent) {\n    /**\n     * Emitted when switch goes from ``off`` to ``on``.\n     */\n    SwitchEvent[SwitchEvent[\"On\"] = 1] = \"On\";\n    /**\n     * Emitted when switch goes from ``on`` to ``off``.\n     */\n    SwitchEvent[SwitchEvent[\"Off\"] = 2] = \"Off\";\n})(exports.SwitchEvent || (exports.SwitchEvent = {}));\n// Service: TCP\nconst SRV_TCP = 0x1b43b70b;\nexports.TcpTcpError = void 0;\n(function (TcpTcpError) {\n    TcpTcpError[TcpTcpError[\"InvalidCommand\"] = 1] = \"InvalidCommand\";\n    TcpTcpError[TcpTcpError[\"InvalidCommandPayload\"] = 2] = \"InvalidCommandPayload\";\n})(exports.TcpTcpError || (exports.TcpTcpError = {}));\nexports.TcpCmd = void 0;\n(function (TcpCmd) {\n    /**\n     * Argument: inbound pipe (bytes). Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\n     *\n     * ```\n     * const [inbound] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    TcpCmd[TcpCmd[\"Open\"] = 128] = \"Open\";\n    /**\n     * report Open\n     * ```\n     * const [outboundPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n})(exports.TcpCmd || (exports.TcpCmd = {}));\nexports.TcpPipeCmd = void 0;\n(function (TcpPipeCmd) {\n    /**\n     * Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\n     * After the connection is established, an empty data report is sent.\n     * Connection is closed by closing the pipe.\n     *\n     * ```\n     * const [tcpPort, hostname] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    TcpPipeCmd[TcpPipeCmd[\"OpenSsl\"] = 1] = \"OpenSsl\";\n    /**\n     * Argument: error TcpError (int32_t). Reported when an error is encountered. Negative error codes come directly from the SSL implementation.\n     *\n     * ```\n     * const [error] = jdunpack<[TcpTcpError]>(buf, \"i32\")\n     * ```\n     */\n    TcpPipeCmd[TcpPipeCmd[\"Error\"] = 0] = \"Error\";\n})(exports.TcpPipeCmd || (exports.TcpPipeCmd = {}));\n/**\n * pipe_command Outdata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n/**\n * pipe_report Indata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n// Service: Thermocouple\nconst SRV_THERMOCOUPLE = 0x143ac061;\nexports.ThermocoupleVariant = void 0;\n(function (ThermocoupleVariant) {\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeK\"] = 1] = \"TypeK\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeJ\"] = 2] = \"TypeJ\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeT\"] = 3] = \"TypeT\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeE\"] = 4] = \"TypeE\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeN\"] = 5] = \"TypeN\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeS\"] = 6] = \"TypeS\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeR\"] = 7] = \"TypeR\";\n    ThermocoupleVariant[ThermocoupleVariant[\"TypeB\"] = 8] = \"TypeB\";\n})(exports.ThermocoupleVariant || (exports.ThermocoupleVariant = {}));\nexports.ThermocoupleReg = void 0;\n(function (ThermocoupleReg) {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermocoupleReg[ThermocoupleReg[\"Temperature\"] = 257] = \"Temperature\";\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermocoupleReg[ThermocoupleReg[\"MinTemperature\"] = 260] = \"MinTemperature\";\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermocoupleReg[ThermocoupleReg[\"MaxTemperature\"] = 261] = \"MaxTemperature\";\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ThermocoupleReg[ThermocoupleReg[\"TemperatureError\"] = 262] = \"TemperatureError\";\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermocoupleVariant]>(buf, \"u8\")\n     * ```\n     */\n    ThermocoupleReg[ThermocoupleReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.ThermocoupleReg || (exports.ThermocoupleReg = {}));\n// Service: Thermometer\nconst SRV_THERMOMETER = 0x1421bac7;\nexports.ThermometerVariant = void 0;\n(function (ThermometerVariant) {\n    ThermometerVariant[ThermometerVariant[\"Outdoor\"] = 1] = \"Outdoor\";\n    ThermometerVariant[ThermometerVariant[\"Indoor\"] = 2] = \"Indoor\";\n    ThermometerVariant[ThermometerVariant[\"Body\"] = 3] = \"Body\";\n})(exports.ThermometerVariant || (exports.ThermometerVariant = {}));\nexports.ThermometerReg = void 0;\n(function (ThermometerReg) {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermometerReg[ThermometerReg[\"Temperature\"] = 257] = \"Temperature\";\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermometerReg[ThermometerReg[\"MinTemperature\"] = 260] = \"MinTemperature\";\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    ThermometerReg[ThermometerReg[\"MaxTemperature\"] = 261] = \"MaxTemperature\";\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ThermometerReg[ThermometerReg[\"TemperatureError\"] = 262] = \"TemperatureError\";\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    ThermometerReg[ThermometerReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.ThermometerReg || (exports.ThermometerReg = {}));\n// Service: Traffic Light\nconst SRV_TRAFFIC_LIGHT = 0x15c38d9b;\nexports.TrafficLightReg = void 0;\n(function (TrafficLightReg) {\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [red] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    TrafficLightReg[TrafficLightReg[\"Red\"] = 128] = \"Red\";\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [orange] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    TrafficLightReg[TrafficLightReg[\"Orange\"] = 129] = \"Orange\";\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [green] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    TrafficLightReg[TrafficLightReg[\"Green\"] = 130] = \"Green\";\n})(exports.TrafficLightReg || (exports.TrafficLightReg = {}));\n// Service: Total Volatile organic compound\nconst SRV_TVOC = 0x12a5b597;\nexports.TvocReg = void 0;\n(function (TvocReg) {\n    /**\n     * Read-only ppb u22.10 (uint32_t). Total volatile organic compound readings in parts per billion.\n     *\n     * ```\n     * const [tVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TvocReg[TvocReg[\"TVOC\"] = 257] = \"TVOC\";\n    /**\n     * Read-only ppb u22.10 (uint32_t). Error on the reading data\n     *\n     * ```\n     * const [tVOCError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TvocReg[TvocReg[\"TVOCError\"] = 262] = \"TVOCError\";\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TvocReg[TvocReg[\"MinTVOC\"] = 260] = \"MinTVOC\";\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TvocReg[TvocReg[\"MaxTVOC\"] = 261] = \"MaxTVOC\";\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    TvocReg[TvocReg[\"ConditioningPeriod\"] = 384] = \"ConditioningPeriod\";\n})(exports.TvocReg || (exports.TvocReg = {}));\n// Service: UV index\nconst SRV_UV_INDEX = 0x1f6e0d90;\nexports.UvIndexVariant = void 0;\n(function (UvIndexVariant) {\n    UvIndexVariant[UvIndexVariant[\"UVA_UVB\"] = 1] = \"UVA_UVB\";\n    UvIndexVariant[UvIndexVariant[\"Visible_IR\"] = 2] = \"Visible_IR\";\n})(exports.UvIndexVariant || (exports.UvIndexVariant = {}));\nexports.UvIndexReg = void 0;\n(function (UvIndexReg) {\n    /**\n     * Read-only uv u16.16 (uint32_t). Ultraviolet index, typically refreshed every second.\n     *\n     * ```\n     * const [uvIndex] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndexReg[UvIndexReg[\"UvIndex\"] = 257] = \"UvIndex\";\n    /**\n     * Read-only uv u16.16 (uint32_t). Error on the UV measure.\n     *\n     * ```\n     * const [uvIndexError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndexReg[UvIndexReg[\"UvIndexError\"] = 262] = \"UvIndexError\";\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[UvIndexVariant]>(buf, \"u8\")\n     * ```\n     */\n    UvIndexReg[UvIndexReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.UvIndexReg || (exports.UvIndexReg = {}));\n// Service: Verified Telemetry\nconst SRV_VERIFIED_TELEMETRY = 0x2194841f;\nexports.VerifiedTelemetryStatus = void 0;\n(function (VerifiedTelemetryStatus) {\n    VerifiedTelemetryStatus[VerifiedTelemetryStatus[\"Unknown\"] = 0] = \"Unknown\";\n    VerifiedTelemetryStatus[VerifiedTelemetryStatus[\"Working\"] = 1] = \"Working\";\n    VerifiedTelemetryStatus[VerifiedTelemetryStatus[\"Faulty\"] = 2] = \"Faulty\";\n})(exports.VerifiedTelemetryStatus || (exports.VerifiedTelemetryStatus = {}));\nexports.VerifiedTelemetryFingerprintType = void 0;\n(function (VerifiedTelemetryFingerprintType) {\n    VerifiedTelemetryFingerprintType[VerifiedTelemetryFingerprintType[\"FallCurve\"] = 1] = \"FallCurve\";\n    VerifiedTelemetryFingerprintType[VerifiedTelemetryFingerprintType[\"CurrentSense\"] = 2] = \"CurrentSense\";\n    VerifiedTelemetryFingerprintType[VerifiedTelemetryFingerprintType[\"Custom\"] = 3] = \"Custom\";\n})(exports.VerifiedTelemetryFingerprintType || (exports.VerifiedTelemetryFingerprintType = {}));\nexports.VerifiedTelemetryReg = void 0;\n(function (VerifiedTelemetryReg) {\n    /**\n     * Read-only Status (uint8_t). Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    VerifiedTelemetryReg[VerifiedTelemetryReg[\"TelemetryStatus\"] = 384] = \"TelemetryStatus\";\n    /**\n     * Read-write ms uint32_t. Specifies the interval between computing the fingerprint information.\n     *\n     * ```\n     * const [telemetryStatusInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    VerifiedTelemetryReg[VerifiedTelemetryReg[\"TelemetryStatusInterval\"] = 128] = \"TelemetryStatusInterval\";\n    /**\n     * Constant FingerprintType (uint8_t). Type of the fingerprint.\n     *\n     * ```\n     * const [fingerprintType] = jdunpack<[VerifiedTelemetryFingerprintType]>(buf, \"u8\")\n     * ```\n     */\n    VerifiedTelemetryReg[VerifiedTelemetryReg[\"FingerprintType\"] = 385] = \"FingerprintType\";\n    /**\n     * Template Fingerprint information of a working sensor.\n     *\n     * ```\n     * const [confidence, template] = jdunpack<[number, Uint8Array]>(buf, \"u16 b\")\n     * ```\n     */\n    VerifiedTelemetryReg[VerifiedTelemetryReg[\"FingerprintTemplate\"] = 386] = \"FingerprintTemplate\";\n})(exports.VerifiedTelemetryReg || (exports.VerifiedTelemetryReg = {}));\nexports.VerifiedTelemetryCmd = void 0;\n(function (VerifiedTelemetryCmd) {\n    /**\n     * No args. This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.\n     */\n    VerifiedTelemetryCmd[VerifiedTelemetryCmd[\"ResetFingerprintTemplate\"] = 128] = \"ResetFingerprintTemplate\";\n    /**\n     * No args. This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.\n     */\n    VerifiedTelemetryCmd[VerifiedTelemetryCmd[\"RetrainFingerprintTemplate\"] = 129] = \"RetrainFingerprintTemplate\";\n})(exports.VerifiedTelemetryCmd || (exports.VerifiedTelemetryCmd = {}));\nexports.VerifiedTelemetryEvent = void 0;\n(function (VerifiedTelemetryEvent) {\n    /**\n     * Argument: telemetry_status Status (uint8_t). The telemetry status of the device was updated.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    VerifiedTelemetryEvent[VerifiedTelemetryEvent[\"TelemetryStatusChange\"] = 3] = \"TelemetryStatusChange\";\n    /**\n     * The fingerprint template was updated\n     */\n    VerifiedTelemetryEvent[VerifiedTelemetryEvent[\"FingerprintTemplateChange\"] = 128] = \"FingerprintTemplateChange\";\n})(exports.VerifiedTelemetryEvent || (exports.VerifiedTelemetryEvent = {}));\n// Service: Vibration motor\nconst SRV_VIBRATION_MOTOR = 0x183fc4a2;\nexports.VibrationMotorReg = void 0;\n(function (VibrationMotorReg) {\n    /**\n     * Read-write bool (uint8_t). Determines if the vibration motor responds to vibrate commands.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    VibrationMotorReg[VibrationMotorReg[\"Enabled\"] = 1] = \"Enabled\";\n})(exports.VibrationMotorReg || (exports.VibrationMotorReg = {}));\nexports.VibrationMotorCmd = void 0;\n(function (VibrationMotorCmd) {\n    /**\n     * Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [duration, speed] = rest[0]\n     * ```\n     */\n    VibrationMotorCmd[VibrationMotorCmd[\"Vibrate\"] = 128] = \"Vibrate\";\n})(exports.VibrationMotorCmd || (exports.VibrationMotorCmd = {}));\n// Service: Water level\nconst SRV_WATER_LEVEL = 0x147b62ed;\nexports.WaterLevelVariant = void 0;\n(function (WaterLevelVariant) {\n    WaterLevelVariant[WaterLevelVariant[\"Resistive\"] = 1] = \"Resistive\";\n    WaterLevelVariant[WaterLevelVariant[\"ContactPhotoElectric\"] = 2] = \"ContactPhotoElectric\";\n    WaterLevelVariant[WaterLevelVariant[\"NonContactPhotoElectric\"] = 3] = \"NonContactPhotoElectric\";\n})(exports.WaterLevelVariant || (exports.WaterLevelVariant = {}));\nexports.WaterLevelReg = void 0;\n(function (WaterLevelReg) {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The reported water level.\n     *\n     * ```\n     * const [level] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    WaterLevelReg[WaterLevelReg[\"Level\"] = 257] = \"Level\";\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[WaterLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    WaterLevelReg[WaterLevelReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.WaterLevelReg || (exports.WaterLevelReg = {}));\n// Service: Weight Scale\nconst SRV_WEIGHT_SCALE = 0x1f4d5040;\nexports.WeightScaleVariant = void 0;\n(function (WeightScaleVariant) {\n    WeightScaleVariant[WeightScaleVariant[\"Body\"] = 1] = \"Body\";\n    WeightScaleVariant[WeightScaleVariant[\"Food\"] = 2] = \"Food\";\n    WeightScaleVariant[WeightScaleVariant[\"Jewelry\"] = 3] = \"Jewelry\";\n})(exports.WeightScaleVariant || (exports.WeightScaleVariant = {}));\nexports.WeightScaleReg = void 0;\n(function (WeightScaleReg) {\n    /**\n     * Read-only kg u16.16 (uint32_t). The reported weight.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"Weight\"] = 257] = \"Weight\";\n    /**\n     * Read-only kg u16.16 (uint32_t). The estimate error on the reported reading.\n     *\n     * ```\n     * const [weightError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"WeightError\"] = 262] = \"WeightError\";\n    /**\n     * Read-write kg u16.16 (uint32_t). Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\n     * You do not need to subtract that from the reading, it has already been done.\n     *\n     * ```\n     * const [zeroOffset] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"ZeroOffset\"] = 128] = \"ZeroOffset\";\n    /**\n     * Read-write u16.16 (uint32_t). Calibrated gain on the weight scale error.\n     *\n     * ```\n     * const [gain] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"Gain\"] = 129] = \"Gain\";\n    /**\n     * Constant kg u16.16 (uint32_t). Maximum supported weight on the scale.\n     *\n     * ```\n     * const [maxWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"MaxWeight\"] = 261] = \"MaxWeight\";\n    /**\n     * Constant kg u16.16 (uint32_t). Minimum recommend weight on the scale.\n     *\n     * ```\n     * const [minWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"MinWeight\"] = 260] = \"MinWeight\";\n    /**\n     * Constant kg u16.16 (uint32_t). Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [weightResolution] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"WeightResolution\"] = 264] = \"WeightResolution\";\n    /**\n     * Constant Variant (uint8_t). The type of physical scale\n     *\n     * ```\n     * const [variant] = jdunpack<[WeightScaleVariant]>(buf, \"u8\")\n     * ```\n     */\n    WeightScaleReg[WeightScaleReg[\"Variant\"] = 263] = \"Variant\";\n})(exports.WeightScaleReg || (exports.WeightScaleReg = {}));\nexports.WeightScaleCmd = void 0;\n(function (WeightScaleCmd) {\n    /**\n     * No args. Call this command when there is nothing on the scale. If supported, the module should save the calibration data.\n     */\n    WeightScaleCmd[WeightScaleCmd[\"CalibrateZeroOffset\"] = 128] = \"CalibrateZeroOffset\";\n    /**\n     * Argument: weight g u22.10 (uint32_t). Call this command with the weight of the thing on the scale.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    WeightScaleCmd[WeightScaleCmd[\"CalibrateGain\"] = 129] = \"CalibrateGain\";\n})(exports.WeightScaleCmd || (exports.WeightScaleCmd = {}));\n// Service: WIFI\nconst SRV_WIFI = 0x18aae1fa;\nexports.WifiAPFlags = void 0;\n(function (WifiAPFlags) {\n    WifiAPFlags[WifiAPFlags[\"HasPassword\"] = 1] = \"HasPassword\";\n    WifiAPFlags[WifiAPFlags[\"WPS\"] = 2] = \"WPS\";\n    WifiAPFlags[WifiAPFlags[\"HasSecondaryChannelAbove\"] = 4] = \"HasSecondaryChannelAbove\";\n    WifiAPFlags[WifiAPFlags[\"HasSecondaryChannelBelow\"] = 8] = \"HasSecondaryChannelBelow\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11B\"] = 256] = \"IEEE_802_11B\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11A\"] = 512] = \"IEEE_802_11A\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11G\"] = 1024] = \"IEEE_802_11G\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11N\"] = 2048] = \"IEEE_802_11N\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11AC\"] = 4096] = \"IEEE_802_11AC\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_11AX\"] = 8192] = \"IEEE_802_11AX\";\n    WifiAPFlags[WifiAPFlags[\"IEEE_802_LongRange\"] = 32768] = \"IEEE_802_LongRange\";\n})(exports.WifiAPFlags || (exports.WifiAPFlags = {}));\nexports.WifiCmd = void 0;\n(function (WifiCmd) {\n    /**\n     * Argument: results pipe (bytes). Return list of WiFi network from the last scan.\n     * Scans are performed periodically while not connected (in particular, on startup and after current connection drops),\n     * as well as upon `reconnect` and `scan` commands.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    WifiCmd[WifiCmd[\"LastScanResults\"] = 128] = \"LastScanResults\";\n    /**\n     * Automatically connect to named network if available. Also set password if network is not open.\n     *\n     * ```\n     * const [ssid, password] = jdunpack<[string, string]>(buf, \"z z\")\n     * ```\n     */\n    WifiCmd[WifiCmd[\"AddNetwork\"] = 129] = \"AddNetwork\";\n    /**\n     * No args. Initiate a scan, wait for results, disconnect from current WiFi network if any,\n     * and then reconnect (using regular algorithm, see `set_network_priority`).\n     */\n    WifiCmd[WifiCmd[\"Reconnect\"] = 130] = \"Reconnect\";\n    /**\n     * Argument: ssid string (bytes). Prevent from automatically connecting to named network in future.\n     * Forgetting a network resets its priority to `0`.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    WifiCmd[WifiCmd[\"ForgetNetwork\"] = 131] = \"ForgetNetwork\";\n    /**\n     * No args. Clear the list of known networks.\n     */\n    WifiCmd[WifiCmd[\"ForgetAllNetworks\"] = 132] = \"ForgetAllNetworks\";\n    /**\n     * Set connection priority for a network.\n     * By default, all known networks have priority of `0`.\n     *\n     * ```\n     * const [priority, ssid] = jdunpack<[number, string]>(buf, \"i16 s\")\n     * ```\n     */\n    WifiCmd[WifiCmd[\"SetNetworkPriority\"] = 133] = \"SetNetworkPriority\";\n    /**\n     * No args. Initiate search for WiFi networks. Generates `scan_complete` event.\n     */\n    WifiCmd[WifiCmd[\"Scan\"] = 134] = \"Scan\";\n    /**\n     * Argument: results pipe (bytes). Return list of known WiFi networks.\n     * `flags` is currently always 0.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    WifiCmd[WifiCmd[\"ListKnownNetworks\"] = 135] = \"ListKnownNetworks\";\n})(exports.WifiCmd || (exports.WifiCmd = {}));\n/**\n * pipe_report Results\n * ```\n * const [flags, rssi, channel, bssid, ssid] = jdunpack<[WifiAPFlags, number, number, Uint8Array, string]>(buf, \"u32 x[4] i8 u8 b[6] s[33]\")\n * ```\n */\n/**\n * pipe_report NetworkResults\n * ```\n * const [priority, flags, ssid] = jdunpack<[number, number, string]>(buf, \"i16 i16 s\")\n * ```\n */\nexports.WifiReg = void 0;\n(function (WifiReg) {\n    /**\n     * Read-write bool (uint8_t). Determines whether the WiFi radio is enabled. It starts enabled upon reset.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    WifiReg[WifiReg[\"Enabled\"] = 1] = \"Enabled\";\n    /**\n     * Read-only bool (uint8_t). Indicates whether or not we currently have an IP address assigned.\n     *\n     * ```\n     * const [connected] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    WifiReg[WifiReg[\"Connected\"] = 384] = \"Connected\";\n    /**\n     * Read-only bytes. 0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\n     *\n     * ```\n     * const [ipAddress] = jdunpack<[Uint8Array]>(buf, \"b[16]\")\n     * ```\n     */\n    WifiReg[WifiReg[\"IpAddress\"] = 385] = \"IpAddress\";\n    /**\n     * Constant bytes. The 6-byte MAC address of the device. If a device does MAC address randomization it will have to \"restart\".\n     *\n     * ```\n     * const [eui48] = jdunpack<[Uint8Array]>(buf, \"b[6]\")\n     * ```\n     */\n    WifiReg[WifiReg[\"Eui48\"] = 386] = \"Eui48\";\n    /**\n     * Read-only string (bytes). SSID of the access-point to which device is currently connected.\n     * Empty string if not connected.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s[32]\")\n     * ```\n     */\n    WifiReg[WifiReg[\"Ssid\"] = 387] = \"Ssid\";\n    /**\n     * Read-only dB int8_t. Current signal strength. Returns -128 when not connected.\n     *\n     * ```\n     * const [rssi] = jdunpack<[number]>(buf, \"i8\")\n     * ```\n     */\n    WifiReg[WifiReg[\"Rssi\"] = 388] = \"Rssi\";\n})(exports.WifiReg || (exports.WifiReg = {}));\nexports.WifiEvent = void 0;\n(function (WifiEvent) {\n    /**\n     * Emitted upon successful join and IP address assignment.\n     */\n    WifiEvent[WifiEvent[\"GotIp\"] = 1] = \"GotIp\";\n    /**\n     * Emitted when disconnected from network.\n     */\n    WifiEvent[WifiEvent[\"LostIp\"] = 2] = \"LostIp\";\n    /**\n     * A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\n     * The event indicates how many networks where found, and how many are considered\n     * as candidates for connection.\n     *\n     * ```\n     * const [numNetworks, numKnownNetworks] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    WifiEvent[WifiEvent[\"ScanComplete\"] = 128] = \"ScanComplete\";\n    /**\n     * Emitted whenever the list of known networks is updated.\n     */\n    WifiEvent[WifiEvent[\"NetworksChanged\"] = 129] = \"NetworksChanged\";\n})(exports.WifiEvent || (exports.WifiEvent = {}));\n// Service: Wind direction\nconst SRV_WIND_DIRECTION = 0x186be92b;\nexports.WindDirectionReg = void 0;\n(function (WindDirectionReg) {\n    /**\n     * Read-only ° uint16_t. The direction of the wind.\n     *\n     * ```\n     * const [windDirection] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirectionReg[WindDirectionReg[\"WindDirection\"] = 257] = \"WindDirection\";\n    /**\n     * Read-only ° uint16_t. Error on the wind direction reading\n     *\n     * ```\n     * const [windDirectionError] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirectionReg[WindDirectionReg[\"WindDirectionError\"] = 262] = \"WindDirectionError\";\n})(exports.WindDirectionReg || (exports.WindDirectionReg = {}));\n// Service: Wind speed\nconst SRV_WIND_SPEED = 0x1b591bbf;\nexports.WindSpeedReg = void 0;\n(function (WindSpeedReg) {\n    /**\n     * Read-only m/s u16.16 (uint32_t). The velocity of the wind.\n     *\n     * ```\n     * const [windSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeedReg[WindSpeedReg[\"WindSpeed\"] = 257] = \"WindSpeed\";\n    /**\n     * Read-only m/s u16.16 (uint32_t). Error on the reading\n     *\n     * ```\n     * const [windSpeedError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeedReg[WindSpeedReg[\"WindSpeedError\"] = 262] = \"WindSpeedError\";\n    /**\n     * Constant m/s u16.16 (uint32_t). Maximum speed that can be measured by the sensor.\n     *\n     * ```\n     * const [maxWindSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeedReg[WindSpeedReg[\"MaxWindSpeed\"] = 261] = \"MaxWindSpeed\";\n})(exports.WindSpeedReg || (exports.WindSpeedReg = {}));\n\n// Registers 0x001-0x07f - r/w common to all services\n// Registers 0x080-0x0ff - r/w defined per-service\n// Registers 0x100-0x17f - r/o common to all services\n// Registers 0x180-0x1ff - r/o defined per-service\n// Registers 0x200-0xeff - custom, defined per-service\n// Registers 0xf00-0xfff - reserved for implementation, should not be on the wire\nconst CMD_GET_REG = 0x1000;\nconst CMD_SET_REG = 0x2000;\nconst CMD_EVENT_MASK = 0x8000;\nconst CMD_EVENT_CODE_MASK = 0x00ff;\nconst CMD_EVENT_COUNTER_POS = 8;\nconst CMD_EVENT_COUNTER_MASK = 0x7f;\nconst CMD_TOP_MASK = 0xf000;\nconst CMD_REG_MASK = 0x0fff;\nconst ACK_MIN_DELAY = 90;\nconst ACK_MAX_DELAY = 120;\n// Commands 0x000-0x07f - common to all services\n// Commands 0x080-0xeff - defined per-service\n// Commands 0xf00-0xfff - reserved for implementation\n// enumeration data for CTRL, ad-data for other services\nconst CMD_ADVERTISEMENT_DATA = 0x00;\nconst PIPE_PORT_SHIFT = 7;\nconst PIPE_COUNTER_MASK = 0x001f;\nconst PIPE_CLOSE_MASK = 0x0020;\nconst PIPE_METADATA_MASK = 0x0040;\nconst JD_SERIAL_HEADER_SIZE = 16;\nconst JD_SERIAL_MAX_PAYLOAD_SIZE = 236;\nconst JD_SERVICE_INDEX_MASK = 0x3f;\nconst JD_SERVICE_INDEX_INV_MASK = 0xc0;\nconst JD_SERVICE_INDEX_CRC_ACK = 0x3f;\nconst JD_SERVICE_INDEX_PIPE = 0x3e;\nconst JD_SERVICE_INDEX_MAX_NORMAL = 0x30;\nconst JD_SERVICE_INDEX_CTRL = 0x00;\n// the COMMAND flag signifies that the device_identifier is the recipent\n// (i.e., it's a command for the peripheral); the bit clear means device_identifier is the source\n// (i.e., it's a report from peripheral or a broadcast message)\nconst JD_FRAME_FLAG_COMMAND = 0x01;\n// an ACK should be issued with CRC of this package upon reception\nconst JD_FRAME_FLAG_ACK_REQUESTED = 0x02;\n// the device_identifier contains target service class number\nconst JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = 0x04;\nconst JD_ADVERTISEMENT_0_COUNTER_MASK = 0x0000000f;\nconst JD_ADVERTISEMENT_0_ACK_SUPPORTED = 0x00000100;\n// time withouth seeing a package to be considered \"lost\", 2x announce interval\nconst JD_DEVICE_LOST_DELAY = 1500;\n// time without seeing a packet to be considered \"disconnected\"\nconst JD_DEVICE_DISCONNECTED_DELAY = 5000;\nconst RESET_IN_TIME_US = 2000000;\nconst MAX_SERVICES_LENGTH = 59;\nconst NEW_LISTENER = \"newListener\";\nconst REMOVE_LISTENER = \"removeListener\";\nconst CONNECTION_STATE = \"connectionState\";\nconst CONNECT = \"connect\";\nconst LOST = \"lost\";\nconst FOUND = \"found\";\nconst CONNECTING = \"connecting\";\nconst DISCONNECT = \"disconnect\";\nconst DISCONNECTING = \"disconnecting\";\nconst ANNOUNCE = \"announce\";\nconst START = \"start\";\nconst RESTART = \"restart\";\nconst STOP = \"stop\";\nconst CHANGE = \"change\";\nconst EVENT = \"event\";\nconst RENDER = \"render\";\nconst REFRESH = \"refresh\";\nconst MESSAGE = \"message\";\nconst FIRMWARE_BLOBS_CHANGE = \"firmwareBlobsChange\";\nconst LATE = \"late\";\nconst GET_ATTEMPT = \"getAttempt\";\nconst SERVICE_CLIENT_ADDED = `serviceClientAdded`;\nconst SERVICE_CLIENT_REMOVED = `serviceClientRemoved`;\nconst READING_SENT = \"readingSent\";\nconst ROLE_CHANGE = \"roleChange\";\nconst ROLE_MANAGER_CHANGE = \"roleManagerChange\";\nconst SERVICE_PROVIDER_ADDED = `serviceProviderAdded`;\nconst SERVICE_PROVIDER_REMOVED = `serviceProviderRemoved`;\nconst IDENTIFY = \"identify\";\nconst IDENTIFY_DURATION = 2000;\nconst RESET = \"reset\";\nconst DATA = \"data\";\nconst CLOSE = \"close\";\nconst DEVICE_CONNECT = \"deviceConnect\";\nconst DEVICE_LOST = \"deviceLost\";\nconst DEVICE_FOUND = \"deviceFound\";\nconst DEVICE_DISCONNECT = \"deviceDisconnect\";\nconst DEVICE_ANNOUNCE = \"deviceAnnounce\";\nconst DEVICE_PACKET_ANNOUNCE = \"devicePacketAnnounce\";\nconst DEVICE_RESTART = \"deviceRestart\";\nconst DEVICE_CHANGE = \"deviceChange\";\nconst DEVICE_FIRMWARE_INFO = \"firmwareInfo\";\nconst DEVICE_CLEAN = \"deviceClean\";\nconst SELF_ANNOUNCE = \"selfAnnounce\";\nconst PACKET_SEND = \"packetSend\";\nconst PACKET_SEND_DISCONNECT = \"packetSendDisconnect\";\nconst PACKET_PRE_PROCESS = \"packetPreProcess\";\nconst PACKET_PROCESS = \"packetProcess\";\nconst PACKET_RECEIVE = \"packetReceive\";\nconst PACKET_RECEIVE_ANNOUNCE = \"packetReceiveAnnounce\";\nconst PACKET_EVENT = \"packetEvent\";\nconst PACKET_REPORT = \"packetReport\";\nconst PACKET_ANNOUNCE = \"packetAnnounce\";\nconst PACKET_INVALID_CRC = \"packetInvalidCrc\";\nconst PACKET_INVALID_DATA = \"packetInvalidData\";\nconst PACKET_DATA_NORMALIZE = \"packetDataNormalize\";\nconst REPORT_RECEIVE = \"reportReceive\";\nconst REPORT_UPDATE = \"reportUpdate\";\nconst COMMAND_RECEIVE = \"commandReceive\";\nconst ERROR = \"error\";\nconst TRACE = \"trace\";\nconst TIMEOUT = \"timeout\";\nconst TIMEOUT_DISCONNECT = \"timeoutDisconnect\";\nconst PROGRESS = \"progress\";\nconst PACKET_KIND_RW = \"rw\";\nconst PACKET_KIND_RO = \"ro\";\nconst PACKET_KIND_EVENT = \"event\";\nconst PACKET_KIND_ANNOUNCE = \"announce\";\nconst REGISTER_NODE_NAME = \"register\";\nconst REPORT_NODE_NAME = \"report\";\nconst CONST_NODE_NAME = \"const\";\nconst EVENT_NODE_NAME = \"event\";\nconst SERVICE_NODE_NAME = \"service\";\nconst SERVICE_MIXIN_NODE_NAME = \"serviceMixin\";\nconst DEVICE_NODE_NAME = \"device\";\nconst VIRTUAL_DEVICE_NODE_NAME = \"virtualdevice\";\nconst BUS_NODE_NAME = \"bus\";\nconst COMMAND_NODE_NAME = \"command\";\nconst FIELD_NODE_NAME = \"field\";\nconst PIPE_NODE_NAME = \"pipe\";\nconst PIPE_REPORT_NODE_NAME = \"pipe_report\";\nconst CRC_ACK_NODE_NAME = \"crcAck\";\nconst SERVICE_TEST_NODE_NAME = \"serviceTest\";\nconst REGISTER_REFRESH_TIMEOUT = 150;\nconst REGISTER_REFRESH_RETRY_0 = 30;\nconst REGISTER_REFRESH_RETRY_1 = 80;\nconst REGISTER_POLL_STREAMING_INTERVAL = 5000;\nconst REGISTER_POLL_FIRST_REPORT_INTERVAL = 400;\nconst REGISTER_POLL_REPORT_INTERVAL = 5001;\nconst REGISTER_POLL_REPORT_MAX_INTERVAL = 60000;\nconst REGISTER_POLL_REPORT_VOLATILE_INTERVAL = 1000;\nconst REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL = 5000;\nconst REGISTER_OPTIONAL_POLL_COUNT = 3;\nconst STREAMING_DEFAULT_INTERVAL = 50;\nconst FLASH_MAX_DEVICES = 6;\nconst PING_LOGGERS_POLL = 2400;\nconst ROLE_MANAGER_POLL = 1500;\nconst REFRESH_REGISTER_POLL = 50;\nconst USB_TRANSPORT = \"usb\";\nconst BLUETOOTH_TRANSPORT = \"bluetooth\";\nconst SERIAL_TRANSPORT = \"serial\";\nconst PACKETIO_TRANSPORT = \"packetio\";\nconst WEBSOCKET_TRANSPORT = \"web\";\nconst META_ACK = \"ACK\";\nconst META_ACK_FAILED = \"ACK_FAILED\";\nconst META_PIPE = \"PIPE\";\nconst META_GET = \"GET\";\nconst META_TRACE = \"TRACE\";\nconst REGISTER_PRE_GET = \"registerPreGet\";\nconst TRACE_FILTER_HORIZON = 100;\nconst EMBED_MIN_ASPECT_RATIO = 1.22;\nconst BLUETOOTH_JACDAC_SERVICE = \"f8530001-a97f-49f5-a554-3e373fbea2d5\";\nconst BLUETOOTH_JACDAC_RX_CHARACTERISTIC = \"f8530002-a97f-49f5-a554-3e373fbea2d5\";\nconst BLUETOOTH_JACDAC_TX_CHARACTERISTIC = \"f8530003-a97f-49f5-a554-3e373fbea2d5\";\nconst BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC = \"f8530004-a97f-49f5-a554-3e373fbea2d5\";\nconst TRANSPORT_CONNECT_RETRY_DELAY = 500;\nconst TRANSPORT_PULSE_TIMEOUT = 60000; // don't interfere with manual flashing of devices\nconst ERROR_MICROBIT_V1 = \"microbit/v1-not-supported\";\nconst ERROR_MICROBIT_UNKNOWN = \"microbit/unknown-hardware-revision\";\nconst ERROR_MICROBIT_JACDAC_MISSING = \"microbit/jacdac-missing\";\nconst ERROR_MICROBIT_INVALID_MEMORY = \"microbit/invalid-memory\";\nconst ROLE_BOUND = \"roleBound\";\nconst ROLE_UNBOUND = \"roleUnbound\";\nconst ROLE_HAS_NO_SERVICE = \"roleHasNoService\";\nconst BOUND = \"bound\";\nconst UNBOUND = \"unbound\";\nconst JACDAC_ERROR = \"JacdacError\";\n\nfunction isMixinService(serviceClass) {\n    return (serviceClass & 536870912) === 536870912;\n}\nfunction parseIntFloat(spec, w, allowFloat = false) {\n    if (/^-?0x[a-f\\d_]+$/i.test(w) || /^-?[\\d_]+$/.test(w)) {\n        const v = parseInt(w.replace(/_/g, \"\")); // allow for 0x3fff_ffff syntax\n        if (isNaN(v))\n            throw new Error(\"can't parse int: \" + w);\n        return v;\n    }\n    if (allowFloat && /^-?\\d*(\\.\\d*)?(e(-?)\\d+)?$/.test(w)) {\n        const v = parseFloat(w);\n        if (isNaN(v))\n            throw new Error(\"can't parse float: \" + w);\n        return v;\n    }\n    const ww = w.split(/\\./);\n    if (ww.length != 2) {\n        throw new Error(`expecting int or enum member here`);\n    }\n    const en = spec.enums[ww[0]];\n    if (!en) {\n        throw new Error(`${ww[0]} is not an enum type`);\n    }\n    // eslint-disable-next-line no-prototype-builtins\n    if (!en.members.hasOwnProperty(ww[1]))\n        throw new Error(`${ww[1]} is not a member of ${ww[0]}`);\n    return en.members[ww[1]] || 0;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst DEVICE_IMAGE_WIDTH = 1024;\nconst DEVICE_IMAGE_HEIGHT = 768;\n// modified subset of SenML\nconst unitDescription = {\n    \"°\": \"angle\",\n    \"°/s\": \"rotation rate\",\n    \"°/s2\": \"rotation acceleration\",\n    m: \"meter\",\n    kg: \"kilogram\",\n    s: \"second\",\n    A: \"ampere\",\n    K: \"kelvin\",\n    cd: \"candela\",\n    mol: \"mole\",\n    Hz: \"hertz\",\n    rad: \"radian\",\n    sr: \"steradian\",\n    N: \"newton\",\n    Pa: \"pascal\",\n    J: \"joule\",\n    W: \"watt\",\n    C: \"coulomb\",\n    V: \"volt\",\n    F: \"farad\",\n    Ohm: \"ohm\",\n    S: \"siemens\",\n    Wb: \"weber\",\n    T: \"tesla\",\n    H: \"henry\",\n    \"°C\": \"degrees Celsius\",\n    lm: \"lumen\",\n    lx: \"lux\",\n    Bq: \"becquerel\",\n    Gy: \"gray\",\n    Sv: \"sievert\",\n    kat: \"katal\",\n    m2: \"square meter (area)\",\n    m3: \"cubic meter (volume)\",\n    \"m/s\": \"meter per second (velocity)\",\n    \"m/s2\": \"meter per square second (acceleration)\",\n    \"m3/s\": \"cubic meter per second (flow rate)\",\n    \"W/m2\": \"watt per square meter (irradiance)\",\n    \"cd/m2\": \"candela per square meter (luminance)\",\n    bit: \"bit (information content)\",\n    \"bit/s\": \"bit per second (data rate)\",\n    lat: \"degrees latitude\",\n    lon: \"degrees longitude\",\n    pH: \"pH value (acidity; logarithmic quantity)\",\n    dB: \"decibel (logarithmic quantity)\",\n    dBW: \"decibel relative to 1 W (power level)\",\n    count: \"1 (counter value)\",\n    \"/\": \"1 (ratio e.g., value of a switch)\",\n    \"%RH\": \"Percentage (Relative Humidity)\",\n    \"%EL\": \"Percentage (remaining battery energy level)\",\n    EL: \"seconds (remaining battery energy level)\",\n    \"1/s\": \"1 per second (event rate)\",\n    \"S/m\": \"Siemens per meter (conductivity)\",\n    B: \"Byte (information content)\",\n    VA: \"volt-ampere (Apparent Power)\",\n    VAs: \"volt-ampere second (Apparent Energy)\",\n    var: \"volt-ampere reactive (Reactive Power)\",\n    vars: \"volt-ampere-reactive second (Reactive Energy)\",\n    \"J/m\": \"joule per meter (Energy per distance)\",\n    \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n    \"s/60°\": \"servo speed (time to travel 60°)\",\n    \"kg/cm\": \"torque\",\n    hsv: \"bit HSV color\",\n    rgb: \"RGB color\",\n    rpm: \"revolutions per minute\",\n    uv: \"UV index\",\n    lux: \"illuminance\",\n    bpm: \"beats per minute\",\n    mcd: \"micro candella\",\n    px: \"pixel\",\n};\nconst secondaryUnitConverters = {\n    ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1000, offset: 0 },\n    min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n    h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n    MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1000000, offset: 0 },\n    kW: { name: \"kilowatt\", unit: \"W\", scale: 1000, offset: 0 },\n    kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1000, offset: 0 },\n    kvar: { name: \"kilovar\", unit: \"var\", scale: 1000, offset: 0 },\n    Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n    Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n    kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 3600000, offset: 0 },\n    varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n    kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 3600000, offset: 0 },\n    kVAh: {\n        name: \"kilovolt-ampere-hour\",\n        unit: \"VAs\",\n        scale: 3600000,\n        offset: 0,\n    },\n    \"Wh/km\": {\n        name: \"watt-hour per kilometer\",\n        unit: \"J/m\",\n        scale: 3.6,\n        offset: 0,\n    },\n    KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n    GB: { name: \"gigabyte\", unit: \"B\", scale: 1.0e9, offset: 0 },\n    \"Mbit/s\": {\n        name: \"megabit per second\",\n        unit: \"bit/s\",\n        scale: 1000000,\n        offset: 0,\n    },\n    \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n    \"MB/s\": {\n        name: \"megabyte per second\",\n        unit: \"bit/s\",\n        scale: 8000000,\n        offset: 0,\n    },\n    mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1000, offset: 0 },\n    mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1000, offset: 0 },\n    dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n    \"ug/m3\": {\n        name: \"microgram per cubic meter\",\n        unit: \"kg/m3\",\n        scale: 1.0e-9,\n        offset: 0,\n    },\n    \"mm/h\": {\n        name: \"millimeter per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3600000,\n        offset: 0,\n    },\n    \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n    \"cm/s\": {\n        name: \"centimeter per seconds\",\n        unit: \"m/s\",\n        scale: 1 / 100,\n        offset: 0,\n    },\n    ppm: { name: \"parts per million\", unit: \"/\", scale: 1.0e-6, offset: 0 },\n    ppb: { name: \"parts per billion\", unit: \"/\", scale: 1.0e-9, offset: 0 },\n    \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1000, offset: 0 },\n    hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n    mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1000, offset: 0 },\n    cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n    km: { name: \"kilometer\", unit: \"m\", scale: 1000, offset: 0 },\n    \"km/h\": {\n        name: \"kilometer per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3.6,\n        offset: 0,\n    },\n    \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1000, offset: 0 },\n    nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n    nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n    // compat with previous Jacdac versions\n    frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n    us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n    mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 3.6e-3, offset: 0 },\n    g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n    \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 },\n};\nconst encodings = {\n    json: \"JSON\",\n    bitset: \"bitset\",\n};\nfunction resolveUnit(unit) {\n    if (!unit)\n        return { name: \"\", scale: 1, offset: 1 }; // indentifier\n    // seconary unit?\n    const su = secondaryUnitConverters[unit];\n    if (su)\n        return su;\n    const name = unitDescription[unit];\n    if (name)\n        return { name, unit, scale: 1, offset: 0 };\n    return undefined;\n}\nfunction units() {\n    const r = [];\n    Object.keys(unitDescription).forEach(k => {\n        r.push({ name: k, description: unitDescription[k] });\n        Object.keys(secondaryUnitConverters)\n            .filter(scd => secondaryUnitConverters[scd].unit === k)\n            .forEach(scd => r.push({\n            name: scd,\n            description: secondaryUnitConverters[scd].name,\n        }));\n    });\n    r.sort((l, r) => l.name.localeCompare(r.name));\n    return r;\n}\n/* check ranges, see system.md\nRegisters `0x001-0x07f` - r/w common to all services\nRegisters `0x080-0x0ff` - r/w defined per-service\nRegisters `0x100-0x17f` - r/o common to all services\nRegisters `0x180-0x1ff` - r/o defined per-service\nRegisters `0x200-0xeff` - custom, defined per-service\nRegisters `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n*/\nconst identifierRanges = {\n    rw: [\n        [0x001, 0x07f],\n        [0x080, 0x0ff],\n        [0x200, 0xeff],\n        [0xf00, 0xfff], // impl\n    ],\n    ro: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff],\n        [0xf00, 0xfff], // impl\n    ],\n    const: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff],\n        [0xf00, 0xfff], // impl\n    ],\n    command: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    report: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    event: [\n        [0x00, 0x7f],\n        [0x80, 0xff],\n    ],\n};\nfunction parseServiceSpecificationMarkdownToJSON(filecontent, includes, filename = \"\") {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\");\n    const info = {\n        name: \"\",\n        status: \"experimental\",\n        shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n        camelName: \"\",\n        shortName: \"\",\n        extends: [],\n        notes: {},\n        classIdentifier: 0,\n        enums: {},\n        constants: {},\n        packets: [],\n        tags: [],\n    };\n    let backticksType = \"\";\n    let enumInfo = null;\n    let packetInfo = null;\n    let pipePacket = null;\n    let errors = [];\n    let lineNo = 0;\n    let noteId = \"short\";\n    let lastCmd;\n    let packetsToDescribe;\n    let nextModifier = \"\";\n    const systemInfo = includes === null || includes === void 0 ? void 0 : includes[\"_system\"];\n    const usedIds = {};\n    for (const prev of values(includes || {})) {\n        if (prev.classIdentifier)\n            usedIds[prev.classIdentifier + \"\"] = prev.name;\n    }\n    try {\n        if (includes[\"_system\"] && includes[\"_base\"])\n            processInclude(\"_base\");\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++;\n            processLine(line);\n        }\n    }\n    catch (e) {\n        error(\"exception: \" + e.message);\n    }\n    if (errors.length)\n        info.errors = errors;\n    for (const k of Object.keys(info.notes))\n        info.notes[k] = normalizeMD(info.notes[k]);\n    for (const v of info.packets)\n        v.description = normalizeMD(v.description);\n    if (!info.camelName)\n        info.camelName = camelize(info.name\n            .replace(/\\s+/g, \" \")\n            .replace(/[ -](.)/g, (f, l) => l.toUpperCase())\n            .replace(/[^\\w]+/g, \"_\"));\n    if (!info.shortName)\n        info.shortName = info.camelName;\n    if (info.camelName == \"system\")\n        info.classIdentifier = 536870897;\n    else if (info.camelName == \"base\")\n        info.classIdentifier = 536870899;\n    else if (info.camelName == \"sensor\")\n        info.classIdentifier = 536870898;\n    if (info.shortName != \"control\" && !info.classIdentifier)\n        error(\"identifier: not specified\");\n    info.packets.forEach(pkt => (pkt.packFormat = packFormat(info, pkt)));\n    return info;\n    function processLine(line) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null;\n                if (backticksType == \"default\")\n                    return;\n            }\n        }\n        else {\n            const m = /^```(.*)/.exec(line);\n            if (m) {\n                backticksType = m[1] || \"default\";\n                if (backticksType == \"default\")\n                    return;\n            }\n        }\n        const interpret = backticksType == \"default\" || line.slice(0, 4) == \"    \";\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line);\n            if (m) {\n                const [, hd, cont] = m;\n                packetsToDescribe = null;\n                const newNoteId = cont.trim().toLowerCase();\n                if (hd == \"#\" && !info.name) {\n                    info.name = cont.trim();\n                    line = \"\";\n                }\n                else if (newNoteId == \"registers\" ||\n                    newNoteId == \"commands\" ||\n                    newNoteId == \"events\" ||\n                    newNoteId == \"examples\") {\n                    noteId = newNoteId;\n                    line = \"\";\n                }\n                else {\n                    if (noteId == \"short\")\n                        noteId = \"long\";\n                    // keep line\n                }\n            }\n            if (packetsToDescribe) {\n                for (const iface of packetsToDescribe)\n                    iface.description += line + \"\\n\";\n            }\n            else {\n                if (line || info.notes[noteId]) {\n                    if (!info.notes[noteId])\n                        info.notes[noteId] = \"\";\n                    info.notes[noteId] += line + \"\\n\";\n                }\n            }\n        }\n        else {\n            if (packetsToDescribe && packetsToDescribe[0].description)\n                packetsToDescribe = null;\n            const expanded = line\n                .replace(/\\/\\/.*/, \"\")\n                .replace(/[?@:=,{};]/g, s => \" \" + s + \" \")\n                .trim();\n            if (!expanded)\n                return;\n            const words = expanded.split(/\\s+/);\n            if (/^[;,]/.test(words[words.length - 1]))\n                words.pop();\n            let cmd = words[0];\n            // allow for `command = Foo.Bar` etc (ie. command is not a keyword there)\n            if (words[1] == \":\" || words[1] == \"=\")\n                cmd = \":\";\n            switch (cmd) {\n                case \"enum\":\n                case \"flags\":\n                    startEnum(words);\n                    break;\n                case \"define\":\n                    constant(words);\n                    break;\n                case \"meta\":\n                case \"pipe\":\n                case \"report\":\n                case \"command\":\n                case \"const\":\n                case \"ro\":\n                case \"rw\":\n                case \"event\":\n                case \"client\":\n                case \"volatile\":\n                case \"lowlevel\":\n                case \"restricted\":\n                    startPacket(words);\n                    break;\n                case \"}\":\n                    if (packetInfo) {\n                        finishPacket();\n                    }\n                    else if (enumInfo) {\n                        enumInfo = null;\n                    }\n                    else {\n                        error(\"nothing to end here\");\n                    }\n                    break;\n                default:\n                    if (packetInfo)\n                        packetField(words);\n                    else if (enumInfo)\n                        enumMember(words);\n                    else\n                        metadataMember(words);\n            }\n        }\n    }\n    function finishPacket() {\n        const paderr = paddingError(packetInfo);\n        if (paderr) {\n            packetInfo.packed = true;\n            error(`${paderr} in ${packetInfo.kind} ${packetInfo.name}`);\n        }\n        let repeats = false;\n        let hadzero = false;\n        for (const p of packetInfo.fields) {\n            if (hadzero) {\n                error(`field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`);\n                break;\n            }\n            if (p.startRepeats) {\n                if (repeats)\n                    error(`repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`);\n                repeats = true;\n            }\n            if (p.storage == 0 && p.type != \"string0\") {\n                if (repeats) {\n                    error(`variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`);\n                    break;\n                }\n                hadzero = true;\n            }\n        }\n        const pid = packetInfo.identifier;\n        const ranges = identifierRanges[packetInfo.kind];\n        if (packetInfo.name != \"set_register\" &&\n            packetInfo.name != \"get_register\" &&\n            ranges &&\n            !ranges.some(range => range[0] <= pid && pid <= range[1]))\n            error(`${packetInfo.name} identifier 0x${pid.toString(16)} out of range, expected in ${ranges\n                .map(range => `[${range\n                .map(r => `0x${r.toString(16)}`)\n                .join(\", \")}]`)\n                .join(\", \")}`);\n        // additional checks for specific packets\n        if ([\n            \"reading_error\",\n            \"min_reading\",\n            \"max_reading\",\n            \"reading_resolution\",\n        ].indexOf(packetInfo.identifierName) > -1) {\n            const regid = packetInfo.identifierName;\n            if (packetInfo.fields.length > 1)\n                error(`${regid} must be a number`);\n            const reading = info.packets.find(pkt => pkt.kind === \"ro\" && pkt.identifierName === \"reading\");\n            if (!reading)\n                error(`${regid} register without a reading register`);\n            else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n                error(`${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`);\n        }\n        packetInfo = null;\n    }\n    function normalizeMD(md) {\n        return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n    }\n    function checkBraces(words) {\n        if (enumInfo || packetInfo)\n            error(\"already in braces\");\n        if (words) {\n            if (words[2] != \"{\")\n                error(`expecting: ${words[0]} NAME {`);\n        }\n        enumInfo = null;\n        packetInfo = null;\n    }\n    function forceSection(sectionId) {\n        if (noteId != sectionId) {\n            error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`);\n        }\n    }\n    function generalKind(k) {\n        switch (k) {\n            case \"const\":\n            case \"ro\":\n            case \"rw\":\n                return \"rw\";\n            default:\n                return k;\n        }\n    }\n    function startPacket(words) {\n        checkBraces(null);\n        let client = undefined;\n        let lowLevel = undefined;\n        let restricted = undefined;\n        if (words[0] === \"restricted\") {\n            restricted = true;\n            words.shift();\n        }\n        else if (words[0] === \"client\") {\n            client = true;\n            words.shift();\n        }\n        else if (words[0] === \"lowlevel\") {\n            lowLevel = true;\n            words.shift();\n        }\n        const kindSt = words.shift();\n        let kind = \"command\";\n        if (kindSt == \"meta\") {\n            forceSection(\"commands\");\n            let w2 = words.shift();\n            if (w2 == \"pipe\")\n                w2 = words.shift();\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"meta_pipe_\" + w2);\n            else\n                error(\"invalid token after meta\");\n        }\n        else if (kindSt == \"pipe\") {\n            forceSection(\"commands\");\n            const w2 = words.shift();\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"pipe_\" + w2);\n            else\n                error(\"invalid token after pipe\");\n        }\n        else {\n            kind = kindSt;\n        }\n        if (restricted && kind !== \"command\")\n            error(\"restricted only applies to commands\");\n        let internal = undefined;\n        if (words[0] === \"internal\") {\n            internal = true;\n            words.shift();\n        }\n        let volatile = undefined;\n        if (words[0] === \"volatile\") {\n            if (kind != \"ro\" && kind != \"rw\")\n                error(\"volatile can only modify ro or rw\");\n            volatile = true;\n            words.shift();\n        }\n        let name = words.shift();\n        const isReport = kind == \"report\";\n        if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n            words.unshift(name);\n            name = lastCmd.name;\n        }\n        packetInfo = {\n            kind,\n            name: normalizeName(name),\n            identifier: undefined,\n            description: \"\",\n            fields: [],\n            internal,\n            client,\n            lowLevel,\n            volatile,\n            restricted,\n        };\n        if (isReport && lastCmd && name == lastCmd.name) {\n            packetInfo.secondary = true;\n            lastCmd.hasReport = true;\n        }\n        if (!packetsToDescribe)\n            packetsToDescribe = [];\n        packetsToDescribe.push(packetInfo);\n        if (words[0] == \"?\") {\n            words.shift();\n            packetInfo.optional = true;\n        }\n        const prev = info.packets.filter(p => p.name == packetInfo.name);\n        if (prev.length == 0) ;\n        else if (prev.length == 1 &&\n            prev[0].kind == \"command\" &&\n            packetInfo.kind == \"report\") ;\n        else {\n            error(`packet redefinition ${prev.map(p => p.name).join(\", \")} `);\n        }\n        if (/pipe/.test(kind)) {\n            if (!pipePacket)\n                error(\"pipe definitions can only occur after the pipe-open packet\");\n            else\n                packetInfo.pipeType = pipePacket.pipeType;\n        }\n        const atat = words.indexOf(\"@\");\n        if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n            // no identifier\n            packetInfo.identifier = 0;\n        }\n        else if (atat >= 0) {\n            const w = words[atat + 1];\n            let v = parseInt(w);\n            if (isNaN(v)) {\n                v = 0;\n                if (systemInfo) {\n                    const systemPacket = systemInfo.packets.find(p => p.name == w);\n                    if (systemPacket) {\n                        v = systemPacket.identifier;\n                        packetInfo.identifierName = w;\n                        if (systemPacket.kind != kind)\n                            error(`kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`);\n                    }\n                    else\n                        error(`${w} not found in _system`);\n                }\n                else {\n                    error(`${w} cannot be resolved, since _system is missing`);\n                }\n            }\n            // if we are accessing the reading or reading_error register, mark it volatile\n            if (kind === \"ro\" && (v === 0x101 || v === 0x106))\n                packetInfo.volatile = true;\n            let isUser = false;\n            let isSystem = false;\n            let isHigh = 0x200 <= v && v <= 0xeff;\n            switch (kind) {\n                case \"const\":\n                case \"ro\":\n                    forceSection(\"registers\");\n                    isSystem = 0x100 <= v && v <= 0x17f;\n                    isUser = 0x180 <= v && v <= 0x1ff;\n                    break;\n                case \"rw\":\n                    forceSection(\"registers\");\n                    isSystem = 0x00 <= v && v <= 0x7f;\n                    isUser = 0x80 <= v && v <= 0xff;\n                    break;\n                case \"report\":\n                case \"command\":\n                    forceSection(\"commands\");\n                    isSystem = 0x00 <= v && v <= 0x7f;\n                    isUser = 0x80 <= v && v <= 0xff;\n                    isHigh = 0x100 <= v && v <= 0xeff;\n                    break;\n                case \"event\":\n                    forceSection(\"events\");\n                    isSystem = 0x00 <= v && v <= 0x7f;\n                    isUser = 0x80 <= v && v <= 0xff;\n                    break;\n            }\n            if (isUser) ;\n            else if (isSystem) {\n                if (!packetInfo.identifierName)\n                    warn(`${kind} @ ${toHex$1(v)} should be expressed with a name from _system.md`);\n            }\n            else if (isHigh) {\n                if (!info.highCommands)\n                    warn(`${kind} @ ${toHex$1(v)} is from the extended range but 'high: 1' missing`);\n            }\n            packetInfo.identifier = v;\n            words.splice(atat, 2);\n        }\n        else {\n            if (isReport && lastCmd)\n                packetInfo.identifier = lastCmd.identifier;\n            else\n                error(`@ not found at ${packetInfo.name}`);\n        }\n        if (info.packets.some(p => generalKind(p.kind) == generalKind(packetInfo.kind) &&\n            (!/pipe/.test(p.kind) ||\n                p.pipeType == packetInfo.pipeType) &&\n            p.identifier == packetInfo.identifier)) {\n            error(\"packet identifier already used\");\n        }\n        info.packets.push(packetInfo);\n        if (kind == \"command\")\n            lastCmd = packetInfo;\n        else\n            lastCmd = null;\n        if (words[0] == \"=\" || words[0] == \":\") {\n            words.unshift(\"_\");\n            packetField(words);\n            finishPacket();\n        }\n        else {\n            const last = words.shift();\n            if (last == \"{\") {\n                if (words[0] == \"...\")\n                    words.shift();\n                if (words[0] == \"}\") {\n                    words.shift();\n                    finishPacket();\n                }\n                if (words.length)\n                    error(`excessive tokens: ${words[0]}...`);\n            }\n            else {\n                if (last === undefined && kind == \"event\") {\n                    finishPacket();\n                }\n                else {\n                    error(\"expecting '{'\");\n                }\n            }\n        }\n    }\n    function rangeCheck(tp, v) {\n        const [storage, type, typeShift] = normalizeStorageType(tp);\n        if (isNaN(v))\n            return v; // error already reported\n        if (storage == 0) {\n            error(`numeric values like ${v} not allowed for ${tp}`);\n            return v;\n        }\n        if (v < 0 && storage > 0) {\n            error(`negative values like ${v} not allowed for ${tp}`);\n            return v;\n        }\n        if (Math.floor(v) != v && typeShift == 0) {\n            error(`only integer values allowed for ${tp}; got ${v}`);\n            return v;\n        }\n        let bits = storage < 0 ? -storage * 8 - 1 : storage * 8;\n        bits -= typeShift || 0;\n        // don't use bitshift to allow for more than 32 bits\n        let max = 1;\n        while (bits--)\n            max *= 2;\n        if (-v == max) ;\n        else if (max == 1 && v == 1) ;\n        else {\n            if (Math.abs(v) >= max) {\n                error(`value ${v} is out of range for ${tp}`);\n                return v;\n            }\n        }\n        return v;\n    }\n    function parseVal(words) {\n        const eq = words.shift();\n        if (eq != \"=\" && eq != \":\")\n            error(\"expecting '='\");\n        const val = words.shift();\n        return parseIntCheck(val, true);\n    }\n    function constant(words) {\n        if (words.length != 3) {\n            error(`define syntax is \"define name value\" (${words.join(\" \")}}`);\n            return;\n        }\n        const name = words[1];\n        const svalue = words[2];\n        const hex = /^0x/.test(svalue);\n        const value = hex ? parseInt(svalue, 16) : parseInt(svalue);\n        if (isNaN(value)) {\n            error(\"invalid numeric value for constant\");\n            return;\n        }\n        info.constants[name] = { value, hex };\n    }\n    function packetField(words) {\n        var _a;\n        if (words.length == 2 &&\n            (words[0] == \"repeats\" ||\n                words[0] == \"segmented\" ||\n                words[0] == \"multi-segmented\")) {\n            nextModifier = words[0];\n            return;\n        }\n        const name = normalizeName(words.shift());\n        let defaultValue = undefined;\n        let isOptional = undefined;\n        let op = words.shift();\n        if (op == \"?\") {\n            isOptional = true;\n            op = words.shift();\n        }\n        if (op == \"=\") {\n            defaultValue = parseIntCheck(words.shift(), true);\n            op = words.shift();\n        }\n        if (op != \":\")\n            error(\"expecting ':'\");\n        const tp = words.shift();\n        const [storage, type, typeShift] = normalizeStorageType(tp);\n        const isFloat = typeShift === null || undefined;\n        let tok = words.shift();\n        let unit;\n        let encoding;\n        if (tok != \"{\") {\n            if (type === \"string\" || type === \"bytes\")\n                encoding = normalizeEncoding(tok);\n            else\n                unit = normalizeUnit(tok);\n            tok = words.shift();\n        }\n        if (defaultValue !== undefined)\n            rangeCheck(tp, defaultValue);\n        let shift = typeShift || undefined;\n        if (unit == \"/\") {\n            // / units should be used with ui0. data\n            if (!/^(u0|i1)\\.\\d+$/.test(tp))\n                error(`fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`);\n            shift = Math.abs(storage) * 8;\n            if (storage < 0)\n                shift -= 1;\n        }\n        const field = {\n            name,\n            unit,\n            encoding,\n            shift,\n            isFloat,\n            type,\n            storage,\n            isSimpleType: canonicalType(storage) == type || undefined,\n            defaultValue,\n            isOptional,\n            multiSegmented: nextModifier == \"multi-segmented\" || undefined,\n            segmented: nextModifier == \"segmented\" ||\n                nextModifier == \"multi-segmented\" ||\n                undefined,\n            startRepeats: nextModifier == \"repeats\" || undefined,\n        };\n        if (!unit)\n            delete field.unit;\n        if (!encoding)\n            delete field.encoding;\n        if (tok == \"{\") {\n            while (words.length) {\n                tok = words.shift();\n                if (tok == \"}\")\n                    break;\n                tok = camelize(tok);\n                switch (tok) {\n                    case \"maxBytes\": {\n                        field[tok] = rangeCheck(\"u8\", parseVal(words));\n                        break;\n                    }\n                    case \"typicalMin\":\n                    case \"typicalMax\":\n                    case \"absoluteMin\":\n                    case \"absoluteMax\": {\n                        field[tok] = rangeCheck(tp, parseVal(words));\n                        break;\n                    }\n                    case \"preferredInterval\": {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if (packetInfo[tok] !== undefined)\n                            error(`field ${tok} already set`);\n                        packetInfo[tok] = rangeCheck(\"u32\", parseVal(words));\n                        break;\n                    }\n                    default:\n                        error(\"unknown constraint: \" + tok);\n                        break;\n                }\n                if (words[0] == \",\")\n                    words.shift();\n            }\n            if (tok == \"}\")\n                tok = null;\n        }\n        if (tok)\n            error(`excessive tokens at the end of member: ${tok}...`);\n        if (field.typicalMin === undefined &&\n            field.typicalMax !== undefined &&\n            storage > 0)\n            field.typicalMin = 0;\n        if (field.absoluteMin === undefined &&\n            field.absoluteMax !== undefined &&\n            storage > 0)\n            field.absoluteMin = 0;\n        if (!field.storage && field.maxBytes)\n            field.storage = field.maxBytes;\n        if (/pipe/.test(type)) {\n            packetInfo.pipeType = packetInfo.name;\n            if (pipePacket &&\n                pipePacket.name == packetInfo.name &&\n                packetInfo.kind == \"report\") ;\n            else {\n                pipePacket = packetInfo;\n            }\n        }\n        if (!field.isOptional &&\n            ((_a = packetInfo.fields[packetInfo.fields.length - 1]) === null || _a === void 0 ? void 0 : _a.isOptional)) {\n            error(`all fields after an optional field have to optional`);\n        }\n        packetInfo.fields.push(field);\n        nextModifier = undefined;\n    }\n    function startEnum(words) {\n        checkBraces(null);\n        if (words[2] != \":\" || words[4] != \"{\")\n            error(\"expecting: enum NAME : TYPE {\");\n        enumInfo = {\n            name: normalizeName(words[1]),\n            storage: normalizeStorageType(words[3])[0],\n            isFlags: words[0] == \"flags\" || undefined,\n            members: {},\n        };\n        if (info.enums[enumInfo.name])\n            error(\"enum redefinition\");\n        info.enums[enumInfo.name] = enumInfo;\n    }\n    function enumMember(words) {\n        if (words[1] != \"=\" || words.length != 3)\n            error(`expecting: FIELD_NAME = INTEGER`);\n        enumInfo.members[normalizeName(words[0])] = rangeCheck(canonicalType(enumInfo.storage), parseIntCheck(words[2]));\n    }\n    function parseIntCheck(w, allowFloat = false) {\n        try {\n            return parseIntFloat(info, w, allowFloat);\n        }\n        catch (e) {\n            error(e.message);\n            return 0;\n        }\n    }\n    function looksRandom(n) {\n        const s = n.toString(16);\n        const h = \"0123456789abcdef\";\n        for (let i = 0; i < h.length; ++i) {\n            const hh = h[i];\n            if (s.indexOf(hh + hh + hh) >= 0)\n                return false;\n        }\n        if (/f00d|dead|deaf|beef/.test(s))\n            return false;\n        return true;\n    }\n    function genRandom() {\n        for (;;) {\n            const m = (Math.random() * 268435455) | 268435456;\n            if (looksRandom(m))\n                return m;\n        }\n    }\n    function metadataMember(words) {\n        if (!((words[1] == \"=\" || words[1] == \":\") &&\n            (words[0] == \"tags\" || words.length == 3)))\n            error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`);\n        switch (words[0]) {\n            case \"extends\":\n                processInclude(words[2]);\n                break;\n            case \"class\":\n            case \"identifier\": {\n                info.classIdentifier = parseIntCheck(words[2]);\n                if (info.name != \"Control\" && info.classIdentifier == 0)\n                    info.classIdentifier = 1;\n                const gen = `how about ${toHex$1(genRandom())}`;\n                if (!(info.classIdentifier == 0 ||\n                    (268435457 <= info.classIdentifier &&\n                        info.classIdentifier <= 536870656) ||\n                    (536870913 <= info.classIdentifier &&\n                        info.classIdentifier <= 12884901632)))\n                    error(`class identifier out of range; ${gen}`);\n                if (!looksRandom(info.classIdentifier))\n                    error(`class identifier doesn't look random; ${gen}`);\n                if (usedIds[info.classIdentifier + \"\"])\n                    error(`class identifier ${toHex$1(info.classIdentifier)} already used in ${usedIds[info.classIdentifier + \"\"]}; ${gen}`);\n                break;\n            }\n            case \"camel\":\n                info.camelName = words[2];\n                break;\n            case \"short\":\n                info.shortName = words[2];\n                break;\n            case \"high\":\n                info.highCommands = !!parseIntCheck(words[2]);\n                break;\n            case \"status\":\n                if ([\"stable\", \"experimental\", \"deprecated\"].indexOf(words[2]) >\n                    -1)\n                    info.status = words[2];\n                else\n                    error(\"unknown status\");\n                break;\n            case \"group\":\n                info.group = capitalize(words.slice(2).join(\" \"));\n                break;\n            case \"tags\": {\n                const tags = words.slice(2).filter(w => w != \",\" && w != \";\");\n                info.tags = info.tags.concat(tags);\n                break;\n            }\n            default:\n                error(\"unknown metadata field: \" + words[0]);\n                break;\n        }\n    }\n    function processInclude(name) {\n        if (name == \"_system\")\n            return;\n        const inner = includes[name];\n        if (!inner)\n            return error(\"include file not found: \" + name);\n        if (info.packets.some(pkt => !pkt.derived) ||\n            values(info.enums).some(e => !e.derived))\n            error(\"extends: only allowed on top of the .md file\");\n        if (inner.errors)\n            errors = errors.concat(inner.errors);\n        const innerEnums = clone(inner.enums);\n        Object.keys(innerEnums)\n            .filter(k => !info.enums[k])\n            .forEach(k => {\n            const ie = innerEnums[k];\n            ie.derived = name;\n            info.enums[k] = ie;\n        });\n        const innerPackets = clone(inner.packets.filter(pkt => !info.packets.find(ipkt => ipkt.kind === pkt.kind &&\n            ipkt.identifier === pkt.identifier)));\n        innerPackets.forEach(pkt => (pkt.derived = name));\n        info.packets = [...info.packets, ...innerPackets];\n        if (inner.highCommands)\n            info.highCommands = true;\n        info.extends = inner.extends.concat([name]);\n    }\n    function clone(v) {\n        return JSON.parse(JSON.stringify(v));\n    }\n    function error(msg) {\n        if (!msg)\n            msg = \"syntax error\";\n        if (errors.some(e => e.line == lineNo && e.message == msg))\n            return;\n        errors.push({ file: filename, line: lineNo, message: msg });\n    }\n    function warn(msg) {\n        if (info.camelName == \"system\")\n            return; // no warnings in _system\n        if (errors.some(e => e.line == lineNo && e.message == msg))\n            return;\n        errors.push({ file: filename, line: lineNo, message: msg });\n    }\n    function normalizeName(n) {\n        if (!/^\\w+$/.test(n))\n            error(\"expecting name here\");\n        if (n.length > 31)\n            error(`name '${n}' too long`);\n        return n;\n    }\n    function normalizeStorageType(tp) {\n        if (info.enums[tp])\n            return [info.enums[tp].storage, tp, 0];\n        if (!tp)\n            error(\"expecting type here\");\n        const tp2 = tp.replace(/_t$/, \"\").toLowerCase();\n        const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2);\n        if (m) {\n            const a = parseIntCheck(m[2]);\n            const b = parseIntCheck(m[3]);\n            const len = a + b;\n            if (!(len == 8 || len == 16 || len == 32 || len == 64))\n                error(`fixed point ${tp} can't be ${len} bits`);\n            if (a == 0 && m[1] == \"i\")\n                error(`fixed point ${tp} can't be i0.X; has to be at least i1.X`);\n            return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b];\n        }\n        switch (tp2) {\n            case \"bool\":\n                return [1, tp2, 0];\n            case \"i8\":\n            case \"u8\":\n            case \"i16\":\n            case \"u16\":\n            case \"i32\":\n            case \"u32\":\n            case \"i64\":\n            case \"u64\": {\n                let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3;\n                if (tp2[0] == \"i\")\n                    sz = -sz;\n                return [sz, tp2, 0];\n            }\n            case \"f16\":\n                return [2, tp2, null];\n            case \"f32\":\n                return [4, tp2, null];\n            case \"f64\":\n                return [8, tp2, null];\n            case \"pipe\":\n                return [12, tp2, 0];\n            case \"pipe_port\":\n                return [2, tp2, 0];\n            case \"devid\":\n                return [8, tp2, 0];\n            case \"bytes\":\n            case \"string\":\n            case \"string0\":\n                return [0, tp2, 0];\n            default: {\n                const m = /^u8\\[(\\d+)\\]$/.exec(tp2);\n                if (m)\n                    return [parseIntCheck(m[1]), tp2, 0];\n                error(\"unknown type: \" + tp + \" \" + tp2);\n                return [4, tp2, 0];\n            }\n        }\n    }\n    function normalizeEncoding(unit) {\n        return (unit && encodings[unit.toLowerCase()]) || undefined;\n    }\n    function normalizeUnit(unit) {\n        if (unit === undefined || unit === null)\n            return undefined;\n        if (unitDescription[unit] || secondaryUnitConverters[unit])\n            return unit;\n        error(`expecting unit, got '${unit}'`);\n        return undefined;\n    }\n    function paddingError(iface) {\n        let byteOffset = 0;\n        for (const m of iface.fields) {\n            const sz = memberSize(m);\n            if (sz == 0)\n                continue;\n            const pad = sz > 4 ? 4 : sz;\n            if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0)\n                return `need padding of ${pad - (byteOffset % pad)} byte(s) before ${m.name}`;\n            byteOffset += sz;\n        }\n        return null;\n    }\n}\nfunction values(o) {\n    const r = [];\n    for (const k of Object.keys(o))\n        r.push(o[k]);\n    return r;\n}\nfunction toUpper(name) {\n    return name === null || name === void 0 ? void 0 : name.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b).toUpperCase();\n}\nfunction toLower(name) {\n    return name === null || name === void 0 ? void 0 : name.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b).toLowerCase();\n}\nfunction packed(iface) {\n    if (!iface.packed)\n        return \"\";\n    else\n        return \" __attribute__((packed))\";\n}\nfunction cStorage(tp) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0)\n        return \"bytes\";\n    if (tp < 0)\n        return `int${-tp * 8}_t`;\n    else\n        return `uint${tp * 8}_t`;\n}\nfunction cSharpStorage(tp) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0)\n        return \"bytes\";\n    switch (tp) {\n        case -1:\n            return \"sbyte\";\n        case 1:\n            return \"byte\";\n        case -2:\n            return \"short\";\n        case 2:\n            return \"ushort\";\n        case -4:\n            return \"int\";\n        case 4:\n            return \"uint\";\n    }\n    return `unknown({${tp})`;\n}\nfunction canonicalType(tp) {\n    if (tp == 0)\n        return \"bytes\";\n    if (tp < 0)\n        return `i${-tp * 8}`;\n    else\n        return `u${tp * 8}`;\n}\nfunction isRegister$1(k) {\n    return k == \"ro\" || k == \"rw\" || k == \"const\";\n}\nfunction toHex$1(n) {\n    if (n === undefined)\n        return \"\";\n    if (n < 0)\n        return \"-\" + toHex$1(n);\n    return \"0x\" + n.toString(16);\n}\nfunction unitPref(f) {\n    if (!f.unit)\n        return \"\";\n    else\n        return prettyUnit$1(f.unit) + \" \";\n}\nfunction prettyUnit$1(u) {\n    switch (u) {\n        case \"us\":\n            return \"μs\";\n        case \"C\":\n            return \"°C\";\n        case \"/\":\n            return \"ratio\";\n        default:\n            return u;\n    }\n}\nfunction toPython(info) {\n    const r = [\n        \"# Autogenerated file for \" + info.name,\n        `# Add missing from ... import const`,\n    ];\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\";\n    if (info.shortId[0] == \"_\")\n        pref = \"JD_\";\n    if (info.shortId[0] != \"_\")\n        r.push(`_JD_SERVICE_CLASS_${toUpper(info.shortName)} = const(${toHex$1(info.classIdentifier)})`);\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst];\n        r.push(`_JD_${toUpper(cst)} = const(${hex ? value.toString() : toHex$1(value)})\\n`);\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name);\n        for (const k of Object.keys(en.members))\n            r.push(`_${enPref}_${toUpper(k)} = const(${toHex$1(en.members[k])})`);\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived)\n            continue;\n        if (!pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\") {\n            let inner = \"CMD\";\n            if (isRegister$1(pkt.kind))\n                inner = \"REG\";\n            else if (pkt.kind == \"event\")\n                inner = \"EV\";\n            else if (pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\")\n                inner = \"PIPE\";\n            let val = toHex$1(pkt.identifier);\n            if (pkt.identifierName) {\n                // TODO find identifier and inline it\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName);\n            }\n            const name = pref + inner + \"_\" + toUpper(pkt.name);\n            if (name != val)\n                r.push(`_${name} = const(${val})`);\n        }\n    }\n    return r.join(\"\\n\");\n}\nfunction toH(info) {\n    let r = \"// Autogenerated C header file for \" + info.name + \"\\n\";\n    const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`;\n    r += `#ifndef ${hdDef}\\n`;\n    r += `#define ${hdDef} 1\\n`;\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\";\n    if (info.shortId[0] == \"_\")\n        pref = \"JD_\";\n    if (info.shortId[0] != \"_\")\n        r += `\\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex$1(info.classIdentifier)}\\n`;\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst];\n        r += `#define ${pref}${toUpper(cst)} ${hex ? toHex$1(value) : value.toString()}\\n`;\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name);\n        r += `\\n// enum ${en.name} (${cStorage(en.storage)})\\n`;\n        for (const k of Object.keys(en.members))\n            r +=\n                \"#define \" +\n                    enPref +\n                    \"_\" +\n                    toUpper(k) +\n                    \" \" +\n                    toHex$1(en.members[k]) +\n                    \"\\n\";\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived)\n            continue;\n        const cmt = addComment(pkt);\n        r += wrapComment(cmt.comment);\n        if (!pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\") {\n            let inner = \"CMD\";\n            if (isRegister$1(pkt.kind))\n                inner = \"REG\";\n            else if (pkt.kind == \"event\")\n                inner = \"EV\";\n            else if (pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\")\n                inner = \"PIPE\";\n            let val = toHex$1(pkt.identifier);\n            if (pkt.identifierName)\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName);\n            const name = pref + inner + \"_\" + toUpper(pkt.name);\n            if (name != val)\n                r += `#define ${name} ${val}\\n`;\n        }\n        const isMetaPipe = pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\";\n        if (cmt.needsStruct || isMetaPipe) {\n            let tname = \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name);\n            if (pkt.kind == \"report\")\n                tname += \"_report\";\n            r += `typedef struct ${tname} {\\n`;\n            if (isMetaPipe) {\n                r += `    uint32_t identifier; // ${toHex$1(pkt.identifier)}\\n`;\n            }\n            let unaligned = \"\";\n            for (let i = 0; i < pkt.fields.length; ++i) {\n                const f = pkt.fields[i];\n                let def = \"\";\n                const cst = cStorage(f.storage);\n                const sz = memberSize(f);\n                if (f.type == \"string\" || f.type == \"string0\")\n                    def = `char ${f.name}[${sz}]`;\n                else if (cst == \"bytes\")\n                    def = `uint8_t ${f.name}[${sz}]`;\n                else\n                    def = `${cst} ${f.name}`;\n                // if it's the last field and it start repeats, treat it as an array\n                if (f.startRepeats && i == pkt.fields.length - 1)\n                    def += \"[0]\";\n                def += \";\";\n                if (!f.isSimpleType && f.type != \"devid\")\n                    def += \"  // \" + unitPref(f) + f.type;\n                else if (f.unit)\n                    def += \" // \" + prettyUnit$1(f.unit);\n                r += \"    \" + unaligned + def + \"\\n\";\n                if (f.type == \"string0\")\n                    unaligned = \"// \";\n            }\n            r += `}${packed(pkt)} ${tname}_t;\\n\\n`;\n        }\n    }\n    r += \"\\n#endif\\n\";\n    return r;\n}\nfunction camelize(name) {\n    if (!name)\n        return name;\n    return (name[0].toLowerCase() +\n        name.slice(1).replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase()));\n}\nfunction capitalize(name) {\n    if (!name)\n        return name;\n    return name[0].toUpperCase() + name.slice(1);\n}\nfunction upperCamel(name) {\n    name = camelize(name);\n    if (!(name === null || name === void 0 ? void 0 : name.length))\n        return name;\n    return name[0].toUpperCase() + name.slice(1);\n}\nfunction snakify(name) {\n    return name === null || name === void 0 ? void 0 : name.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b);\n}\nfunction dashify(name) {\n    if (!name)\n        return name;\n    return snakify(name.replace(/^_+/, \"\"))\n        .replace(/(_|\\s)+/g, \"-\")\n        .toLowerCase();\n}\nfunction humanify(name) {\n    return name === null || name === void 0 ? void 0 : name.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b).replace(/(-|_)/g, \" \");\n}\nfunction addComment(pkt) {\n    let comment = \"\";\n    let typeInfo = \"\";\n    let needsStruct = false;\n    if (pkt.fields.length == 0) {\n        if (pkt.kind != \"event\")\n            typeInfo = \"No args\";\n    }\n    else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n        const f0 = pkt.fields[0];\n        typeInfo = cStorage(f0.storage);\n        if (!f0.isSimpleType)\n            typeInfo = f0.type + \" (\" + typeInfo + \")\";\n        typeInfo = unitPref(f0) + typeInfo;\n        if (f0.name != \"_\")\n            typeInfo = f0.name + \" \" + typeInfo;\n    }\n    else {\n        needsStruct = true;\n    }\n    if (pkt.fields.length == 1) {\n        if (isRegister$1(pkt.kind)) {\n            let info = \"\";\n            if (pkt.kind == \"ro\")\n                info = \"Read-only\";\n            else if (pkt.kind == \"const\")\n                info = \"Constant\";\n            else\n                info = \"Read-write\";\n            if (typeInfo)\n                typeInfo = info + \" \" + typeInfo;\n            else\n                typeInfo = info;\n        }\n        else if (typeInfo) {\n            typeInfo = \"Argument: \" + typeInfo;\n        }\n    }\n    if (pkt.kind == \"report\" && pkt.secondary) {\n        comment += \"Report: \" + typeInfo + \"\\n\";\n    }\n    else {\n        if (pkt.description) {\n            let desc = pkt.description.replace(/\\n\\n[^]*/, \"\");\n            if (typeInfo)\n                desc = typeInfo + \". \" + desc;\n            comment = desc + \"\\n\" + comment;\n        }\n    }\n    return {\n        comment,\n        needsStruct,\n    };\n}\nfunction wrapComment(comment) {\n    return (\"\\n/**\\n * \" +\n        comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") +\n        \"\\n */\\n\");\n}\nfunction wrapSnippet(code) {\n    if (!code)\n        return code;\n    return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`;\n}\nconst TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\";\nfunction packFormatForField(info, fld, isStatic, useBooleans) {\n    const sz = memberSize(fld);\n    const szSuff = sz ? `[${sz}]` : ``;\n    let tsType = \"number\";\n    let fmt = \"\";\n    if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n        fmt = fld.type;\n    }\n    else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n        fmt = \"b\" + szSuff;\n    }\n    else if (info.enums[fld.type]) {\n        fmt = canonicalType(info.enums[fld.type].storage);\n        tsType = upperCamel(info.camelName) + upperCamel(fld.type);\n        if (isStatic)\n            tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType;\n    }\n    else {\n        switch (fld.type) {\n            case \"string\":\n                fmt = \"s\" + szSuff;\n                tsType = \"string\";\n                break;\n            case \"bytes\":\n                fmt = \"b\" + szSuff;\n                break;\n            case \"string0\":\n                fmt = \"z\";\n                tsType = \"string\";\n                break;\n            case \"devid\":\n                fmt = \"b[8]\";\n                break;\n            case \"pipe_port\":\n                fmt = \"u16\";\n                break;\n            case \"pipe\":\n                fmt = \"b[12]\";\n                break;\n            case \"bool\":\n                // TODO native bool support\n                fmt = \"u8\";\n                if (useBooleans)\n                    tsType = \"boolean\";\n                break;\n            default:\n                return null;\n        }\n    }\n    if (tsType == \"number\" && fmt && fmt[0] == \"b\")\n        tsType = \"Buffer\";\n    return { fmt, tsType };\n}\n/**\n * Generates the format to pack/unpack a data payload for this packet\n * @param pkt\n * TODO fix this\n */\nfunction packFormat(sinfo, pkt, useBooleans) {\n    var _a;\n    if (pkt.packed || !((_a = pkt.fields) === null || _a === void 0 ? void 0 : _a.length))\n        return undefined;\n    const fmt = [];\n    for (const fld of pkt.fields) {\n        if (fld.startRepeats)\n            fmt.push(\"r:\");\n        const ff = packFormatForField(sinfo, fld, false, useBooleans);\n        if (!ff)\n            return undefined;\n        fmt.push(ff.fmt);\n    }\n    return fmt.join(\" \");\n}\nfunction packInfo(info, pkt, options) {\n    const { isStatic = false, useBooleans = false, useJDOM = false, } = options || {};\n    const { kind } = pkt;\n    const vars = [];\n    const vartp = [];\n    let fmt = \"\";\n    let repeats;\n    let reptp;\n    for (let i = 0; i < pkt.fields.length; ++i) {\n        const fld = pkt.fields[i];\n        let isArray = \"\";\n        if (fld.startRepeats) {\n            if (i == pkt.fields.length - 1) {\n                isArray = \"[]\";\n            }\n            else {\n                fmt += \"r: \";\n                repeats = [];\n                reptp = [];\n                vars.push(\"rest\");\n            }\n        }\n        const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name);\n        const f0 = packFormatForField(info, fld, isStatic, useBooleans);\n        if (!f0 || /(reserved|padding)/.test(fld.name)) {\n            if (!f0)\n                console.log(`${pkt.name}/${fld.name} - can't get format for '${fld.type}'`);\n            fmt += `x[${memberSize(fld)}] `;\n        }\n        else {\n            fmt += f0.fmt + isArray + \" \";\n            let tp = f0.tsType;\n            if (tp == \"Buffer\" && !isStatic)\n                tp = \"Uint8Array\";\n            tp += isArray;\n            if (repeats) {\n                repeats.push(varname);\n                reptp.push(tp);\n            }\n            else {\n                vars.push(varname);\n                vartp.push(tp);\n            }\n        }\n    }\n    fmt = fmt.replace(/ *$/, \"\");\n    if (reptp)\n        vartp.push(\"([\" + reptp.join(\", \") + \"])[]\");\n    const pktName = camelize(pkt.name);\n    let buffers = \"\";\n    if (useJDOM) {\n        if (kind === \"command\") {\n            for (let i = 0; i < vars.length; ++i)\n                buffers += `const ${vars[i]}: ${vartp[i]} = ...\\n`;\n            buffers += `await service.sendCmdPackedAsync(${capitalize(info.camelName)}Reg.${capitalize(pktName)}, [${vars.join(\", \")}])\\n`;\n        }\n        else if (isRegister$1(kind)) {\n            buffers +=\n                \"// get (register to REPORT_UPDATE event to enable background refresh)\\n\";\n            buffers += `const ${pktName}Reg = service.register(${capitalize(info.camelName)}Reg.${capitalize(pktName)})\\n`;\n            buffers += `const [${vars.join(\", \")}] : [${vartp.join(\", \")}] = ${pktName}Reg.unpackedValue\\n`;\n            if (kind === \"rw\") {\n                buffers += \"// set\\n\";\n                buffers += `await ${pktName}Reg.sendSetPackedAsync([${vars.join(\", \")}])\\n`;\n            }\n        }\n    }\n    else {\n        buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\", \")}]>(buf, \"${fmt}\")\\n`;\n    }\n    if (repeats)\n        buffers += `const [${repeats.join(\", \")}] = rest[0]\\n`;\n    buffers = buffers.replace(/\\n*$/, \"\");\n    return {\n        buffers,\n        names: vars,\n        types: vartp,\n    };\n}\nfunction memberSize(fld) {\n    return Math.abs(fld.storage);\n}\nfunction toTypescript(info, language) {\n    const sts = language === \"sts\";\n    const csharp = language === \"c#\";\n    const useNamespace = sts || csharp;\n    const indent = useNamespace ? \"    \" : \"\";\n    const indent2 = indent + \"    \";\n    const numberkw = csharp ? \"uint \" : \"\";\n    const hexkw = csharp ? \"byte[]\" : \"\";\n    const enumkw = csharp\n        ? indent + \"public enum\"\n        : sts\n            ? indent + \"export const enum\"\n            : \"export enum\";\n    const exportkw = csharp ? \"public\" : \"export\";\n    const cskw = csharp ? \";\" : \"\";\n    let r = useNamespace\n        ? `namespace ${csharp\n            ? capitalize(TYPESCRIPT_STATIC_NAMESPACE)\n            : TYPESCRIPT_STATIC_NAMESPACE} {\\n`\n        : \"\";\n    r += indent + \"// Service: \" + info.name + \"\\n\";\n    if (csharp) {\n        r += `${indent}public static class ${capitalize(info.camelName)}Constants\\n${indent}{\\n`;\n    }\n    if (info.shortId[0] != \"_\") {\n        const name = csharp\n            ? \"ServiceClass\"\n            : `SRV_${snakify(info.camelName).toLocaleUpperCase()}`;\n        r +=\n            indent +\n                (csharp ? indent : \"\") +\n                `${exportkw} const ${numberkw}${name} = ${toHex$1(info.classIdentifier)}${cskw}\\n`;\n    }\n    const pref = upperCamel(info.camelName);\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst];\n        r +=\n            indent +\n                (csharp ? indent : \"\") +\n                `${exportkw} const ${hex ? hexkw : numberkw}${csharp ? capitalize(camelize(cst)) : toUpper(cst)} = ${hex ? value.toString() : toHex$1(value)}${cskw}\\n`;\n    }\n    if (csharp) {\n        r += indent + `}\\n`;\n    }\n    for (const en of values(info.enums)) {\n        const enPref = pref + upperCamel(en.name);\n        r += `\\n${enumkw} ${enPref}${csharp ? `: ${cSharpStorage(en.storage)}` : \"\"} { // ${cStorage(en.storage)}\\n`;\n        for (const k of Object.keys(en.members)) {\n            if (sts)\n                r += indent2 + `//% block=\"${humanify(k).toLowerCase()}\"\\n`;\n            r += indent2 + k + \" = \" + toHex$1(en.members[k]) + \",\\n\";\n        }\n        r += indent + \"}\\n\\n\";\n    }\n    const tsEnums = {};\n    for (const pkt of info.packets) {\n        if (pkt.derived)\n            continue;\n        const cmt = addComment(pkt);\n        const pack = pkt.fields.length\n            ? packInfo(info, pkt, {\n                isStatic: sts,\n                useBooleans: false,\n            }).buffers\n            : \"\";\n        let inner = \"Cmd\";\n        if (isRegister$1(pkt.kind))\n            inner = \"Reg\";\n        else if (pkt.kind == \"event\")\n            inner = \"Event\";\n        else if (pkt.kind == \"meta_pipe_command\" ||\n            pkt.kind == \"meta_pipe_report\")\n            inner = \"PipeCmd\";\n        else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n            inner = \"info\";\n        let text = \"\";\n        let meta = \"\";\n        if (pkt.secondary || inner == \"info\") {\n            if (pack)\n                text = wrapComment(`${pkt.kind} ${upperCamel(pkt.name)}${pkt.client ? \"\" : wrapSnippet(pack)}`);\n        }\n        else {\n            const val = toHex$1(pkt.identifier);\n            if (sts && pkt.kind === \"event\") {\n                meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\\n`;\n            }\n            text = `${wrapComment(cmt.comment + (pkt.client ? \"\" : wrapSnippet(pack))) + meta}${upperCamel(pkt.name)} = ${val},\\n`;\n        }\n        if (text)\n            tsEnums[inner] = (tsEnums[inner] || \"\") + text;\n        // don't line const strings in makecode,\n        // they don't get dropped efficiently\n    }\n    for (const k of Object.keys(tsEnums)) {\n        if (k == \"info\")\n            r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\";\n        else {\n            const inner = tsEnums[k]\n                .replace(/^\\n+/, \"\")\n                .replace(/\\n$/, \"\")\n                .replace(/\\n/g, \"\\n    \" + indent);\n            r += `${enumkw} ${pref}${k} {\\n    ${indent}${inner}\\n${indent}}\\n\\n`;\n        }\n    }\n    if (useNamespace)\n        r += \"}\\n\";\n    return r.replace(/ *$/gm, \"\");\n}\nfunction generateDeviceSpecificationId(dev) {\n    return (escapeDeviceIdentifier(dev.company) +\n        \"-\" +\n        escapeDeviceNameIdentifier(dev.name) +\n        (dev.designIdentifier || \"\") +\n        (dev.version\n            ? `v${dev.version\n                .toLowerCase()\n                .replace(/^v/, \"\")\n                .replace(/\\./g, \"\")}`\n            : \"\").toLowerCase());\n}\nfunction normalizeDeviceSpecification(dev) {\n    var _a;\n    // reorder fields\n    const clone = {\n        id: generateDeviceSpecificationId(dev),\n        name: dev.name,\n        company: dev.company,\n        description: dev.description,\n        repo: dev.repo,\n        link: dev.link,\n        services: dev.services,\n        productIdentifiers: dev.productIdentifiers,\n        transport: (_a = dev.transport) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\n        tags: dev.tags,\n        firmwares: dev.firmwares,\n        version: dev.version ? dev.version.replace(/^v/, \"\") : undefined,\n        designIdentifier: dev.designIdentifier,\n    };\n    if (dev.status !== undefined)\n        clone.status = dev.status;\n    return clone;\n}\nfunction escapeDeviceIdentifier(text) {\n    if (!text)\n        text = \"\";\n    const escaped = text\n        .trim()\n        .toLowerCase()\n        .replace(/([^a-z0-9_-])+/gi, \"-\")\n        .replace(/\\./g, \"\") // routing does not like dots\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\");\n    const id = snakify(escaped);\n    return id;\n}\nfunction escapeDeviceNameIdentifier(text) {\n    return escapeDeviceIdentifier(text).replace(/-/g, \"\");\n}\nfunction converters() {\n    return {\n        json: (j) => JSON.stringify(j, null, 2),\n        c: toH,\n        ts: j => toTypescript(j, \"ts\"),\n        sts: j => toTypescript(j, \"sts\"),\n        cs: j => toTypescript(j, \"c#\"),\n        py: j => toPython(j),\n        /*\n        \"cpp\": toHPP,\n        */\n    };\n}\nfunction isNumericType(field) {\n    const tp = field.type;\n    return (!field.startRepeats &&\n        /^[uif]\\d+(\\.\\d+)?$/.test(tp) &&\n        tp != \"pipe_port\" &&\n        tp != \"bool\");\n}\n\n/**\n * Various flags to control the runtime environment\n * @category Runtime\n */\nclass Flags {\n}\n/**\n * Enables additional logging and diagnostics\n */\nFlags.diagnostics = false;\n/**\n * Trace who and what generates packets\n */\nFlags.trace = false;\n/**\n * Enables/disabled WebUSB\n */\nFlags.webUSB = true;\n/**\n * Enables/disabled WebSerial\n */\nFlags.webSerial = true;\n/**\n * Enables/disables WebBLE\n */\nFlags.webBluetooth = false;\n\nfunction throwError(msg, cancel) {\n    const e = new Error(msg);\n    if (cancel)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        e.__cancel = true;\n    throw e;\n}\nfunction isCancelError(e) {\n    var _a;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!((_a = e) === null || _a === void 0 ? void 0 : _a.__cancel);\n}\nfunction setAckError(e) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (e)\n        e.__ack = true;\n}\nfunction isAckError(e) {\n    var _a;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!((_a = e) === null || _a === void 0 ? void 0 : _a.__ack);\n}\nfunction delay(millis, value) {\n    return new Promise(resolve => setTimeout(() => resolve(value), millis));\n}\nfunction memcpy(trg, trgOff, src, srcOff, len) {\n    if (srcOff === void 0)\n        srcOff = 0;\n    if (len === void 0)\n        len = src.length - srcOff;\n    for (let i = 0; i < len; ++i)\n        trg[trgOff + i] = src[srcOff + i];\n}\nfunction strcmp(a, b) {\n    if (a == b)\n        return 0;\n    if (a < b)\n        return -1;\n    else\n        return 1;\n}\nfunction bufferEq(a, b, offset = 0) {\n    if (a == b)\n        return true;\n    if (!a || !b || a.length != b.length)\n        return false;\n    for (let i = offset; i < a.length; ++i) {\n        if (a[i] != b[i])\n            return false;\n    }\n    return true;\n}\nfunction hash(buf, bits) {\n    bits |= 0;\n    if (bits < 1)\n        return 0;\n    const h = fnv1(buf);\n    if (bits >= 32)\n        return h >>> 0;\n    else\n        return ((h ^ (h >>> bits)) & ((1 << bits) - 1)) >>> 0;\n}\nfunction idiv(a, b) {\n    return ((a | 0) / (b | 0)) | 0;\n}\nfunction fnv1(data) {\n    let h = 0x811c9dc5;\n    for (let i = 0; i < data.length; ++i) {\n        h = Math.imul(h, 0x1000193) ^ data[i];\n    }\n    return h;\n}\nfunction crc(p) {\n    let crc = 0xffff;\n    for (let i = 0; i < p.length; ++i) {\n        const data = p[i];\n        let x = (crc >> 8) ^ data;\n        x ^= x >> 4;\n        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ x;\n        crc &= 0xffff;\n    }\n    return crc;\n}\nfunction ALIGN(n) {\n    return (n + 3) & ~3;\n}\n// this will take lower 8 bits from each character\nfunction stringToUint8Array(input) {\n    const len = input.length;\n    const res = new Uint8Array(len);\n    for (let i = 0; i < len; ++i)\n        res[i] = input.charCodeAt(i) & 0xff;\n    return res;\n}\nfunction uint8ArrayToString(input) {\n    const len = input.length;\n    let res = \"\";\n    for (let i = 0; i < len; ++i)\n        res += String.fromCharCode(input[i]);\n    return res;\n}\nfunction fromUTF8(binstr) {\n    if (!binstr)\n        return \"\";\n    // escape function is deprecated\n    let escaped = \"\";\n    for (let i = 0; i < binstr.length; ++i) {\n        const k = binstr.charCodeAt(i) & 0xff;\n        if (k == 37 || k > 0x7f) {\n            escaped += \"%\" + k.toString(16);\n        }\n        else {\n            escaped += binstr.charAt(i);\n        }\n    }\n    // decodeURIComponent does the actual UTF8 decoding\n    return decodeURIComponent(escaped);\n}\nfunction toUTF8(str, cesu8) {\n    let res = \"\";\n    if (!str)\n        return res;\n    for (let i = 0; i < str.length; ++i) {\n        let code = str.charCodeAt(i);\n        if (code <= 0x7f)\n            res += str.charAt(i);\n        else if (code <= 0x7ff) {\n            res += String.fromCharCode(0xc0 | (code >> 6), 0x80 | (code & 0x3f));\n        }\n        else {\n            if (!cesu8 && 0xd800 <= code && code <= 0xdbff) {\n                const next = str.charCodeAt(++i);\n                if (!isNaN(next))\n                    code = 0x10000 + ((code - 0xd800) << 10) + (next - 0xdc00);\n            }\n            if (code <= 0xffff)\n                res += String.fromCharCode(0xe0 | (code >> 12), 0x80 | ((code >> 6) & 0x3f), 0x80 | (code & 0x3f));\n            else\n                res += String.fromCharCode(0xf0 | (code >> 18), 0x80 | ((code >> 12) & 0x3f), 0x80 | ((code >> 6) & 0x3f), 0x80 | (code & 0x3f));\n        }\n    }\n    return res;\n}\n/** @internal */\nclass PromiseBuffer {\n    constructor() {\n        this.waiting = [];\n        this.available = [];\n    }\n    drain() {\n        for (const f of this.waiting) {\n            f(new Error(\"Promise Buffer Reset\"));\n        }\n        this.waiting = [];\n        this.available = [];\n    }\n    pushError(v) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.push(v);\n    }\n    push(v) {\n        const f = this.waiting.shift();\n        if (f)\n            f(v);\n        else\n            this.available.push(v);\n    }\n    shiftAsync(timeout = 0) {\n        if (this.available.length > 0) {\n            const v = this.available.shift();\n            if (v instanceof Error)\n                return Promise.reject(v);\n            else\n                return Promise.resolve(v);\n        }\n        else\n            return new Promise((resolve, reject) => {\n                const f = (v) => {\n                    if (v instanceof Error)\n                        reject(v);\n                    else\n                        resolve(v);\n                };\n                this.waiting.push(f);\n                if (timeout > 0) {\n                    delay(timeout).then(() => {\n                        const idx = this.waiting.indexOf(f);\n                        if (idx >= 0) {\n                            this.waiting.splice(idx, 1);\n                            reject(new Error(\"Timeout\"));\n                        }\n                    });\n                }\n            });\n    }\n}\n/** @internal */\nclass PromiseQueue {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.promises = {};\n    }\n    enqueue(id, f) {\n        return new Promise((resolve, reject) => {\n            let arr = this.promises[id];\n            if (!arr) {\n                arr = this.promises[id] = [];\n            }\n            const cleanup = () => {\n                arr.shift();\n                if (arr.length == 0)\n                    delete this.promises[id];\n                else\n                    arr[0]();\n            };\n            arr.push(() => f().then(v => {\n                cleanup();\n                resolve(v);\n            }, err => {\n                cleanup();\n                reject(err);\n            }));\n            if (arr.length == 1)\n                arr[0]();\n        });\n    }\n}\nfunction rgbToHtmlColor(rgb) {\n    return `#${(\"000000\" + rgb.toString(16)).slice(-6)}`;\n}\nfunction toFullHex(n) {\n    return (\"0x\" + n.map(id => (\"000000000\" + id.toString(16)).slice(-8)).join(\"\"));\n}\nfunction toHex(bytes) {\n    if (!bytes)\n        return undefined;\n    let r = \"\";\n    for (let i = 0; i < bytes.length; ++i)\n        r += (\"0\" + bytes[i].toString(16)).slice(-2);\n    return r;\n}\nfunction fromHex(hex) {\n    const r = new Uint8Array(hex.length >> 1);\n    for (let i = 0; i < hex.length; i += 2)\n        r[i >> 1] = parseInt(hex.slice(i, i + 2), 16);\n    return r;\n}\nfunction isSet(v) {\n    return v !== null && v !== undefined;\n}\nfunction toArray(a) {\n    const r = new Array(a.length);\n    for (let i = 0; i < a.length; ++i)\n        r[i] = a[i];\n    return r;\n}\nfunction hexNum(n) {\n    if (isNaN(n))\n        return undefined;\n    if (n < 0)\n        return \"-\" + hexNum(-n);\n    return \"0x\" + n.toString(16);\n}\nfunction write32(buf, pos, v) {\n    buf[pos + 0] = (v >> 0) & 0xff;\n    buf[pos + 1] = (v >> 8) & 0xff;\n    buf[pos + 2] = (v >> 16) & 0xff;\n    buf[pos + 3] = (v >> 24) & 0xff;\n}\nfunction write16(buf, pos, v) {\n    buf[pos + 0] = (v >> 0) & 0xff;\n    buf[pos + 1] = (v >> 8) & 0xff;\n}\nfunction read32(buf, pos) {\n    return ((buf[pos] |\n        (buf[pos + 1] << 8) |\n        (buf[pos + 2] << 16) |\n        (buf[pos + 3] << 24)) >>>\n        0);\n}\nfunction read16(buf, pos) {\n    return buf[pos] | (buf[pos + 1] << 8);\n}\nfunction encodeU32LE(words) {\n    const r = new Uint8Array(words.length * 4);\n    for (let i = 0; i < words.length; ++i)\n        write32(r, i * 4, words[i]);\n    return r;\n}\nfunction decodeU32LE(buf) {\n    const res = [];\n    for (let i = 0; i < buf.length; i += 4)\n        res.push(read32(buf, i));\n    return res;\n}\nfunction isBufferEmpty(data) {\n    if (!data)\n        return true;\n    const n = data.length;\n    for (let i = 0; i < n; ++i) {\n        if (data[i])\n            return false;\n    }\n    return true;\n}\nfunction bufferToString(buf) {\n    return fromUTF8(uint8ArrayToString(buf));\n}\nfunction stringToBuffer(str) {\n    return stringToUint8Array(toUTF8(str));\n}\nfunction bufferConcat(a, b) {\n    const r = new Uint8Array(a.length + b.length);\n    r.set(a, 0);\n    r.set(b, a.length);\n    return r;\n}\nfunction bufferConcatMany(bufs) {\n    let sz = 0;\n    for (const buf of bufs)\n        sz += buf.length;\n    const r = new Uint8Array(sz);\n    sz = 0;\n    for (const buf of bufs) {\n        r.set(buf, sz);\n        sz += buf.length;\n    }\n    return r;\n}\nfunction arrayConcatMany(arrs) {\n    if (!arrs)\n        return undefined;\n    // weed out empty array\n    arrs = arrs.filter(a => !!(a === null || a === void 0 ? void 0 : a.length));\n    let sz = 0;\n    for (const buf of arrs)\n        sz += buf.length;\n    const r = new Array(sz);\n    sz = 0;\n    for (const arr of arrs) {\n        for (let i = 0; i < arr.length; ++i)\n            r[i + sz] = arr[i];\n        sz += arr.length;\n    }\n    return r;\n}\nfunction jsonCopyFrom(trg, src) {\n    const v = clone(src);\n    for (const k of Object.keys(src)) {\n        trg[k] = v[k];\n    }\n}\nfunction assert(cond, msg = \"Assertion failed\", \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndebugData) {\n    if (!cond) {\n        if (debugData)\n            console.debug(`assertion filed ${msg}`, debugData);\n        if (Flags.diagnostics)\n            // eslint-disable-next-line no-debugger\n            debugger;\n        throw new Error(msg);\n    }\n}\nfunction flatClone(obj) {\n    if (obj == null)\n        return null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const r = {};\n    Object.keys(obj).forEach(k => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        r[k] = obj[k];\n    });\n    return r;\n}\nfunction clone(v) {\n    if (v == null)\n        return null;\n    return JSON.parse(JSON.stringify(v));\n}\nfunction throttle(handler, delay) {\n    let enableCall = true;\n    return function () {\n        if (!enableCall)\n            return;\n        enableCall = false;\n        handler();\n        setTimeout(() => (enableCall = true), delay);\n    };\n}\nfunction signal() {\n    let resolve;\n    return {\n        signalled: new Promise(r => {\n            resolve = r;\n        }),\n        signal: () => resolve(true),\n    };\n}\nfunction readBlobToUint8Array(blob) {\n    if (blob === null || blob === void 0 ? void 0 : blob.arrayBuffer) {\n        return blob.arrayBuffer().then(data => new Uint8Array(data));\n    }\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            resolve(new Uint8Array(fileReader.result));\n        };\n        fileReader.onerror = e => {\n            console.log(e);\n            reject(e);\n        };\n        try {\n            fileReader.readAsArrayBuffer(blob);\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\nfunction readBlobToText(blob) {\n    if (blob.text) {\n        return blob.text();\n    }\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.onerror = e => {\n            console.log(e);\n            reject(e);\n        };\n        try {\n            fileReader.readAsText(blob);\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\nfunction debounce(handler, delay) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId;\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId);\n        }\n        timeOutId = setTimeout(async () => {\n            handler();\n        }, delay);\n    };\n}\nfunction debounceAsync(handler, delay) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId;\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId);\n        }\n        timeOutId = setTimeout(async () => {\n            await handler();\n        }, delay);\n    };\n}\nfunction JSONTryParse(src) {\n    if (src === undefined || src === null)\n        return src;\n    try {\n        return JSON.parse(src);\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nfunction roundWithPrecision(x, digits) {\n    digits = digits | 0;\n    // invalid digits input\n    if (digits <= 0)\n        return Math.round(x);\n    if (x == 0)\n        return 0;\n    let r = 0;\n    while (r == 0 && digits < 21) {\n        const d = Math.pow(10, digits++);\n        r = Math.round(x * d + Number.EPSILON) / d;\n    }\n    return r;\n}\nfunction randomRange(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n}\nfunction unique(values) {\n    return Array.from(new Set(values).keys());\n}\nfunction uniqueMap(values, id, converter) {\n    const r = {};\n    for (let i = 0; i < values.length; ++i) {\n        const value = values[i];\n        const idv = id(value);\n        if (!r[idv]) {\n            r[idv] = value;\n        }\n    }\n    return Object.values(r).map(converter);\n}\nfunction toMap(a, keyConverter, valueConverter) {\n    const m = {};\n    if (a)\n        for (let i = 0; i < a.length; ++i) {\n            const key = keyConverter(a[i], i);\n            if (key === undefined || key === null)\n                continue;\n            m[key] = valueConverter(a[i], i);\n        }\n    return m;\n}\nfunction ellipseJoin(values, maxChars, ellipse = \"...\") {\n    let r = \"\";\n    for (let i = 0; i < values.length && r.length < maxChars; ++i) {\n        if (r)\n            r += \", \";\n        r += values[i];\n    }\n    if (r.length > maxChars)\n        return r.slice(0, maxChars) + ellipse;\n    else\n        return r;\n}\nfunction arrayShuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\nfunction uniqueName(names, name, separator = \"\") {\n    if (names.indexOf(name) < 0)\n        return name;\n    // allocate names\n    let count = 2;\n    while (names.indexOf(`${name}${separator}${count}`) > -1)\n        count++;\n    return `${name}${separator}${count}`;\n}\nfunction groupBy(list, key) {\n    if (!list)\n        return {};\n    const r = {};\n    list.forEach(item => {\n        const k = key(item);\n        const a = r[k] || (r[k] = []);\n        a.push(item);\n    });\n    return r;\n}\nfunction pick(...values) {\n    return values === null || values === void 0 ? void 0 : values.find(x => x !== undefined);\n}\n/**\n * Applies filters and returns array of [yays, nays]\n * @param values\n * @param condition\n */\nfunction splitFilter(values, condition) {\n    const yays = [];\n    const nays = [];\n    const n = values.length;\n    for (let i = 0; i < n; ++i) {\n        const v = values[i];\n        if (condition(v))\n            yays.push(v);\n        else\n            nays.push(v);\n    }\n    return [yays, nays];\n}\nfunction range(end) {\n    return Array(end)\n        .fill(0)\n        .map((_, i) => i);\n}\nfunction toggleBit(data, bitindex) {\n    // find bit to flip\n    let byte = data[bitindex >> 3];\n    const bit = bitindex % 8;\n    const on = 1 === ((byte >> bit) & 1);\n    // flip bit\n    if (on) {\n        byte &= ~(1 << bit);\n    }\n    else {\n        byte |= 1 << bit;\n    }\n    // save\n    data[bitindex >> 3] = byte;\n}\n\n/** @internal */\nexports.NumberFormat = void 0;\n(function (NumberFormat) {\n    NumberFormat[NumberFormat[\"Int8LE\"] = 1] = \"Int8LE\";\n    NumberFormat[NumberFormat[\"UInt8LE\"] = 2] = \"UInt8LE\";\n    NumberFormat[NumberFormat[\"Int16LE\"] = 3] = \"Int16LE\";\n    NumberFormat[NumberFormat[\"UInt16LE\"] = 4] = \"UInt16LE\";\n    NumberFormat[NumberFormat[\"Int32LE\"] = 5] = \"Int32LE\";\n    NumberFormat[NumberFormat[\"Int8BE\"] = 6] = \"Int8BE\";\n    NumberFormat[NumberFormat[\"UInt8BE\"] = 7] = \"UInt8BE\";\n    NumberFormat[NumberFormat[\"Int16BE\"] = 8] = \"Int16BE\";\n    NumberFormat[NumberFormat[\"UInt16BE\"] = 9] = \"UInt16BE\";\n    NumberFormat[NumberFormat[\"Int32BE\"] = 10] = \"Int32BE\";\n    NumberFormat[NumberFormat[\"UInt32LE\"] = 11] = \"UInt32LE\";\n    NumberFormat[NumberFormat[\"UInt32BE\"] = 12] = \"UInt32BE\";\n    NumberFormat[NumberFormat[\"Float32LE\"] = 13] = \"Float32LE\";\n    NumberFormat[NumberFormat[\"Float64LE\"] = 14] = \"Float64LE\";\n    NumberFormat[NumberFormat[\"Float32BE\"] = 15] = \"Float32BE\";\n    NumberFormat[NumberFormat[\"Float64BE\"] = 16] = \"Float64BE\";\n    NumberFormat[NumberFormat[\"UInt64LE\"] = 17] = \"UInt64LE\";\n    NumberFormat[NumberFormat[\"UInt64BE\"] = 18] = \"UInt64BE\";\n    NumberFormat[NumberFormat[\"Int64LE\"] = 19] = \"Int64LE\";\n    NumberFormat[NumberFormat[\"Int64BE\"] = 20] = \"Int64BE\";\n})(exports.NumberFormat || (exports.NumberFormat = {}));\nfunction fmtInfoCore(fmt) {\n    switch (fmt) {\n        case exports.NumberFormat.Int8LE:\n            return -1;\n        case exports.NumberFormat.UInt8LE:\n            return 1;\n        case exports.NumberFormat.Int16LE:\n            return -2;\n        case exports.NumberFormat.UInt16LE:\n            return 2;\n        case exports.NumberFormat.Int32LE:\n            return -4;\n        case exports.NumberFormat.UInt32LE:\n            return 4;\n        case exports.NumberFormat.Int64LE:\n            return -8;\n        case exports.NumberFormat.UInt64LE:\n            return 8;\n        case exports.NumberFormat.Int8BE:\n            return -10;\n        case exports.NumberFormat.UInt8BE:\n            return 10;\n        case exports.NumberFormat.Int16BE:\n            return -20;\n        case exports.NumberFormat.UInt16BE:\n            return 20;\n        case exports.NumberFormat.Int32BE:\n            return -40;\n        case exports.NumberFormat.UInt32BE:\n            return 40;\n        case exports.NumberFormat.Int64BE:\n            return -80;\n        case exports.NumberFormat.UInt64BE:\n            return 80;\n        case exports.NumberFormat.Float32LE:\n            return 4;\n        case exports.NumberFormat.Float32BE:\n            return 40;\n        case exports.NumberFormat.Float64LE:\n            return 8;\n        case exports.NumberFormat.Float64BE:\n            return 80;\n        default:\n            throw new Error(\"unknown format\");\n    }\n}\nfunction fmtInfo(fmt) {\n    let size = fmtInfoCore(fmt);\n    let signed = false;\n    if (size < 0) {\n        signed = true;\n        size = -size;\n    }\n    let swap = false;\n    if (size >= 10) {\n        swap = true;\n        size /= 10;\n    }\n    let isFloat = false;\n    switch (fmt) {\n        case exports.NumberFormat.Float32LE:\n        case exports.NumberFormat.Float32BE:\n        case exports.NumberFormat.Float64LE:\n        case exports.NumberFormat.Float64BE:\n            isFloat = true;\n            break;\n    }\n    return { size, signed, swap, isFloat };\n}\n/**\n * Get the size in bytes of specified number format.\n */\nfunction sizeOfNumberFormat(format) {\n    switch (format) {\n        case exports.NumberFormat.Int8LE:\n        case exports.NumberFormat.UInt8LE:\n        case exports.NumberFormat.Int8BE:\n        case exports.NumberFormat.UInt8BE:\n            return 1;\n        case exports.NumberFormat.Int16LE:\n        case exports.NumberFormat.UInt16LE:\n        case exports.NumberFormat.Int16BE:\n        case exports.NumberFormat.UInt16BE:\n            return 2;\n        case exports.NumberFormat.Int32LE:\n        case exports.NumberFormat.Int32BE:\n        case exports.NumberFormat.UInt32BE:\n        case exports.NumberFormat.UInt32LE:\n        case exports.NumberFormat.Float32BE:\n        case exports.NumberFormat.Float32LE:\n            return 4;\n        case exports.NumberFormat.UInt64BE:\n        case exports.NumberFormat.Int64BE:\n        case exports.NumberFormat.UInt64LE:\n        case exports.NumberFormat.Int64LE:\n        case exports.NumberFormat.Float64BE:\n        case exports.NumberFormat.Float64LE:\n            return 8;\n    }\n    return 0;\n}\nfunction getNumber(buf, fmt, offset) {\n    switch (fmt) {\n        case exports.NumberFormat.UInt8BE:\n        case exports.NumberFormat.UInt8LE:\n            return buf[offset];\n        case exports.NumberFormat.Int8BE:\n        case exports.NumberFormat.Int8LE:\n            return (buf[offset] << 24) >> 24;\n        case exports.NumberFormat.UInt16LE:\n            return read16(buf, offset);\n        case exports.NumberFormat.Int16LE:\n            return (read16(buf, offset) << 16) >> 16;\n        case exports.NumberFormat.UInt32LE:\n            return read32(buf, offset);\n        case exports.NumberFormat.Int32LE:\n            return read32(buf, offset) >> 0;\n        case exports.NumberFormat.UInt64LE:\n            return read32(buf, offset) + read32(buf, offset + 4) * 0x100000000;\n        case exports.NumberFormat.Int64LE:\n            return (read32(buf, offset) +\n                (read32(buf, offset + 4) >> 0) * 0x100000000);\n        default: {\n            const inf = fmtInfo(fmt);\n            if (inf.isFloat) {\n                const arr = new Uint8Array(inf.size);\n                for (let i = 0; i < inf.size; ++i) {\n                    arr[i] = buf[offset + i];\n                }\n                if (inf.swap)\n                    arr.reverse();\n                if (inf.size == 4)\n                    return new Float32Array(arr.buffer)[0];\n                else\n                    return new Float64Array(arr.buffer)[0];\n            }\n            throw new Error(\"unsupported fmt:\" + fmt);\n        }\n    }\n}\nfunction setNumber(buf, fmt, offset, r) {\n    const inf = fmtInfo(fmt);\n    if (inf.isFloat) {\n        const arr = new Uint8Array(inf.size);\n        if (inf.size == 4)\n            new Float32Array(arr.buffer)[0] = r;\n        else\n            new Float64Array(arr.buffer)[0] = r;\n        if (inf.swap)\n            arr.reverse();\n        for (let i = 0; i < inf.size; ++i) {\n            buf[offset + i] = arr[i];\n        }\n        return;\n    }\n    for (let i = 0; i < inf.size; ++i) {\n        const off = !inf.swap ? offset + i : offset + inf.size - i - 1;\n        buf[off] = r & 0xff;\n        r >>= 8;\n    }\n}\nfunction uintOfBuffer(data) {\n    let fmt;\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = exports.NumberFormat.UInt8LE;\n            break;\n        case 2:\n        case 3:\n            fmt = exports.NumberFormat.UInt16LE;\n            break;\n        default:\n            fmt = exports.NumberFormat.UInt32LE;\n            break;\n    }\n    return getNumber(data, fmt, 0);\n}\nfunction intOfBuffer(data) {\n    let fmt;\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = exports.NumberFormat.Int8LE;\n            break;\n        case 2:\n        case 3:\n            fmt = exports.NumberFormat.Int16LE;\n            break;\n        default:\n            fmt = exports.NumberFormat.Int32LE;\n            break;\n    }\n    return getNumber(data, fmt, 0);\n}\nfunction bufferToArray(data, fmt) {\n    const res = [];\n    const sz = sizeOfNumberFormat(fmt);\n    for (let off = 0; off <= data.length - sz; off += sz)\n        res.push(getNumber(data, fmt, off));\n    return res;\n}\nfunction concatBufferArray(chunks) {\n    let sz = 0;\n    for (const ch of chunks)\n        sz += ch.length;\n    const r = new Uint8Array(sz);\n    sz = 0;\n    for (const ch of chunks) {\n        r.set(ch, sz);\n        sz += ch.length;\n    }\n    return r;\n}\n\nvar serviceSpecificationData = [\n\t{\n\t\tname: \"Common registers and commands\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"_system\",\n\t\tcamelName: \"system\",\n\t\tshortName: \"system\",\n\t\t\"extends\": [\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"This file describes common register and command codes.\\n\\nThese are defined in ranges separate from the per-service ones.\\nNo service actually derives from this file, but services can include packets\\ndefined here.\\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\",\n\t\t\tcommands: \"Command codes are subdivided as follows:\\n* Commands `0x000-0x07f` - common to all services\\n* Commands `0x080-0xeff` - defined per-service\\n* Commands `0xf00-0xfff` - reserved for implementation\\n\\nCommands follow.\",\n\t\t\tregisters: \"Register codes are subdivided as follows:\\n* Registers `0x001-0x07f` - r/w common to all services\\n* Registers `0x080-0x0ff` - r/w defined per-service\\n* Registers `0x100-0x17f` - r/o common to all services\\n* Registers `0x180-0x1ff` - r/o defined per-service\\n* Registers `0x200-0xeff` - custom, defined per-service\\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\\n\\nThe types listed are typical. Check spec for particular service for exact type,\\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\\nAll registers default to `0` unless otherwise indicated.\",\n\t\t\tevents: \"Events codes are 8-bit and are subdivided as follows:\\n* Events `0x00-0x7f` - common to all services\\n* Events `0x80-0xff` - defined per-service\"\n\t\t},\n\t\tclassIdentifier: 536870897,\n\t\tenums: {\n\t\t\tReadingThreshold: {\n\t\t\t\tname: \"ReadingThreshold\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tNeutral: 1,\n\t\t\t\t\tInactive: 2,\n\t\t\t\t\tActive: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\tStatusCodes: {\n\t\t\t\tname: \"StatusCodes\",\n\t\t\t\tstorage: 2,\n\t\t\t\tmembers: {\n\t\t\t\t\tReady: 0,\n\t\t\t\t\tInitializing: 1,\n\t\t\t\t\tCalibrating: 2,\n\t\t\t\t\tSleeping: 3,\n\t\t\t\t\tWaitingForInput: 4,\n\t\t\t\t\tCalibrationNeeded: 100\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t\tannounce_interval: {\n\t\t\t\tvalue: 500,\n\t\t\t\thex: false\n\t\t\t}\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"announce\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Enumeration data for control service; service-specific advertisement data otherwise.\\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"announce\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Enumeration data for control service; service-specific advertisement data otherwise.\\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tsecondary: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"get_register\",\n\t\t\t\tidentifier: 4096,\n\t\t\t\tdescription: \"Registers number `N` is fetched by issuing command `0x1000 | N`.\\nThe report format is the same as the format of the register.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"get_register\",\n\t\t\t\tidentifier: 4096,\n\t\t\t\tdescription: \"Registers number `N` is fetched by issuing command `0x1000 | N`.\\nThe report format is the same as the format of the register.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tsecondary: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_register\",\n\t\t\t\tidentifier: 8192,\n\t\t\t\tdescription: \"Registers number `N` is set by issuing command `0x2000 | N`, with the format\\nthe same as the format of the register.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"event\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Event from sensor or a broadcast service.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"event_id\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"event_argument\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32 u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Request to calibrate a sensor. The report indicates the calibration is done.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Request to calibrate a sensor. The report indicates the calibration is done.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tsecondary: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"intensity\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"value\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"The primary value of actuator (eg. servo pulse length, or motor duty cycle).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_value\",\n\t\t\t\tidentifier: 272,\n\t\t\t\tdescription: \"The lowest value that can be reported for the value register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_value\",\n\t\t\t\tidentifier: 273,\n\t\t\t\tdescription: \"The highest value that can be reported for the value register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_power\",\n\t\t\t\tidentifier: 7,\n\t\t\t\tdescription: \"Limit the power drawn by the service, in mA.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 500,\n\t\t\t\t\t\ttypicalMax: 500,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"reading\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Read-only value of the sensor, also reported in streaming.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_reading\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"The lowest value that can be reported by the sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_reading\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"The highest value that can be reported by the sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"reading_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\\nsend a report in the same frame of the ``reading`` report.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"reading_resolution\",\n\t\t\t\tidentifier: 264,\n\t\t\t\tdescription: \"Smallest, yet distinguishable change in reading.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"inactive_threshold\",\n\t\t\t\tidentifier: 5,\n\t\t\t\tdescription: \"Threshold when reading data gets inactive and triggers a ``inactive``.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"active_threshold\",\n\t\t\t\tidentifier: 6,\n\t\t\t\tdescription: \"Thresholds when reading data gets active and triggers a ``active`` event.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The hardware variant of the service.\\nFor services which support this, there's an enum defining the meaning.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"StatusCodes\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"active\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Notifies that the service has been activated (eg. button pressed, network connected, etc.)\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"inactive\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Notifies that the service has been dis-activated.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"change\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Notifies that the some state of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"StatusCodes\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"neutral\",\n\t\t\t\tidentifier: 7,\n\t\t\t\tdescription: \"Notifies that the threshold is back between ``low`` and ``high``.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Base service\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"_base\",\n\t\tcamelName: \"base\",\n\t\tshortName: \"base\",\n\t\t\"extends\": [\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Base class for all services.\"\n\t\t},\n\t\tclassIdentifier: 536870899,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Sensor\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"_sensor\",\n\t\tcamelName: \"sensor\",\n\t\tshortName: \"sensor\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Base class for sensors.\"\n\t\t},\n\t\tclassIdentifier: 536870898,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Accelerometer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"accelerometer\",\n\t\tcamelName: \"accelerometer\",\n\t\tshortName: \"accelerometer\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A 3-axis accelerometer.\",\n\t\t\tlong: \"## Orientation\\n\\nAn accelerometer module should translate acceleration values as follows:\\n\\n| Orientation           \\t| X value (g) \\t| Y value (g) \\t| Z value (g) \\t|\\n|-----------------------\\t|-------------\\t|-------------\\t|-------------\\t|\\n| Module lying flat     \\t| 0           \\t| 0           \\t| -1          \\t|\\n| Module on left edge   \\t| -1          \\t| 0           \\t| 0           \\t|\\n| Module on bottom edge \\t| 0           \\t| 1           \\t| 0           \\t|\\n\\nWe recommend an orientation marking on the PCB so that users can mount modules without having to experiment with the device. Left/bottom can be determined by assuming text on silk runs left-to-right.\",\n\t\t\tevents: \"All events are debounced.\"\n\t\t},\n\t\tclassIdentifier: 521405449,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"forces\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates the current forces acting on accelerometer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"z\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i12.20 i12.20 i12.20\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"forces_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reading value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"i12.20\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_force\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Configures the range forces detected.\\nRead-back after setting to get current value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"i12.20\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"tilt_up\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Emitted when accelerometer is tilted in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"tilt_down\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Emitted when accelerometer is tilted in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"tilt_left\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Emitted when accelerometer is tilted in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"tilt_right\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Emitted when accelerometer is tilted in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"face_up\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"Emitted when accelerometer is laying flat in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"face_down\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"Emitted when accelerometer is laying flat in the given direction.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"freefall\",\n\t\t\t\tidentifier: 135,\n\t\t\t\tdescription: \"Emitted when total force acting on accelerometer is much less than 1g.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"shake\",\n\t\t\t\tidentifier: 139,\n\t\t\t\tdescription: \"Emitted when forces change violently a few times.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"force_2g\",\n\t\t\t\tidentifier: 140,\n\t\t\t\tdescription: \"Emitted when force in any direction exceeds given threshold.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"force_3g\",\n\t\t\t\tidentifier: 136,\n\t\t\t\tdescription: \"Emitted when force in any direction exceeds given threshold.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"force_6g\",\n\t\t\t\tidentifier: 137,\n\t\t\t\tdescription: \"Emitted when force in any direction exceeds given threshold.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"force_8g\",\n\t\t\t\tidentifier: 138,\n\t\t\t\tdescription: \"Emitted when force in any direction exceeds given threshold.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\"\n\t\t],\n\t\tgroup: \"Movement\"\n\t},\n\t{\n\t\tname: \"Arcade Gamepad\",\n\t\tstatus: \"deprecated\",\n\t\tshortId: \"arcadegamepad\",\n\t\tcamelName: \"arcadeGamepad\",\n\t\tshortName: \"arcadeGamepad\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"This service is deprecated in favor or `joystick`; it is currently used by the micro:bit Arcade smart shield though.\\nA gamepad with direction and action buttons for one player.\\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers.\"\n\t\t},\n\t\tclassIdentifier: 501915758,\n\t\tenums: {\n\t\t\tButton: {\n\t\t\t\tname: \"Button\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLeft: 1,\n\t\t\t\t\tUp: 2,\n\t\t\t\t\tRight: 3,\n\t\t\t\t\tDown: 4,\n\t\t\t\t\tA: 5,\n\t\t\t\t\tB: 6,\n\t\t\t\t\tMenu: 7,\n\t\t\t\t\tSelect: 8,\n\t\t\t\t\tReset: 9,\n\t\t\t\t\tExit: 10\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"buttons\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates which buttons are currently active (pressed).\\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"button\",\n\t\t\t\t\t\ttype: \"Button\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"pressure\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"r: u8 u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"available_buttons\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Indicates number of players supported and which buttons are present on the controller.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"button\",\n\t\t\t\t\t\ttype: \"Button\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"r: u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"down\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when button goes from inactive to active.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"button\",\n\t\t\t\t\t\ttype: \"Button\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"up\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when button goes from active to inactive.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"button\",\n\t\t\t\t\t\ttype: \"Button\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Arcade sound\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"arcadesound\",\n\t\tcamelName: \"arcadeSound\",\n\t\tshortName: \"arcadeSound\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sound playing device.\\n\\nThis is typically run over an SPI connection, not regular single-wire JACDAC.\"\n\t\t},\n\t\tclassIdentifier: 533083654,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"play\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Play samples, which are single channel, signed 16-bit little endian values.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"samples\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"sample_rate\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get or set playback sample rate (in samples per second).\\nIf you set it, read it back, as the value may be rounded up or down.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"Hz\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tdefaultValue: 44100\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"buffer_size\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"The size of the internal audio buffer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"buffer_pending\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"How much data is still left in the buffer to play.\\nClients should not send more data than `buffer_size - buffer_pending`,\\nbut can keep the `buffer_pending` as low as they want to ensure low latency\\nof audio playback.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Azure IoT Hub Health\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"azureiothubhealth\",\n\t\tcamelName: \"azureIotHubHealth\",\n\t\tshortName: \"azureIotHubHealth\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Health and diagnostics information about the Azure Iot Hub connection.\"\n\t\t},\n\t\tclassIdentifier: 342028028,\n\t\tenums: {\n\t\t\tConnectionStatus: {\n\t\t\t\tname: \"ConnectionStatus\",\n\t\t\t\tstorage: 2,\n\t\t\t\tmembers: {\n\t\t\t\t\tConnected: 1,\n\t\t\t\t\tDisconnected: 2,\n\t\t\t\t\tConnecting: 3,\n\t\t\t\t\tDisconnecting: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"hub_name\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"hub_device_id\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Device identifier in Azure Iot Hub\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"connection_status\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"ConnectionStatus\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"connect\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Starts a connection to the IoT hub service\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"disconnect\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Starts disconnecting from the IoT hub service\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_connection_string\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"Restricted command to override the existing connection string to the Azure IoT Hub.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"connection_string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\trestricted: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"connection_status_change\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Raised when the connection status changes\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"connection_status\",\n\t\t\t\t\t\ttype: \"ConnectionStatus\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Iot\"\n\t},\n\t{\n\t\tname: \"Barcode reader\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"barcodereader\",\n\t\tcamelName: \"barcodeReader\",\n\t\tshortName: \"barcodeReader\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector).\"\n\t\t},\n\t\tclassIdentifier: 477339244,\n\t\tenums: {\n\t\t\tFormat: {\n\t\t\t\tname: \"Format\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tAztec: 1,\n\t\t\t\t\tCode128: 2,\n\t\t\t\t\tCode39: 3,\n\t\t\t\t\tCode93: 4,\n\t\t\t\t\tCodabar: 5,\n\t\t\t\t\tDataMatrix: 6,\n\t\t\t\t\tEan13: 8,\n\t\t\t\t\tEan8: 9,\n\t\t\t\t\tITF: 10,\n\t\t\t\t\tPdf417: 11,\n\t\t\t\t\tQrCode: 12,\n\t\t\t\t\tUpcA: 13,\n\t\t\t\t\tUpcE: 14\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turns on or off the detection of barcodes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"formats\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"format\",\n\t\t\t\t\t\ttype: \"Format\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"r: u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"detect\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"format\",\n\t\t\t\t\t\ttype: \"Format\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\",\n\t\t\t\tpackFormat: \"u8 s\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Barometer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"barometer\",\n\t\tcamelName: \"barometer\",\n\t\tshortName: \"barometer\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor measuring air pressure of outside environment.\",\n\t\t\tregisters: \"Default streaming interval is 1s.\"\n\t\t},\n\t\tclassIdentifier: 504462570,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"pressure\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The air pressure.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"hPa\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tabsoluteMin: 300,\n\t\t\t\t\t\tabsoluteMax: 1100,\n\t\t\t\t\t\ttypicalMin: 940,\n\t\t\t\t\t\ttypicalMax: 1040\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 60000,\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"pressure_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"hPa\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"bit:radio\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"bitradio\",\n\t\tcamelName: \"bitRadio\",\n\t\tshortName: \"bitRadio\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Support for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices.\"\n\t\t},\n\t\tclassIdentifier: 449414863,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turns on/off the radio antenna.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"group\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Group used to filter packets\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"transmission_power\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Antenna power to increase or decrease range.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 6,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 7\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"frequency_band\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Change the transmission and reception band of the radio to the given channel.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 7,\n\t\t\t\t\t\tabsoluteMax: 83,\n\t\t\t\t\t\tabsoluteMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send_string\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Sends a string payload as a radio message, maximum 18 characters.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send_number\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Sends a double precision number payload as a radio message\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\tisFloat: true,\n\t\t\t\t\t\ttype: \"f64\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"f64\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send_value\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Sends a double precision number and a name payload as a radio message\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\tisFloat: true,\n\t\t\t\t\t\ttype: \"f64\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"f64 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send_buffer\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Sends a payload of bytes as a radio message\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"string_received\",\n\t\t\t\tidentifier: 144,\n\t\t\t\tdescription: \"Raised when a string packet is received\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_serial_number\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"rssi\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8[1]\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32 u32 i8 b[1] s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"number_received\",\n\t\t\t\tidentifier: 145,\n\t\t\t\tdescription: \"Raised when a number packet is received\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_serial_number\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"rssi\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8[3]\",\n\t\t\t\t\t\tstorage: 3\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\tisFloat: true,\n\t\t\t\t\t\ttype: \"f64\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32 u32 i8 b[3] f64 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"buffer_received\",\n\t\t\t\tidentifier: 146,\n\t\t\t\tdescription: \"Raised when a buffer packet is received\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_serial_number\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"rssi\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8[1]\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32 u32 i8 b[1] b\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Bootloader\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"bootloader\",\n\t\tcamelName: \"bootloader\",\n\t\tshortName: \"bootloader\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Allows flashing (reprogramming) devices over Jacdac.\"\n\t\t},\n\t\tclassIdentifier: 536516936,\n\t\tenums: {\n\t\t\t\"Error\": {\n\t\t\t\tname: \"Error\",\n\t\t\t\tstorage: 4,\n\t\t\t\tmembers: {\n\t\t\t\t\tNoError: 0,\n\t\t\t\t\tPacketTooSmall: 1,\n\t\t\t\t\tOutOfFlashableRange: 2,\n\t\t\t\t\tInvalidPageOffset: 3,\n\t\t\t\t\tNotPageAligned: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"info\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\\nthat \\\"fits\\\" this device.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"announce\",\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"info\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\\nthat \\\"fits\\\" this device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_size\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"flashable_size\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"product_identifer\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"u32 u32 u32 u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_session\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The flashing server should generate a random id, and use this command to set it.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"session_id\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"set_session\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The flashing server should generate a random id, and use this command to set it.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"session_id\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"page_data\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\\nand is included in response.\\nOnly the last chunk causes writing to flash and elicits response.\\n\\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_address\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_offset\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"chunk_no\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"chunk_max\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"session_id\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved0\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved1\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved2\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved3\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 208,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tmaxBytes: 208\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"u32 u16 u8 u8 u32 u32 u32 u32 u32 b[208]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"page_data\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\\nand is included in response.\\nOnly the last chunk causes writing to flash and elicits response.\\n\\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"session_id\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_error\",\n\t\t\t\t\t\ttype: \"Error\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"page_address\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"u32 u32 u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Button\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"button\",\n\t\tcamelName: \"button\",\n\t\tshortName: \"button\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A push-button, which returns to inactive position when not operated anymore.\"\n\t\t},\n\t\tclassIdentifier: 343122531,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"pressure\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates the pressure state of the button, where ``0`` is open.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlowLevel: true,\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"analog\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Indicates if the button provides analog ``pressure`` readings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"pressed\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Determines if the button is pressed currently.\\n\\nIf the event ``down`` is observed, ``pressed`` is true; if ``up`` or ``hold`` are observed, ``pressed`` is false.\\nTo initialize, wait for any event or timeout to ``pressed`` is true after 750ms (1.5x hold time).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tclient: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"down\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when button goes from inactive to active.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"up\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when button goes from active to inactive. The 'time' parameter \\nrecords the amount of time between the down and up events.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"hold\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Emitted when the press time is greater than 500ms, and then at least every 500ms \\nas long as the button remains pressed. The 'time' parameter records the the amount of time\\nthat the button has been held (since the down event).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\",\n\t\t\t\"padauk\"\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Buzzer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"buzzer\",\n\t\tcamelName: \"buzzer\",\n\t\tshortName: \"buzzer\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A simple buzzer.\"\n\t\t},\n\t\tclassIdentifier: 458731991,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"volume\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"The volume (duty cycle) of the buzzer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"play_tone\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Play a PWM tone with given period and duty for given duration.\\nThe duty is scaled down with `volume` register.\\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\\nto send `P = 1000000 / F` and `D = P * V / 2`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"period\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"duty\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"duration\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlowLevel: true,\n\t\t\t\tpackFormat: \"u16 u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"play_note\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Play a note at the given frequency and volume.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"frequency\",\n\t\t\t\t\t\tunit: \"Hz\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"volume\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"duration\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tclient: true,\n\t\t\t\tpackFormat: \"u16 u0.16 u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"Capacitive Button\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"capacitivebutton\",\n\t\tcamelName: \"capacitiveButton\",\n\t\tshortName: \"capacitiveButton\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A configuration service for a capacitive push-button.\"\n\t\t},\n\t\tclassIdentifier: 677752265,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"threshold\",\n\t\t\t\tidentifier: 6,\n\t\t\t\tdescription: \"Indicates the threshold for ``up`` events.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active_threshold\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \\nThe report indicates the calibration is done.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"calibrate\",\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \\nThe report indicates the calibration is done.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tsecondary: true\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Character Screen\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"characterscreen\",\n\t\tcamelName: \"characterScreen\",\n\t\tshortName: \"characterScreen\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A screen that displays characters.\"\n\t\t},\n\t\tclassIdentifier: 523748714,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLCD: 1,\n\t\t\t\t\tOLED: 2,\n\t\t\t\t\tBraille: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\tTextDirection: {\n\t\t\t\tname: \"TextDirection\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLeftToRight: 1,\n\t\t\t\t\tRightToLeft: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"message\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Text to show. Use `\\\\n` to break lines.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlowLevel: true,\n\t\t\t\tidentifierName: \"value\",\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Brightness of the screen. `0` means off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describes the type of character LED screen.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"text_direction\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Specifies the RTL or LTR direction of the text.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"TextDirection\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"rows\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Gets the number of rows.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"columns\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Gets the number of columns.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_line\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Overrides the content of a single line at a 0-based index.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Clears all text from the display.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Display\"\n\t},\n\t{\n\t\tname: \"CODAL Message Bus\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"codalmessagebus\",\n\t\tcamelName: \"codalMessageBus\",\n\t\tshortName: \"codalMessageBus\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A service that uses the [CODAL message bus](https://lancaster-university.github.io/microbit-docs/ubit/messageBus/) to send and receive small messages.\\n\\nYou can find known values for `source` in [CODAL repository](https://github.com/lancaster-university/codal-core/blob/master/inc/core/CodalComponent.h)\\nIn MakeCode, you can listen for custom `source`, `value` values using [control.onEvent](https://makecode.microbit.org/reference/control/on-event].\"\n\t\t},\n\t\tclassIdentifier: 304085021,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"source\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"message\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Raised by the server is triggered by the server. The filtering logic of which event to send over JACDAC is up to the server implementation.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"source\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Color\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"color\",\n\t\tcamelName: \"color\",\n\t\tshortName: \"color\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Senses RGB colors\"\n\t\t},\n\t\tclassIdentifier: 372299111,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"color\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Detected color in the RGB color space.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"red\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"green\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"blue\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16 u0.16 u0.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Imaging\"\n\t},\n\t{\n\t\tname: \"Compass\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"compass\",\n\t\tcamelName: \"compass\",\n\t\tshortName: \"compass\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that measures the heading.\"\n\t\t},\n\t\tclassIdentifier: 364362175,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"heading\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The heading with respect to the magnetic north.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 359\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turn on or off the sensor. Turning on the sensor may start a calibration sequence.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"heading_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the heading reading\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Starts a calibration sequence for the compass.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"calibrate\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Control\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"control\",\n\t\tcamelName: \"control\",\n\t\tshortName: \"control\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Control service is always service index `0`.\\nIt handles actions common to all services on a device.\\n\\nNote: some of the optional features (including `flood_ping`, `mcu_temperature`, and all string registers)\\nare not implemented in `8bit` version.\"\n\t\t},\n\t\tclassIdentifier: 0,\n\t\tenums: {\n\t\t\tAnnounceFlags: {\n\t\t\t\tname: \"AnnounceFlags\",\n\t\t\t\tstorage: 2,\n\t\t\t\tisFlags: true,\n\t\t\t\tmembers: {\n\t\t\t\t\tRestartCounterSteady: 15,\n\t\t\t\t\tRestartCounter1: 1,\n\t\t\t\t\tRestartCounter2: 2,\n\t\t\t\t\tRestartCounter4: 4,\n\t\t\t\t\tRestartCounter8: 8,\n\t\t\t\t\tStatusLightNone: 0,\n\t\t\t\t\tStatusLightMono: 16,\n\t\t\t\t\tStatusLightRgbNoFade: 32,\n\t\t\t\t\tStatusLightRgbFade: 48,\n\t\t\t\t\tSupportsACK: 256,\n\t\t\t\t\tSupportsBroadcast: 512,\n\t\t\t\t\tSupportsFrames: 1024,\n\t\t\t\t\tIsClient: 2048\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"services\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\\nIf this number ever goes down, it indicates that the device restarted.\\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\\nskipped in this enumeration).\\n`packet_count` indicates the number of packets sent by the current device since last announce,\\nincluding the current announce packet (it is always 0 if this feature is not supported).\\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"announce\",\n\t\t\t\thasReport: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"services\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\\nIf this number ever goes down, it indicates that the device restarted.\\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\\nskipped in this enumeration).\\n`packet_count` indicates the number of packets sent by the current device since last announce,\\nincluding the current announce packet (it is always 0 if this feature is not supported).\\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"flags\",\n\t\t\t\t\t\ttype: \"AnnounceFlags\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"packet_count\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"u16 u8 u8 r: u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"noop\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Do nothing. Always ignored. Can be used to test ACKs.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"identify\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light. \\nFor devices with status light (this can be discovered in the announce flags), the client should\\nsend the sequence of status light command to generate the identify animation.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\toptional: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"reset\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Reset device. ACK may or may not be sent.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\toptional: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"flood_ping\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"num_responses\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"start_counter\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"size\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"u32 u32 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"flood_ping\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"counter\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dummy_payload\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"u32 b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_status_light\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Initiates a color transition of the status light from its current color to the one specified.\\nThe transition will complete in about `512 / speed` frames\\n(each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\\nAs a special case, if speed is `0` the transition is immediate.\\nIf MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\\nIf a monochrome LEDs is fitted, the average value of ``red``, ``green``, ``blue`` is used.\\nIf intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\\non, and `0` (for all three channels) should be considered off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_red\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_green\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_blue\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"speed\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 u8 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"proxy\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"Force client device into proxy mode.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\toptional: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"reset_in\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"When set to value other than `0`, it asks the device to reset after specified number of microseconds.\\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\\nsay 1.6s every 0.5s.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"device_description\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"product_identifier\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"A numeric code for the string above; used to identify firmware images and devices.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 805306368,\n\t\t\t\t\t\tabsoluteMax: 1073741823\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"bootloader_product_identifier\",\n\t\t\t\tidentifier: 388,\n\t\t\t\tdescription: \"Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 805306368,\n\t\t\t\t\t\tabsoluteMax: 1073741823\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"firmware_version\",\n\t\t\t\tidentifier: 389,\n\t\t\t\tdescription: \"A string describing firmware version; typically semver.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"mcu_temperature\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"MCU temperature in degrees Celsius (approximate).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: -10,\n\t\t\t\t\t\ttypicalMax: 150\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tpreferredInterval: 60000,\n\t\t\t\tpackFormat: \"i16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"uptime\",\n\t\t\t\tidentifier: 390,\n\t\t\t\tdescription: \"Number of microseconds since boot.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u64\",\n\t\t\t\t\t\tstorage: 8,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tpreferredInterval: 60000,\n\t\t\t\tpackFormat: \"u64\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Dimmer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"dimmer\",\n\t\tcamelName: \"dimmer\",\n\t\tshortName: \"dimmer\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A light or fan controller that dims the current on a line.\"\n\t\t},\n\t\tclassIdentifier: 531637829,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLight: 1,\n\t\t\t\t\tFan: 2,\n\t\t\t\t\tPump: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"intensity\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"The intensity of the current. Set to ``0`` to turn off completely the current.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical device\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Distance\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"distance\",\n\t\tcamelName: \"distance\",\n\t\tshortName: \"distance\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that determines the distance of an object without any physical contact involved.\"\n\t\t},\n\t\tclassIdentifier: 337275786,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tUltrasonic: 1,\n\t\t\t\t\tInfrared: 2,\n\t\t\t\t\tLiDAR: 3,\n\t\t\t\t\tLaser: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"distance\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Current distance from the object\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMin: 0.02,\n\t\t\t\t\t\ttypicalMax: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_range\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Minimum measurable distance\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_range\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Maximum measurable distance\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Determines the type of sensor used.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"DMX\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"dmx\",\n\t\tcamelName: \"dmx\",\n\t\tshortName: \"dmx\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512.\"\n\t\t},\n\t\tclassIdentifier: 298814469,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Determines if the DMX bridge is active\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Send a DMX packet, up to 236bytes long, including the start code.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channels\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Dot Matrix\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"dotmatrix\",\n\t\tcamelName: \"dotMatrix\",\n\t\tshortName: \"dotMatrix\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A rectangular dot matrix display, made of monochrome LEDs or Braille pins.\"\n\t\t},\n\t\tclassIdentifier: 286070091,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLED: 1,\n\t\t\t\t\tBraille: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"dots\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"The state of the screen where dot on/off state is\\nstored as a bit, column by column. The column should be byte aligned.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"value\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"rows\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Number of rows on the screen\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"columns\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"Number of columns on the screen\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describes the type of matrix used.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Display\"\n\t},\n\t{\n\t\tname: \"Equivalent CO₂\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"eco2\",\n\t\tcamelName: \"eCO2\",\n\t\tshortName: \"eCO2\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Measures equivalent CO₂ levels.\"\n\t\t},\n\t\tclassIdentifier: 379362758,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tVOC: 1,\n\t\t\t\t\tNDIR: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"e_CO2\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Equivalent CO₂ (eCO₂) readings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppm\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMin: 400,\n\t\t\t\t\t\ttypicalMax: 8192\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"e_CO2_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reading value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppm\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_e_CO2\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Minimum measurable value\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppm\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_e_CO2\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Minimum measurable value\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppm\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"conditioning_period\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Time required to achieve good sensor stability before measuring after long idle period.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"s\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Type of physical sensor and capabilities.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Flex\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"flex\",\n\t\tcamelName: \"flex\",\n\t\tshortName: \"flex\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A bending or deflection sensor.\"\n\t\t},\n\t\tclassIdentifier: 524797638,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tLinear22Inch: 1,\n\t\t\t\t\tLinear45Inch: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"bending\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The relative position of the slider.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Specifies the physical layout of the flex sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Slider\"\n\t},\n\t{\n\t\tname: \"Gyroscope\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"gyroscope\",\n\t\tcamelName: \"gyroscope\",\n\t\tshortName: \"gyroscope\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A 3-axis gyroscope.\"\n\t\t},\n\t\tclassIdentifier: 505087730,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"rotation_rates\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates the current forces acting on accelerometer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"°/s\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"°/s\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"z\",\n\t\t\t\t\t\tunit: \"°/s\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i12.20 i12.20 i12.20\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"rotation_rates_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reading value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°/s\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"i12.20\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_rate\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Configures the range of range of rotation rates.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°/s\",\n\t\t\t\t\t\tshift: 20,\n\t\t\t\t\t\ttype: \"i12.20\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"i12.20\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Movement\"\n\t},\n\t{\n\t\tname: \"Heart Rate\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"heartrate\",\n\t\tcamelName: \"heartRate\",\n\t\tshortName: \"heartRate\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor approximating the heart rate. \\n\\n\\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\"\n\t\t},\n\t\tclassIdentifier: 376204740,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tFinger: 1,\n\t\t\t\t\tChest: 2,\n\t\t\t\t\tWrist: 3,\n\t\t\t\t\tPump: 4,\n\t\t\t\t\tWebCam: 5\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"heart_rate\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The estimated heart rate.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"bpm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMin: 30,\n\t\t\t\t\t\ttypicalMax: 200\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"heart_rate_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The estimated error on the reported sensor data.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"bpm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical sensor\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Biometric\"\n\t},\n\t{\n\t\tname: \"HID Adapter\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"hidadapter\",\n\t\tcamelName: \"hidAdapter\",\n\t\tshortName: \"hidAdapter\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A service for configuring how Jacdac device map to HID input events. Users can have multiple configurations and swap between them by writing to `current_configuration`.\"\n\t\t},\n\t\tclassIdentifier: 509040821,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"num_configurations\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"The number of configurations stored on the server.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"current_configuration\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The current configuration the server is using.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"get_configuration\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"results\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"configuration_number\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"get_configuration\",\n\t\t\t\tpackFormat: \"b[12] u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"configuration\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"configuration_number\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"binding_index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8[2]\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"u64\",\n\t\t\t\t\t\tstorage: 8,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"trigger_value\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"trigger_context\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"selector\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"modifiers\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"get_configuration\",\n\t\t\t\tpackFormat: \"u8 u8 b[2] u64 u32 u32 u8 u8 u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_binding\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Stores the given binding on the server. If a binding exists at this index, the new binding will replace it.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"configuration_number\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"binding_index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8[2]\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"u64\",\n\t\t\t\t\t\tstorage: 8,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"trigger_value\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"trigger_context\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"selector\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"modifiers\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 u8 b[2] u64 u32 u32 u8 u8 u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear_binding\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Clears a specific binding stored on the device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"configuration_number\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"binding_index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear_configuration\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Clears a specific configuration stored on the device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"configuration_number\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"Clears all configurations and bindings stored on the device.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"changed\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Event that notifies clients that the server has swapped to a new configuration or changed key bindings.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"HID Keyboard\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"hidkeyboard\",\n\t\tcamelName: \"hidKeyboard\",\n\t\tshortName: \"hidKeyboard\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Control a HID keyboard. \\n\\nThe codes for the key (selectors) is defined in the [HID Keyboard\\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\\nModifiers are in page 87.\\n\\nThe device keeps tracks of the key state and is able to clear it all with the clear command.\"\n\t\t},\n\t\tclassIdentifier: 414210922,\n\t\tenums: {\n\t\t\tModifiers: {\n\t\t\t\tname: \"Modifiers\",\n\t\t\t\tstorage: 1,\n\t\t\t\tisFlags: true,\n\t\t\t\tmembers: {\n\t\t\t\t\tNone: 0,\n\t\t\t\t\tLeftControl: 1,\n\t\t\t\t\tLeftShift: 2,\n\t\t\t\t\tLeftAlt: 4,\n\t\t\t\t\tLeftGUI: 8,\n\t\t\t\t\tRightControl: 16,\n\t\t\t\t\tRightShift: 32,\n\t\t\t\t\tRightAlt: 64,\n\t\t\t\t\tRightGUI: 128\n\t\t\t\t}\n\t\t\t},\n\t\t\tAction: {\n\t\t\t\tname: \"Action\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tPress: 0,\n\t\t\t\t\tUp: 1,\n\t\t\t\t\tDown: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"key\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Presses a key or a sequence of keys down.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"selector\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"modifiers\",\n\t\t\t\t\t\ttype: \"Modifiers\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"action\",\n\t\t\t\t\t\ttype: \"Action\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlowLevel: true,\n\t\t\t\tpackFormat: \"r: u16 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Clears all pressed keys.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"HID Mouse\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"hidmouse\",\n\t\tcamelName: \"hidMouse\",\n\t\tshortName: \"hidMouse\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Controls a HID mouse.\"\n\t\t},\n\t\tclassIdentifier: 411425820,\n\t\tenums: {\n\t\t\tButton: {\n\t\t\t\tname: \"Button\",\n\t\t\t\tstorage: 2,\n\t\t\t\tisFlags: true,\n\t\t\t\tmembers: {\n\t\t\t\t\tLeft: 1,\n\t\t\t\t\tRight: 2,\n\t\t\t\t\tMiddle: 4\n\t\t\t\t}\n\t\t\t},\n\t\t\tButtonEvent: {\n\t\t\t\tname: \"ButtonEvent\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tUp: 1,\n\t\t\t\t\tDown: 2,\n\t\t\t\t\tClick: 3,\n\t\t\t\t\tDoubleClick: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_button\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Sets the up/down state of one or more buttons.\\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"buttons\",\n\t\t\t\t\t\ttype: \"Button\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"event\",\n\t\t\t\t\t\ttype: \"ButtonEvent\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"move\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Moves the mouse by the distance specified.\\nIf the time is positive, it specifies how long to make the move.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dx\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dy\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16 i16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"wheel\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Turns the wheel up or down. Positive if scrolling up.\\nIf the time is positive, it specifies how long to make the move.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dy\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"time\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16 u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Humidity\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"humidity\",\n\t\tcamelName: \"humidity\",\n\t\tshortName: \"humidity\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor measuring humidity of outside environment.\",\n\t\t\tregisters: \"Default streaming interval is 1s.\"\n\t\t},\n\t\tclassIdentifier: 382210232,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"humidity\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The relative humidity in percentage of full water saturation.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%RH\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMax: 100,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 5000,\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"humidity_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%RH\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_humidity\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Lowest humidity that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%RH\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tdefaultValue: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_humidity\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Highest humidity that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%RH\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tdefaultValue: 100\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Illuminance\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"illuminance\",\n\t\tcamelName: \"illuminance\",\n\t\tshortName: \"illuminance\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Detects the amount of light falling onto a given surface area.\\n\\nNote that this is different from *luminance*, the amount of light that passes through, emits from, or reflects off an object.\"\n\t\t},\n\t\tclassIdentifier: 510577394,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"light\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The amount of illuminance, as lumens per square metre.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"lux\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMax: 100000,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"light_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reported sensor value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"lux\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\",\n\t\t\t\"padauk\"\n\t\t],\n\t\tgroup: \"Imaging\"\n\t},\n\t{\n\t\tname: \"Indexed screen\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"indexedscreen\",\n\t\tcamelName: \"indexedScreen\",\n\t\tshortName: \"indexedScreen\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A screen with indexed colors.\\n\\nThis is often run over an SPI connection, not regular single-wire JACDAC.\"\n\t\t},\n\t\tclassIdentifier: 385496805,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"start_update\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Sets the update window for subsequent `set_pixels` commands.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"width\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"height\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16 u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_pixels\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Set pixels in current window, according to current palette.\\nEach \\\"line\\\" of data is aligned to a byte.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"pixels\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Set backlight brightness.\\nIf set to `0` the display may go to sleep.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"palette\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"The current palette.\\nThe color entry repeats `1 << bits_per_pixel` times.\\nThis register may be write-only.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"blue\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"green\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"red\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"padding\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"r: u8 u8 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"bits_per_pixel\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Determines the number of palette entries.\\nTypical values are 1, 2, 4, or 8.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"bit\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"width\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Screen width in \\\"natural\\\" orientation.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"height\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"Screen height in \\\"natural\\\" orientation.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"width_major\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"If true, consecutive pixels in the \\\"width\\\" direction are sent next to each other (this is typical for graphics cards).\\nIf false, consecutive pixels in the \\\"height\\\" direction are sent next to each other.\\nFor embedded screen controllers, this is typically true iff `width < height`\\n(in other words, it's only true for portrait orientation screens).\\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\\nThis is independent of the `rotation` register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"up_sampling\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\\nTypical values are 1 and 2.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"px\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rotation\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Possible values are 0, 90, 180 and 270 only.\\nWrite to this register do not affect `width` and `height` registers,\\nand may be ignored by some screens.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Infrastructure\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"infrastructure\",\n\t\tcamelName: \"infrastructure\",\n\t\tshortName: \"infrastructure\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A service that tags a device as purely infrastructure device.\\n\\n\\nA Jacdac user interface can ignore any device that hosts this service.\"\n\t\t},\n\t\tclassIdentifier: 504728043,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Joystick\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"joystick\",\n\t\tcamelName: \"joystick\",\n\t\tshortName: \"joystick\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A two axis directional joystick\"\n\t\t},\n\t\tclassIdentifier: 277836886,\n\t\tenums: {\n\t\t\tButtons: {\n\t\t\t\tname: \"Buttons\",\n\t\t\t\tstorage: 4,\n\t\t\t\tisFlags: true,\n\t\t\t\tmembers: {\n\t\t\t\t\tLeft: 1,\n\t\t\t\t\tUp: 2,\n\t\t\t\t\tRight: 4,\n\t\t\t\t\tDown: 8,\n\t\t\t\t\tA: 16,\n\t\t\t\t\tB: 32,\n\t\t\t\t\tMenu: 64,\n\t\t\t\t\tSelect: 128,\n\t\t\t\t\tReset: 256,\n\t\t\t\t\tExit: 512,\n\t\t\t\t\tX: 1024,\n\t\t\t\t\tY: 2048\n\t\t\t\t}\n\t\t\t},\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tThumb: 1,\n\t\t\t\t\tArcadeBall: 2,\n\t\t\t\t\tArcadeStick: 3,\n\t\t\t\t\tGamepad: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"direction\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"If the joystick is analog, the directional buttons should be \\\"simulated\\\", based on joystick position\\n(`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\\nIf the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\\nThe primary button on the joystick is `A`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"buttons\",\n\t\t\t\t\t\ttype: \"Buttons\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 15,\n\t\t\t\t\t\ttype: \"i1.15\",\n\t\t\t\t\t\tstorage: -2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 15,\n\t\t\t\t\t\ttype: \"i1.15\",\n\t\t\t\t\t\tstorage: -2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u32 i1.15 i1.15\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical joystick.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"buttons_available\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Indicates a bitmask of the buttons that are mounted on the joystick.\\nIf the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\\nEven when marked as not available, they will still be simulated based on the analog joystick.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Buttons\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"buttons_changed\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Emitted whenever the state of buttons changes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"buttons\",\n\t\t\t\t\t\ttype: \"Buttons\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\",\n\t\t\t\"padauk\"\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"LED\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"led\",\n\t\tcamelName: \"led\",\n\t\tshortName: \"led\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A controller for 1 or more monochrome or RGB LEDs connected in parallel.\"\n\t\t},\n\t\tclassIdentifier: 506480888,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tThroughHole: 1,\n\t\t\t\t\tSMD: 2,\n\t\t\t\t\tPower: 3,\n\t\t\t\t\tBead: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"animate\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"This has the same semantics as `set_status_light` in the control service.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_red\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_green\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"to_blue\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"speed\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 u8 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"color\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"The current color of the LED.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"red\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"green\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"blue\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_power\",\n\t\t\t\tidentifier: 7,\n\t\t\t\tdescription: \"Limit the power drawn by the light-strip (and controller).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_power\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"led_count\",\n\t\t\t\tidentifier: 387,\n\t\t\t\tdescription: \"If known, specifies the number of LEDs in parallel on this device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"wave_length\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"If monochrome LED, specifies the wave length of the LED.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"nm\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: 365,\n\t\t\t\t\t\ttypicalMax: 885\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"luminous_intensity\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"The luminous intensity of the LED, at full value, in micro candella.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mcd\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: 10,\n\t\t\t\t\t\ttypicalMax: 5000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The physical type of LED.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\",\n\t\t\t\"padauk\"\n\t\t],\n\t\tgroup: \"Light\"\n\t},\n\t{\n\t\tname: \"LED Pixel\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"ledpixel\",\n\t\tcamelName: \"ledPixel\",\n\t\tshortName: \"ledPixel\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A controller for strips of individually controlled RGB LEDs.\",\n\t\t\tlong: \"## Light programs\\n\\nRealistically, with 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\\ninstallations and it would completely clog the network.\\n\\nThus, light service defines a domain-specific language for describing light animations\\nand efficiently transmitting them over wire.\\n\\nLight commands are not Jacdac commands.\\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\\nof `run` command.\\n\\nDefinitions:\\n* `P` - position in the strip\\n* `R` - number of repetitions of the command\\n* `N` - number of pixels affected by the command\\n* `C` - single color designation\\n* `C+` - sequence of color designations\\n\\nUpdate modes:\\n* `0` - replace\\n* `1` - add RGB\\n* `2` - subtract RGB\\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\\n\\nProgram commands:\\n* `0xD0: setall C+` - set all pixels in current range to given color pattern\\n* `0xD1: fade C+` - set pixels in current range to colors between colors in sequence\\n* `0xD2: fadehsv C+` - similar to `fade()`, but colors are specified and faded in HSV\\n* `0xD3: rotfwd K` - rotate (shift) pixels by `K` positions away from the connector\\n* `0xD4: rotback K` - same, but towards the connector\\n* `0xD5: show M=50` - send buffer to strip and wait `M` milliseconds\\n* `0xD6: range P=0 N=length W=1 S=0` - range from pixel `P`, `N` pixels long\\n  (currently unsupported: every `W` pixels skip `S` pixels)\\n* `0xD7: mode K=0` - set update mode\\n* `0xD8: tmpmode K=0` - set update mode for next command only\\n* `0xCF: setone P C` - set one pixel at `P` (in current range) to given color\\n* `mult V` - macro to multiply current range by given value (float)\\n\\nA number `k` is encoded as follows:\\n* `0 <= k < 128` -> `k`\\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\\n* bigger and negative numbers are not supported\\n\\nThus, bytes `0xC0-0xFF` are free to use for commands.\\n\\nFormats:\\n* `0xC1, R, G, B` - single color parameter\\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\\n* `0xCF, <number>, R, G, B` - `set1` special format\\n\\nCommands are encoded as command byte, followed by parameters in the order\\nfrom the command definition.\\n\\nThe `setone()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\\nnumber, and followed by 3 bytes of color.\"\n\t\t},\n\t\tclassIdentifier: 309264608,\n\t\tenums: {\n\t\t\tLightType: {\n\t\t\t\tname: \"LightType\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tWS2812B_GRB: 0,\n\t\t\t\t\tAPA102: 16,\n\t\t\t\t\tSK9822: 17\n\t\t\t\t}\n\t\t\t},\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tStrip: 1,\n\t\t\t\t\tRing: 2,\n\t\t\t\t\tStick: 3,\n\t\t\t\t\tJewel: 4,\n\t\t\t\t\tMatrix: 5\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Set the luminosity of the strip.\\nAt `0` the power to the strip is completely shut down.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 0.05\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"actual_brightness\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"This is the luminosity actually applied to the strip.\\nMay be lower than `brightness` if power-limited by the `max_power` register.\\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"light_type\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Specifies the type of light strip connected to controller.\\nControllers which are sold with lights should default to the correct type\\nand could not allow change.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"LightType\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"num_pixels\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Specifies the number of pixels in the strip.\\nControllers which are sold with lights should default to the correct length\\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 15\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"num_columns\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_power\",\n\t\t\t\tidentifier: 7,\n\t\t\t\tdescription: \"Limit the power drawn by the light-strip (and controller).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 200\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"max_power\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_pixels\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"The maximum supported number of pixels.\\nAll writes to `num_pixels` are clamped to `max_pixels`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"num_repeats\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"How many times to repeat the program passed in `run` command.\\nShould be set before the `run` command.\\nSetting to `0` means to repeat forever.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Specifies the shape of the light strip.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"run\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Run the given light \\\"program\\\". See service description for details.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"program\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\"\n\t\t],\n\t\tgroup: \"Light\"\n\t},\n\t{\n\t\tname: \"Light level\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"lightlevel\",\n\t\tcamelName: \"lightLevel\",\n\t\tshortName: \"lightLevel\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that measures luminosity level.\"\n\t\t},\n\t\tclassIdentifier: 400333340,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tPhotoResistor: 1,\n\t\t\t\t\tLEDMatrix: 2,\n\t\t\t\t\tAmbient: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"light_level\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Detect light level\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\",\n\t\t\t\"padauk\"\n\t\t],\n\t\tgroup: \"Imaging\"\n\t},\n\t{\n\t\tname: \"Logger\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"logger\",\n\t\tcamelName: \"logger\",\n\t\tshortName: \"logger\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A service which can report messages to the bus.\"\n\t\t},\n\t\tclassIdentifier: 316415946,\n\t\tenums: {\n\t\t\tPriority: {\n\t\t\t\tname: \"Priority\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tDebug: 0,\n\t\t\t\t\tLog: 1,\n\t\t\t\t\tWarning: 2,\n\t\t\t\t\t\"Error\": 3,\n\t\t\t\t\tSilent: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"min_priority\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Messages with level lower than this won't be emitted. The default setting may vary.\\nLoggers should revert this to their default setting if the register has not been\\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\\nThus, clients should write this register every 1000ms and ignore messages which are\\ntoo verbose for them.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Priority\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"debug\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Report a message.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"log\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Report a message.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"warn\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Report a message.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"error\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Report a message.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"message\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Magnetometer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"magnetomer\",\n\t\tcamelName: \"magnetometer\",\n\t\tshortName: \"magnetometer\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A 3-axis magnetometer.\"\n\t\t},\n\t\tclassIdentifier: 318935176,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"forces\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates the current magnetic field on magnetometer.\\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"nT\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"nT\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"z\",\n\t\t\t\t\t\tunit: \"nT\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i32 i32 i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"forces_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the readings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"nT\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Forces a calibration sequence where the user/device\\nmight have to rotate to be calibrated.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"calibrate\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Matrix Keypad\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"matrixkeypad\",\n\t\tcamelName: \"matrixKeypad\",\n\t\tshortName: \"matrixKeypad\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A matrix of buttons connected as a keypad\"\n\t\t},\n\t\tclassIdentifier: 319172040,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tMembrane: 1,\n\t\t\t\t\tKeyboard: 2,\n\t\t\t\t\tElastomer: 3,\n\t\t\t\t\tElastomerLEDPixel: 4\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"pressed\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\\n``row = index / columns``, ``column = index % columns``.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"index\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"r: u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"rows\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Number of rows in the matrix\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"columns\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Number of columns in the matrix\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"labels\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"The characters printed on the keys if any, in indexing sequence.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"label\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"r: z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical keypad. If the variant is ``ElastomerLEDPixel``\\nand the next service on the device is a ``LEDPixel`` service, it is considered\\nas the service controlling the LED pixel on the keypad.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"down\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"up\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"click\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Emitted together with `up` when the press time was not longer than 500ms.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"long_click\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Emitted together with `up` when the press time was more than 500ms.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Microphone\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"microphone\",\n\t\tcamelName: \"microphone\",\n\t\tshortName: \"microphone\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A single-channel microphone.\"\n\t\t},\n\t\tclassIdentifier: 289254534,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"sample\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The samples will be streamed back over the `samples` pipe.\\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\\nOtherwise the specified number of samples is streamed.\\nSamples are sent as `i16`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"samples\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"num_samples\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"sample\",\n\t\t\t\tpackFormat: \"b[12] u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"sampling_period\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get or set microphone sampling period.\\nSampling rate is `1_000_000 / sampling_period Hz`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"MIDI output\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"midioutput\",\n\t\tcamelName: \"midiOutput\",\n\t\tshortName: \"midiOutput\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A MIDI output device.\"\n\t\t},\n\t\tclassIdentifier: 444894423,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Opens or closes the port to the MIDI device\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Clears any pending send data that has not yet been sent from the MIDIOutput's queue.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"send\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Enqueues the message to be sent to the corresponding MIDI port\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"Model Runner\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"modelrunner\",\n\t\tcamelName: \"modelRunner\",\n\t\tshortName: \"modelRunner\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Runs machine learning models.\\n\\nOnly models with a single input tensor and a single output tensor are supported at the moment.\\nInput is provided by Sensor Aggregator service on the same device.\\nMultiple instances of this service may be present, if more than one model format is supported by a device.\"\n\t\t},\n\t\tclassIdentifier: 336566904,\n\t\tenums: {\n\t\t\tModelFormat: {\n\t\t\t\tname: \"ModelFormat\",\n\t\t\t\tstorage: 4,\n\t\t\t\tmembers: {\n\t\t\t\t\tTFLite: 860636756,\n\t\t\t\t\tML4F: 809963362,\n\t\t\t\t\tEdgeImpulseCompiled: 810961221\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_model\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Open pipe for streaming in the model. The size of the model has to be declared upfront.\\nThe model is streamed over regular pipe data packets.\\nThe format supported by this instance of the service is specified in `format` register.\\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"model_size\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"set_model\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Open pipe for streaming in the model. The size of the model has to be declared upfront.\\nThe model is streamed over regular pipe data packets.\\nThe format supported by this instance of the service is specified in `format` register.\\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"model_port\",\n\t\t\t\t\t\ttype: \"pipe_port\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpipeType: \"set_model\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"predict\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\\nand results are send over the `outputs` pipe.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"outputs\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"predict\",\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"predict\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\\nand results are send over the `outputs` pipe.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"inputs\",\n\t\t\t\t\t\ttype: \"pipe_port\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpipeType: \"predict\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"auto_invoke_every\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\\nThe `outputs` register will stream its value after each run.\\nThis register is not stored in flash.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"outputs\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Results of last model invocation as `float32` array.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"output\",\n\t\t\t\t\t\tisFloat: true,\n\t\t\t\t\t\ttype: \"f32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"r: f32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"input_shape\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"The shape of the input tensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dimension\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"r: u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"output_shape\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"The shape of the output tensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"dimension\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"r: u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"last_run_time\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"The time consumed in last model execution.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"allocated_arena_size\",\n\t\t\t\tidentifier: 387,\n\t\t\t\tdescription: \"Number of RAM bytes allocated for model execution.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"model_size\",\n\t\t\t\tidentifier: 388,\n\t\t\t\tdescription: \"The size of the model in bytes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"last_error\",\n\t\t\t\tidentifier: 389,\n\t\t\t\tdescription: \"Textual description of last error when running or loading model (if any).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"format\",\n\t\t\t\tidentifier: 390,\n\t\t\t\tdescription: \"The type of ML models supported by this service.\\n`TFLite` is flatbuffer `.tflite` file.\\n`ML4F` is compiled machine code model for Cortex-M4F.\\nThe format is typically present as first or second little endian word of model file.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"ModelFormat\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"format_version\",\n\t\t\t\tidentifier: 391,\n\t\t\t\tdescription: \"A version number for the format.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"parallel\",\n\t\t\t\tidentifier: 392,\n\t\t\t\tdescription: \"If present and true this service can run models independently of other\\ninstances of this service on the device.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Motion\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"motion\",\n\t\tcamelName: \"motion\",\n\t\tshortName: \"motion\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor, typically PIR, that detects object motion within a certain range\"\n\t\t},\n\t\tclassIdentifier: 293185353,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tPIR: 1\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"moving\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Reports is movement is currently detected by the sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_distance\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Maximum distance where objects can be detected.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"angle\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Opening of the field of view\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Type of physical sensor\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"movement\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"A movement was detected.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Movement\"\n\t},\n\t{\n\t\tname: \"Motor\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"motor\",\n\t\tcamelName: \"motor\",\n\t\tshortName: \"motor\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A bi-directional DC motor.\"\n\t\t},\n\t\tclassIdentifier: 385895640,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"duty\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \\nwhile ``enabled`` acts as brake.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 15,\n\t\t\t\t\t\ttype: \"i1.15\",\n\t\t\t\t\t\tstorage: -2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"value\",\n\t\t\t\tpackFormat: \"i1.15\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turn the power to the motor on/off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"load_torque\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Torque required to produce the rated power of an electrical motor at load speed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg/cm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"load_speed\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Revolutions per minute of the motor under full load.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"rpm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Multitouch\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"multitouch\",\n\t\tcamelName: \"multitouch\",\n\t\tshortName: \"multitouch\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A capacitive touch sensor with multiple inputs.\",\n\t\t\tevents: \"Most events include the channel number of the input.\"\n\t\t},\n\t\tclassIdentifier: 416636459,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"capacity\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\\nno touch, wheres a value of around `100` or more indicates touch.\\nIt's best to ignore this (unless debugging), and use events.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"capacitance\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"r: i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"touch\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when an input is touched.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channel\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"release\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when an input is no longer touched.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channel\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\",\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"tap\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Emitted when an input is briefly touched. TODO Not implemented.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channel\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"long_press\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Emitted when an input is touched for longer than 500ms. TODO Not implemented.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channel\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"swipe_pos\",\n\t\t\t\tidentifier: 144,\n\t\t\t\tdescription: \"Emitted when input channels are successively touched in order of increasing channel numbers.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"swipe_neg\",\n\t\t\t\tidentifier: 145,\n\t\t\t\tdescription: \"Emitted when input channels are successively touched in order of decreasing channel numbers.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Potentiometer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"potentiometer\",\n\t\tcamelName: \"potentiometer\",\n\t\tshortName: \"potentiometer\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A slider or rotary potentiometer.\"\n\t\t},\n\t\tclassIdentifier: 522667846,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tSlider: 1,\n\t\t\t\t\tRotary: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"position\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The relative position of the slider.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Specifies the physical layout of the potentiometer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Slider\"\n\t},\n\t{\n\t\tname: \"Power\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"power\",\n\t\tcamelName: \"power\",\n\t\tshortName: \"power\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A power-provider service.\",\n\t\t\tlong: \"## Power negotiation protocol\\n\\nThe purpose of the power negotiation is to ensure that there is no more than ~900mA\\ndelivered to the power rail.\\nThis is realized by limiting the number of enabled power provider services to one.\\n\\nNote, that it's also possible to have low-current power providers,\\nwhich are limited to 100mA and do not run a power provider service.\\nThese are **not** accounted for in the power negotiation protocol.\\n\\nPower providers can have multiple _channels_, typically multiple Jacdac ports on the provider.\\nEach channel can be limited to 900mA separately.\\nIn normal operation, the data lines of each channels are connected together.\\nThe ground lines are always connected together.\\nMulti-channel power providers are also called _powered hubs_.\\n\\nWhile channels have separate current limits, there's nothing to prevent the user\\nfrom joining two or more channels outside of the provider using a passive hub.\\nThis would allow more than 900mA of current to be drawn, resulting in cables or components\\ngetting hot and/or malfunctioning.\\nThus, the power negotiation protocol seeks to detect situations where\\nmultiple channels of power provider(s) are bridged together\\nand shut down all but one of the channels involved.\\n\\nThe protocol is built around the power providers periodically sending specially crafted\\n`shutdown` commands in broadcast mode.\\nNote that this is unusual - services typically only send reports.\\n\\nThe `shutdown` commands can be reliably identified based on their first half (more details below).\\nWhen a power provider starts receiving a `shutdown` command, it needs to take\\nsteps to identify which of its channels the command is coming from.\\nThis is typically realized with analog switches between data lines of channels.\\nThe channel which received the `shutdown` command is then shut down.\\nNote that in the case a single-channel provider any received `shutdown` command will cause a shut down.\\n\\nA multi-channel provider needs to also identify when a `shutdown` command it sent from one channel\\nis received on any of its other channels and shut down one of the involved channels.\\n\\nIt is also possible to build a _data bridge_ device, with two or more ports.\\nIt passes through all data except for `shutdown` commands,\\nbut **does not** connect the power lines.\\n\\n### Protocol details\\n\\nThe `shutdown` commands follow a very narrow format:\\n* they need to be the only packet in the frame (and thus we can also call them `shutdown` frames)\\n* the second word of `device_id` needs to be set to `0xAA_AA_AA_AA` (alternating 0 and 1)\\n* the service index is set to `0x3d`\\n* the CRC is therefore fixed\\n* therefore, the packet can be recognized by reading the first 8 bytes (total length is 16 bytes)\\n\\nThe exact byte structure of `shutdown` command is:\\n`15 59 04 05 5A C9 A4 1F AA AA AA AA 00 3D 80 00`\\n\\nThere is one power service per channel.\\nA multi-channel power provider can be implemented as one device with multiple services (typically with one MCU),\\nor many devices with one service each (typically multiple MCUs).\\nThe first option is preferred as it fixes the order of channels,\\nbut the second option may be cheaper to implement.\\n\\nAfter queuing a `shutdown` command, the service enters a grace period\\nuntil the report has been sent on the wire.\\nDuring the grace period incoming `shutdown` commands are ignored.\\n\\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\\n  sends the first `shutdown` command\\n* Every enabled power service emits `shutdown` commands every 400-600ms (random; first few packets can be even sent more often)\\n* If an enabled power service sees a `shutdown` command from somebody else,\\n  it disables itself (unless in grace period)\\n* If a disabled power service sees no `shutdown` command for more than ~1200ms, it enables itself\\n  (this is when the previous power source is unplugged or otherwise malfunctions)\\n* If a power service has been disabled for around 10s, it enables itself.\\n\\nAdditionally:\\n* While the `allowed` register is set to `0`, the service will not enable itself (nor send `shutdown` commands)\\n* When a current overdraw is detected, the service stop providing power and enters `Overload` state for around 2 seconds,\\n  while still sending `shutdown` commands.\\n\\n### Client notes\\n\\nIf a client hears a `shutdown` command it just means it's on a branch of the\\nnetwork with a (high) power provider.\\nAs clients (brains) typically do not consume much current (as opposed to, say, servos),\\nthe `shutdown` commands are typically irrelevant to them.\\n\\nFor power monitoring, the `power_status_changed` event (and possibly `power_status` register)\\ncan be used.\\nIn particular, user interfaces may alert the user to `Overload` status.\\nThe `Overprovision` status is generally considered normal (eg. when two multi-channel power providers are linked together).\\n\\n### Server implementation notes\\n\\n#### An MCU per channel\\n\\nEvery channel has:\\n* a cheap 8-bit MCU (eg., PMS150C)\\n* a current limiter with latching circuit\\n* an analog switch\\n\\nThe MCU is connected to data line of the channel.\\nThe switch joins the data line of the channel with internal data bus, common to all channels.\\nBoth the switch and the limiter are controlled by the MCU.\\nThe latching circuit on the limiter shuts it down immediately on current overdraw.\\n\\nDuring reception, after the beginning of `shutdown` frame is detected,\\nthe switch is opened for a brief period.\\nIf the `shutdown` frame is received correctly, it means it was on MCU's channel.\\n\\n#### A dedicated MCU for multiple channels\\n\\nEvery channel has:\\n* a current limiter with latching circuit\\n* an analog switch\\n* a wiggle-detection line connecting the MCU to data line of the channel\\n\\nThe MCU here needs at least 4 pins per channel.\\nSwitches and limiters are set up like in the configuration above.\\nThe Jacdac data line of the MCU is connected to internal data bus.\\n\\nWhile a Jacdac packet is being received, the MCU keeps checking if it is a \\nbeginning of the `shutdown` frame.\\nIf that is the case, it opens all switches and checks which one(s) of the channel\\ndata lines wiggle (via the wiggle lines; this can be done with EXTI latches).\\nThe one(s) that wiggle received the `shutdown` frame and need to be disabled.\\n\\nAlso, while sending the `shutdown` frames itself, it needs to be done separately\\nfor each channel, with all the other switches open.\\nIf during that operation we detect wiggle on other channels, then we have detected\\na loop, and the respective channels needs to be disabled.\\n\\n#### A brain-integrated power supply\\n\\nHere, there's only one channel of power and we don't have hard real time requirements,\\nso user-programmable brain can control it.\\nThere is no need for analog switch or wiggle-detection line,\\nbut the current limiter with latching circuit is still needed.\\n\\nThere is nothing special to do during reception of `shutdown` packet.\\nWhen it is received, the current limiter should just be disabled.\\n\\nIdeally, exception/hard-fault handlers on the MCU should also disable the\\ncurrent limiter.\\nSimilarly, the limiter should be disabled while the MCU is in bootloader mode,\\nor otherwise unaware of the power negotiation protocol. \\n\\n### Rationale for the grace period\\n\\nConsider the following scenario:\\n\\n* device A queues `shutdown` command for sending\\n* A receives external `shutdown` packet from B (thus disabling A)\\n* the A `shutdown` command is sent from the queue (thus eventually disabling B)\\n\\nTo avoid that, we make sure that at the precise instant when `shutdown` command is sent,\\nthe power is enabled (and thus will stay enabled until another `shutdown` command arrives).\\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\\nand before starting UART transmission, however that would require breaking abstraction layers.\\nSo instead, we never disable the service, while the `shutdown` packet is queued.\\nThis may lead to delays in disabling power services, but these should be limited due to the\\nrandom nature of the `shutdown` packet spacing.\\n\\n### Rationale for timings\\n\\nThe initial 0-300ms delay is set to spread out the `shutdown` periods of power services,\\nto minimize collisions.\\nThe `shutdown` periods are randomized 400-600ms, instead of a fixed 500ms used for regular\\nservices, for the same reason.\\n\\nThe 1200ms period is set so that droping two `shutdown` packets in a row\\nfrom the current provider will not cause power switch, while missing 3 will.\\n\\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\\nwhile keeping it short enough for user to notice any problems such switching may cause.\"\n\t\t},\n\t\tclassIdentifier: 530893146,\n\t\tenums: {\n\t\t\tPowerStatus: {\n\t\t\t\tname: \"PowerStatus\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tDisallowed: 0,\n\t\t\t\t\tPowering: 1,\n\t\t\t\t\tOverload: 2,\n\t\t\t\t\tOverprovision: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"allowed\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Can be used to completely disable the service.\\nWhen allowed, the service may still not be providing power, see \\n`power_status` for the actual current state.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_power\",\n\t\t\t\tidentifier: 7,\n\t\t\t\tdescription: \"Limit the power provided by the service. The actual maximum limit will depend on hardware.\\nThis field may be read-only in some implementations - you should read it back after setting.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 900,\n\t\t\t\t\t\ttypicalMax: 900,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_power\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"power_status\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\\n`Overprovision` means there was another power provider, and we stopped not to overprovision the bus.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"PowerStatus\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"current_draw\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Present current draw from the bus.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"battery_voltage\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Voltage on input.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mV\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: 4500,\n\t\t\t\t\t\ttypicalMax: 5500\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"battery_charge\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"Fraction of charge in the battery.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"battery_capacity\",\n\t\t\t\tidentifier: 387,\n\t\t\t\tdescription: \"Energy that can be delivered to the bus when battery is fully charged.\\nThis excludes conversion overheads if any.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mWh\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"keep_on_pulse_duration\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Many USB power packs need current to be drawn from time to time to prevent shutdown.\\nThis regulates how often and for how long such current is drawn.\\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 600\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"keep_on_pulse_period\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Many USB power packs need current to be drawn from time to time to prevent shutdown.\\nThis regulates how often and for how long such current is drawn.\\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 20000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"shutdown\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Sent by the power service periodically, as broadcast.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"power_status_changed\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Emitted whenever `power_status` changes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"power_status\",\n\t\t\t\t\t\ttype: \"PowerStatus\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Pressure Button\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"pressurebutton\",\n\t\tcamelName: \"pressureButton\",\n\t\tshortName: \"pressureButton\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A pressure sensitive push-button.\"\n\t\t},\n\t\tclassIdentifier: 672612547,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"threshold\",\n\t\t\t\tidentifier: 6,\n\t\t\t\tdescription: \"Indicates the threshold for ``up`` events.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active_threshold\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"Protocol Test\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"prototest\",\n\t\tcamelName: \"protoTest\",\n\t\tshortName: \"protoTest\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"This is test service to validate the protocol packet transmissions between the browser and a MCU.\\nUse this page if you are porting Jacdac to a new platform.\",\n\t\t\tlong: \"### Test procedure\\n\\nFor each ``rw`` registers, set a random value ``x``\\n  * read ``rw`` and check value is equal to ``x``\\n  * read ``ro`` and check value is equal to ``x``\\n  * listen to ``e`` event and check that data is equal to ``x``\\n  * call ``c`` command with new random value ``y``\\n  * read ``rw`` and check value is equal to ``y``\\n  * do all the above steps with acks\\n\\nFor each ``rw`` registers, there shall also\\nbe an ``event`` and a ``command``. The event\\nshould get raised when the value changes;\\nand the command should set the value.\",\n\t\t\tregisters: \"Every ``rw`` register has a corresponding ``ro`` regisrer\\nand a corresponding ``set_...`` command to also set the value.\"\n\t\t},\n\t\tclassIdentifier: 382158442,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_bool\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"A read write bool register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_bool\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"A read only bool register. Mirrors rw_bool.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_u32\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"A read write u32 register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_u32\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"A read only u32 register.. Mirrors rw_u32.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_i32\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"A read write i32 register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_i32\",\n\t\t\t\tidentifier: 387,\n\t\t\t\tdescription: \"A read only i32 register.. Mirrors rw_i32.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_string\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"A read write string register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_string\",\n\t\t\t\tidentifier: 388,\n\t\t\t\tdescription: \"A read only string register. Mirrors rw_string.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_bytes\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"A read write string register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_bytes\",\n\t\t\t\tidentifier: 389,\n\t\t\t\tdescription: \"A read only string register. Mirrors ro_bytes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_i8_u8_u16_i32\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"A read write i8, u8, u16, i32 register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i8\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u16\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i8 u8 u16 i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_i8_u8_u16_i32\",\n\t\t\t\tidentifier: 390,\n\t\t\t\tdescription: \"A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i8\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u16\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i8 u8 u16 i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rw_u8_string\",\n\t\t\t\tidentifier: 135,\n\t\t\t\tdescription: \"A read write u8, string register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ro_u8_string\",\n\t\t\t\tidentifier: 391,\n\t\t\t\tdescription: \"A read only u8, string register.. Mirrors rw_u8_string.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_bool\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"An event raised when rw_bool is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"bool\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_u32\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"An event raised when rw_u32 is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u32\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_i32\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"An event raised when rw_i32 is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_string\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"An event raised when rw_string is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_bytes\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"An event raised when rw_bytes is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"bytes\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_i8_u8_u16_i32\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"An event raised when rw_i8_u8_u16_i32 is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i8\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u16\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i8 u8 u16 i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"e_u8_string\",\n\t\t\t\tidentifier: 135,\n\t\t\t\tdescription: \"An event raised when rw_u8_string is modified\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_bool\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"A command to set rw_bool.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"bool\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_u32\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"A command to set rw_u32.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u32\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_i32\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"A command to set rw_i32.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_string\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"A command to set rw_string.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_bytes\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"A command to set rw_string.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"bytes\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_i8_u8_u16_i32\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"A command to set rw_bytes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i8\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u16\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"i32\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i8 u8 u16 i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_u8_string\",\n\t\t\t\tidentifier: 135,\n\t\t\t\tdescription: \"A command to set rw_u8_string.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"u8\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"string\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"c_report_pipe\",\n\t\t\t\tidentifier: 144,\n\t\t\t\tdescription: \"A command to read the content of rw_bytes, byte per byte, as a pipe.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"p_bytes\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"c_report_pipe\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"p_bytes\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"A command to read the content of rw_bytes, byte per byte, as a pipe.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"byte\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"c_report_pipe\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Pulse Oximeter\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"pulseoximeter\",\n\t\tcamelName: \"pulseOximeter\",\n\t\tshortName: \"pulseOximeter\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor approximating the oxygen level. \\n\\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\"\n\t\t},\n\t\tclassIdentifier: 280710838,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"oxygen\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The estimated oxygen level in blood.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u8.8\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\ttypicalMin: 80,\n\t\t\t\t\t\ttypicalMax: 100\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u8.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"oxygen_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The estimated error on the reported sensor data.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"%\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u8.8\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u8.8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Biometric\"\n\t},\n\t{\n\t\tname: \"Rain gauge\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"raingauge\",\n\t\tcamelName: \"rainGauge\",\n\t\tshortName: \"rainGauge\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Measures the amount of liquid precipitation over an area in a predefined period of time.\"\n\t\t},\n\t\tclassIdentifier: 326323349,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"precipitation\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Total precipitation recorded so far.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 60000,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"precipitation_precision\",\n\t\t\t\tidentifier: 264,\n\t\t\t\tdescription: \"Typically the amount of rain needed for tipping the bucket.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_resolution\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Real time clock\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"realtimeclock\",\n\t\tcamelName: \"realTimeClock\",\n\t\tshortName: \"realTimeClock\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Real time clock to support collecting data with precise time stamps.\"\n\t\t},\n\t\tclassIdentifier: 445323816,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tComputer: 1,\n\t\t\t\t\tCrystal: 2,\n\t\t\t\t\tCuckoo: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"local_time\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Current time in 24h representation. \\n* ``day_of_month`` is day of the month, starting at ``1``\\n* ``day_of_week`` is day of the week, starting at ``1`` as monday\\nDefault streaming period is 1 second.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"year\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"month\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 12\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"day_of_month\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 31\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"day_of_week\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 7\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"hour\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 23\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"min\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 59\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sec\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 60\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u16 u8 u8 u8 u8 u8 u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"error\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Time drift since the last call to the ``set_time`` command.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"precision\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Error on the clock, in parts per million of seconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical clock used by the sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_time\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Sets the current time and resets the error.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"year\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"month\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 12\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"day_of_month\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 31\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"day_of_week\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 1,\n\t\t\t\t\t\tabsoluteMax: 7\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"hour\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 23\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"min\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 59\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sec\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 60\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u8 u8 u8 u8 u8 u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Reflected light\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"reflectedlight\",\n\t\tcamelName: \"reflectedLight\",\n\t\tshortName: \"reflectedLight\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that detects light and dark surfaces, commonly used for line following robots.\"\n\t\t},\n\t\tclassIdentifier: 309087410,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tInfraredDigital: 1,\n\t\t\t\t\tInfraredAnalog: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Type of physical sensor used\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"dark\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"The sensor detected a transition from light to dark\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"light\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"The sensor detected a transition from dark to light\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Imaging\"\n\t},\n\t{\n\t\tname: \"Relay\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"relay\",\n\t\tcamelName: \"relay\",\n\t\tshortName: \"relay\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A switching relay.\"\n\t\t},\n\t\tclassIdentifier: 406840918,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tElectromechanical: 1,\n\t\t\t\t\tSolidState: 2,\n\t\t\t\t\tReed: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"closed\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Indicates whether the relay circuit is currently energized (closed) or not.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describes the type of relay used.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_switching_current\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Maximum switching current for a resistive load.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"mA\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"active\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when relay goes from `inactive` to `active` state.\\nNormally open (NO) relays close the circuit when activated.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"inactive\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when relay goes from `active` to `inactive` state.\\nNormally closed (NC) relays open the circuit when activated.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Random Number Generator\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"rng\",\n\t\tcamelName: \"rng\",\n\t\tshortName: \"rng\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Generates random numbers using entropy sourced from physical processes.\\n\\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](https://en.wikipedia.org/wiki/Fortuna_(PRNG))),\\nwhich is periodically re-seeded with entropy coming from some hardware source.\"\n\t\t},\n\t\tclassIdentifier: 394916002,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tQuantum: 1,\n\t\t\t\t\tADCNoise: 2,\n\t\t\t\t\tWebCrypto: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"random\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"A register that returns a 64 bytes random buffer on every request.\\nThis never blocks for a long time. If you need additional random bytes, keep querying the register.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of algorithm/technique used to generate the number.\\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Role Manager\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"rolemanager\",\n\t\tcamelName: \"roleManager\",\n\t\tshortName: \"roleManager\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Assign roles to services on the Jacdac bus.\\n\\nInternally, the role manager stores a mapping from `(device_id, service_idx)` to role name.\\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\\nEach client has a role, and roles are unique to clients\\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\\n\\nRole names can be hierarchical, using slash character as a separator.\\nExamples: `left_leg/acc`, `left_leg/gyro`, `right_leg/acc`.\\nIf two roles share the prefix before first slash, it should be used as a hint that the services\\nshould be co-located on a single device\\n(eg., here the `left_leg` \\\"location\\\" is expected to have both an accelerometer and a gyro service on a single device).\"\n\t\t},\n\t\tclassIdentifier: 508264038,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"auto_bind\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Normally, if some roles are unfilled, and there are idle services that can fulfill them,\\nthe brain device will assign roles (bind) automatically.\\nSuch automatic assignment happens every second or so, and is trying to be smart about \\nco-locating roles that share \\\"host\\\" (part before first slash),\\nas well as reasonably stable assignments.\\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"all_roles_allocated\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Indicates if all required roles have been allocated to devices.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"get_role\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get the role corresponding to given device identifer. Returns empty string if unset.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_idx\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"b[8] u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"get_role\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get the role corresponding to given device identifer. Returns empty string if unset.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_idx\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"role\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"b[8] u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_role\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Set role. Can set to empty to remove role binding.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_idx\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"role\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b[8] u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear_all_roles\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Remove all role bindings.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list_stored_roles\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Return all roles stored internally.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"stored_roles\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_stored_roles\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"stored_roles\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Return all roles stored internally.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_idx\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"role\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_stored_roles\",\n\t\t\t\tpackFormat: \"b[8] u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list_required_roles\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"required_roles\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_required_roles\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"required_roles\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_idx\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"role\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_required_roles\",\n\t\t\t\tpackFormat: \"b[8] u32 u8 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"change\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Notifies that role bindings have changed.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Rotary encoder\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"rotaryencoder\",\n\t\tcamelName: \"rotaryEncoder\",\n\t\tshortName: \"rotaryEncoder\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"An incremental rotary encoder - converts angular motion of a shaft to digital signal.\"\n\t\t},\n\t\tclassIdentifier: 284830153,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"position\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Upon device reset starts at `0` (regardless of the shaft position).\\nIncreases by `1` for a clockwise \\\"click\\\", by `-1` for counter-clockwise.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"i32\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"clicks_per_turn\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Slider\"\n\t},\n\t{\n\t\tname: \"Rover\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"rover\",\n\t\tcamelName: \"rover\",\n\t\tshortName: \"rover\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A roving robot.\"\n\t\t},\n\t\tclassIdentifier: 435474539,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"kinematics\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The current position and orientation of the robot.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"x\",\n\t\t\t\t\t\tunit: \"cm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"y\",\n\t\t\t\t\t\tunit: \"cm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vx\",\n\t\t\t\t\t\tunit: \"cm/s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vy\",\n\t\t\t\t\t\tunit: \"cm/s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"heading\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i16.16 i16.16 i16.16 i16.16 i16.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Sensor Aggregator\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"sensoraggregator\",\n\t\tcamelName: \"sensorAggregator\",\n\t\tshortName: \"sensorAggregator\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Aggregate data from multiple sensors into a single stream\\n(often used as input to machine learning models on the same device, see model runner service).\"\n\t\t},\n\t\tclassIdentifier: 496034245,\n\t\tenums: {\n\t\t\tSampleType: {\n\t\t\t\tname: \"SampleType\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tU8: 8,\n\t\t\t\t\tI8: 136,\n\t\t\t\t\tU16: 16,\n\t\t\t\t\tI16: 144,\n\t\t\t\t\tU32: 32,\n\t\t\t\t\tI32: 160\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"inputs\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Set automatic input collection.\\nThese settings are stored in flash.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sampling_interval\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"samples_in_window\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"device_id\",\n\t\t\t\t\t\ttype: \"devid\",\n\t\t\t\t\t\tstorage: 8,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_class\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"service_num\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sample_size\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sample_type\",\n\t\t\t\t\t\ttype: \"SampleType\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sample_shift\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16 u32 r: b[8] u32 u8 u8 u8 i8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"num_samples\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Number of input samples collected so far.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"sample_size\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Size of a single sample.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"B\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"When set to `N`, will stream `N` samples as `current_sample` reading.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"current_sample\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Last collected sample.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Servo\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"servo\",\n\t\tcamelName: \"servo\",\n\t\tshortName: \"servo\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Servo is a small motor with arm that can be pointing at a specific direction.\\n\\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.\"\n\t\t},\n\t\tclassIdentifier: 318542083,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"angle\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Specifies the angle of the arm (request).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\ttypicalMin: -90,\n\t\t\t\t\t\ttypicalMax: 90\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"value\",\n\t\t\t\tpackFormat: \"i16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turn the power to the servo on/off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"offset\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Correction applied to the angle to account for the servo arm drift.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_angle\",\n\t\t\t\tidentifier: 272,\n\t\t\t\tdescription: \"Lowest angle that can be set.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tdefaultValue: -90\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"min_value\",\n\t\t\t\tpackFormat: \"i16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"min_pulse\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"The length of pulse corresponding to lowest angle.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 500\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_angle\",\n\t\t\t\tidentifier: 273,\n\t\t\t\tdescription: \"Highest angle that can be set.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4,\n\t\t\t\t\t\tdefaultValue: 90\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"max_value\",\n\t\t\t\tpackFormat: \"i16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_pulse\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"The length of pulse corresponding to highest angle.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"us\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 2500\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"stall_torque\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg/cm\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"response_speed\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Time to move 60°.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"s/60°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"current_angle\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The current physical position of the arm.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"i16.16\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"i16.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Settings\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"settings\",\n\t\tcamelName: \"settings\",\n\t\tshortName: \"settings\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Non-volatile key-value storage interface for storing settings.\",\n\t\t\tlong: \"## Secrets\\n\\nEntries with keys starting with `$` are considered secret.\\nThey can be written normally, but they read as a single `0` byte,\\nunless they are empty, in which case the value returned is also empty.\\nThese are typically used by other services on the same device.\"\n\t\t},\n\t\tclassIdentifier: 285727818,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"get\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get the value of given setting. If no such entry exists, the value returned is empty.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"get\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Get the value of given setting. If no such entry exists, the value returned is empty.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpackFormat: \"z b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Set the value of a given setting.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\trestricted: true,\n\t\t\t\tpackFormat: \"z b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"delete\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Delete a given setting.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\trestricted: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list_keys\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Return keys of all settings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"results\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_keys\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"listed_key\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Return keys of all settings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_keys\",\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Return keys and values of all settings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"results\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"listed_entry\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Return keys and values of all settings.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"key\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list\",\n\t\t\t\tpackFormat: \"z b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"clear\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"Clears all keys.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\trestricted: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"change\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Notifies that some setting have been modified.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"7-segment display\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"sevensegmentdisplay\",\n\t\tcamelName: \"sevenSegmentDisplay\",\n\t\tshortName: \"sevenSegmentDisplay\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A 7-segment numeric display, with one or more digits.\"\n\t\t},\n\t\tclassIdentifier: 425810167,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"digits\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Each byte encodes the display status of a digit using, \\nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\\nIf incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\\nThus, sending an empty ``digits`` payload clears the screen.\\n\\n```text\\n - A -\\n G   B\\n |   |\\n - F -\\n |   |   -\\n E   C  |DP|\\n - D -   -\\n```\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tencoding: \"bitset\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlowLevel: true,\n\t\t\t\tidentifierName: \"value\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"brightness\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Controls the brightness of the LEDs. ``0`` means off.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"double_dots\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\\nIf the column LEDs is not supported, the value remains false.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"digit_count\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"The number of digits available on the display.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"decimal_point\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"True if decimal points are available (on all digits).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_number\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Shows the number on the screen using the decimal dot if available.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"value\",\n\t\t\t\t\t\tisFloat: true,\n\t\t\t\t\t\ttype: \"f64\",\n\t\t\t\t\t\tstorage: 8\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tclient: true,\n\t\t\t\tpackFormat: \"f64\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_text\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Shows the text on the screen. The client may decide to scroll the text if too long.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"text\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tclient: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Display\"\n\t},\n\t{\n\t\tname: \"Soil moisture\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"soilmoisture\",\n\t\tcamelName: \"soilMoisture\",\n\t\tshortName: \"soilMoisture\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A soil moisture sensor.\"\n\t\t},\n\t\tclassIdentifier: 491430835,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tResistive: 1,\n\t\t\t\t\tCapacitive: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"moisture\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates the wetness of the soil, from ``dry`` to ``wet``.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describe the type of physical sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Solenoid\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"solenoid\",\n\t\tcamelName: \"solenoid\",\n\t\tshortName: \"solenoid\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A push-pull solenoid is a type of relay that pulls a coil when activated.\"\n\t\t},\n\t\tclassIdentifier: 387392458,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tPushPull: 1,\n\t\t\t\t\tValve: 2,\n\t\t\t\t\tLatch: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"pulled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Indicates whether the solenoid is energized and pulled (on) or pushed (off).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describes the type of solenoid used.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Sound level\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"soundlevel\",\n\t\tcamelName: \"soundLevel\",\n\t\tshortName: \"soundLevel\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sound level detector sensor, gives a relative indication of the sound level.\"\n\t\t},\n\t\tclassIdentifier: 346888797,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"sound_level\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The sound level detected by the microphone\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turn on or off the microphone.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"min_decibels\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The minimum power value considered by the sensor.\\nIf both ``min_decibels`` and ``max_decibels`` are supported,\\nthe volume in deciment can be linearly interpolated between\\n``[min_decibels, max_decibels]``.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"i16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_decibels\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"The maximum power value considered by the sensor.\\nIf both ``min_decibels`` and ``max_decibels`` are supported,\\nthe volume in deciment can be linearly interpolated between\\n``[min_decibels, max_decibels]``.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"i16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"loud_threshold\",\n\t\t\t\tidentifier: 6,\n\t\t\t\tdescription: \"The sound level to trigger a loud event.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active_threshold\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"quiet_threshold\",\n\t\t\t\tidentifier: 5,\n\t\t\t\tdescription: \"The sound level to trigger a quiet event.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive_threshold\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"loud\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Raised when a loud sound is detected\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"quiet\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Raised when a period of quietness is detected\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"Sound player\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"soundplayer\",\n\t\tcamelName: \"soundPlayer\",\n\t\tshortName: \"soundPlayer\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds.\"\n\t\t},\n\t\tclassIdentifier: 335795000,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"volume\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"play\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Starts playing a sound.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list_sounds\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Returns the list of sounds available to play.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"sounds_port\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_sounds\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"list_sounds_pipe\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Returns the list of sounds available to play.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"duration\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"name\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_sounds\",\n\t\t\t\tpackFormat: \"u32 s\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"Sound Spectrum\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"soundspectrum\",\n\t\tcamelName: \"soundSpectrum\",\n\t\tshortName: \"soundSpectrum\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A microphone that analyzes the sound specturm\"\n\t\t},\n\t\tclassIdentifier: 360365086,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"frequency_bins\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The computed frequency data.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Turns on/off the micropohone.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"fft_pow2_size\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"The power of 2 used as the size of the FFT to be used to determine the frequency domain.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 5,\n\t\t\t\t\t\tabsoluteMin: 2,\n\t\t\t\t\t\tabsoluteMax: 7\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"min_decibels\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The minimum power value in the scaling range for the FFT analysis data\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"max_decibels\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"The maximum power value in the scaling range for the FFT analysis data\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"smoothing_time_constant\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"The averaging constant with the last analysis frame. \\nIf ``0`` is set, there is no averaging done, whereas a value of ``1`` means \\\"overlap the previous and current buffer quite a lot while computing the value\\\".\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 0.8\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Sound\"\n\t},\n\t{\n\t\tname: \"Speech synthesis\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"speechsynthesis\",\n\t\tcamelName: \"speechSynthesis\",\n\t\tshortName: \"speechSynthesis\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A speech synthesizer\"\n\t\t},\n\t\tclassIdentifier: 302307733,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Determines if the speech engine is in a non-paused state.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"lang\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"volume\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Volume for utterances.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tdefaultValue: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u0.8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"pitch\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Pitch for utterances\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\t\tabsoluteMax: 2,\n\t\t\t\t\t\tabsoluteMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"rate\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Rate for utterances\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\t\tabsoluteMin: 0.1,\n\t\t\t\t\t\tabsoluteMax: 10\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"speak\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"text\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"cancel\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Cancels current utterance and all utterances from the utterance queue.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Switch\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"switch\",\n\t\tcamelName: \"switch\",\n\t\tshortName: \"switch\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A switch, which keeps its position.\"\n\t\t},\n\t\tclassIdentifier: 450008066,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tSlide: 1,\n\t\t\t\t\tTilt: 2,\n\t\t\t\t\tPushButton: 3,\n\t\t\t\t\tTactile: 4,\n\t\t\t\t\tToggle: 5,\n\t\t\t\t\tProximity: 6,\n\t\t\t\t\tMagnetic: 7,\n\t\t\t\t\tFootPedal: 8\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"active\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Indicates whether the switch is currently active (on).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Describes the type of switch used.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"auto_off_delay\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Specifies the delay without activity to automatically turn off after turning on.\\nFor example, some light switches in staircases have such a capability.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"on\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted when switch goes from ``off`` to ``on``.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"off\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when switch goes from ``on`` to ``off``.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Button\"\n\t},\n\t{\n\t\tname: \"TCP\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"tcp\",\n\t\tcamelName: \"tcp\",\n\t\tshortName: \"tcp\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Data transfer over TCP/IP and TLS stream sockets.\",\n\t\t\tcommands: \"## Pipes\"\n\t\t},\n\t\tclassIdentifier: 457422603,\n\t\tenums: {\n\t\t\tTcpError: {\n\t\t\t\tname: \"TcpError\",\n\t\t\t\tstorage: -4,\n\t\t\t\tmembers: {\n\t\t\t\t\tInvalidCommand: 1,\n\t\t\t\t\tInvalidCommandPayload: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"open\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"inbound\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"open\",\n\t\t\t\thasReport: true,\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"report\",\n\t\t\t\tname: \"open\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"outbound_port\",\n\t\t\t\t\t\ttype: \"pipe_port\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tsecondary: true,\n\t\t\t\tpipeType: \"open\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"meta_pipe_command\",\n\t\t\t\tname: \"open_ssl\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\\nAfter the connection is established, an empty data report is sent.\\nConnection is closed by closing the pipe.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"tcp_port\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"hostname\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"open\",\n\t\t\t\tpackFormat: \"u16 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_command\",\n\t\t\t\tname: \"outdata\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Bytes to be sent directly over an established TCP or SSL connection.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"open\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"indata\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Bytes read directly from directly over an established TCP or SSL connection.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"data\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"open\",\n\t\t\t\tpackFormat: \"b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"meta_pipe_report\",\n\t\t\t\tname: \"error\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Reported when an error is encountered. Negative error codes come directly from the SSL implementation.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"error\",\n\t\t\t\t\t\ttype: \"TcpError\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"open\",\n\t\t\t\tpackFormat: \"i32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Thermocouple\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"thermocouple\",\n\t\tcamelName: \"thermocouple\",\n\t\tshortName: \"thermocouple\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A thermocouple using a heat probe to gather temperatures.\"\n\t\t},\n\t\tclassIdentifier: 339394657,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tTypeK: 1,\n\t\t\t\t\tTypeJ: 2,\n\t\t\t\t\tTypeT: 3,\n\t\t\t\t\tTypeE: 4,\n\t\t\t\t\tTypeN: 5,\n\t\t\t\t\tTypeS: 6,\n\t\t\t\t\tTypeR: 7,\n\t\t\t\t\tTypeB: 8\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"temperature\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The temperature.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_temperature\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Lowest temperature that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_temperature\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Highest temperature that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"temperature_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Specifies the type of thermometer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Thermometer\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"thermometer\",\n\t\tcamelName: \"thermometer\",\n\t\tshortName: \"thermometer\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A thermometer measuring outside or inside environment.\"\n\t\t},\n\t\tclassIdentifier: 337754823,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tOutdoor: 1,\n\t\t\t\t\tIndoor: 2,\n\t\t\t\t\tBody: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"temperature\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The temperature.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_temperature\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Lowest temperature that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_temperature\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Highest temperature that can be reported.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"i22.10\",\n\t\t\t\t\t\tstorage: -4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"i22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"temperature_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°C\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"Specifies the type of thermometer.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"C\",\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Traffic Light\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"trafficlight\",\n\t\tcamelName: \"trafficLight\",\n\t\tshortName: \"trafficLight\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Controls a mini traffic with a red, orange and green LED.\"\n\t\t},\n\t\tclassIdentifier: 365137307,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"red\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"The on/off state of the red light.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"orange\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"The on/off state of the red light.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"green\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"The on/off state of the red light.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Total Volatile organic compound\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"tvoc\",\n\t\tcamelName: \"tvoc\",\n\t\tshortName: \"tvoc\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Measures equivalent Total Volatile Organic Compound levels.\"\n\t\t},\n\t\tclassIdentifier: 312849815,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"TVOC\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Total volatile organic compound readings in parts per billion.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppb\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\ttypicalMax: 1187,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"TVOC_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reading data\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppb\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_TVOC\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Minimum measurable value\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppb\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_TVOC\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Minimum measurable value\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ppb\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"conditioning_period\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Time required to achieve good sensor stability before measuring after long idle period.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"s\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"UV index\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"uvindex\",\n\t\tcamelName: \"uvIndex\",\n\t\tshortName: \"uvIndex\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun.\"\n\t\t},\n\t\tclassIdentifier: 527306128,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tUVA_UVB: 1,\n\t\t\t\t\tVisible_IR: 2\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"uv_index\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"Ultraviolet index, typically refreshed every second.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"uv\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\ttypicalMax: 11,\n\t\t\t\t\t\ttypicalMin: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"uv_index_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the UV measure.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"uv\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical sensor and capabilities.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t],\n\t\tgroup: \"Environment\"\n\t},\n\t{\n\t\tname: \"Verified Telemetry\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"verifiedtelemetrysensor\",\n\t\tcamelName: \"verifiedTelemetry\",\n\t\tshortName: \"verifiedTelemetry\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A mixin service that exposes verified telemetry information for a sensor (see https://github.com/Azure/Verified-Telemetry/tree/main/PnPModel).\"\n\t\t},\n\t\tclassIdentifier: 563381279,\n\t\tenums: {\n\t\t\tStatus: {\n\t\t\t\tname: \"Status\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tUnknown: 0,\n\t\t\t\t\tWorking: 1,\n\t\t\t\t\tFaulty: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\tFingerprintType: {\n\t\t\t\tname: \"FingerprintType\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tFallCurve: 1,\n\t\t\t\t\tCurrentSense: 2,\n\t\t\t\t\tCustom: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"telemetry_status\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Status\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"telemetry_status_interval\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Specifies the interval between computing the fingerprint information.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"fingerprint_type\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"Type of the fingerprint.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"FingerprintType\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"fingerprint_template\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"Template Fingerprint information of a working sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"confidence\",\n\t\t\t\t\t\tunit: \"%\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"template\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 b\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"reset_fingerprint_template\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"retrain_fingerprint_template\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"telemetry_status_change\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"The telemetry status of the device was updated.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"telemetry_status\",\n\t\t\t\t\t\ttype: \"Status\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"change\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"fingerprint_template_change\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"The fingerprint template was updated\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Vibration motor\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"vibration\",\n\t\tcamelName: \"vibrationMotor\",\n\t\tshortName: \"vibrationMotor\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A vibration motor.\"\n\t\t},\n\t\tclassIdentifier: 406832290,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Determines if the vibration motor responds to vibrate commands.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"vibrate\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"duration\",\n\t\t\t\t\t\tunit: \"8ms\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tstartRepeats: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"speed\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 8,\n\t\t\t\t\t\ttype: \"u0.8\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"r: u8 u0.8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t]\n\t},\n\t{\n\t\tname: \"Water level\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"waterlevel\",\n\t\tcamelName: \"waterLevel\",\n\t\tshortName: \"waterLevel\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that measures liquid/water level.\"\n\t\t},\n\t\tclassIdentifier: 343630573,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tResistive: 1,\n\t\t\t\t\tContactPhotoElectric: 2,\n\t\t\t\t\tNonContactPhotoElectric: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"level\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The reported water level.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"/\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u0.16\",\n\t\t\t\t\t\tstorage: 2\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u0.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Weight Scale\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"weightscale\",\n\t\tcamelName: \"weightScale\",\n\t\tshortName: \"weightScale\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A weight measuring sensor.\"\n\t\t},\n\t\tclassIdentifier: 525160512,\n\t\tenums: {\n\t\t\tVariant: {\n\t\t\t\tname: \"Variant\",\n\t\t\t\tstorage: 1,\n\t\t\t\tmembers: {\n\t\t\t\t\tBody: 1,\n\t\t\t\t\tFood: 2,\n\t\t\t\t\tJewelry: 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"weight\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The reported weight.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"weight_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"The estimate error on the reported reading.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"zero_offset\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\\nYou do not need to subtract that from the reading, it has already been done.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"gain\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Calibrated gain on the weight scale error.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_weight\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Maximum supported weight on the scale.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"min_weight\",\n\t\t\t\tidentifier: 260,\n\t\t\t\tdescription: \"Minimum recommend weight on the scale.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"min_reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"weight_resolution\",\n\t\t\t\tidentifier: 264,\n\t\t\t\tdescription: \"Smallest, yet distinguishable change in reading.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"kg\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_resolution\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"variant\",\n\t\t\t\tidentifier: 263,\n\t\t\t\tdescription: \"The type of physical scale\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"Variant\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"variant\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate_zero_offset\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Call this command when there is nothing on the scale. If supported, the module should save the calibration data.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"calibrate_gain\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Call this command with the weight of the thing on the scale.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"weight\",\n\t\t\t\t\t\tunit: \"g\",\n\t\t\t\t\t\tshift: 10,\n\t\t\t\t\t\ttype: \"u22.10\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u22.10\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"WIFI\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"wifi\",\n\t\tcamelName: \"wifi\",\n\t\tshortName: \"wifi\",\n\t\t\"extends\": [\n\t\t\t\"_base\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"Discovery and connection to WiFi networks. Separate TCP service can be used for data transfer.\\n\\nThe device controlled by this service is meant to connect automatically, once configured.\\nTo that end, it keeps a list of known WiFi networks, with priorities and passwords.\\nIt will connect to the available network with numerically highest priority,\\nbreaking ties in priority by signal strength (typically all known networks have priority of `0`).\"\n\t\t},\n\t\tclassIdentifier: 413852154,\n\t\tenums: {\n\t\t\tAPFlags: {\n\t\t\t\tname: \"APFlags\",\n\t\t\t\tstorage: 4,\n\t\t\t\tisFlags: true,\n\t\t\t\tmembers: {\n\t\t\t\t\tHasPassword: 1,\n\t\t\t\t\tWPS: 2,\n\t\t\t\t\tHasSecondaryChannelAbove: 4,\n\t\t\t\t\tHasSecondaryChannelBelow: 8,\n\t\t\t\t\tIEEE_802_11B: 256,\n\t\t\t\t\tIEEE_802_11A: 512,\n\t\t\t\t\tIEEE_802_11G: 1024,\n\t\t\t\t\tIEEE_802_11N: 2048,\n\t\t\t\t\tIEEE_802_11AC: 4096,\n\t\t\t\t\tIEEE_802_11AX: 8192,\n\t\t\t\t\tIEEE_802_LongRange: 32768\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"last_scan_results\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"Return list of WiFi network from the last scan.\\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\\nas well as upon `reconnect` and `scan` commands.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"results\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"last_scan_results\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"results\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Return list of WiFi network from the last scan.\\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\\nas well as upon `reconnect` and `scan` commands.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"flags\",\n\t\t\t\t\t\ttype: \"APFlags\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"reserved\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"rssi\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: -100,\n\t\t\t\t\t\ttypicalMax: -20\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"channel\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 13\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"bssid\",\n\t\t\t\t\t\ttype: \"u8[6]\",\n\t\t\t\t\t\tstorage: 6\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ssid\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 33,\n\t\t\t\t\t\tmaxBytes: 33\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"last_scan_results\",\n\t\t\t\tpackFormat: \"u32 u32 i8 u8 b[6] s[33]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"add_network\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Automatically connect to named network if available. Also set password if network is not open.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ssid\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"password\",\n\t\t\t\t\t\ttype: \"string0\",\n\t\t\t\t\t\tstorage: 0,\n\t\t\t\t\t\tisOptional: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"z z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"reconnect\",\n\t\t\t\tidentifier: 130,\n\t\t\t\tdescription: \"Initiate a scan, wait for results, disconnect from current WiFi network if any,\\nand then reconnect (using regular algorithm, see `set_network_priority`).\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"forget_network\",\n\t\t\t\tidentifier: 131,\n\t\t\t\tdescription: \"Prevent from automatically connecting to named network in future.\\nForgetting a network resets its priority to `0`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ssid\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"forget_all_networks\",\n\t\t\t\tidentifier: 132,\n\t\t\t\tdescription: \"Clear the list of known networks.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"set_network_priority\",\n\t\t\t\tidentifier: 133,\n\t\t\t\tdescription: \"Set connection priority for a network.\\nBy default, all known networks have priority of `0`.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"priority\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ssid\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"i16 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"scan\",\n\t\t\t\tidentifier: 134,\n\t\t\t\tdescription: \"Initiate search for WiFi networks. Generates `scan_complete` event.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"command\",\n\t\t\t\tname: \"list_known_networks\",\n\t\t\t\tidentifier: 135,\n\t\t\t\tdescription: \"Return list of known WiFi networks.\\n`flags` is currently always 0.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"results\",\n\t\t\t\t\t\ttype: \"pipe\",\n\t\t\t\t\t\tstorage: 12\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_known_networks\",\n\t\t\t\tpackFormat: \"b[12]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"pipe_report\",\n\t\t\t\tname: \"network_results\",\n\t\t\t\tidentifier: 0,\n\t\t\t\tdescription: \"Return list of known WiFi networks.\\n`flags` is currently always 0.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"priority\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"flags\",\n\t\t\t\t\t\ttype: \"i16\",\n\t\t\t\t\t\tstorage: -2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"ssid\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpipeType: \"list_known_networks\",\n\t\t\t\tpackFormat: \"i16 i16 s\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"enabled\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Determines whether the WiFi radio is enabled. It starts enabled upon reset.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"intensity\",\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"connected\",\n\t\t\t\tidentifier: 384,\n\t\t\t\tdescription: \"Indicates whether or not we currently have an IP address assigned.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\tstorage: 1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ip_address\",\n\t\t\t\tidentifier: 385,\n\t\t\t\tdescription: \"0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 16,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tmaxBytes: 16\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b[16]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"eui_48\",\n\t\t\t\tidentifier: 386,\n\t\t\t\tdescription: \"The 6-byte MAC address of the device. If a device does MAC address randomization it will have to \\\"restart\\\".\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tstorage: 6,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tmaxBytes: 6\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"b[6]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"ssid\",\n\t\t\t\tidentifier: 387,\n\t\t\t\tdescription: \"SSID of the access-point to which device is currently connected.\\nEmpty string if not connected.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 32,\n\t\t\t\t\t\tmaxBytes: 32\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"s[32]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"rssi\",\n\t\t\t\tidentifier: 388,\n\t\t\t\tdescription: \"Current signal strength. Returns -128 when not connected.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"dB\",\n\t\t\t\t\t\ttype: \"i8\",\n\t\t\t\t\t\tstorage: -1,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\ttypicalMin: -128,\n\t\t\t\t\t\ttypicalMax: -20\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tpackFormat: \"i8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"got_ip\",\n\t\t\t\tidentifier: 1,\n\t\t\t\tdescription: \"Emitted upon successful join and IP address assignment.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"active\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"lost_ip\",\n\t\t\t\tidentifier: 2,\n\t\t\t\tdescription: \"Emitted when disconnected from network.\",\n\t\t\t\tfields: [\n\t\t\t\t],\n\t\t\t\tidentifierName: \"inactive\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"scan_complete\",\n\t\t\t\tidentifier: 128,\n\t\t\t\tdescription: \"A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\\nThe event indicates how many networks where found, and how many are considered\\nas candidates for connection.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"num_networks\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"num_known_networks\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tpackFormat: \"u16 u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"networks_changed\",\n\t\t\t\tidentifier: 129,\n\t\t\t\tdescription: \"Emitted whenever the list of known networks is updated.\",\n\t\t\t\tfields: [\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tgroup: \"Iot\"\n\t},\n\t{\n\t\tname: \"Wind direction\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"winddirection\",\n\t\tcamelName: \"windDirection\",\n\t\tshortName: \"windDirection\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that measures wind direction.\"\n\t\t},\n\t\tclassIdentifier: 409725227,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"wind_direction\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The direction of the wind.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tabsoluteMin: 0,\n\t\t\t\t\t\tabsoluteMax: 359\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 1000,\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"wind_direction_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the wind direction reading\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"°\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t},\n\t{\n\t\tname: \"Wind speed\",\n\t\tstatus: \"experimental\",\n\t\tshortId: \"windspeed\",\n\t\tcamelName: \"windSpeed\",\n\t\tshortName: \"windSpeed\",\n\t\t\"extends\": [\n\t\t\t\"_base\",\n\t\t\t\"_sensor\"\n\t\t],\n\t\tnotes: {\n\t\t\tshort: \"A sensor that measures wind speed.\"\n\t\t},\n\t\tclassIdentifier: 458824639,\n\t\tenums: {\n\t\t},\n\t\tconstants: {\n\t\t},\n\t\tpackets: [\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"instance_name\",\n\t\t\t\tidentifier: 265,\n\t\t\t\tdescription: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tstorage: 0\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"instance_name\",\n\t\t\t\tpackFormat: \"s\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"status_code\",\n\t\t\t\tidentifier: 259,\n\t\t\t\tdescription: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"event\",\n\t\t\t\tname: \"status_code_changed\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Notifies that the status code of the service changed.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"vendor_code\",\n\t\t\t\t\t\ttype: \"u16\",\n\t\t\t\t\t\tstorage: 2,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"status_code_changed\",\n\t\t\t\tpackFormat: \"u16 u16\",\n\t\t\t\tderived: \"_base\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_samples\",\n\t\t\t\tidentifier: 3,\n\t\t\t\tdescription: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"#\",\n\t\t\t\t\t\ttype: \"u8\",\n\t\t\t\t\t\tstorage: 1,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\tidentifierName: \"streaming_samples\",\n\t\t\t\tpackFormat: \"u8\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"rw\",\n\t\t\t\tname: \"streaming_interval\",\n\t\t\t\tidentifier: 4,\n\t\t\t\tdescription: \"Period between packets of data when streaming in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true,\n\t\t\t\t\t\tdefaultValue: 100,\n\t\t\t\t\t\ttypicalMin: 1,\n\t\t\t\t\t\ttypicalMax: 60000\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tidentifierName: \"streaming_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"streaming_preferred_interval\",\n\t\t\t\tidentifier: 258,\n\t\t\t\tdescription: \"Preferred default streaming interval for sensor in milliseconds.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"ms\",\n\t\t\t\t\t\ttype: \"u32\",\n\t\t\t\t\t\tstorage: 4,\n\t\t\t\t\t\tisSimpleType: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternal: true,\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"streaming_preferred_interval\",\n\t\t\t\tpackFormat: \"u32\",\n\t\t\t\tderived: \"_sensor\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"wind_speed\",\n\t\t\t\tidentifier: 257,\n\t\t\t\tdescription: \"The velocity of the wind.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m/s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading\",\n\t\t\t\tpreferredInterval: 60000,\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"ro\",\n\t\t\t\tname: \"wind_speed_error\",\n\t\t\t\tidentifier: 262,\n\t\t\t\tdescription: \"Error on the reading\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m/s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tvolatile: true,\n\t\t\t\tidentifierName: \"reading_error\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tkind: \"const\",\n\t\t\t\tname: \"max_wind_speed\",\n\t\t\t\tidentifier: 261,\n\t\t\t\tdescription: \"Maximum speed that can be measured by the sensor.\",\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"_\",\n\t\t\t\t\t\tunit: \"m/s\",\n\t\t\t\t\t\tshift: 16,\n\t\t\t\t\t\ttype: \"u16.16\",\n\t\t\t\t\t\tstorage: 4\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toptional: true,\n\t\t\t\tidentifierName: \"max_reading\",\n\t\t\t\tpackFormat: \"u16.16\"\n\t\t\t}\n\t\t],\n\t\ttags: [\n\t\t\t\"8bit\"\n\t\t]\n\t}\n];\n\nvar deviceRegistryData = [\n\t{\n\t\tid: \"microsoft-research-jacdaccableextender38v10\",\n\t\tname: \"JacdacCableExtender \",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t928595161\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"38\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdacjoystick440344v03\",\n\t\tname: \"JacdacJoystick 44-0.3\",\n\t\tcompany: \"Microsoft Research\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t277836886\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t832285283\n\t\t],\n\t\tversion: \"0.3\",\n\t\tdesignIdentifier: \"44\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdacmicrobitshieldlp29v03\",\n\t\tname: \"JacDacMicroBitShieldLP\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1009620586\n\t\t],\n\t\tversion: \"0.3\",\n\t\tdesignIdentifier: \"29\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdacmotiondetection54v01\",\n\t\tname: \"JacdacMotionDetection \",\n\t\tcompany: \"Microsoft Research\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t293185353\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1030407429\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"54\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdacpinheaders45v02\",\n\t\tname: \"JacdacPinHeaders \",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t970939382\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"45\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdactouchtest35v10\",\n\t\tname: \"JacdacTouchTest\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t677752265\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t933677864\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"35\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jacdactouchtestelectrode36v10\",\n\t\tname: \"JacdacTouchTestElectrode\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t\t677752265\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1026187559\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"36\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmaccelerometer30v02\",\n\t\tname: \"JM Accelerometer\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t521405449\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t872001670\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"30\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmaccelerometer30v10\",\n\t\tname: \"JM Accelerometer\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t521405449\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t952491663\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"30\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmaccelerometerv20\",\n\t\tname: \"JM Accelerometer v2.0\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A 3-axis accelerometer. 16G range.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t521405449\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1020174761\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmaccessswitchinput34v13\",\n\t\tname: \"JM Access Switch Input\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t343122531,\n\t\t\t522667846,\n\t\t\t277836886\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t964964313\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.3\",\n\t\tdesignIdentifier: \"34\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmaccessswitchoutputv11\",\n\t\tname: \"JM Access Switch Output\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t406840918\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t942325999\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.1\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmambientlight55v01\",\n\t\tname: \"JM Ambient Light\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t400333340\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t896864987\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"55\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmanalogjoystick44v02\",\n\t\tname: \"JM Analog Joystick\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t277836886\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t976429228\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"44\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmarcadebtnv20\",\n\t\tname: \"JM ArcadeBtn v2.0\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you connect a single arcade button with an LED.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t886919574\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmarcadecontrolsv20\",\n\t\tname: \"JM Arcade Controls v2.0\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you connect arcade buttons and joystick to a Jacdac network.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t501915758\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t954450524\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbrainesp3248v02\",\n\t\tname: \"JM Brain ESP32\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/pxt-jacdac/\",\n\t\tservices: [\n\t\t\t342028028\n\t\t],\n\t\tproductIdentifiers: [\n\t\t],\n\t\ttransport: \"serial\",\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"48\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbrainesp3248v03\",\n\t\tname: \"JM Brain ESP32\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/pxt-jacdac/\",\n\t\tservices: [\n\t\t\t342028028\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t917230668\n\t\t],\n\t\ttransport: \"serial\",\n\t\tversion: \"0.3\",\n\t\tdesignIdentifier: \"48\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbrainf441v02\",\n\t\tname: \"JM Brain F4\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\tlink: \"https://github.com/microsoft/pxt-jacdac\",\n\t\tservices: [\n\t\t\t414210922,\n\t\t\t411425820\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1003209864,\n\t\t\t970267564\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tfirmwares: [\n\t\t\t{\n\t\t\t\tname: \"HID Keyboard + Mouse\",\n\t\t\t\turl: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-f4.uf2\"\n\t\t\t}\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"41\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbrainrp204059v01\",\n\t\tname: \"JM Brain RP2040\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\tlink: \"https://github.com/microsoft/pxt-jacdac\",\n\t\tservices: [\n\t\t\t414210922,\n\t\t\t411425820\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t884301483,\n\t\t\t999933064\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tfirmwares: [\n\t\t\t{\n\t\t\t\tname: \"HID Keyboard + Mouse\",\n\t\t\t\turl: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-rp2040.uf2\"\n\t\t\t}\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"59\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbutton10v13\",\n\t\tname: \"JM Button\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t896566497\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.3\",\n\t\tdesignIdentifier: \"10\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbutton40v02\",\n\t\tname: \"JM Button\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t946173966\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"40\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbuttonterminal62v01\",\n\t\tname: \"JM Button Terminal\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1047530059\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"62\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmbuzzerv20\",\n\t\tname: \"JM Buzzer v2.0\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A simple buzzer.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t458731991\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t854957595\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmclickairquality4v32\",\n\t\tname: \"JM-Click Airquality4\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t379362758,\n\t\t\t312849815\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t878106432\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"3.2\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmclickcolorv32\",\n\t\tname: \"JM-Click Color\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t372299111\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1020991645\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"3.2\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmcrankbuttonv20\",\n\t\tname: \"JM Crank + Button\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A rotary encoder with a push button.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t284830153,\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t813927310\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmcrankv20\",\n\t\tname: \"JM Crank\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A rotary encoder without a push button.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t284830153\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t866678795\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmflexv10\",\n\t\tname: \"JM Flex\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t524797638\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t840841542\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.0\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmgamepadv20\",\n\t\tname: \"JM GamePad\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you convert a plastic d-pad controller, so that it can be connected to a Jacdac network.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t501915758\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t919754666\n\t\t],\n\t\tversion: \"2.0\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmhapticmach101v10\",\n\t\tname: \"JM Haptic MACH-1.0\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"JM Haptic MACH-1.0\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t406832290\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1022649261\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"1\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmhub39v03\",\n\t\tname: \"JM Hub\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t917230668\n\t\t],\n\t\tversion: \"0.3\",\n\t\tdesignIdentifier: \"39\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmkeyboardkey46v10\",\n\t\tname: \"JM Keyboard Key\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1067229774\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"46\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmkeyboardkey46v11\",\n\t\tname: \"JM Keyboard Key\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t911541523\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.1\",\n\t\tdesignIdentifier: \"46\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmkeyboardkey46v12\",\n\t\tname: \"JM Keyboard Key\",\n\t\tcompany: \"Microsoft Research\",\n\t\tlink: \"https://github.com/microsoft/jacdac-padauk\",\n\t\tservices: [\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t876567534\n\t\t],\n\t\ttags: [\n\t\t],\n\t\tversion: \"1.2\",\n\t\tdesignIdentifier: \"46\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmmachinelearning\",\n\t\tname: \"JM Machine Learning\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you run machine learning models on data coming from Jacdac network.\",\n\t\trepo: \"https://github.com/microsoft/pxt-tensorflow\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t336566904,\n\t\t\t496034245\n\t\t],\n\t\tproductIdentifiers: [\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmmicrobitshieldlp29v05\",\n\t\tname: \"JM MicroBit Shield LP\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t974031363\n\t\t],\n\t\tversion: \"0.5\",\n\t\tdesignIdentifier: \"29\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmmotorv21\",\n\t\tname: \"JM Motor\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you control a single DC motor (up to 5V; yellow plastic ones work well).\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t385895640\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t809626198\n\t\t],\n\t\tversion: \"2.1\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpinheader45v01\",\n\t\tname: \"JM Pin Header\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A unregulated passive adapter from Jacdac to pin headers.\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t939230090\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"45\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpinheader45v02\",\n\t\tname: \"JM Pin Header\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A regulated passive adapter from Jacdac to pin headers.\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t994328823\n\t\t],\n\t\tversion: \"0.2\",\n\t\tdesignIdentifier: \"45\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpower\",\n\t\tname: \"JM Power\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"Lets you supply power to Jacdac network from a MicroUSB connection (eg. a USB battery pack).\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t530893146\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t815885628\n\t\t],\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmprotov20\",\n\t\tname: \"JM Proto\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A prototype multi-function board.\\n* ``0x3f9bc26a`` JM Touch-Proto v2.0\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1052138004\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpwmnpxv20\",\n\t\tname: \"JM PWM (npx)\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A light-strip controller. Supports WS2812B, APA102, and SK9822.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t309264608\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t895762065\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpwmnpxv21\",\n\t\tname: \"JM PWM (npx)\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A light-strip controller with MicroUSB connector for power. Supports WS2812B, APA102, and SK9822.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t309264608\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1013705700\n\t\t],\n\t\tversion: \"2.1\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpwmservov20\",\n\t\tname: \"JM PWM (Servo)\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A controller for a 5V servo.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t318542083\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t816890446\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmpwmservov21\",\n\t\tname: \"JM PWM (Servo)\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A controller for a 5V servo, with MicroUSB connector for power.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t318542083\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t986140247\n\t\t],\n\t\tversion: \"2.1\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmrgbledbar58v01\",\n\t\tname: \"JM RGB LED Bar\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t309264608\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1046525691\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"58\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmrgbledgeneric60v01\",\n\t\tname: \"JM RGB LED Generic\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t309264608\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t967723905\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"60\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmrgbledring37v21\",\n\t\tname: \"JM RGB LED Ring\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t309264608\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t807926135\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"2.1\",\n\t\tdesignIdentifier: \"37\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmrotarycontrolbuttonv10\",\n\t\tname: \"JM Rotary Control + Button\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t284830153,\n\t\t\t343122531\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1060754715\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.0\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmsinglergbled42v01\",\n\t\tname: \"JM Single RGB LED\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t506480888\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t917828732\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"42\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmslider49v10\",\n\t\tname: \"JM Slider\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t522667846\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t981005156\n\t\t],\n\t\tversion: \"1.0\",\n\t\tdesignIdentifier: \"49\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmslider49v11\",\n\t\tname: \"JM Slider\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t522667846\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t966423091\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.1\",\n\t\tdesignIdentifier: \"49\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmsliderv20\",\n\t\tname: \"JM Slider\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A linear potentiometer (slider).\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t522667846\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1043615261\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmspeechsynthesis61v33\",\n\t\tname: \"JM Speech Synthesis\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t302307733\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t934541191\n\t\t],\n\t\tversion: \"3.3\",\n\t\tdesignIdentifier: \"61\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmtemperaturehumidity18v10a\",\n\t\tname: \"JM Temperature + Humidity\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t337754823,\n\t\t\t382210232\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t899442616\n\t\t],\n\t\tversion: \"1.0A\",\n\t\tdesignIdentifier: \"18\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmtemperaturehumidity18v11\",\n\t\tname: \"JM Temperature + Humidity\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t337754823,\n\t\t\t382210232\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t827772887\n\t\t],\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tversion: \"1.1\",\n\t\tdesignIdentifier: \"18\"\n\t},\n\t{\n\t\tid: \"microsoft-research-jmtouchprotov20\",\n\t\tname: \"JM Touch-Proto\",\n\t\tcompany: \"Microsoft Research\",\n\t\tdescription: \"A multi-touch sensor based on proto board.\",\n\t\trepo: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tlink: \"https://github.com/microsoft/jacdac-msr-modules\",\n\t\tservices: [\n\t\t\t416636459\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t1067172458\n\t\t],\n\t\tversion: \"2.0\",\n\t\tstatus: \"deprecated\"\n\t},\n\t{\n\t\tid: \"microsoft-research-mikrobuscarrierboard53v01\",\n\t\tname: \"MikrobusCarrierBoard\",\n\t\tcompany: \"Microsoft Research\",\n\t\trepo: \"\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t961789360\n\t\t],\n\t\tversion: \"0.1\",\n\t\tdesignIdentifier: \"53\",\n\t\tstatus: \"experimental\"\n\t},\n\t{\n\t\tid: \"microbit-foundation-microbitv2\",\n\t\tname: \"micro:bit V2\",\n\t\tcompany: \"microbit foundation\",\n\t\tdescription: \"The new micro:bit V2 has a built-in microphone and speaker to allow sound-sensing and sound-making without the need to attach another device. It also introduces capacitive touch sensing, a power-saving mode and more computing power for the classroom.\",\n\t\tlink: \"https://microsoft.github.io/jacdac-docs/hardware/kit/oob/\",\n\t\tservices: [\n\t\t],\n\t\tproductIdentifiers: [\n\t\t\t854992189\n\t\t],\n\t\ttransport: \"usb\",\n\t\ttags: [\n\t\t\t\"kit\"\n\t\t],\n\t\tfirmwares: [\n\t\t\t{\n\t\t\t\tname: \"Kit Out-Of-the-Box Experience\",\n\t\t\t\turl: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/microbit-oob.hex\"\n\t\t\t}\n\t\t]\n\t}\n];\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet _serviceSpecifications = serviceSpecificationData;\nlet _serviceSpecificationMap = undefined;\nlet _customServiceSpecifications = {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _deviceRegistry = deviceRegistryData;\n/**\n * Override built-in service specifications\n * @param specs\n * @category Specification\n */\nfunction loadServiceSpecifications(specs) {\n    _serviceSpecifications = (specs === null || specs === void 0 ? void 0 : specs.slice(0)) || [];\n    _serviceSpecificationMap = undefined;\n}\n/**\n * Adds a custom service specification\n * @param service\n * @category Specification\n */\nfunction addCustomServiceSpecification(service) {\n    if (service && service.classIdentifier) {\n        _customServiceSpecifications[service.classIdentifier] = service;\n        _serviceSpecificationMap = undefined;\n    }\n}\n/**\n * Clears any custom service specification\n * @category Specification\n */\nfunction clearCustomServiceSpecifications() {\n    _customServiceSpecifications = {};\n    _serviceSpecificationMap = undefined;\n}\n/**\n * Returns a map from service short ids to service specifications\n * @category Specification\n */\nfunction serviceMap() {\n    const m = {};\n    _serviceSpecifications.forEach(spec => (m[spec.shortId] = spec));\n    return m;\n}\n/**\n * Returns the list of service specifications\n * @category Specification\n */\nfunction serviceSpecifications() {\n    return _serviceSpecifications.slice(0);\n}\n/**\n * Resolve the device specification from the product identiier\n * @category Specification\n */\nfunction deviceSpecificationFromProductIdentifier(productIdentifier) {\n    if (isNaN(productIdentifier))\n        return undefined;\n    const spec = _deviceRegistry.find(spec => { var _a; return ((_a = spec.productIdentifiers) === null || _a === void 0 ? void 0 : _a.indexOf(productIdentifier)) > -1; });\n    return spec;\n}\n/**\n * @internal\n */\nfunction deviceSpecificationFromIdentifier(id) {\n    if (id === undefined)\n        return undefined;\n    const spec = _deviceRegistry.find(spec => spec.id === id);\n    return spec;\n}\n/**\n * Gets the list of devices that use this service class\n * @param serviceClass\n * @category Specification\n */\nfunction deviceSpecificationsForService(serviceClass) {\n    if (isNaN(serviceClass))\n        return undefined;\n    return _deviceRegistry.filter(spec => { var _a; return ((_a = spec.services) === null || _a === void 0 ? void 0 : _a.indexOf(serviceClass)) > -1; });\n}\n/**\n * Gets the list of device specifications\n * @returns\n * @category Specification\n */\nfunction deviceSpecifications(options) {\n    const { includeDeprecated, includeExperimental } = options || {};\n    let r = _deviceRegistry.slice(0);\n    if (!includeDeprecated)\n        r = r.filter(d => d.status !== \"deprecated\");\n    if (!includeExperimental)\n        r = r.filter(d => d.status !== \"experimental\");\n    return r;\n}\n/**\n * @internal\n */\nfunction identifierToUrlPath(id) {\n    // compiled web site does not like . in path\n    return id === null || id === void 0 ? void 0 : id.replace(/-/g, \"/\").replace(/\\./g, \"\").toLowerCase();\n}\n/**\n * Checks if classIdentifier is compatible with requiredClassIdentifier\n * @category Specification\n */\nfunction isInstanceOf(classIdentifier, requiredClassIdentifier) {\n    var _a;\n    // garbage data\n    if (isNaN(classIdentifier))\n        return false;\n    // direct hit\n    if (classIdentifier === requiredClassIdentifier)\n        return true;\n    // lookup inheritance chain\n    const classSpec = serviceSpecificationFromClassIdentifier(classIdentifier);\n    return !!((_a = classSpec === null || classSpec === void 0 ? void 0 : classSpec.extends) === null || _a === void 0 ? void 0 : _a.some(extend => {\n        const extendSpec = serviceSpecificationFromName(extend);\n        return (!!extendSpec &&\n            isInstanceOf(extendSpec.classIdentifier, requiredClassIdentifier));\n    }));\n}\n/**\n * Checks if the service supports the Jacdac infrastructure\n * @param spec\n * @returns\n * @category Specification\n */\nfunction isInfrastructure(spec) {\n    return (spec &&\n        ([\n            SRV_CONTROL,\n            SRV_ROLE_MANAGER,\n            SRV_LOGGER,\n            SRV_SETTINGS,\n            SRV_BOOTLOADER,\n            SRV_PROTO_TEST,\n            SRV_INFRASTRUCTURE,\n        ].indexOf(spec.classIdentifier) > -1 ||\n            spec.shortId[0] === \"_\"));\n}\n/**\n * Looks up a service specification by name\n * @param shortId\n * @category Specification\n */\nfunction serviceSpecificationFromName(shortId) {\n    if (!shortId)\n        return undefined;\n    return (_serviceSpecifications.find(s => s.shortId === shortId) ||\n        Object.values(_customServiceSpecifications).find(ser => ser.shortId === shortId));\n}\n/**\n * Looks up a service specification by class\n * @param classIdentifier\n * @category Specification\n */\nfunction serviceSpecificationFromClassIdentifier(classIdentifier) {\n    if (isNaN(classIdentifier))\n        return undefined;\n    // try lookup cache\n    let srv = _serviceSpecificationMap === null || _serviceSpecificationMap === void 0 ? void 0 : _serviceSpecificationMap[classIdentifier];\n    if (srv)\n        return srv;\n    // resolve\n    srv =\n        _serviceSpecifications.find(s => s.classIdentifier === classIdentifier) || _customServiceSpecifications[classIdentifier];\n    if (srv) {\n        if (!_serviceSpecificationMap)\n            _serviceSpecificationMap = {};\n        _serviceSpecificationMap[classIdentifier] = srv;\n    }\n    return srv;\n}\n/**\n * Indicates if the specified service is a sensor\n * @param spec\n * @returns\n * @category Specification\n */\nfunction isSensor(spec) {\n    return (spec &&\n        spec.packets.some(pkt => isReading(pkt)) &&\n        spec.packets.some(pkt => pkt.identifier == exports.SensorReg.StreamingSamples) &&\n        spec.packets.some(pkt => pkt.identifier == exports.SensorReg.StreamingInterval));\n}\n/**\n * Indicates if the specified service is an actuator\n * @param spec\n * @returns\n * @category Specification\n */\nfunction isActuator(spec) {\n    return (spec &&\n        spec.packets.some(pkt => pkt.identifier === exports.SystemReg.Value) &&\n        spec.packets.some(pkt => pkt.identifier === exports.SystemReg.Intensity));\n}\n/**\n * Indicates if the packet information is a register\n * @param spec\n * @returns\n * @category Specification\n */\nfunction isRegister(pkt) {\n    return pkt && (pkt.kind == \"const\" || pkt.kind == \"ro\" || pkt.kind == \"rw\");\n}\n/**\n * Indicates if the packet information is a ``reading`` register\n * @param spec\n * @returns\n * @category Specification\n */\nfunction isReading(pkt) {\n    return pkt && pkt.kind == \"ro\" && pkt.identifier == exports.SystemReg.Reading;\n}\nconst ignoredRegister = [\n    exports.SystemReg.StatusCode,\n    exports.SystemReg.InstanceName,\n    exports.SystemReg.StreamingInterval,\n    exports.SystemReg.StreamingPreferredInterval,\n    exports.SystemReg.StreamingSamples,\n    exports.SystemReg.ReadingError,\n    exports.SystemReg.ReadingResolution,\n    exports.SystemReg.MinReading,\n    exports.SystemReg.MaxReading,\n    exports.SystemReg.MinValue,\n    exports.SystemReg.MaxValue,\n    exports.SystemReg.MaxPower,\n];\n/**\n * Indicates if the register is usable from a high-level programming environment.\n * @category Specification\n */\nfunction isHighLevelRegister(pkt) {\n    return (isRegister(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredRegister.indexOf(pkt.identifier) < 0);\n}\nconst ignoredEvents = [exports.SystemEvent.StatusCodeChanged];\n/**\n * Indicates if the event is usable from a high-level programming environment.\n * @category Specification\n */\nfunction isHighLevelEvent(pkt) {\n    return (isEvent(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredEvents.indexOf(pkt.identifier) < 0);\n}\n/**\n * Indicate if the register code is an auxilliary register to support streaming.\n * @param code\n * @returns\n * @category Specification\n */\nfunction isOptionalReadingRegisterCode(code) {\n    const regs = [\n        exports.SystemReg.MinReading,\n        exports.SystemReg.MaxReading,\n        exports.SystemReg.ReadingError,\n        exports.SystemReg.ReadingResolution,\n        exports.SystemReg.StreamingPreferredInterval,\n    ];\n    return regs.indexOf(code) > -1;\n}\n/**\n * Indicates if the packet info represents an ``intensity`` register\n * @category Specification\n */\nfunction isIntensity(pkt) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == exports.SystemReg.Intensity;\n}\n/**\n * Indicates if the packet info represents a ``value`` register\n * @category Specification\n */\nfunction isValue(pkt) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == exports.SystemReg.Value;\n}\n/**\n * Indicates if the packet info represents a ``intensity`` or a ``value`` register\n * @category Specification\n */\nfunction isValueOrIntensity(pkt) {\n    return (pkt &&\n        pkt.kind == \"rw\" &&\n        (pkt.identifier == exports.SystemReg.Value ||\n            pkt.identifier == exports.SystemReg.Intensity));\n}\n/**\n * Indicates if the packet info represents an ``const`` register\n * @category Specification\n */\nfunction isConstRegister(pkt) {\n    return (pkt === null || pkt === void 0 ? void 0 : pkt.kind) == \"const\";\n}\n/**\n * Indicates if the packet info represents an ``event``\n * @category Specification\n */\nfunction isEvent(pkt) {\n    return pkt.kind == \"event\";\n}\n/**\n * Indicates if the packet info represents a ``command``\n * @category Specification\n */\nfunction isCommand(pkt) {\n    return pkt.kind == \"command\";\n}\n/**\n * Indicates if the packet info represents a ``pipe_report``\n * @category Specification\n */\nfunction isPipeReport(pkt) {\n    return pkt.kind == \"pipe_report\";\n}\n/**\n * Indicates if the `report` packet is the report specication of the `cmd` command.\n * @category Specification\n */\nfunction isReportOf(cmd, report) {\n    return (report.secondary &&\n        report.kind == \"report\" &&\n        cmd.kind == \"command\" &&\n        cmd.name == report.name);\n}\n/**\n * Indicates if the `report` packet is the *pipe* report specication of the `cmd` command.\n * @category Specification\n */\nfunction isPipeReportOf(cmd, pipeReport) {\n    return (pipeReport.kind == \"pipe_report\" &&\n        cmd.kind == \"command\" &&\n        cmd.pipeType &&\n        cmd.pipeType === pipeReport.pipeType);\n}\n/**\n * @internal\n */\nfunction isIntegerType(tp) {\n    return /^[ui]\\d+(\\.|$)/.test(tp) || tp == \"pipe_port\" || tp == \"bool\";\n}\n/**\n * @internal\n */\nfunction numberFormatFromStorageType(tp) {\n    switch (tp) {\n        case -1:\n            return exports.NumberFormat.Int8LE;\n        case 1:\n            return exports.NumberFormat.UInt8LE;\n        case -2:\n            return exports.NumberFormat.Int16LE;\n        case 2:\n            return exports.NumberFormat.UInt16LE;\n        case -4:\n            return exports.NumberFormat.Int32LE;\n        case 4:\n            return exports.NumberFormat.UInt32LE;\n        case -8:\n            return exports.NumberFormat.Int64LE;\n        case 8:\n            return exports.NumberFormat.UInt64LE;\n        case 0:\n            return null;\n        default:\n            return null;\n    }\n}\n/**\n * @internal\n */\nfunction numberFormatToStorageType(nf) {\n    switch (nf) {\n        case exports.NumberFormat.Int8LE:\n            return -1;\n        case exports.NumberFormat.UInt8LE:\n            return 1;\n        case exports.NumberFormat.Int16LE:\n            return -2;\n        case exports.NumberFormat.UInt16LE:\n            return 2;\n        case exports.NumberFormat.Int32LE:\n            return -4;\n        case exports.NumberFormat.UInt32LE:\n            return 4;\n        case exports.NumberFormat.Int64LE:\n            return -8;\n        case exports.NumberFormat.UInt64LE:\n            return 8;\n        default:\n            return null;\n    }\n}\n/**\n * @internal\n */\nfunction scaleIntToFloat(v, info) {\n    if (!info.shift)\n        return v;\n    if (info.shift < 0)\n        return v * (1 << -info.shift);\n    else\n        return v / (1 << info.shift);\n}\n/**\n * @internal\n */\nfunction scaleFloatToInt(v, info) {\n    if (!info.shift)\n        return v;\n    if (info.shift < 0)\n        return Math.round(v / (1 << -info.shift));\n    else\n        return Math.round(v * (1 << info.shift));\n}\n/**\n * @internal\n */\nfunction storageTypeRange(tp) {\n    if (tp == 0)\n        throw new Error(\"no range for 0\");\n    if (tp < 0) {\n        const v = Math.pow(2, -tp * 8 - 1);\n        return [-v, v - 1];\n    }\n    else {\n        const v = Math.pow(2, tp * 8);\n        return [0, v - 1];\n    }\n}\n/**\n * @internal\n */\nfunction clampToStorage(v, tp) {\n    const [min, max] = storageTypeRange(tp);\n    if (isNaN(v))\n        return 0;\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\n/**\n * @internal\n */\nfunction memberValueToString(value, info) {\n    if (value === undefined || value === null)\n        return \"\";\n    switch (info.type) {\n        case \"bytes\":\n            return toHex(value);\n        case \"string\":\n            return value;\n        default:\n            return \"\" + value;\n    }\n}\n/**\n * @internal\n */\nfunction tryParseMemberValue(text, info) {\n    if (!text)\n        return {};\n    if (info.type === \"string\")\n        return { value: text };\n    else if (info.type === \"pipe\")\n        return {};\n    // not supported\n    else if (info.type === \"bytes\") {\n        try {\n            return { value: fromHex(text) };\n        }\n        catch (e) {\n            return {\n                error: \"invalid hexadecimal format\",\n            };\n        }\n    }\n    else {\n        const n = isIntegerType(info.type) ? parseInt(text) : parseFloat(text);\n        if (isNaN(n))\n            return { error: \"invalid format\" };\n        else\n            return { value: n };\n    }\n}\n/**\n * Parses a device identifier into a buffer, returns undefined if invalid\n * @param id\n * @returns\n * @category Specification\n */\nfunction parseDeviceId(id) {\n    if (!id)\n        return undefined;\n    id = id.replace(/\\s/g, \"\");\n    if (id.length != 16 || !/^[a-f0-9]+$/i.test(id))\n        return undefined;\n    return fromHex(id);\n}\n\n// ASCII codes of characters\nconst ch_b = 98;\nconst ch_i = 105;\nconst ch_r = 114;\nconst ch_s = 115;\nconst ch_u = 117;\nconst ch_x = 120;\nconst ch_z = 122;\n//const ch_0 = 48\n//const ch_9 = 57\nconst ch_colon = 58;\nconst ch_sq_open = 91;\nconst ch_sq_close = 93;\nfunction numberFormatOfType(tp) {\n    switch (tp) {\n        case \"u8\":\n            return exports.NumberFormat.UInt8LE;\n        case \"u16\":\n            return exports.NumberFormat.UInt16LE;\n        case \"u32\":\n            return exports.NumberFormat.UInt32LE;\n        case \"i8\":\n            return exports.NumberFormat.Int8LE;\n        case \"i16\":\n            return exports.NumberFormat.Int16LE;\n        case \"i32\":\n            return exports.NumberFormat.Int32LE;\n        case \"f32\":\n            return exports.NumberFormat.Float32LE;\n        case \"f64\":\n            return exports.NumberFormat.Float64LE;\n        case \"i64\":\n            return exports.NumberFormat.Int64LE;\n        case \"u64\":\n            return exports.NumberFormat.UInt64LE;\n        default:\n            return null;\n    }\n}\nfunction bufferSlice(buf, start, end) {\n    return buf.slice(start, end);\n}\nclass TokenParser {\n    constructor(fmt) {\n        this.fmt = fmt;\n        this.fp = 0;\n    }\n    parse() {\n        this.div = 1;\n        this.isArray = false;\n        const fmt = this.fmt;\n        while (this.fp < fmt.length) {\n            let endp = this.fp;\n            while (endp < fmt.length && fmt.charCodeAt(endp) != 32)\n                endp++;\n            let word = fmt.slice(this.fp, endp);\n            this.fp = endp + 1;\n            if (!word)\n                continue;\n            const dotIdx = word.indexOf(\".\");\n            let c0 = word.charCodeAt(0);\n            // \"u10.6\" -> \"u16\", div = 1 << 6\n            if ((c0 == ch_i || c0 == ch_u) && dotIdx >= 0) {\n                const sz0 = parseInt(word.slice(1, dotIdx));\n                const sz1 = parseInt(word.slice(dotIdx + 1));\n                word = word[0] + (sz0 + sz1);\n                this.div = 1 << sz1;\n            }\n            const c1 = word.charCodeAt(1);\n            if (c1 == ch_sq_open) {\n                this.size = parseInt(word.slice(2));\n            }\n            else {\n                this.size = -1;\n            }\n            if (word.charCodeAt(word.length - 1) == ch_sq_close &&\n                word.charCodeAt(word.length - 2) == ch_sq_open) {\n                word = word.slice(0, -2);\n                this.isArray = true;\n            }\n            this.nfmt = numberFormatOfType(word);\n            this.word = word;\n            if (this.nfmt == null) {\n                if (c0 == ch_r) {\n                    if (c1 != ch_colon)\n                        c0 = 0;\n                }\n                else if (c0 == ch_s || c0 == ch_b || c0 == ch_x) {\n                    if (word.length != 1 && this.size == -1)\n                        c0 = 0;\n                }\n                else if (c0 == ch_z) {\n                    if (word.length != 1)\n                        c0 = 0;\n                }\n                else {\n                    c0 = 0;\n                }\n                if (c0 == 0)\n                    throw new Error(`invalid format: ${word}`);\n                this.c0 = c0;\n            }\n            else {\n                this.size = sizeOfNumberFormat(this.nfmt);\n                this.c0 = -1;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction jdunpackCore(buf, fmt, repeat) {\n    const repeatRes = repeat ? [] : null;\n    let res = [];\n    let off = 0;\n    let fp0 = 0;\n    const parser = new TokenParser(fmt);\n    if (repeat && buf.length == 0)\n        return [];\n    while (parser.parse()) {\n        if (parser.isArray && !repeat) {\n            res.push(jdunpackCore(bufferSlice(buf, off, buf.length), fmt.slice(fp0), 1));\n            return res;\n        }\n        fp0 = parser.fp;\n        let sz = parser.size;\n        const c0 = parser.c0;\n        if (c0 == ch_z) {\n            let endoff = off;\n            while (endoff < buf.length && buf[endoff] != 0)\n                endoff++;\n            sz = endoff - off;\n        }\n        else if (sz < 0) {\n            sz = buf.length - off;\n        }\n        if (parser.nfmt !== null) {\n            let v = getNumber(buf, parser.nfmt, off);\n            if (parser.div != 1)\n                v /= parser.div;\n            res.push(v);\n            off += parser.size;\n        }\n        else {\n            const subbuf = bufferSlice(buf, off, off + sz);\n            if (c0 == ch_z || c0 == ch_s) {\n                let zerop = 0;\n                while (zerop < subbuf.length && subbuf[zerop] != 0)\n                    zerop++;\n                res.push(bufferToString(bufferSlice(subbuf, 0, zerop)));\n            }\n            else if (c0 == ch_b) {\n                res.push(subbuf);\n            }\n            else if (c0 == ch_x) ;\n            else if (c0 == ch_r) {\n                res.push(jdunpackCore(subbuf, fmt.slice(fp0), 2));\n                break;\n            }\n            else {\n                throw new Error(`whoops`);\n            }\n            off += subbuf.length;\n            if (c0 == ch_z)\n                off++;\n        }\n        if (repeat && parser.fp >= fmt.length) {\n            parser.fp = 0;\n            if (repeat == 2) {\n                repeatRes.push(res);\n                res = [];\n            }\n            if (off >= buf.length)\n                break;\n        }\n    }\n    if (repeat == 2) {\n        if (res.length)\n            repeatRes.push(res);\n        return repeatRes;\n    }\n    else {\n        return res;\n    }\n}\n/**\n Unpacks a byte buffer into structured data as specified in the format string.\n See jdpack for format string reference.\n @category Data Packing\n*/\nfunction jdunpack(buf, fmt) {\n    if (!buf || !fmt)\n        return undefined;\n    // hot path for buffers\n    if (fmt === \"b\")\n        return [buf.slice(0)];\n    // hot path\n    const nf = numberFormatOfType(fmt);\n    if (nf !== null) {\n        const sz = sizeOfNumberFormat(nf);\n        if (buf.length < sz)\n            throw new Error(`size mistmatch, expected ${fmt} (${sz} bytes), got ${buf.length}`);\n        return [getNumber(buf, nf, 0)];\n    }\n    // slow path\n    return jdunpackCore(buf, fmt, 0);\n}\nfunction jdpackCore(trg, fmt, data, off) {\n    //console.log({ fmt, data })\n    let idx = 0;\n    const parser = new TokenParser(fmt);\n    while (parser.parse()) {\n        const c0 = parser.c0;\n        if (c0 == ch_x) {\n            // skip padding\n            off += parser.size;\n            continue;\n        }\n        const dataItem = data[idx++];\n        if (c0 == ch_r && dataItem) {\n            const fmt0 = fmt.slice(parser.fp);\n            for (const velt of dataItem) {\n                off = jdpackCore(trg, fmt0, velt, off);\n            }\n            break;\n        }\n        // use temporary variable to avoid a Gatsby build bug\n        let arr;\n        if (parser.isArray)\n            arr = dataItem;\n        else\n            arr = [dataItem];\n        for (const v of arr) {\n            if (parser.nfmt !== null) {\n                if (typeof v != \"number\")\n                    throw new Error(`expecting number, got ` + typeof v);\n                if (trg) {\n                    const st = numberFormatToStorageType(parser.nfmt);\n                    setNumber(trg, parser.nfmt, off, clampToStorage(Math.round(v * parser.div), st));\n                }\n                off += parser.size;\n            }\n            else {\n                let buf;\n                if (typeof v === \"string\") {\n                    if (c0 == ch_z)\n                        buf = stringToBuffer(v + \"\\u0000\");\n                    else if (c0 == ch_s)\n                        buf = stringToBuffer(v);\n                    else\n                        throw new Error(`unexpected string`);\n                }\n                else if (v && typeof v === \"object\" && v.length != null) {\n                    // assume buffer\n                    if (c0 == ch_b)\n                        buf = v;\n                    else\n                        throw new Error(`unexpected buffer`);\n                }\n                else {\n                    console.log({ parser, v });\n                    throw new Error(`expecting string or buffer`);\n                }\n                let sz = parser.size;\n                if (sz >= 0) {\n                    if (buf.length > sz)\n                        buf = bufferSlice(buf, 0, sz);\n                }\n                else {\n                    sz = buf.length;\n                }\n                if (trg)\n                    trg.set(buf, off);\n                off += sz;\n            }\n        }\n    }\n    if (data.length > idx)\n        throw new Error(`format '${fmt}' too short`);\n    return off;\n}\n/**\n\n* Format strings are space-separated sequences of type descriptions.\n* All numbers are understood to be little endian.\n* The following type descriptions are supported:\n*\n* - `u8`, `u16`, `u32` - unsigned, 1, 2, and 4 bytes long respectively\n* - `i8`, `i16`, `i32` - similar, but signed\n* - `b` - buffer until the end of input (has to be last)\n* - `s` - similar, but utf-8 encoded string\n* - `z` - NUL-terminated utf-8 string\n* - `b[10]` - 10 byte buffer (10 is just an example, here and below)\n* - `s[10]` - 10 byte utf-8 string; trailing NUL bytes (if any) are removed\n* - `x[10]` - 10 bytes of padding\n*\n* There is one more token, `r:`. The type descriptions following it are repeated in order\n* until the input buffer is exhausted.\n* When unpacking, fields after `r:` are repeated as an array of tuples.\n*\n* In case there's only a single field repeating,\n* it's also possible to append `[]` to its type, to get an array of values.\n*\n* @category Data Packing\n*/\nfunction jdpack(fmt, data) {\n    var _a;\n    if (!fmt || !data)\n        return undefined;\n    // hot path for buffers\n    if (fmt === \"b\")\n        return (_a = data[0]) === null || _a === void 0 ? void 0 : _a.slice(0);\n    // hot path\n    const nf = numberFormatOfType(fmt);\n    if (nf !== null) {\n        const buf = new Uint8Array(sizeOfNumberFormat(nf));\n        setNumber(buf, nf, 0, data[0]);\n        return buf;\n    }\n    // slow path\n    const len = jdpackCore(null, fmt, data, 0);\n    const res = new Uint8Array(len);\n    jdpackCore(res, fmt, data, 0);\n    return res;\n}\n/**\n * Checks if two packed values serialize to the same buffer\n * @param fmt packing format string\n * @param left left data\n * @param right right data\n * @returns true if both data serialize to the same buffer\n * @category Data Packing\n */\nfunction jdpackEqual(fmt, left, right) {\n    if (!left !== !right)\n        return false;\n    if (!left)\n        return true;\n    const leftBuffer = jdpack(fmt, left);\n    const rightBuffer = jdpack(fmt, right);\n    return bufferEq(leftBuffer, rightBuffer);\n}\n\n/** @internal */\nexports.RegisterType = void 0;\n(function (RegisterType) {\n    RegisterType[RegisterType[\"UInt\"] = 0] = \"UInt\";\n    RegisterType[RegisterType[\"UIntHex\"] = 1] = \"UIntHex\";\n    RegisterType[RegisterType[\"Int\"] = 2] = \"Int\";\n    RegisterType[RegisterType[\"IntArray\"] = 3] = \"IntArray\";\n    RegisterType[RegisterType[\"String\"] = 4] = \"String\";\n})(exports.RegisterType || (exports.RegisterType = {}));\nfunction prettyUnit(u) {\n    switch (u) {\n        case \"us\":\n            return \"μs\";\n        case \"C\":\n        case \"Cel\":\n            return \"°C\";\n        case \"K\":\n            return \"°K\";\n        case \"/\":\n        case \"#\":\n            return \"\";\n        default:\n            return u;\n    }\n}\nfunction prettyMemberUnit(specification, showDataType) {\n    const parts = [\n        prettyUnit(specification.unit),\n        isSet(specification.typicalMin) &&\n            `[${specification.typicalMin}, ${specification.typicalMax}]`,\n        isSet(specification.absoluteMin) &&\n            `absolute [${specification.absoluteMin}, ${specification.absoluteMax}]`,\n    ].filter(f => isSet(f) && f);\n    if (showDataType)\n        parts.unshift(specification.type);\n    const helperText = parts.join(\", \");\n    return helperText;\n}\nfunction prettySize(b) {\n    b = b | 0;\n    if (b < 1000)\n        return b + \"b\";\n    else if (b < 1000000)\n        return roundWithPrecision(b / 1e3, 1) + \"kb\";\n    else\n        return roundWithPrecision(b / 1e6, 1) + \"mb\";\n}\nfunction prettyDuration(ms) {\n    let s = ms / 1000;\n    if (s < 1)\n        return `${roundWithPrecision(s, 2)}s`;\n    if (s < 10)\n        return `${roundWithPrecision(s, 1)}s`;\n    if (s < 60)\n        return `${Math.floor(s)}s`;\n    let r = \"\";\n    const d = Math.floor(s / (24 * 3600));\n    if (d > 0) {\n        r += d + \":\";\n        s -= d * (24 * 3600);\n    }\n    const h = Math.floor(s / 3600);\n    if (h > 0) {\n        r += h + \":\";\n        s -= h * 3600;\n    }\n    const m = Math.floor(s / 60);\n    if (d > 0 || h > 0 || m > 0) {\n        r += m + \":\";\n        s -= m * 60;\n    }\n    r += Math.floor(s);\n    return r;\n}\nfunction prettyMicroDuration(us) {\n    if (us < 1000)\n        return `${us}${prettyUnit(\"us\")}`;\n    else\n        return prettyDuration(us / 1000);\n}\n// 2 letter + 2 digit ID; 1.8%/0.3%/0.07%/0.015% collision probability among 50/20/10/5 devices\nfunction shortDeviceId(devid) {\n    const h = hash(fromHex(devid), 30);\n    return (String.fromCharCode(0x41 + (h % 26)) +\n        String.fromCharCode(0x41 + (idiv(h, 26) % 26)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26) % 10)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26 * 10) % 10)));\n}\nfunction decodeMember(service, pktInfo, member, pkt, offset) {\n    var _a;\n    if (!member)\n        return null;\n    if (pkt.data.length <= offset)\n        return null;\n    let numValue = undefined;\n    let scaledValue = undefined;\n    let value = undefined;\n    let humanValue = undefined;\n    let size = Math.abs(member.storage);\n    const enumInfo = service === null || service === void 0 ? void 0 : service.enums[member.type];\n    const isInt = isIntegerType(member.type) || !!enumInfo;\n    if (member.isFloat && (size == 4 || size == 8)) {\n        if (size == 4)\n            numValue = pkt.getNumber(exports.NumberFormat.Float32LE, offset);\n        else\n            numValue = pkt.getNumber(exports.NumberFormat.Float64LE, offset);\n        value = scaledValue = numValue;\n        if (Math.abs(value) < 10)\n            humanValue = value.toFixed(5);\n        else if (Math.abs(value) < 1000)\n            humanValue = value.toFixed(3);\n        else if (Math.abs(value) < 100000)\n            humanValue = value.toFixed(2);\n        else\n            humanValue = \"\" + value;\n        if (member.unit)\n            humanValue += prettyUnit(member.unit);\n    }\n    else if (!isInt) {\n        const buf = size\n            ? pkt.data.slice(offset, offset + size)\n            : pkt.data.slice(offset);\n        if (member.type == \"string\") {\n            try {\n                value = fromUTF8(uint8ArrayToString(buf));\n            }\n            catch (_b) {\n                // invalid UTF8\n                value = uint8ArrayToString(buf);\n            }\n            humanValue = JSON.stringify(value).replace(/\\\\u0000/g, \"\\\\0\");\n        }\n        else if (member.type == \"pipe\") {\n            value = buf;\n            const devid = toHex(buf.slice(0, 8));\n            const port = read16(buf, 8);\n            humanValue = \"pipe to \" + shortDeviceId(devid) + \" port:\" + port;\n            // + \" [\" + toHex(buf.slice(10)) + \"]\"\n            if ((_a = pkt === null || pkt === void 0 ? void 0 : pkt.device) === null || _a === void 0 ? void 0 : _a.bus) {\n                const trg = pkt.device.bus.device(devid, true);\n                if (trg)\n                    trg.port(port).pipeType =\n                        (service === null || service === void 0 ? void 0 : service.shortId) + \".\" + pktInfo.pipeType + \".report\";\n            }\n        }\n        else {\n            value = buf;\n            humanValue = hexDump(buf);\n        }\n        size = buf.length;\n    }\n    else {\n        const fmt = numberFormatFromStorageType(member.storage);\n        numValue = pkt.getNumber(fmt, offset);\n        value = scaledValue = scaleIntToFloat(numValue, member);\n        if (pkt.device && member.type == \"pipe_port\")\n            pkt.device.port(value).pipeType =\n                (service === null || service === void 0 ? void 0 : service.shortId) + \".\" + pktInfo.pipeType + \".command\";\n        if (enumInfo) {\n            if (enumInfo.isFlags) {\n                humanValue = \"\";\n                let curr = numValue;\n                for (const key of Object.keys(enumInfo.members)) {\n                    const val = enumInfo.members[key];\n                    if ((curr & val) == val) {\n                        if (humanValue)\n                            humanValue += \" | \";\n                        humanValue += key;\n                        curr &= ~val;\n                    }\n                }\n                if (curr) {\n                    if (humanValue)\n                        humanValue += \" | \";\n                    humanValue += hexNum(curr);\n                }\n            }\n            else {\n                humanValue = reverseLookup(enumInfo.members, numValue);\n            }\n        }\n        else if (member.type == \"bool\") {\n            value = !!numValue;\n            humanValue = value ? \"true\" : \"false\";\n        }\n        else if (member.unit === \"ms\")\n            humanValue = prettyDuration(value);\n        else if (member.unit === \"us\")\n            humanValue = prettyMicroDuration(value);\n        else if (member.unit || scaledValue != numValue) {\n            // don't show so much digits\n            let v = scaledValue;\n            if (member.unit)\n                v = roundWithPrecision(v, 3);\n            humanValue = \"\" + v;\n            if (member.unit)\n                humanValue += prettyUnit(member.unit);\n        }\n        else {\n            humanValue = scaledValue + \"\";\n            if ((scaledValue | 0) == scaledValue &&\n                (!member.unit || scaledValue >= 15)) {\n                if (!member.unit)\n                    humanValue = hexNum(scaledValue);\n                else\n                    humanValue += \" (\" + hexNum(scaledValue) + \")\";\n            }\n            else if (scaledValue && member.storage == 8) {\n                const did = toHex(pkt.data.slice(offset, offset + 8));\n                humanValue += ` (${did} / ${shortDeviceId(did)})`;\n            }\n        }\n    }\n    return {\n        value,\n        numValue,\n        scaledValue,\n        humanValue,\n        description: member.name +\n            \":\" +\n            (!humanValue\n                ? \"?\"\n                : humanValue.indexOf(\"\\n\") >= 0\n                    ? \"\\n\" + humanValue.replace(/^/gm, \"      \")\n                    : \" \" + humanValue),\n        info: member,\n        size,\n    };\n}\nfunction valueToFlags(enumInfo, value) {\n    const r = [];\n    const curr = value;\n    for (const key of Object.keys(enumInfo.members)) {\n        const val = enumInfo.members[key];\n        if (curr & val) {\n            r.push(val);\n        }\n    }\n    return r;\n}\nfunction flagsToValue(values) {\n    return values.reduce((prev, cur) => prev | cur, 0);\n}\nfunction decodeMembers(service, pktInfo, pkt, off = 0) {\n    const fields = pktInfo.fields.slice(0);\n    let idx = fields.findIndex(f => f.startRepeats);\n    if (idx >= 0) {\n        if (fields.some(f => !f.storage))\n            throw new Error(\"zero-sized field in repeats:\");\n        let sz = 0;\n        for (const f of fields)\n            sz += Math.abs(f.storage);\n        // make sure we have enough fields to decode all data\n        while (sz <= pkt.data.length) {\n            const f = fields[idx++];\n            sz += Math.abs(f.storage);\n            fields.push(f);\n        }\n    }\n    return fields\n        .map(mem => {\n        const decoded = decodeMember(service, pktInfo, mem, pkt, off);\n        if (decoded)\n            off += decoded.size;\n        return decoded;\n    })\n        .filter(info => !!info);\n}\nfunction wrapDecodedMembers(decoded) {\n    if (decoded.length == 0)\n        return \" {}\";\n    else if (decoded.length == 1 && decoded[0].description.length < 60)\n        return \" { \" + decoded[0].description + \" }\";\n    else\n        return (\" {\\n\" + decoded.map(d => \"    \" + d.description).join(\"\\n\") + \"\\n}\");\n}\nfunction syntheticPktInfo(kind, addr) {\n    return {\n        kind,\n        identifier: addr,\n        name: hexNum(addr),\n        description: \"\",\n        fields: [\n            {\n                name: \"_\",\n                type: \"bytes\",\n                storage: 0,\n            },\n        ],\n    };\n}\nfunction decodeRegister(service, pkt) {\n    const isSet = pkt.isRegisterSet;\n    const isGet = pkt.isRegisterGet;\n    if (isSet == isGet)\n        return null;\n    let error = \"\";\n    const addr = pkt.serviceCommand & CMD_REG_MASK;\n    let regInfo = service === null || service === void 0 ? void 0 : service.packets.find(p => isRegister(p) && p.identifier == addr);\n    if (!regInfo) {\n        regInfo = syntheticPktInfo(\"rw\", addr);\n        error = `unable to decode register`;\n    }\n    const decoded = decodeMembers(service, regInfo, pkt);\n    if (regInfo.packFormat && pkt.data.length) {\n        try {\n            const recoded = toHex(jdpack(regInfo.packFormat, jdunpack(pkt.data, regInfo.packFormat)));\n            if (recoded !== undefined && recoded !== toHex(pkt.data)) {\n                error = `invalid data packing, ${toHex(pkt.data)} recoded to ${recoded}`;\n            }\n        }\n        catch (e) {\n            error = `invalid data packing, ${e.message}`;\n        }\n    }\n    let description = \"\";\n    if (decoded.length == 0)\n        description = regInfo.name;\n    else if (decoded.length == 1)\n        description = regInfo.name + \": \" + decoded[0].humanValue;\n    else\n        description = wrapDecodedMembers(decoded);\n    if (isGet)\n        description = \"GET \" + description;\n    else\n        description = \"SET \" + description;\n    return {\n        service,\n        info: regInfo,\n        decoded,\n        description,\n        error,\n    };\n}\nfunction decodeEvent(service, pkt) {\n    if (pkt.isCommand || !pkt.isEvent)\n        return null;\n    const evCode = pkt.eventCode;\n    const evInfo = (service === null || service === void 0 ? void 0 : service.packets.find(p => p.kind == \"event\" && p.identifier == evCode)) || syntheticPktInfo(\"event\", evCode);\n    const decoded = decodeMembers(service, evInfo, pkt);\n    const description = `EVENT[${pkt.eventCounter}] ${evInfo.name}` +\n        wrapDecodedMembers(decoded);\n    return {\n        service,\n        info: evInfo,\n        decoded,\n        description,\n    };\n}\nfunction decodeCommand(service, pkt) {\n    const kind = pkt.isCommand ? \"command\" : \"report\";\n    const cmdInfo = (service === null || service === void 0 ? void 0 : service.packets.find(p => p.kind == kind && p.identifier == pkt.serviceCommand)) || syntheticPktInfo(kind, pkt.serviceCommand);\n    const decoded = decodeMembers(service, cmdInfo, pkt);\n    const description = (pkt.isCommand ? \"CMD \" : \"REPORT \") +\n        cmdInfo.name +\n        wrapDecodedMembers(decoded);\n    return {\n        service,\n        info: cmdInfo,\n        decoded,\n        description,\n    };\n}\nfunction decodePacket(service, pkt) {\n    const decoded = decodeRegister(service, pkt) ||\n        decodeEvent(service, pkt) ||\n        decodeCommand(service, pkt);\n    return decoded;\n}\nfunction decodePipe(pkt) {\n    const cmd = pkt.serviceCommand;\n    const pinfo = pkt.device.port(cmd >> PIPE_PORT_SHIFT);\n    if (!pinfo.pipeType)\n        return null;\n    const [servId, pipeType, dir] = pinfo.pipeType.split(/\\./);\n    const service = serviceSpecificationFromName(servId);\n    if (!service)\n        return null;\n    const meta = !!(cmd & PIPE_METADATA_MASK);\n    const candidates = service.packets\n        .filter(p => p.pipeType == pipeType &&\n        /pipe/.test(p.kind) &&\n        /meta/.test(p.kind) == meta &&\n        /command/.test(p.kind) == (dir == \"command\"))\n        .filter(p => !meta || pkt.getNumber(exports.NumberFormat.UInt16LE, 0) == p.identifier);\n    const cmdInfo = candidates[0];\n    if (cmdInfo) {\n        const decoded = decodeMembers(service, cmdInfo, pkt, meta ? 4 : 0);\n        const description = cmdInfo.kind.toUpperCase() +\n            \" \" +\n            cmdInfo.name +\n            wrapDecodedMembers(decoded);\n        return {\n            service,\n            info: cmdInfo,\n            decoded,\n            description,\n        };\n    }\n    return null;\n}\nfunction decodePacketData(pkt) {\n    try {\n        if (pkt.device && pkt.isPipe) {\n            const info = decodePipe(pkt);\n            if (info)\n                return info;\n        }\n        const serviceClass = pkt.serviceClass;\n        const service = serviceSpecificationFromClassIdentifier(serviceClass);\n        return decodePacket(service, pkt);\n    }\n    catch (error) {\n        console.error(error, {\n            error,\n            pkt,\n            data: toHex(pkt.data),\n        });\n        throw error;\n    }\n}\nfunction reverseLookup(map, n) {\n    for (const k of Object.keys(map)) {\n        if (map[k] == n)\n            return k;\n    }\n    return hexNum(n);\n}\nfunction serviceClass(name) {\n    const serv = serviceSpecificationFromName(name);\n    return serv ? serv.classIdentifier : -1;\n}\nfunction serviceName(serviceClass) {\n    if (!isSet(serviceClass))\n        return \"?\";\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass);\n    return serv ? serv.name.toUpperCase() : \"?\";\n}\nfunction serviceShortIdOrClass(serviceClass) {\n    if (!isSet(serviceClass))\n        return \"?\";\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass);\n    return (serv === null || serv === void 0 ? void 0 : serv.shortId) || `0x${serviceClass.toString(16)}`;\n}\nfunction deviceServiceName(pkt) {\n    var _a, _b;\n    const srv_class = (_a = pkt === null || pkt === void 0 ? void 0 : pkt.device) === null || _a === void 0 ? void 0 : _a.serviceClassAt(pkt.serviceIndex);\n    const serv_id = serviceName(srv_class);\n    return `${((_b = pkt === null || pkt === void 0 ? void 0 : pkt.device) === null || _b === void 0 ? void 0 : _b.shortId) || \"?\"}/${serv_id}:${pkt.serviceIndex}`;\n}\nfunction commandName(n, serviceClass) {\n    var _a, _b, _c, _d;\n    let pref = \"\";\n    if ((n & CMD_TOP_MASK) == CMD_SET_REG)\n        pref = \"SET[\";\n    else if ((n & CMD_TOP_MASK) == CMD_GET_REG)\n        pref = \"GET[\";\n    if (pref) {\n        const reg = n & CMD_REG_MASK;\n        let regName = (_a = exports.SystemReg[reg]) === null || _a === void 0 ? void 0 : _a.toLowerCase(); // try reserved registers first, fast path\n        if (regName === undefined) {\n            const serviceSpec = serviceSpecificationFromClassIdentifier(serviceClass);\n            regName = (_b = serviceSpec === null || serviceSpec === void 0 ? void 0 : serviceSpec.packets.find(pkt => isRegister(pkt) && pkt.identifier === reg)) === null || _b === void 0 ? void 0 : _b.name;\n        }\n        return (pref +\n            (regName !== undefined ? regName : `x${reg.toString(16)}`) +\n            \"]\");\n    }\n    let r = (_c = exports.SystemCmd[n]) === null || _c === void 0 ? void 0 : _c.toLowerCase();\n    if (r === undefined) {\n        const serviceSpec = serviceSpecificationFromClassIdentifier(serviceClass);\n        r = (_d = serviceSpec === null || serviceSpec === void 0 ? void 0 : serviceSpec.packets.find(pkt => pkt.kind === \"command\" && pkt.identifier === n)) === null || _d === void 0 ? void 0 : _d.name;\n    }\n    return r;\n}\nfunction num2str(n) {\n    return n + \" (0x\" + n.toString(16) + \")\";\n}\nfunction toAscii(d) {\n    let r = \"\";\n    for (let i = 0; i < d.length; ++i) {\n        const c = d[i];\n        if (c < 32 || c >= 128)\n            r += \".\";\n        else\n            r += String.fromCharCode(c);\n    }\n    return r;\n}\nfunction hexDump(d) {\n    const chunk = 32;\n    if (d.length <= chunk)\n        return toHex(d) + \"\\u00A0|\\u00A0\" + toAscii(d);\n    const a = toArray(d);\n    let r = \"\";\n    for (let i = 0; i < d.length; i += chunk) {\n        if (i + chunk >= d.length) {\n            let s = toHex(a.slice(i));\n            while (s.length < chunk * 2)\n                s += \"  \";\n            r += s + \"\\u00A0|\\u00A0\" + toAscii(a.slice(i));\n        }\n        else {\n            r += hexDump(a.slice(i, i + chunk)) + \"\\n\";\n        }\n    }\n    return r;\n}\nfunction printPacket(pkt, opts = {}) {\n    const frame_flags = pkt.frameFlags;\n    const devname = pkt.friendlyDeviceName;\n    const service_name = pkt.friendlyServiceName;\n    const cmdname = pkt.friendlyCommandName;\n    const sender = pkt.sender;\n    let pdesc = `${devname}/${service_name}: ${cmdname}; sz=${pkt.size}`;\n    if (frame_flags & JD_FRAME_FLAG_COMMAND)\n        pdesc = \"to \" + pdesc;\n    else\n        pdesc = \"from \" + pdesc;\n    if (frame_flags & JD_FRAME_FLAG_ACK_REQUESTED)\n        pdesc = `[ack:${hexNum(pkt.crc)}] ` + pdesc;\n    const d = pkt.data;\n    if (pkt.device &&\n        pkt.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n        pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n        if (pkt.device.lastServiceUpdate < pkt.timestamp) {\n            if (opts.skipRepeatedAnnounce)\n                return \"\";\n            else\n                pdesc = \" ====== \" + pdesc;\n        }\n        else {\n            const services = [];\n            for (const sc of pkt.device.serviceClasses)\n                services.push(serviceName(sc));\n            pdesc += \"; \" + \"Announce services: \" + services.join(\", \");\n        }\n    }\n    else {\n        const decoded = pkt.decoded;\n        if (decoded) {\n            pdesc += \"; \" + decoded.description;\n        }\n        else if (0 < d.length && d.length <= 4) {\n            const v0 = pkt.uintData, v1 = pkt.intData;\n            pdesc += \"; \" + num2str(v0);\n            if (v0 != v1)\n                pdesc += \"; signed: \" + num2str(v1);\n        }\n        else if (d.length) {\n            pdesc += \"; \" + hexDump(d);\n        }\n    }\n    if (sender)\n        pdesc += `; ${sender}`;\n    return ((!isNaN(pkt.timestamp) && (opts === null || opts === void 0 ? void 0 : opts.showTime)\n        ? Math.round(pkt.timestamp) + \"ms: \"\n        : \"\") + pdesc);\n}\n\nconst { warn: warn$1 } = console;\n/**\n * A Jacdac packet\n * @category JDOM\n */\nclass Packet {\n    constructor() {\n        this._meta = undefined; // accesory data used by clients\n        this.key = Packet._nextKey++;\n    }\n    static fromBinary(data, timestamp) {\n        if (!data || data.length > 252)\n            return undefined;\n        const p = new Packet();\n        p._header = data.slice(0, JD_SERIAL_HEADER_SIZE);\n        p._data = data.slice(JD_SERIAL_HEADER_SIZE, JD_SERIAL_HEADER_SIZE + p.size);\n        if (timestamp !== undefined)\n            p.timestamp = timestamp;\n        return p;\n    }\n    static from(service_command, data) {\n        const p = new Packet();\n        p._header = new Uint8Array(JD_SERIAL_HEADER_SIZE);\n        p.data = data;\n        p.serviceCommand = service_command;\n        return p;\n    }\n    static onlyHeader(service_command) {\n        return Packet.from(service_command, new Uint8Array(0));\n    }\n    toBuffer() {\n        // compute correct framing and CRC\n        const res = bufferConcat(this._header, this._data);\n        res[2] = this._data.length + 4;\n        write16(res, 0, crc(res.slice(2)));\n        return res;\n    }\n    get header() {\n        return this._header.slice(0);\n    }\n    get deviceIdentifier() {\n        return toHex(this._header.slice(4, 4 + 8));\n    }\n    set deviceIdentifier(id) {\n        const idb = fromHex(id);\n        if (idb.length != 8)\n            throwError(\"Invalid id\");\n        if (this.isMultiCommand)\n            throwError(\"Invalid multicast\");\n        this._header.set(idb, 4);\n        this._decoded = undefined;\n    }\n    get frameFlags() {\n        return this._header[3];\n    }\n    set frameFlags(v) {\n        this._header[3] = v;\n    }\n    get isMultiCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS);\n    }\n    get size() {\n        return this._header[12];\n    }\n    get requiresAck() {\n        return this.frameFlags & JD_FRAME_FLAG_ACK_REQUESTED ? true : false;\n    }\n    set requiresAck(ack) {\n        if (ack != this.requiresAck)\n            this._header[3] ^= JD_FRAME_FLAG_ACK_REQUESTED;\n        this._decoded = undefined;\n    }\n    get serviceIndex() {\n        return this._header[13] & JD_SERVICE_INDEX_MASK;\n    }\n    set serviceIndex(value) {\n        if (value == null)\n            throw new Error(\"service_index not set\");\n        this._header[13] =\n            (this._header[13] & JD_SERVICE_INDEX_INV_MASK) | value;\n        this._decoded = undefined;\n    }\n    get serviceClass() {\n        var _a;\n        if (this.isMultiCommand)\n            return read32(this._header, 4);\n        return (_a = this.device) === null || _a === void 0 ? void 0 : _a.serviceClassAt(this.serviceIndex);\n    }\n    get crc() {\n        return read16(this._header, 0);\n    }\n    get serviceCommand() {\n        return read16(this._header, 14);\n    }\n    set serviceCommand(cmd) {\n        write16(this._header, 14, cmd);\n        this._decoded = undefined;\n    }\n    get isRegisterSet() {\n        return this.serviceCommand >> 12 == CMD_SET_REG >> 12;\n    }\n    get isRegisterGet() {\n        return this.serviceCommand >> 12 == CMD_GET_REG >> 12;\n    }\n    // TODO rename to registerCode\n    get registerIdentifier() {\n        if (!this.isRegisterGet && !this.isRegisterSet)\n            return undefined;\n        return this.serviceCommand & CMD_REG_MASK;\n    }\n    get isEvent() {\n        return (this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL &&\n            (this.serviceCommand & CMD_EVENT_MASK) !== 0);\n    }\n    get eventCode() {\n        return this.isEvent\n            ? this.serviceCommand & CMD_EVENT_CODE_MASK\n            : undefined;\n    }\n    get eventCounter() {\n        return this.isEvent\n            ? (this.serviceCommand >> CMD_EVENT_COUNTER_POS) &\n                CMD_EVENT_COUNTER_MASK\n            : undefined;\n    }\n    get isCRCAck() {\n        return this.serviceIndex === JD_SERVICE_INDEX_CRC_ACK;\n    }\n    get isPipe() {\n        return this.serviceIndex === JD_SERVICE_INDEX_PIPE;\n    }\n    get pipePort() {\n        return this.isPipe && this.serviceCommand >> PIPE_PORT_SHIFT;\n    }\n    get pipeCount() {\n        return this.isPipe && this.serviceCommand & PIPE_COUNTER_MASK;\n    }\n    get data() {\n        return this._data;\n    }\n    set data(buf) {\n        if (buf.length > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw Error(`jacdac packet length too large, ${buf.length} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`);\n        this._header[12] = buf.length;\n        this._data = buf;\n        this._decoded = undefined;\n    }\n    jdunpack(fmt) {\n        return (this._data && fmt && jdunpack(this._data, fmt)) || [];\n    }\n    get uintData() {\n        let buf = this._data;\n        if (buf.length == 0)\n            return undefined;\n        if (buf.length < 4)\n            buf = bufferConcat(buf, new Uint8Array(4));\n        if (buf.length == 8)\n            return read32(buf, 0) + read32(buf, 4) * 0x100000000;\n        return read32(buf, 0);\n    }\n    get stringData() {\n        return this._data && bufferToString(this._data);\n    }\n    get intData() {\n        let fmt;\n        switch (this._data.length) {\n            case 0:\n                return undefined;\n            case 1:\n                fmt = exports.NumberFormat.Int8LE;\n                break;\n            case 2:\n            case 3:\n                fmt = exports.NumberFormat.Int16LE;\n                break;\n            default:\n                fmt = exports.NumberFormat.Int32LE;\n                break;\n        }\n        return this.getNumber(fmt, 0);\n    }\n    get isAnnounce() {\n        return (this.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            this.isReport &&\n            this.serviceCommand == exports.SystemCmd.Announce);\n    }\n    get isRepeatedAnnounce() {\n        var _a;\n        return (this.isAnnounce && ((_a = this.device) === null || _a === void 0 ? void 0 : _a.lastServiceUpdate) < this.timestamp);\n    }\n    get decoded() {\n        if (!this._decoded)\n            this._decoded = decodePacketData(this);\n        return this._decoded;\n    }\n    get meta() {\n        if (!this._meta)\n            this._meta = {};\n        return this._meta;\n    }\n    clone() {\n        const pkt = new Packet();\n        pkt._header = this._header.slice();\n        pkt._data = this._data.slice();\n        pkt.timestamp = this.timestamp;\n        return pkt;\n    }\n    cloneForDevice(deviceId, serviceIndex) {\n        const idb = fromHex(deviceId);\n        if (idb.length != 8)\n            throwError(\"Invalid id\");\n        if (!this.isMultiCommand)\n            throwError(\"Must be multi command\");\n        const pkt = Packet.fromBinary(this.toBuffer(), this.timestamp);\n        pkt.frameFlags &= ~JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS;\n        pkt._header.set(idb, 4);\n        pkt._decoded = undefined;\n        pkt.serviceIndex = serviceIndex;\n        return pkt;\n    }\n    compress(stripped) {\n        if (stripped.length == 0)\n            return;\n        let sz = -4;\n        for (const s of stripped) {\n            sz += s.length;\n        }\n        const data = new Uint8Array(sz);\n        this._header.set(stripped[0], 12);\n        data.set(stripped[0].slice(4), 0);\n        sz = stripped[0].length - 4;\n        for (const s of stripped.slice(1)) {\n            data.set(s, sz);\n            sz += s.length;\n        }\n        this._data = data;\n        this._decoded = undefined;\n    }\n    withFrameStripped() {\n        return bufferConcat(this._header.slice(12, 12 + 4), this._data);\n    }\n    getNumber(fmt, offset) {\n        return getNumber(this._data, fmt, offset);\n    }\n    get isCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_COMMAND);\n    }\n    set isCommand(value) {\n        if (value)\n            this._header[3] |= JD_FRAME_FLAG_COMMAND;\n        else\n            this._header[3] &= ~JD_FRAME_FLAG_COMMAND;\n        this._decoded = undefined;\n    }\n    get isReport() {\n        return !this.isCommand;\n    }\n    toString() {\n        let msg = `${shortDeviceId(this.deviceIdentifier)}/${this.serviceIndex}[${this.frameFlags}]: ${this.serviceCommand} sz=${this.size}`;\n        if (this.size < 20)\n            msg += \": \" + toHex(this.data);\n        else\n            msg += \": \" + toHex(this.data.slice(0, 20)) + \"...\";\n        return msg;\n    }\n    sendCoreAsync(bus) {\n        const buf = this.toBuffer();\n        // Here we're sending this packet as the only one in a frame, therefore we need to compute CRC (which toBuffer() does)\n        // There's no crc computation function on Packet, since it should be typically only applied to full frames.\n        // The crc field reads the CRC from the frame (which is useful eg for acks).\n        this._header[0] = buf[0];\n        this._header[1] = buf[1];\n        this._header[2] = buf[2];\n        return bus.sendPacketAsync(this);\n    }\n    sendReportAsync(dev) {\n        if (!dev)\n            return Promise.resolve();\n        this.deviceIdentifier = dev.deviceId;\n        return this.sendCoreAsync(dev.bus);\n    }\n    sendCmdAsync(dev) {\n        if (!dev)\n            return Promise.resolve();\n        this.deviceIdentifier = dev.deviceId;\n        this.isCommand = true;\n        return this.sendCoreAsync(dev.bus);\n    }\n    sendAsMultiCommandAsync(bus, service_class) {\n        this._header[3] |=\n            JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS | JD_FRAME_FLAG_COMMAND;\n        write32(this._header, 4, service_class);\n        write32(this._header, 8, 0);\n        return this.sendCoreAsync(bus);\n    }\n    static fromFrame(frame, timestamp) {\n        return frameToPackets(frame, timestamp);\n    }\n    static jdpacked(service_command, fmt, nums) {\n        return Packet.from(service_command, jdpack(fmt, nums));\n    }\n    // helpers\n    get friendlyDeviceName() {\n        var _a;\n        if (this.isMultiCommand)\n            return \"*\";\n        return ((_a = this.device) === null || _a === void 0 ? void 0 : _a.friendlyName) || this.deviceIdentifier;\n    }\n    get friendlyServiceName() {\n        let service_name;\n        if (this.isCRCAck) {\n            service_name = \"CRC-ACK\";\n        }\n        else if (this.isPipe) {\n            service_name = \"PIPE\";\n        }\n        else {\n            const serv_id = serviceName(this.serviceClass);\n            service_name = `${serv_id} (${this.serviceIndex})`;\n        }\n        return service_name;\n    }\n    get friendlyCommandName() {\n        const cmd = this.serviceCommand;\n        let cmdname;\n        if (this.isCRCAck) {\n            cmdname = hexNum(cmd);\n        }\n        else if (this.isPipe) {\n            cmdname = `port:${cmd >> PIPE_PORT_SHIFT} cnt:${cmd & PIPE_COUNTER_MASK}`;\n            if (cmd & PIPE_METADATA_MASK)\n                cmdname += \" meta\";\n            if (cmd & PIPE_CLOSE_MASK)\n                cmdname += \" close\";\n        }\n        else if (this.isEvent) {\n            const spec = serviceSpecificationFromClassIdentifier(this.serviceClass);\n            const code = this.eventCode;\n            const pkt = spec === null || spec === void 0 ? void 0 : spec.packets.find(pkt => pkt.kind === \"event\" && pkt.identifier === code);\n            cmdname = pkt === null || pkt === void 0 ? void 0 : pkt.name;\n        }\n        else if (this.isReport) {\n            const spec = serviceSpecificationFromClassIdentifier(this.serviceClass);\n            const code = this.serviceCommand & ~CMD_GET_REG;\n            const pkt = spec === null || spec === void 0 ? void 0 : spec.packets.find(pkt => pkt.kind === \"report\" && pkt.identifier === code);\n            cmdname = pkt === null || pkt === void 0 ? void 0 : pkt.name;\n        }\n        else {\n            cmdname = commandName(cmd, this.serviceClass);\n        }\n        return cmdname;\n    }\n}\nPacket._nextKey = 1;\nfunction frameToPackets(frame, timestamp) {\n    const size = frame[2] || 0;\n    if (frame.length < size + 12) {\n        warn$1(`${timestamp}ms: got only ${frame.length} bytes; expecting ${size + 12}`);\n    }\n    else if (size < 4) {\n        warn$1(`${timestamp}ms: empty packet`);\n    }\n    else {\n        const computed = crc(frame.slice(2, size + 12));\n        const actual = read16(frame, 0);\n        if (actual != computed)\n            console.error(`crc mismatch; sz=${size} got:${actual}, exp:${computed}`);\n        const res = [];\n        if (frame.length != 12 + frame[2])\n            warn$1(`${timestamp}ms: unexpected packet len: ${frame.length}`);\n        for (let ptr = 12; ptr < 12 + frame[2];) {\n            const psz = frame[ptr] + 4;\n            const sz = ALIGN(psz);\n            const pkt = bufferConcat(frame.slice(0, 12), frame.slice(ptr, ptr + psz));\n            if (ptr + psz > 12 + frame[2])\n                warn$1(`${timestamp}ms: invalid frame compression, res len=${res.length}`);\n            const p = Packet.fromBinary(pkt);\n            p.timestamp = timestamp;\n            res.push(p);\n            // only set req_ack flag on first packet - otherwise we would sent multiple acks\n            if (res.length > 1)\n                p.requiresAck = false;\n            ptr += sz;\n        }\n        return res;\n    }\n    return [];\n}\n\nconst TRACE_OVERSHOOT = 1.1;\n/**\n * Collect stack trace at the current execution position\n * @returns\n * @internal\n */\nfunction stack() {\n    return new Error().stack;\n}\n/**\n * @internal\n */\nfunction cleanStack(text) {\n    return text === null || text === void 0 ? void 0 : text.split(/\\n/g).slice(2).join(\"\\n\").replace(/webpack-internal:\\/\\/\\//g, \"\").replace(/https:\\/\\/microsoft\\.github\\.io\\/jacdac-docs/g, \"\");\n}\n/**\n * A sequence of packets.\n * @category Trace\n */\nclass Trace {\n    /**\n     * Constructs a new empty trace or from an existing list of packets\n     * @param packets list of packets\n     * @param description description of the trace\n     */\n    constructor(packets = [], options) {\n        this.packets = packets;\n        this.description = options === null || options === void 0 ? void 0 : options.description;\n        this.maxLength = options === null || options === void 0 ? void 0 : options.maxLength;\n    }\n    /**\n     * Number of packets in trace\n     */\n    get length() {\n        return this.packets.length;\n    }\n    /**\n     * Duration in milliseconds between the first and last packet.\n     */\n    get duration() {\n        if (!this.packets.length)\n            return 0;\n        return (this.packets[this.packets.length - 1].timestamp -\n            this.packets[0].timestamp);\n    }\n    /**\n     * Timestamp of the first packet, defaults to 0 if trace is empty.\n     */\n    get startTimestamp() {\n        var _a;\n        return ((_a = this.packets[0]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0;\n    }\n    /**\n     * Timestamp of the last packet, defaults to 0 if trace is empty.\n     */\n    get endTimestamp() {\n        var _a;\n        return ((_a = this.packets[this.packets.length - 1]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0;\n    }\n    /**\n     * Appends a packet to the trace\n     * @param packet packet to add\n     * @param maxLength If positive, prunes older packets when the length reaches maxLength\n     */\n    addPacket(packet) {\n        this.packets.push(packet);\n        if (this.maxLength > 0 &&\n            this.packets.length > this.maxLength * TRACE_OVERSHOOT) {\n            // 10% overshoot of max\n            this.packets = this.packets.slice(-this.maxLength);\n        }\n    }\n    /**\n     * Gets a text-rendered view of the trace\n     * @param length maximum number of elements\n     * @returns text where each line is a packet\n     */\n    serializeToText(length) {\n        var _a;\n        const start = ((_a = this.packets[0]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0;\n        let pkts = this.packets;\n        if (length > 0)\n            pkts = pkts.slice(-length);\n        const text = pkts.map(pkt => {\n            let t = `${roundWithPrecision(pkt.timestamp - start, 3)}\\t${toHex(pkt.toBuffer())}\\t${printPacket(pkt, {}).replace(/\\r?\\n/g, \" \")}`;\n            const trace = pkt.meta[META_TRACE];\n            if (trace)\n                t += \"\\n\" + cleanStack(trace);\n            return t;\n        });\n        if (this.description) {\n            text.unshift(this.description);\n            text.unshift(\"\");\n        }\n        return text.join(\"\\n\");\n    }\n}\n\nfunction normalizeEventNames(eventNames) {\n    if (!eventNames)\n        eventNames = [];\n    if (typeof eventNames === \"string\")\n        eventNames = [eventNames];\n    return eventNames;\n}\n/**\n * Given a node or set of nodes, generate a stable string that can be used to track dependencies in frameworks like React.\n * @param nodes\n * @returns\n * @category JDOM\n */\nfunction dependencyId(nodes) {\n    if (Array.isArray(nodes))\n        return (nodes === null || nodes === void 0 ? void 0 : nodes.map(node => (node === null || node === void 0 ? void 0 : node.nodeId) || \"?\").join(\",\")) || \"\";\n    else\n        return (nodes === null || nodes === void 0 ? void 0 : nodes.nodeId) || \"\";\n}\nlet nextNodeId = 0;\n/**\n * Base class for evented nodes in Jacdac\n * @category JDOM\n */\nclass JDEventSource {\n    /**\n     * @internal\n     */\n    constructor() {\n        /**\n         * Gets an internal unique node identifier, mostly used for debugging.\n         * @category JDOM\n         */\n        this.nodeId = nextNodeId++;\n        this.listeners = {};\n        /**\n         * Gets a counter of event emit calls.\n         * @category JDOM\n         */\n        this.eventStats = {};\n        /**\n         * Gets a counter map from events to new listener counts\n         * @category JDOM\n         */\n        this.newListenerStats = undefined;\n    }\n    /**\n     * Registers a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to register\n     * @returns current object instance\n     * @category JDOM\n     */\n    on(eventName, handler) {\n        if (!handler)\n            return this;\n        normalizeEventNames(eventName).forEach(eventName => this.addListenerInternal(eventName, handler, false));\n        return this;\n    }\n    /**\n     * Unregisters a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to unregister\n     * @returns current object instance\n     * @category JDOM\n     */\n    off(eventName, handler) {\n        normalizeEventNames(eventName).forEach(eventName => this.removeListenerInternal(eventName, handler));\n        return this;\n    }\n    /**\n     * Registers a handler for one or more events to run only once.\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to execute\n     * @returns current object instance\n     * @category JDOM\n     */\n    once(eventName, handler) {\n        normalizeEventNames(eventName).forEach(eventName => this.addListenerInternal(eventName, handler, true));\n        return this;\n    }\n    addListenerInternal(eventName, handler, once) {\n        if (!eventName || !handler) {\n            return;\n        }\n        const eventListeners = this.listeners[eventName] || (this.listeners[eventName] = []);\n        const listener = eventListeners.find(listener => listener.handler === handler);\n        if (listener) {\n            listener.once = !!once;\n            return;\n        }\n        eventListeners.push({\n            handler,\n            once: !!once,\n            // debug only collection of trace for leak detection\n            stackTrace: Flags.diagnostics && stack(),\n        });\n        this.emit(NEW_LISTENER, eventName, handler);\n        // diagnostics\n        if (Flags.diagnostics) {\n            if (!this.newListenerStats)\n                this.newListenerStats = {};\n            this.newListenerStats[eventName] =\n                (this.newListenerStats[eventName] || 0) + 1;\n        }\n    }\n    removeListenerInternal(eventName, handler) {\n        if (!eventName || !handler)\n            return;\n        const eventListeners = this.listeners[eventName];\n        if (eventListeners) {\n            for (let i = 0; i < eventListeners.length; ++i) {\n                const listener = eventListeners[i];\n                if (handler === listener.handler) {\n                    eventListeners.splice(i, 1);\n                    this.emit(REMOVE_LISTENER, eventName, handler);\n                    return;\n                }\n            }\n        }\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event named eventName,\n     * in the order they were registered, passing the supplied arguments to each.\n     * @param eventName\n     * @param args\n     * @category JDOM\n     */\n    emit(eventName, ...args) {\n        if (!eventName)\n            return false;\n        // track event stats\n        this.eventStats[eventName] = (this.eventStats[eventName] || 0) + 1;\n        const eventListeners = this.listeners[eventName];\n        if (!eventListeners || eventListeners.length == 0) {\n            // report unhandled errors\n            if (eventName == ERROR)\n                console.error(args[0]);\n            return false;\n        }\n        for (let i = 0; i < eventListeners.length; ++i) {\n            const listener = eventListeners[i];\n            const handler = listener.handler;\n            if (listener.once) {\n                eventListeners.splice(i, 1);\n                --i;\n            }\n            try {\n                // eslint-disable-next-line prefer-spread\n                handler.apply(null, args);\n            }\n            catch (e) {\n                // avoid recursive errors in error handler\n                if (eventName !== ERROR)\n                    this.emit(ERROR, e);\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets the number of listeners for a given event\n     * @param eventName name of the event\n     * @returns number of registered handlers\n     * @category JDOM\n     */\n    listenerCount(eventName) {\n        if (!eventName)\n            return 0;\n        const listeners = this.listeners[eventName];\n        return (listeners === null || listeners === void 0 ? void 0 : listeners.length) || 0;\n    }\n    /**\n     * Gets the list stack trace where an event was registered. Only enabled if ``Flags.debug`` is true.\n     * @param eventName name of the event\n     * @returns stack traces where a listener was added\n     * @category JDOM\n     */\n    listenerStackTraces(eventName) {\n        const listeners = this.listeners[eventName];\n        return listeners === null || listeners === void 0 ? void 0 : listeners.map(listener => listener.stackTrace);\n    }\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * @category JDOM\n     */\n    eventNames() {\n        return Object.keys(this.listeners);\n    }\n    /**\n     * Creates an observable from the given event\n     * @param eventName\n     * @category JDOM\n     */\n    observe(eventName) {\n        return new EventObservable(this, normalizeEventNames(eventName));\n    }\n    /**\n     * Subscribes to an event and returns the unsubscription handler\n     * @param eventName\n     * @param next\n     * @category JDOM\n     */\n    subscribe(eventName, next) {\n        const observer = this.observe(eventName);\n        return observer.subscribe({ next }).unsubscribe;\n    }\n    /**\n     * Gets a counter for the ``CHANGE`` event.\n     * @category JDOM\n     */\n    get changeId() {\n        return this.eventStats[CHANGE] || 0;\n    }\n}\nclass EventObservable {\n    constructor(eventEmitter, eventNames) {\n        this.eventEmitter = eventEmitter;\n        this.eventNames = eventNames;\n        //console.log(`obs`, this.eventNames)\n    }\n    subscribe(observer) {\n        //console.log(`on`, this.eventNames, observer)\n        if (observer.next)\n            this.eventEmitter.on(this.eventNames, observer.next);\n        if (observer.error)\n            this.eventEmitter.on(ERROR, observer.error);\n        // never completes\n        return {\n            unsubscribe: () => {\n                //console.log(`off`, this.eventNames, observer)\n                if (observer.next)\n                    this.eventEmitter.off(this.eventNames, observer.next);\n                if (observer.error)\n                    this.eventEmitter.off(ERROR, observer.error);\n            },\n        };\n    }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Base class for JDOM Node classes.\n * @category JDOM\n */\nclass JDNode extends JDEventSource {\n    constructor() {\n        super();\n    }\n    /**\n     * A human friendly name\n     * @category JDOM\n     */\n    get friendlyName() {\n        return this.name;\n    }\n    /**\n     * Gets a databag to store custom information\n     * @category JDOM\n     */\n    get nodeData() {\n        if (!this._nodeData)\n            this._nodeData = {};\n        return this._nodeData;\n    }\n    /**\n     * Emit event in current node and parent nodes\n     * @param event event to emit\n     * @param arg event arguments\n     * @category JDOM\n     */\n    emitPropagated(event, arg) {\n        let current = this;\n        while (current) {\n            current.emit(event, arg || this);\n            current = current.parent;\n        }\n    }\n    /**\n     * @hidden\n     */\n    toString() {\n        return this.friendlyName;\n    }\n}\n\n/**\n * Base class for JDOM service member classes.\n * @category JDOM\n */\nclass JDServiceMemberNode extends JDNode {\n    /**\n     * @internal\n     */\n    constructor(service, code, isPacket) {\n        super();\n        this._specification = null;\n        this.service = service;\n        this.code = code;\n        this.isPacket = isPacket;\n    }\n    /**\n     * Gets the node identifier in the JDOM tree\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.service.device.deviceId}:${this.service.serviceIndex.toString(16)}:${this.code.toString(16)}`;\n    }\n    /**\n     * Gets the event name, if specified.\n     * @category JDOM\n     */\n    get name() {\n        var _a;\n        return ((_a = this.specification) === null || _a === void 0 ? void 0 : _a.name) || this.code.toString(16);\n    }\n    /**\n     * Gets the qualitified event name, if specified.\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.service.qualifiedName}.${this.name}`;\n    }\n    /**\n     * Gets the event specification if known.\n     * @category Specification\n     */\n    get specification() {\n        var _a;\n        if (this._specification === null)\n            // lookup once\n            this._specification = (_a = this.service.specification) === null || _a === void 0 ? void 0 : _a.packets.find(packet => this.isPacket(packet) && packet.identifier === this.code);\n        return this._specification;\n    }\n    /**\n     * Gets the parent service client instance.\n     * @category JDOM\n     */\n    get parent() {\n        return this.service;\n    }\n    /**\n     * Gets the event friendly name.\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.service.friendlyName, this.name];\n        return parts.join(\".\");\n    }\n}\n\n/**\n * A Jacdac field.\n * @category JDOM\n */\nclass JDField extends JDNode {\n    /**\n     * @internal\n     */\n    constructor(member, index, specification) {\n        super();\n        this.member = member;\n        this.index = index;\n        this.specification = specification;\n    }\n    /**\n     * Gets the JDOM node identifier\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.member.service.device.deviceId}:${this.member.service.serviceIndex.toString(16)}:${this.member.code.toString(16)}:${this.index.toString(16)}`;\n    }\n    /**\n     * Gets the JDOM name\n     * @category JDOM\n     */\n    get name() {\n        return this.specification.name === \"_\"\n            ? this.member.specification.name\n            : this.specification.name;\n    }\n    /**\n     * @internal\n     */\n    get children() {\n        return [];\n    }\n    /**\n     * Gets the JDOM qualified name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.member.qualifiedName}.${this.name}`;\n    }\n    /**\n     * Gets the JDOM parent\n     * @category JDOM\n     */\n    get parent() {\n        return this.member;\n    }\n    /**\n     * Gets the JDOM friendly name\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.member.friendlyName];\n        if (this.specification.name !== \"_\")\n            parts.push(this.name);\n        return parts.join(\".\");\n    }\n    /**\n     * @internal\n     */\n    get dataTypeName() {\n        const parts = [this.member.service.specification.shortName, this.name];\n        return parts.join(\".\");\n    }\n    /**\n     * Gets the unit of the data stored in the field\n     * @category Data\n     */\n    get unit() {\n        return this.specification.unit;\n    }\n    /**\n     * Gets ``FIELD_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind() {\n        return FIELD_NODE_NAME;\n    }\n    /**\n     * @internal\n     */\n    get decoded() {\n        const decoded = this.member.decoded;\n        return decoded === null || decoded === void 0 ? void 0 : decoded.decoded[this.index];\n    }\n    /**\n     * Gets the decoded field value\n     * @category Data\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get value() {\n        var _a;\n        return (_a = this.decoded) === null || _a === void 0 ? void 0 : _a.value;\n    }\n}\n\n/**\n * Unrolls an array of packed values into a friendly object structure\n * @param data\n * @param fields\n * @returns\n * @category Data Packing\n */\nfunction unpackedToObject(data, fields, defaultName) {\n    if (!data || !fields)\n        return undefined;\n    const r = {};\n    for (let i = 0; i < data.length; ++i) {\n        const field = fields[i];\n        const value = data[i];\n        const { name, startRepeats } = field;\n        const prettyName = name === \"_\" && defaultName ? defaultName : name;\n        if (startRepeats) {\n            const repeatFields = fields.slice(i);\n            console.log({ value, repeatFields, data });\n            r[\"repeat\"] = value.map((rdata) => {\n                const r = {};\n                for (let i = 0; i < repeatFields.length; ++i) {\n                    const field = fields[i];\n                    const value = rdata[i];\n                    const { name } = field;\n                    const prettyName = name === \"_\" && defaultName ? defaultName : name;\n                    r[prettyName] = value;\n                }\n                return r;\n            });\n            break;\n        }\n        else\n            r[prettyName] = value;\n    }\n    return r;\n}\n/**\n * Converts an object structure into a flat packed data array\n * @param pkt\n * @param msg\n * @returns\n * @category Data Packing\n */\nfunction objectToUnpacked(pkt, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmsg) {\n    if (!msg)\n        return [];\n    if (typeof msg === \"number\" || typeof msg === \"string\")\n        return [msg];\n    else if (typeof msg === \"boolean\")\n        return [msg ? 1 : 0];\n    else if (Array.isArray(msg)) {\n        // assume a packaged layout\n        return msg;\n    }\n    else {\n        const { fields } = pkt;\n        const r = [];\n        for (let i = 0; i < fields.length; ++i) {\n            const field = fields[i];\n            const name = field.name === \"_\" ? pkt.name : field.name;\n            const value = msg[name];\n            if (field.startRepeats) {\n                const repeatFields = fields.slice(i);\n                r.push(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                value.map(vrow => {\n                    const arow = [];\n                    for (let j = 0; j < repeatFields.length; ++j) {\n                        const rfield = repeatFields[j];\n                        const rname = rfield.name;\n                        arow.push(vrow[rname]);\n                    }\n                    return arow;\n                }));\n                break;\n            }\n            else {\n                r.push(value);\n            }\n        }\n        return r;\n    }\n}\n\n/**\n * A Jacdac register client.\n * @category JDOM\n */\nclass JDRegister extends JDServiceMemberNode {\n    /**\n     * @internal\n     */\n    constructor(service, code) {\n        super(service, code, isRegister);\n        this._lastSetTimestamp = -Infinity;\n        this._lastGetTimestamp = -Infinity;\n        this._lastGetAttempts = 0;\n    }\n    /**\n     * Returns ``REGISTER_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind() {\n        return REGISTER_NODE_NAME;\n    }\n    /**\n     * Gets the list of field, if the specification is known\n     * @category JDOM\n     */\n    get fields() {\n        var _a;\n        if (!this._fields)\n            this._fields = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.fields.map((field, index) => new JDField(this, index, field));\n        return this._fields.slice();\n    }\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children() {\n        return this.fields;\n    }\n    /**\n     * Timestamp of the last ``register set`` packet\n     * @category Packets\n     */\n    get lastSetTimestamp() {\n        return this._lastSetTimestamp;\n    }\n    /**\n     * Timestamp of the last ``register get`` packet\n     * @category Packets\n     */\n    get lastGetTimestamp() {\n        return this._lastGetTimestamp;\n    }\n    /**\n     * Clears the get timestamp\n     * @internal\n     * @category Packets\n     */\n    clearGetTimestamp() {\n        this._lastGetTimestamp = -Infinity;\n    }\n    /**\n     * Number of attempts to send a ``get`` packet without response\n     * @category Packets\n     */\n    get lastGetAttempts() {\n        return this._lastGetAttempts;\n    }\n    /**\n     * Send a message to set the register value\n     * @param data packed data\n     * @param autoRefresh immediately send a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendSetAsync(data, autoRefresh) {\n        const cmd = CMD_SET_REG | this.code;\n        const pkt = Packet.from(cmd, data);\n        this._lastSetTimestamp = this.service.device.bus.timestamp;\n        let p = this.service.sendPacketAsync(pkt, this.service.registersUseAcks);\n        if (autoRefresh)\n            p = this.service.device.bus\n                .delay(50)\n                .then(() => this.sendGetAsync());\n        return p;\n    }\n    /**\n     * Requests the value of the register by sending a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendGetAsync() {\n        var _a;\n        if (((_a = this.specification) === null || _a === void 0 ? void 0 : _a.kind) === \"const\" && this.data !== undefined)\n            return Promise.resolve();\n        this._lastGetTimestamp = this.service.device.bus.timestamp;\n        this._lastGetAttempts++;\n        const cmd = CMD_GET_REG | this.code;\n        return this.service\n            .sendCmdAsync(cmd, undefined, this.service.registersUseAcks)\n            .then(() => {\n            this.emit(GET_ATTEMPT);\n        });\n    }\n    /**\n     * Send a message to set the register value\n     * @param values message to pack and send\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetPackedAsync(values, autoRefresh) {\n        var _a;\n        const fmt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packFormat;\n        if (!fmt)\n            throw new Error(\"unknown register data format\");\n        return this.sendSetAsync(jdpack(fmt, values), autoRefresh);\n    }\n    /**\n     * Sends a message to set the register value as a bpolean\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetBoolAsync(value, autoRefresh) {\n        return this.sendSetPackedAsync([value ? 1 : 0], autoRefresh);\n    }\n    /**\n     * Sends a message to set the register value as a string\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetStringAsync(value, autoRefresh) {\n        return this.sendSetPackedAsync([value || \"\"], autoRefresh);\n    }\n    /**\n     * Gets the raw data from the last report packet\n     * @category Data\n     */\n    get data() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.data;\n    }\n    /**\n     * Gets the timestamp when received the last report with data\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.timestamp;\n    }\n    /**\n     * Get the data from the last report packet, unpacked according to the specification.\n     * @category Data\n     */\n    get unpackedValue() {\n        var _a;\n        const d = this.data;\n        const fmt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packFormat;\n        return d && fmt && jdunpack(this.data, fmt);\n    }\n    /**\n     * Gets the data from the last report packet, unpacked and hydrated into an object.\n     * @category Data\n     */\n    get objectValue() {\n        const { specification } = this;\n        return unpackedToObject(this.unpackedValue, specification === null || specification === void 0 ? void 0 : specification.fields, specification.name);\n    }\n    /**\n     * Gets the data as a signed integer\n     * @category Data\n     */\n    get intValue() {\n        const d = this.data;\n        return d && intOfBuffer(d);\n    }\n    /**\n     * Gets the data as a unsigned integer\n     * @category Data\n     */\n    get uintValue() {\n        const d = this.data;\n        return d && uintOfBuffer(d);\n    }\n    /**\n     * Gets the data as a boolean\n     * @category Data\n     */\n    get boolValue() {\n        if (this.data === undefined)\n            return undefined;\n        return !!this.intValue;\n    }\n    /**\n     * Gets the data as a string\n     * @category Data\n     */\n    get stringValue() {\n        const buf = this.data;\n        if (buf === undefined)\n            return undefined;\n        let value;\n        try {\n            value = fromUTF8(uint8ArrayToString(buf));\n        }\n        catch (_a) {\n            // invalid UTF8\n            value = uint8ArrayToString(buf);\n        }\n        return value;\n    }\n    /**\n     * Gets a pretty printed represention of the data\n     * @category Data\n     */\n    get humanValue() {\n        var _a, _b;\n        return (_b = (_a = this.decoded) === null || _a === void 0 ? void 0 : _a.decoded) === null || _b === void 0 ? void 0 : _b.map(field => field.humanValue).join(\",\");\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        const d = this.data;\n        return `${this.id} ${d ? toHex(d) : \"\"}`;\n    }\n    /**\n     * @internal\n     */\n    get decoded() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.decoded;\n    }\n    /**\n     * Refresh the value of the register within a timeout\n     * @param skipIfValue don't refesh if any data if available\n     * @returns\n     * @category Data\n     */\n    refresh(skipIfValue) {\n        var _a;\n        // don't refetch consts\n        // don't refetch if already data\n        if (!!this.data &&\n            (skipIfValue || ((_a = this.specification) === null || _a === void 0 ? void 0 : _a.kind) === \"const\"))\n            return;\n        const bus = this.service.device.bus;\n        return bus.withTimeout(REGISTER_REFRESH_TIMEOUT, new Promise((resolve, reject) => {\n            this.once(REPORT_RECEIVE, () => {\n                const f = resolve;\n                resolve = null;\n                f();\n            });\n            // re-send get if no answer within 40ms and 90ms\n            this.sendGetAsync()\n                .then(() => bus.delay(REGISTER_REFRESH_RETRY_0))\n                .then(() => {\n                if (resolve)\n                    return this.sendGetAsync().then(() => bus.delay(REGISTER_REFRESH_RETRY_1));\n            })\n                .then(() => {\n                if (resolve)\n                    return this.sendGetAsync();\n            })\n                .catch(e => reject(e));\n        }));\n    }\n    /**\n     * @internal\n     */\n    processPacket(pkt) {\n        if (pkt.isRegisterGet)\n            this.processReport(pkt);\n        else if (pkt.isRegisterSet) {\n            // another device sent a set packet to this register\n            // so most likely it's value changed\n            // clear any data caching to force updating the value\n            this.clearGetTimestamp();\n        }\n    }\n    processReport(pkt) {\n        const updated = !bufferEq(this.data, pkt.data);\n        this._lastReportPkt = pkt;\n        this._lastGetAttempts = 0; // reset counter\n        this._lastGetTimestamp = this.service.device.bus.timestamp; // reset time counter too\n        this.emit(REPORT_RECEIVE, this);\n        if (updated) {\n            this.emitPropagated(REPORT_UPDATE, this);\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * @internal\n     */\n    compareTo(b) {\n        return this.code - b.code || this.service.compareTo(b.service);\n    }\n}\n\n/**\n * A Jacdac event client.\n * @category JDOM\n */\nclass JDEvent extends JDServiceMemberNode {\n    /**\n     * @internal\n     */\n    constructor(service, code) {\n        super(service, code, isEvent);\n        this._count = 0;\n    }\n    /**\n     * Returns the ``EVENT_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return EVENT_NODE_NAME;\n    }\n    /**\n     * Gets the field node\n     * @category Service Clients\n     */\n    get fields() {\n        var _a;\n        if (!this._fields)\n            this._fields = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.fields.map((field, index) => new JDField(this, index, field));\n        return this._fields.slice();\n    }\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children() {\n        return this.fields;\n    }\n    /**\n     * Gets the raw data attached to the last event packet\n     * @category Data\n     */\n    get data() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.data;\n    }\n    /**\n     * Gets the unpacked data attached to the last event packet, if the event specification is known.\n     * @category Data\n     */\n    get unpacked() {\n        var _a;\n        const { packFormat } = this.specification || {};\n        return packFormat && ((_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.jdunpack(packFormat));\n    }\n    /**\n     * Gets a counter of occurences for this event.\n     * @category Data\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Gets the timestamp of the last packet with data received for this event.\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.timestamp;\n    }\n    /**\n     * @internal\n     */\n    get decoded() {\n        var _a;\n        return (_a = this._lastReportPkt) === null || _a === void 0 ? void 0 : _a.decoded;\n    }\n    /**\n     * @internal\n     */\n    processEvent(pkt) {\n        const { device } = this.service;\n        const ec = (device.eventCounter || 0) + 1;\n        // how many packets ahead and behind current are we?\n        const ahead = (pkt.eventCounter - ec) & CMD_EVENT_COUNTER_MASK;\n        const behind = (ec - pkt.eventCounter) & CMD_EVENT_COUNTER_MASK;\n        // ahead == behind == 0 is the usual case, otherwise\n        // behind < 60 means this is an old event (or retransmission of something we already processed)\n        const old = behind < 60;\n        const missed5 = ahead < 5;\n        const isahead = ahead > 0;\n        // ahead < 5 means we missed at most 5 events,\n        // so we ignore this one and rely on retransmission\n        // of the missed events, and then eventually the current event\n        if (isahead && (old || missed5))\n            return;\n        this._lastReportPkt = pkt;\n        this._count++;\n        this.emitPropagated(EVENT, this);\n        this.emit(CHANGE);\n        // update device counter\n        device.eventCounter = pkt.eventCounter;\n    }\n}\n\n/**\n * Base class for clients\n * @category Clients\n */\nclass JDClient extends JDEventSource {\n    constructor() {\n        super();\n        this.unsubscribers = [];\n        this.unmounted = false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg) {\n        console.log(msg);\n    }\n    mount(unsubscribe) {\n        this.unmounted = false;\n        if (unsubscribe && this.unsubscribers.indexOf(unsubscribe) < 0)\n            this.unsubscribers.push(unsubscribe);\n        return unsubscribe;\n    }\n    unmount() {\n        const us = this.unsubscribers;\n        this.unsubscribers = [];\n        us.forEach(u => u());\n        this.unmounted = true;\n    }\n}\n\nfunction cryptoRandomUint32(length) {\n    if (typeof window === \"undefined\")\n        return undefined; // not supported\n    const vals = new Uint32Array(length);\n    window.crypto.getRandomValues(vals);\n    return vals;\n}\nfunction anyRandomUint32(length) {\n    let r = cryptoRandomUint32(length);\n    if (!r) {\n        r = new Uint32Array(length);\n        for (let i = 0; i < r.length; ++i)\n            r[i] = (Math.random() * 4294967296) >>> 0;\n    }\n    return r;\n}\nfunction randomUInt(max) {\n    const arr = anyRandomUint32(1);\n    return arr[0] % max;\n}\nfunction randomBytes(n) {\n    const buf = anyRandomUint32(n);\n    const r = new Uint8Array(buf.length);\n    for (let i = 0; i < n; ++i)\n        r[i] = buf[i] & 0xff;\n    return r;\n}\nfunction randomDeviceId() {\n    const devId = anyRandomUint32(8);\n    for (let i = 0; i < 8; ++i)\n        devId[i] &= 0xff;\n    return toHex(devId);\n}\n\nconst { warn } = console;\nclass OutPipe {\n    constructor(device, port, hosted) {\n        this.device = device;\n        this.port = port;\n        this.hosted = hosted;\n        this._count = 0;\n    }\n    static from(bus, pkt, hosted) {\n        const [idbuf, port] = pkt.jdunpack(\"b[8] u16\");\n        const id = toHex(idbuf);\n        const dev = bus.device(id, false, pkt);\n        return new OutPipe(dev, port, hosted);\n    }\n    get count() {\n        return this._count;\n    }\n    get isOpen() {\n        return this.device != null;\n    }\n    send(buf) {\n        return this.sendData(buf, 0);\n    }\n    sendMeta(buf) {\n        return this.sendData(buf, PIPE_METADATA_MASK);\n    }\n    async respondForEach(items, converter) {\n        try {\n            const n = items.length;\n            for (let i = 0; i < n; ++i) {\n                const item = items[i];\n                const data = converter(item);\n                await this.send(data);\n            }\n        }\n        finally {\n            await this.close();\n        }\n    }\n    async sendData(buf, flags) {\n        if (!this.device) {\n            warn(\"sending data over closed pipe\");\n            return;\n        }\n        const cmd = (this.port << PIPE_PORT_SHIFT) |\n            flags |\n            (this._count & PIPE_COUNTER_MASK);\n        const pkt = Packet.from(cmd, buf);\n        pkt.serviceIndex = JD_SERVICE_INDEX_PIPE;\n        this.device.sendPktWithAck(pkt).then(() => { }, err => {\n            console.log(err);\n            this.free();\n        });\n        if (this.hosted)\n            this.device.bus.processPacket(pkt);\n        this._count++;\n    }\n    free() {\n        this.device = null;\n        this.port = null;\n    }\n    async close() {\n        await this.sendData(new Uint8Array(0), PIPE_CLOSE_MASK);\n        this.free();\n    }\n}\nclass InPipe extends JDClient {\n    constructor(bus) {\n        super();\n        this.bus = bus;\n        this._count = 0;\n        this._handlePacket = this._handlePacket.bind(this);\n        this.allocPort();\n        this.mount(this.bus.selfDevice.subscribe(PACKET_RECEIVE, this._handlePacket));\n    }\n    get port() {\n        return this._port;\n    }\n    get count() {\n        return this._count;\n    }\n    get isOpen() {\n        return this._port != null;\n    }\n    allocPort() {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this._port = 1 + randomUInt(511);\n            const info = this.bus.selfDevice.port(this._port);\n            if (!info.localPipe && !info.pipeType) {\n                info.localPipe = this;\n                break;\n            }\n        }\n    }\n    openCommand(cmd) {\n        if (!this.isOpen)\n            throwError(\"trying to access a closed pipe\");\n        const b = jdpack(\"b[8] u16 u16\", [\n            fromHex(this.bus.selfDeviceId),\n            this._port,\n            0,\n        ]);\n        return Packet.from(cmd, b);\n    }\n    _handlePacket(pkt) {\n        if (!pkt.isPipe)\n            return;\n        if (pkt.pipePort !== this._port)\n            return;\n        if ((pkt.serviceCommand & PIPE_COUNTER_MASK) ==\n            (this._count & PIPE_COUNTER_MASK)) {\n            this._count++;\n            this.emit(DATA, pkt);\n            if (pkt.serviceCommand & PIPE_CLOSE_MASK) {\n                this.close();\n            }\n        }\n    }\n    close() {\n        if (this._port == null)\n            return;\n        this.emit(CLOSE);\n        this._port = null;\n        this.bus.selfDevice.port(this._port).localPipe = undefined;\n        this.unmount();\n    }\n}\nclass InPipeReader extends InPipe {\n    constructor(bus) {\n        super(bus);\n        this.done = signal();\n        this.meta = [];\n        this.output = [];\n        this.mount(this.subscribe(DATA, (pkt) => {\n            if (pkt.serviceCommand & PIPE_METADATA_MASK)\n                this.meta.push(pkt);\n            else\n                this.output.push(pkt);\n        }));\n        this.mount(this.subscribe(CLOSE, this.done.signal));\n    }\n    async readData(timeout = 500) {\n        const r = await this.readAll(timeout);\n        return r.output.map(p => p.data).filter(b => !!(b === null || b === void 0 ? void 0 : b.length));\n    }\n    async readAll(timeout = 500) {\n        const res = await this.bus.withTimeout(timeout, this.done.signalled);\n        if (!res)\n            throw new Error(\"Timeout reading pipe: \" + timeout + \"ms\");\n        return {\n            meta: this.meta,\n            output: this.output,\n        };\n    }\n}\n\n/**\n * A Jacdac service client hosting registers, events.\n * @category JDOM\n */\nclass JDService extends JDNode {\n    /**\n     * @internal\n     */\n    constructor(device, serviceIndex) {\n        super();\n        this._reports = [];\n        this._specification = null;\n        // packets received since last announce\n        this.registersUseAcks = false;\n        this._clients = [];\n        this.device = device;\n        this.serviceIndex = serviceIndex;\n        this.serviceClass = this.device.serviceClassAt(this.serviceIndex);\n        const statusCodeChanged = this.event(exports.BaseEvent.StatusCodeChanged);\n        statusCodeChanged.on(CHANGE, () => {\n            // todo update status code with event payload\n            const { data } = statusCodeChanged;\n            console.debug(`${this}: status code changed event`, { data });\n            // schedule data update\n            const statusCode = this.register(exports.BaseReg.StatusCode);\n            statusCode === null || statusCode === void 0 ? void 0 : statusCode.clearGetTimestamp();\n        });\n    }\n    /**\n     * Gets the node identifier\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.device.deviceId}:${this.serviceIndex.toString(16)}`;\n    }\n    /**\n     * Gets the ``SERVICE_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return SERVICE_NODE_NAME;\n    }\n    /**\n     * Gets the service name\n     * @category JDOM\n     */\n    get name() {\n        var _a;\n        return (_a = serviceName(this.serviceClass)) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    }\n    /**\n     * Gets the service name and parent names\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.device.friendlyName];\n        if (this.device.services({ serviceClass: this.serviceClass }).length > 1)\n            parts.push(`[${this.serviceIndex.toString(16)}]`);\n        return parts.join(\".\");\n    }\n    /**\n     * Gets the service qualified name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.device.qualifiedName}[${this.serviceIndex.toString(16)}]`;\n    }\n    /**\n     * Gets the device holding the service\n     * @category JDOM\n     */\n    get parent() {\n        return this.device;\n    }\n    get role() {\n        return this._role;\n    }\n    set role(value) {\n        if (value !== this._role) {\n            this._role = value;\n            this.emit(ROLE_CHANGE);\n            this.emit(CHANGE);\n        }\n    }\n    report(identifier) {\n        return this._reports.find(r => r.registerIdentifier === identifier);\n    }\n    get reports() {\n        return this._reports.slice(0);\n    }\n    get mixins() {\n        // find all 0x2 services follow this service\n        const r = [];\n        const { serviceClasses, serviceLength } = this.device;\n        for (let i = this.serviceIndex + 1; i < serviceLength && isMixinService(serviceClasses[i]); ++i) {\n            r.push(this.device.service(i));\n        }\n        return r;\n    }\n    get isMixin() {\n        return isMixinService(this.serviceClass);\n    }\n    get twin() {\n        return this._twin;\n    }\n    set twin(server) {\n        if (this._twin === server)\n            return;\n        if (this._twin)\n            this._twin.twin = undefined;\n        this._twin = server;\n        server.twin = this;\n        this.emit(CHANGE);\n    }\n    /**\n     * Gets the ``reading`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get readingRegister() {\n        var _a;\n        if (!this._readingRegister) {\n            const pkt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packets.find(pkt => isReading(pkt));\n            this._readingRegister = pkt && this.register(pkt.identifier);\n        }\n        return this._readingRegister;\n    }\n    /**\n     * Gets the ``value`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get valueRegister() {\n        var _a;\n        if (!this._valueRegister) {\n            const pkt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packets.find(pkt => isValue(pkt));\n            this._valueRegister = pkt && this.register(pkt.identifier);\n        }\n        return this._valueRegister;\n    }\n    /**\n     * Gets the ``intensity`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get intensityRegister() {\n        var _a;\n        if (!this._intensityRegister) {\n            const pkt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packets.find(pkt => isIntensity(pkt));\n            this._intensityRegister = pkt && this.register(pkt.identifier);\n        }\n        return this._intensityRegister;\n    }\n    /**\n     * Gets the ``status_code`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get statusCodeRegister() {\n        var _a;\n        if (!this._statusCodeRegister) {\n            const pkt = (_a = this.specification) === null || _a === void 0 ? void 0 : _a.packets.find(pkt => pkt.identifier === exports.SystemReg.StatusCode);\n            this._statusCodeRegister = pkt && this.register(pkt.identifier);\n        }\n        return this._statusCodeRegister;\n    }\n    /**\n     * Gets the service instance name, if resolved\n     * @category Control\n     */\n    get instanceName() {\n        const r = this.register(exports.SystemReg.InstanceName);\n        return r === null || r === void 0 ? void 0 : r.stringValue;\n    }\n    /**\n     * Resolves the service instance name, if resolved\n     * @category Control\n     */\n    async resolveInstanceName() {\n        const r = this.register(exports.SystemReg.InstanceName);\n        await (r === null || r === void 0 ? void 0 : r.refresh());\n        return r === null || r === void 0 ? void 0 : r.stringValue;\n    }\n    /**\n     * Gets the specification of the service. Undefined if unknown\n     * @category Services\n     */\n    get specification() {\n        if (this._specification === null)\n            this._specification = serviceSpecificationFromClassIdentifier(this.serviceClass);\n        return this._specification;\n    }\n    get events() {\n        var _a;\n        return (((_a = this.specification) === null || _a === void 0 ? void 0 : _a.packets.filter(isEvent).map(info => this.event(info.identifier))) || []);\n    }\n    registers() {\n        if (!this._registers) {\n            const spec = this.specification;\n            this._registers = ((spec === null || spec === void 0 ? void 0 : spec.packets) || [])\n                .filter(isRegister)\n                .map(pkt => new JDRegister(this, pkt.identifier));\n        }\n        return this._registers.slice(0);\n    }\n    /**\n     * Gets the registers and events\n     * @category JDOM\n     */\n    get children() {\n        return [...this.registers(), ...this.events];\n    }\n    /**\n     * Gets a register for the given code\n     * @param registerCode register identifier as found in the specification\n     * @returns a register instance (if found in specifiaction)\n     * @category Registers\n     */\n    register(registerCode) {\n        if (isNaN(registerCode))\n            return undefined;\n        // cache known registers\n        this.registers();\n        let register = this._registers.find(reg => reg.code === registerCode);\n        // we may not have a spec.\n        if (!register) {\n            const spec = this.specification;\n            if (spec &&\n                !spec.packets.some(pkt => isRegister(pkt) && pkt.identifier === registerCode)) {\n                if (Flags.diagnostics &&\n                    !isOptionalReadingRegisterCode(registerCode))\n                    console.debug(`attempting to access register ${exports.SystemReg[registerCode] ||\n                        `0x${registerCode.toString(16)}`}`);\n                return undefined;\n            }\n            this._registers.push((register = new JDRegister(this, registerCode)));\n        }\n        return register;\n    }\n    /**\n     * Gets an event for the given code\n     * @param eventCode event identifier as found in the specification\n     * @returns a event instance (if found in specifiaction)\n     * @category Events\n     */\n    event(eventCode) {\n        if (isNaN(eventCode))\n            return undefined;\n        if (!this._events)\n            this._events = [];\n        let event = this._events.find(ev => ev.code === eventCode);\n        if (!event) {\n            const spec = this.specification;\n            if (spec &&\n                !spec.packets.some(pkt => isEvent(pkt) && pkt.identifier === eventCode)) {\n                if (Flags.diagnostics)\n                    console.debug(`attempting to access event ${exports.SystemEvent[eventCode] ||\n                        `0x${eventCode.toString(16)}`}`);\n                return undefined;\n            }\n            this._events.push((event = new JDEvent(this, eventCode)));\n        }\n        return event;\n    }\n    /**\n     * Send packet to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    async sendPacketAsync(pkt, ack) {\n        pkt.device = this.device;\n        pkt.serviceIndex = this.serviceIndex;\n        if (ack !== undefined)\n            pkt.requiresAck = !!ack;\n        if (pkt.requiresAck)\n            await this.device.sendPktWithAck(pkt);\n        else\n            await pkt.sendCmdAsync(this.device);\n        this.emit(PACKET_SEND, pkt);\n        // invalid register after a command call to refresh their values asap\n        if (pkt.isCommand && !pkt.isRegisterGet && !pkt.isRegisterSet)\n            this.invalidateRegisterValues(pkt);\n    }\n    /**\n     * Send a command to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAsync(cmd, data, ack) {\n        const pkt = data ? Packet.from(cmd, data) : Packet.onlyHeader(cmd);\n        return this.sendPacketAsync(pkt, ack);\n    }\n    /**\n     * Packs values and sends command to the service server\n     * @param cmd packet to send\n     * @param values unpacked values, layed as specified\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdPackedAsync(cmd, values, ack) {\n        const spec = this.specification.packets.find(pkt => pkt.kind === \"command\" && pkt.identifier === cmd);\n        const packFormat = spec === null || spec === void 0 ? void 0 : spec.packFormat;\n        if (!packFormat)\n            throw new Error(\"Unknown packing format\");\n        const data = values ? jdpack(packFormat, values) : undefined;\n        return this.sendCmdAsync(cmd, data, ack);\n    }\n    /**\n     * Send a command and await response to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAwaitResponseAsync(pkt, timeout = 500) {\n        const { bus } = this.device;\n        return new Promise((resolve, reject) => {\n            const handleRes = (resp) => {\n                if (resp.serviceCommand == pkt.serviceCommand) {\n                    this.off(REPORT_RECEIVE, handleRes);\n                    if (resolve)\n                        resolve(resp);\n                    resolve = null;\n                }\n            };\n            bus.delay(timeout).then(() => {\n                if (!resolve)\n                    return;\n                resolve = null;\n                this.off(REPORT_RECEIVE, handleRes);\n                reject(new Error(`timeout (${timeout}ms) waiting for response to ${pkt}`));\n            });\n            this.sendPacketAsync(pkt).then(() => {\n                this.on(REPORT_RECEIVE, handleRes);\n            });\n            // the handler remove either upon timeout,\n            // or on first invocation of handleRes()\n        });\n    }\n    /**\n     * @internal\n     */\n    processPacket(pkt) {\n        this.emit(PACKET_RECEIVE, pkt);\n        if (pkt.isReport) {\n            this.emit(REPORT_RECEIVE, pkt);\n            if (pkt.isRegisterGet) {\n                const id = pkt.registerIdentifier;\n                const reg = this.register(id);\n                if (reg)\n                    reg.processPacket(pkt);\n            }\n            else if (pkt.isEvent) {\n                const ev = this.event(pkt.eventCode);\n                if (ev)\n                    ev.processEvent(pkt);\n            }\n            else if (pkt.isCommand) {\n                // this is a report...\n                console.log(\"cmd report\", { pkt });\n            }\n        }\n        else if (pkt.isRegisterSet) {\n            const id = pkt.registerIdentifier;\n            const reg = this.register(id);\n            if (reg)\n                reg.processPacket(pkt);\n        }\n        else if (pkt.isCommand) {\n            this.invalidateRegisterValues(pkt);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    invalidateRegisterValues(pkt) {\n        //console.log(`clearing register get timestamp`, pkt)\n        this.registers()\n            .filter(r => r.specification && !isConstRegister(r.specification))\n            .forEach(r => r.clearGetTimestamp());\n    }\n    /**\n     * @internal\n     */\n    compareTo(b) {\n        return (this.serviceClass - b.serviceClass ||\n            strcmp(this.device.deviceId, b.device.deviceId) ||\n            this.serviceIndex - b.serviceIndex);\n    }\n    get clients() {\n        var _a;\n        return ((_a = this._clients) === null || _a === void 0 ? void 0 : _a.slice(0)) || [];\n    }\n    addClient(client) {\n        if (client && this._clients.indexOf(client) < 0) {\n            this._clients.push(client);\n            this.emit(SERVICE_CLIENT_ADDED, client);\n        }\n    }\n    removeClient(client) {\n        const i = this._clients.indexOf(client);\n        if (i > -1) {\n            this._clients.splice(i, 1);\n            this.emit(SERVICE_CLIENT_REMOVED, client);\n        }\n    }\n    async receiveWithInPipe(cmd, packFormat, timeout) {\n        const inp = new InPipeReader(this.device.bus);\n        await this.sendPacketAsync(inp.openCommand(cmd), true);\n        const recv = [];\n        for (const buf of await inp.readData(timeout)) {\n            const values = jdunpack(buf, packFormat);\n            recv.push(values);\n        }\n        return recv;\n    }\n}\n\nfunction trgbToValues(trgb) {\n    return [\n        (trgb >> 16) & 0xff,\n        (trgb >> 8) & 0xff,\n        trgb & 0xff,\n        (trgb >> 24) & 0xff,\n    ];\n}\nclass LEDController extends JDEventSource {\n    constructor(service, command) {\n        super();\n        this.service = service;\n        this.command = command;\n    }\n    async blink(from, to, interval, repeat) {\n        const on = jdpack(\"u8 u8 u8 u8\", trgbToValues(from));\n        const off = jdpack(\"u8 u8 u8 u8\", trgbToValues(to));\n        const { bus } = this.service.device;\n        for (let i = 0; i < repeat; ++i) {\n            await this.service.sendCmdAsync(this.command, on);\n            await bus.delay(interval - 1);\n            await this.service.sendCmdAsync(this.command, off);\n            await bus.delay(interval - 1);\n        }\n    }\n}\n\n/**\n * Collects packet statistics about the device\n * @category JDOM\n */\nclass DeviceStatsMonitor extends JDEventSource {\n    /**\n     * @internal\n     */\n    constructor() {\n        super();\n        // counter\n        this._receivedPackets = 0;\n        this._restarts = 0;\n        this._announce = 0;\n        // horizon\n        this._data = Array(0xf << 2)\n            .fill(0)\n            .map(() => ({ received: 0, total: 0, restarts: 0 }));\n        this._dataIndex = 0;\n    }\n    /**\n     * Number of announce packets received by the device\n     **/\n    get announce() {\n        return this._announce;\n    }\n    /**\n     * Average packet dropped per announce period\n     * @category Statistics\n     */\n    get dropped() {\n        const r = this._data\n            .filter(e => !!e.total) // ignore total 0\n            .reduce((s, e) => s + (e.total - e.received), 0) /\n            this._data.length || 0;\n        return r;\n    }\n    /**\n     * Number of restarts within the last 64 announce packets\n     */\n    get restarts() {\n        const r = this._data.reduce((s, e) => s + e.restarts, 0);\n        return r;\n    }\n    /**\n     * Gets the current stats\n     */\n    get current() {\n        const { dropped, restarts, announce } = this;\n        return { dropped, restarts, announce };\n    }\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt) {\n        this._announce++;\n        const { current: oldCurrent } = this;\n        // collect metrics\n        const received = this._receivedPackets;\n        const total = pkt.data[2];\n        const restarts = this._restarts;\n        this._data[this._dataIndex] = { received, total, restarts };\n        this._dataIndex = (this._dataIndex + 1) % this._data.length;\n        // reset counter\n        this._receivedPackets = 0;\n        this._restarts = 0;\n        const { current } = this;\n        if (oldCurrent.dropped !== current.dropped ||\n            oldCurrent.restarts !== current.restarts)\n            this.emit(CHANGE);\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    processPacket(pkt) {\n        this._receivedPackets++;\n    }\n    /**\n     * @internal\n     */\n    processRestart() {\n        this._restarts++;\n        this._announce = 0;\n    }\n}\n/**\n * A Jacdac device hosting services.\n * @category JDOM\n */\nclass JDDevice extends JDNode {\n    /**\n     * @internal\n     */\n    constructor(bus, deviceId, pkt) {\n        super();\n        this._flashing = false;\n        /**\n         * Quality of service statistics for this device\n         * @category Diagnostics\n         */\n        this.stats = new DeviceStatsMonitor();\n        this.bus = bus;\n        this.deviceId = deviceId;\n        this.connected = true;\n        this._lost = false;\n        this._identifying = false;\n        this._source = pkt === null || pkt === void 0 ? void 0 : pkt.sender;\n        this._replay = !!(pkt === null || pkt === void 0 ? void 0 : pkt.replay);\n    }\n    /**\n     * Gets a random device id for the lifetime of this object.\n     */\n    get anonymizedDeviceId() {\n        if (!this._anonymizedId)\n            this._anonymizedId = randomDeviceId();\n        return this._anonymizedId;\n    }\n    /**\n     * Gets a description of the device.\n     * @returns a descriptive string for this device\n     * @category Diagnostics\n     */\n    describe() {\n        const ignoredServices = [SRV_CONTROL, SRV_LOGGER];\n        return (this.toString() +\n            (this.isPhysical ? \"\" : \" (sim)\") +\n            \": \" +\n            this.services()\n                .filter(srv => ignoredServices.indexOf(srv.serviceClass) < 0)\n                .map(s => {\n                var _a;\n                return s.instanceName ||\n                    ((_a = s.specification) === null || _a === void 0 ? void 0 : _a.camelName) ||\n                    s.serviceClass.toString(16);\n            })\n                .join(\", \"));\n    }\n    /**\n     * Gets a unique identifier for this device in the bus\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.deviceId}`;\n    }\n    /**\n     * Gets the short id of the device\n     * @category JDOM\n     */\n    get name() {\n        return this.shortId;\n    }\n    /**\n     * Identifies node as a device\n     * @category JDOM\n     */\n    get nodeKind() {\n        return DEVICE_NODE_NAME;\n    }\n    /**\n     * Indicates if the devices is a physical device, not emulated.\n     * @category Transport\n     */\n    get isPhysical() {\n        return (this._source === USB_TRANSPORT ||\n            this._source === BLUETOOTH_TRANSPORT ||\n            this._source === SERIAL_TRANSPORT ||\n            this._source === PACKETIO_TRANSPORT ||\n            this._source === WEBSOCKET_TRANSPORT);\n    }\n    /**\n     * Indicates the source of packets\n     * @category Transport\n     */\n    get source() {\n        return this._source;\n    }\n    /**\n     * Indicates if the device is part of a trace replay\n     * @category Transport\n     */\n    get replay() {\n        return this._replay;\n    }\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get friendlyName() {\n        return this.shortId;\n    }\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return this.shortId;\n    }\n    /**\n     * Indicates if service information is available.\n     * This happens after a announce packet has been received.\n     * @category Lifecycle\n     */\n    get announced() {\n        var _a;\n        return !!((_a = this._servicesData) === null || _a === void 0 ? void 0 : _a.length);\n    }\n    /**\n     * Gets the control announce flag from the annouce packet.\n     * @category Control\n     */\n    get announceFlags() {\n        return this._servicesData ? read16(this._servicesData, 0) : 0;\n    }\n    /**\n     * Gets the restart counter from the announce packet.\n     * @category Control\n     */\n    get restartCounter() {\n        return this.announceFlags & exports.ControlAnnounceFlags.RestartCounterSteady;\n    }\n    /**\n     * Gets the status light announce flags from the announce packet.\n     * @category Control\n     */\n    get statusLightFlags() {\n        return this.announceFlags & exports.ControlAnnounceFlags.StatusLightRgbFade;\n    }\n    /**\n     * Indicates if the device is announced as a client\n     * @category Control\n     */\n    get isClient() {\n        return !!(this.announceFlags & exports.ControlAnnounceFlags.IsClient);\n    }\n    /**\n     * Gets the number of packets sent since the last announce packet,\n     * as read from the announce packet.\n     * @category Control\n     */\n    get packetCount() {\n        var _a;\n        return ((_a = this._servicesData) === null || _a === void 0 ? void 0 : _a[2]) || 0;\n    }\n    /**\n     * Gets the device short identifier\n     * @category JDOM\n     */\n    get shortId() {\n        // TODO measure if caching is worth it\n        if (!this._shortId)\n            this._shortId = shortDeviceId(this.deviceId);\n        return this._shortId;\n    }\n    /**\n     * Gets the bus instance hosting this device.\n     * @category JDOM\n     */\n    get parent() {\n        return this.bus;\n    }\n    /**\n     * Gets the firmware information if any.\n     * @category Firmware\n     */\n    get firmwareInfo() {\n        var _a, _b, _c;\n        const ctrl = this.service(0);\n        const deviceId = this.deviceId;\n        const name = (_a = ctrl === null || ctrl === void 0 ? void 0 : ctrl.register(exports.ControlReg.DeviceDescription)) === null || _a === void 0 ? void 0 : _a.stringValue;\n        const version = this.firmwareVersion;\n        const productIdentifier = (_b = ctrl === null || ctrl === void 0 ? void 0 : ctrl.register(exports.ControlReg.ProductIdentifier)) === null || _b === void 0 ? void 0 : _b.uintValue;\n        const bootloaderProductIdentifier = (_c = ctrl === null || ctrl === void 0 ? void 0 : ctrl.register(exports.ControlReg.BootloaderProductIdentifier)) === null || _c === void 0 ? void 0 : _c.uintValue;\n        const ready = version &&\n            (productIdentifier !== undefined ||\n                bootloaderProductIdentifier !== undefined);\n        return ready\n            ? {\n                deviceId,\n                name,\n                version,\n                productIdentifier,\n                bootloaderProductIdentifier,\n            }\n            : undefined;\n    }\n    refreshFirmwareInfo() {\n        var _a;\n        // listen for specific registers\n        const ctrl = (_a = this._services) === null || _a === void 0 ? void 0 : _a[0];\n        const firmwareRegs = [\n            (exports.ControlReg.ProductIdentifier,\n                exports.ControlReg.FirmwareVersion,\n                exports.ControlReg.BootloaderProductIdentifier),\n        ];\n        firmwareRegs.forEach(reg => ctrl.register(reg).once(REPORT_UPDATE, () => {\n            this.emitPropagated(DEVICE_FIRMWARE_INFO);\n            this.emitPropagated(CHANGE);\n        }));\n    }\n    /**\n     * Indicates if no packet from this device has been observed in a while.\n     * @category Lifecycle\n     */\n    get lost() {\n        return this._lost;\n    }\n    /**\n     * Sets the lost status\n     * @category Lifecycle\n     * @internal\n     */\n    set lost(v) {\n        if (!!v === this._lost)\n            return;\n        // something changed\n        this._lost = !!v;\n        if (this.lost) {\n            this.emit(LOST);\n            this.bus.emit(DEVICE_LOST, this);\n        }\n        else {\n            this.emit(FOUND);\n            this.bus.emit(DEVICE_FOUND, this);\n        }\n        this.emit(CHANGE);\n        this.bus.emit(DEVICE_CHANGE, this);\n        this.bus.emit(CHANGE);\n    }\n    /**\n     * A flashing sequence is in progress\n     * @category Firmware\n     */\n    get flashing() {\n        return this._flashing;\n    }\n    /**\n     * Sets the flashing sequence state\n     * @category Firmware\n     */\n    set flashing(value) {\n        if (value !== this._flashing) {\n            this._flashing = value;\n            this.emit(CHANGE);\n            this.bus.emit(DEVICE_CHANGE, this);\n            this.bus.emit(CHANGE);\n            if (this._flashing)\n                this.bus.sendStopStreaming();\n        }\n    }\n    /**\n     * Gets the number of events received by the service clients in this device\n     * @category Lifecycle\n     */\n    get eventCounter() {\n        return this._eventCounter;\n    }\n    /**\n     * @internal\n     */\n    set eventCounter(v) {\n        this._eventCounter = v;\n    }\n    /**\n     * Indicates if the device contains at least one service matching the service class\n     * @param serviceClass service class to match\n     * @returns true if at least one service present\n     * @category Services\n     */\n    hasService(serviceClass) {\n        if (!this.announced)\n            return false;\n        if (serviceClass === 0)\n            return true;\n        // skip first 4 bytes\n        for (let i = 4; i < this._servicesData.length; i += 4) {\n            const sc = getNumber(this._servicesData, exports.NumberFormat.UInt32LE, i);\n            if (isInstanceOf(sc, serviceClass))\n                return true;\n        }\n        return false;\n    }\n    /**\n     * Gets or allocates a pipe port\n     * @param id identifier of the port\n     * @returns a pipe port\n     * @category Services\n     */\n    port(id) {\n        if (!this._ports)\n            this._ports = {};\n        const key = id + \"\";\n        const ex = this._ports[key];\n        if (!ex)\n            return (this._ports[key] = {});\n        return ex;\n    }\n    /**\n     * Gets the number of services hosted by the device\n     * @category Services\n     */\n    get serviceLength() {\n        if (!this.announced)\n            return 0;\n        return this._servicesData.length >> 2;\n    }\n    /**\n     * Gets the service class at a given index\n     * @param index index of the service\n     * @returns service class\n     * @category Services\n     */\n    serviceClassAt(index) {\n        if (index == 0)\n            return 0;\n        index <<= 2;\n        if (!this.announced || index + 4 > this._servicesData.length)\n            return undefined;\n        return read32(this._servicesData, index);\n    }\n    /**\n     * Gets the list of service classes\n     * @category Services\n     */\n    get serviceClasses() {\n        const r = [];\n        const n = this.serviceLength;\n        for (let i = 0; i < n; ++i)\n            r.push(this.serviceClassAt(i));\n        return r;\n    }\n    initServices(force) {\n        if (force)\n            this._services = undefined;\n        if (!this._services && this._servicesData) {\n            this._statusLight = undefined;\n            const n = this.serviceLength;\n            const s = [];\n            for (let i = 0; i < n; ++i)\n                s.push(new JDService(this, i));\n            this._services = s;\n            this.lastServiceUpdate = this.bus.timestamp;\n            this.refreshFirmwareInfo();\n        }\n    }\n    /**\n     * Gets the service client at the given service index\n     * @param serviceIndex index of the service client\n     * @returns service client\n     * @category Services\n     */\n    service(serviceIndex) {\n        if (!this.announced)\n            return undefined;\n        this.initServices();\n        serviceIndex = serviceIndex | 0;\n        return this._services && this._services[serviceIndex];\n    }\n    /**\n     * Gets a filtered list of service clients.\n     * @param options filters for services\n     * @returns services matching the filter\n     * @category Services\n     */\n    services(options) {\n        var _a;\n        if (!this.announced)\n            return [];\n        if ((options === null || options === void 0 ? void 0 : options.serviceIndex) >= 0)\n            return [this.service(options === null || options === void 0 ? void 0 : options.serviceIndex)];\n        if ((options === null || options === void 0 ? void 0 : options.serviceName) && (options === null || options === void 0 ? void 0 : options.serviceClass) > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\");\n        let sc = serviceClass(options === null || options === void 0 ? void 0 : options.serviceName);\n        if (sc === undefined || sc < 0)\n            sc = options === null || options === void 0 ? void 0 : options.serviceClass;\n        if (sc === undefined)\n            sc = -1;\n        this.initServices();\n        let r = ((_a = this._services) === null || _a === void 0 ? void 0 : _a.slice()) || [];\n        if (sc > -1)\n            r = r.filter(s => s.serviceClass == sc);\n        if (options === null || options === void 0 ? void 0 : options.specification)\n            r = r.filter(s => !!s.specification);\n        const mixins = options === null || options === void 0 ? void 0 : options.mixins;\n        if (mixins !== undefined)\n            r = r.filter(s => s.isMixin === mixins);\n        return r;\n    }\n    /**\n     * Gets the list of child services.\n     * @category JDOM\n     */\n    get children() {\n        return this.services();\n    }\n    /**\n     * @internal\n     */\n    sendCtrlCommand(cmd, payload = null) {\n        const pkt = !payload\n            ? Packet.onlyHeader(cmd)\n            : Packet.from(cmd, payload);\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n        return pkt.sendCmdAsync(this);\n    }\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt) {\n        this.stats.processAnnouncement(pkt);\n        let changed = false;\n        const w0 = this._servicesData\n            ? getNumber(this._servicesData, exports.NumberFormat.UInt32LE, 0)\n            : 0;\n        const w1 = getNumber(pkt.data, exports.NumberFormat.UInt32LE, 0);\n        // compare service data\n        const servicesChanged = !bufferEq(pkt.data, this._servicesData, 4);\n        this._servicesData = pkt.data;\n        // check for restart\n        if (w1 &&\n            (w1 & JD_ADVERTISEMENT_0_COUNTER_MASK) <\n                (w0 & JD_ADVERTISEMENT_0_COUNTER_MASK)) {\n            this.stats.processRestart();\n            this.initServices(true);\n            this.bus.emit(DEVICE_RESTART, this);\n            this.emit(RESTART);\n            changed = true;\n        }\n        // notify that services got updated\n        if (servicesChanged) {\n            if (!changed)\n                this.initServices(true);\n            this.bus.emit(DEVICE_ANNOUNCE, this);\n            this.emit(ANNOUNCE);\n            changed = true;\n        }\n        // notify that we've received an announce packet\n        this.bus.emit(DEVICE_PACKET_ANNOUNCE, this);\n        this.emit(PACKET_ANNOUNCE);\n        // notify of any changes\n        if (changed) {\n            this.bus.emit(DEVICE_CHANGE, this);\n            this.bus.emit(CHANGE);\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * @internal\n     */\n    processPacket(pkt) {\n        this.stats.processPacket(pkt);\n        this.lost = false;\n        this.emit(PACKET_RECEIVE, pkt);\n        if (pkt.isReport)\n            this.emit(PACKET_REPORT, pkt);\n        else if (pkt.isEvent)\n            this.emit(PACKET_EVENT, pkt);\n        const service = this.service(pkt.serviceIndex);\n        if (service)\n            service.processPacket(pkt);\n    }\n    /**\n     * @internal\n     */\n    disconnect() {\n        this.connected = false;\n        this.emit(DISCONNECT);\n        this.emit(CHANGE);\n    }\n    /**\n     * Gets a controller for the status light. Returns undefined if the device does not support a status light.\n     * @category Control\n     */\n    get statusLight() {\n        if (!this._statusLight &&\n            this.statusLightFlags !== exports.ControlAnnounceFlags.StatusLightNone)\n            this._statusLight = new LEDController(this.service(0), exports.ControlCmd.SetStatusLight);\n        return this._statusLight;\n    }\n    /**\n     * Sends an ``identify`` command to the device\n     * @category Lifecycle\n     */\n    async identify() {\n        if (this._identifying)\n            return;\n        try {\n            this._identifying = true;\n            this.emit(CHANGE);\n            const statusLight = this.statusLight;\n            if (statusLight)\n                await statusLight.blink(0x0000ff, 0, 262, 4);\n            else {\n                const ctrl = this.service(0);\n                await ctrl.sendCmdAsync(exports.ControlCmd.Identify, undefined, false);\n                await this.bus.delay(IDENTIFY_DURATION);\n            }\n        }\n        catch (e) {\n            this.emit(ERROR, e);\n        }\n        finally {\n            this._identifying = false;\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Indicates the device should be identifying.\n     * @category Lifecycle\n     */\n    get identifying() {\n        return this._identifying;\n    }\n    /**\n     * Sends a ``reset`` command to the device\n     * @category Lifecycle\n     */\n    reset() {\n        var _a;\n        return (_a = this.service(0)) === null || _a === void 0 ? void 0 : _a.sendCmdAsync(exports.ControlCmd.Reset);\n    }\n    /**\n     * Tries to retrive the product identifier from the device\n     * @param retry number of devices\n     * @returns promise that returns product identifier if received\n     * @category Control\n     */\n    async resolveProductIdentifier(retry = 0) {\n        var _a;\n        const fwIdRegister = (_a = this.service(0)) === null || _a === void 0 ? void 0 : _a.register(exports.ControlReg.ProductIdentifier);\n        if (!fwIdRegister)\n            return undefined;\n        while (retry-- >= 0 && fwIdRegister.data === undefined)\n            await fwIdRegister.refresh(true);\n        return fwIdRegister.uintValue;\n    }\n    /**\n     * Returns the product identifier synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get productIdentifier() {\n        var _a;\n        const reg = (_a = this.service(0)) === null || _a === void 0 ? void 0 : _a.register(exports.ControlReg.ProductIdentifier);\n        const v = reg === null || reg === void 0 ? void 0 : reg.uintValue;\n        if (reg && v === undefined)\n            reg === null || reg === void 0 ? void 0 : reg.refresh(true);\n        return v;\n    }\n    /**\n     * Gets the elapsed time since boot in milli-seconds\n     * @category Control\n     */\n    get uptime() {\n        var _a, _b;\n        const reg = (_a = this.service(0)) === null || _a === void 0 ? void 0 : _a.register(exports.ControlReg.Uptime);\n        const v = (_b = reg === null || reg === void 0 ? void 0 : reg.unpackedValue) === null || _b === void 0 ? void 0 : _b[0];\n        if (reg && v === undefined)\n            reg === null || reg === void 0 ? void 0 : reg.refresh(true);\n        let uptime = undefined;\n        if (v !== undefined) {\n            // compute offset\n            uptime = v / 1000 + this.bus.timestamp - reg.lastDataTimestamp;\n        }\n        return uptime;\n    }\n    /**\n     * Returns the firmware version synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get firmwareVersion() {\n        var _a;\n        const reg = (_a = this.service(0)) === null || _a === void 0 ? void 0 : _a.register(exports.ControlReg.FirmwareVersion);\n        const v = reg === null || reg === void 0 ? void 0 : reg.stringValue;\n        if (reg && v === undefined)\n            reg === null || reg === void 0 ? void 0 : reg.refresh(true);\n        return v;\n    }\n    initAcks() {\n        if (this._ackAwaiting)\n            return;\n        let drops = 0;\n        let resends = 0;\n        this._ackAwaiting = [];\n        const cleanUp = this.subscribe(PACKET_REPORT, (rep) => {\n            if (rep.serviceIndex != JD_SERVICE_INDEX_CRC_ACK)\n                return;\n            let numdone = 0;\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt && aa.pkt.crc == rep.serviceCommand) {\n                    //console.log(`ack`, aa.pkt)\n                    aa.pkt = null;\n                    numdone++;\n                    aa.okCb();\n                }\n            }\n            if (numdone)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt);\n        });\n        const resend = () => {\n            let numdrop = 0;\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt) {\n                    if (--aa.retriesLeft < 0) {\n                        drops++;\n                        aa.pkt.meta[META_ACK_FAILED] = true;\n                        aa.pkt = null;\n                        aa.errCb();\n                        numdrop++;\n                        if (Flags.diagnostics)\n                            console.debug(`ack: ${this.shortId} drop ${aa.pkt} (${drops} drops, ${resends} resends)`);\n                    }\n                    else {\n                        resends++;\n                        aa.pkt.sendCmdAsync(this);\n                        if (Flags.diagnostics)\n                            console.debug(`ack: ${this.shortId} resend ${aa.pkt} (${drops} drops, ${resends} resends)`);\n                    }\n                }\n            }\n            if (numdrop)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt);\n            if (Flags.diagnostics)\n                console.debug(`ack: ${this.shortId} awaits ${this._ackAwaiting.length}`);\n            if (this._ackAwaiting.length > 0) {\n                this.bus.scheduler.setTimeout(resend, Math.random() * (ACK_MAX_DELAY - ACK_MIN_DELAY) +\n                    ACK_MIN_DELAY);\n            }\n            else {\n                this._ackAwaiting = undefined;\n                cleanUp();\n            }\n        };\n        // start loop\n        this.bus.scheduler.setTimeout(resend, 40);\n    }\n    /**\n     * @internal\n     */\n    sendPktWithAck(pkt) {\n        // no acks possible when bus is passive\n        pkt.requiresAck = !this.bus.passive;\n        this.initAcks();\n        return new Promise((resolve, reject) => {\n            const ack = {\n                pkt,\n                retriesLeft: 4,\n                okCb: resolve,\n                errCb: () => {\n                    const e = new Error(\"No ACK for \" + pkt.toString());\n                    setAckError(e);\n                    reject(e);\n                },\n            };\n            this._ackAwaiting.push(ack);\n            pkt.sendCmdAsync(this);\n        });\n    }\n    /**\n     * @internal\n     */\n    async floodPing(numPkts = 100, size = 32) {\n        const pkt = Packet.jdpacked(exports.ControlCmd.FloodPing, \"u32 u32 u8\", [\n            numPkts,\n            0x1000,\n            size,\n        ]);\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n        await this.sendPktWithAck(pkt);\n    }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/** @internal */\nclass WallClockScheduler {\n    constructor() {\n        this._now =\n            typeof performance !== \"undefined\"\n                ? () => performance.now()\n                : () => Date.now();\n        this._startTime = this._now();\n    }\n    get timestamp() {\n        return this._now() - this._startTime;\n    }\n    resetTime(delta = 0) {\n        this._startTime = this._now() - delta;\n    }\n    setTimeout(handler, delay, ...args) {\n        return setTimeout(handler, delay, args);\n    }\n    clearTimeout(handle) {\n        clearTimeout(handle);\n    }\n    setInterval(handler, delay, ...args) {\n        return setInterval(handler, delay, args);\n    }\n    clearInterval(handle) {\n        clearInterval(handle);\n    }\n}\n\nconst BL_SUBPAGE_SIZE = 208;\nconst BL_RETRIES = 15;\nconst BL_SESSION_DELAY = 5;\nconst BL_PAGE_DELAY = 5;\nlet _startTime = 0;\nconst uf2ExtTags = {\n    version: -0x9fc7bc,\n    name: -0x650d9d,\n    pageSize: 0x0be9f7,\n    productIdentifier: 0xc8a729,\n};\nfunction timestamp() {\n    if (!_startTime)\n        _startTime = Date.now();\n    return Date.now() - _startTime;\n}\nfunction log(msg) {\n    console.log(`BL [${timestamp()}ms]: ${msg}`);\n}\nclass FlashClient {\n    constructor(bus, adpkt) {\n        this.bus = bus;\n        const d = bufferToArray(adpkt.data, exports.NumberFormat.UInt32LE);\n        this.pageSize = d[1];\n        this.flashSize = d[2];\n        this.dev_class = d[3];\n        this.device = adpkt.device;\n        this.handlePacket = this.handlePacket.bind(this);\n    }\n    handlePacket(pkt) {\n        if (pkt.serviceCommand == exports.BootloaderCmd.PageData)\n            this.lastStatus = pkt;\n    }\n    start() {\n        this.device.on(PACKET_REPORT, this.handlePacket);\n    }\n    stop() {\n        this.device.off(PACKET_REPORT, this.handlePacket);\n    }\n    async sendCommandAsync(p) {\n        p.serviceIndex = 1;\n        await p.sendCmdAsync(this.device);\n    }\n    async startFlashAsync() {\n        this.sessionId = (Math.random() * 0x10000000) | 0;\n        for (const d of this.classClients) {\n            d.start();\n            log(`flashing ${d.device.shortId}; available flash=${d.flashSize / 1024}kb; page=${d.pageSize}b`);\n        }\n        const setsession = Packet.jdpacked(exports.BootloaderCmd.SetSession, \"u32\", [this.sessionId]);\n        this.allPending();\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            for (const d of this.classClients) {\n                if (d.pending) {\n                    if (d.lastStatus &&\n                        d.lastStatus.getNumber(exports.NumberFormat.UInt32LE, 0) ==\n                            this.sessionId) {\n                        d.pending = false;\n                    }\n                    else {\n                        d.lastStatus = null;\n                        log(`set session ${this.sessionId} on ${d.device}`);\n                        await d.sendCommandAsync(setsession);\n                    }\n                    await this.bus.delay(BL_SESSION_DELAY);\n                }\n            }\n            if (this.numPending() == 0)\n                break;\n            await this.waitForStatusAsync();\n        }\n        if (this.numPending())\n            throw new Error(\"Can't set session id\");\n    }\n    async endFlashAsync() {\n        for (const f of this.classClients) {\n            await this.bus.delay(10);\n            await f.device.sendCtrlCommand(exports.ControlCmd.Reset);\n        }\n    }\n    allPending() {\n        for (const c of this.classClients) {\n            c.pending = true;\n            c.lastStatus = null;\n        }\n    }\n    numPending() {\n        let num = 0;\n        for (const c of this.classClients)\n            if (c.pending)\n                num++;\n        return num;\n    }\n    async waitForStatusAsync() {\n        for (let i = 0; i < 100; ++i) {\n            if (this.classClients.every(c => c.lastStatus != null))\n                break;\n            await this.bus.delay(5);\n        }\n    }\n    async flashPage(page) {\n        const pageAddr = page.targetAddress;\n        const pageSize = this.pageSize;\n        const numSubpage = ((pageSize + BL_SUBPAGE_SIZE - 1) / BL_SUBPAGE_SIZE) | 0;\n        log(`flash ${prettySize(this.pageSize)} at ${(pageAddr & 0xffffff).toString(16)}`);\n        if (page.data.length != this.pageSize)\n            throw new Error(\"invalid page size\");\n        for (const f of this.classClients)\n            f.lastStatus = null;\n        this.allPending();\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            log(`  attempt ${i}`);\n            let currSubpage = 0;\n            for (let suboff = 0; suboff < pageSize; suboff += BL_SUBPAGE_SIZE) {\n                let sz = BL_SUBPAGE_SIZE;\n                if (suboff + sz > pageSize)\n                    sz = pageSize - suboff;\n                log(`send sub page ${currSubpage}/${numSubpage - 1} at ${suboff.toString(16)}[${sz}]`);\n                const hd = jdpack(\"u32 u16 u8 u8 u32 u32 u32 u32 u32\", [\n                    pageAddr,\n                    suboff,\n                    currSubpage++,\n                    numSubpage - 1,\n                    this.sessionId,\n                    0,\n                    0,\n                    0,\n                    0,\n                ]);\n                assert(hd.length == 4 * 7);\n                const p = Packet.from(exports.BootloaderCmd.PageData, bufferConcat(hd, page.data.slice(suboff, suboff + sz)));\n                // in first round, just broadcast everything\n                // in other rounds, broadcast everything except for last packet\n                if (i == 0 || currSubpage < numSubpage)\n                    await p.sendAsMultiCommandAsync(this.bus, SRV_BOOTLOADER);\n                else {\n                    for (const f of this.classClients)\n                        if (f.pending) {\n                            f.lastStatus = null;\n                            await f.sendCommandAsync(p);\n                        }\n                }\n                await this.bus.delay(BL_PAGE_DELAY);\n            }\n            await this.waitForStatusAsync();\n            for (const f of this.classClients) {\n                if (f.pending) {\n                    let err = \"\";\n                    if (f.lastStatus) {\n                        const [session_id, page_error, pageAddrR] = jdunpack(f.lastStatus.data, \"u32 u32 u32\");\n                        if (session_id != this.sessionId)\n                            err = \"invalid session_id\";\n                        else if (pageAddrR != pageAddr)\n                            err = \"invalid page address\";\n                        else if (page_error)\n                            err =\n                                \"err: \" +\n                                    (exports.BootloaderError[page_error] || page_error);\n                    }\n                    else {\n                        err = \"timeout\";\n                    }\n                    if (err) {\n                        f.lastStatus = null;\n                        log(`retry ${f.device}: ${err}`);\n                    }\n                    else {\n                        f.pending = false;\n                    }\n                }\n            }\n            if (this.numPending() == 0) {\n                log(`page ${pageAddr & 0xffffff} done, ${i}/${BL_RETRIES} retries`);\n                return;\n            }\n        }\n        throw new Error(\"too many retries\");\n    }\n    async flashFirmwareBlob(fw, progress) {\n        const waitCycles = 15;\n        const total = fw.pages.length + waitCycles + 3;\n        let idx = 0;\n        const prog = () => {\n            if (progress)\n                progress((100 * idx) / total);\n            idx++;\n        };\n        try {\n            prog();\n            await this.startFlashAsync();\n            prog();\n            for (const page of fw.pages) {\n                await this.flashPage(page);\n                prog();\n            }\n        }\n        finally {\n            try {\n                // even if something failed, try to reset everyone\n                await this.endFlashAsync();\n                prog();\n                // wait until we're out of bootloader mode; otherwise the subsequent scan will keep devices in BL mode\n                for (let i = 0; i < waitCycles; ++i) {\n                    await this.bus.delay(150);\n                    prog();\n                }\n            }\n            finally {\n                // even if resetting failed, unregister event listeners\n                for (const d of this.classClients) {\n                    d.stop();\n                }\n            }\n        }\n    }\n}\nconst UF2_MAGIC_START0 = 0x0a324655;\nconst UF2_MAGIC_START1 = 0x9e5d5157;\nconst UF2_MAGIC_END = 0x0ab16f30;\n/**\n * Parses a UF2 firmware binary into firmware blobs\n * @param uf2\n * @param store\n * @returns\n * @category Firmware\n */\nfunction parseUF2Firmware(uf2, store) {\n    const blobs = [];\n    let currBlob;\n    for (let off = 0; off < uf2.length; off += 512) {\n        const header = uf2.slice(off, off + 32);\n        const [magic0, magic1, flags, trgaddr, payloadSize, blkNo, numBlocks, familyID,] = bufferToArray(header, exports.NumberFormat.UInt32LE);\n        if (magic0 != UF2_MAGIC_START0 ||\n            magic1 != UF2_MAGIC_START1 ||\n            getNumber(uf2, exports.NumberFormat.UInt32LE, off + 512 - 4) !=\n                UF2_MAGIC_END)\n            throw new Error(\"invalid UF2\");\n        if (blkNo == 0) {\n            flush();\n            currBlob = {\n                pages: [],\n                productIdentifier: familyID,\n                version: \"\",\n                pageSize: 1024,\n                name: \"FW \" + familyID.toString(16),\n                store,\n            };\n        }\n        if (flags & 0x8000)\n            parseExtTags(uf2.slice(off + 32 + payloadSize, off + 512));\n        const pageSize = currBlob.pageSize || 1024;\n        let currPage = currBlob.pages[currBlob.pages.length - 1];\n        if (!currPage ||\n            !(currPage.targetAddress <= trgaddr &&\n                trgaddr < currPage.targetAddress + pageSize)) {\n            currPage = {\n                targetAddress: trgaddr & ~(pageSize - 1),\n                data: new Uint8Array(pageSize),\n            };\n            currPage.data.fill(0xff);\n            currBlob.pages.push(currPage);\n        }\n        currPage.data.set(uf2.slice(off + 32, off + 32 + payloadSize), trgaddr - currPage.targetAddress);\n    }\n    flush();\n    return blobs;\n    function flush() {\n        if (currBlob)\n            blobs.push(currBlob);\n    }\n    function parseExtTags(buf) {\n        let sz = 0;\n        for (let i = 0; i < buf.length; i += sz) {\n            sz = buf[i];\n            if (sz == 0)\n                break;\n            const desig = getNumber(buf, exports.NumberFormat.UInt32LE, i) >>> 8;\n            for (const key of Object.keys(uf2ExtTags)) {\n                const tg = uf2ExtTags[key];\n                if (desig == Math.abs(tg)) {\n                    let v;\n                    if (tg < 0) {\n                        v = bufferToString(buf.slice(i + 4, i + sz));\n                    }\n                    else {\n                        v = getNumber(buf, exports.NumberFormat.UInt32LE, i + 4);\n                    }\n                    const cbany = currBlob;\n                    cbany[key] = v;\n                    break;\n                }\n            }\n            sz = (sz + 3) & ~3;\n        }\n    }\n}\n/**\n * Parse a UF2 firmware file and extracts firmware blobs\n * @param blob\n * @param store\n * @returns\n * @category Firmware\n */\nasync function parseFirmwareFile(blob, store) {\n    const data = await readBlobToUint8Array(blob);\n    const buf = new Uint8Array(data);\n    const uf2Blobs = parseUF2Firmware(buf, store);\n    return uf2Blobs;\n}\nasync function createFlashers(bus) {\n    const flashers = [];\n    const numTries = 10;\n    const tryDelay = 10;\n    const handlePkt = (p) => {\n        // note that we may get this even if recovery==false due to someone else asking\n        // (eg when the user set the recovery mode toggle)\n        if (p.serviceIndex == 1 &&\n            p.serviceCommand == CMD_ADVERTISEMENT_DATA &&\n            p.getNumber(exports.NumberFormat.UInt32LE, 0) == SRV_BOOTLOADER) {\n            if (!flashers.find(f => f.device.deviceId == p.deviceIdentifier)) {\n                log(`new flasher`);\n                flashers.push(new FlashClient(bus, p));\n            }\n        }\n    };\n    try {\n        bus.on(PACKET_REPORT, handlePkt);\n        for (let i = 0; i < numTries; ++i) {\n            // also ask BL services if any\n            const bl_announce = Packet.onlyHeader(CMD_ADVERTISEMENT_DATA);\n            await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER);\n            await bus.delay(tryDelay);\n        }\n    }\n    finally {\n        bus.off(PACKET_REPORT, handlePkt);\n    }\n    return flashers;\n}\n/**\n * Indicates if a firmware blob is applicated to the device information\n * @param dev\n * @param blob\n * @returns\n * @category Firmware\n */\nfunction updateApplicable(dev, blob) {\n    return (dev &&\n        blob &&\n        dev.bootloaderProductIdentifier == blob.productIdentifier &&\n        dev.version !== blob.version);\n}\n/**\n * Flash firmware blob onto device\n * @param bus\n * @param blob\n * @param updateCandidates\n * @param ignoreFirmwareCheck\n * @param progress\n * @returns\n * @category Firmware\n */\nasync function flashFirmwareBlob(bus, blob, updateCandidates, ignoreFirmwareCheck, progress) {\n    if (!(updateCandidates === null || updateCandidates === void 0 ? void 0 : updateCandidates.length))\n        return;\n    _startTime = Date.now();\n    log(`resetting ${updateCandidates.length} device(s)`);\n    for (const d of updateCandidates) {\n        const device = bus.device(d.deviceId);\n        log(`resetting ${device}`);\n        await device.sendCtrlCommand(exports.ControlCmd.Reset);\n    }\n    const allFlashers = await createFlashers(bus);\n    const flashers = allFlashers.filter(f => !!ignoreFirmwareCheck || f.dev_class == blob.productIdentifier);\n    if (!flashers.length) {\n        log(`no devices to flash`);\n        return;\n    }\n    if (flashers.length != updateCandidates.length)\n        console.error(`expected ${updateCandidates.length} flashers, got ${flashers.length}`);\n    flashers[0].classClients = flashers;\n    log(`flashing ${blob.name}`);\n    await flashers[0].flashFirmwareBlob(blob, progress);\n}\n/**\n * This command can be sent every 50ms to keep devices in bootloader mode\n * @param bus\n * @category Firmware\n */\nasync function sendStayInBootloaderCommand(bus) {\n    const bl_announce = Packet.onlyHeader(exports.BootloaderCmd.Info);\n    await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER);\n}\n\nfunction defaultFieldPayload(specification) {\n    let r = undefined;\n    switch (specification.type) {\n        case \"bool\":\n            r = 0;\n            break;\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const min = pick(specification.typicalMin, specification.absoluteMin, undefined);\n            const max = pick(specification.typicalMax, specification.absoluteMax, undefined);\n            if (max !== undefined && min !== undefined)\n                r = (max + min) / 2;\n            else\n                r = 0;\n            break;\n        }\n        case \"bytes\": {\n            r = new Uint8Array(0);\n            break;\n        }\n        case \"string\":\n        case \"string0\": {\n            r = \"\";\n            break;\n        }\n    }\n    if (/^(u0|i1)\\.\\d+$/.test(specification.type))\n        r = 0;\n    return r;\n}\nfunction defaultPayload(specification) {\n    const { fields } = specification;\n    const rs = fields.map(defaultFieldPayload);\n    return rs;\n}\n/**\n * A register \"server\" instance, used to assembly service servers.\n * @category Servers\n */\nclass JDRegisterServer extends JDEventSource {\n    constructor(service, identifier, defaultValue) {\n        var _a, _b;\n        super();\n        this.service = service;\n        this.identifier = identifier;\n        this.skipBoundaryCheck = false;\n        this.skipErrorInjection = false;\n        const serviceSpecification = this.service.specification;\n        this.specification = serviceSpecification.packets.find(pkt => isRegister(pkt) && pkt.identifier === this.identifier);\n        let v = defaultValue;\n        if (!v && !this.specification.optional)\n            v = defaultPayload(this.specification);\n        if (v !== undefined && !v.some(vi => vi === undefined)) {\n            this.data = jdpack(this.packFormat, v);\n        }\n        // keep a copy to handle reset\n        this.resetData = (_a = this.data) === null || _a === void 0 ? void 0 : _a.slice(0);\n        // don't check boundaries if there are none\n        this.skipBoundaryCheck = !((_b = this.specification) === null || _b === void 0 ? void 0 : _b.fields.some(field => isSet(field.absoluteMin) || isSet(field.absoluteMax)));\n    }\n    get packFormat() {\n        return this.specification.packFormat;\n    }\n    values() {\n        return jdunpack(this.data, this.packFormat);\n    }\n    normalize(values) {\n        var _a;\n        // enforce boundaries from spec\n        if (!this.skipBoundaryCheck) {\n            (_a = this.specification) === null || _a === void 0 ? void 0 : _a.fields.forEach((field, fieldi) => {\n                if (field.isSimpleType) {\n                    let value = values[fieldi];\n                    // clamp within bounds\n                    const min = field.absoluteMin;\n                    if (min !== undefined)\n                        value = Math.max(min, value);\n                    const max = field.absoluteMax;\n                    if (max !== undefined)\n                        value = Math.min(max, value);\n                    // update\n                    values[fieldi] = value;\n                }\n            });\n        }\n        // enforce other boundaries\n        this.emit(PACKET_DATA_NORMALIZE, values);\n    }\n    shouldNormalize() {\n        return (!this.skipBoundaryCheck || this.listenerCount(PACKET_DATA_NORMALIZE));\n    }\n    setValues(values, skipChangeEvent) {\n        if (this.readOnly)\n            return;\n        if (this.shouldNormalize())\n            this.normalize(values);\n        const d = jdpack(this.packFormat, values);\n        if (!bufferEq(this.data, d)) {\n            this.data = d;\n            if (!skipChangeEvent)\n                this.emit(CHANGE);\n        }\n    }\n    reset() {\n        var _a;\n        this.data = (_a = this.resetData) === null || _a === void 0 ? void 0 : _a.slice(0);\n    }\n    async sendGetAsync() {\n        var _a;\n        this.emit(REGISTER_PRE_GET);\n        let d = this.data;\n        if (!d)\n            return;\n        const error = !this.skipErrorInjection && ((_a = this.errorRegister) === null || _a === void 0 ? void 0 : _a.values()[0]);\n        if (error && !isNaN(error)) {\n            // apply error artifically\n            const vs = this.values();\n            for (let i = 0; i < vs.length; ++i) {\n                vs[i] += Math.random() * error;\n            }\n            d = jdpack(this.packFormat, vs);\n        }\n        await this.service.sendPacketAsync(Packet.from(this.identifier | CMD_GET_REG, d));\n    }\n    handlePacket(pkt) {\n        if (this.identifier !== pkt.registerIdentifier)\n            return false;\n        if (pkt.isRegisterGet) {\n            this.sendGetAsync();\n        }\n        else if (this.identifier >> 8 !== 0x1) {\n            // set, non-const\n            let changed = false;\n            let d = pkt.data;\n            // unpack and check boundaries\n            if (this.shouldNormalize()) {\n                try {\n                    // unpack, apply boundaries, repack\n                    const values = jdunpack(d, this.packFormat);\n                    this.normalize(values);\n                    d = jdpack(this.packFormat, values);\n                }\n                catch (e) {\n                    // invalid format, refuse\n                    this.emit(PACKET_INVALID_DATA, pkt);\n                }\n            }\n            // test if anything changed\n            if (!bufferEq(this.data, d)) {\n                this.data = d;\n                changed = true;\n            }\n            this.lastSetTime = this.service.timestamp;\n            this.emit(REPORT_RECEIVE);\n            if (changed)\n                this.emit(CHANGE);\n        }\n        return true;\n    }\n}\n\nconst CALIBRATION_DELAY = 5000;\n/**\n * Base class for service server implementations\n * @category Servers\n */\nclass JDServiceServer extends JDEventSource {\n    constructor(serviceClass, options) {\n        super();\n        this.serviceClass = serviceClass;\n        this.serviceIndex = -1; // set by device\n        this._registers = [];\n        this.commands = {};\n        this._locked = false;\n        const { instanceName, variant, valueValues, intensityValues, registerValues, isActive, } = options || {};\n        this.specification = serviceSpecificationFromClassIdentifier(this.serviceClass);\n        this.statusCode = this.addRegister(exports.SystemReg.StatusCode, [exports.SystemStatusCodes.Ready, 0]);\n        if (valueValues)\n            this.addRegister(exports.SystemReg.Value, valueValues);\n        if (intensityValues) {\n            const intensity = this.addRegister(exports.SystemReg.Intensity, intensityValues);\n            if (isActive)\n                intensity.on(CHANGE, () => {\n                    const ev = isActive(intensity.values());\n                    if (ev !== undefined)\n                        this.sendEvent(isActive(intensity.values())\n                            ? exports.SystemEvent.Active\n                            : exports.SystemEvent.Inactive);\n                });\n        }\n        if (variant)\n            this.addRegister(exports.SystemReg.Variant, [variant]);\n        this.instanceName = this.addRegister(exports.SystemReg.InstanceName, [\n            instanceName || \"\",\n        ]);\n        // any extra\n        registerValues === null || registerValues === void 0 ? void 0 : registerValues.forEach(({ code, values }) => this.addRegister(code, values));\n        // emit event when status code changes\n        this.statusCode.on(CHANGE, () => this.sendEvent(exports.BaseEvent.StatusCodeChanged, this.statusCode.data));\n        // if the device has a calibrate command, regiser handler\n        // and put device in calibrationneeded state\n        if (this.specification.packets.find(pkt => pkt.kind === \"command\" &&\n            pkt.identifier === exports.SystemCmd.Calibrate)) {\n            this.addCommand(exports.SystemCmd.Calibrate, this.handleCalibrate.bind(this));\n            this.statusCode.setValues([exports.SystemStatusCodes.CalibrationNeeded, 0], true);\n        }\n        this.handleTwinPacket = this.handleTwinPacket.bind(this);\n    }\n    get device() {\n        return this._device;\n    }\n    set device(value) {\n        if (this._device !== value) {\n            this._device = value;\n            this.emit(DEVICE_CHANGE);\n            this.emit(CHANGE);\n        }\n    }\n    get twin() {\n        return this._twin;\n    }\n    set twin(service) {\n        if (service === this._twin)\n            return;\n        if (this._twin) {\n            this._twin.off(PACKET_RECEIVE, this.handleTwinPacket);\n            this._twin.off(PACKET_SEND, this.handleTwinPacket);\n            this._twinCleanup.forEach(tw => tw());\n            // unsubscribe\n        }\n        this._twin = service;\n        this._twinCleanup = service ? [] : undefined;\n        if (this._twin) {\n            this._twin.on(PACKET_RECEIVE, this.handleTwinPacket);\n            this._twin.on(PACKET_SEND, this.handleTwinPacket);\n            this._twin.registers().forEach(twinReg => {\n                const reg = this.register(twinReg.code);\n                if (reg) {\n                    reg === null || reg === void 0 ? void 0 : reg.setValues(twinReg.unpackedValue);\n                    this._twinCleanup.push(twinReg.subscribe(REPORT_UPDATE, () => reg.setValues(twinReg.unpackedValue)));\n                }\n            });\n        }\n        this.emit(CHANGE);\n    }\n    handleTwinPacket(pkt) {\n        this.handlePacket(pkt);\n    }\n    get registers() {\n        return this._registers.slice(0);\n    }\n    get timestamp() {\n        var _a, _b, _c;\n        const bus = ((_a = this.device) === null || _a === void 0 ? void 0 : _a.bus) || ((_c = (_b = this._twin) === null || _b === void 0 ? void 0 : _b.device) === null || _c === void 0 ? void 0 : _c.bus);\n        return bus === null || bus === void 0 ? void 0 : bus.timestamp;\n    }\n    register(code) {\n        return this._registers.find(reg => reg.identifier === code);\n    }\n    addExistingRegister(reg) {\n        this._registers.push(reg);\n        return reg;\n    }\n    addRegister(identifier, defaultValue) {\n        let reg = this._registers.find(r => r.identifier === identifier);\n        if (!reg && !this._locked) {\n            // make sure this register is supported\n            if (!this.specification.packets.find(pkt => isRegister(pkt) && pkt.identifier === identifier))\n                return undefined;\n            reg = new JDRegisterServer(this, identifier, defaultValue);\n            this._registers.push(reg);\n        }\n        return reg;\n    }\n    reset() {\n        this.registers.forEach(reg => reg.reset());\n    }\n    /**\n     * Locks the current set of registers\n     */\n    lock() {\n        this._locked = true;\n    }\n    addCommand(identifier, handler) {\n        if (this._locked)\n            console.error(`adding command to locked service`);\n        this.commands[identifier] = handler;\n    }\n    async handlePacket(pkt) {\n        if (pkt.isRegisterGet || pkt.isRegisterSet) {\n            // find register to handle\n            const rid = pkt.registerIdentifier;\n            let reg = this._registers.find(r => r.identifier === rid);\n            if (!reg) {\n                // try adding\n                reg = this.addRegister(rid);\n            }\n            reg === null || reg === void 0 ? void 0 : reg.handlePacket(pkt);\n        }\n        else if (pkt.isCommand) {\n            const cmd = this.commands[pkt.serviceCommand];\n            if (cmd)\n                cmd(pkt);\n            else if (cmd === undefined)\n                console.log(`ignored command`, { pkt });\n        }\n        // ignored?\n    }\n    async sendPacketAsync(pkt) {\n        if (this.twin)\n            return;\n        pkt.serviceIndex = this.serviceIndex;\n        await this.device.sendPacketAsync(pkt);\n    }\n    async sendEvent(eventCode, data) {\n        if (this.twin)\n            return;\n        const { device } = this;\n        const { bus } = device;\n        if (!bus)\n            return;\n        const now = bus.timestamp;\n        const cmd = device.createEventCmd(eventCode);\n        const pkt = Packet.from(cmd, data || new Uint8Array(0));\n        await this.sendPacketAsync(pkt);\n        device.delayedSend(pkt, now + 20);\n        device.delayedSend(pkt, now + 100);\n    }\n    async handleCalibrate() {\n        const [status] = this.statusCode.values();\n        if (status !== exports.SystemStatusCodes.Ready)\n            return;\n        this.calibrate();\n    }\n    async calibrate() {\n        // notify that calibration started\n        this.statusCode.setValues([exports.SystemStatusCodes.Calibrating, 0]);\n        // wait 5 seconds\n        await this.device.bus.delay(CALIBRATION_DELAY);\n        // finish calibraion\n        this.statusCode.setValues([exports.SystemStatusCodes.Ready, 0]);\n    }\n}\n\nclass SensorServer extends JDServiceServer {\n    constructor(serviceClass, options) {\n        super(serviceClass, options);\n        this.serviceClass = serviceClass;\n        this.lastStream = 0;\n        this.lastErrorReadingChanged = false;\n        const { readingValues, streamingInterval, preferredStreamingInterval, readingError, } = options || {};\n        this.reading = this.addRegister(exports.SystemReg.Reading, readingValues);\n        this.streamingSamples = this.addRegister(exports.SensorReg.StreamingSamples);\n        this.streamingInterval = this.addRegister(exports.SensorReg.StreamingInterval, [\n            streamingInterval ||\n                preferredStreamingInterval ||\n                this.reading.specification.preferredInterval ||\n                STREAMING_DEFAULT_INTERVAL,\n        ]);\n        if (preferredStreamingInterval !== undefined)\n            this.preferredStreamingInterval = this.addRegister(exports.SensorReg.StreamingPreferredInterval, [preferredStreamingInterval]);\n        if (readingError !== undefined) {\n            this.readingError = this.addRegister(exports.SystemReg.ReadingError, readingError);\n            this.reading.errorRegister = this.readingError;\n            this.readingError.on(CHANGE, () => (this.lastErrorReadingChanged = true));\n        }\n        this.on(REFRESH, this.refreshRegisters.bind(this));\n    }\n    refreshRegisters() {\n        var _a, _b, _c, _d, _e;\n        const [samples] = this.streamingSamples.values();\n        if (samples <= 0 || !this.reading.data)\n            return;\n        // is it time to stream?\n        let interval = (_b = (_a = this.streamingInterval) === null || _a === void 0 ? void 0 : _a.values()) === null || _b === void 0 ? void 0 : _b[0];\n        if (interval === undefined)\n            interval = (_d = (_c = this.preferredStreamingInterval) === null || _c === void 0 ? void 0 : _c.values()) === null || _d === void 0 ? void 0 : _d[0];\n        if (interval === undefined)\n            interval = this.reading.specification.preferredInterval;\n        if (interval === undefined)\n            interval = STREAMING_DEFAULT_INTERVAL;\n        const now = this.device.bus.timestamp;\n        if (now - this.lastStream > interval) {\n            // let's stream a value!\n            this.lastStream = now;\n            this.streamingSamples.setValues([samples - 1]);\n            this.reading.sendGetAsync();\n            this.emit(READING_SENT);\n            // if the error changed, send value as well.\n            if (this.lastErrorReadingChanged) {\n                (_e = this.readingError) === null || _e === void 0 ? void 0 : _e.sendGetAsync();\n                this.lastErrorReadingChanged = false;\n            }\n        }\n    }\n}\n\n/**\n * @internal\n */\nfunction dateToClock(n) {\n    const year = n.getFullYear();\n    const month = n.getMonth() + 1;\n    const date = n.getDate();\n    const day = n.getDay();\n    const hour = n.getHours();\n    const min = n.getMinutes();\n    const sec = n.getSeconds();\n    return [year, month, date, day, hour, min, sec];\n}\nclass RealTimeClockServer extends SensorServer {\n    constructor() {\n        super(SRV_REAL_TIME_CLOCK, {\n            readingValues: dateToClock(new Date()),\n            variant: exports.RealTimeClockVariant.Computer,\n            streamingInterval: 1000,\n        });\n        this.lastSecond = 0;\n        this.error = this.addRegister(exports.RealTimeClockReg.Error, [0]);\n        this.precision = this.addRegister(exports.RealTimeClockReg.Precision, [0]);\n        this.addCommand(exports.RealTimeClockCmd.SetTime, this.handleSetTime.bind(this));\n        this.on(REFRESH, this.refreshTime.bind(this));\n    }\n    static async syncTime(bus) {\n        const values = dateToClock(new Date());\n        const pkt = Packet.jdpacked(exports.RealTimeClockCmd.SetTime, \"u16 u8 u8 u8 u8 u8 u8\", values);\n        await pkt.sendAsMultiCommandAsync(bus, SRV_REAL_TIME_CLOCK);\n    }\n    handleSetTime(pkt) {\n        console.log(`set time`, { pkt });\n    }\n    refreshTime() {\n        const d = new Date();\n        const s = d.getSeconds();\n        if (s !== this.lastSecond) {\n            const r = dateToClock(d);\n            this.reading.setValues(r);\n            this.lastSecond = s;\n        }\n    }\n}\n\n/**\n * Connection states for transports\n * @category Transport\n */\nexports.ConnectionState = void 0;\n(function (ConnectionState) {\n    ConnectionState[\"Connected\"] = \"connected\";\n    ConnectionState[\"Connecting\"] = \"connecting\";\n    ConnectionState[\"Disconnecting\"] = \"disconnecting\";\n    ConnectionState[\"Disconnected\"] = \"disconnected\";\n})(exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * A transport marshalls Jacdac packets between a physical device on the TypeScript bus.\n * @category Transport\n */\nclass Transport extends JDEventSource {\n    constructor(type, options) {\n        var _a, _b, _c, _d;\n        super();\n        this.type = type;\n        this.disposed = false;\n        this._connectionState = exports.ConnectionState.Disconnected;\n        this._checkPulse = !!(options === null || options === void 0 ? void 0 : options.checkPulse);\n        this._cleanups = [\n            (_b = (_a = options === null || options === void 0 ? void 0 : options.connectObservable) === null || _a === void 0 ? void 0 : _a.subscribe({\n                next: async () => {\n                    var _a, _b;\n                    if ((_a = this.bus) === null || _a === void 0 ? void 0 : _a.disconnected) {\n                        await delay(TRANSPORT_CONNECT_RETRY_DELAY);\n                        if ((_b = this.bus) === null || _b === void 0 ? void 0 : _b.disconnected) {\n                            if (typeof document !== \"undefined\" &&\n                                document.visibilityState === \"visible\")\n                                this.connect(true);\n                        }\n                    }\n                },\n            })) === null || _b === void 0 ? void 0 : _b.unsubscribe,\n            (_d = (_c = options === null || options === void 0 ? void 0 : options.disconnectObservable) === null || _c === void 0 ? void 0 : _c.subscribe({\n                next: () => {\n                    this.disconnect();\n                },\n            })) === null || _d === void 0 ? void 0 : _d.unsubscribe,\n        ].filter(c => !!c);\n    }\n    get bus() {\n        return this._bus;\n    }\n    set bus(bus) {\n        assert(!this._bus && !!bus);\n        this._bus = bus;\n        if (this._checkPulse) {\n            this._bus.on(SELF_ANNOUNCE, this.checkPulse.bind(this));\n        }\n    }\n    /**\n     * Gets the bus connection state.\n     */\n    get connectionState() {\n        return this._connectionState;\n    }\n    setConnectionState(state) {\n        if (this._connectionState !== state) {\n            //console.debug(`${this._connectionState} -> ${state}`)\n            this._connectionState = state;\n            this._connectionTime =\n                state === exports.ConnectionState.Connected\n                    ? this.bus.timestamp\n                    : undefined;\n            this._lastReceivedTime = undefined;\n            this.emit(CONNECTION_STATE, this._connectionState);\n            this.bus.emit(CONNECTION_STATE, this);\n            switch (this._connectionState) {\n                case exports.ConnectionState.Connected:\n                    this.emit(CONNECT);\n                    break;\n                case exports.ConnectionState.Connecting:\n                    this.emit(CONNECTING);\n                    break;\n                case exports.ConnectionState.Disconnecting:\n                    this.emit(DISCONNECTING);\n                    break;\n                case exports.ConnectionState.Disconnected:\n                    this.emit(DISCONNECT);\n                    break;\n            }\n            this.emit(CHANGE);\n            this.bus.emit(CHANGE);\n        }\n    }\n    get connecting() {\n        return this.connectionState == exports.ConnectionState.Connecting;\n    }\n    get disconnecting() {\n        return this.connectionState == exports.ConnectionState.Disconnecting;\n    }\n    get connected() {\n        return this._connectionState == exports.ConnectionState.Connected;\n    }\n    get disconnected() {\n        return this._connectionState == exports.ConnectionState.Disconnected;\n    }\n    async checkPulse() {\n        assert(this._checkPulse);\n        if (!this.connected)\n            return; // ignore while connected\n        if (this.bus.safeBoot)\n            return; // don't mess with flashing bootloaders\n        const devices = this.bus.devices();\n        if (devices.some(dev => dev.flashing))\n            // don't mess with flashing\n            return;\n        // detect if the proxy device is lost\n        const t = this.bus.timestamp -\n            (this._lastReceivedTime || this._connectionTime);\n        if (t > TRANSPORT_PULSE_TIMEOUT) {\n            this.emit(LOST);\n            console.debug(`${this.type}: lost connection with device`);\n            if (this._lastReceivedTime !== undefined)\n                await this.reconnect();\n            else\n                await this.disconnect(true);\n        }\n    }\n    async sendPacketAsync(p) {\n        if (!this.connected) {\n            this.emit(PACKET_SEND_DISCONNECT, p);\n        }\n        else {\n            await this.transportSendPacketAsync(p);\n        }\n    }\n    connect(background) {\n        console.debug(`${this.type}: connect ${background ? `(background)` : \"\"}`);\n        if (this.disposed)\n            throw new Error(\"attempted to connect to a disposed transport\");\n        // already connected\n        if (this.connectionState == exports.ConnectionState.Connected) {\n            console.debug(`${this.type}: already connected`);\n            return Promise.resolve();\n        }\n        // connecting\n        if (!this._connectPromise) {\n            // already disconnecting, retry when disconnected\n            if (this._disconnectPromise) {\n                console.debug(`${this.type}: queuing connect after disconnecting`);\n                const p = this._disconnectPromise;\n                this._disconnectPromise = undefined;\n                this._connectPromise = p.then(() => this.connect());\n            }\n            else {\n                // starting a fresh connection\n                console.debug(`${this.type}: connecting`);\n                this._connectPromise = Promise.resolve();\n                this.setConnectionState(exports.ConnectionState.Connecting);\n                this._connectPromise = this._connectPromise.then(() => this.transportConnectAsync(background));\n                const p = (this._connectPromise = this._connectPromise\n                    .then(() => {\n                    if (p == this._connectPromise) {\n                        this._connectPromise = undefined;\n                        this.setConnectionState(exports.ConnectionState.Connected);\n                    }\n                    else {\n                        console.debug(`${this.type}: connection aborted in flight`, {\n                            state: this._connectionState,\n                            old: this._connectPromise,\n                            new: p,\n                        });\n                        // already reported\n                    }\n                })\n                    .catch(e => {\n                    if (p == this._connectPromise) {\n                        this._connectPromise = undefined;\n                        this.setConnectionState(exports.ConnectionState.Disconnected);\n                        if (!background)\n                            this.errorHandler(CONNECT, e);\n                        else\n                            console.debug(`${this.type}: background connect failed`);\n                    }\n                    else {\n                        console.debug(`${this.type}: connection error aborted in flight`);\n                    }\n                }));\n            }\n        }\n        else {\n            console.debug(`${this.type}: connect with existing promise`);\n        }\n        return this._connectPromise;\n    }\n    disconnect(background) {\n        // already disconnected\n        if (this.connectionState == exports.ConnectionState.Disconnected)\n            return Promise.resolve();\n        if (!this._disconnectPromise) {\n            // connection in progress, wait and disconnect when done\n            if (this._connectPromise) {\n                console.debug(`${this.type}: cancelling connection and disconnect`);\n                this._connectPromise = undefined;\n            }\n            console.debug(`${this.type}: disconnecting`);\n            this._disconnectPromise = Promise.resolve();\n            this.setConnectionState(exports.ConnectionState.Disconnecting);\n            this._disconnectPromise = this._disconnectPromise.then(() => this.transportDisconnectAsync(background));\n            this._disconnectPromise = this._disconnectPromise\n                .catch(e => {\n                this._disconnectPromise = undefined;\n                this.errorHandler(DISCONNECT, e);\n            })\n                .finally(() => {\n                this._disconnectPromise = undefined;\n                this.setConnectionState(exports.ConnectionState.Disconnected);\n            });\n        }\n        else {\n            console.debug(`${this.type}: disconnect with existing promise`);\n        }\n        return this._disconnectPromise;\n    }\n    async reconnect() {\n        console.debug(`${this.type}: reconnect`);\n        await this.disconnect(true);\n        await this.connect(true);\n    }\n    handlePacket(payload) {\n        const { timestamp } = this.bus;\n        this._lastReceivedTime = timestamp;\n        const pkt = Packet.fromBinary(payload, timestamp);\n        pkt.sender = this.type;\n        this.bus.processPacket(pkt);\n    }\n    handleFrame(payload) {\n        const { timestamp } = this.bus;\n        this._lastReceivedTime = timestamp;\n        const pkts = Packet.fromFrame(payload, timestamp);\n        for (const pkt of pkts) {\n            pkt.sender = this.type;\n            this.bus.processPacket(pkt);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    errorHandler(context, exception) {\n        this.emit(ERROR, { context, exception });\n        this.bus.emit(ERROR, { transport: this, context, exception });\n        this.emit(CHANGE);\n        // when a microbit flash is initiated via file download, the device will\n        // stop responding. we should not try to reconnect while this is the case\n        this.disconnect(true);\n    }\n    dispose() {\n        this.disposed = true;\n        this._cleanups.forEach(c => c());\n        this._cleanups = [];\n    }\n}\n\nclass BusStatsMonitor extends JDEventSource {\n    /**\n     * @internal\n     */\n    constructor(bus) {\n        super();\n        this.bus = bus;\n        this._prev = Array(4)\n            .fill(0)\n            .map(() => ({\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }));\n        this._previ = 0;\n        this._temp = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        };\n        bus.on(PACKET_SEND, this.handlePacketSend.bind(this));\n        bus.on(PACKET_PROCESS, this.handlePacketProcess.bind(this));\n        bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this));\n    }\n    /**\n     * Computes the current packet statistics of the bus\n     */\n    get current() {\n        var _a;\n        const r = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        };\n        const n = this._prev.length;\n        for (let i = 0; i < this._prev.length; ++i) {\n            const p = this._prev[i];\n            r.packets += p.packets;\n            r.announce += p.announce;\n            r.acks += p.acks;\n            r.bytes += p.bytes;\n        }\n        // announce every 500ms\n        const n2 = n / 2;\n        r.packets /= n2;\n        r.announce /= n2;\n        r.acks /= n2;\n        r.bytes /= n2;\n        return Object.assign({ devices: this.bus.devices({ ignoreInfrastructure: true }).length, simulators: this.bus.serviceProviders().length, transport: (_a = this.bus.transports.find(transport => transport.connected)) === null || _a === void 0 ? void 0 : _a.type }, r);\n    }\n    accumulate(pkt) {\n        var _a, _b;\n        this._temp.packets++;\n        this._temp.bytes += (((_a = pkt.header) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = pkt.data) === null || _b === void 0 ? void 0 : _b.length) || 0);\n        if (pkt.isAnnounce)\n            this._temp.announce++;\n        if (pkt.isCRCAck)\n            this._temp.acks++;\n    }\n    handleSelfAnnounce() {\n        const changed = JSON.stringify(this._prev) !== JSON.stringify(this._temp);\n        this._prev[this._previ] = this._temp;\n        this._previ = (this._previ + 1) % this._prev.length;\n        this._temp = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        };\n        if (changed)\n            this.emit(CHANGE);\n    }\n    handlePacketSend(pkt) {\n        this.accumulate(pkt);\n    }\n    handlePacketProcess(pkt) {\n        this.accumulate(pkt);\n    }\n}\n\n/**\n * A control service server\n * @category Servers\n */\nclass ControlServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_CONTROL);\n        this.statusLightColor = undefined;\n        const { resetIn } = options || {};\n        this.startTime = Date.now();\n        this.deviceDescription = this.addRegister(exports.ControlReg.DeviceDescription);\n        this.mcuTemperature = this.addRegister(exports.ControlReg.McuTemperature, [25]);\n        this.uptime = this.addRegister(exports.ControlReg.Uptime);\n        if (resetIn)\n            this.resetIn = this.addRegister(exports.ControlReg.ResetIn, [0]);\n        this.addCommand(exports.ControlCmd.Services, this.announce.bind(this));\n        this.addCommand(exports.ControlCmd.Identify, this.identify.bind(this));\n        this.addCommand(exports.ControlCmd.Reset, this.handleReset.bind(this));\n        this.addCommand(exports.ControlCmd.Noop, null);\n        this.addCommand(exports.ControlCmd.SetStatusLight, this.handleSetStatusLight.bind(this));\n    }\n    async announce() {\n        // restartCounter, flags, packetCount, serviceClass\n        const pkt = Packet.jdpacked(exports.ControlCmd.Services, \"u16 u8 x[1] u32[]\", [\n            this.device.restartCounter |\n                exports.ControlAnnounceFlags.StatusLightRgbNoFade |\n                exports.ControlAnnounceFlags.SupportsACK,\n            this.device.packetCount + 1,\n            this.device\n                .services()\n                .slice(1)\n                .map(srv => srv.serviceClass),\n        ]);\n        await this.sendPacketAsync(pkt);\n        // micros\n        this.uptime.setValues([(Date.now() - this.startTime) * 100], true);\n        // check if we need to reset\n        if (this.resetIn) {\n            const [resetIn] = this.resetIn.values();\n            if (resetIn) {\n                const resetTimestamp = resetIn / 1000 + this.resetIn.lastSetTime;\n                if (resetTimestamp < this.device.bus.timestamp) {\n                    // reset in expired\n                    console.debug(`${this} reset in expired`, {\n                        resetIn,\n                        lastSet: this.resetIn.lastSetTime,\n                        resetTimestamp,\n                    });\n                    this.device.reset();\n                }\n            }\n        }\n    }\n    async identify() {\n        this.emit(IDENTIFY);\n    }\n    handleReset() {\n        this.startTime = Date.now();\n        this.device.reset();\n    }\n    handleSetStatusLight(pkt) {\n        const [toRed, toGreen, toBlue] = jdunpack(pkt.data, \"u8 u8 u8 u8\");\n        this.statusLightColor = (toRed << 16) | (toGreen << 8) | toBlue;\n        this.emit(CHANGE);\n    }\n}\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nclass JDServiceProvider extends JDEventSource {\n    constructor(template, deviceId) {\n        super();\n        this.template = template;\n        this.deviceId = deviceId;\n        if (!this.deviceId)\n            this.deviceId = randomDeviceId();\n        this.shortId = shortDeviceId(this.deviceId);\n        this.handleSelfAnnounce = this.handleSelfAnnounce.bind(this);\n        this.handlePacket = this.handlePacket.bind(this);\n    }\n    get bus() {\n        return this._bus;\n    }\n    set bus(value) {\n        if (value !== this._bus) {\n            this.stop();\n            this._bus = value;\n            if (this._bus)\n                this.start();\n        }\n    }\n    start() {\n        if (this._bus) {\n            this._bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce);\n            this._bus.on([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n        }\n    }\n    stop() {\n        if (this._bus) {\n            this._bus.off(SELF_ANNOUNCE, this.handleSelfAnnounce);\n            this._bus.off([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n            this._bus = undefined;\n        }\n    }\n    handleSelfAnnounce() { }\n}\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nclass JDServerServiceProvider extends JDServiceProvider {\n    constructor(template, services, options) {\n        super(template, options === null || options === void 0 ? void 0 : options.deviceId);\n        this._restartCounter = 0;\n        this._packetCount = 0;\n        this._eventCounter = undefined;\n        this.controlService = new ControlServer(options);\n        this._services = [];\n        this.updateServices(services);\n        this.on(REFRESH, this.refreshRegisters.bind(this));\n    }\n    updateServices(services) {\n        var _a;\n        // clear previous services\n        (_a = this._services) === null || _a === void 0 ? void 0 : _a.slice(1).forEach(srv => (srv.device = undefined));\n        // store new services\n        this._services = [this.controlService, ...services];\n        if (this._services.length >= MAX_SERVICES_LENGTH) {\n            this.emit(ERROR, `too many services (${this._services.length}) > ${MAX_SERVICES_LENGTH}`);\n            console.warn(`jacdac: dropping services to ${MAX_SERVICES_LENGTH}`);\n            this._services = this._services.slice(0, MAX_SERVICES_LENGTH);\n        }\n        this._services.forEach((srv, i) => {\n            srv.device = this;\n            srv.serviceIndex = i;\n        });\n        this.emit(CHANGE);\n    }\n    removeService(service) {\n        if ((service === null || service === void 0 ? void 0 : service.device) !== this)\n            return; // not in this device;\n        const newServices = this._services.slice(1);\n        const index = newServices.indexOf(service);\n        if (index > -1) {\n            newServices.splice(index, 1);\n            this.updateServices(newServices);\n        }\n    }\n    start() {\n        super.start();\n        this._packetCount = 0;\n    }\n    stop() {\n        this._delayedPackets = undefined;\n        super.stop();\n    }\n    handleSelfAnnounce() {\n        super.handleSelfAnnounce();\n        if (this._restartCounter < 0xf)\n            this._restartCounter++;\n        // async\n        this.controlService.announce();\n        // also send status codes, for non-zero codes\n        const activeServices = this.services().filter(srv => !isBufferEmpty(srv.statusCode.data));\n        activeServices.forEach(srv => srv.statusCode.sendGetAsync());\n        // reset counter\n        this._packetCount = 0;\n    }\n    get restartCounter() {\n        return this._restartCounter;\n    }\n    get packetCount() {\n        return this._packetCount;\n    }\n    services() {\n        return this._services.slice(0);\n    }\n    service(serviceIndex) {\n        return serviceIndex !== undefined && this._services[serviceIndex];\n    }\n    toString() {\n        return `host ${this.shortId}`;\n    }\n    get eventCounter() {\n        return this._eventCounter;\n    }\n    createEventCmd(evCode) {\n        if (!this._eventCounter)\n            this._eventCounter = 0;\n        this._eventCounter = (this._eventCounter + 1) & CMD_EVENT_COUNTER_MASK;\n        if (evCode >> 8)\n            throw new Error(\"invalid event code\");\n        return (CMD_EVENT_MASK |\n            (this._eventCounter << CMD_EVENT_COUNTER_POS) |\n            evCode);\n    }\n    async sendPacketAsync(pkt) {\n        if (!this.bus)\n            return Promise.resolve();\n        // qos counter\n        this._packetCount++;\n        pkt.deviceIdentifier = this.deviceId;\n        // compute crc and send\n        const p = pkt.sendCoreAsync(this.bus);\n        // send to current bus\n        this.bus.processPacket(pkt);\n        // return priomise\n        return p;\n    }\n    delayedSend(pkt, timestamp) {\n        if (!this._delayedPackets) {\n            this._delayedPackets = [];\n            // start processing loop\n            setTimeout(this.processDelayedPackets.bind(this), 10);\n        }\n        const dp = { timestamp, pkt };\n        this._delayedPackets.push(dp);\n        this._delayedPackets.sort((l, r) => -l.timestamp + r.timestamp);\n    }\n    processDelayedPackets() {\n        var _a, _b;\n        // consume packets that are ready\n        while ((_a = this._delayedPackets) === null || _a === void 0 ? void 0 : _a.length) {\n            const { timestamp, pkt } = this._delayedPackets[0];\n            if (timestamp > this.bus.timestamp)\n                break;\n            this._delayedPackets.shift();\n            // do we wait?\n            try {\n                this.sendPacketAsync(pkt);\n            }\n            catch (e) {\n                // something went wrong, clear queue\n                this._delayedPackets = undefined;\n                throw e;\n            }\n        }\n        // keep waiting or stop\n        if (!((_b = this._delayedPackets) === null || _b === void 0 ? void 0 : _b.length))\n            this._delayedPackets = undefined;\n        // we're done\n        else\n            setTimeout(this.processDelayedPackets.bind(this), 10);\n    }\n    handlePacket(pkt) {\n        const devIdMatch = pkt.deviceIdentifier == this.deviceId;\n        if (pkt.requiresAck && devIdMatch) {\n            pkt.requiresAck = false; // make sure we only do it once\n            const crc = pkt.crc;\n            const ack = Packet.onlyHeader(crc);\n            ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK;\n            this.sendPacketAsync(ack);\n        }\n        if (pkt.isMultiCommand) {\n            if (!pkt.isCommand)\n                return; // only commands supported\n            const multiCommandClass = pkt.serviceClass;\n            for (const h of this._services) {\n                if (h.serviceClass == multiCommandClass) {\n                    // pretend it's directly addressed to us\n                    const npkt = pkt.cloneForDevice(this.deviceId, h.serviceIndex);\n                    h.handlePacket(npkt);\n                }\n            }\n        }\n        else if (devIdMatch) {\n            if (!pkt.isCommand)\n                return; // huh? someone's pretending to be us?\n            const h = this._services[pkt.serviceIndex];\n            if (h) {\n                // log(`handle pkt at ${h.name} cmd=${pkt.service_command}`)\n                h.handlePacket(pkt);\n            }\n        }\n        else {\n            if (pkt.isCommand)\n                return; // it's a command, and it's not for us\n            // reception of ACKs is handled by JDDevice class\n        }\n    }\n    refreshRegisters() {\n        this._services.forEach(srv => srv.emit(REFRESH));\n    }\n    reset() {\n        var _a;\n        this._restartCounter = 0;\n        this._packetCount = 0;\n        (_a = this._services) === null || _a === void 0 ? void 0 : _a.forEach(srv => srv.reset());\n        this.emit(RESET);\n    }\n}\n\nclass ProtocolTestServer extends JDServiceServer {\n    constructor() {\n        super(SRV_PROTO_TEST);\n        this.init(exports.ProtoTestReg.RwBool, exports.ProtoTestReg.RoBool, exports.ProtoTestCmd.CBool, exports.ProtoTestEvent.EBool, false);\n        this.init(exports.ProtoTestReg.RwI32, exports.ProtoTestReg.RoI32, exports.ProtoTestCmd.CI32, exports.ProtoTestEvent.EI32, 0);\n        this.init(exports.ProtoTestReg.RwU32, exports.ProtoTestReg.RoU32, exports.ProtoTestCmd.CU32, exports.ProtoTestEvent.EU32, 0);\n        this.init(exports.ProtoTestReg.RwString, exports.ProtoTestReg.RoString, exports.ProtoTestCmd.CString, exports.ProtoTestEvent.EString, \"\");\n        this.rwBytes = this.init(exports.ProtoTestReg.RwBytes, exports.ProtoTestReg.RoBytes, exports.ProtoTestCmd.CBytes, exports.ProtoTestEvent.EBytes, new Uint8Array(0));\n        this.init(exports.ProtoTestReg.RwI8U8U16I32, exports.ProtoTestReg.RoI8U8U16I32, exports.ProtoTestCmd.CI8U8U16I32, exports.ProtoTestEvent.EI8U8U16I32, 0, 0, 0, 0);\n        this.init(exports.ProtoTestReg.RwU8String, exports.ProtoTestReg.RoU8String, exports.ProtoTestCmd.CU8String, exports.ProtoTestEvent.EU8String, 0, \"\");\n        this.addCommand(exports.ProtoTestCmd.CReportPipe, this.handleReportPipe.bind(this));\n    }\n    init(rwi, roi, ci, ei, ...values) {\n        const rw = this.addRegister(rwi, values);\n        const ro = this.addRegister(roi, rw.values());\n        rw.on(CHANGE, () => {\n            ro.setValues(rw.values());\n            this.sendEvent(ei, rw.data);\n        });\n        this.addCommand(ci, pkt => rw.setValues(jdunpack(pkt.data, rw.specification.packFormat)));\n        return rw;\n    }\n    async handleReportPipe(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(this.rwBytes.data, (b) => {\n            const buf = new Uint8Array(1);\n            buf[0] = b;\n            return jdpack(\"b\", [buf]);\n        });\n    }\n}\n\n/**\n * Server implementation for the button service\n * @category Servers\n */\nclass ButtonServer extends SensorServer {\n    constructor(instanceName, analog) {\n        super(SRV_BUTTON, {\n            instanceName,\n            readingValues: [ButtonServer.INACTIVE_VALUE],\n            streamingInterval: 50,\n        });\n        this.analog = this.addRegister(exports.ButtonReg.Analog, [!!analog]);\n        this.on(REFRESH, this.handleRefresh.bind(this));\n    }\n    get threshold() {\n        return this._threshold;\n    }\n    set threshold(value) {\n        if (value !== this._threshold) {\n            this._threshold = value;\n            this.analog.setValues([!!this._threshold]);\n            this.emit(CHANGE);\n        }\n    }\n    isActive() {\n        var _a, _b;\n        // TODO: debouncing\n        const [v] = this.reading.values();\n        const t = ((_b = (_a = this.threshold) === null || _a === void 0 ? void 0 : _a.values()) === null || _b === void 0 ? void 0 : _b[0]) || 0.5;\n        return v > t;\n    }\n    async handleRefresh() {\n        const now = this.device.bus.timestamp;\n        if (this.isActive()) {\n            // down event\n            if (this._downTime === undefined) {\n                this._downTime = now;\n                this._nextHold = this._downTime + ButtonServer.HOLD_TIME;\n                await this.sendEvent(exports.ButtonEvent.Down);\n                // hold\n            }\n            else if (now > this._nextHold) {\n                const time = now - this._downTime;\n                this._nextHold =\n                    this.device.bus.timestamp + ButtonServer.HOLD_TIME;\n                await this.sendEvent(exports.ButtonEvent.Hold, jdpack(\"u32\", [time]));\n            }\n        }\n        else {\n            // up event\n            if (this._downTime !== undefined) {\n                const time = now - this._downTime;\n                this._downTime = undefined;\n                this._nextHold = undefined;\n                await this.sendEvent(exports.ButtonEvent.Up, jdpack(\"u32\", [time]));\n            }\n        }\n    }\n    async down() {\n        this.reading.setValues([ButtonServer.ACTIVE_VALUE]);\n    }\n    async up() {\n        this.reading.setValues([ButtonServer.INACTIVE_VALUE]);\n    }\n}\nButtonServer.HOLD_TIME = 500;\nButtonServer.INACTIVE_VALUE = 0;\nButtonServer.ACTIVE_VALUE = 1;\n\n/**\n * Encodes a buzzer tone information into a data payload\n * @param frequency sound frequency in Hz\n * @param ms sound duration in milliseconds\n * @param volume volume from [0..1]\n * @returns data payload\n * @category Data Packing\n */\nfunction tonePayload(frequency, ms, volume) {\n    const period = Math.round(1000000 / frequency);\n    const duty = (period * volume) >> 11;\n    return jdpack(\"u16 u16 u16\", [period, duty, ms]);\n}\n/**\n * Server implementation for the buzzer service\n * @category Servers\n */\nclass BuzzerServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_BUZZER, options);\n        this.volume = this.addRegister(exports.BuzzerReg.Volume, [0.2]);\n        this.addCommand(exports.BuzzerCmd.PlayTone, this.handlePlayTone.bind(this));\n    }\n    handlePlayTone(pkt) {\n        const [period, , duration] = jdunpack(pkt.data, \"u16 u16 u16\");\n        const frequency = 1000000 / period;\n        const [volume] = this.volume.values();\n        this.emit(BuzzerServer.PLAY_TONE, {\n            frequency,\n            duration,\n            volume,\n        });\n    }\n}\nBuzzerServer.PLAY_TONE = \"playTone\";\n\nclass CharacterScreenServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_CHARACTER_SCREEN);\n        const { message = \"\", rows = 2, columns = 16, variant, textDirection, brightness = 100, } = options || {};\n        this.message = this.addRegister(exports.CharacterScreenReg.Message, [\n            message,\n        ]);\n        this.brightness = this.addRegister(exports.CharacterScreenReg.Brightness, [brightness]);\n        this.rows = this.addRegister(exports.CharacterScreenReg.Rows, [rows]);\n        this.columns = this.addRegister(exports.CharacterScreenReg.Columns, [\n            columns,\n        ]);\n        this.variant = this.addRegister(exports.CharacterScreenReg.Variant, [variant || exports.CharacterScreenVariant.LCD]);\n        this.message = this.addRegister(exports.CharacterScreenReg.Message, [\n            \"\",\n        ]);\n        this.textDirection = this.addRegister(exports.CharacterScreenReg.TextDirection, [textDirection || exports.CharacterScreenTextDirection.LeftToRight]);\n        this.addCommand(exports.CharacterScreenCmd.SetLine, this.handleSetLine.bind(this));\n        this.addCommand(exports.CharacterScreenCmd.Clear, this.handleClear.bind(this));\n    }\n    handleClear() {\n        this.message.setValues([\"\"]);\n    }\n    handleSetLine(pkt) {\n        const [line, lineMessage] = pkt.jdunpack(\"u16 s\");\n        const [rows] = this.rows.values();\n        if (line >= rows)\n            return;\n        const [columns] = this.columns.values();\n        const [message = \"\"] = this.message.values();\n        const lines = message.split(\"\\n\");\n        lines[line] = lineMessage.slice(0, columns); // clip as needed\n        const newMessage = lines.map(l => l || \"\").join(\"\\n\");\n        this.message.setValues([newMessage]);\n    }\n}\n\n/**\n * @internal\n */\nconst JOYSTICK_DPAD_BUTTONS = exports.JoystickButtons.Left |\n    exports.JoystickButtons.Right |\n    exports.JoystickButtons.Up |\n    exports.JoystickButtons.Down;\n/**\n * @internal\n */\nconst JOYSTICK_ARCADE_BUTTONS = JOYSTICK_DPAD_BUTTONS |\n    exports.JoystickButtons.A |\n    exports.JoystickButtons.B |\n    exports.JoystickButtons.Menu |\n    exports.JoystickButtons.Select |\n    exports.JoystickButtons.Exit;\n/**\n * @internal\n */\nconst JOYSTICK_DPAD_A_BUTTONS = JOYSTICK_DPAD_BUTTONS | exports.JoystickButtons.A;\n/**\n * @internal\n */\nconst JOYSTICK_DPAD_AB_BUTTONS = JOYSTICK_DPAD_A_BUTTONS | exports.JoystickButtons.B;\n/**\n * @internal\n */\nconst JOYSTICK_GAMEPAD_EXTRA_BUTTONS = exports.JoystickButtons.B |\n    exports.JoystickButtons.Select |\n    exports.JoystickButtons.Menu |\n    exports.JoystickButtons.Reset;\n// https://w3c.github.io/gamepad/#remapping\nconst standardGamepadMapping = [\n    [exports.JoystickButtons.Left, 14],\n    [exports.JoystickButtons.Right, 15],\n    [exports.JoystickButtons.Up, 12],\n    [exports.JoystickButtons.Down, 13],\n    [exports.JoystickButtons.A, 0],\n    [exports.JoystickButtons.B, 1],\n    [exports.JoystickButtons.Select, 8],\n    [exports.JoystickButtons.Menu, 9],\n];\nclass JoystickServer extends SensorServer {\n    constructor(options) {\n        super(SRV_JOYSTICK, {\n            instanceName: options === null || options === void 0 ? void 0 : options.instanceName,\n            readingValues: [0, 0, 0],\n            streamingInterval: 50,\n        });\n        const { variant = exports.JoystickVariant.Thumb, buttonsAvailable = 0 } = options || {};\n        this.variant = this.addRegister(exports.JoystickReg.Variant, [variant]);\n        this.buttonsAvailable = this.addRegister(exports.JoystickReg.ButtonsAvailable, [buttonsAvailable]);\n    }\n    get isDigital() {\n        const [value] = this.buttonsAvailable.values();\n        return (value & JOYSTICK_DPAD_BUTTONS) === JOYSTICK_DPAD_BUTTONS;\n    }\n    async down(buttons) {\n        const [currentButtons, x, y] = this.reading.values();\n        const newButtons = currentButtons | buttons;\n        await this.updateReading(newButtons, x, y);\n    }\n    async up(buttons) {\n        const [currentButtons, x, y] = this.reading.values();\n        const newButtons = currentButtons & ~buttons;\n        await this.updateReading(newButtons, x, y);\n    }\n    async updateDirection(x, y) {\n        const [button] = this.reading.values();\n        await this.updateReading(button, x, y);\n    }\n    /**\n     * Read the state of a browser gamepad and apply it to the sensor\n     * @param gamepad\n     */\n    async update(gamepad) {\n        const { buttons, axes } = gamepad;\n        const [buttonsAvailable] = this.buttonsAvailable.values();\n        let newButtons = 0;\n        for (const [b, id] of standardGamepadMapping) {\n            if ((b & buttonsAvailable) == b && !!buttons[id].pressed) {\n                newButtons |= b;\n            }\n        }\n        let newX = 0, newY = 0;\n        if (!this.isDigital) {\n            const [axeLeftRight, axeUpDown] = axes;\n            newX = axeLeftRight;\n            newY = axeUpDown;\n        }\n        await this.updateReading(newButtons, newX, newY);\n    }\n    async updateReading(buttons, x, y) {\n        const [oldButtons] = this.reading.values();\n        if (this.isDigital) {\n            x =\n                buttons & exports.JoystickButtons.Left\n                    ? -1\n                    : buttons & exports.JoystickButtons.Right\n                        ? 1\n                        : 0;\n            y =\n                buttons & exports.JoystickButtons.Up\n                    ? -1\n                    : buttons & exports.JoystickButtons.Down\n                        ? 1\n                        : 0;\n        }\n        else {\n            const threshold = -1;\n            if (x < -threshold)\n                buttons |= exports.JoystickButtons.Left;\n            else if (x > threshold)\n                buttons |= exports.JoystickButtons.Right;\n            else\n                buttons &= ~(exports.JoystickButtons.Left | exports.JoystickButtons.Right);\n            if (y < -threshold)\n                buttons |= exports.JoystickButtons.Up;\n            else if (y > threshold)\n                buttons |= exports.JoystickButtons.Down;\n            else\n                buttons &= ~(exports.JoystickButtons.Up | exports.JoystickButtons.Down);\n        }\n        this.reading.setValues([buttons, x, y]);\n        if (buttons !== oldButtons) {\n            await this.sendEvent(exports.JoystickEvent.ButtonsChanged, jdpack(\"u32\", [buttons]));\n        }\n    }\n}\n\nclass DotMatrixServer extends JDServiceServer {\n    constructor(columns, rows, options) {\n        super(SRV_DOT_MATRIX);\n        const { brightness, variant } = options || {};\n        this.dots = this.addRegister(exports.DotMatrixReg.Dots, [new Uint8Array(0)]);\n        this.rows = this.addRegister(exports.DotMatrixReg.Rows, [rows]);\n        this.columns = this.addRegister(exports.DotMatrixReg.Columns, [columns]);\n        if (brightness !== undefined)\n            this.brightness = this.addRegister(exports.DotMatrixReg.Brightness, [128]);\n        if (variant !== undefined)\n            this.variant = this.addRegister(exports.DotMatrixReg.Variant, [variant]);\n        this.rows.skipBoundaryCheck = true;\n        this.rows.skipErrorInjection = true;\n        if (variant === exports.DotMatrixVariant.LED)\n            this.addRegister(exports.SensorReg.StreamingPreferredInterval, [\n                50,\n            ]);\n        this.rows.on(CHANGE, this.updateDotsBuffer.bind(this));\n        this.columns.on(CHANGE, this.updateDotsBuffer.bind(this));\n        this.updateDotsBuffer();\n    }\n    updateDotsBuffer() {\n        var _a;\n        // columns must be byte aligned\n        const [rows] = this.rows.values();\n        const [columns] = this.columns.values();\n        // there's probably a much smarter way to do this\n        const columnspadded = columns + (8 - (columns % 8));\n        // total bits needed\n        const n = rows * columnspadded;\n        if (((_a = this.dots.data) === null || _a === void 0 ? void 0 : _a.length) !== n) {\n            this.dots.data = new Uint8Array(n);\n            this.dots.emit(CHANGE);\n        }\n    }\n}\n\n/*\n * `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n * `0xD1: fade(C+)` - set `N` pixels to color between colors in sequence\n * `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n * `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n * `0xD4: rotate_back(K)` - same, but towards the connector\n * `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n * `0xD6: range(P=0, N=length)` - range from pixel `P`, `N` pixels long\n * `0xD7: mode(K=0)` - set update mode\n * `0xD8: mode1(K=0)` - set update mode for next command only\n */\nconst LIGHT_PROG_SET_ALL = 0xd0;\nconst LIGHT_PROG_FADE = 0xd1;\nconst LIGHT_PROG_FADE_HSV = 0xd2;\nconst LIGHT_PROG_ROTATE_FWD = 0xd3;\nconst LIGHT_PROG_ROTATE_BACK = 0xd4;\nconst LIGHT_PROG_SHOW = 0xd5;\nconst LIGHT_PROG_RANGE = 0xd6;\nconst LIGHT_PROG_MODE = 0xd7;\nconst LIGHT_PROG_MODE1 = 0xd8;\nconst LIGHT_MODE_REPLACE = 0x00;\nconst LIGHT_MODE_ADD_RGB = 0x01;\nconst LIGHT_MODE_SUBTRACT_RGB = 0x02;\nconst LIGHT_MODE_MULTIPLY_RGB = 0x03;\nconst LIGHT_MODE_LAST = 0x03;\nconst LIGHT_PROG_COLN = 0xc0;\nconst LIGHT_PROG_COL1 = 0xc1;\nconst LIGHT_PROG_COL2 = 0xc2;\nconst LIGHT_PROG_COL3 = 0xc3;\nconst LIGHT_PROG_COL1_SET = 0xcf;\n\nconst PROG_EOF = 0;\nconst PROG_CMD = 1;\nconst PROG_NUMBER = 3;\nconst PROG_COLOR_BLOCK = 4;\nfunction rgb(r, g, b) {\n    return { r, g, b };\n}\nfunction hsv(hue, sat, val) {\n    // scale down to 0..192\n    hue = (hue * 192) >> 8;\n    // reference: based on FastLED's hsv2rgb rainbow algorithm\n    // [https://github.com/FastLED/FastLED](MIT)\n    const invsat = 255 - sat;\n    const brightness_floor = (val * invsat) >> 8;\n    const color_amplitude = val - brightness_floor;\n    const section = (hue / 0x40) >> 0; // [0..2]\n    const offset = hue % 0x40 >> 0; // [0..63]\n    const rampup = offset;\n    const rampdown = 0x40 - 1 - offset;\n    const rampup_amp_adj = ((rampup * color_amplitude) / (256 / 4)) >> 0;\n    const rampdown_amp_adj = ((rampdown * color_amplitude) / (256 / 4)) >> 0;\n    const rampup_adj_with_floor = rampup_amp_adj + brightness_floor;\n    const rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;\n    let r = 0, g = 0, b = 0;\n    if (section) {\n        if (section == 1) {\n            // section 1: 0x40..0x7F\n            r = brightness_floor;\n            g = rampdown_adj_with_floor;\n            b = rampup_adj_with_floor;\n        }\n        else {\n            // section 2; 0x80..0xBF\n            r = rampup_adj_with_floor;\n            g = brightness_floor;\n            b = rampdown_adj_with_floor;\n        }\n    }\n    else {\n        // section 0: 0x00..0x3F\n        r = rampdown_adj_with_floor;\n        g = rampup_adj_with_floor;\n        b = brightness_floor;\n    }\n    return rgb(r, g, b);\n}\nfunction mulcol(c, m) {\n    let c2 = (c * m) >> 7;\n    if (m < 128 && c == c2)\n        c2--;\n    else if (m > 128 && c == c2)\n        c2++;\n    return c2;\n}\nfunction clamp(c) {\n    if (c < 0)\n        return 0;\n    if (c > 255)\n        return 255;\n    return c;\n}\nfunction SCALE0(c, i) {\n    return ((c & 0xff) * (1 + (i & 0xff))) >> 8;\n}\nclass LedPixelServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_LED_PIXEL, options);\n        this.pxbuffer = new Uint8Array(0);\n        this.prog_mode = 0;\n        this.prog_tmpmode = 0;\n        this.range_start = 0;\n        this.range_end = 0;\n        this.range_len = 0;\n        this.range_ptr = 0;\n        this.prog_ptr = 0;\n        this.prog_size = 0;\n        this.prog_data = new Uint8Array(0);\n        this.dirty = true;\n        this.inited = false;\n        this.power_enable = false;\n        const { numColumns, maxPower = 200, maxPixels = 300, numPixels = 15, } = options || {};\n        this.brightness = this.addRegister(exports.LedPixelReg.Brightness, [\n            15,\n        ]);\n        this.actualBrightness = this.addRegister(exports.LedPixelReg.ActualBrightness, [15]);\n        this.lightType = this.addRegister(exports.LedPixelReg.LightType, [exports.LedPixelLightType.WS2812B_GRB]);\n        this.numPixels = this.addRegister(exports.LedPixelReg.NumPixels, [\n            numPixels,\n        ]);\n        this.maxPower = this.addRegister(exports.LedPixelReg.MaxPower, [\n            maxPower,\n        ]);\n        this.maxPixels = this.addRegister(exports.LedPixelReg.MaxPixels, [\n            maxPixels,\n        ]);\n        this.variant = this.addRegister(exports.LedPixelReg.Variant, [exports.LedPixelVariant.Strip]);\n        this.numRepeats = this.addRegister(exports.LedPixelReg.NumRepeats, [\n            0,\n        ]);\n        if (numColumns !== undefined)\n            this.numColumns = this.addRegister(exports.LedPixelReg.NumColumns, [numColumns]);\n        this.brightness.on(CHANGE, () => (this.intensity = this.requested_intensity));\n        this.numPixels.on(CHANGE, this.allocRxBuffer.bind(this));\n        this.maxPixels.on(CHANGE, this.allocRxBuffer.bind(this));\n        this.addCommand(exports.LedPixelCmd.Run, this.handleRun.bind(this));\n        this.allocRxBuffer();\n    }\n    /**\n     * Gets an array of RGB color numbers\n     */\n    get colors() {\n        return this.pxbuffer;\n    }\n    get maxpower() {\n        const [r] = this.maxPower.values() || [200];\n        return r;\n    }\n    get maxpixels() {\n        const [r] = this.maxPixels.values() || [];\n        return r;\n    }\n    get numpixels() {\n        const [r] = this.numPixels.values() || [0];\n        return r;\n    }\n    get requested_intensity() {\n        const [r] = this.brightness.values() || [0];\n        return r;\n    }\n    get intensity() {\n        const [r] = this.actualBrightness.values() || [0];\n        return r;\n    }\n    set intensity(v) {\n        this.actualBrightness.setValues([v]);\n    }\n    jd_power_enable(value) {\n        this.power_enable = value;\n    }\n    is_enabled() {\n        return this.numpixels > 0 && this.requested_intensity > 0;\n    }\n    allocRxBuffer() {\n        const { numpixels = 0, maxpixels, pxbuffer } = this;\n        if (maxpixels !== undefined && numpixels > maxpixels)\n            this.numPixels.setValues([this.maxpixels]);\n        const n = numpixels * 3; // don't need to prealloc here\n        if (pxbuffer || n !== pxbuffer.length)\n            this.pxbuffer = new Uint8Array(n);\n    }\n    reset_range() {\n        this.range_ptr = this.range_start;\n    }\n    set_next(c) {\n        if (this.range_ptr >= this.range_end)\n            return false;\n        const p = this.pxbuffer;\n        const pi = this.range_ptr++ * 3;\n        // fast path\n        if (this.prog_tmpmode == LIGHT_MODE_REPLACE) {\n            p[pi + 0] = c.r;\n            p[pi + 1] = c.g;\n            p[pi + 2] = c.b;\n            return true;\n        }\n        let r = p[pi + 0], g = p[pi + 1], b = p[pi + 2];\n        switch (this.prog_tmpmode) {\n            case LIGHT_MODE_ADD_RGB:\n                r += c.r;\n                g += c.g;\n                b += c.b;\n                break;\n            case LIGHT_MODE_SUBTRACT_RGB:\n                r -= c.r;\n                g -= c.g;\n                b -= c.b;\n                break;\n            case LIGHT_MODE_MULTIPLY_RGB:\n                r = mulcol(r, c.r);\n                g = mulcol(g, c.g);\n                b = mulcol(b, c.b);\n                break;\n        }\n        p[pi + 0] = clamp(r);\n        p[pi + 1] = clamp(g);\n        p[pi + 2] = clamp(b);\n        return true;\n    }\n    limit_intensity() {\n        const { numpixels, requested_intensity, maxpower, pxbuffer } = this;\n        let n = numpixels * 3;\n        const prev_intensity = this.intensity;\n        let intensity = this.intensity;\n        intensity += 1 + (intensity >> 5);\n        if (requested_intensity !== undefined &&\n            intensity > requested_intensity)\n            intensity = requested_intensity;\n        let current_full = 0;\n        let current = 0;\n        let current_prev = 0;\n        let di = 0;\n        while (n--) {\n            const v = pxbuffer[di++];\n            current += SCALE0(v, intensity);\n            current_prev += SCALE0(v, prev_intensity);\n            current_full += v;\n        }\n        // 46uA per step of LED\n        current *= 46;\n        current_prev *= 46;\n        current_full *= 46;\n        // 14mA is the chip at 48MHz, 930uA per LED is static\n        const base_current = 14000 + 930 * numpixels;\n        const current_limit = maxpower * 1000 - base_current;\n        if (current <= current_limit) {\n            this.intensity = intensity;\n            // LOG(\"curr: %dmA; not limiting %d\", (base_current + current) / 1000, state->intensity);\n            return;\n        }\n        if (current_prev <= current_limit) {\n            return; // no change needed\n        }\n        let inten = current_limit / (current_full >> 8) - 1;\n        if (inten < 0)\n            inten = 0;\n        this.intensity = inten;\n    }\n    prog_fetch_color() {\n        const ptr = this.prog_ptr;\n        if (ptr + 3 > this.prog_size)\n            return rgb(0, 0, 0);\n        const d = this.prog_data;\n        this.prog_ptr = ptr + 3;\n        return rgb(d[ptr + 0], d[ptr + 1], d[ptr + 2]);\n    }\n    prog_fetch() {\n        if (this.prog_ptr >= this.prog_size)\n            return { prog: PROG_EOF };\n        const d = this.prog_data;\n        const c = d[this.prog_ptr++];\n        if (!(c & 0x80)) {\n            return { dst: c, prog: PROG_NUMBER };\n        }\n        else if ((c & 0xc0) == 0x80) {\n            return {\n                dst: ((c & 0x3f) << 8) | d[this.prog_ptr++],\n                prog: PROG_NUMBER,\n            };\n        }\n        else\n            switch (c) {\n                case LIGHT_PROG_COL1:\n                    return {\n                        dst: 1,\n                        prog: PROG_COLOR_BLOCK,\n                    };\n                case LIGHT_PROG_COL2:\n                    return {\n                        dst: 2,\n                        prog: PROG_COLOR_BLOCK,\n                    };\n                case LIGHT_PROG_COL3:\n                    return {\n                        dst: 3,\n                        prog: PROG_COLOR_BLOCK,\n                    };\n                case LIGHT_PROG_COLN:\n                    return {\n                        dst: d[this.prog_ptr++],\n                        prog: PROG_COLOR_BLOCK,\n                    };\n                default:\n                    return {\n                        dst: c,\n                        prog: PROG_CMD,\n                    };\n            }\n    }\n    prog_fetch_num(defl) {\n        const prev = this.prog_ptr;\n        const fr = this.prog_fetch();\n        const { dst: res, prog: r } = fr;\n        if (r == PROG_NUMBER)\n            return res;\n        else {\n            this.prog_ptr = prev; // rollback\n            return defl;\n        }\n    }\n    prog_fetch_cmd() {\n        let cmd;\n        // skip until there's a command\n        for (;;) {\n            const c = this.prog_fetch();\n            switch (c.prog) {\n                case PROG_CMD:\n                    return c.dst;\n                case PROG_COLOR_BLOCK:\n                    while (cmd--)\n                        this.prog_fetch_color();\n                    break;\n                case PROG_EOF:\n                    return 0;\n            }\n        }\n    }\n    prog_set(len) {\n        this.reset_range();\n        const start = this.prog_ptr;\n        for (;;) {\n            this.prog_ptr = start;\n            let ok = false;\n            for (let i = 0; i < len; ++i) {\n                // don't break the loop immediately if !ok - make sure the prog counter advances\n                ok = this.set_next(this.prog_fetch_color());\n            }\n            if (!ok)\n                break;\n        }\n    }\n    prog_fade(len, usehsv) {\n        if (len < 2) {\n            this.prog_set(len);\n            return;\n        }\n        let colidx = 0;\n        const endp = this.prog_ptr + 3 * len;\n        let col0 = this.prog_fetch_color();\n        let col1 = this.prog_fetch_color();\n        const colstep = ((len - 1) << 16) / this.range_len;\n        let colpos = 0;\n        this.reset_range();\n        for (;;) {\n            while (colidx < colpos >> 16) {\n                colidx++;\n                col0 = col1;\n                col1 = this.prog_fetch_color();\n            }\n            const fade1 = colpos & 0xffff;\n            const fade0 = 0xffff - fade1;\n            const col = rgb((col0.r * fade0 + col1.r * fade1 + 0x8000) >> 16, (col0.g * fade0 + col1.g * fade1 + 0x8000) >> 16, (col0.b * fade0 + col1.b * fade1 + 0x8000) >> 16);\n            if (!this.set_next(usehsv ? hsv(col.r, col.g, col.b) : col))\n                break;\n            colpos += colstep;\n        }\n        this.prog_ptr = endp;\n    }\n    prog_rot(shift) {\n        if (shift <= 0 || shift >= this.range_len)\n            return;\n        const range_start = this.range_start;\n        const range_end = this.range_end;\n        const buf = this.pxbuffer;\n        let first = range_start * 3;\n        let middle = (range_start + shift) * 3;\n        const last = range_end * 3;\n        let next = middle;\n        while (first != next) {\n            const tmp = buf[first];\n            const tmp1 = buf[first + 1];\n            const tmp2 = buf[first + 2];\n            buf[first] = buf[next];\n            buf[first + 1] = buf[next + 1];\n            buf[first + 2] = buf[next + 2];\n            buf[next] = tmp;\n            buf[next + 1] = tmp1;\n            buf[next + 2] = tmp2;\n            first += 3;\n            next += 3;\n            if (next === last)\n                next = middle;\n            else if (first === middle)\n                middle = next;\n        }\n    }\n    fetch_mode() {\n        const m = this.prog_fetch_num(0);\n        if (m > LIGHT_MODE_LAST)\n            return 0;\n        return m;\n    }\n    prog_process() {\n        const data = this.prog_data;\n        if (this.prog_ptr >= this.prog_size)\n            return false;\n        // check that the program wasn't restarted\n        // concurrently\n        while (data === this.prog_data) {\n            const cmd = this.prog_fetch_cmd();\n            if (!cmd)\n                break;\n            if (cmd == LIGHT_PROG_SHOW) {\n                const k = this.prog_fetch_num(50);\n                this.dirty = true;\n                setTimeout(this.animationFrame.bind(this), k);\n                // check data is still current;\n                return data === this.prog_data;\n            }\n            switch (cmd) {\n                case LIGHT_PROG_COL1_SET:\n                    this.range_ptr = this.range_start + this.prog_fetch_num(0);\n                    this.set_next(this.prog_fetch_color());\n                    break;\n                case LIGHT_PROG_FADE:\n                case LIGHT_PROG_FADE_HSV:\n                case LIGHT_PROG_SET_ALL: {\n                    const { dst: len, prog: pcmd } = this.prog_fetch();\n                    if (pcmd != PROG_COLOR_BLOCK || len == 0)\n                        continue; // bailout\n                    if (cmd == LIGHT_PROG_SET_ALL)\n                        this.prog_set(len);\n                    else\n                        this.prog_fade(len, cmd == LIGHT_PROG_FADE_HSV);\n                    break;\n                }\n                case LIGHT_PROG_ROTATE_BACK:\n                case LIGHT_PROG_ROTATE_FWD: {\n                    let k = this.prog_fetch_num(1);\n                    const len = this.range_len;\n                    if (len == 0)\n                        continue;\n                    while (k >= len)\n                        k -= len;\n                    if (cmd == LIGHT_PROG_ROTATE_FWD && k != 0)\n                        k = len - k;\n                    this.prog_rot(k);\n                    break;\n                }\n                case LIGHT_PROG_MODE1:\n                    this.prog_tmpmode = this.fetch_mode();\n                    break;\n                case LIGHT_PROG_MODE:\n                    this.prog_mode = this.fetch_mode();\n                    break;\n                case LIGHT_PROG_RANGE: {\n                    let start = this.prog_fetch_num(0);\n                    const len = this.prog_fetch_num(this.numpixels);\n                    const numpixels = this.numpixels;\n                    if (start > numpixels)\n                        start = numpixels;\n                    let end = start + len;\n                    if (end > numpixels)\n                        end = numpixels;\n                    this.range_start = start;\n                    this.range_end = end;\n                    this.range_len = end - start;\n                    break;\n                }\n            }\n            if (cmd != LIGHT_PROG_MODE1)\n                this.prog_tmpmode = this.prog_mode;\n        }\n        return false;\n    }\n    /**\n     * Perform an animation step\n     */\n    animationFrame() {\n        if (!this.prog_process())\n            return; // concurrently udpated\n        if (!this.is_enabled())\n            return;\n        if (this.dirty) {\n            this.dirty = false;\n            if (isBufferEmpty(this.pxbuffer)) {\n                this.jd_power_enable(false);\n                return;\n            }\n            else {\n                this.jd_power_enable(true);\n            }\n            this.limit_intensity();\n            // we're ready to render...\n            this.emit(RENDER);\n        }\n    }\n    sync_config() {\n        if (!this.is_enabled()) {\n            this.jd_power_enable(false);\n            return;\n        }\n        if (!this.inited) {\n            this.inited = true;\n            // initialize?\n            // px_init(this.lighttype);\n        }\n        this.jd_power_enable(true);\n    }\n    handleRun(pkt) {\n        this.prog_data = pkt.data;\n        this.prog_size = this.prog_data.length;\n        this.prog_ptr = 0;\n        this.range_start = 0;\n        this.range_end = this.range_len = this.numpixels;\n        this.prog_tmpmode = this.prog_mode = 0;\n        this.sync_config();\n        this.animationFrame();\n    }\n}\n\nclass MatrixKeypadServer extends SensorServer {\n    constructor(columns, rows, labels) {\n        super(SRV_MATRIX_KEYPAD, {\n            readingValues: [[]],\n        });\n        this.columns = this.addRegister(exports.MatrixKeypadReg.Columns, [columns]);\n        this.rows = this.addRegister(exports.MatrixKeypadReg.Rows, [rows]);\n        this.labels = this.addRegister(exports.MatrixKeypadReg.Labels, labels ? [labels.map(l => [l])] : undefined);\n    }\n    async down(button) {\n        const [values] = this.reading.values();\n        const valuei = values.findIndex(v => v[0] === button);\n        if (valuei < 0) {\n            values.push([button]);\n            this.reading.setValues([values]);\n        }\n    }\n    async up(button) {\n        const [values] = this.reading.values();\n        const valuei = values.findIndex(v => v[0] === button);\n        if (valuei > -1) {\n            values.splice(valuei, 1);\n            this.reading.setValues([values]);\n        }\n    }\n}\n\nclass MotorServer extends JDServiceServer {\n    constructor(instanceName) {\n        super(SRV_MOTOR, { instanceName });\n        this.duty = this.addRegister(exports.MotorReg.Duty, [0]);\n        this.enabled = this.addRegister(exports.MotorReg.Enabled, [false]);\n        this.loadTorque = this.addRegister(exports.MotorReg.LoadTorque);\n        this.loadSpeed = this.addRegister(exports.MotorReg.LoadSpeed);\n    }\n}\n\nclass LevelDetector extends JDClient {\n    constructor(service) {\n        super();\n        this.service = service;\n        this.reset();\n        if (this.service.inactiveThreshold)\n            this.mount(this.service.inactiveThreshold.subscribe(CHANGE, this.reset.bind(this)));\n        if (this.service.activeThreshold)\n            this.mount(this.service.activeThreshold.subscribe(CHANGE, this.reset.bind(this)));\n        this.mount(this.service.reading.subscribe(CHANGE, this.update.bind(this)));\n    }\n    reset() {\n        this._state = exports.SystemReadingThreshold.Neutral;\n    }\n    update() {\n        var _a, _b;\n        const [level] = this.service.reading.values();\n        if (level === undefined) {\n            this.setState(exports.SystemReadingThreshold.Neutral);\n            return;\n        }\n        const [active] = (_a = this.service.activeThreshold) === null || _a === void 0 ? void 0 : _a.values();\n        if (active !== undefined && level >= active) {\n            this.setState(exports.SystemReadingThreshold.Active);\n            return;\n        }\n        const [inactive] = (_b = this.service.inactiveThreshold) === null || _b === void 0 ? void 0 : _b.values();\n        if (inactive !== undefined && level <= inactive) {\n            this.setState(exports.SystemReadingThreshold.Inactive);\n            return;\n        }\n        // neutral\n        this.setState(exports.SystemReadingThreshold.Neutral);\n    }\n    setState(state) {\n        if (state === this._state)\n            return;\n        this._state = state;\n        switch (state) {\n            case exports.SystemReadingThreshold.Active:\n                this.service.sendEvent(exports.SystemEvent.Active);\n                break;\n            case exports.SystemReadingThreshold.Inactive:\n                this.service.sendEvent(exports.SystemEvent.Inactive);\n                break;\n            case exports.SystemReadingThreshold.Neutral:\n                this.service.sendEvent(exports.SystemEvent.Neutral);\n                break;\n        }\n    }\n}\n\n/**\n * Base class for analog sensor servers\n * @category Servers\n */\nclass AnalogSensorServer extends SensorServer {\n    constructor(serviceClass, options) {\n        super(serviceClass, options);\n        const { minReading, maxReading, inactiveThreshold, activeThreshold, readingResolution, } = options || {};\n        if (minReading !== undefined)\n            this.addRegister(exports.SystemReg.MinReading, [minReading]);\n        if (maxReading !== undefined)\n            this.addRegister(exports.SystemReg.MaxReading, [maxReading]);\n        if (readingResolution !== undefined)\n            this.addRegister(exports.SystemReg.ReadingResolution, [\n                readingResolution,\n            ]);\n        if (inactiveThreshold !== undefined ||\n            this.activeThreshold !== undefined) {\n            if (inactiveThreshold !== undefined)\n                this.inactiveThreshold = this.addRegister(exports.SystemReg.InactiveThreshold, [inactiveThreshold]);\n            if (activeThreshold !== undefined)\n                this.activeThreshold = this.addRegister(exports.SystemReg.ActiveThreshold, [activeThreshold]);\n            this.levelDetector = new LevelDetector(this);\n        }\n    }\n}\n\nclass RainGaugeServer extends AnalogSensorServer {\n    constructor(options) {\n        super(SRV_RAIN_GAUGE, {\n            readingValues: [0],\n        });\n        this._tiltCount = 0;\n        this._level = 0;\n        const { bucketSize } = options || {};\n        this.precipitationPrecision = this.addRegister(exports.RainGaugeReg.PrecipitationPrecision, [bucketSize || 0.2794]);\n        this._level = 0;\n    }\n    get tiltCount() {\n        return this._tiltCount;\n    }\n    get level() {\n        return this._level;\n    }\n    async rain(fraction) {\n        if (!fraction)\n            return;\n        this._level += fraction;\n        if (this._level >= 0.7)\n            await this.tilt();\n        else\n            this.emit(CHANGE);\n    }\n    async tilt() {\n        this._tiltCount++;\n        this._level = 0;\n        const [bucket] = this.precipitationPrecision.values();\n        const [current] = this.reading.values();\n        this.reading.setValues([current + (bucket || 0.2)]);\n        this.emit(CHANGE);\n    }\n}\n\nclass ReflectedLightServer extends AnalogSensorServer {\n    constructor(options) {\n        super(SRV_REFLECTED_LIGHT, { readingValues: [0] });\n        const { variant } = options || {};\n        this.variant = this.addRegister(exports.ReflectedLightReg.Variant, [variant || exports.ReflectedLightVariant.InfraredDigital]);\n    }\n}\n\nclass RotaryEncoderServer extends SensorServer {\n    constructor() {\n        super(SRV_ROTARY_ENCODER, { readingValues: [0], streamingInterval: 50 });\n        this.clicksPerTurn = this.addRegister(exports.RotaryEncoderReg.ClicksPerTurn, [12]);\n    }\n    async rotate(clicks) {\n        const [position] = this.reading.values();\n        this.reading.setValues([position + (clicks >> 0)]);\n    }\n}\n\nclass ServoServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_SERVO, options);\n        const { minAngle = -90, maxAngle = 90, responseSpeed, stallTorque, } = options || {};\n        this.angle = this.addRegister(exports.ServoReg.Angle, [0]);\n        this.currentAngle = this.addRegister(exports.ServoReg.CurrentAngle, [\n            0,\n        ]);\n        this.enabled = this.addRegister(exports.ServoReg.Enabled, [false]);\n        this.minAngle = this.addRegister(exports.ServoReg.MinAngle, minAngle !== undefined ? [minAngle] : undefined);\n        this.maxAngle = this.addRegister(exports.ServoReg.MaxAngle, maxAngle !== undefined ? [maxAngle] : undefined);\n        this.offset = this.addRegister(exports.ServoReg.Offset, [0]);\n        this.responseSpeed = this.addRegister(exports.ServoReg.ResponseSpeed, responseSpeed !== undefined ? [responseSpeed] : undefined);\n        this.stallTorque = this.addRegister(exports.ServoReg.StallTorque, stallTorque !== undefined ? [stallTorque] : undefined);\n        this.angle.on(PACKET_DATA_NORMALIZE, (values) => {\n            let angle = values[0];\n            const [minAngle] = this.minAngle.values();\n            const [maxAngle] = this.maxAngle.values();\n            if (minAngle !== undefined)\n                angle = Math.max(minAngle, angle);\n            if (maxAngle !== undefined)\n                angle = Math.min(maxAngle, angle);\n            values[0] = angle;\n        });\n        this.angle.on(CHANGE, () => this.currentAngle.setValues(this.angle.values()));\n    }\n}\n\nclass SettingsServer extends JDServiceServer {\n    constructor(storageKey) {\n        super(SRV_SETTINGS);\n        this.storageKey = storageKey;\n        this.addCommand(exports.SettingsCmd.Get, this.handleGet.bind(this));\n        this.addCommand(exports.SettingsCmd.Set, this.handleSet.bind(this));\n        this.addCommand(exports.SettingsCmd.Delete, this.handleDelete.bind(this));\n        this.addCommand(exports.SettingsCmd.ListKeys, this.handleListKeys.bind(this));\n        this.addCommand(exports.SettingsCmd.List, this.handleList.bind(this));\n        this.addCommand(exports.SettingsCmd.Clear, this.handleClear.bind(this));\n        this.settings = this.read();\n    }\n    getPayload(key) {\n        const value = this.settings[key];\n        const secret = /^$/.test(key);\n        let payload;\n        if (value === undefined) {\n            payload = new Uint8Array(0);\n        }\n        else if (secret) {\n            const payload = new Uint8Array(1);\n            payload[0] = 0;\n        }\n        else {\n            payload = fromHex(value);\n        }\n        return payload;\n    }\n    async handleGet(pkt) {\n        const [key] = pkt.jdunpack(\"s\");\n        const payload = this.getPayload(key);\n        const resp = Packet.jdpacked(exports.SettingsCmd.Get, \"z b\", [key, payload]);\n        await this.sendPacketAsync(resp);\n    }\n    async handleSet(pkt) {\n        const [key, value] = pkt.jdunpack(\"z b\");\n        console.log({ cmd: \"set\", key, value });\n        this.settings[key] = toHex(value);\n        await this.save();\n    }\n    async handleDelete(pkt) {\n        const [key] = pkt.jdunpack(\"s\");\n        delete this.settings[key];\n        await this.save();\n    }\n    async handleListKeys(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(Object.keys(this.settings), k => jdpack(\"s\", [k]));\n    }\n    async handleList(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(Object.keys(this.settings), k => {\n            const payload = this.getPayload(k);\n            return jdpack(\"z b\", [k, payload]);\n        });\n    }\n    handleClear() {\n        this.settings = {};\n        this.save();\n    }\n    read() {\n        if (!this.storageKey)\n            return {};\n        try {\n            const payload = typeof window !== \"undefined\" &&\n                window.localStorage.getItem(this.storageKey);\n            return JSON.parse(payload || \"{}\");\n        }\n        catch (e) {\n            console.log(e);\n            return {};\n        }\n    }\n    async save() {\n        if (this.storageKey) {\n            try {\n                if (typeof window !== \"undefined\")\n                    window.localStorage.setItem(this.storageKey, JSON.stringify(this.settings));\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        await this.sendEvent(exports.SettingsEvent.Change);\n    }\n}\n\nclass SpeechSynthesisServer extends JDServiceServer {\n    constructor() {\n        var _a;\n        super(SRV_SPEECH_SYNTHESIS);\n        this.synthesis = typeof window !== \"undefined\" && window.speechSynthesis;\n        this.enabled = this.addRegister(exports.SpeechSynthesisReg.Enabled, [\n            !((_a = this.synthesis) === null || _a === void 0 ? void 0 : _a.paused),\n        ]);\n        this.pitch = this.addRegister(exports.SpeechSynthesisReg.Pitch, [1]);\n        this.rate = this.addRegister(exports.SpeechSynthesisReg.Rate, [1]);\n        this.lang = this.addRegister(exports.SpeechSynthesisReg.Lang, [\"\"]);\n        this.volume = this.addRegister(exports.SpeechSynthesisReg.Volume, [\n            0.5,\n        ]);\n        this.addCommand(exports.SpeechSynthesisCmd.Speak, this.handleSpeak.bind(this));\n        this.addCommand(exports.SpeechSynthesisCmd.Cancel, this.handleCancel.bind(this));\n    }\n    handleSpeak(pkt) {\n        const [text] = pkt.jdunpack(\"s\");\n        if (!this.synthesis || !text)\n            return;\n        const [pitch] = this.pitch.values();\n        const [rate] = this.pitch.values();\n        const [lang] = this.lang.values();\n        const [volume] = this.volume.values();\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.pitch = pitch;\n        utterance.rate = rate;\n        utterance.lang = lang;\n        utterance.volume = volume;\n        this.synthesis.speak(utterance);\n    }\n    handleCancel(pkt) {\n        var _a;\n        (_a = this.synthesis) === null || _a === void 0 ? void 0 : _a.cancel();\n    }\n}\n\nclass SwitchServer extends SensorServer {\n    constructor(options) {\n        super(SRV_SWITCH, { readingValues: [false], streamingInterval: 50 });\n        const { autoOffDelay, variant } = options || {};\n        this.variant = this.addRegister(exports.SwitchReg.Variant, variant !== undefined ? [variant] : undefined);\n        this.autoOffDelay = this.addRegister(exports.SwitchReg.AutoOffDelay, autoOffDelay !== undefined ? [autoOffDelay] : undefined);\n    }\n    async toggle() {\n        const [v] = this.reading.values();\n        if (!v)\n            await this.switchOn();\n        else\n            await this.switchOff();\n    }\n    async switchOn() {\n        const [v] = this.reading.values();\n        if (!v) {\n            this.reading.setValues([true]);\n            await this.sendEvent(exports.SwitchEvent.On);\n            this.startAutoOff();\n        }\n    }\n    async switchOff() {\n        const [v] = this.reading.values();\n        if (v) {\n            this.reading.setValues([false]);\n            await this.sendEvent(exports.SwitchEvent.Off);\n            this.stopAutoOff();\n        }\n    }\n    startAutoOff() {\n        this.stopAutoOff();\n        if (this.autoOffDelay.data !== undefined) {\n            const [delay] = this.autoOffDelay.values();\n            this.autoOffInterval = setTimeout(this.switchOn.bind(this), delay);\n        }\n    }\n    stopAutoOff() {\n        if (this.autoOffInterval) {\n            clearTimeout(this.autoOffInterval);\n            this.autoOffInterval = undefined;\n        }\n    }\n}\n\nclass TrafficLightServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_TRAFFIC_LIGHT, options);\n        this.red = this.addRegister(exports.TrafficLightReg.Red, [true]);\n        this.orange = this.addRegister(exports.TrafficLightReg.Orange, [false]);\n        this.green = this.addRegister(exports.TrafficLightReg.Green, [false]);\n    }\n}\n\nclass LEDServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_LED, options);\n        const { ledCount = 1, variant = exports.LedVariant.ThroughHole, luminousIntensity, waveLength, color = [255, 0, 0], maxPower = 200, } = options || {};\n        this.color = this.addRegister(exports.LedReg.Color, color);\n        this.color.on(REGISTER_PRE_GET, this.updateColor.bind(this));\n        this.maxPower = this.addRegister(exports.LedReg.MaxPower, [maxPower]);\n        this.ledCount = this.addRegister(exports.LedReg.LedCount, [ledCount]);\n        if (luminousIntensity !== undefined)\n            this.luminousIntensity = this.addRegister(exports.LedReg.LuminousIntensity, [luminousIntensity]);\n        if (waveLength !== undefined)\n            this.waveLength = this.addRegister(exports.LedReg.WaveLength, [waveLength]);\n        this.variant = this.addRegister(exports.LedReg.Variant, [variant]);\n        this.addCommand(exports.LedCmd.Animate, this.handleAnimate.bind(this));\n        // animation\n        this.on(REFRESH, this.updateColor.bind(this));\n    }\n    updateColor() {\n        if (!this._animation)\n            return; // nothing to do\n        // compute new color\n        const { red, green, blue, toRed, toGreen, toBlue, speed, start } = this._animation;\n        const now = this.device.bus.timestamp;\n        const elapsed = now - start;\n        // see control.md\n        const total = ((512 / speed) * 100) | 0;\n        const progress = elapsed / total; // may overshoot\n        const alpha = Math.min(1, progress);\n        const oneAlpha = 1 - alpha;\n        const newRed = (red * oneAlpha + alpha * toRed) | 0;\n        const newGreen = (green * oneAlpha + alpha * toGreen) | 0;\n        const newBlue = (blue * oneAlpha + alpha * toBlue) | 0;\n        this.color.setValues([newRed, newGreen, newBlue]);\n        // clear animation when done\n        if (progress > 1)\n            this._animation = undefined;\n    }\n    handleAnimate(pkt) {\n        const [toRed, toGreen, toBlue, speed] = pkt.jdunpack(\"u8 u8 u8 u8\");\n        if (speed == 0) {\n            this.color.setValues([toRed, toGreen, toBlue]);\n            this._animation = undefined;\n        }\n        else {\n            const [red, green, blue] = this.color.values();\n            this._animation = {\n                red,\n                green,\n                blue,\n                toRed,\n                toGreen,\n                toBlue,\n                speed,\n                start: this.device.bus.timestamp,\n            };\n        }\n    }\n}\n\nclass SoundPlayerServer extends JDServiceServer {\n    constructor(sounds) {\n        super(SRV_SOUND_PLAYER);\n        this.sounds = sounds;\n        this.volume = this.addRegister(exports.SoundPlayerReg.Volume, [0.5]);\n        this.addCommand(exports.SoundPlayerCmd.ListSounds, this.handleListSounds.bind(this));\n        this.addCommand(exports.SoundPlayerCmd.Play, this.handlePlay.bind(this));\n    }\n    async handleListSounds(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(this.sounds, sound => jdpack(\"u32 s\", sound));\n    }\n    handlePlay(pkt) {\n        var _a;\n        const [name] = pkt.jdunpack(\"s\");\n        (_a = this.onPlay) === null || _a === void 0 ? void 0 : _a.call(this, name);\n    }\n}\n\nclass RandomNumberGeneratorServer extends JDServiceServer {\n    constructor() {\n        super(SRV_RNG, {\n            variant: exports.RngVariant.WebCrypto,\n        });\n        this.reading = this.addRegister(exports.RngReg.Random, [new Uint8Array(64)]);\n        this.reading.on(REGISTER_PRE_GET, this.handleRefresh.bind(this));\n    }\n    handleRefresh() {\n        // generate new data\n        const data = new Uint8Array(64);\n        if (typeof window !== \"undefined\")\n            window.crypto.getRandomValues(data);\n        this.reading.setValues([data], true);\n    }\n}\n\nclass CompassServer extends AnalogSensorServer {\n    constructor() {\n        super(SRV_COMPASS, {\n            readingValues: [0],\n            minReading: 0,\n            maxReading: 360,\n            readingError: [1],\n        });\n        this.enabled = this.addRegister(exports.CompassReg.Enabled, [false]);\n        this.enabled.on(CHANGE, () => {\n            const [status] = this.statusCode.values();\n            if (status === exports.SystemStatusCodes.CalibrationNeeded) {\n                console.log(\"start calibration\");\n                this.calibrate();\n            }\n        });\n    }\n}\n\nclass DMXServer extends JDServiceServer {\n    constructor() {\n        super(SRV_DMX, {\n            intensityValues: [0],\n        });\n        this.addCommand(exports.DmxCmd.Send, this.handleSend.bind(this));\n    }\n    handleSend(pkt) {\n        // ignore\n        console.log(`dmx send`, toHex(pkt.data));\n    }\n}\n\n/**\n * @internal\n */\nfunction inIFrame() {\n    try {\n        return typeof window !== \"undefined\" && window.self !== window.top;\n    }\n    catch (e) {\n        return typeof window !== \"undefined\";\n    }\n}\n\n// keep in sync with CODAL\nconst RADIO_MAX_PACKET_SIZE = 32;\n//const MAX_FIELD_DOUBLE_NAME_LENGTH = 8;\nconst MAX_PAYLOAD_LENGTH = 20;\nconst PACKET_PREFIX_LENGTH = 9;\nconst VALUE_PACKET_NAME_LEN_OFFSET = 13;\nconst DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET = 17;\n// Packet Spec:\n// | 0              | 1 ... 4       | 5 ... 8           | 9 ... 28\n// ----------------------------------------------------------------\n// | packet type    | system time   | serial number     | payload\n//\n// Serial number defaults to 0 unless enabled by user\n// payload: number (9 ... 12)\nconst PACKET_TYPE_NUMBER = 0;\n// payload: number (9 ... 12), name length (13), name (14 ... 26)\nconst PACKET_TYPE_VALUE = 1;\n// payload: string length (9), string (10 ... 28)\nconst PACKET_TYPE_STRING = 2;\n// payload: buffer length (9), buffer (10 ... 28)\nconst PACKET_TYPE_BUFFER = 3;\n// payload: number (9 ... 16)\nconst PACKET_TYPE_DOUBLE = 4;\n// payload: number (9 ... 16), name length (17), name (18 ... 26)\nconst PACKET_TYPE_DOUBLE_VALUE = 5;\nfunction getStringOffset(packetType) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return PACKET_PREFIX_LENGTH;\n        case PACKET_TYPE_VALUE:\n            return VALUE_PACKET_NAME_LEN_OFFSET;\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET;\n        default:\n            return undefined;\n    }\n}\n/*\nfunction getMaxStringLength(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return MAX_PAYLOAD_LENGTH - 2;\n        case PACKET_TYPE_VALUE:\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return MAX_FIELD_DOUBLE_NAME_LENGTH;\n        default:\n            return undefined;\n    }\n}\n*/\nfunction truncateString(str) {\n    // TODO\n    return str;\n}\nclass RadioPacket {\n    constructor(data) {\n        this.data = data;\n        if (!data)\n            this.data = new Uint8Array(RADIO_MAX_PACKET_SIZE + 4);\n    }\n    static getPacket(data) {\n        if (!data)\n            return undefined;\n        // last 4 bytes is RSSi\n        return new RadioPacket(data);\n    }\n    static mkPacket(packetType) {\n        const res = new RadioPacket();\n        res.data[0] = packetType;\n        return res;\n    }\n    get signal() {\n        return getNumber(this.data, exports.NumberFormat.Int32LE, this.data.length - 4);\n    }\n    get packetType() {\n        return this.data[0];\n    }\n    get time() {\n        return getNumber(this.data, exports.NumberFormat.Int32LE, 1);\n    }\n    set time(val) {\n        setNumber(this.data, exports.NumberFormat.Int32LE, 1, val);\n    }\n    get serial() {\n        return getNumber(this.data, exports.NumberFormat.Int32LE, 5);\n    }\n    set serial(val) {\n        setNumber(this.data, exports.NumberFormat.Int32LE, 5, val);\n    }\n    get stringPayload() {\n        const offset = getStringOffset(this.packetType);\n        return offset\n            ? this.data.slice(offset + 1, this.data[offset]).toString()\n            : undefined;\n    }\n    set stringPayload(val) {\n        const offset = getStringOffset(this.packetType);\n        if (offset) {\n            const buf = stringToBuffer(truncateString(val));\n            this.data[offset] = buf.length;\n            memcpy(this.data, offset + 1, buf);\n        }\n    }\n    get numberPayload() {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                return getNumber(this.data, exports.NumberFormat.Int32LE, PACKET_PREFIX_LENGTH);\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                return getNumber(this.data, exports.NumberFormat.Float64LE, PACKET_PREFIX_LENGTH);\n        }\n        return undefined;\n    }\n    set numberPayload(val) {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                setNumber(this.data, exports.NumberFormat.Int32LE, PACKET_PREFIX_LENGTH, val);\n                break;\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                setNumber(this.data, exports.NumberFormat.Float64LE, PACKET_PREFIX_LENGTH, val);\n                break;\n        }\n    }\n    get bufferPayload() {\n        const len = this.data[PACKET_PREFIX_LENGTH];\n        return this.data.slice(PACKET_PREFIX_LENGTH + 1, PACKET_PREFIX_LENGTH + 1 + len);\n    }\n    set bufferPayload(b) {\n        const len = Math.min(b.length, MAX_PAYLOAD_LENGTH - 1);\n        this.data[PACKET_PREFIX_LENGTH] = len;\n        memcpy(this.data, PACKET_PREFIX_LENGTH + 1, b, 0, len);\n    }\n    hasString() {\n        return (this.packetType === PACKET_TYPE_STRING ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE);\n    }\n    hasNumber() {\n        return (this.packetType === PACKET_TYPE_NUMBER ||\n            this.packetType === PACKET_TYPE_DOUBLE ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE);\n    }\n}\n/**\n * A server implementation of the bit:radio service\n * @category Servers\n */\nclass BitRadioServer extends JDServiceServer {\n    constructor() {\n        super(SRV_BIT_RADIO);\n        this.enabled = this.addRegister(exports.BitRadioReg.Enabled, [false]);\n        this.group = this.addRegister(exports.BitRadioReg.Group, [1]);\n        this.transmissionPower = this.addRegister(exports.BitRadioReg.TransmissionPower, [6]);\n        this.frequencyBand = this.addRegister(exports.BitRadioReg.FrequencyBand, [7]);\n        this.addCommand(exports.BitRadioCmd.SendString, this.handleSendString.bind(this));\n        this.addCommand(exports.BitRadioCmd.SendNumber, this.handleSendNumber.bind(this));\n        this.addCommand(exports.BitRadioCmd.SendValue, this.handleSendValue.bind(this));\n        this.addCommand(exports.BitRadioCmd.SendBuffer, this.handleSendBuffer.bind(this));\n    }\n    handleSendString(pkt) {\n        const [message] = pkt.jdunpack(\"s\");\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_STRING);\n        rpkt.stringPayload = message;\n        this.sendRadioPacket(rpkt);\n    }\n    handleSendNumber(pkt) {\n        const [value] = pkt.jdunpack(\"f64\");\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE);\n        rpkt.numberPayload = value;\n        this.sendRadioPacket(rpkt);\n    }\n    handleSendValue(pkt) {\n        const [value, name] = pkt.jdunpack(\"f64 s\");\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE_VALUE);\n        rpkt.stringPayload = name;\n        rpkt.numberPayload = value;\n        this.sendRadioPacket(rpkt);\n    }\n    handleSendBuffer(pkt) {\n        const { data } = pkt;\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_BUFFER);\n        rpkt.bufferPayload = data;\n        this.sendRadioPacket(rpkt);\n    }\n    sendRadioPacket(rpkt) {\n        const [on] = this.enabled.values();\n        if (!on)\n            return; // radio is off\n        const { bus } = this.device;\n        const { timestamp } = bus;\n        const [group] = this.group.values();\n        rpkt.time = timestamp;\n        rpkt.serial = 0; // todo\n        const msg = {\n            type: \"radiopacket\",\n            broadcast: true,\n            // TODO\n            rssi: -75,\n            // TODO\n            serial: 0,\n            time: bus.timestamp,\n            payload: {\n                groupId: group,\n                type: 0,\n                bufferData: rpkt.data,\n            },\n        };\n        // send message to parent\n        console.log(`bitradio: send`, msg);\n        if (inIFrame()) {\n            window.parent.postMessage(msg, \"*\");\n        }\n    }\n}\n\nclass PowerServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_POWER, options);\n        this.enabled = this.addRegister(exports.PowerReg.Allowed, [false]);\n        this.maxPower = this.addRegister(exports.PowerReg.MaxPower, [500]);\n        this.overload = this.addRegister(exports.PowerReg.PowerStatus, [\n            false,\n        ]);\n    }\n}\n\nclass CapacitiveButtonServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_CAPACITIVE_BUTTON, options);\n        const { threshold = 0.5 } = options || {};\n        this.threshold = this.addRegister(exports.CapacitiveButtonReg.Threshold, [\n            threshold,\n        ]);\n    }\n}\n\nclass HIDKeyboardServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_HID_KEYBOARD, options);\n        this.addCommand(exports.HidKeyboardCmd.Clear, this.handleClear.bind(this));\n        this.addCommand(exports.HidKeyboardCmd.Key, this.handleKey.bind(this));\n    }\n    get lastKey() {\n        return this._lastKey;\n    }\n    handleKey(pkt) {\n        const [rest] = pkt.jdunpack(\"r: u16 u8 u8\");\n        this._lastKey = rest;\n        this.emit(CHANGE);\n    }\n    handleClear() {\n        if (this._lastKey) {\n            this._lastKey = undefined;\n            this.emit(CHANGE);\n        }\n    }\n}\n/**\n * @internal\n */\nconst selectors = {\n    a: 0x04,\n    b: 0x05,\n    c: 0x06,\n    d: 0x07,\n    e: 0x08,\n    f: 0x09,\n    g: 0x0a,\n    h: 0x0b,\n    i: 0x0c,\n    j: 0x0d,\n    k: 0x0e,\n    l: 0x0f,\n    m: 0x10,\n    n: 0x11,\n    o: 0x12,\n    p: 0x13,\n    q: 0x14,\n    r: 0x15,\n    s: 0x16,\n    t: 0x17,\n    u: 0x18,\n    v: 0x19,\n    w: 0x1a,\n    x: 0x1b,\n    y: 0x1c,\n    z: 0x1d,\n    \"1\": 0x1e,\n    \"2\": 0x1f,\n    \"3\": 0x20,\n    \"4\": 0x21,\n    \"5\": 0x22,\n    \"6\": 0x23,\n    \"7\": 0x24,\n    \"8\": 0x25,\n    \"9\": 0x26,\n    \"0\": 0x27,\n    \"!\": 0x1e,\n    \"@\": 0x1f,\n    \"#\": 0x20,\n    $: 0x21,\n    \"%\": 0x22,\n    \"^\": 0x23,\n    \"&\": 0x24,\n    \"*\": 0x25,\n    \"(\": 0x26,\n    \")\": 0x27,\n    enter: 0x28,\n    escape: 0x29,\n    backspace: 0x2a,\n    tab: 0x2b,\n    space: 0x2c,\n    \" \": 0x2c,\n    \"-\": 0x2d,\n    _: 0x2d,\n    \"=\": 0x2e,\n    \"+\": 0x2e,\n    \"[\": 0x2f,\n    \"{\": 0x2f,\n    \"]\": 0x30,\n    \"}\": 0x30,\n    \"\\\\\": 0x31,\n    \"|\": 0x31,\n    // non-US #\n    \"~\": 0x32,\n    \";\": 0x33,\n    \":\": 0x33,\n    \"'\": 0x34,\n    '\"': 0x34,\n    \"`\": 0x35,\n    \",\": 0x36,\n    //\"<\": 0x37,\n    \".\": 0x37,\n    //\">\": 0x37,\n    \"/\": 0x38,\n    \"?\": 0x38,\n    capslock: 0x39,\n    f1: 0x3a,\n    f2: 0x3b,\n    f3: 0x3c,\n    f4: 0x3d,\n    f5: 0x3e,\n    f6: 0x3f,\n    f7: 0x40,\n    f8: 0x41,\n    f9: 0x42,\n    f10: 0x43,\n    f11: 0x44,\n    f12: 0x45,\n    printscreen: 0x46,\n    scrolllock: 0x47,\n    pause: 0x48,\n    insert: 0x49,\n    home: 0x4a,\n    pageup: 0x4b,\n    delete: 0x4c,\n    end: 0x4d,\n    pagedown: 0x4e,\n    arrowright: 0x4f,\n    arrowleft: 0x50,\n    arrowdown: 0x51,\n    arrowup: 0x52,\n    numlock: 0x53,\n    numpaddivide: 0x54,\n    numpadmultiply: 0x55,\n    numpadsubstract: 0x56,\n    numpadadd: 0x57,\n    numpadenter: 0x58,\n    numpad1: 0x59,\n    numpad2: 0x5a,\n    numpad3: 0x5b,\n    numpad4: 0x5c,\n    numpad5: 0x5d,\n    numpad6: 0x5e,\n    numpad7: 0x5f,\n    numpad8: 0x60,\n    numpad9: 0x61,\n    numpad0: 0x62,\n    numpaddecimal: 0x63,\n    numpadequal: 0x67,\n    f13: 0x68,\n    f14: 0x69,\n    f15: 0x6a,\n    f16: 0x6b,\n    f17: 0x6c,\n    f18: 0x6d,\n    f19: 0x6e,\n    f20: 0x6f,\n    f21: 0x70,\n    f22: 0x71,\n    f23: 0x72,\n    f24: 0x73,\n    execute: 0x74,\n    help: 0x75,\n    contextmenu: 0x76,\n    select: 0x77,\n    stop: 0x78,\n    again: 0x79,\n    undo: 0x7a,\n    cut: 0x7b,\n    copy: 0x7c,\n    paste: 0x7d,\n    find: 0x7e,\n    mute: 0x7f,\n    volumeup: 0x80,\n    volumedown: 0x81,\n    numpadcomma: 0x85,\n};\n/**\n * @internal\n */\nconst reverseSelectors = Object.keys(selectors).reduce((r, key) => {\n    if (!r[selectors[key]])\n        r[selectors[key]] = key;\n    return r;\n}, {});\n/**\n * @internal\n */\nconst modifierCodes = {\n    controlleft: exports.HidKeyboardModifiers.LeftControl,\n    altleft: exports.HidKeyboardModifiers.LeftAlt,\n    shiftleft: exports.HidKeyboardModifiers.LeftShift,\n    metaleft: exports.HidKeyboardModifiers.LeftGUI,\n    controlright: exports.HidKeyboardModifiers.RightControl,\n    altright: exports.HidKeyboardModifiers.RightAlt,\n    shiftright: exports.HidKeyboardModifiers.RightShift,\n    metaright: exports.HidKeyboardModifiers.RightGUI,\n};\n/**\n * @internal\n */\nfunction renderKeyboardKey(selector, modifiers, pretty) {\n    const flags = pretty\n        ? [\n            \"Ctrl\",\n            \"Shift\",\n            \"Alt\",\n            \"Cmd\",\n            \"Ctrl Right\",\n            \"Shift Right\",\n            \"AltRight\",\n            \"Cmd Right\",\n        ]\n        : [\n            \"{controlleft}\",\n            \"{shiftleft}\",\n            \"{altleft}\",\n            \"{metaleft}\",\n            \"{controlright}\",\n            \"{shiftright}\",\n            \"{altright}\",\n            \"{metaright}\",\n        ];\n    const sep = pretty ? \" + \" : \" \";\n    const values = [];\n    flags.forEach((flag, i) => {\n        if (modifiers & (1 << i)) {\n            values.push(flag);\n        }\n    });\n    const sel = reverseSelectors[selector];\n    if (sel !== undefined)\n        values.push(pretty\n            ? sel.toUpperCase()\n            : !pretty && sel.length > 1\n                ? `{${sel}}`\n                : sel);\n    const value = values.filter(v => !!v).join(sep);\n    return value;\n}\n\n/**\n * @internal\n */\nfunction renderHidMouseButtons(buttons) {\n    const btns = [\n        buttons & exports.HidMouseButton.Left ? \"left\" : \"\",\n        buttons & exports.HidMouseButton.Right ? \"right\" : \"\",\n        buttons & exports.HidMouseButton.Middle ? \"middle\" : \"\",\n    ]\n        .filter(b => !!b)\n        .join(\", \");\n    return btns;\n}\nclass HIDMouseServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_HID_MOUSE, options);\n        this.addCommand(exports.HidMouseCmd.Move, this.handleMove.bind(this));\n        this.addCommand(exports.HidMouseCmd.SetButton, this.handleSetButton.bind(this));\n        this.addCommand(exports.HidMouseCmd.Wheel, this.handleWheel.bind(this));\n    }\n    get lastCommand() {\n        return this._lastCommand;\n    }\n    setLastCommand(s) {\n        if (this._lastCommand !== s) {\n            this._lastCommand = s;\n            this.emit(CHANGE);\n        }\n    }\n    handleMove(pkt) {\n        const [dx, dy, time] = pkt.jdunpack(\"i16 i16 u16\");\n        this.setLastCommand(`move ${dx} ${dy} ${time}`);\n    }\n    handleSetButton(pkt) {\n        const [buttons, event] = pkt.jdunpack(\"u16 u8\");\n        const btns = renderHidMouseButtons(buttons);\n        this.setLastCommand(`set buttons ${btns || \"?\"} ${(exports.HidMouseButtonEvent[event] || \"?\").toLocaleLowerCase()}`);\n    }\n    handleWheel(pkt) {\n        const [dy, time] = pkt.jdunpack(\"i16 u16\");\n        this.setLastCommand(`wheel ${dy} ${time}`);\n    }\n}\n\nclass DimmerServer extends JDServiceServer {\n    constructor(instanceName, options = {}) {\n        super(SRV_DIMMER, { instanceName });\n        const { variant = exports.DimmerVariant.Light } = options;\n        this.intensity = this.addRegister(exports.DimmerReg.Intensity, [0]);\n        this.variant = this.addRegister(exports.DimmerReg.Variant, [variant]);\n    }\n}\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nfunction splitPair(kv) {\n    const i = kv.indexOf(\"=\");\n    if (i < 0)\n        return [kv, \"\"];\n    else\n        return [kv.slice(0, i), kv.slice(i + 1)];\n}\nfunction parsePropertyBag(msg, separator) {\n    const r = {};\n    msg.split(separator || \"&\")\n        .map(kv => splitPair(kv))\n        .forEach(parts => (r[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1])));\n    return r;\n}\nclass AzureIoTHubHealthServer extends JDServiceServer {\n    constructor(options) {\n        super(SRV_AZURE_IOT_HUB_HEALTH, options);\n        this.hubName = this.addRegister(exports.AzureIotHubHealthReg.HubName, [\"\"]);\n        this.hubDeviceId = this.addRegister(exports.AzureIotHubHealthReg.HubDeviceId, [\n            \"\",\n        ]);\n        this.connectionStatus = this.addRegister(exports.AzureIotHubHealthReg.ConnectionStatus, [exports.AzureIotHubHealthConnectionStatus.Connected]);\n        this.connectionStatus.on(CHANGE, () => this.sendEvent(exports.AzureIotHubHealthEvent.ConnectionStatusChange));\n        this.connectionString = \"\";\n        this.addCommand(exports.AzureIotHubHealthCmd.Connect, this.handleConnect.bind(this));\n        this.addCommand(exports.AzureIotHubHealthCmd.Disconnect, this.handleDisconnect.bind(this));\n        this.addCommand(exports.AzureIotHubHealthCmd.SetConnectionString, this.handleSetConnectionString.bind(this));\n    }\n    async handleConnect() {\n        this.connectionStatus.setValues([\n            exports.AzureIotHubHealthConnectionStatus.Connecting,\n        ]);\n        await delay(500);\n        if (!this.connectionString)\n            this.connectionStatus.setValues([401]);\n        else\n            this.connectionStatus.setValues([\n                exports.AzureIotHubHealthConnectionStatus.Connected,\n            ]);\n    }\n    async handleDisconnect() {\n        this.connectionStatus.setValues([\n            exports.AzureIotHubHealthConnectionStatus.Disconnecting,\n        ]);\n        await delay(500);\n        this.connectionStatus.setValues([\n            exports.AzureIotHubHealthConnectionStatus.Disconnected,\n        ]);\n    }\n    async handleSetConnectionString(pkt) {\n        const newConnectionString = pkt.stringData;\n        if (newConnectionString !== this.connectionString) {\n            await this.handleDisconnect();\n            this.connectionString = newConnectionString;\n            const connStringParts = parsePropertyBag(this.connectionString, \";\");\n            this.hubName.setValues([connStringParts[\"HostName\"] || \"\"]);\n            this.hubDeviceId.setValues([connStringParts[\"DeviceId\"] || \"\"]);\n            // notify connection string changed\n            this.sendEvent(exports.AzureIotHubHealthEvent.ConnectionStatusChange);\n        }\n    }\n}\n\nclass VibrationMotorServer extends JDServiceServer {\n    constructor() {\n        super(SRV_VIBRATION_MOTOR);\n        this._animationStep = -1;\n        this.enabled = this.addRegister(exports.VibrationMotorReg.Enabled, [\n            false,\n        ]);\n        this.addCommand(exports.VibrationMotorCmd.Vibrate, this.handleVibrate.bind(this));\n        this.on(REFRESH, this.handleRefresh.bind(this));\n    }\n    handleRefresh() {\n        if (!this._animation)\n            return; // nothing to do\n        const { start, pattern } = this._animation;\n        const now = this.device.bus.timestamp;\n        const elapsed = now - start;\n        let t = 0;\n        for (let i = 0; i < pattern.length; ++i) {\n            const [duration, speed] = pattern[i];\n            const dt = duration << 3;\n            t += dt;\n            if (t - dt <= elapsed && t > elapsed) {\n                // we're playing this note\n                if (this._animationStep !== i) {\n                    this._animationStep = i;\n                    this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                        duration,\n                        speed,\n                    });\n                }\n                break;\n            }\n        }\n        if (elapsed > t) {\n            // animation finished\n            this._animation = undefined;\n            this._animationStep = -1;\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration: 0,\n                speed: 0,\n            });\n            this.emit(CHANGE);\n        }\n    }\n    handleVibrate(pkt) {\n        const [pattern] = pkt.jdunpack(\"r: u8 u0.8\");\n        this._animation = {\n            start: this.device.bus.timestamp,\n            pattern,\n        };\n        this._animationStep = -1;\n        if (pattern.length) {\n            const [duration, speed] = pattern[0];\n            this._animationStep = 0;\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration,\n                speed,\n            });\n        }\n        this.emit(CHANGE);\n    }\n}\nVibrationMotorServer.VIBRATE_PATTERN = \"vibratePattern\";\n\nclass WifiServer extends JDServiceServer {\n    constructor() {\n        super(SRV_WIFI, { intensityValues: [true] });\n        this._lastScanResults = [\n            {\n                ssid: \"HOME\",\n                bssid: new Uint8Array(0),\n                rssi: -42,\n                channel: 10,\n                flags: exports.WifiAPFlags.WPS | exports.WifiAPFlags.IEEE_802_11B,\n            },\n        ];\n        this._knownNetworks = [\n            {\n                ssid: \"HOME\",\n                password: \"home\",\n                priority: 0,\n                flags: exports.WifiAPFlags.WPS | exports.WifiAPFlags.IEEE_802_11B,\n            },\n        ];\n        this.enabled = this.addRegister(exports.WifiReg.Enabled, [true]);\n        this.connected = this.addRegister(exports.WifiReg.Connected, [false]);\n        this.ssid = this.addRegister(exports.WifiReg.Ssid, [\"\"]);\n        this.ipAddress = this.addRegister(exports.WifiReg.IpAddress, [\n            new Uint8Array(0),\n        ]);\n        this.eui48 = this.addRegister(exports.WifiReg.Eui48, [\n            randomBytes(6),\n        ]);\n        this.addCommand(exports.WifiCmd.Scan, this.handleScan.bind(this));\n        this.addCommand(exports.WifiCmd.Reconnect, this.handleReconnect.bind(this));\n        this.addCommand(exports.WifiCmd.LastScanResults, this.handleLastScanResults.bind(this));\n        this.addCommand(exports.WifiCmd.ListKnownNetworks, this.handleListKnownNetworks.bind(this));\n        this.addCommand(exports.WifiCmd.AddNetwork, this.handleAddNetwork.bind(this));\n        this.addCommand(exports.WifiCmd.ForgetAllNetworks, this.handleForgetAllNetworks.bind(this));\n        this.addCommand(exports.WifiCmd.ForgetNetwork, this.handleForgetNetwork.bind(this));\n        this.addCommand(exports.WifiCmd.SetNetworkPriority, this.handleSetNetworkPriority.bind(this));\n        this.ipAddress.on(CHANGE, this.handleIpChange.bind(this));\n        this.enabled.on(CHANGE, this.handleEnabledChange.bind(this));\n    }\n    handleEnabledChange() {\n        const [enabled] = this.enabled.values();\n        if (!enabled)\n            this.disconnect();\n        else\n            this.connect();\n    }\n    handleIpChange() {\n        const [ip] = this.ipAddress.values();\n        console.debug(`wifi: ip ${toHex(ip)}`);\n        if (ip === null || ip === void 0 ? void 0 : ip.length)\n            this.sendEvent(exports.WifiEvent.GotIp);\n        else\n            this.sendEvent(exports.WifiEvent.LostIp);\n    }\n    get scannedKnownNetworks() {\n        return this._lastScanResults.filter(n => this._knownNetworks.some(kn => kn.ssid === n.ssid));\n    }\n    handleReconnect() {\n        console.debug(`wifi: reconnect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n            enabled: this.enabled.values()[0],\n            connected: this.connected.values()[0],\n        });\n        this.disconnect();\n        if (this.scannedKnownNetworks.length) {\n            console.debug(`wifi: reconnect, connect`);\n            this.enabled.setValues([true]);\n        }\n    }\n    connect() {\n        console.debug(`wifi: connect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n        });\n        const network = this.scannedKnownNetworks[0];\n        const { ssid } = network || {};\n        this.ssid.setValues([ssid || \"\"]);\n        this.enabled.setValues([!!ssid]);\n        this.connected.setValues([!!ssid]);\n        this.ipAddress.setValues([randomBytes(4)]);\n    }\n    disconnect() {\n        console.debug(`wifi: disconnect`);\n        this.ssid.setValues([\"\"]);\n        this.connected.setValues([false]);\n        this.enabled.setValues([false]);\n        this.ipAddress.setValues([new Uint8Array(0)]);\n    }\n    scan() {\n        this._lastScanResults = [\n            {\n                ssid: \"HOME\",\n                bssid: new Uint8Array(0),\n                rssi: -42,\n                channel: 10,\n                flags: exports.WifiAPFlags.WPS | exports.WifiAPFlags.IEEE_802_11B,\n            },\n            Math.random() > 0.5 && {\n                ssid: \"OFFICE\",\n                bssid: new Uint8Array(0),\n                rssi: -70,\n                channel: 11,\n                flags: exports.WifiAPFlags.IEEE_802_11N,\n            },\n        ].filter(res => !!res);\n        this.sendEvent(exports.WifiEvent.ScanComplete, jdpack(\"u16 u16\", [\n            this._lastScanResults.length,\n            this.scannedKnownNetworks.length,\n        ]));\n    }\n    handleScan() {\n        this.scan();\n    }\n    async handleLastScanResults(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        console.debug(`list scan results`, this._lastScanResults);\n        await pipe.respondForEach(this._lastScanResults, ({ flags, rssi, channel, bssid, ssid }) => jdpack(\"u32 x[4] i8 u8 b[6] s[33]\", [flags, rssi, channel, bssid, ssid]));\n    }\n    async handleListKnownNetworks(pkt) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        console.debug(`list knowns`, this._knownNetworks);\n        await pipe.respondForEach(this._knownNetworks, ({ priority, flags, ssid }) => jdpack(\"i16 i16 s\", [\n            priority,\n            flags,\n            ssid,\n        ]));\n    }\n    handleAddNetwork(pkt) {\n        console.debug(`wifi: add network`);\n        const [ssid, password] = pkt.jdunpack(\"z z\");\n        let network = this._knownNetworks.find(n => n.ssid === ssid);\n        if (!network) {\n            const scanned = this._lastScanResults.find(s => s.ssid === ssid);\n            this._knownNetworks.push((network = {\n                ssid,\n                flags: scanned === null || scanned === void 0 ? void 0 : scanned.flags,\n                priority: 0,\n                password: \"\",\n            }));\n        }\n        network.password = password;\n        this.sendEvent(exports.WifiEvent.NetworksChanged);\n    }\n    handleForgetAllNetworks() {\n        this._knownNetworks = [];\n        this.disconnect();\n        this.sendEvent(exports.WifiEvent.NetworksChanged);\n    }\n    handleForgetNetwork(pkt) {\n        const [ssid] = pkt.jdunpack(\"s\");\n        this._knownNetworks = this._knownNetworks.filter(network => network.ssid !== ssid);\n        const [currentSsid] = this.ssid.values();\n        if (ssid === currentSsid)\n            this.disconnect();\n        this.sendEvent(exports.WifiEvent.NetworksChanged);\n    }\n    handleSetNetworkPriority(pkt) {\n        const [priority, ssid] = pkt.jdunpack(\"i16 s\");\n        const network = this._knownNetworks.find(network => network.ssid === ssid);\n        if (network)\n            network.priority = priority;\n        this.sendEvent(exports.WifiEvent.NetworksChanged);\n    }\n}\n\nconst indoorThermometerOptions = {\n    instanceName: \"indoor\",\n    readingValues: [21.5],\n    streamingInterval: 1000,\n    minReading: -5,\n    maxReading: 50,\n    readingError: [0.25],\n    variant: exports.ThermometerVariant.Indoor,\n};\nconst outdoorThermometerOptions = {\n    instanceName: \"temperature\",\n    readingValues: [21.5],\n    streamingInterval: 60000,\n    minReading: -40,\n    maxReading: 120,\n    readingError: [0.25],\n    variant: exports.ThermometerVariant.Outdoor,\n};\nconst outdoorHumidityOptions = {\n    instanceName: \"humidity\",\n    streamingInterval: 60000,\n    readingValues: [40],\n    readingError: [0.1],\n};\nconst medicalThermometerOptions = {\n    instanceName: \"medical\",\n    readingValues: [37.5],\n    streamingInterval: 1000,\n    minReading: 35,\n    maxReading: 42,\n    readingError: [0.5],\n    variant: exports.ThermometerVariant.Body,\n};\nconst barometerOptions = {\n    instanceName: \"pressure\",\n    readingValues: [1013],\n    readingError: [0.4],\n};\nconst sonarOptions = {\n    variant: exports.DistanceVariant.Ultrasonic,\n    minReading: 0.02,\n    maxReading: 4,\n    readingValues: [1],\n};\nconst SG90_STALL_TORQUE = 1.8;\n/**\n * @internal\n */\nconst SG90_RESPONSE_SPEED = 0.12; // deg/60deg\nconst microServoOptions = {\n    stallTorque: SG90_STALL_TORQUE,\n    responseSpeed: SG90_RESPONSE_SPEED,\n    minAngle: -90,\n    maxAngle: 90,\n};\nconst microServo270Options = {\n    stallTorque: SG90_STALL_TORQUE,\n    responseSpeed: SG90_RESPONSE_SPEED,\n    minAngle: -135,\n    maxAngle: 135,\n};\nconst microServo360Options = {\n    stallTorque: SG90_STALL_TORQUE,\n    responseSpeed: SG90_RESPONSE_SPEED * 2,\n    minAngle: -180,\n    maxAngle: 180,\n};\nconst windDirectionOptions = {\n    readingValues: [0],\n    readingError: [5],\n    streamingInterval: 1000,\n};\nconst windSpeedOptions = {\n    readingValues: [0],\n    readingError: [0.5],\n    streamingInterval: 1000,\n    registerValues: [{ code: exports.WindSpeedReg.MaxWindSpeed, values: [55] }],\n};\nconst eCO2Options = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: exports.ECO2Variant.VOC,\n};\nconst CO2Options = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: exports.ECO2Variant.NDIR,\n};\nconst tvocOptions = {\n    readingValues: [500],\n    streamingInterval: 1000,\n};\nconst microbitSounds = [\n    [0, \"giggle\"],\n    [0, \"happy\"],\n    [0, \"hello\"],\n    [0, \"mysterious\"],\n    [0, \"sad\"],\n    [0, \"slide\"],\n    [0, \"soaring\"],\n    [0, \"spring\"],\n    [0, \"twinkle\"],\n    [0, \"yawn\"],\n];\nconst soundLevel = {\n    readingValues: [0],\n    inactiveThreshold: 10,\n    activeThreshold: 70,\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: exports.SoundLevelReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: exports.SoundLevelReg.MaxDecibels,\n            values: [-30],\n        },\n    ],\n};\nconst soundSpectrum = {\n    readingValues: [new Uint8Array(0)],\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: exports.SoundSpectrumReg.FftPow2Size,\n            values: [5],\n        },\n        {\n            code: exports.SoundSpectrumReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: exports.SoundSpectrumReg.MaxDecibels,\n            values: [-30],\n        },\n        {\n            code: exports.SoundSpectrumReg.SmoothingTimeConstant,\n            values: [0.8],\n        },\n    ],\n};\nconst _providerDefinitions = [\n    {\n        name: \"7-segment (4 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"ff112233\")],\n                registerValues: [\n                    {\n                        code: exports.SevenSegmentDisplayReg.DigitCount,\n                        values: [4],\n                    },\n                    {\n                        code: exports.SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"7-segment (8 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"0102040810204080\")],\n                registerValues: [\n                    {\n                        code: exports.SevenSegmentDisplayReg.DigitCount,\n                        values: [8],\n                    },\n                    {\n                        code: exports.SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"accelerometer\",\n        serviceClasses: [SRV_ACCELEROMETER],\n        services: () => [\n            new SensorServer(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n                preferredStreamingInterval: 20,\n            }),\n        ],\n    },\n    {\n        name: \"barometer\",\n        serviceClasses: [SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"bitradio\",\n        serviceClasses: [SRV_BIT_RADIO],\n        services: () => [new BitRadioServer()],\n    },\n    {\n        name: \"button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer()],\n    },\n    {\n        name: \"button (2x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer(\"B0\"), new ButtonServer(\"B1\")],\n    },\n    {\n        name: \"button (4x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => Array(4)\n            .fill(0)\n            .map((_, i) => new ButtonServer(`B${i}`)),\n    },\n    {\n        name: \"buzzer\",\n        serviceClasses: [SRV_BUZZER],\n        services: () => [new BuzzerServer()],\n    },\n    {\n        name: \"capacitive button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => {\n            const button = new ButtonServer();\n            const config = new CapacitiveButtonServer();\n            button.threshold = config.threshold;\n            return [button, config];\n        },\n    },\n    {\n        name: \"capacitive button (6x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => Array(6)\n            .fill(0)\n            .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"capacitive button (12x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => Array(12)\n            .fill(0)\n            .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"character screen (LDC, 16x2)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({ message: \"hello\\nworld!\" }),\n        ],\n    },\n    {\n        name: \"character screen (OLED, 32x8, RTL)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hello\\nworld!\",\n                columns: 32,\n                rows: 8,\n                variant: exports.CharacterScreenVariant.OLED,\n                textDirection: exports.CharacterScreenTextDirection.RightToLeft,\n            }),\n        ],\n    },\n    {\n        name: \"character screen (Braille, 4x1)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hi\",\n                columns: 4,\n                rows: 1,\n                variant: exports.CharacterScreenVariant.Braille,\n                textDirection: exports.CharacterScreenTextDirection.LeftToRight,\n            }),\n        ],\n    },\n    {\n        name: \"color\",\n        serviceClasses: [SRV_COLOR],\n        services: () => [\n            new SensorServer(SRV_COLOR, {\n                readingValues: [0.5, 0, 0.5],\n                preferredStreamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"compass\",\n        serviceClasses: [SRV_COMPASS],\n        services: () => [new CompassServer()],\n    },\n    {\n        name: \"dimmer (fan)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"fan\", { variant: exports.DimmerVariant.Fan }),\n        ],\n    },\n    {\n        name: \"dimmer (light)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"light\", { variant: exports.DimmerVariant.Light }),\n        ],\n    },\n    {\n        name: \"distance (sonar)\",\n        serviceClasses: [SRV_DISTANCE],\n        services: () => [new AnalogSensorServer(SRV_DISTANCE, sonarOptions)],\n    },\n    {\n        name: \"DMX\",\n        serviceClasses: [SRV_DMX],\n        services: () => [new DMXServer()],\n    },\n    {\n        name: \"eCO₂\",\n        serviceClasses: [SRV_E_CO2],\n        services: () => [new AnalogSensorServer(SRV_E_CO2, eCO2Options)],\n    },\n    {\n        name: \"eCO₂ + TVOC\",\n        serviceClasses: [SRV_E_CO2, SRV_TVOC],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, eCO2Options),\n            new AnalogSensorServer(SRV_TVOC, tvocOptions),\n        ],\n    },\n    {\n        name: \"eCO₂ + humidity + thermometer\",\n        serviceClasses: [SRV_E_CO2, SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, CO2Options),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_THERMOMETER, indoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"flex sensor (2.2 inch)\",\n        serviceClasses: [SRV_FLEX],\n        services: () => [\n            new AnalogSensorServer(SRV_FLEX, {\n                variant: exports.FlexVariant.Linear22Inch,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"gyroscope\",\n        serviceClasses: [SRV_GYROSCOPE],\n        services: () => [\n            new SensorServer(SRV_GYROSCOPE, {\n                readingValues: [0, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"heart rate\",\n        serviceClasses: [SRV_HEART_RATE],\n        services: () => [\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 100,\n                variant: exports.HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"humidity\",\n        serviceClasses: [SRV_HUMIDITY],\n        services: () => [\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature + barometer\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER, SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"illuminance\",\n        serviceClasses: [SRV_ILLUMINANCE],\n        services: () => [\n            new AnalogSensorServer(SRV_ILLUMINANCE, {\n                readingValues: [1],\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick + A + B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: exports.JoystickVariant.Thumb,\n                buttonsAvailable: exports.JoystickButtons.A | exports.JoystickButtons.B,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: exports.JoystickVariant.Thumb,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick+A)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: exports.JoystickVariant.Thumb,\n                buttonsAvailable: exports.JoystickButtons.A,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (Dpad + all buttons)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: exports.JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_ARCADE_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (only DPad+A/B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: exports.JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_DPAD_AB_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"RGB LED (RGB through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: exports.LedVariant.ThroughHole,\n                ledCount: 1,\n                color: [255, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"LED (5x blue through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: exports.LedVariant.ThroughHole,\n                waveLength: 450,\n                ledCount: 5,\n                color: [0, 0, 255],\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (5x5 micro:bit)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(5, 5, {\n                brightness: 128,\n                variant: exports.DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (8x8)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 8, {\n                brightness: 128,\n                variant: exports.DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (11x7)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(11, 7, {\n                brightness: 128,\n                variant: exports.DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"Braille matrix (8x4)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 4, {\n                variant: exports.DotMatrixVariant.Braille,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 10\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 10,\n                variant: exports.LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 12\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 12,\n                variant: exports.LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 16\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: exports.LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 24\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 24,\n                variant: exports.LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel jewel 7\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 7,\n                variant: exports.LedPixelVariant.Jewel,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel stick 8\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 8,\n                variant: exports.LedPixelVariant.Stick,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 30\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 1000,\n                variant: exports.LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 60\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 2000,\n                variant: exports.LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 150\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 150,\n                maxPower: 5000,\n                variant: exports.LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 300\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 300,\n                maxPower: 5000,\n                variant: exports.LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (4x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: exports.LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (8x8)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                variant: exports.LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (16x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                numColumns: 16,\n                variant: exports.LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"light level (photo-resistor)\",\n        serviceClasses: [SRV_LIGHT_LEVEL],\n        services: () => [\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: exports.LightLevelVariant.PhotoResistor,\n            }),\n        ],\n    },\n    {\n        name: \"line tracker (digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [new ReflectedLightServer()],\n    },\n    {\n        name: \"line tracker (2x digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer(),\n            new ReflectedLightServer(),\n        ],\n    },\n    {\n        name: \"line tracker (analog)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer({\n                variant: exports.ReflectedLightVariant.InfraredAnalog,\n            }),\n        ],\n    },\n    {\n        name: \"matrix keypad (3x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(3, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"*\",\n                \"0\",\n                \"#\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (4x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(4, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"A\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"B\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"C\",\n                \"*\",\n                \"0\",\n                \"#\",\n                \"D\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (1x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [new MatrixKeypadServer(4, 1, [\"1\", \"2\", \"3\", \"4\"])],\n    },\n    {\n        name: \"motion\",\n        serviceClasses: [SRV_MOTION],\n        services: () => [\n            new SensorServer(SRV_MOTION, {\n                readingValues: [false],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"motor\",\n        serviceClasses: [SRV_MOTOR],\n        services: () => [new MotorServer()],\n        resetIn: true,\n    },\n    {\n        name: \"protocol test\",\n        serviceClasses: [SRV_PROTO_TEST],\n        services: () => [new ProtocolTestServer()],\n    },\n    {\n        name: \"pulse oxymeter\",\n        serviceClasses: [SRV_PULSE_OXIMETER],\n        services: () => [\n            new SensorServer(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"oxymeter + heart beat\",\n        serviceClasses: [SRV_PULSE_OXIMETER, SRV_HEART_RATE],\n        services: () => [\n            new SensorServer(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 1000,\n                variant: exports.HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"power\",\n        serviceClasses: [SRV_POWER],\n        services: () => [new PowerServer()],\n    },\n    {\n        name: \"RNG (random number generator)\",\n        serviceClasses: [SRV_RNG],\n        services: () => [new RandomNumberGeneratorServer()],\n    },\n    {\n        name: \"rain gauge\",\n        serviceClasses: [SRV_RAIN_GAUGE],\n        services: () => [new RainGaugeServer()],\n    },\n    {\n        name: \"real time clock\",\n        serviceClasses: [SRV_REAL_TIME_CLOCK],\n        services: () => [new RealTimeClockServer()],\n    },\n    {\n        name: \"relay (EM/10A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () => [\n            new JDServiceServer(SRV_RELAY, {\n                intensityValues: [false],\n                isActive: values => !!(values === null || values === void 0 ? void 0 : values[0]),\n                variant: exports.RelayVariant.Electromechanical,\n                registerValues: [\n                    {\n                        code: exports.RelayReg.MaxSwitchingCurrent,\n                        values: [10],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"relay 4x (SSR/5A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () => Array(4)\n            .fill(0)\n            .map(() => new JDServiceServer(SRV_RELAY, {\n            intensityValues: [false],\n            isActive: values => !!(values === null || values === void 0 ? void 0 : values[0]),\n            variant: exports.RelayVariant.SolidState,\n            registerValues: [\n                {\n                    code: exports.RelayReg.MaxSwitchingCurrent,\n                    values: [5],\n                },\n            ],\n        })),\n    },\n    {\n        name: \"rotary encoder\",\n        serviceClasses: [SRV_ROTARY_ENCODER],\n        services: () => [new RotaryEncoderServer()],\n    },\n    {\n        name: \"rotary encoder + button\",\n        serviceClasses: [SRV_ROTARY_ENCODER, SRV_BUTTON],\n        services: () => [new RotaryEncoderServer(), new ButtonServer()],\n    },\n    {\n        name: \"rotary potentiometer\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: exports.PotentiometerVariant.Rotary,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"servo\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServoOptions)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (270°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo270Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (360°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo360Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo x 2\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () => Array(2)\n            .fill(0)\n            .map((_, i) => new ServoServer(Object.assign(Object.assign({}, microServoOptions), { instanceName: `S${i}` }))),\n    },\n    {\n        name: \"servo x 4\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () => Array(4)\n            .fill(0)\n            .map((_, i) => new ServoServer(Object.assign(Object.assign({}, microServoOptions), { instanceName: `S${i}` }))),\n    },\n    {\n        name: \"servo x 6\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () => Array(6)\n            .fill(0)\n            .map((_, i) => new ServoServer(Object.assign(Object.assign({}, microServoOptions), { instanceName: `S${i}` }))),\n    },\n    {\n        name: \"servo x 16\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () => Array(16)\n            .fill(0)\n            .map((_, i) => new ServoServer(Object.assign(Object.assign({}, microServoOptions), { instanceName: `S${i}` }))),\n    },\n    {\n        name: \"settings\",\n        serviceClasses: [SRV_SETTINGS],\n        services: () => [new SettingsServer()],\n    },\n    {\n        name: \"slider (potentiometer)\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: exports.PotentiometerVariant.Slider,\n            }),\n        ],\n    },\n    {\n        name: \"soil moisture\",\n        serviceClasses: [SRV_SOIL_MOISTURE],\n        services: () => [\n            new AnalogSensorServer(SRV_SOIL_MOISTURE, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"speech synthesis\",\n        serviceClasses: [SRV_SPEECH_SYNTHESIS],\n        services: () => [new SpeechSynthesisServer()],\n    },\n    {\n        name: \"solenoid\",\n        serviceClasses: [SRV_SOLENOID],\n        services: () => [\n            new JDServiceServer(SRV_SOLENOID, {\n                intensityValues: [0],\n            }),\n        ],\n    },\n    {\n        name: \"sound level\",\n        serviceClasses: [SRV_SOUND_LEVEL],\n        services: () => [new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel)],\n    },\n    {\n        name: \"sound spectrum\",\n        serviceClasses: [SRV_SOUND_SPECTRUM],\n        services: () => [\n            new SensorServer(SRV_SOUND_SPECTRUM, soundSpectrum),\n        ],\n    },\n    {\n        name: \"sound player (micro:bit v2 sounds)\",\n        serviceClasses: [SRV_SOUND_PLAYER],\n        services: () => [new SoundPlayerServer(microbitSounds)],\n    },\n    {\n        name: \"switch (slide)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: exports.SwitchVariant.Slide })],\n    },\n    {\n        name: \"switch (push button)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({ variant: exports.SwitchVariant.PushButton }),\n        ],\n    },\n    {\n        name: \"switch (toggle)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: exports.SwitchVariant.Toggle })],\n    },\n    {\n        name: \"switch (tilt)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: exports.SwitchVariant.Tilt })],\n    },\n    {\n        name: \"switch (proximity)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({\n                variant: exports.SwitchVariant.Proximity,\n                autoOffDelay: 30,\n            }),\n        ],\n    },\n    {\n        name: \"thermometer (outdoor)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"thermometer (medical)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, medicalThermometerOptions),\n        ],\n    },\n    {\n        name: \"traffic light\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () => [new TrafficLightServer()],\n    },\n    {\n        name: \"traffic crossing (4 x lights)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () => Array(4)\n            .fill(0)\n            .map(_ => new TrafficLightServer()),\n    },\n    {\n        name: \"thermocouple\",\n        serviceClasses: [SRV_THERMOCOUPLE],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOCOUPLE, {\n                readingValues: [550],\n                streamingInterval: 1000,\n                minReading: 0,\n                maxReading: 1100,\n                readingError: [2.2],\n                variant: exports.ThermocoupleVariant.TypeB,\n            }),\n        ],\n    },\n    {\n        name: \"TVOC\",\n        serviceClasses: [SRV_TVOC],\n        services: () => [new AnalogSensorServer(SRV_TVOC, tvocOptions)],\n    },\n    {\n        name: \"UV index\",\n        serviceClasses: [SRV_UV_INDEX],\n        services: () => [\n            new AnalogSensorServer(SRV_UV_INDEX, {\n                readingValues: [5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"vibration motor\",\n        serviceClasses: [SRV_VIBRATION_MOTOR],\n        services: () => [new VibrationMotorServer()],\n    },\n    {\n        name: \"water level\",\n        serviceClasses: [SRV_WATER_LEVEL],\n        services: () => [\n            new AnalogSensorServer(SRV_WATER_LEVEL, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (jewelry)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.001],\n                variant: exports.WeightScaleVariant.Jewelry,\n                maxReading: 0.2,\n                minReading: 0.0005,\n                readingResolution: 0.00001,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (body)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [60],\n                variant: exports.WeightScaleVariant.Body,\n                maxReading: 180,\n                readingResolution: 0.1,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (food)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.5],\n                variant: exports.WeightScaleVariant.Food,\n                maxReading: 6,\n                readingResolution: 0.001,\n            }),\n        ],\n    },\n    {\n        name: \"wind direction\",\n        serviceClasses: [SRV_WIND_DIRECTION],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n        ],\n    },\n    {\n        name: \"wind speed\",\n        serviceClasses: [SRV_WIND_SPEED],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n        ],\n    },\n    {\n        name: \"weather station (wind speed, direction, rain)\",\n        serviceClasses: [SRV_WIND_SPEED, SRV_WIND_DIRECTION, SRV_RAIN_GAUGE],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n            new RainGaugeServer(),\n        ],\n    },\n    {\n        name: \"chassis (motor x 2 + sonar + light)\",\n        serviceClasses: [SRV_DISTANCE, SRV_LED_PIXEL, SRV_MOTOR],\n        services: () => [\n            new MotorServer(\"L\"),\n            new MotorServer(\"R\"),\n            new AnalogSensorServer(SRV_DISTANCE, sonarOptions),\n            new LedPixelServer({\n                numPixels: 5,\n                variant: exports.LedPixelVariant.Stick,\n                instanceName: \"lights\",\n            }),\n        ],\n    },\n    {\n        name: \"railway crossing (2 x lights, 2 x servos, 1 x buffer)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT, SRV_SERVO, SRV_BUZZER],\n        services: () => [\n            new TrafficLightServer({ instanceName: \"left light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"left arm\",\n            }),\n            new TrafficLightServer({ instanceName: \"right light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"right arm\",\n            }),\n            new BuzzerServer({ instanceName: \"bell\" }),\n        ],\n    },\n    {\n        name: \"Arcade controller (6 x buttons)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [\n            new ButtonServer(\"Left\"),\n            new ButtonServer(\"Up\"),\n            new ButtonServer(\"Right\"),\n            new ButtonServer(\"Down\"),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n        ],\n    },\n    {\n        name: \"micro:bit v2\",\n        serviceClasses: [\n            SRV_DOT_MATRIX,\n            SRV_BUTTON,\n            SRV_ACCELEROMETER,\n            SRV_SOUND_LEVEL,\n            SRV_LIGHT_LEVEL,\n            SRV_BUZZER,\n            SRV_SOUND_PLAYER,\n        ],\n        services: () => [\n            new DotMatrixServer(5, 5),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n            new SensorServer(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n            }),\n            new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel),\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: exports.LightLevelVariant.LEDMatrix,\n            }),\n            new BuzzerServer(),\n            new SoundPlayerServer(microbitSounds),\n        ],\n    },\n    {\n        name: \"power + humidity\",\n        serviceClasses: [SRV_POWER, SRV_HUMIDITY],\n        services: () => [\n            new PowerServer(),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n        factory: services => {\n            const dev = new JDServerServiceProvider(\"power+humidity\", [\n                services[0],\n            ]);\n            const pwr = dev.service(1);\n            pwr.enabled.on(CHANGE, () => {\n                const enabled = !!pwr.enabled.values()[0];\n                console.log(`power: ${enabled ? \"on\" : \"off\"}`);\n                if (enabled)\n                    // power + rest\n                    dev.updateServices(services);\n                // power only\n                else\n                    dev.updateServices([services[0]]);\n            });\n            return dev;\n        },\n    },\n    {\n        name: \"HID keyboard\",\n        serviceClasses: [SRV_HID_KEYBOARD],\n        services: () => [new HIDKeyboardServer()],\n    },\n    {\n        name: \"HID mouse\",\n        serviceClasses: [SRV_HID_MOUSE],\n        services: () => [new HIDMouseServer()],\n    },\n    /*\n    {\n        name: \"Azure IoT Hub\",\n        serviceClasses: [SRV_AZURE_IOT_HUB],\n        services: () => [new AzureIoTHubServer()],\n    },\n    */\n    {\n        name: \"WiFi (virtual)\",\n        serviceClasses: [SRV_WIFI],\n        services: () => [new WifiServer()],\n    },\n    {\n        name: \"Azure IoT Hub Health\",\n        serviceClasses: [SRV_AZURE_IOT_HUB_HEALTH],\n        services: () => [new AzureIoTHubHealthServer()],\n    },\n];\nfunction stableSimulatorDeviceId(bus, template) {\n    const others = bus.serviceProviders().filter(sp => sp.template === template);\n    const word0 = hash(stringToUint8Array(template + others.length), 32);\n    const word1 = hash(stringToUint8Array(template + others.length + 1), 32);\n    const id = toFullHex([word0, word1]);\n    return id.slice(2);\n}\n/**\n * Instantiates a new service provider instance and adds it to the bus\n * @category Servers\n */\nfunction addServiceProvider(bus, definition) {\n    var _a;\n    const services = definition.services();\n    services.forEach(srv => srv.lock());\n    const deviceId = stableSimulatorDeviceId(bus, definition.name);\n    const options = {\n        resetIn: definition.resetIn,\n        deviceId,\n    };\n    const d = ((_a = definition.factory) === null || _a === void 0 ? void 0 : _a.call(definition, services)) ||\n        new JDServerServiceProvider(definition.name, services, options);\n    bus.addServiceProvider(d);\n    return d;\n}\n/**\n * Finds the first service provider that supports the given service class\n * @category Servers\n */\nfunction serviceProviderDefinitionFromServiceClass(serviceClass) {\n    return _providerDefinitions.find(provider => provider.serviceClasses.length === 1 &&\n        provider.serviceClasses[0] === serviceClass);\n}\n/**\n * Starts a service provider that hosts the given service class.\n * @category Servers\n */\nfunction startServiceProviderFromServiceClass(bus, serviceClass) {\n    const provider = serviceProviderDefinitionFromServiceClass(serviceClass);\n    return addServiceProvider(bus, provider);\n}\n\n/**\n * Base class for service clients\n * @category Clients\n */\nclass JDServiceClient extends JDClient {\n    constructor(service) {\n        super();\n        this.service = service;\n    }\n    get device() {\n        return this.service.device;\n    }\n    get bus() {\n        return this.device.bus;\n    }\n    toString() {\n        return `client of ${this.service}`;\n    }\n}\n\n/**\n * A client for the role manager service\n * @category Clients\n */\nclass RoleManagerClient extends JDServiceClient {\n    constructor(service) {\n        super(service);\n        this._roles = [];\n        this._needRefresh = true;\n        this._lastRefreshAttempt = 0;\n        const changeEvent = service.event(exports.SystemEvent.Change);\n        // always debounce refresh roles\n        this.startRefreshRoles = debounceAsync(this.refreshRoles.bind(this), 200);\n        // role manager emits change events\n        this.mount(changeEvent.subscribe(EVENT, this.handleChange.bind(this)));\n        // assign roles when need device enter the bus\n        this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.assignRoles.bind(this)));\n        // unmount when device is removed\n        this.mount(service.device.subscribe(DISCONNECT, () => {\n            var _a;\n            if (((_a = this.bus.roleManager) === null || _a === void 0 ? void 0 : _a.service) === this.service)\n                this.bus.setRoleManagerService(undefined);\n        }));\n        // clear on unmount\n        this.mount(this.clearRoles.bind(this));\n        // retry to get roles on every self-announce\n        this.mount(this.bus.subscribe(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this)));\n    }\n    handleSelfAnnounce() {\n        if (this._needRefresh &&\n            this.bus.timestamp - this._lastRefreshAttempt > ROLE_MANAGER_POLL)\n            this.startRefreshRoles();\n    }\n    get roles() {\n        return this._roles;\n    }\n    async handleChange() {\n        this.startRefreshRoles();\n    }\n    async refreshRoles() {\n        if (this.unmounted)\n            return;\n        this._needRefresh = false;\n        await this.collectRoles();\n        if (this.unmounted)\n            return;\n        this.assignRoles();\n    }\n    async collectRoles() {\n        this._lastRefreshAttempt = this.bus.timestamp;\n        const previousRolesHash = JSON.stringify(this._roles);\n        try {\n            const inp = new InPipeReader(this.bus);\n            await this.service.sendPacketAsync(inp.openCommand(exports.RoleManagerCmd.ListRequiredRoles), true);\n            // collect all roles\n            const roles = [];\n            for (const buf of await inp.readData(1000)) {\n                const [devidbuf, serviceClass, serviceIndex, name] = jdunpack(buf, \"b[8] u32 u8 s\");\n                const deviceId = toHex(devidbuf);\n                const role = {\n                    deviceId,\n                    serviceClass,\n                    serviceIndex,\n                    name,\n                };\n                roles.push(role);\n            }\n            // store result if changed\n            if (JSON.stringify(roles) !== previousRolesHash) {\n                this._roles = roles;\n                this.emit(CHANGE);\n            }\n        }\n        catch (e) {\n            this._needRefresh = true;\n            this.emit(ERROR, e);\n        }\n    }\n    assignRoles() {\n        this.bus\n            .services()\n            .filter(srv => RoleManagerClient.unroledSrvs.indexOf(srv.serviceClass) < 0)\n            .forEach(srv => this.assignRole(srv));\n    }\n    assignRole(service) {\n        const deviceId = service.device.deviceId;\n        const serviceIndex = service.serviceIndex;\n        const role = this._roles.find(r => r.deviceId === deviceId && r.serviceIndex === serviceIndex);\n        //console.debug(`role ${service.id} -> ${role?.role}`, { service })\n        service.role = role === null || role === void 0 ? void 0 : role.name;\n    }\n    clearRoles() {\n        this.bus.services().forEach(srv => (srv.role = undefined));\n    }\n    hasRoleForService(service) {\n        var _a;\n        const { serviceClass } = service;\n        return !!((_a = this._roles) === null || _a === void 0 ? void 0 : _a.find(r => r.serviceClass === serviceClass));\n    }\n    compatibleRoles(service) {\n        var _a;\n        const { serviceClass } = service;\n        return (_a = this._roles) === null || _a === void 0 ? void 0 : _a.filter(r => r.serviceClass === serviceClass);\n    }\n    role(name) {\n        return this._roles.find(r => r.serviceIndex > 0 && r.name === name);\n    }\n    async setRole(service, name) {\n        const { device, serviceIndex } = service;\n        const { deviceId } = device;\n        //console.debug(`set role ${deviceId}:${serviceIndex} to ${role}`)\n        const previous = name && this._roles.find(r => r.name === name);\n        if (previous &&\n            previous.deviceId === deviceId &&\n            previous.serviceIndex === serviceIndex) {\n            // nothing todo\n            console.debug(`role unmodified, skipping`);\n            return;\n        }\n        // set new role assignment\n        {\n            const data = jdpack(\"b[8] u8 s\", [\n                fromHex(deviceId),\n                serviceIndex,\n                name || \"\",\n            ]);\n            await this.service.sendPacketAsync(Packet.from(exports.RoleManagerCmd.SetRole, data), true);\n        }\n        // clear previous role assignment\n        if (previous) {\n            console.debug(`clear role ${previous.deviceId}:${previous.serviceIndex}`);\n            const data = jdpack(\"b[8] u8 s\", [\n                fromHex(previous.deviceId),\n                previous.serviceIndex,\n                \"\",\n            ]);\n            await this.service.sendPacketAsync(Packet.from(exports.RoleManagerCmd.SetRole, data), true);\n        }\n    }\n    startSimulators() {\n        var _a;\n        if (!((_a = this._roles) === null || _a === void 0 ? void 0 : _a.length))\n            return;\n        // collect roles that need to be bound\n        const todos = groupBy(this._roles\n            .filter(role => !this.bus.device(role.deviceId, true))\n            .map(role => ({\n            role,\n            hostDefinition: serviceProviderDefinitionFromServiceClass(role.serviceClass),\n        }))\n            .filter(todo => !!todo.hostDefinition), todo => parentName(todo.role.name) || \"\");\n        // spawn devices with group of devices\n        Object.keys(todos).forEach(parent => {\n            const todo = todos[parent];\n            // no parent, spawn individual services\n            if (!parent) {\n                todo.forEach(t => addServiceProvider(this.bus, t.hostDefinition));\n            }\n            else {\n                // spawn all services into 1\n                addServiceProvider(this.bus, {\n                    name: \"\",\n                    serviceClasses: [],\n                    services: () => arrayConcatMany(todo.map(t => t.hostDefinition.services())),\n                });\n            }\n        });\n        function parentName(role) {\n            return role.split(\"/\", 1)[0];\n        }\n    }\n}\nRoleManagerClient.unroledSrvs = [SRV_CONTROL, SRV_ROLE_MANAGER, SRV_LOGGER];\n\n/**\n * A Jacdac bus manager. This instance maintains the list of devices on the bus.\n * @category JDOM\n */\nclass JDBus extends JDNode {\n    /**\n     * Creates the bus with the given transport\n     * @param sendPacket\n     * @category Lifecycle\n     */\n    constructor(transports, options) {\n        super();\n        this._transports = [];\n        this._bridges = [];\n        this._devices = [];\n        this._lastPingLoggerTime = 0;\n        this._lastResetInTime = 0;\n        this._restartCounter = 0;\n        this._minLoggerPriority = exports.LoggerPriority.Debug;\n        this._gcDevicesFrozen = 0;\n        this._serviceProviders = [];\n        this._streaming = false;\n        this._passive = false;\n        this.selfDeviceId = (options === null || options === void 0 ? void 0 : options.deviceId) || randomDeviceId();\n        this.scheduler = (options === null || options === void 0 ? void 0 : options.scheduler) || new WallClockScheduler();\n        this.parentOrigin = (options === null || options === void 0 ? void 0 : options.parentOrigin) || \"*\";\n        this.stats = new BusStatsMonitor(this);\n        // some transport may be undefined\n        transports === null || transports === void 0 ? void 0 : transports.filter(tr => !!tr).map(tr => this.addTransport(tr));\n        // tell loggers to send data, every now and then\n        // send resetin packets\n        this.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this));\n        // tell RTC clock the computer time\n        this.on(DEVICE_ANNOUNCE, this.handleRealTimeClockSync.bind(this));\n        // grab the default role manager\n        this.on(DEVICE_CHANGE, this.handleRoleManager.bind(this));\n        // start all timers\n        this.start();\n    }\n    configureBroadcastChannel() {\n        if (typeof BroadcastChannel === \"undefined\")\n            return;\n        // the purpose of this code is to orchestrate\n        // interactions with multiple tabs and windows\n        const channel = new BroadcastChannel(\"jacdac\");\n        const postConnectionState = () => {\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: CONNECTION_STATE,\n                transports: this._transports.map(tr => ({\n                    type: tr.type,\n                    connectionState: tr.connectionState,\n                })),\n            });\n        };\n        // update other windows with connection status\n        const unsubConnectionState = this.subscribe(CONNECTION_STATE, postConnectionState);\n        const handleVisibilityChange = () => {\n            // tell other windows, we are visible or not\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: \"visibilitychange\",\n                visibilityState: document.visibilityState,\n            });\n        };\n        const handleBroadcastMessage = async (msg) => {\n            const { data } = msg;\n            const { event, transports, visibilityState } = data;\n            switch (event) {\n                case \"visibilitychange\": {\n                    // automatically disconnect if another pane becomes live\n                    //console.debug(\n                    //   `broadcast ${id}: ${event} ${visibilityState}`\n                    //)\n                    if (visibilityState === \"visible\")\n                        await this.disconnect();\n                    else {\n                        // let other window disconnect\n                        await this.delay(2000);\n                        await this.connect(true);\n                    }\n                    break;\n                }\n                case CONNECTION_STATE: {\n                    //console.debug(`broadcast ${id}: ${event}`, transports)\n                    // if any other window is trying to connect, disconnect\n                    transports\n                        .filter(tr => tr.connectionState ===\n                        exports.ConnectionState.Connecting)\n                        .forEach(ctr => {\n                        this.transports\n                            .filter(tr => tr.type === ctr.type)\n                            .forEach(tr => tr.disconnect());\n                    });\n                }\n            }\n        };\n        channel.addEventListener(\"message\", handleBroadcastMessage, false);\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        this._unsubscribeBroadcastChannel = () => {\n            unsubConnectionState();\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            channel.removeEventListener(\"message\", handleBroadcastMessage);\n            channel.close();\n        };\n        // notify other pages\n        handleVisibilityChange();\n    }\n    /**\n     * Gets the list of transports registers with the bus\n     * @category Transports and Bridges\n     */\n    get transports() {\n        return this._transports.slice(0);\n    }\n    /**\n     * Adds a transport to the bus\n     * @category Transports and Bridges\n     */\n    addTransport(transport) {\n        if (this._transports.indexOf(transport) > -1)\n            return; // already added\n        this._transports.push(transport);\n        transport.bus = this;\n        transport.bus.on(CONNECTING, () => this.preConnect(transport));\n    }\n    /**\n     * Gets the list of bridges registered with the bus\n     * @category Transports and Bridges\n     */\n    get bridges() {\n        return this._bridges.slice(0);\n    }\n    /**\n     * Add a bridge to the bus and returns a callback to remove it.\n     * @param bridge\n     * @returns callback to remove bridge\n     * @category Transports and Bridges\n     * @internal\n     */\n    addBridge(bridge) {\n        if (this._bridges.indexOf(bridge) < 0) {\n            console.debug(`add bridge`, { bridge });\n            this._bridges.push(bridge);\n            this.emit(CHANGE);\n        }\n        return () => this.removeBridge(bridge);\n    }\n    removeBridge(bridge) {\n        const i = this._bridges.indexOf(bridge);\n        if (i > -1) {\n            console.debug(`remove bridge`, { bridge });\n            this._bridges.splice(i, 1);\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Do not send any packet on the bus\n     */\n    get passive() {\n        return this._passive;\n    }\n    set passive(value) {\n        if (value !== this._passive) {\n            this._passive = value;\n            this.emit(CHANGE);\n        }\n    }\n    preConnect(transport) {\n        //console.debug(`preconnect ${transport.type}`, { transport })\n        return Promise.all(this._transports\n            .filter(t => t !== transport)\n            .map(t => t.disconnect()));\n    }\n    /**\n     * Connects the bus going through the transports chronologically. Does nothing if already connected.\n     * @param background connection was triggered automatically\n     * @category Lifecycle\n     */\n    async connect(background) {\n        if (this.connected)\n            return;\n        for (const transport of this._transports) {\n            // start connection\n            await transport.connect(background);\n            // keep going if not connected\n            if (transport.connected)\n                break;\n        }\n        this.emit(CHANGE);\n    }\n    /**\n     * Disconnects the bus and any connected transport.\n     * @category Lifecycle\n     */\n    async disconnect() {\n        for (const transport of this._transports) {\n            await transport.disconnect();\n        }\n        this.emit(CHANGE);\n    }\n    /**\n     * Starts to process packets and updates the JDOM nodes\n     * @category Lifecycle\n     */\n    start() {\n        this.configureBroadcastChannel();\n        if (!this._announceInterval)\n            this._announceInterval = this.scheduler.setInterval(() => {\n                if (!this.passive)\n                    this.emit(SELF_ANNOUNCE);\n            }, 499);\n        this.backgroundRefreshRegisters = true;\n        if (!this._gcInterval)\n            this._gcInterval = this.scheduler.setInterval(() => this.gcDevices(), JD_DEVICE_DISCONNECTED_DELAY);\n    }\n    /**\n     * Stops processing packets\n     * @category Lifecycle\n     */\n    async stop() {\n        await this.disconnect();\n        if (this._unsubscribeBroadcastChannel) {\n            this._unsubscribeBroadcastChannel();\n            this._unsubscribeBroadcastChannel = undefined;\n        }\n        if (this._announceInterval) {\n            this.scheduler.clearInterval(this._announceInterval);\n            this._announceInterval = undefined;\n        }\n        this.safeBoot = false;\n        this.backgroundRefreshRegisters = false;\n        if (this._gcInterval) {\n            this.scheduler.clearInterval(this._gcInterval);\n            this._gcInterval = undefined;\n        }\n    }\n    /**\n     * Stops the bus and all transport connections.\n     * @category Lifecycle\n     */\n    async dispose() {\n        console.debug(`${this.id}: disposing.`);\n        await this.stop();\n        this._transports.forEach(transport => transport.dispose());\n    }\n    /**\n     * Indicates that the bus is sending commands keep devices in bootloader mode.\n     * This property is signaled by CHANGE.\n     * @category Lifecycle\n     */\n    get safeBoot() {\n        return !!this._safeBootInterval;\n    }\n    /**\n     * Turn on or off the safe boot mode where the bus keeps devices in bootloader mode.\n     * Triggers a CHANGE event.\n     * @category Lifecycle\n     */\n    set safeBoot(enabled) {\n        if (enabled && !this._safeBootInterval) {\n            this._safeBootInterval = this.scheduler.setInterval(() => {\n                // don't send message if any device is flashing\n                if (this._devices.some(d => d.flashing))\n                    return;\n                sendStayInBootloaderCommand(this);\n            }, 50);\n            this.emit(CHANGE);\n        }\n        else if (!enabled && this._safeBootInterval) {\n            this.scheduler.clearInterval(this._safeBootInterval);\n            this._safeBootInterval = undefined;\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Indicates if any of the transports is connected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get connected() {\n        return this._transports.some(t => t.connected);\n    }\n    /**\n     * Indicates if any of the transports is disconnected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get disconnected() {\n        return this._transports.every(t => t.disconnected);\n    }\n    /**\n     * Clears known devices and service providers (simulators). Optionally reset bus timestamp.\n     * @param timestamp\n     * @category Services\n     */\n    clear(timestamp = 0) {\n        var _a;\n        // clear hosts\n        if ((_a = this._serviceProviders) === null || _a === void 0 ? void 0 : _a.length) {\n            this._serviceProviders.forEach(host => (host.bus = undefined));\n            this._serviceProviders = [];\n        }\n        // clear devices\n        const devs = this._devices;\n        if (devs === null || devs === void 0 ? void 0 : devs.length) {\n            this._devices = [];\n            devs.forEach(dev => {\n                dev.disconnect();\n                this.emit(DEVICE_DISCONNECT, dev);\n                this.emit(DEVICE_CHANGE, dev);\n            });\n        }\n        this.resetTime(timestamp);\n    }\n    /**\n     * Gets a unique identifier for this node in the Jacdac DOM.\n     * @category JDOM\n     */\n    get id() {\n        return this.nodeKind;\n    }\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get name() {\n        return \"bus\";\n    }\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get friendlyName() {\n        return this.name;\n    }\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return this.name;\n    }\n    /**\n     * Returns the ``BUS_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind() {\n        return BUS_NODE_NAME;\n    }\n    /**\n     * Gets the default role manager service client, if any\n     * @category Services\n     */\n    get roleManager() {\n        return this._roleManagerClient;\n    }\n    /**\n     * Sets the default role manager service client\n     * @category Services\n     */\n    setRoleManagerService(service) {\n        var _a;\n        //console.log(`set role manager`, { service })\n        // clean if needed\n        if (this._roleManagerClient &&\n            this._roleManagerClient.service !== service) {\n            //console.debug(\"unmount role manager\")\n            this._roleManagerClient.unmount();\n            this._roleManagerClient = undefined;\n        }\n        // allocate new manager\n        if (service && service !== ((_a = this._roleManagerClient) === null || _a === void 0 ? void 0 : _a.service)) {\n            //console.debug(\"mount role manager\")\n            this._roleManagerClient = new RoleManagerClient(service);\n            this.emit(ROLE_MANAGER_CHANGE);\n            this.emit(CHANGE);\n            this._roleManagerClient.startRefreshRoles();\n        }\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        var _a, _b;\n        return `bus: ${((_a = this._devices) === null || _a === void 0 ? void 0 : _a.length) || 0} devices, ${((_b = this._transports) === null || _b === void 0 ? void 0 : _b.filter(tr => tr.connected).map(tr => tr.type).join(\", \")) || \"\"}`;\n    }\n    /**\n     * Gets a detailled description of the devices and services connected to the bus\n     * @returns\n     */\n    describe() {\n        return `\ntransport:\n${this._transports.map(tr => `  ${tr.type}: ${tr.connectionState}`).join(\"\\n\")}\n\n${this.devices({ ignoreInfrastructure: true })\n            .map(dev => {\n            var _a, _b;\n            return `device: \n  id: ${dev.shortId} (0x${dev.deviceId})\n  product: ${dev.productIdentifier\n                ? `${((_a = deviceSpecificationFromProductIdentifier(dev.productIdentifier)) === null || _a === void 0 ? void 0 : _a.id) || \"?\"} (0x${(_b = dev.productIdentifier) === null || _b === void 0 ? void 0 : _b.toString(16)})`\n                : \"\"}\n  firmware_version: ${dev.firmwareVersion || \"\"}\n  services:\n${dev\n                .services()\n                .slice(1)\n                .map(srv => {\n                var _a;\n                return [\n                    `    ${((_a = srv.specification) === null || _a === void 0 ? void 0 : _a.shortName) || srv.name} (0x${srv.serviceClass.toString(16)})`,\n                    ...srv\n                        .registers()\n                        .filter(reg => !!reg.data)\n                        .map(reg => {\n                        var _a;\n                        return `        ${((_a = reg.specification) === null || _a === void 0 ? void 0 : _a.kind) || \"reg\"} ${reg.name}: ${reg.humanValue} (${toHex(reg.data)})`;\n                    }),\n                    ...srv.events.map(ev => `        event ${ev.name}: ${ev.count}`),\n                ].join(\"\\n\");\n            })\n                .join(\"\\n\")}\n`;\n        })\n            .join(\"\\n\")}`;\n    }\n    /**\n     * Resolves a JDOM node from an identifier\n     * @param id node identifier\n     * @returns node if found, undefined otherwise\n     * @category JDOM\n     */\n    node(id) {\n        const resolve = () => {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const m = /^(?<type>bus|device|service|register|event|field)(:(?<dev>\\w+)(:(?<srv>\\w+)(:(?<reg>\\w+(:(?<idx>\\w+))?))?)?)?$/.exec(id);\n            if (!m)\n                return undefined;\n            const type = m.groups[\"type\"];\n            const dev = m.groups[\"dev\"];\n            const srv = parseInt(m.groups[\"srv\"], 16);\n            const reg = parseInt(m.groups[\"reg\"], 16);\n            const idx = parseInt(m.groups[\"idx\"], 16);\n            //console.log(type, this.device(dev), this.device(dev)?.service(srv), this.device(dev)?.service(srv)?.register(reg), idx)\n            switch (type) {\n                case BUS_NODE_NAME:\n                    return this;\n                case DEVICE_NODE_NAME:\n                    return this.device(dev, true);\n                case SERVICE_NODE_NAME:\n                    return (_a = this.device(dev, true)) === null || _a === void 0 ? void 0 : _a.service(srv);\n                case REGISTER_NODE_NAME:\n                    return (_c = (_b = this.device(dev, true)) === null || _b === void 0 ? void 0 : _b.service(srv)) === null || _c === void 0 ? void 0 : _c.register(reg);\n                case EVENT_NODE_NAME:\n                    return (_e = (_d = this.device(dev, true)) === null || _d === void 0 ? void 0 : _d.service(srv)) === null || _e === void 0 ? void 0 : _e.event(reg);\n                case FIELD_NODE_NAME:\n                    return (_h = (_g = (_f = this.device(dev, true)) === null || _f === void 0 ? void 0 : _f.service(srv)) === null || _g === void 0 ? void 0 : _g.register(reg)) === null || _h === void 0 ? void 0 : _h.fields[idx];\n            }\n            console.info(`node ${id} not found`);\n            return undefined;\n        };\n        const node = resolve();\n        return node;\n    }\n    resetTime(delta = 0) {\n        this.scheduler.resetTime(delta);\n        this.emit(CHANGE);\n    }\n    /**\n     * Gets the current bus-relavite time in milliseconds\n     * @category Scheduling\n     */\n    get timestamp() {\n        return this.scheduler.timestamp;\n    }\n    /**\n     * Indicates if the bus should force all sensors to stream\n     */\n    get streaming() {\n        return this._streaming;\n    }\n    /**\n     * Sets automatic streaming on and off\n     */\n    set streaming(value) {\n        this._streaming = value;\n    }\n    /**\n     * Creates a promise that awaits for the given duration using the bus scheduler\n     * @category Scheduling\n     */\n    delay(millis, value) {\n        return new Promise(resolve => this.scheduler.setTimeout(() => resolve(value), millis));\n    }\n    /**\n     * Gets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    get minLoggerPriority() {\n        return this._minLoggerPriority;\n    }\n    /**\n     * Sets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    set minLoggerPriority(priority) {\n        if (priority !== this._minLoggerPriority) {\n            this._minLoggerPriority = priority;\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Returns undefined\n     * @category JDOM\n     */\n    get parent() {\n        return undefined;\n    }\n    async handleRealTimeClockSync(device) {\n        // tell time to the RTC clocks\n        if (device.hasService(SRV_REAL_TIME_CLOCK))\n            await RealTimeClockServer.syncTime(this);\n    }\n    handleRoleManager() {\n        if (this.roleManager)\n            return;\n        const service = this.services({ serviceClass: SRV_ROLE_MANAGER })[0];\n        this.setRoleManagerService(service);\n    }\n    /**\n     * Sends a packet to the bus\n     * @param packet packet to send\n     * @internal\n     */\n    async sendPacketAsync(packet) {\n        packet.timestamp = this.timestamp;\n        if (Flags.trace)\n            packet.meta[META_TRACE] = stack();\n        // special debug mode to avoid dashboard interfere with packets\n        // will generate fails for acks\n        if (this.passive)\n            return;\n        this.emit(PACKET_SEND, packet);\n        await Promise.all(this._transports.map(transport => transport.sendPacketAsync(packet)));\n    }\n    /**\n     * Gets the list of known firmware blobs\n     * @category Firmware\n     */\n    get firmwareBlobs() {\n        return this._firmwareBlobs;\n    }\n    /**\n     * Sets the list of known firmware blobs\n     * @category Firmware\n     */\n    set firmwareBlobs(blobs) {\n        this._firmwareBlobs = blobs;\n        this.emit(FIRMWARE_BLOBS_CHANGE);\n        this.emit(CHANGE);\n    }\n    /**\n     * Gets the current list of known devices on the bus\n     * @category Services\n     */\n    devices(options) {\n        if ((options === null || options === void 0 ? void 0 : options.serviceName) && (options === null || options === void 0 ? void 0 : options.serviceClass) > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\");\n        const sc = (options === null || options === void 0 ? void 0 : options.serviceClass) > -1\n            ? options === null || options === void 0 ? void 0 : options.serviceClass\n            : serviceClass(options === null || options === void 0 ? void 0 : options.serviceName);\n        let r = this._devices.slice(0);\n        if (sc > -1)\n            r = r.filter(s => s.hasService(sc));\n        if (options === null || options === void 0 ? void 0 : options.ignoreInfrastructure)\n            r = r.filter(s => s.deviceId !== this.selfDeviceId &&\n                s.serviceClasses.indexOf(SRV_INFRASTRUCTURE) < 0);\n        if (options === null || options === void 0 ? void 0 : options.announced)\n            r = r.filter(s => s.announced);\n        if (options === null || options === void 0 ? void 0 : options.ignoreSimulators)\n            r = r.filter(r => !this.findServiceProvider(r.deviceId));\n        if (options === null || options === void 0 ? void 0 : options.productIdentifier)\n            r = r.filter(r => !!r.productIdentifier);\n        if (options === null || options === void 0 ? void 0 : options.physical)\n            r = r.filter(r => !!r.isPhysical);\n        return r;\n    }\n    /**\n     * Gets the current list of service providers on the bus\n     * @category Services\n     */\n    serviceProviders() {\n        return this._serviceProviders.slice(0);\n    }\n    /**\n     * Get a service providers for a given device\n     * @param deviceId\n     * @category Services\n     */\n    findServiceProvider(deviceId) {\n        return this._serviceProviders.find(d => d.deviceId === deviceId);\n    }\n    /**\n     * Adds the service provider to the bus and returns the associated devoce\n     * @param provider instance to add\n     * @category Services\n     */\n    addServiceProvider(provider) {\n        if (provider && this._serviceProviders.indexOf(provider) < 0) {\n            this._serviceProviders.push(provider);\n            provider.bus = this;\n            this.emit(SERVICE_PROVIDER_ADDED, provider);\n            this.emit(CHANGE);\n        }\n        return this.device(provider.deviceId);\n    }\n    /**\n     * Removes the service provider from the bus\n     * @param provider instance to remove\n     * @category Services\n     */\n    removeServiceProvider(provider) {\n        if (!provider)\n            return;\n        const i = this._serviceProviders.indexOf(provider);\n        if (i > -1) {\n            this.removeDevice(provider.deviceId);\n            // remove host\n            this._serviceProviders.splice(i, 1);\n            provider.bus = undefined;\n            this.emit(SERVICE_PROVIDER_REMOVED, provider);\n            // removed host\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Remove a device client by identifier\n     * @param deviceId\n     * @category Devices\n     */\n    removeDevice(deviceId) {\n        // remove device as well\n        const devi = this._devices.findIndex(d => d.deviceId === deviceId);\n        if (devi > -1) {\n            const dev = this._devices[devi];\n            this._devices.splice(devi, 1);\n            dev.disconnect();\n            this.emit(DEVICE_DISCONNECT, dev);\n            this.emit(DEVICE_CHANGE, dev);\n        }\n    }\n    /**\n     * Gets the list of devices\n     * @category JDOM\n     */\n    get children() {\n        return this.devices();\n    }\n    /**\n     * Gets the current list of services from all the known devices on the bus\n     * @category Services\n     */\n    services(options) {\n        return arrayConcatMany(this.devices(options).map(d => d.services(options)));\n    }\n    /**\n     * Gets a device on the bus\n     * @param id device identifier to query\n     * @param skipCreate do not create new device if missing\n     * @param pkt packet that generated this device query\n     * @category Services\n     */\n    device(id, skipCreate, pkt) {\n        if (id === \"0000000000000000\" && !skipCreate) {\n            console.warn(\"jadac: trying to access device 0000000000000000\");\n            return undefined;\n        }\n        let d = this._devices.find(d => d.deviceId == id);\n        if (!d && !skipCreate) {\n            if (this.devicesFrozen) {\n                console.debug(`info`, `devices frozen, dropping ${id}`);\n                return undefined;\n            }\n            d = new JDDevice(this, id, pkt);\n            this._devices.push(d);\n            console.debug(`${id === this.selfDeviceId ? \"self\" : \"new\"} device ${d.shortId} (${id})`);\n            // stable sort\n            this._devices.sort((l, r) => strcmp(l.deviceId, r.deviceId));\n            this.emit(DEVICE_CONNECT, d);\n            this.emit(DEVICE_CHANGE, d);\n            this.emit(CHANGE);\n        }\n        return d;\n    }\n    /**\n     * Push a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    pushDeviceFrozen() {\n        this._gcDevicesFrozen++;\n    }\n    /**\n     * Pop a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    popDeviceFrozen() {\n        this._gcDevicesFrozen = Math.max(0, this._gcDevicesFrozen - 1);\n    }\n    /**\n     * Indicates if the device list if currently frozen.\n     * @category Lifecycle\n     */\n    get devicesFrozen() {\n        return this._gcDevicesFrozen > 0;\n    }\n    gcDevices() {\n        this.emit(DEVICE_CLEAN);\n        if (this.devicesFrozen) {\n            console.debug(\"devices frozen\");\n            return;\n        }\n        const LOST_DELAY = JD_DEVICE_LOST_DELAY;\n        const DISCONNECTED_DELAY = JD_DEVICE_DISCONNECTED_DELAY;\n        const lostCutoff = this.timestamp - LOST_DELAY;\n        const disconnectedCutoff = this.timestamp - DISCONNECTED_DELAY;\n        // cycle through events and disconnect devices that are long gone\n        for (let i = 0; i < this._devices.length; ++i) {\n            const dev = this._devices[i];\n            if (dev.lastSeen < disconnectedCutoff) {\n                this._devices.splice(i, 1);\n                i--;\n                this.disconnectDevice(dev);\n            }\n            else if (dev.lastSeen < lostCutoff) {\n                dev.lost = true;\n            }\n        }\n    }\n    disconnectDevice(dev) {\n        dev.disconnect();\n        this.emit(DEVICE_DISCONNECT, dev);\n        this.emit(DEVICE_CHANGE, dev);\n        this.emit(CHANGE);\n    }\n    /**\n     * Ingests and process a packet received from the bus.\n     * @param pkt a jacdac packet\n     * @internal\n     */\n    processPacket(pkt) {\n        if (!pkt.isMultiCommand && !pkt.device) {\n            pkt.device = this.device(pkt.deviceIdentifier, false, pkt);\n            // the device id is unknown dropping\n            if (!pkt.device) {\n                if (Flags.diagnostics)\n                    console.debug(`unknown pkt device ${pkt.deviceIdentifier}`, {\n                        pkt,\n                    });\n                return;\n            }\n        }\n        this.emit(PACKET_PRE_PROCESS, pkt);\n        let isAnnounce = false;\n        if (!pkt.device) ;\n        else if (pkt.isCommand) {\n            if (pkt.deviceIdentifier == this.selfDeviceId) {\n                if (pkt.requiresAck) {\n                    const ack = Packet.onlyHeader(pkt.crc);\n                    ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK;\n                    ack.deviceIdentifier = this.selfDeviceId;\n                    ack.sendReportAsync(this.selfDevice);\n                }\n            }\n            pkt.device.processPacket(pkt);\n        }\n        else {\n            pkt.device.lastSeen = pkt.timestamp;\n            if (pkt.serviceIndex == JD_SERVICE_INDEX_CTRL) {\n                if (pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n                    isAnnounce = true;\n                    pkt.device.processAnnouncement(pkt);\n                }\n                else if (pkt.isMultiCommand &&\n                    pkt.serviceCommand == (CMD_SET_REG | exports.ControlReg.ResetIn)) {\n                    // someone else is doing reset in\n                    this._lastResetInTime = this.timestamp;\n                }\n            }\n            pkt.device.processPacket(pkt);\n        }\n        this.emit(PACKET_PROCESS, pkt);\n        // don't spam with duplicate advertisement events\n        if (isAnnounce) {\n            this.emit(PACKET_RECEIVE_ANNOUNCE, pkt);\n        }\n        else {\n            this.emit(PACKET_RECEIVE, pkt);\n            if (pkt.isEvent)\n                this.emit(PACKET_EVENT, pkt);\n            else if (pkt.isReport)\n                this.emit(PACKET_REPORT, pkt);\n        }\n    }\n    /**\n     * Gets the virtual device created by this bus to handle pipes.\n     * @category Services\n     */\n    get selfDevice() {\n        return this.device(this.selfDeviceId);\n    }\n    handleSelfAnnounce() {\n        return Promise.all([\n            this.sendAnnounce(),\n            this.sendResetIn(),\n            this.sendPingLoggers(),\n        ]).then(() => { });\n    }\n    async sendAnnounce() {\n        // we do not support any services (at least yet)\n        if (this._restartCounter < 0xf)\n            this._restartCounter++;\n        const pkt = Packet.jdpacked(CMD_ADVERTISEMENT_DATA, \"u32 r: u32\", [this._restartCounter | 0x100, [[SRV_INFRASTRUCTURE]]]);\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n        pkt.deviceIdentifier = this.selfDeviceId;\n        await pkt.sendReportAsync(this.selfDevice);\n    }\n    get lastResetInTime() {\n        return this._lastResetInTime;\n    }\n    async sendResetIn() {\n        // don't send reset if already received\n        // or no devices\n        if (!this.devices({ ignoreInfrastructure: true }).length)\n            return;\n        this._lastResetInTime = this.timestamp;\n        const rst = Packet.jdpacked(CMD_SET_REG | exports.ControlReg.ResetIn, \"u32\", [RESET_IN_TIME_US]);\n        await rst.sendAsMultiCommandAsync(this, SRV_CONTROL);\n    }\n    async sendStopStreaming() {\n        console.debug(`bus: stop streaming`);\n        const readingRegisters = this.services({\n            announced: true,\n            ignoreInfrastructure: true,\n        })\n            .map(srv => srv.readingRegister &&\n            srv.register(exports.SensorReg.StreamingSamples))\n            .filter(reg => !!reg);\n        await Promise.all(readingRegisters.map(reg => reg.sendSetPackedAsync([0])));\n    }\n    async sendPingLoggers() {\n        if (this._minLoggerPriority < exports.LoggerPriority.Silent &&\n            this.timestamp - this._lastPingLoggerTime > PING_LOGGERS_POLL &&\n            this.devices({\n                ignoreInfrastructure: true,\n                serviceClass: SRV_LOGGER,\n            }).length > 0) {\n            this._lastPingLoggerTime = this.timestamp;\n            const pkt = Packet.jdpacked(CMD_SET_REG | exports.LoggerReg.MinPriority, \"u8\", [this._minLoggerPriority]);\n            await pkt.sendAsMultiCommandAsync(this, SRV_LOGGER);\n        }\n    }\n    /**\n     * Indicates if registers are automatically refreshed in the background.\n     * @category Services\n     */\n    get backgroundRefreshRegisters() {\n        return !!this._refreshRegistersInterval;\n    }\n    /**\n     * Enables or disables automatically refreshing registers in the background.\n     * @param enabled true to automatically refresh registers\n     * @category Services\n     */\n    set backgroundRefreshRegisters(enabled) {\n        if (!!enabled !== this.backgroundRefreshRegisters) {\n            if (!enabled) {\n                if (this._refreshRegistersInterval)\n                    this.scheduler.clearInterval(this._refreshRegistersInterval);\n                this._refreshRegistersInterval = undefined;\n            }\n            else {\n                this._refreshRegistersInterval = this.scheduler.setInterval(this.handleRefreshRegisters.bind(this), REFRESH_REGISTER_POLL);\n            }\n        }\n    }\n    /**\n     * Cycles through all known registers and refreshes the once that have REPORT_UPDATE registered\n     */\n    handleRefreshRegisters() {\n        const devices = this._devices.filter(device => device.announced && !device.lost); // don't try lost devices or devices flashing\n        // skip if no devices or any device is currently flashing\n        if (!devices.length || devices.some(dev => dev.flashing))\n            return; // no devices, we're done\n        // collect registers\n        const registers = arrayConcatMany(devices.map(device => arrayConcatMany(device.services({ specification: true }).map(service => service\n            .registers()\n            // someone is listening for reports\n            .filter(reg => \n        // automatic streaming\n        (this._streaming &&\n            reg.code === exports.SystemReg.Reading) ||\n            // listening for updates\n            reg.listenerCount(REPORT_RECEIVE) > 0 ||\n            reg.listenerCount(REPORT_UPDATE) > 0)\n            // ask if data is missing or non-const/status code\n            .filter(reg => !reg.data ||\n            !(isConstRegister(reg.specification) ||\n                reg.code === exports.SystemReg.StatusCode ||\n                reg.code === exports.SystemReg.ReadingError))\n            // stop asking optional registers\n            .filter(reg => {\n            var _a;\n            return !((_a = reg.specification) === null || _a === void 0 ? void 0 : _a.optional) ||\n                reg.lastGetAttempts <\n                    REGISTER_OPTIONAL_POLL_COUNT;\n        })))));\n        // refresh values\n        for (const register of registers) {\n            const { service, specification } = register;\n            const noDataYet = !register.data;\n            const age = this.timestamp - register.lastGetTimestamp;\n            const backoff = register.lastGetAttempts;\n            // streaming register? use streaming sample\n            if (isReading(specification) && isSensor(service.specification)) {\n                // compute refresh interval\n                const intervalRegister = service.register(exports.SensorReg.StreamingInterval);\n                let interval = intervalRegister === null || intervalRegister === void 0 ? void 0 : intervalRegister.uintValue;\n                // no interval data\n                if (interval === undefined) {\n                    // use preferred interval data or default to 50\n                    const preferredIntervalRegister = service.register(exports.SensorReg.StreamingPreferredInterval);\n                    const preferredInterval = preferredIntervalRegister === null || preferredIntervalRegister === void 0 ? void 0 : preferredIntervalRegister.uintValue;\n                    interval = preferredInterval;\n                    // if no interval, poll interval value\n                    if (interval === undefined) {\n                        // all async\n                        if (intervalRegister &&\n                            !intervalRegister.data &&\n                            this.timestamp - intervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL)\n                            intervalRegister.sendGetAsync();\n                        if (preferredIntervalRegister &&\n                            !preferredIntervalRegister.data &&\n                            this.timestamp -\n                                preferredIntervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL)\n                            preferredIntervalRegister.sendGetAsync();\n                    }\n                }\n                // still no interval data use from spec or default\n                if (interval === undefined)\n                    interval =\n                        specification.preferredInterval ||\n                            STREAMING_DEFAULT_INTERVAL;\n                const streamingSamplesRegister = service.register(exports.SensorReg.StreamingSamples);\n                const streamingSamplesAge = this.timestamp - streamingSamplesRegister.lastSetTimestamp;\n                // need to figure out when we asked for streaming\n                const midSamplesAge = (interval * 0xff) >> 1;\n                // compute if half aged\n                if (streamingSamplesAge > midSamplesAge) {\n                    //console.debug({ samplesAge, midSamplesAge, interval })\n                    streamingSamplesRegister.sendSetPackedAsync([0xff]);\n                }\n                // first query, get data asap once per second\n                if (noDataYet && age > 1000)\n                    register.sendGetAsync();\n            } // regular register, ping if data is old\n            else {\n                const volatile = !!(specification === null || specification === void 0 ? void 0 : specification.volatile);\n                const expiration = volatile\n                    ? Math.min(REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL, REGISTER_POLL_REPORT_VOLATILE_INTERVAL *\n                        (1 << backoff))\n                    : Math.min(REGISTER_POLL_REPORT_MAX_INTERVAL, (noDataYet\n                        ? REGISTER_POLL_FIRST_REPORT_INTERVAL\n                        : REGISTER_POLL_REPORT_INTERVAL) *\n                        (1 << backoff));\n                if (age > expiration) {\n                    //console.log(`bus: poll ${register.id}`, register, age, backoff, expiration)\n                    register.sendGetAsync();\n                }\n            }\n        }\n        // apply streaming samples to service provider\n        this._serviceProviders.map(host => host.emit(REFRESH));\n    }\n    /**\n     * Runs a promise with a timeout. Returns undefined if timeout happens before of disconnection.\n     * @param timeout duration to wait before declaring timeout\n     * @param promise promise to wrap\n     * @category Lifecycle\n     */\n    withTimeout(timeout, promise) {\n        return new Promise((resolve, reject) => {\n            let done = false;\n            const tid = setTimeout(() => {\n                if (!done) {\n                    done = true;\n                    if (!this._transports.some(tr => tr.connected)) {\n                        // the bus got disconnected so all operation will\n                        // time out going further\n                        this.emit(TIMEOUT_DISCONNECT);\n                        resolve(undefined);\n                    }\n                    else {\n                        // the command timed out\n                        this.emit(TIMEOUT);\n                        this.emit(ERROR, \"Timeout (\" + timeout + \"ms)\");\n                        resolve(undefined);\n                    }\n                }\n            }, timeout);\n            promise.then(v => {\n                if (!done) {\n                    done = true;\n                    clearTimeout(tid);\n                    resolve(v);\n                }\n                else {\n                    // we already gave up\n                    this.emit(LATE);\n                }\n            }, e => {\n                if (!done) {\n                    done = true;\n                    clearTimeout(tid);\n                    reject(e);\n                }\n            });\n        });\n    }\n}\n\n/**\n * A player for packet traces.\n * @category Trace\n */\nclass TracePlayer extends JDClient {\n    constructor(bus, speed = 1) {\n        super();\n        this.bus = bus;\n        this.speed = speed;\n        this._busStartTimestamp = 0;\n        this._index = 0;\n        this._lastProgressEmit = 0;\n        this.tick = this.tick.bind(this);\n        // always stop when unmounting\n        this.mount(() => this.stop());\n    }\n    get running() {\n        return !!this._interval;\n    }\n    get trace() {\n        return this._trace;\n    }\n    set trace(t) {\n        if (t !== this._trace) {\n            this.stop();\n            this._trace = t;\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Gets the adjusted timestamp\n     */\n    get elapsed() {\n        return (this.bus.timestamp - this._busStartTimestamp) * this.speed;\n    }\n    get progress() {\n        if (!this.trace)\n            return 0;\n        return Math.max(0, Math.min(1, this.elapsed / this.trace.duration));\n    }\n    get length() {\n        var _a;\n        return ((_a = this.trace) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    }\n    start() {\n        if (this._interval || !this._trace)\n            return; // already running\n        // this is the reference start time of this run\n        this._busStartTimestamp = this.bus.timestamp;\n        this._index = 0;\n        this._interval = this.bus.scheduler.setInterval(this.tick, 50);\n        this.emit(CHANGE);\n        this.emitProgress(true);\n    }\n    stop() {\n        if (this._interval) {\n            this.bus.scheduler.clearInterval(this._interval);\n            this._interval = undefined;\n            this.emitProgress(true);\n            this.emit(CHANGE);\n        }\n    }\n    tick() {\n        var _a;\n        if (!this._trace)\n            return;\n        const busElapsed = this.elapsed;\n        const packets = this.trace.packets;\n        const packetStart = ((_a = packets[0]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0;\n        while (this._index < packets.length) {\n            const packet = packets[this._index];\n            const packetElapsed = packet.timestamp - packetStart;\n            if (packetElapsed > busElapsed)\n                break; // wait to catch up\n            // clone packet and send\n            const pkt = packet.clone();\n            pkt.replay = true;\n            pkt.timestamp = this._busStartTimestamp + packetElapsed;\n            this.bus.processPacket(pkt);\n            this._index++;\n        }\n        //console.log(`replay ${this._index} ${nframes} frames, ${npackets} packets`)\n        this.emitProgress();\n        if (this._index >= packets.length)\n            this.stop();\n    }\n    emitProgress(force) {\n        if (force || this.bus.timestamp - this._lastProgressEmit > 250) {\n            this.emit(PROGRESS, this.progress);\n            this._lastProgressEmit = this.bus.timestamp;\n        }\n    }\n}\n\n/**\n * Parse a trace text file\n * @param contents\n * @returns\n * @category Trace\n */\nfunction parseTrace(contents) {\n    const description = [];\n    const packets = [];\n    contents === null || contents === void 0 ? void 0 : contents.split(/\\r?\\n/).forEach(ln => {\n        // parse data\n        const m = /^(\\d+.?\\d*)\\s+([a-f0-9]{12,})/i.exec(ln);\n        if (!m) {\n            // might be a stack trace\n            if (/^\\s+at\\s/.test(ln)) {\n                const lastPacket = packets[packets.length - 1];\n                if (lastPacket) {\n                    let trace = lastPacket.meta[META_TRACE] || \"\";\n                    trace += ln + \"\\n\";\n                    lastPacket.meta[META_TRACE] = trace;\n                }\n            }\n            else {\n                // probably junk data\n                if (packets.length == 0)\n                    description.push(ln);\n            }\n            return;\n        }\n        const timestamp = parseInt(m[1]);\n        const data = fromHex(m[2]);\n        // add to array\n        packets.push(Packet.fromBinary(data, timestamp));\n    });\n    if (packets.length)\n        return new Trace(packets, {\n            description: description.join(\"\\n\").trim(),\n        });\n    else\n        return undefined;\n}\n/**\n * Parses a logic analyzer log into a trace\n * @param logcontents\n * @returns\n * @category Trace\n */\nfunction parseLogicLog(logcontents) {\n    if (!logcontents)\n        return undefined;\n    const res = [];\n    let frameBytes = [];\n    let lastTime = 0;\n    for (const ln of logcontents.split(/\\r?\\n/)) {\n        let m = /^JD (\\d+) ([0-9a-f]+)/i.exec(ln);\n        if (m) {\n            res.push({\n                timestamp: parseInt(m[1]),\n                data: fromHex(m[2]),\n            });\n            continue;\n        }\n        /** Windows, logic 1.*\nTime [s],Value,Parity Error,Framing Error\n0.042909760000000,0x00,,Error\n0.042980320000000,0xD4,,\n0.042990240000000,0x81,,\n0.043000160000000,0x10,,\n0.043010240000000,0x00,,\n0.043020160000000,0xE8,,\n0.043030240000000,0xDF,,\n0.043040160000000,0xCB,,\n0.043050240000000,0xD1,,\n0.043060160000000,0x97,,\n0.043070240000000,0x34,,\n0.043080160000000,0x37,,\n0.043090240000000,0x48,,\n0.043100160000000,0x0C,,\n0.043110080000000,0x00,,\n0.043120160000000,0x00,,\n0.043130080000000,0x00,,\n0.043140160000000,0x00,,\n0.043150080000000,0x00,,\n0.043160160000000,0x00,,\n0.043170080000000,0x00,,\n0.043180160000000,0xCA,,\n0.043190080000000,0x1F,,\n0.043200160000000,0xDC,,\n0.043210080000000,0x12,,\n0.043220160000000,0x46,,\n0.043230080000000,0x47,,\n0.043240160000000,0x27,,\n0.043250080000000,0x1F,,\n0.043264800000000,0x00,,Error\n0.063968960000000,0x00,,Error\n         */\n        m = /^([\\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(ln);\n        if (!m)\n            continue;\n        const tm = parseFloat(m[1]);\n        if (lastTime && tm - lastTime > 0.1) {\n            res.push({\n                timestamp: lastTime * 1000,\n                data: new Uint8Array(frameBytes),\n                info: \"timeout\",\n            });\n            frameBytes = [];\n            lastTime = 0;\n        }\n        lastTime = tm;\n        if (/(framing error|Error)/.test(ln)) {\n            if (frameBytes.length > 0)\n                res.push({\n                    timestamp: lastTime * 1000,\n                    data: new Uint8Array(frameBytes),\n                });\n            frameBytes = [];\n            lastTime = 0;\n        }\n        else {\n            frameBytes.push(parseInt(m[2]));\n        }\n    }\n    return res;\n}\n/**\n * Replays a parsed logic log\n * @param bus\n * @param frames\n * @param speed\n * @category Trace\n */\nfunction replayLogicLog(bus, frames, speed) {\n    const packets = arrayConcatMany(frames.map(frame => Packet.fromFrame(frame.data, frame.timestamp)));\n    const player = new TracePlayer(bus, speed);\n    player.trace = new Trace(packets);\n    bus.clear(packets[0].timestamp);\n    player.start();\n}\n\n/**\n * @internal\n */\nasync function packetSpeedTest(dev) {\n    const pingCmd = CMD_GET_REG | exports.ControlReg.ProductIdentifier;\n    dev.on(PACKET_REPORT, onPacket);\n    const t0 = Date.now();\n    let lastSend = Date.now();\n    let numpkt = 0;\n    let numrecv = 0;\n    let done = false;\n    await ask();\n    while (numpkt < 100) {\n        await delay(50);\n        const now = Date.now();\n        if (now - t0 > 3000)\n            break;\n        if (now - lastSend > 100) {\n            await ask();\n        }\n    }\n    done = true;\n    await delay(250);\n    dev.off(PACKET_REPORT, onPacket);\n    const ms = Date.now() - t0;\n    const pktsPerSecond = numpkt / (ms / 1000);\n    const dropRate = (100 * (numpkt - numrecv)) / numpkt;\n    return {\n        msg: `${pktsPerSecond.toFixed(1)} pkts/s; ${dropRate.toFixed(2)}% dropped`,\n        pktsPerSecond,\n        dropRate,\n    };\n    async function ask() {\n        lastSend = Date.now();\n        numpkt++;\n        await dev.sendCtrlCommand(pingCmd);\n    }\n    async function onPacket(p) {\n        if (p.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            p.serviceCommand == pingCmd) {\n            numrecv++;\n            if (!done)\n                await ask();\n        }\n    }\n}\n\n/**\n * @internal\n */\nfunction packArguments(info, args) {\n    let repeatIdx = -1;\n    let numReps = 0;\n    let argIdx = 0;\n    let dst = 0;\n    const buf = new Uint8Array(256);\n    for (let i = 0; i < info.fields.length; ++argIdx, ++i) {\n        if (argIdx >= args.length && numReps > 0)\n            break;\n        const arg0 = argIdx < args.length ? args[argIdx] : 0;\n        const fld = info.fields[i];\n        if (repeatIdx == -1 && fld.startRepeats)\n            repeatIdx = i;\n        const arg1 = fld.type == \"string0\" && typeof arg0 == \"string\"\n            ? arg0 + \"\\u0000\"\n            : arg0;\n        const arg = typeof arg1 == \"boolean\"\n            ? arg1\n                ? 1\n                : 0\n            : typeof arg1 == \"string\"\n                ? stringToUint8Array(toUTF8(arg1))\n                : arg1;\n        if (typeof arg == \"number\") {\n            const intVal = scaleFloatToInt(arg, fld);\n            if (fld.storage == 0)\n                throw new Error(`expecting ${fld.type} got number`);\n            const fmt = numberFormatFromStorageType(fld.storage);\n            setNumber(buf, fmt, dst, clampToStorage(intVal, fld.storage));\n            dst += sizeOfNumberFormat(fmt);\n        }\n        else {\n            let size = Math.abs(fld.storage);\n            if (typeof arg1 == \"string\") {\n                if (size == 0)\n                    size = arg.length;\n                const argCut = arg.slice(0, size);\n                buf.set(argCut, dst);\n                dst += size;\n            }\n            else if (size == 0 || size == arg.length) {\n                buf.set(arg, dst);\n                dst += arg.length;\n            }\n            else {\n                throw new Error(`expecting ${Math.abs(fld.storage)} bytes; got ${arg.length}`);\n            }\n        }\n        if (dst >= JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw new Error(`jacdac packet length too large, ${dst} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`);\n        if (repeatIdx != -1 && i + 1 >= info.fields.length) {\n            i = repeatIdx - 1;\n            numReps++;\n        }\n    }\n    const cmd = isRegister(info)\n        ? info.identifier | CMD_SET_REG\n        : info.identifier;\n    const pkt = Packet.from(cmd, buf.slice(0, dst));\n    if (info.kind != \"report\")\n        pkt.isCommand = true;\n    return pkt;\n}\n\n/**\n * Given a filter text, compiles packet filter\n * @param bus\n * @param text\n * @returns\n * @category Trace\n */\nfunction parsePacketFilter(bus, text) {\n    if (!text) {\n        return {\n            source: text,\n            props: {\n                grouping: true,\n            },\n            filter: () => true,\n        };\n    }\n    const flags = new Set();\n    const serviceClasses = new Set();\n    const pkts = new Set();\n    const productIdentifiers = new Set();\n    let repeatedAnnounce = undefined;\n    let announce = undefined;\n    let resetIn = undefined;\n    let minPriority = undefined;\n    let regGet = undefined;\n    let regSet = undefined;\n    let requiresAck = undefined;\n    let log = undefined;\n    let before = undefined;\n    let after = undefined;\n    const devices = {};\n    let grouping = true;\n    let pipes = undefined;\n    let port = undefined;\n    let collapseAck = true;\n    let collapsePipes = true;\n    let collapseGets = true;\n    let errors = undefined;\n    let selfDevice = undefined;\n    text.split(/\\s+/g).forEach(part => {\n        var _a;\n        const [, prefix, , value] = /([a-z\\-_]+)([:=]([^\\s]+))?/.exec(part) || [];\n        switch (prefix || \"\") {\n            case \"kind\":\n            case \"k\":\n                if (!value)\n                    break;\n                flags.add(value.toLowerCase());\n                break;\n            case \"service\":\n            case \"srv\": {\n                if (!value)\n                    break;\n                const service = serviceSpecificationFromName(value);\n                const serviceClass = (service === null || service === void 0 ? void 0 : service.classIdentifier) || parseInt(value, 16);\n                if (serviceClass !== undefined && !isNaN(serviceClass))\n                    serviceClasses.add(serviceClass);\n                break;\n            }\n            case \"announce\":\n            case \"a\":\n                announce = parseBoolean(value);\n                break;\n            case \"repeated-announce\":\n            case \"ra\":\n                repeatedAnnounce = parseBoolean(value);\n                break;\n            case \"self\":\n                selfDevice = parseBoolean(value);\n                break;\n            case \"reset-in\":\n            case \"ri\":\n            case \"resetin\":\n                resetIn = parseBoolean(value);\n                break;\n            case \"errors\":\n                errors = parseBoolean(value);\n                break;\n            case \"min-priority\":\n            case \"minpri\":\n            case \"minpriority\":\n            case \"mi\":\n                minPriority = parseBoolean(value);\n                break;\n            case \"requires-ack\":\n            case \"ack\":\n                requiresAck = parseBoolean(value);\n                break;\n            case \"collapse-ack\":\n                collapseAck = parseBoolean(value);\n                break;\n            case \"device\":\n            case \"dev\":\n            case \"to\":\n            case \"from\": {\n                if (!value)\n                    break;\n                // resolve device by name\n                const deviceId = (_a = bus\n                    .devices()\n                    .find(d => d.shortId === value || d.name === value)) === null || _a === void 0 ? void 0 : _a.deviceId;\n                if (deviceId) {\n                    const data = devices[deviceId] ||\n                        (devices[deviceId] = { from: false, to: false });\n                    if (prefix === \"from\")\n                        data.from = true;\n                    else if (prefix === \"to\")\n                        data.to = true;\n                }\n                break;\n            }\n            case \"pid\":\n            case \"product-identifier\": {\n                if (!value)\n                    return;\n                // find register\n                const pid = parseInt(value.replace(/^0?x/, \"\"), 16);\n                if (!isNaN(pid))\n                    productIdentifiers.add(pid);\n                break;\n            }\n            case \"pkt\":\n            case \"reg\":\n            case \"register\":\n            case \"cmd\":\n            case \"command\":\n            case \"ev\":\n            case \"event\": {\n                if (!value)\n                    return;\n                // find register\n                const id = parseInt(value.replace(/^0?x/, \"\"), 16);\n                if (!isNaN(id))\n                    pkts.add(id.toString(16));\n                // support name\n                pkts.add(value);\n                break;\n            }\n            case \"reg-get\":\n            case \"get\":\n                regGet = parseBoolean(value);\n                break;\n            case \"reg-set\":\n            case \"set\":\n                regSet = parseBoolean(value);\n                break;\n            case \"log\":\n                log = parseBoolean(value);\n                break;\n            case \"before\":\n                before = parseTimestamp(value);\n                break;\n            case \"after\":\n                after = parseTimestamp(value);\n                break;\n            case \"grouping\":\n                grouping = parseBoolean(value);\n                break;\n            case \"pipes\":\n                pipes = parseBoolean(value);\n                break;\n            case \"collapse-pipe\":\n            case \"collapse-pipes\":\n                collapsePipes = parseBoolean(value);\n                break;\n            case \"collapse-get\":\n            case \"collapse-gets\":\n                collapseGets = parseBoolean(value);\n                break;\n            case \"port\":\n                port = parseInt(value);\n                break;\n        }\n    });\n    const props = {\n        announce,\n        repeatedAnnounce,\n        resetIn,\n        minPriority,\n        requiresAck,\n        collapseAck,\n        log,\n        productIdentifiers: !!productIdentifiers.size && Array.from(productIdentifiers.keys()),\n        flags: !!flags.size && Array.from(flags.keys()),\n        regGet,\n        regSet,\n        devices,\n        selfDevice,\n        serviceClasses: !!serviceClasses.size && Array.from(serviceClasses.keys()),\n        pkts: !!pkts.size && Array.from(pkts.keys()),\n        before,\n        after,\n        grouping,\n        pipes,\n        collapsePipes,\n        collapseGets,\n        port,\n        errors,\n    };\n    const filter = compileFilter(props);\n    return {\n        source: text,\n        props,\n        filter,\n    };\n    function parseBoolean(value) {\n        if (value === \"false\" || value === \"no\")\n            return false;\n        else if (value === \"true\" || value === \"yes\" || !value)\n            return true;\n        else\n            return undefined;\n    }\n    function parseTimestamp(value) {\n        const t = parseInt(value);\n        return isNaN(t) ? undefined : t;\n    }\n}\nfunction compileFilter(props) {\n    const { announce, repeatedAnnounce, resetIn, minPriority, requiresAck, log, productIdentifiers, flags, regGet, regSet, devices, selfDevice, serviceClasses, pkts, before, after, pipes, port, errors, } = props;\n    const filters = [];\n    if (before !== undefined)\n        filters.push(pkt => pkt.timestamp <= before);\n    if (after !== undefined)\n        filters.push(pkt => pkt.timestamp >= after);\n    if (announce !== undefined)\n        filters.push(pkt => pkt.isAnnounce === announce);\n    if (repeatedAnnounce !== undefined)\n        filters.push(pkt => (!pkt.isAnnounce || pkt.isRepeatedAnnounce) === repeatedAnnounce);\n    if (resetIn !== undefined)\n        filters.push(pkt => !!(pkt.isRegisterSet &&\n            pkt.serviceClass === SRV_CONTROL &&\n            pkt.registerIdentifier === exports.ControlReg.ResetIn) === resetIn);\n    if (minPriority !== undefined)\n        filters.push(pkt => (pkt.isRegisterSet &&\n            pkt.serviceClass == SRV_LOGGER &&\n            pkt.registerIdentifier === exports.LoggerReg.MinPriority) ===\n            minPriority);\n    if (requiresAck !== undefined)\n        filters.push(pkt => pkt.requiresAck === requiresAck);\n    if (flags)\n        filters.push(pkt => hasAnyFlag(pkt));\n    if (pipes !== undefined)\n        filters.push(pkt => pkt.isPipe);\n    if (port !== undefined)\n        filters.push(pkt => pkt.pipePort === port);\n    if (regGet !== undefined && regSet !== undefined)\n        filters.push(pkt => pkt.isRegisterGet === regGet && pkt.isRegisterSet === regSet);\n    else if (regGet !== undefined)\n        filters.push(pkt => pkt.isRegisterGet === regGet);\n    else if (regSet !== undefined)\n        filters.push(pkt => pkt.isRegisterSet === regSet);\n    if (log !== undefined)\n        filters.push(pkt => (pkt.serviceClass === SRV_LOGGER && pkt.isReport) === log);\n    if (selfDevice !== undefined) {\n        filters.push(pkt => {\n            const { device } = pkt;\n            if (!device)\n                return true;\n            return (device === device.bus.selfDevice) === selfDevice;\n        });\n    }\n    if (Object.keys(devices).length)\n        filters.push(pkt => {\n            if (!pkt.device)\n                return false;\n            const f = devices[pkt.device.deviceId];\n            return (!!f && (!f.from || !pkt.isCommand) && (!f.to || pkt.isCommand));\n        });\n    if (serviceClasses) {\n        filters.push(pkt => serviceClasses.some(serviceClass => isInstanceOf(pkt.serviceClass, serviceClass)));\n    }\n    if (pkts) {\n        filters.push(pkt => {\n            var _a, _b;\n            return pkts.indexOf((_a = pkt.decoded) === null || _a === void 0 ? void 0 : _a.info.identifier.toString(16)) > -1 ||\n                pkts.indexOf((_b = pkt.decoded) === null || _b === void 0 ? void 0 : _b.info.name) > -1;\n        });\n    }\n    if (productIdentifiers)\n        filters.push(pkt => {\n            var _a;\n            const fwid = (_a = pkt.device) === null || _a === void 0 ? void 0 : _a.productIdentifier;\n            return fwid === undefined || productIdentifiers.indexOf(fwid) > -1;\n        });\n    if (errors !== undefined)\n        filters.push(pkt => { var _a; return !!((_a = pkt.decoded) === null || _a === void 0 ? void 0 : _a.error) === errors; });\n    const filter = (pkt) => filters.every(filter => filter(pkt));\n    return filter;\n    function hasAnyFlag(pkt) {\n        var _a;\n        const k = (_a = pkt.decoded) === null || _a === void 0 ? void 0 : _a.info.kind;\n        return !!k && flags.indexOf(k) > -1;\n    }\n}\n\nconst RECORDING_TRACE_MAX_ITEMS = 100000;\n/**\n * A recorder of packets to create traces.\n * @category Trace\n */\nclass TraceRecorder extends JDClient {\n    constructor(bus) {\n        super();\n        this.bus = bus;\n        this.maxRecordingLength = RECORDING_TRACE_MAX_ITEMS;\n        this.handlePacket = this.handlePacket.bind(this);\n        this.mount(() => { var _a; return (_a = this._subscription) === null || _a === void 0 ? void 0 : _a.call(this); });\n    }\n    start() {\n        if (this.recording)\n            return;\n        this._subscription = this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n        this._trace = new Trace([], { maxLength: this.maxRecordingLength });\n        this.emit(START);\n        this.emit(CHANGE);\n    }\n    stop() {\n        var _a;\n        if (!this.recording)\n            return;\n        (_a = this._subscription) === null || _a === void 0 ? void 0 : _a.call(this);\n        this._subscription = undefined;\n        const t = this._trace;\n        this._trace = undefined;\n        this.emit(STOP);\n        this.emit(CHANGE);\n        return t;\n    }\n    get recording() {\n        return !!this._trace;\n    }\n    get trace() {\n        return this._trace;\n    }\n    handlePacket(pkt) {\n        // record packets in traces\n        this._trace.addPacket(pkt);\n        // notify that this packet has been processed\n        this.emit(PACKET_PROCESS, pkt);\n    }\n}\n\nconst TRACE_MAX_ITEMS = 1000;\nconst FILTERED_TRACE_MAX_ITEMS = 100;\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE = 10;\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME = 5000;\n/**\n * A filtered view over a packet trace\n * @category Trace\n */\nclass TraceView extends JDClient {\n    constructor(bus, filter, throttleDelay = 200) {\n        super();\n        this.bus = bus;\n        this.id = \"v\" + Math.random();\n        this._maxFilteredLength = FILTERED_TRACE_MAX_ITEMS;\n        this._paused = false;\n        this._packetFilter = undefined;\n        this._filteredPackets = [];\n        this.silent = false;\n        this._trace = new Trace([], { maxLength: TRACE_MAX_ITEMS });\n        this.handlePacket = this.handlePacket.bind(this);\n        this.handleFilterUpdate = this.handleFilterUpdate.bind(this);\n        this.notifyPacketsChanged = throttle(() => {\n            if (!this.silent)\n                this.setFilteredPackets();\n        }, throttleDelay);\n        this.mount(this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket));\n        this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.handleFilterUpdate));\n        this.filter = filter;\n    }\n    /**\n     * No new packet is added to the filtered view\n     */\n    get paused() {\n        return this._paused;\n    }\n    set paused(v) {\n        if (v !== this._paused) {\n            this._paused = v;\n            if (!this._paused) {\n                this.refreshFilter();\n                this.emit(CHANGE);\n            }\n        }\n    }\n    get trace() {\n        return this._trace;\n    }\n    set trace(t) {\n        if (t !== this._trace) {\n            this._trace = t;\n            this.refreshFilter();\n            this.emit(CHANGE);\n        }\n    }\n    get filteredPackets() {\n        return this._filteredPackets;\n    }\n    get filter() {\n        return this._filter;\n    }\n    set filter(f) {\n        if (f !== this._filter) {\n            this._filter = f;\n            this.refreshFilter();\n            this.emit(CHANGE);\n        }\n    }\n    get maxFilteredLength() {\n        return this._maxFilteredLength;\n    }\n    set maxFilteredLength(v) {\n        if (this._maxFilteredLength !== v) {\n            this._maxFilteredLength = v;\n            this.refreshFilter();\n            this.emit(CHANGE);\n        }\n    }\n    setFilteredPackets() {\n        // always clone for React\n        this._filteredPackets = this._filteredPackets.slice(0, this._filteredPackets.length > this.maxFilteredLength * 1.1\n            ? this.maxFilteredLength\n            : this._filteredPackets.length);\n        this.emit(CHANGE);\n    }\n    clear() {\n        this.trace = new Trace([], { maxLength: TRACE_MAX_ITEMS });\n        this._filteredPackets = [];\n        this.setFilteredPackets();\n        this.emit(CHANGE);\n    }\n    handleFilterUpdate() {\n        this.refreshFilter();\n    }\n    refreshFilter() {\n        var _a, _b;\n        this.id = \"view\" + Math.random();\n        this._packetFilter = parsePacketFilter(this.bus, this._filter);\n        this._filteredPackets = [];\n        const packets = this.trace.packets;\n        // reapply filter to existing trace\n        for (let i = packets.length - 1; i >= 0 && this._filteredPackets.length < this.maxFilteredLength; --i) {\n            const pkt = packets[i];\n            if ((_a = this._packetFilter) === null || _a === void 0 ? void 0 : _a.filter(pkt)) {\n                this.addFilteredPacket(pkt);\n            }\n        }\n        this._filteredPackets = this._filteredPackets.reverse();\n        (_b = this.notifyPacketsChanged) === null || _b === void 0 ? void 0 : _b.call(this);\n    }\n    handlePacket(pkt) {\n        var _a, _b;\n        if (this._paused)\n            return;\n        // remember packet\n        this.trace.addPacket(pkt);\n        // add packet to live list\n        if ((_a = this._packetFilter) === null || _a === void 0 ? void 0 : _a.filter(pkt)) {\n            this.addFilteredPacket(pkt);\n            // debounced notification of changes\n            (_b = this.notifyPacketsChanged) === null || _b === void 0 ? void 0 : _b.call(this);\n        }\n    }\n    addFilteredPacket(packet) {\n        var _a, _b, _c, _d;\n        if (packet.meta[this.id])\n            return;\n        packet.meta[this.id] = true;\n        // resolve packet device for pretty name\n        if (!packet.isMultiCommand && !packet.device)\n            packet.device = this.bus.device(packet.deviceIdentifier, false, packet);\n        // keep in filtered view\n        let filtered = true;\n        const hash = toHex(packet.toBuffer());\n        if ((_a = this._packetFilter) === null || _a === void 0 ? void 0 : _a.props.grouping) {\n            const old = this._filteredPackets\n                .slice(0, DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE)\n                .find(p => packet.timestamp - p.packet.timestamp <\n                DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME &&\n                p.hash === hash);\n            if (old) {\n                old.count++;\n                filtered = false;\n            }\n        }\n        // collapse acks\n        if (packet.isCRCAck) {\n            const pkts = this.trace.packets;\n            const crc = packet.serviceCommand;\n            const did = packet.deviceIdentifier;\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON); // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i];\n                if (old.requiresAck &&\n                    old.deviceIdentifier === did &&\n                    old.crc === crc) {\n                    old.meta[META_ACK] = packet;\n                    if ((_b = this._packetFilter) === null || _b === void 0 ? void 0 : _b.props.collapseAck)\n                        filtered = false;\n                    break;\n                }\n            }\n        }\n        // report coming back\n        if (packet.isRegisterGet && packet.isReport && !packet.meta[META_GET]) {\n            const pkts = this.trace.packets;\n            const did = packet.deviceIdentifier;\n            const si = packet.serviceIndex;\n            const rid = packet.registerIdentifier;\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON); // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i];\n                if (old.isRegisterGet &&\n                    old.isCommand &&\n                    old.deviceIdentifier === did &&\n                    old.serviceIndex === si &&\n                    old.registerIdentifier === rid) {\n                    // response from a get command\n                    packet.meta[META_GET] = old;\n                    if ((_c = this._packetFilter) === null || _c === void 0 ? void 0 : _c.props.collapseGets) {\n                        // remove old\n                        this._filteredPackets.splice(i, 1);\n                        // keep new\n                    }\n                    break;\n                }\n            }\n        }\n        // collapse pipes\n        if (((_d = this._packetFilter) === null || _d === void 0 ? void 0 : _d.props.collapsePipes) &&\n            packet.isPipe &&\n            packet.isCommand) {\n            const pkts = this._filteredPackets;\n            const m = Math.min(pkts.length, TRACE_FILTER_HORIZON); // max scan 100 packets back\n            const port = packet.pipePort;\n            const did = packet.deviceIdentifier;\n            for (let i = 0; i < m; ++i) {\n                const old = pkts[i].packet;\n                if (old.deviceIdentifier === did && old.pipePort === port) {\n                    let pipePackets = old.meta[META_PIPE];\n                    if (!pipePackets)\n                        pipePackets = old.meta[META_PIPE] = [];\n                    pipePackets[packet.pipeCount] = packet;\n                    filtered = false;\n                    break;\n                }\n            }\n        }\n        if (filtered) {\n            const key = packet.timestamp + hash;\n            this._filteredPackets.unshift({\n                key,\n                hash,\n                packet,\n                count: 1,\n            });\n        }\n    }\n}\n\nfunction cmdCode(cmd) {\n    switch (cmd) {\n        case \"setall\":\n            return LIGHT_PROG_SET_ALL;\n        case \"fade\":\n            return LIGHT_PROG_FADE;\n        case \"fadehsv\":\n            return LIGHT_PROG_FADE_HSV;\n        case \"rotfwd\":\n            return LIGHT_PROG_ROTATE_FWD;\n        case \"rotback\":\n            return LIGHT_PROG_ROTATE_BACK;\n        case \"show\":\n        case \"wait\":\n            return LIGHT_PROG_SHOW;\n        case \"range\":\n            return LIGHT_PROG_RANGE;\n        case \"mode\":\n            return LIGHT_PROG_MODE;\n        case \"tmpmode\":\n            return LIGHT_PROG_MODE1;\n        case \"setone\":\n            return LIGHT_PROG_COL1_SET;\n        case \"mult\":\n            return 0x100;\n        default:\n            return undefined;\n    }\n}\nfunction isWhiteSpace(code) {\n    return code == 32 || code == 13 || code == 10 || code == 9;\n}\n/**\n * Encodes a light command into a buffer\n * @param format\n * @param args\n * @returns\n * @category Data Packing\n */\nfunction lightEncode(format, args) {\n    // tokens are white-space separated\n    // % - number from args[]\n    // # - color from args[]\n    // #0123ff - color\n    // 123 - number\n    // commands: set, fade, fadehsv, rotfwd, rotback, pause\n    // fadehsv 0 12 #00ffff #ffffff\n    const outarr = [];\n    let colors = [];\n    let pos = 0;\n    let currcmd = 0;\n    function pushNumber(n) {\n        if (n == null || (n | 0) != n || n < 0 || n >= 16383)\n            throw new Error(\"number out of range: \" + n);\n        if (n < 128)\n            outarr.push(n);\n        else {\n            outarr.push(0x80 | (n >> 8));\n            outarr.push(n & 0xff);\n        }\n    }\n    function flush() {\n        if (currcmd == 0xcf) {\n            if (colors.length != 1)\n                throw new Error(\"setone requires 1 color\");\n        }\n        else {\n            if (colors.length == 0)\n                return;\n            if (colors.length <= 3)\n                outarr.push(0xc0 | colors.length);\n            else {\n                outarr.push(0xc0);\n                outarr.push(colors.length);\n            }\n        }\n        for (const c of colors) {\n            outarr.push((c >> 16) & 0xff);\n            outarr.push((c >> 8) & 0xff);\n            outarr.push((c >> 0) & 0xff);\n        }\n        colors = [];\n    }\n    function nextToken() {\n        while (isWhiteSpace(format.charCodeAt(pos)))\n            pos++;\n        const beg = pos;\n        while (pos < format.length && !isWhiteSpace(format.charCodeAt(pos)))\n            pos++;\n        return format.slice(beg, pos);\n    }\n    while (pos < format.length) {\n        const token = nextToken();\n        const t0 = token.charCodeAt(0);\n        if (97 <= t0 && t0 <= 122) {\n            // a-z\n            flush();\n            currcmd = cmdCode(token);\n            if (currcmd == undefined)\n                throw new Error(\"unknown light command: \" + token);\n            if (currcmd == 0x100) {\n                const f = parseFloat(nextToken());\n                if (isNaN(f) || f < 0 || f > 2)\n                    throw new Error(\"expecting scale\");\n                outarr.push(0xd8); // tmpmode\n                outarr.push(3); // mult\n                outarr.push(0xd0); // setall\n                const mm = Math.round(128 * f) & 0xff;\n                outarr.push(0xc1);\n                outarr.push(mm);\n                outarr.push(mm);\n                outarr.push(mm);\n            }\n            else {\n                outarr.push(currcmd);\n            }\n        }\n        else if (48 <= t0 && t0 <= 57) {\n            // 0-9\n            pushNumber(parseInt(token));\n        }\n        else if (t0 == 37) {\n            // %\n            if (args.length == 0)\n                throw new Error(\"out of args, %\");\n            const v = args.shift();\n            if (typeof v != \"number\")\n                throw new Error(\"expecting number\");\n            pushNumber(v);\n        }\n        else if (t0 == 35) {\n            // #\n            if (token.length == 1) {\n                if (args.length == 0)\n                    throw new Error(\"out of args, #\");\n                const v = args.shift();\n                if (typeof v === \"number\")\n                    colors.push(v);\n                else if (Array.isArray(v))\n                    for (const vv of v)\n                        colors.push(vv);\n                else\n                    throw Error(\"invalid number \" + v);\n            }\n            else {\n                if (token.length == 7) {\n                    const b = fromHex(token.slice(1));\n                    const c = (b[0] << 16) | (b[1] << 8) | b[2];\n                    colors.push(c);\n                }\n                else {\n                    throw new Error(\"invalid color: \" + token);\n                }\n            }\n        }\n    }\n    flush();\n    return new Uint8Array(outarr);\n}\n\n/**\n * @internal\n */\nfunction hsvToCss(hue, saturation, value, brightness, monochrome) {\n    const csshue = (hue * 360) / 0xff;\n    const csssat = (monochrome ? 0xff : saturation) / 0xff;\n    const cssval = value / 0xff;\n    const [h, s, l] = hsv_to_hsl(csshue, csssat, cssval);\n    const mixl = 0.3;\n    const alpha = (mixl + (1 - mixl) * l) * brightness;\n    return `hsla(${h}, ${s * 100}%, ${l * 100}%, ${alpha}`;\n}\nfunction hsv_to_hsl(h, s, v) {\n    // both hsv and hsl values are in [0, 1]\n    const l = ((2 - s) * v) / 2;\n    if (l != 0) {\n        if (l == 1) {\n            s = 0;\n        }\n        else if (l < 0.5) {\n            s = (s * v) / (l * 2);\n        }\n        else {\n            s = (s * v) / (2 - l * 2);\n        }\n    }\n    return [h, s, l];\n}\n\n/**\n * A client that bridges received and sent packets to a parent iframe.\n * @category JDOM\n */\nclass JDBridge extends JDClient {\n    constructor() {\n        super();\n        this.bridgeId = `bridge-` + randomDeviceId();\n        this.packetSent = 0;\n        this.packetProcessed = 0;\n        this.handleSendPacket = this.handleSendPacket.bind(this);\n    }\n    get bus() {\n        return this._bus;\n    }\n    set bus(newBus) {\n        if (newBus !== this._bus) {\n            if (this._bus)\n                this.unmount();\n            this._bus = newBus;\n            if (this._bus) {\n                this.mount(this._bus.subscribe(PACKET_PROCESS, this.handleSendPacket));\n                this.mount(this._bus.subscribe(PACKET_SEND, this.handleSendPacket));\n                this.mount(this._bus.addBridge(this));\n            }\n            this.emit(CHANGE);\n        }\n    }\n    /**\n     * Receives frame data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    receiveFrame(data) {\n        if (!this._bus)\n            return; // disconnected\n        // try frame format (sent by hardware, hosts)\n        const pkts = Packet.fromFrame(data, this.bus.timestamp);\n        this.dispatchPackets(pkts);\n    }\n    /**\n     * Receives packet data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    receivePacket(data) {\n        if (!this._bus)\n            return; // disconnected\n        // try as a single packet (send by the MakeCode simulator)\n        const pkt = Packet.fromBinary(data, this.bus.timestamp);\n        if (pkt)\n            this.dispatchPackets([pkt]);\n    }\n    dispatchPackets(pkts) {\n        // bail out if no packets\n        if (!(pkts === null || pkts === void 0 ? void 0 : pkts.length))\n            return;\n        this.packetProcessed += pkts.length;\n        for (const pkt of pkts) {\n            // tracing the source of packets to avoid self-resending\n            pkt.sender = this.bridgeId;\n            // send to native bus\n            this.bus.sendPacketAsync(pkt);\n            // send to javascript bus\n            this.bus.processPacket(pkt);\n        }\n    }\n    handleSendPacket(pkt) {\n        if (!this._bus || pkt.sender === this.bridgeId)\n            return;\n        this.packetSent++;\n        this.sendPacket(pkt.toBuffer());\n    }\n}\n\n/**\n * A settings service client implementation.\n * @category Clients\n */\nclass SettingsClient extends JDServiceClient {\n    constructor(service) {\n        super(service);\n        service.registersUseAcks = true;\n    }\n    async clear() {\n        await this.service.sendCmdAsync(exports.SettingsCmd.Clear);\n    }\n    async listKeys() {\n        const inp = new InPipeReader(this.bus);\n        await this.service.sendPacketAsync(inp.openCommand(exports.SettingsCmd.ListKeys), true);\n        const { output } = await inp.readAll();\n        const keys = output.map(pkt => pkt.stringData);\n        return keys.filter(k => !!k);\n    }\n    async list() {\n        const inp = new InPipeReader(this.bus);\n        await this.service.sendPacketAsync(inp.openCommand(exports.SettingsCmd.List), true);\n        const { output } = await inp.readAll();\n        return output\n            .map(pkt => {\n            const [key, value] = pkt.jdunpack(\"z b\");\n            return key && { key, value };\n        })\n            .filter(kv => !!kv);\n    }\n    async setValue(key, value) {\n        key = key.trim();\n        if (value === undefined) {\n            await this.deleteValue(key);\n        }\n        else {\n            const pkt = Packet.from(exports.SettingsCmd.Set, jdpack(\"z b\", [key, value]));\n            await this.service.sendPacketAsync(pkt);\n            this.emit(CHANGE);\n        }\n    }\n    async setStringValue(key, value) {\n        await this.setValue(key, value ? stringToBuffer(value) : undefined);\n    }\n    async getValue(key) {\n        if (!key)\n            return undefined;\n        key = key.trim();\n        const pkt = Packet.from(exports.SettingsCmd.Get, jdpack(\"s\", [key]));\n        const resp = await this.service.sendCmdAwaitResponseAsync(pkt);\n        const [rkey, value] = jdunpack(resp.data, \"z b\");\n        if (key !== rkey) {\n            console.error(`device returned different key, got \"${rkey}\", expected \"${key}\"`);\n            return undefined;\n        }\n        return value;\n    }\n    async getStringValue(key) {\n        const value = await this.getValue(key);\n        return value && bufferToString(value);\n    }\n    async deleteValue(key) {\n        if (!key)\n            return;\n        key = key.trim();\n        const pkt = Packet.from(exports.SettingsCmd.Delete, jdpack(\"s\", [key]));\n        await this.service.sendPacketAsync(pkt);\n        this.emit(CHANGE);\n    }\n}\n\nconst JD_BLE_FIRST_CHUNK_FLAG = 0x80;\n/**\n * Indicates with Web Bluetooth transport are enabled\n * @category Transport\n */\nfunction isWebBluetoothEnabled() {\n    return !!Flags.webBluetooth;\n}\n/**\n * Indicates with Web Bluetooth is supported in this environment\n * @category Transport\n */\nfunction isWebBluetoothSupported() {\n    try {\n        return (typeof navigator !== \"undefined\" &&\n            !!navigator.bluetooth &&\n            !!navigator.bluetooth.requestDevice);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction bleRequestDevice(options) {\n    var _a, _b;\n    // disabled\n    if (!Flags.webBluetooth)\n        return Promise.resolve(undefined);\n    try {\n        console.debug(`bluetooth request`, { options });\n        return (_b = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.bluetooth) === null || _a === void 0 ? void 0 : _a.requestDevice) === null || _b === void 0 ? void 0 : _b.call(_a, options);\n    }\n    catch (e) {\n        if (Flags.diagnostics)\n            console.warn(e);\n        return undefined;\n    }\n}\nfunction bleGetDevices() {\n    var _a;\n    // disabled\n    if (!Flags.webBluetooth)\n        return Promise.resolve([]);\n    try {\n        return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.bluetooth) === null || _a === void 0 ? void 0 : _a.getDevices()) || Promise.resolve([]);\n    }\n    catch (e) {\n        if (Flags.diagnostics)\n            console.warn(e);\n        return Promise.resolve([]);\n    }\n}\nclass BluetoothTransport extends Transport {\n    constructor() {\n        super(BLUETOOTH_TRANSPORT, { checkPulse: true });\n        this.handleDisconnected = this.handleDisconnected.bind(this);\n        this.handleCharacteristicChanged =\n            this.handleCharacteristicChanged.bind(this);\n    }\n    async transportConnectAsync(background) {\n        var _a;\n        // get a device\n        if (background) {\n            const devices = await bleGetDevices();\n            this._device = devices === null || devices === void 0 ? void 0 : devices[0];\n        }\n        else {\n            const device = await bleRequestDevice({\n                filters: [{ namePrefix: \"BBC micro:bit\" }],\n                optionalServices: [BLUETOOTH_JACDAC_SERVICE],\n            });\n            this._device = device;\n        }\n        if (!((_a = this._device) === null || _a === void 0 ? void 0 : _a.gatt))\n            throw new Error(\"Device not found\");\n        // listen for disconnection\n        this._device.addEventListener(\"gattserverdisconnected\", this.handleDisconnected, false);\n        // connect to gatt\n        this._server = await this._device.gatt.connect();\n        // connect to service\n        this._service = await this._server.getPrimaryService(BLUETOOTH_JACDAC_SERVICE);\n        // connect to characteristic\n        this._rxCharacteristic = await this._service.getCharacteristic(BLUETOOTH_JACDAC_RX_CHARACTERISTIC);\n        this._txCharacteristic = await this._service.getCharacteristic(BLUETOOTH_JACDAC_TX_CHARACTERISTIC);\n        // listen for incoming packet\n        this._rxCharacteristic.addEventListener(\"characteristicvaluechanged\", this.handleCharacteristicChanged, false);\n        // start listening\n        await this._rxCharacteristic.startNotifications();\n    }\n    async transportSendPacketAsync(p) {\n        if (!this._txCharacteristic) {\n            console.debug(`trying to send Bluetooth packet while disconnected`);\n            return;\n        }\n        const data = p.toBuffer();\n        const length = data.length;\n        const totalChunks = Math.ceil(data.length / 18);\n        let remainingChunks = totalChunks == 0 ? 0 : totalChunks - 1;\n        let sent = 0;\n        while (sent < length) {\n            const n = Math.min(18, length - sent);\n            const chunk = data.slice(sent, sent + n);\n            const header = new Uint8Array(2);\n            header[0] = totalChunks & 0x7f;\n            if (sent == 0)\n                header[0] |= JD_BLE_FIRST_CHUNK_FLAG;\n            header[1] = remainingChunks;\n            this._txCharacteristic.writeValueWithoutResponse(bufferConcat(header, chunk));\n            sent += n;\n            remainingChunks = remainingChunks == 0 ? 0 : remainingChunks - 1;\n            console.log(`chunk: ${chunk.toString()} [${remainingChunks} chunks remaining]`);\n        }\n    }\n    async transportDisconnectAsync() {\n        var _a, _b;\n        if (!this._device)\n            return;\n        console.debug(`ble: disconnecting`);\n        try {\n            (_a = this._rxCharacteristic) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"characteristicvaluechanged\", this.handleCharacteristicChanged);\n            (_b = this._device) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"gattserverdisconnected\", this.handleDisconnected);\n            this._server.disconnect();\n        }\n        finally {\n            this._rxCharacteristic = undefined;\n            this._txCharacteristic = undefined;\n            this._service = undefined;\n            this._server = undefined;\n            this._device = undefined;\n            this._rxBuffer = undefined;\n        }\n    }\n    handleDisconnected() {\n        // start disconnecting\n        this.disconnect();\n    }\n    handleCharacteristicChanged() {\n        const data = new Uint8Array(this._rxCharacteristic.value.buffer);\n        const packetData = data.slice(2);\n        console.log(`received length ${data.length}`);\n        if (data[0] & JD_BLE_FIRST_CHUNK_FLAG) {\n            if (this._rxBuffer)\n                console.error(`Dropped buffer. Chunks remaining: ${this._rxChunkCounter}`);\n            this._rxBuffer = new Uint8Array();\n            this._rxChunkCounter = data[0] & 0x7f;\n            console.log(`Initial chunk counter: ${this._rxChunkCounter}`);\n        }\n        this._rxChunkCounter =\n            this._rxChunkCounter == 0 ? 0 : this._rxChunkCounter - 1;\n        console.log(`after modification chunk counter: ${this._rxChunkCounter}`);\n        if (data[1] !== this._rxChunkCounter)\n            console.error(`Data out of order. Expected chunk: ${this._rxChunkCounter} Got chunk: ${data[1]}`);\n        else\n            this._rxBuffer = bufferConcat(this._rxBuffer, packetData);\n        if (this._rxChunkCounter == 0) {\n            const pkt = Packet.fromBinary(this._rxBuffer, this.bus.timestamp);\n            console.log(`processed packet ${pkt}`);\n            pkt.sender = BLUETOOTH_TRANSPORT;\n            this.bus.processPacket(pkt);\n            this._rxBuffer = undefined;\n            this._rxChunkCounter = 0;\n        }\n    }\n}\n/**\n * Creates a transport that uses Web Bluetooth\n * @category Transport\n */\nfunction createBluetoothTransport() {\n    return isWebBluetoothSupported() && new BluetoothTransport();\n}\n\n// see https://github.com/microsoft/uf2/blob/main/hf2.md for full spec\nconst HF2_DEVICE_MAJOR = 42;\nconst HF2_CMD_BININFO = 0x0001; // no arguments\nconst HF2_MODE_BOOTLOADER = 0x01;\nconst HF2_MODE_USERSPACE = 0x02;\n/*\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n*/\nconst HF2_CMD_INFO = 0x0002;\n// no arguments\n// results is utf8 character array\nconst HF2_CMD_RESET_INTO_APP = 0x0003; // no arguments, no result\nconst HF2_CMD_RESET_INTO_BOOTLOADER = 0x0004; // no arguments, no result\nconst HF2_CMD_START_FLASH = 0x0005; // no arguments, no result\nconst HF2_CMD_WRITE_FLASH_PAGE = 0x0006;\n/*\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[flash_page_size];\n};\n*/\n// no result\nconst HF2_CMD_CHKSUM_PAGES = 0x0007;\n/*\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[num_pages];\n};\n*/\nconst HF2_CMD_READ_WORDS = 0x0008;\n/*\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[num_words];\n};\n*/\nconst HF2_CMD_WRITE_WORDS = 0x0009;\n/*\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[num_words];\n};\n*/\n// no result\nconst HF2_CMD_DMESG = 0x0010;\n// no arguments\n// results is utf8 character array\nconst HF2_FLAG_SERIAL_OUT = 0x80;\nconst HF2_FLAG_SERIAL_ERR = 0xc0;\nconst HF2_FLAG_CMDPKT_LAST = 0x40;\nconst HF2_FLAG_CMDPKT_BODY = 0x00;\nconst HF2_FLAG_MASK = 0xc0;\nconst HF2_SIZE_MASK = 63;\nconst HF2_STATUS_OK = 0x00;\nconst HF2_STATUS_INVALID_CMD = 0x01;\nconst HF2_STATUS_EXEC_ERR = 0x02;\nconst HF2_STATUS_EVENT = 0x80;\n// the eventId is overlayed on the tag+status; the mask corresponds\n// to the HF2_STATUS_EVENT above\nconst HF2_EV_MASK = 0x800000;\nconst HF2_CMD_JDS_CONFIG = 0x0020;\nconst HF2_CMD_JDS_SEND = 0x0021;\nconst HF2_EV_JDS_PACKET = 0x800020;\nclass HF2Proto {\n    constructor(io) {\n        this.io = io;\n        this.eventHandlers = {};\n        this.msgs = new PromiseBuffer();\n        this.cmdSeq = (Math.random() * 0xffff) | 0;\n        this.lock = new PromiseQueue();\n        let frames = [];\n        io.onData = buf => {\n            const tp = buf[0] & HF2_FLAG_MASK;\n            const len = buf[0] & 63;\n            //console.log(`msg tp=${tp} len=${len}`)\n            const frame = new Uint8Array(len);\n            memcpy(frame, 0, buf, 1, len);\n            if (tp & HF2_FLAG_SERIAL_OUT) {\n                this.onSerial(frame, tp == HF2_FLAG_SERIAL_ERR);\n                return;\n            }\n            frames.push(frame);\n            if (tp == HF2_FLAG_CMDPKT_BODY) {\n                return;\n            }\n            else {\n                assert(tp == HF2_FLAG_CMDPKT_LAST);\n                let total = 0;\n                for (const f of frames)\n                    total += f.length;\n                const r = new Uint8Array(total);\n                let ptr = 0;\n                for (const f of frames) {\n                    memcpy(r, ptr, f);\n                    ptr += f.length;\n                }\n                frames = [];\n                if (r[2] & HF2_STATUS_EVENT) {\n                    // asynchronous event\n                    this.handleEvent(r);\n                }\n                else {\n                    this.msgs.push(r);\n                }\n            }\n        };\n    }\n    error(m) {\n        var _a;\n        return (_a = this.io) === null || _a === void 0 ? void 0 : _a.error(m);\n    }\n    talkAsync(cmd, data) {\n        if (!this.io)\n            console.error(\"rogue hf2 instance\");\n        let len = 8;\n        if (data)\n            len += data.length;\n        const pkt = new Uint8Array(len);\n        const seq = ++this.cmdSeq & 0xffff;\n        write32(pkt, 0, cmd);\n        write16(pkt, 4, seq);\n        write16(pkt, 6, 0);\n        if (data)\n            memcpy(pkt, 8, data, 0, data.length);\n        let numSkipped = 0;\n        const handleReturnAsync = () => this.msgs\n            .shiftAsync(1000) // we wait up to a second\n            .then(res => {\n            if (read16(res, 0) != seq) {\n                if (numSkipped < 3) {\n                    numSkipped++;\n                    this.io.log(`message out of sync, (${seq} vs ${read16(res, 0)}); will re-try`);\n                    return handleReturnAsync();\n                }\n                this.error(\"out of sync\");\n            }\n            let info = \"\";\n            if (res[3])\n                info = \"; info=\" + res[3];\n            switch (res[2]) {\n                case HF2_STATUS_OK:\n                    return res.slice(4);\n                case HF2_STATUS_INVALID_CMD:\n                    this.error(\"invalid command\" + info);\n                    break;\n                case HF2_STATUS_EXEC_ERR:\n                    this.error(\"execution error\" + info);\n                    break;\n                default:\n                    this.error(\"error \" + res[2] + info);\n                    break;\n            }\n            return null;\n        })\n            .catch(e => {\n            console.debug(`HF2: ${e.message}; cmd=${cmd}`);\n            this.error(e);\n            return null;\n        });\n        return this.lock.enqueue(\"talk\", () => this.sendMsgAsync(pkt).then(handleReturnAsync));\n    }\n    sendMsgAsync(buf, serial = 0) {\n        // Util.assert(buf.length <= this.maxMsgSize)\n        const frame = new Uint8Array(64);\n        const loop = (pos) => {\n            let len = buf.length - pos;\n            if (len <= 0)\n                return Promise.resolve();\n            if (len > 63) {\n                len = 63;\n                frame[0] = HF2_FLAG_CMDPKT_BODY;\n            }\n            else {\n                frame[0] = HF2_FLAG_CMDPKT_LAST;\n            }\n            if (serial)\n                frame[0] =\n                    serial == 1 ? HF2_FLAG_SERIAL_OUT : HF2_FLAG_SERIAL_ERR;\n            frame[0] |= len;\n            for (let i = 0; i < len; ++i)\n                frame[i + 1] = buf[pos + i];\n            if (!this.io)\n                return Promise.resolve();\n            return this.io.sendPacketAsync(frame).then(() => loop(pos + len));\n        };\n        return loop(0);\n    }\n    onEvent(id, f) {\n        assert(!!(id & HF2_EV_MASK));\n        this.eventHandlers[id + \"\"] = f;\n    }\n    onJDMessage(f) {\n        this.talkAsync(HF2_CMD_JDS_CONFIG, encodeU32LE([1]));\n        this.onEvent(HF2_EV_JDS_PACKET, f);\n    }\n    sendJDMessageAsync(buf) {\n        return this.talkAsync(HF2_CMD_JDS_SEND, buf).then(() => { });\n    }\n    handleEvent(buf) {\n        const evid = read32(buf, 0);\n        const f = this.eventHandlers[evid + \"\"];\n        if (f) {\n            f(buf.slice(4));\n        }\n        else {\n            this.io.log(\"unhandled event: \" + evid.toString(16));\n            // We can get these before we're ready to recv; this is fine.\n            //if (evid === 0x800020) {\n            //    this.io.onError(new Error(\"hf2 corrupted\"))\n            //}\n        }\n    }\n    onSerial(data, iserr) {\n        const msg = `hf2 serial: ${bufferToString(data)}`;\n        if (iserr)\n            console.warn(msg);\n        else\n            console.log(msg);\n    }\n    async postConnectAsync() {\n        await this.checkMode();\n        const buf = await this.talkAsync(HF2_CMD_INFO);\n        this.io.log(\"Connected to: \" + bufferToString(buf));\n    }\n    async checkMode() {\n        // first check that we are not talking to a bootloader\n        const info = await this.talkAsync(HF2_CMD_BININFO);\n        const mode = read32(info, 0);\n        this.io.log(`hf2 mode ${mode}`);\n        if (mode == HF2_MODE_USERSPACE) {\n            // all good\n            this.io.log(`device in user-space mode`);\n        }\n        else if (mode == HF2_MODE_BOOTLOADER) {\n            this.io.log(`device in bootloader mode, reseting into user-space mode`);\n            await this.talkAsync(HF2_CMD_RESET_INTO_APP);\n            // and fail\n            throwError(\"Device in bootloader mode\");\n        }\n        else {\n            // unknown mdoe\n            throwError(\"Unknown device operation mode\");\n        }\n    }\n    async disconnectAsync() {\n        if (this.io) {\n            const io = this.io;\n            this.io = undefined;\n            await io.disconnectAsync();\n        }\n    }\n}\n\nconst MICROBIT_V2_VENDOR_ID = 3368;\nconst MICROBIT_V2_PRODUCT_ID = 516;\nclass CMSISProto {\n    constructor(io) {\n        this.io = io;\n        this.q = new PromiseQueue();\n        this.sendQ = [];\n    }\n    startRecvToLoop() {\n        console.assert(!this._lastInterval);\n        let last = this.recvTo;\n        // do not use bus schedulere here\n        this._lastInterval = setInterval(() => {\n            if (!this.io)\n                this.stopRecvToLoop();\n            if (last && last == this.recvTo) {\n                last();\n            }\n            last = this.recvTo;\n        }, 200);\n    }\n    stopRecvToLoop() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = undefined;\n        }\n    }\n    error(msg, code) {\n        var _a;\n        this.stopRecvToLoop();\n        (_a = this.io) === null || _a === void 0 ? void 0 : _a.error(msg, code);\n        // clear state\n        this.xchgAddr = null;\n    }\n    onJDMessage(f) {\n        this._onJDMsg = f;\n    }\n    sendJDMessageAsync(buf) {\n        if (buf.length & 3) {\n            const tmp = new Uint8Array((buf.length + 3) & ~3);\n            tmp.set(buf);\n            buf = tmp;\n        }\n        return new Promise(resolve => {\n            this.sendQ.push({\n                buf,\n                cb: resolve,\n            });\n        });\n    }\n    async disconnectAsync() {\n        if (this.io) {\n            console.debug(`micro:bit: disconnect proto`);\n            this.stopRecvToLoop();\n            this._onJDMsg = () => console.warn(\"rogue jd callback\");\n            const io = this.io;\n            this.io = undefined;\n            if (io)\n                await io.disconnectAsync();\n        }\n    }\n    recvAsync() {\n        return new Promise((resolve, reject) => {\n            // io may have been cleared\n            if (!this.io) {\n                reject(new Error(\"USB disconnected\"));\n                return;\n            }\n            this.io.recvPacketAsync().then(v => {\n                const f = resolve;\n                resolve = null;\n                if (f) {\n                    this.recvTo = null;\n                    f(v);\n                }\n            }, err => {\n                if (resolve) {\n                    resolve = null;\n                    this.recvTo = null;\n                    reject(err);\n                }\n            });\n            this.recvTo = () => {\n                if (resolve) {\n                    resolve = null;\n                    reject(new Error(\"CMSIS recv timeout\"));\n                }\n            };\n        });\n    }\n    talkAsync(cmds) {\n        return this.q.enqueue(\"talk\", async () => {\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\");\n                return; // disconnected\n            }\n            //console.log(\"TALK\", cmds)\n            await this.io.sendPacketAsync(new Uint8Array(cmds));\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\");\n                return; // disconnected\n            }\n            let response = await this.recvAsync();\n            if (response[0] !== cmds[0]) {\n                const msg = `Bad response for ${cmds[0]} -> ${response[0]}, try again`;\n                console.debug(msg, { cmds, response });\n                try {\n                    response = await this.recvAsync();\n                }\n                catch (e) {\n                    // throw the original error in case of timeout\n                    this.error(msg);\n                }\n                if (response[0] !== cmds[0])\n                    this.error(msg);\n            }\n            return response;\n        });\n    }\n    talkHexAsync(str) {\n        return this.talkAsync(fromHex(str.replace(/ /g, \"\")));\n    }\n    decodeString(buf) {\n        const len = buf[1];\n        const ss = buf.slice(2, 2 + len);\n        return uint8ArrayToString(ss);\n    }\n    dapDelay(micros) {\n        const cmd = [0x09, 0, 0];\n        if (micros > 0xffff)\n            this.error(\"too large delay\");\n        write16(cmd, 1, micros);\n        return this.talkAsync(cmd);\n    }\n    async setBaudRate() {\n        const setBaud = [0x82, 0, 0, 0, 0];\n        write32(setBaud, 1, 115200);\n        await this.talkAsync(setBaud); // this reset the board on 0255\n    }\n    async xchgLoop() {\n        let currSend;\n        while (this.io) {\n            const now = Date.now();\n            if (Flags.diagnostics &&\n                this.lastXchg &&\n                now - this.lastXchg > 50) {\n                console.warn(\"slow xchg: \" + (now - this.lastXchg) + \"ms\");\n            }\n            this.lastXchg = now;\n            let numev = 0;\n            let inp = await this.readBytes(this.xchgAddr + 12, 256, true);\n            if (inp[2]) {\n                await this.writeWord(this.xchgAddr + 12, 0);\n                await this.triggerIRQ();\n                inp = inp.slice(0, inp[2] + 12);\n                this._onJDMsg(inp);\n                numev++;\n            }\n            let sendFree = false;\n            if (currSend) {\n                const send = await this.readBytes(this.xchgAddr + 12 + 256, 4);\n                if (!send[2]) {\n                    currSend.cb();\n                    currSend = null;\n                    sendFree = true;\n                    numev++;\n                }\n            }\n            if (!currSend && this.sendQ.length) {\n                if (!sendFree) {\n                    const send = await this.readBytes(this.xchgAddr + 12 + 256, 4);\n                    if (!send[2])\n                        sendFree = true;\n                }\n                if (sendFree) {\n                    currSend = this.sendQ.shift();\n                    const bbody = currSend.buf.slice(4);\n                    await this.writeWords(this.xchgAddr + 12 + 256 + 4, new Uint32Array(bbody.buffer));\n                    const bhead = currSend.buf.slice(0, 4);\n                    await this.writeWords(this.xchgAddr + 12 + 256, new Uint32Array(bhead.buffer));\n                    await this.triggerIRQ();\n                    this.lastSend = Date.now();\n                    numev++;\n                }\n                else {\n                    if (this.lastSend) {\n                        const d = Date.now() - this.lastSend;\n                        if (d > 50) {\n                            this.lastSend = 0;\n                            console.warn(\"failed to send packet fast enough\");\n                        }\n                    }\n                }\n            }\n            if (await this.readSerial())\n                numev++;\n            if (numev == 0)\n                await this.dapDelay(1000);\n        }\n    }\n    async readSerial() {\n        let buf = await this.talkAsync([0x83]);\n        const len = buf[1];\n        if (len) {\n            buf = buf.slice(2, 2 + len);\n            if (this.pendingSerial)\n                buf = bufferConcat(this.pendingSerial, buf);\n            let ptr = 0;\n            let beg = 0;\n            while (ptr < buf.length) {\n                if (buf[ptr] == 10 || buf[ptr] == 13) {\n                    const line = buf.slice(beg, ptr);\n                    if (line.length)\n                        console.debug(\"microbit: \" + fromUTF8(uint8ArrayToString(line)));\n                    beg = ptr + 1;\n                }\n                ptr++;\n            }\n            buf = buf.slice(beg);\n            this.pendingSerial = buf.length ? buf : null;\n            if (this.pendingSerial)\n                this.lastPendingSerial = Date.now();\n        }\n        else if (this.pendingSerial) {\n            const d = Date.now() - this.lastPendingSerial;\n            if (d > 500) {\n                const s = fromUTF8(uint8ArrayToString(this.pendingSerial));\n                this.pendingSerial = null;\n                console.log(\"SERIAL[TO]: \" + s);\n            }\n        }\n        return len;\n    }\n    async talkStringAsync(...cmds) {\n        return this.talkAsync(cmds).then(buf => this.decodeString(buf));\n    }\n    async readDP(reg) {\n        const nums = [0x05, 0, 1, 2 | reg, 0, 0, 0, 0];\n        const buf = await this.talkAsync(nums);\n        return read32(buf, 3);\n    }\n    async setupTAR(addr) {\n        const nums = [5, 0, 2, 1, 0x52, 0, 0, 0x23, 5, 0, 0, 0, 0];\n        write32(nums, 9, addr);\n        await this.talkAsync(nums);\n    }\n    async writeWords(addr, data) {\n        await this.setupTAR(addr);\n        const MAX = 0xe;\n        let ptr = 0;\n        const reqHd = [6, 0, MAX, 0, 0xd];\n        for (let i = 0; i < MAX * 4; ++i)\n            reqHd.push(0);\n        const req = new Uint8Array(reqHd);\n        let overhang = 1;\n        let ptrTX = 0;\n        const count = data.length;\n        const dataBytes = new Uint8Array(data.buffer);\n        let lastCh = MAX;\n        //console.log(\"WRITE\", addr.toString(16), data)\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count) {\n                const ch = Math.min(count - ptrTX, MAX);\n                if (ch) {\n                    req[2] = ch;\n                    req.set(dataBytes.slice(ptrTX * 4, (ptrTX + ch) * 4), 5);\n                    if (!this.io) {\n                        this.error(\"disconnected\");\n                        return;\n                    }\n                    await this.io.sendPacketAsync(ch == MAX ? req : req.slice(0, 5 + 4 * ch));\n                    ptrTX += ch;\n                    lastCh = ch;\n                }\n                if (overhang-- > 0)\n                    continue;\n                const buf = await this.recvAsync();\n                if (buf[0] != req[0])\n                    this.error(`bad response, ${buf[0]} != ${req[0]}`);\n                if (buf[1] != MAX && buf[1] != lastCh)\n                    this.error(`bad response, ${buf[1]} != ${MAX} && ${buf[1]} != ${lastCh}`);\n                ptr += buf[1];\n            }\n        });\n    }\n    async readBytes(addr, count, jdmode = false) {\n        if (addr & 3 || count & 3)\n            this.error(\"unaligned\");\n        const b = await this.readWords(addr, count >> 2, jdmode);\n        return new Uint8Array(b.buffer);\n    }\n    async readWords(addr, count, jdmode = false) {\n        await this.setupTAR(addr);\n        const MAX = 0xe;\n        const res = new Uint32Array(count);\n        let ptr = 0;\n        const req = new Uint8Array([6, 0, MAX, 0, 0xf]);\n        let overhang = 1;\n        let ptrTX = 0;\n        // console.log(\"READ\", addr.toString(16), count)\n        let numPending = 0;\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count || numPending) {\n                const ch = Math.min(count - ptrTX, MAX);\n                if (ch > 0) {\n                    req[2] = ch;\n                    numPending++;\n                    if (!this.io) {\n                        this.error(\"disconnected\");\n                        return;\n                    }\n                    await this.io.sendPacketAsync(req);\n                    ptrTX += ch;\n                }\n                if (overhang-- > 0)\n                    continue;\n                const buf = await this.recvAsync();\n                numPending--;\n                if (buf[0] != req[0]) {\n                    this.error(\"bad response\");\n                    return;\n                }\n                const len = buf[1];\n                const words = new Uint32Array(buf.slice(4, (1 + len) * 4).buffer);\n                if (words.length != len) {\n                    this.error(\"bad response2\");\n                    return;\n                }\n                res.set(words, ptr);\n                // limit transfer, according to JD frame size\n                if (jdmode && ptr == 0) {\n                    const frmsz = new Uint8Array(res.buffer)[2];\n                    const words = (frmsz + 12 + 3) >> 2;\n                    if (count > words)\n                        count = words;\n                }\n                ptr += words.length;\n            }\n        });\n        return res;\n    }\n    async findExchange() {\n        const memStart = 536870912;\n        const memStop = memStart + 128 * 1024;\n        const checkSize = 1024;\n        let p0 = 0x20006000;\n        let p1 = 0x20006000 + checkSize;\n        const check = async (addr) => {\n            if (addr < memStart)\n                return null;\n            if (addr + checkSize > memStop)\n                return null;\n            const buf = await this.readWords(addr, checkSize >> 2);\n            for (let i = 0; i < buf.length; ++i) {\n                if (buf[i] == 0x786d444a && buf[i + 1] == 0xb0a6c0e9)\n                    return addr + (i << 2);\n            }\n            return 0;\n        };\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const a0 = await check(p0);\n            if (a0)\n                return a0;\n            const a1 = await check(p1);\n            if (a1)\n                return a1;\n            if (a0 === null && a1 === null)\n                return null;\n            p0 -= checkSize;\n            p1 += checkSize;\n        }\n    }\n    async triggerIRQ() {\n        const addr = 0xe000e200 + (this.irqn >> 5) * 4;\n        const data = new Uint32Array([1 << (this.irqn & 31)]);\n        await this.writeWords(addr, data);\n    }\n    writeWord(addr, val) {\n        return this.writeWords(addr, new Uint32Array([val]));\n    }\n    async reset() {\n        await this.writeWord(0xe000edfc, 0); // DEMCR\n        await this.writeWord(0xe000ed0c, 0x05fa0000 | (1 << 2)); // AIRCR\n    }\n    async postConnectAsync() {\n        this.startRecvToLoop();\n        const devid = await this.talkStringAsync(0x80);\n        if (/^9902/.test(devid)) {\n            this.error(`micro:bit v1 is not supported. sorry.`, ERROR_MICROBIT_V1);\n            return;\n        }\n        if (!/^990[3456789]/.test(devid)) {\n            this.error(`Invalid Vendor0 response: ` + devid, ERROR_MICROBIT_UNKNOWN);\n            return;\n        }\n        this.io.log(\"DAPLink v\" + (await this.talkStringAsync(0x00, 0x04)));\n        await this.setBaudRate(); // this may reset the board\n        const freq = [0x11, 0, 0, 0, 0];\n        write32(freq, 1, 10000000);\n        await this.talkAsync(freq);\n        const inits = [\n            \"02 00\",\n            \"04 00 64 00 00 00\",\n            // SWD switch\n            \"12 38 FF FF FF FF FF FF FF\",\n            \"12 10 9E E7\",\n            \"12 38 FF FF FF FF FF FF FF\",\n            \"12 08 00\",\n            // read DPIDR\n            \"05 00 01 02 00 00 00 00\",\n            // clear errors\n            \"05 00 03 00 04 00 00 00 08 00 00 00 00 04 00 00 00 50\",\n        ];\n        for (const ini of inits)\n            await this.talkHexAsync(ini);\n        for (let i = 0; i < 100; ++i) {\n            const st = await this.readDP(4);\n            const mask = (1 << 29) | (1 << 31);\n            if ((st & mask) == mask)\n                break;\n            await delay(20);\n        }\n        await this.reset();\n        await delay(1000); // the actual minimum until mbbridge starts seems to be 700ms; give it some more time just in case\n        const xchg = await this.findExchange();\n        if (xchg === null) {\n            this.error(`exchange address not found; add jacdac to your project`, ERROR_MICROBIT_JACDAC_MISSING);\n            return;\n        }\n        this.xchgAddr = xchg;\n        const info = await this.readBytes(xchg, 16);\n        this.irqn = info[8];\n        if (info[12 + 2] != 0xff) {\n            this.error(\"invalid memory; try power-cycling the micro:bit\", ERROR_MICROBIT_INVALID_MEMORY);\n            return;\n        }\n        // clear initial lock\n        await this.writeWord(xchg + 12, 0);\n        this.io.log(`exchange address: 0x${xchg.toString(16)}; irqn=${this.irqn}`);\n        /* async */ this.xchgLoop().catch(e => {\n            console.debug(e);\n            this.error((e === null || e === void 0 ? void 0 : e.message) || \"an error occured\");\n        });\n    }\n}\n\n/**\n * Common Jacdac error type\n * @category Runtime\n */\nclass JDError extends Error {\n    constructor(message, jacdacName) {\n        super(message);\n        this.jacdacName = jacdacName;\n        this.name = JACDAC_ERROR;\n    }\n}\n/**\n * Extract the Jacdac error code if any\n * @param e\n * @returns\n * @category Runtime\n */\nfunction errorCode(e) {\n    var _a;\n    return e.name === JACDAC_ERROR ? (_a = e) === null || _a === void 0 ? void 0 : _a.jacdacName : undefined;\n}\n\nconst USB_FILTERS = {\n    filters: [\n        {\n            // hf2 devices (incl. arcade)\n            classCode: 255,\n            subclassCode: HF2_DEVICE_MAJOR,\n        },\n        {\n            // micro:bit v2\n            vendorId: MICROBIT_V2_VENDOR_ID,\n            productId: MICROBIT_V2_PRODUCT_ID,\n        },\n    ],\n};\nconst controlTransferGetReport = 0x01;\nconst controlTransferSetReport = 0x09;\nconst controlTransferOutReport = 0x200;\nconst controlTransferInReport = 0x100;\nclass USBIO {\n    constructor(options) {\n        this.options = options;\n        this.readLoopStarted = false;\n        this.ready = false;\n        this.rawMode = false;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.onData = (v) => { };\n        this.onError = (e) => {\n            console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg, v) {\n        if (Flags.diagnostics) {\n            if (v != undefined)\n                console.debug(\"usb: \" + msg, v);\n            else\n                console.debug(\"usb: \" + msg);\n        }\n    }\n    mkProto() {\n        return this.isMicrobit() ? new CMSISProto(this) : new HF2Proto(this);\n    }\n    clearDev() {\n        if (this.dev) {\n            this.dev = null;\n            this.epIn = null;\n            this.epOut = null;\n            this.onData = () => console.warn(\"rogue hf2 onData\");\n        }\n    }\n    disconnectAsync() {\n        this.ready = false;\n        if (!this.dev)\n            return Promise.resolve();\n        console.debug(\"close device\");\n        return this.dev\n            .close()\n            .catch(e => {\n            // just ignore errors closing, most likely device just disconnected\n            console.debug(e);\n        })\n            .then(() => {\n            this.clearDev();\n            return delay(500);\n        });\n    }\n    recvPacketAsync() {\n        if (!this.rawMode)\n            this.error(\"rawMode required\");\n        return this.recvPacketCoreAsync();\n    }\n    recvPacketCoreAsync() {\n        const final = (res) => {\n            if (res.status != \"ok\")\n                this.error(\"USB IN transfer failed\");\n            const arr = new Uint8Array(res.data.buffer);\n            if (arr.length == 0)\n                return this.recvPacketCoreAsync();\n            return arr;\n        };\n        if (!this.dev)\n            return Promise.reject(new Error(\"Disconnected\"));\n        if (!this.epIn) {\n            return this.dev\n                .controlTransferIn({\n                requestType: \"class\",\n                recipient: \"interface\",\n                request: controlTransferGetReport,\n                value: controlTransferInReport,\n                index: this.iface.interfaceNumber,\n            }, 64)\n                .then(final);\n        }\n        return this.dev.transferIn(this.epIn.endpointNumber, 64).then(final);\n    }\n    error(msg, code) {\n        const e = new JDError(`device ${this.dev ? this.dev.productName : \"n/a\"} (${msg})`, code);\n        this.onError(e);\n    }\n    async readLoop() {\n        if (this.rawMode || this.readLoopStarted)\n            return;\n        this.readLoopStarted = true;\n        console.debug(\"start read loop\");\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (!this.ready) {\n                break;\n                //await delay(300)\n                //continue\n            }\n            try {\n                const buf = await this.recvPacketCoreAsync();\n                if (buf[0]) {\n                    // we've got data; retry reading immedietly after processing it\n                    this.onData(buf);\n                }\n                else {\n                    // throttle down if no data coming\n                    await delay(5);\n                }\n            }\n            catch (err) {\n                if (this.dev) {\n                    this.onError(err);\n                    await this.disconnectAsync();\n                }\n                await delay(300);\n            }\n        }\n    }\n    sendPacketAsync(pkt) {\n        if (!this.dev)\n            return Promise.reject(new Error(\"Disconnected\"));\n        assert(pkt.length <= 64);\n        if (!this.epOut) {\n            return this.dev\n                .controlTransferOut({\n                requestType: \"class\",\n                recipient: \"interface\",\n                request: controlTransferSetReport,\n                value: controlTransferOutReport,\n                index: this.iface.interfaceNumber,\n            }, pkt)\n                .then(res => {\n                if (res.status != \"ok\")\n                    this.error(\"USB CTRL OUT transfer failed\");\n            });\n        }\n        return this.dev\n            .transferOut(this.epOut.endpointNumber, pkt)\n            .then(res => {\n            if (res.status != \"ok\")\n                this.error(\"USB OUT transfer failed\");\n        });\n    }\n    isMicrobit() {\n        return (this.dev && this.dev.productId == 516 && this.dev.vendorId == 3368);\n    }\n    checkDevice() {\n        this.iface = undefined;\n        this.altIface = undefined;\n        if (!this.dev)\n            return false;\n        console.debug(\"connect device: \" +\n            this.dev.manufacturerName +\n            \" \" +\n            this.dev.productName);\n        // resolve interfaces\n        const subcl = this.isMicrobit() ? 0 : HF2_DEVICE_MAJOR;\n        for (const iface of this.dev.configuration.interfaces) {\n            const alt = iface.alternates[0];\n            if (alt.interfaceClass == 0xff && alt.interfaceSubclass == subcl) {\n                this.iface = iface;\n                this.altIface = alt;\n                break;\n            }\n        }\n        if (this.isMicrobit())\n            this.rawMode = true;\n        return !!this.iface;\n    }\n    async tryReconnectAsync(deviceId) {\n        try {\n            const devices = await this.options.getDevices(USB_FILTERS);\n            this.dev = deviceId\n                ? devices.find(dev => dev.serialNumber === deviceId)\n                : devices[0];\n        }\n        catch (e) {\n            console.log(e);\n            this.dev = undefined;\n        }\n    }\n    async requestDeviceAsync() {\n        try {\n            this.dev = await this.options.requestDevice(USB_FILTERS);\n        }\n        catch (e) {\n            console.log(e);\n            this.dev = undefined;\n        }\n    }\n    async connectAsync(background, deviceId) {\n        await this.tryReconnectAsync(deviceId);\n        if (!this.dev && !background)\n            await this.requestDeviceAsync();\n        // background call and no device, just give up for now\n        if (!this.dev && background)\n            throwError(\"device not paired\", true);\n        // let's connect\n        await this.openDeviceAsync();\n        const proto = this.mkProto();\n        try {\n            await proto.postConnectAsync();\n        }\n        catch (e) {\n            console.debug(e);\n            await proto.disconnectAsync();\n            throw e;\n        }\n        return proto;\n    }\n    async openDeviceAsync() {\n        if (!this.dev)\n            throwError(\"device not found\");\n        if (!this.checkDevice())\n            throwError(\"device does not support HF2\");\n        await this.dev.open();\n        await this.dev.selectConfiguration(1);\n        if (this.altIface.endpoints.length) {\n            this.epIn = this.altIface.endpoints.filter(e => e.direction == \"in\")[0];\n            this.epOut = this.altIface.endpoints.filter(e => e.direction == \"out\")[0];\n            assert(this.epIn.packetSize == 64);\n            assert(this.epOut.packetSize == 64);\n        }\n        console.debug(\"claim interface\");\n        await this.dev.claimInterface(this.iface.interfaceNumber);\n        console.debug(\"all connected\");\n        this.ready = true;\n        /* no await */ this.readLoop();\n    }\n}\n\nconst WEB_SERIAL_FILTERS = {\n    filters: [\n        {\n            usbVendorId: 0x303a, // espressif\n        },\n    ],\n};\nclass WebSerialIO {\n    constructor() {\n        this.readLoopStarted = false;\n        this.ready = false;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.onData = (v) => { };\n        this.onError = (e) => {\n            console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg, v) {\n        if (Flags.diagnostics) {\n            if (v != undefined)\n                console.debug(\"usb: \" + msg, v);\n            else\n                console.debug(\"usb: \" + msg);\n        }\n    }\n    mkProto() {\n        return new HF2Proto(this);\n    }\n    clearDev() {\n        if (this.dev) {\n            this.dev = null;\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\");\n        }\n    }\n    disconnectAsync() {\n        this.ready = false;\n        if (!this.dev)\n            return Promise.resolve();\n        console.debug(\"close device\");\n        return this.cancelStreams()\n            .catch(e => {\n            // just ignore errors closing, most likely device just disconnected\n            console.debug(e);\n        })\n            .then(() => {\n            this.clearDev();\n            return delay(500);\n        });\n    }\n    devInfo() {\n        if (!this.dev)\n            return \"n/a\";\n        const h = (n) => (\"000\" + n.toString(16)).slice(-4);\n        const info = this.dev.getInfo();\n        return h(info.usbVendorId) + \":\" + h(info.usbProductId);\n    }\n    error(msg, code) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code);\n        this.onError(e);\n    }\n    async cancelStreams() {\n        if (this.reader)\n            try {\n                await this.reader.cancel();\n                this.reader.releaseLock();\n                // eslint-disable-next-line no-empty\n            }\n            catch (_a) { }\n        try {\n            this.writer.releaseLock();\n            // eslint-disable-next-line no-empty\n        }\n        catch (_b) { }\n        await this.dev.close();\n    }\n    async readLoop() {\n        var _a, _b;\n        if (this.readLoopStarted)\n            return;\n        this.readLoopStarted = true;\n        console.debug(\"start read loop\");\n        const readpkt = async (reader) => {\n            let value = null;\n            for (;;) {\n                const tmp = await reader.read();\n                if (tmp.done || !this.dev)\n                    return null; // reader cancelled\n                if (!value)\n                    value = tmp.value;\n                else\n                    value = bufferConcat(value, tmp.value);\n                // Despite the fact that the device always sends full 64 bytes USB packets\n                // the Windows serial driver will sometimes give only one character, and then the remaining\n                // 63 in the second read - this must be going through some UART abstraction layers I guess... ¯\\_(ツ)_/¯\n                if (value && (value.length & 63) == 0)\n                    return value;\n            }\n        };\n        for (;;) {\n            const reader = (_b = (_a = this.dev) === null || _a === void 0 ? void 0 : _a.readable) === null || _b === void 0 ? void 0 : _b.getReader();\n            if (!reader) {\n                await delay(100);\n                continue;\n            }\n            this.reader = reader;\n            console.debug(\"start new read loop round\");\n            try {\n                // eslint-disable-next-line no-constant-condition\n                for (;;) {\n                    const value = await readpkt(reader);\n                    if (!value)\n                        break;\n                    // console.log(\"Recv\", toHex(value))\n                    if (value.length > 64)\n                        for (let i = 0; i < value.length; i += 64) {\n                            this.onData(value.slice(i, i + 64));\n                        }\n                    else\n                        this.onData(value);\n                }\n            }\n            catch (e) {\n                if (this.dev)\n                    this.onError(e);\n                await delay(100);\n            }\n            finally {\n                try {\n                    reader.releaseLock();\n                }\n                catch (_c) { }\n                await delay(100);\n            }\n        }\n    }\n    sendPacketAsync(pkt) {\n        if (!this.dev || !this.writer)\n            return Promise.reject(new Error(\"Disconnected\"));\n        assert(pkt.length <= 64);\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt;\n            pkt = new Uint8Array(64);\n            pkt.set(p);\n        }\n        return this.writer.write(pkt);\n    }\n    async tryReconnectAsync() {\n        try {\n            const ports = await navigator.serial.getPorts();\n            this.dev = ports[0];\n        }\n        catch (e) {\n            console.log(e);\n            this.dev = undefined;\n        }\n    }\n    async requestDeviceAsync() {\n        try {\n            this.dev = await navigator.serial.requestPort(WEB_SERIAL_FILTERS);\n        }\n        catch (e) {\n            console.log(e);\n            this.dev = undefined;\n        }\n    }\n    async connectAsync(background, deviceId) {\n        await this.tryReconnectAsync();\n        if (!this.dev && !background)\n            await this.requestDeviceAsync();\n        // background call and no device, just give up for now\n        if (!this.dev && background)\n            throwError(\"device not paired\", true);\n        // let's connect\n        await this.openDeviceAsync();\n        const proto = this.mkProto();\n        try {\n            await proto.postConnectAsync();\n        }\n        catch (e) {\n            console.debug(e);\n            await proto.disconnectAsync();\n            throw e;\n        }\n        return proto;\n    }\n    async openDeviceAsync() {\n        var _a;\n        if (!this.dev)\n            throwError(\"device not found\");\n        await this.dev.open({\n            baudRate: 115200,\n            bufferSize: 32 * 1024,\n        });\n        this.writer = (_a = this.dev.writable) === null || _a === void 0 ? void 0 : _a.getWriter();\n        if (!this.writer)\n            throwError(\"no writer\");\n        this.ready = true;\n        /* no await */ this.readLoop();\n    }\n}\n\n/**\n * @internal\n */\nclass EventTargetObservable {\n    constructor(element, eventName) {\n        this.element = element;\n        this.eventName = eventName;\n    }\n    subscribe(observer) {\n        const handler = (ev) => !!observer.next && observer.next(ev);\n        this.element.addEventListener(this.eventName, handler, false);\n        return {\n            unsubscribe: () => this.element.removeEventListener(this.eventName, handler),\n        };\n    }\n}\n\nfunction isWebUSBEnabled() {\n    return !!Flags.webUSB;\n}\nfunction isWebUSBSupported() {\n    try {\n        return (typeof navigator !== \"undefined\" &&\n            !!navigator.usb &&\n            !!navigator.usb.getDevices);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction usbRequestDevice(options) {\n    var _a, _b;\n    // disabled\n    if (!Flags.webUSB)\n        return Promise.resolve(undefined);\n    try {\n        return (_b = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.usb) === null || _a === void 0 ? void 0 : _a.requestDevice) === null || _b === void 0 ? void 0 : _b.call(_a, options);\n    }\n    catch (e) {\n        if (Flags.diagnostics)\n            console.warn(e);\n        return undefined;\n    }\n}\nfunction usbGetDevices() {\n    var _a;\n    // disabled\n    if (!Flags.webUSB)\n        return Promise.resolve([]);\n    try {\n        return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.usb) === null || _a === void 0 ? void 0 : _a.getDevices()) || Promise.resolve([]);\n    }\n    catch (e) {\n        if (Flags.diagnostics)\n            console.warn(e);\n        return Promise.resolve([]);\n    }\n}\nclass WebUSBTransport extends Transport {\n    constructor(options) {\n        super(USB_TRANSPORT, Object.assign(Object.assign({}, options), { checkPulse: true }));\n        this.options = options;\n    }\n    async transportConnectAsync(background) {\n        const transport = new USBIO(this.options);\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e);\n        this.hf2 = await transport.connectAsync(background);\n        this.hf2.onJDMessage(this.handleFrame.bind(this));\n    }\n    async transportSendPacketAsync(p) {\n        if (!this.hf2)\n            throw new Error(\"hf2 transport disconnected\");\n        const buf = p.toBuffer();\n        await this.hf2.sendJDMessageAsync(buf);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async transportDisconnectAsync(background) {\n        const h = this.hf2;\n        this.hf2 = undefined;\n        if (h)\n            await h.disconnectAsync();\n    }\n}\nfunction defaultOptions() {\n    return (isWebUSBSupported() && {\n        getDevices: usbGetDevices,\n        requestDevice: usbRequestDevice,\n        connectObservable: new EventTargetObservable(navigator.usb, \"connect\"),\n        disconnectObservable: new EventTargetObservable(navigator.usb, \"disconnect\"),\n    });\n}\nfunction createUSBTransport(options) {\n    if (!options)\n        options = defaultOptions();\n    return options && new WebUSBTransport(options);\n}\nfunction createUSBBus(options) {\n    return new JDBus([createUSBTransport(options)]);\n}\n\nclass WorkerTransport extends Transport {\n    constructor(type, worker, options) {\n        super(type, options);\n        this.type = type;\n        this.worker = worker;\n        this.options = options;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.pending = {};\n        this.worker.addEventListener(\"message\", this.handleMessage.bind(this));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    postMessageAsync(msg) {\n        const id = (msg.id = \"\" + Math.random());\n        const p = new Promise((resolve, reject) => {\n            this.worker.postMessage(msg);\n            this.pending[id] = { resolve, reject };\n        });\n        return p;\n    }\n    handleMessage(ev) {\n        const data = ev.data;\n        const { jacdac, type } = data || {};\n        if (!jacdac)\n            return; // not our message\n        switch (type) {\n            case \"packet\": {\n                const { payload } = data;\n                //debug(`wt: packet`, payload)\n                this.handlePacket(payload);\n                break;\n            }\n            case \"frame\": {\n                const { payload } = data;\n                //debug(`wt: frame`, payload)\n                this.handleFrame(payload);\n                break;\n            }\n            case \"connect\":\n            case \"disconnect\": {\n                const { id, error } = data;\n                const { resolve, reject } = this.pending[id] || {};\n                if (resolve) {\n                    if (error)\n                        reject(error);\n                    else\n                        resolve(undefined);\n                }\n                break;\n            }\n            case \"error\": {\n                const { error, background, type } = data;\n                if (Flags.diagnostics)\n                    console.debug(data);\n                if (!background)\n                    this.errorHandler(type, error);\n                break;\n            }\n        }\n    }\n    async transportSendPacketAsync(p) {\n        // don't wait\n        const buf = p.toBuffer();\n        this.worker.postMessage({\n            jacdac: true,\n            type: \"packet\",\n            payload: buf,\n        });\n    }\n    async transportConnectAsync(background) {\n        let deviceId;\n        if (!background) {\n            // request permission first\n            deviceId = await this.options.requestDevice();\n        }\n        // try connect\n        await this.postMessageAsync({\n            jacdac: true,\n            type: \"connect\",\n            deviceId,\n            background,\n        });\n    }\n    transportDisconnectAsync(background) {\n        return this.postMessageAsync({\n            jacdac: true,\n            type: \"disconnect\",\n            background,\n        });\n    }\n}\nfunction createUSBWorkerTransport(worker) {\n    return (isWebUSBEnabled() &&\n        new WorkerTransport(USB_TRANSPORT, worker, {\n            checkPulse: true,\n            requestDevice: () => usbRequestDevice(USB_FILTERS).then(dev => dev === null || dev === void 0 ? void 0 : dev.serialNumber),\n            connectObservable: new EventTargetObservable(navigator.usb, \"connect\"),\n            disconnectObservable: new EventTargetObservable(navigator.usb, \"disconnect\"),\n        }));\n}\n\nfunction isWebSerialEnabled() {\n    return !!Flags.webSerial;\n}\nfunction isWebSerialSupported() {\n    try {\n        return (typeof navigator !== \"undefined\" &&\n            !!navigator.serial &&\n            !!navigator.serial.getPorts);\n    }\n    catch (e) {\n        return false;\n    }\n}\nclass WebSerialTransport extends Transport {\n    constructor(mkTransport) {\n        super(SERIAL_TRANSPORT);\n        this.mkTransport = mkTransport;\n    }\n    async transportConnectAsync(background) {\n        const transport = this.mkTransport();\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e);\n        this.hf2 = await transport.connectAsync(background);\n        this.hf2.onJDMessage(this.handleFrame.bind(this));\n    }\n    async transportSendPacketAsync(p) {\n        if (!this.hf2)\n            throw new Error(\"hf2 transport disconnected\");\n        const buf = p.toBuffer();\n        await this.hf2.sendJDMessageAsync(buf);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async transportDisconnectAsync(background) {\n        const h = this.hf2;\n        this.hf2 = undefined;\n        if (h)\n            await h.disconnectAsync();\n    }\n}\n/**\n * Creates a transport over a Web Serial connection\n * @category\n */\nfunction createWebSerialTransport(mkTransport = () => new WebSerialIO()) {\n    return isWebSerialSupported() && new WebSerialTransport(mkTransport);\n}\n/**\n * Creates a bus with a Web Serial connection\n * @category\n */\nfunction createWebSerialBus() {\n    return new JDBus([createWebSerialTransport()]);\n}\n\nfunction createNodeUSBOptions() {\n    console.debug(`jacdac: creating usb transport`);\n    async function devicesFound(devices) {\n        for (const device of devices) {\n            // microbit v2\n            if (device.vendorId === MICROBIT_V2_VENDOR_ID &&\n                device.productId === MICROBIT_V2_PRODUCT_ID) {\n                return device;\n            }\n            // jacdac device\n            else if (device.deviceVersionMajor == HF2_DEVICE_MAJOR) {\n                for (const iface of device.configuration.interfaces) {\n                    const alt = iface.alternates[0];\n                    if (alt.interfaceClass == 0xff &&\n                        alt.interfaceSubclass == HF2_DEVICE_MAJOR) {\n                        return device;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const USB = require(\"webusb\").USB;\n    const usb = new USB({\n        devicesFound,\n    });\n    async function requestDevice(options) {\n        console.debug(`requesting device...`);\n        try {\n            const device = await usb.requestDevice(options);\n            return device;\n        }\n        catch (e) {\n            console.debug(e);\n            return undefined;\n        }\n    }\n    async function getDevices(options) {\n        //const devices = await usb.getDevices()\n        //return devices\n        const dev = await requestDevice(options);\n        return dev ? [dev] : [];\n    }\n    const connectObservable = new EventTargetObservable(usb, \"connect\");\n    const disconnectObservable = new EventTargetObservable(usb, \"disconnect\");\n    return {\n        getDevices,\n        requestDevice,\n        connectObservable,\n        disconnectObservable,\n    };\n}\n\nfunction toPromise(f) {\n    return new Promise((resolve, reject) => f((err, result) => {\n        if (err)\n            reject(err);\n        else\n            resolve(result);\n    }));\n}\n/**\n * @internal\n */\nclass NodeWebSerialIO {\n    /**\n     *\n     * @param SerialPort ``require(\"serialport\")``\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(SerialPort) {\n        this.SerialPort = SerialPort;\n        this.ready = false;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.onData = (v) => { };\n        this.onError = (e) => {\n            console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg, v) {\n        if (Flags.diagnostics) {\n            if (v != undefined)\n                console.debug(\"usb: \" + msg, v);\n            else\n                console.debug(\"usb: \" + msg);\n        }\n    }\n    mkProto() {\n        return new HF2Proto(this);\n    }\n    clearDev() {\n        if (this.dev) {\n            this.dev = null;\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\");\n        }\n    }\n    disconnectAsync() {\n        this.ready = false;\n        if (!this.dev)\n            return Promise.resolve();\n        console.debug(\"close device\");\n        return this.cancelStreams()\n            .catch(e => {\n            // just ignore errors closing, most likely device just disconnected\n            console.debug(e);\n        })\n            .then(() => {\n            this.clearDev();\n            return delay(500);\n        });\n    }\n    devInfo() {\n        if (!this.port)\n            return \"n/a\";\n        return this.port.vendorId + \":\" + this.port.productId;\n    }\n    error(msg, code) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code);\n        this.onError(e);\n    }\n    async cancelStreams() {\n        await toPromise(cb => this.dev.close(cb));\n    }\n    sendPacketAsync(pkt) {\n        if (!this.dev)\n            return Promise.reject(new Error(\"Disconnected\"));\n        assert(pkt.length <= 64);\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt;\n            pkt = new Uint8Array(64);\n            pkt.set(p);\n        }\n        return toPromise(cb => this.dev.write(pkt, undefined, cb));\n    }\n    async tryReconnectAsync() {\n        try {\n            this.dev = undefined;\n            this.port = undefined;\n            const ports = await this.SerialPort.list();\n            this.port = ports.filter(p => /^PX/.test(p.serialNumber) ||\n                WEB_SERIAL_FILTERS.filters.some(f => f.usbVendorId == parseInt(p.vendorId, 16)))[0];\n            if (this.port) {\n                await toPromise(cb => {\n                    this.dev = new this.SerialPort(this.port.path, { baudRate: 115200 }, cb);\n                });\n                let tmpdata;\n                this.dev.on(\"data\", (buf) => {\n                    if (tmpdata)\n                        buf = bufferConcat(tmpdata, buf);\n                    tmpdata = null;\n                    // This was only observed with WebSerial, but better safe than sorry\n                    if (buf.length & 63) {\n                        tmpdata = buf;\n                        return;\n                    }\n                    if (buf.length > 64)\n                        for (let i = 0; i < buf.length; i += 64) {\n                            this.onData(buf.slice(i, i + 64));\n                        }\n                    else\n                        this.onData(buf);\n                });\n                this.dev.on(\"error\", (err) => {\n                    this.error(err.messsage || err + \"\");\n                });\n            }\n        }\n        catch (e) {\n            console.log(e);\n            this.dev = undefined;\n            this.port = undefined;\n        }\n    }\n    async connectAsync(background, deviceId) {\n        await this.tryReconnectAsync();\n        if (!this.dev && background)\n            throwError(\"can't find suitable device\", true);\n        const proto = this.mkProto();\n        try {\n            await proto.postConnectAsync();\n        }\n        catch (e) {\n            console.debug(e);\n            await proto.disconnectAsync();\n            throw e;\n        }\n        return proto;\n    }\n}\n\nclass IFrameBridge extends JDBridge {\n    constructor(targetOrigin) {\n        super();\n        this.targetOrigin = targetOrigin;\n        this.handleMessage = this.handleMessage.bind(this);\n        window.addEventListener(\"message\", this.handleMessage, false);\n        this.mount(() => window.removeEventListener(\"message\", this.handleMessage));\n        console.debug(`jacdac: iframe bridge created`);\n    }\n    handleMessage(msg) {\n        const { data } = msg;\n        if (data.channel === \"jacdac\" && data.type === \"messagepacket\") {\n            const payload = data.data;\n            this.receivePacket(payload);\n        }\n    }\n    sendPacket(data) {\n        const msg = {\n            type: \"messagepacket\",\n            channel: \"jacdac\",\n            data,\n            sender: this.bridgeId,\n            broadcast: true,\n        };\n        window.parent.postMessage(msg, this.targetOrigin);\n    }\n}\nfunction createIFrameBridge(parentOrigin = \"*\") {\n    return inIFrame() && new IFrameBridge(parentOrigin);\n}\nfunction startDevTools() {\n    if (typeof window !== \"undefined\" &&\n        !/^https:\\/\\/microsoft.github.io\\/jacdac-docs\\//.test(window.location.href))\n        window.location.href = `https://microsoft.github.io/jacdac-docs/clients/javascript/devtools.html#${window.location.href}`;\n}\n\n/**\n * Creates a Jacdac bus using WebUSB, WebSerial or WebBluetooth\n * @param options\n * @returns\n * @category Transport\n */\nfunction createWebBus(options) {\n    const { usbOptions, iframeTargetOrigin } = options || {};\n    const bus = new JDBus([\n        usbOptions !== null && createUSBTransport(usbOptions),\n        createWebSerialTransport(),\n        createBluetoothTransport(),\n    ]);\n    const iframeBridge = iframeTargetOrigin !== null && createIFrameBridge(iframeTargetOrigin);\n    if (iframeBridge)\n        iframeBridge.bus = bus;\n    return bus;\n}\n/**\n * Indicates if any of the USB/Serial/Bluetooth transports is supported\n * @returns\n * @category Transport\n */\nfunction isWebTransportSupported() {\n    return (isWebUSBSupported() ||\n        isWebSerialSupported() ||\n        isWebBluetoothSupported());\n}\n\n/**\n * A role manager\n * @category Roles\n */\nclass RoleManager extends JDClient {\n    constructor(bus) {\n        super();\n        this._roles = [];\n        this.bus = bus;\n        this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.addServices.bind(this)));\n        this.mount(this.bus.subscribe(DEVICE_DISCONNECT, this.removeServices.bind(this)));\n        this.bindServices();\n    }\n    /**\n     * Indicates if all roles are bound.\n     */\n    get isBound() {\n        return this._roles.every(({ service }) => !!service);\n    }\n    /**\n     * Gets the list of roles tracked by the manager\n     */\n    roles(bound = undefined) {\n        if (bound !== undefined)\n            return this._roles.filter(({ service }) => !!service === bound);\n        else\n            return this._roles.slice(0);\n    }\n    /**\n     * Updates the list of roles\n     * @param newRoles\n     */\n    updateRoles(newRoles) {\n        const oldBound = this.isBound;\n        let changed = false;\n        // remove unknown roles\n        const supportedNewRoles = newRoles.filter(({ serviceClass }) => serviceSpecificationFromClassIdentifier(serviceClass));\n        // unbind removed roles\n        let i = 0;\n        while (i < this._roles.length) {\n            const role = this._roles[i];\n            if (!supportedNewRoles.find(r => r.role === role.role)) {\n                changed = true;\n                this._roles.splice(i, 1);\n                this.emit(ROLE_UNBOUND, role.role);\n            }\n            else {\n                i++;\n            }\n        }\n        // update or add roles\n        for (const newRole of supportedNewRoles) {\n            const existingRole = this._roles.find(r => r.role === newRole.role);\n            if (!existingRole) {\n                // added role\n                changed = true;\n                this._roles.push(Object.assign({}, newRole));\n            }\n            else if (existingRole.serviceClass !== newRole.serviceClass) {\n                // modified type, force rebinding\n                changed = true;\n                existingRole.serviceClass = newRole.serviceClass;\n                if (existingRole.service) {\n                    existingRole.service = undefined;\n                    this.emit(ROLE_UNBOUND, existingRole.role);\n                }\n            } // else unmodifed role\n        }\n        // bound services\n        this.bindServices(changed);\n        this.emitBoundEvents(oldBound);\n    }\n    /**\n     * Resolves the service bound to a given role.\n     * @param role\n     * @returns\n     */\n    service(role) {\n        var _a;\n        return (_a = this._roles.find(r => r.role === role)) === null || _a === void 0 ? void 0 : _a.service;\n    }\n    /**\n     * Updates or creates a new role\n     * @param role name of the role\n     * @param serviceClass desired service class\n     * @param preferredDeviceId optional preferred device id\n     * @returns\n     */\n    updateRole(role, serviceClass, preferredDeviceId) {\n        if (!serviceSpecificationFromClassIdentifier(serviceClass))\n            return; // unknown role type\n        let binding = this._roles.find(r => r.role === role);\n        // check if we already have this role\n        if (binding && serviceClass === binding.serviceClass) {\n            if (!binding.service && preferredDeviceId) {\n                binding.preferredDeviceId = preferredDeviceId;\n            }\n            return;\n        }\n        const oldBound = this.isBound;\n        // new role\n        binding = { role, serviceClass, preferredDeviceId };\n        this._roles.push(binding);\n        if (!this.bindRole(binding)) {\n            this.emit(ROLE_UNBOUND, role);\n        }\n        this.emit(CHANGE);\n        this.emitBoundEvents(oldBound);\n    }\n    emitBoundEvents(oldBound) {\n        const bound = this.isBound;\n        if (oldBound !== bound)\n            this.emit(bound ? BOUND : UNBOUND);\n    }\n    // TODO: need to respect other (unbound) role's preferredDeviceId\n    bindRole(role) {\n        const ret = this.bus\n            .services({\n            ignoreInfrastructure: true,\n            serviceClass: role.serviceClass,\n        })\n            .filter(s => !this.roles(true).find(r => r.service === s));\n        if (ret.length) {\n            let theOne = ret[0];\n            if (role.preferredDeviceId) {\n                const newOne = ret.find(s => s.device.deviceId === role.preferredDeviceId);\n                if (newOne)\n                    theOne = newOne;\n            }\n            role.service = theOne;\n            this.emit(ROLE_BOUND, role.role);\n            return true;\n        }\n        return false;\n    }\n    bindServices(changed) {\n        this.roles(false).forEach(binding => {\n            if (this.bindRole(binding))\n                changed = true;\n        });\n        if (changed)\n            this.emit(CHANGE);\n    }\n    addServices(dev) {\n        if (dev === this.bus.selfDevice)\n            return;\n        this.bindServices();\n    }\n    removeServices(dev) {\n        let changed = false;\n        this._roles\n            .filter(r => { var _a; return ((_a = r.service) === null || _a === void 0 ? void 0 : _a.device) === dev; })\n            .forEach(r => {\n            r.service = undefined;\n            this.emit(ROLE_UNBOUND, r.role);\n            changed = true;\n        });\n        this.bindServices(changed);\n    }\n    toString() {\n        return this._roles\n            .map(({ role, service }) => `${role}->${service || \"?\"}`)\n            .join(\",\");\n    }\n}\n/**\n * Tracks a set of roles\n * @param bus bus hosting the devices\n * @param bindings map of role names to device service pairs\n * @param onUpdate callback to run whenver role assignments change\n * @param options Additional options\n * @returns A unsubscribe callback to cleanup handlers\n * @category Roles\n */\nfunction startRoles(bus, bindings, onUpdate, options) {\n    const { incomplete } = options || {};\n    const roleManager = new RoleManager(bus);\n    roleManager.updateRoles(Object.keys(bindings).map(role => ({\n        role,\n        serviceClass: bindings[role].serviceClass,\n        preferredDeviceId: bindings[role].preferredDeviceId,\n    })));\n    const roles = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const r = {};\n        for (const key in bindings) {\n            const srv = roleManager.service(key);\n            if (srv)\n                r[key] = srv;\n        }\n        return r;\n    };\n    const update = () => {\n        if (!incomplete && !roleManager.isBound)\n            return;\n        onUpdate(roles());\n    };\n    const unsubscribe = roleManager.subscribe(CHANGE, update);\n    update();\n    return unsubscribe;\n}\n/*\nfunction test(bus: JDBus) {\n    const bindings = {\n        thermo1: { serviceClass: SRV_BUTTON },\n        thermo2: { serviceClass: SRV_BUTTON },\n    }\n    trackRoles(\n        bus,\n        bindings,\n        ({ thermo1, thermo2 }) => {\n            console.log({ thermo1, thermo2 })\n        },\n        { incomplete: true }\n    )\n}\n*/\n\nlet _sensorSpecs;\n/**\n * Gets the list of sensor specifications available\n * @returns\n */\nfunction sensorSpecifications() {\n    if (!_sensorSpecs) {\n        _sensorSpecs = serviceSpecifications().filter(srv => !srv.shortName.startsWith(\"_\") && isSensor(srv));\n    }\n    return _sensorSpecs;\n}\n/**\n * Collects and flattens all sensor data into a serializable object\n * @param bus\n * @returns\n */\nfunction snapshotSensors(bus) {\n    return toMap(sensorSpecifications(), srv => srv.camelName, srv => bus\n        .services({\n        serviceClass: srv.classIdentifier,\n        ignoreInfrastructure: true,\n        announced: true,\n    })\n        .map(srv => {\n        var _a;\n        const reg = srv.readingRegister;\n        const spec = reg.specification;\n        return spec.fields.length === 1\n            ? ((_a = reg.unpackedValue) === null || _a === void 0 ? void 0 : _a[0]) || 0\n            : reg.objectValue || {};\n    }));\n}\n\nexports.ServiceTwinRegisterFlag = void 0;\n(function (ServiceTwinRegisterFlag) {\n    ServiceTwinRegisterFlag[ServiceTwinRegisterFlag[\"Const\"] = 1] = \"Const\";\n    ServiceTwinRegisterFlag[ServiceTwinRegisterFlag[\"Volatile\"] = 2] = \"Volatile\";\n})(exports.ServiceTwinRegisterFlag || (exports.ServiceTwinRegisterFlag = {}));\nfunction serviceSpecificationToServiceTwinSpecification(specification) {\n    if (!specification)\n        return undefined;\n    const { classIdentifier: serviceClass, camelName: name, packets, } = specification;\n    const registers = packets\n        .filter(isHighLevelRegister) // TODO formalize\n        .map(reg => {\n        let flags = 0;\n        if (reg.kind == \"const\")\n            flags |= exports.ServiceTwinRegisterFlag.Const;\n        if (reg.volatile)\n            flags |= exports.ServiceTwinRegisterFlag.Volatile;\n        const r = {\n            code: reg.identifier,\n            name: reg.name,\n            flags,\n            packf: reg.packFormat,\n            fields: reg.fields.length > 1\n                ? reg.fields.map(f => f.name)\n                : undefined,\n        };\n        return r;\n    });\n    const dspec = {\n        serviceClass,\n        name,\n        registers,\n    };\n    return dspec;\n}\nfunction serviceSpecificationsWithServiceTwinSpecification() {\n    const specs = [\n        serviceSpecificationFromClassIdentifier(SRV_CONTROL),\n        ...serviceSpecifications().filter(srv => !isInfrastructure(srv)),\n    ];\n    return specs;\n}\n\nexports.ACK_MAX_DELAY = ACK_MAX_DELAY;\nexports.ACK_MIN_DELAY = ACK_MIN_DELAY;\nexports.ALIGN = ALIGN;\nexports.ANNOUNCE = ANNOUNCE;\nexports.ANNOUNCE_INTERVAL = ANNOUNCE_INTERVAL;\nexports.BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC = BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC;\nexports.BLUETOOTH_JACDAC_RX_CHARACTERISTIC = BLUETOOTH_JACDAC_RX_CHARACTERISTIC;\nexports.BLUETOOTH_JACDAC_SERVICE = BLUETOOTH_JACDAC_SERVICE;\nexports.BLUETOOTH_JACDAC_TX_CHARACTERISTIC = BLUETOOTH_JACDAC_TX_CHARACTERISTIC;\nexports.BLUETOOTH_TRANSPORT = BLUETOOTH_TRANSPORT;\nexports.BOUND = BOUND;\nexports.BUS_NODE_NAME = BUS_NODE_NAME;\nexports.CHANGE = CHANGE;\nexports.CLOSE = CLOSE;\nexports.CMD_ADVERTISEMENT_DATA = CMD_ADVERTISEMENT_DATA;\nexports.CMD_EVENT_CODE_MASK = CMD_EVENT_CODE_MASK;\nexports.CMD_EVENT_COUNTER_MASK = CMD_EVENT_COUNTER_MASK;\nexports.CMD_EVENT_COUNTER_POS = CMD_EVENT_COUNTER_POS;\nexports.CMD_EVENT_MASK = CMD_EVENT_MASK;\nexports.CMD_GET_REG = CMD_GET_REG;\nexports.CMD_REG_MASK = CMD_REG_MASK;\nexports.CMD_SET_REG = CMD_SET_REG;\nexports.CMD_TOP_MASK = CMD_TOP_MASK;\nexports.CMSISProto = CMSISProto;\nexports.COMMAND_NODE_NAME = COMMAND_NODE_NAME;\nexports.COMMAND_RECEIVE = COMMAND_RECEIVE;\nexports.CONNECT = CONNECT;\nexports.CONNECTING = CONNECTING;\nexports.CONNECTION_STATE = CONNECTION_STATE;\nexports.CONST_NODE_NAME = CONST_NODE_NAME;\nexports.CRC_ACK_NODE_NAME = CRC_ACK_NODE_NAME;\nexports.ControlServer = ControlServer;\nexports.DATA = DATA;\nexports.DEVICE_ANNOUNCE = DEVICE_ANNOUNCE;\nexports.DEVICE_CHANGE = DEVICE_CHANGE;\nexports.DEVICE_CLEAN = DEVICE_CLEAN;\nexports.DEVICE_CONNECT = DEVICE_CONNECT;\nexports.DEVICE_DISCONNECT = DEVICE_DISCONNECT;\nexports.DEVICE_FIRMWARE_INFO = DEVICE_FIRMWARE_INFO;\nexports.DEVICE_FOUND = DEVICE_FOUND;\nexports.DEVICE_IMAGE_HEIGHT = DEVICE_IMAGE_HEIGHT;\nexports.DEVICE_IMAGE_WIDTH = DEVICE_IMAGE_WIDTH;\nexports.DEVICE_LOST = DEVICE_LOST;\nexports.DEVICE_NODE_NAME = DEVICE_NODE_NAME;\nexports.DEVICE_PACKET_ANNOUNCE = DEVICE_PACKET_ANNOUNCE;\nexports.DEVICE_RESTART = DEVICE_RESTART;\nexports.DISCONNECT = DISCONNECT;\nexports.DISCONNECTING = DISCONNECTING;\nexports.DeviceStatsMonitor = DeviceStatsMonitor;\nexports.EMBED_MIN_ASPECT_RATIO = EMBED_MIN_ASPECT_RATIO;\nexports.ERROR = ERROR;\nexports.ERROR_MICROBIT_INVALID_MEMORY = ERROR_MICROBIT_INVALID_MEMORY;\nexports.ERROR_MICROBIT_JACDAC_MISSING = ERROR_MICROBIT_JACDAC_MISSING;\nexports.ERROR_MICROBIT_UNKNOWN = ERROR_MICROBIT_UNKNOWN;\nexports.ERROR_MICROBIT_V1 = ERROR_MICROBIT_V1;\nexports.EVENT = EVENT;\nexports.EVENT_NODE_NAME = EVENT_NODE_NAME;\nexports.FIELD_NODE_NAME = FIELD_NODE_NAME;\nexports.FIRMWARE_BLOBS_CHANGE = FIRMWARE_BLOBS_CHANGE;\nexports.FLASH_MAX_DEVICES = FLASH_MAX_DEVICES;\nexports.FOUND = FOUND;\nexports.Flags = Flags;\nexports.GET_ATTEMPT = GET_ATTEMPT;\nexports.HF2Proto = HF2Proto;\nexports.HF2_CMD_BININFO = HF2_CMD_BININFO;\nexports.HF2_CMD_CHKSUM_PAGES = HF2_CMD_CHKSUM_PAGES;\nexports.HF2_CMD_DMESG = HF2_CMD_DMESG;\nexports.HF2_CMD_INFO = HF2_CMD_INFO;\nexports.HF2_CMD_JDS_CONFIG = HF2_CMD_JDS_CONFIG;\nexports.HF2_CMD_JDS_SEND = HF2_CMD_JDS_SEND;\nexports.HF2_CMD_READ_WORDS = HF2_CMD_READ_WORDS;\nexports.HF2_CMD_RESET_INTO_APP = HF2_CMD_RESET_INTO_APP;\nexports.HF2_CMD_RESET_INTO_BOOTLOADER = HF2_CMD_RESET_INTO_BOOTLOADER;\nexports.HF2_CMD_START_FLASH = HF2_CMD_START_FLASH;\nexports.HF2_CMD_WRITE_FLASH_PAGE = HF2_CMD_WRITE_FLASH_PAGE;\nexports.HF2_CMD_WRITE_WORDS = HF2_CMD_WRITE_WORDS;\nexports.HF2_DEVICE_MAJOR = HF2_DEVICE_MAJOR;\nexports.HF2_EV_JDS_PACKET = HF2_EV_JDS_PACKET;\nexports.HF2_EV_MASK = HF2_EV_MASK;\nexports.HF2_FLAG_CMDPKT_BODY = HF2_FLAG_CMDPKT_BODY;\nexports.HF2_FLAG_CMDPKT_LAST = HF2_FLAG_CMDPKT_LAST;\nexports.HF2_FLAG_MASK = HF2_FLAG_MASK;\nexports.HF2_FLAG_SERIAL_ERR = HF2_FLAG_SERIAL_ERR;\nexports.HF2_FLAG_SERIAL_OUT = HF2_FLAG_SERIAL_OUT;\nexports.HF2_MODE_BOOTLOADER = HF2_MODE_BOOTLOADER;\nexports.HF2_MODE_USERSPACE = HF2_MODE_USERSPACE;\nexports.HF2_SIZE_MASK = HF2_SIZE_MASK;\nexports.HF2_STATUS_EVENT = HF2_STATUS_EVENT;\nexports.HF2_STATUS_EXEC_ERR = HF2_STATUS_EXEC_ERR;\nexports.HF2_STATUS_INVALID_CMD = HF2_STATUS_INVALID_CMD;\nexports.HF2_STATUS_OK = HF2_STATUS_OK;\nexports.IDENTIFY = IDENTIFY;\nexports.IDENTIFY_DURATION = IDENTIFY_DURATION;\nexports.JACDAC_ERROR = JACDAC_ERROR;\nexports.JDBridge = JDBridge;\nexports.JDBus = JDBus;\nexports.JDClient = JDClient;\nexports.JDDevice = JDDevice;\nexports.JDError = JDError;\nexports.JDEvent = JDEvent;\nexports.JDEventSource = JDEventSource;\nexports.JDField = JDField;\nexports.JDNode = JDNode;\nexports.JDRegister = JDRegister;\nexports.JDRegisterServer = JDRegisterServer;\nexports.JDServerServiceProvider = JDServerServiceProvider;\nexports.JDService = JDService;\nexports.JDServiceClient = JDServiceClient;\nexports.JDServiceMemberNode = JDServiceMemberNode;\nexports.JDServiceProvider = JDServiceProvider;\nexports.JDServiceServer = JDServiceServer;\nexports.JD_ADVERTISEMENT_0_ACK_SUPPORTED = JD_ADVERTISEMENT_0_ACK_SUPPORTED;\nexports.JD_ADVERTISEMENT_0_COUNTER_MASK = JD_ADVERTISEMENT_0_COUNTER_MASK;\nexports.JD_DEVICE_DISCONNECTED_DELAY = JD_DEVICE_DISCONNECTED_DELAY;\nexports.JD_DEVICE_LOST_DELAY = JD_DEVICE_LOST_DELAY;\nexports.JD_FRAME_FLAG_ACK_REQUESTED = JD_FRAME_FLAG_ACK_REQUESTED;\nexports.JD_FRAME_FLAG_COMMAND = JD_FRAME_FLAG_COMMAND;\nexports.JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS;\nexports.JD_SERIAL_HEADER_SIZE = JD_SERIAL_HEADER_SIZE;\nexports.JD_SERIAL_MAX_PAYLOAD_SIZE = JD_SERIAL_MAX_PAYLOAD_SIZE;\nexports.JD_SERVICE_INDEX_CRC_ACK = JD_SERVICE_INDEX_CRC_ACK;\nexports.JD_SERVICE_INDEX_CTRL = JD_SERVICE_INDEX_CTRL;\nexports.JD_SERVICE_INDEX_INV_MASK = JD_SERVICE_INDEX_INV_MASK;\nexports.JD_SERVICE_INDEX_MASK = JD_SERVICE_INDEX_MASK;\nexports.JD_SERVICE_INDEX_MAX_NORMAL = JD_SERVICE_INDEX_MAX_NORMAL;\nexports.JD_SERVICE_INDEX_PIPE = JD_SERVICE_INDEX_PIPE;\nexports.JOYSTICK_ARCADE_BUTTONS = JOYSTICK_ARCADE_BUTTONS;\nexports.JOYSTICK_DPAD_AB_BUTTONS = JOYSTICK_DPAD_AB_BUTTONS;\nexports.JOYSTICK_DPAD_A_BUTTONS = JOYSTICK_DPAD_A_BUTTONS;\nexports.JOYSTICK_DPAD_BUTTONS = JOYSTICK_DPAD_BUTTONS;\nexports.JOYSTICK_GAMEPAD_EXTRA_BUTTONS = JOYSTICK_GAMEPAD_EXTRA_BUTTONS;\nexports.JSONTryParse = JSONTryParse;\nexports.LATE = LATE;\nexports.LOST = LOST;\nexports.MAX_SERVICES_LENGTH = MAX_SERVICES_LENGTH;\nexports.MESSAGE = MESSAGE;\nexports.META_ACK = META_ACK;\nexports.META_ACK_FAILED = META_ACK_FAILED;\nexports.META_GET = META_GET;\nexports.META_PIPE = META_PIPE;\nexports.META_TRACE = META_TRACE;\nexports.MICROBIT_V2_PRODUCT_ID = MICROBIT_V2_PRODUCT_ID;\nexports.MICROBIT_V2_VENDOR_ID = MICROBIT_V2_VENDOR_ID;\nexports.NEW_LISTENER = NEW_LISTENER;\nexports.NodeWebSerialIO = NodeWebSerialIO;\nexports.PACKETIO_TRANSPORT = PACKETIO_TRANSPORT;\nexports.PACKET_ANNOUNCE = PACKET_ANNOUNCE;\nexports.PACKET_DATA_NORMALIZE = PACKET_DATA_NORMALIZE;\nexports.PACKET_EVENT = PACKET_EVENT;\nexports.PACKET_INVALID_CRC = PACKET_INVALID_CRC;\nexports.PACKET_INVALID_DATA = PACKET_INVALID_DATA;\nexports.PACKET_KIND_ANNOUNCE = PACKET_KIND_ANNOUNCE;\nexports.PACKET_KIND_EVENT = PACKET_KIND_EVENT;\nexports.PACKET_KIND_RO = PACKET_KIND_RO;\nexports.PACKET_KIND_RW = PACKET_KIND_RW;\nexports.PACKET_PRE_PROCESS = PACKET_PRE_PROCESS;\nexports.PACKET_PROCESS = PACKET_PROCESS;\nexports.PACKET_RECEIVE = PACKET_RECEIVE;\nexports.PACKET_RECEIVE_ANNOUNCE = PACKET_RECEIVE_ANNOUNCE;\nexports.PACKET_REPORT = PACKET_REPORT;\nexports.PACKET_SEND = PACKET_SEND;\nexports.PACKET_SEND_DISCONNECT = PACKET_SEND_DISCONNECT;\nexports.PING_LOGGERS_POLL = PING_LOGGERS_POLL;\nexports.PIPE_CLOSE_MASK = PIPE_CLOSE_MASK;\nexports.PIPE_COUNTER_MASK = PIPE_COUNTER_MASK;\nexports.PIPE_METADATA_MASK = PIPE_METADATA_MASK;\nexports.PIPE_NODE_NAME = PIPE_NODE_NAME;\nexports.PIPE_PORT_SHIFT = PIPE_PORT_SHIFT;\nexports.PIPE_REPORT_NODE_NAME = PIPE_REPORT_NODE_NAME;\nexports.PROGRESS = PROGRESS;\nexports.Packet = Packet;\nexports.PromiseBuffer = PromiseBuffer;\nexports.PromiseQueue = PromiseQueue;\nexports.READING_SENT = READING_SENT;\nexports.REFRESH = REFRESH;\nexports.REFRESH_REGISTER_POLL = REFRESH_REGISTER_POLL;\nexports.REGISTER_NODE_NAME = REGISTER_NODE_NAME;\nexports.REGISTER_OPTIONAL_POLL_COUNT = REGISTER_OPTIONAL_POLL_COUNT;\nexports.REGISTER_POLL_FIRST_REPORT_INTERVAL = REGISTER_POLL_FIRST_REPORT_INTERVAL;\nexports.REGISTER_POLL_REPORT_INTERVAL = REGISTER_POLL_REPORT_INTERVAL;\nexports.REGISTER_POLL_REPORT_MAX_INTERVAL = REGISTER_POLL_REPORT_MAX_INTERVAL;\nexports.REGISTER_POLL_REPORT_VOLATILE_INTERVAL = REGISTER_POLL_REPORT_VOLATILE_INTERVAL;\nexports.REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL = REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL;\nexports.REGISTER_POLL_STREAMING_INTERVAL = REGISTER_POLL_STREAMING_INTERVAL;\nexports.REGISTER_PRE_GET = REGISTER_PRE_GET;\nexports.REGISTER_REFRESH_RETRY_0 = REGISTER_REFRESH_RETRY_0;\nexports.REGISTER_REFRESH_RETRY_1 = REGISTER_REFRESH_RETRY_1;\nexports.REGISTER_REFRESH_TIMEOUT = REGISTER_REFRESH_TIMEOUT;\nexports.REMOVE_LISTENER = REMOVE_LISTENER;\nexports.RENDER = RENDER;\nexports.REPORT_NODE_NAME = REPORT_NODE_NAME;\nexports.REPORT_RECEIVE = REPORT_RECEIVE;\nexports.REPORT_UPDATE = REPORT_UPDATE;\nexports.RESET = RESET;\nexports.RESET_IN_TIME_US = RESET_IN_TIME_US;\nexports.RESTART = RESTART;\nexports.ROLE_BOUND = ROLE_BOUND;\nexports.ROLE_CHANGE = ROLE_CHANGE;\nexports.ROLE_HAS_NO_SERVICE = ROLE_HAS_NO_SERVICE;\nexports.ROLE_MANAGER_CHANGE = ROLE_MANAGER_CHANGE;\nexports.ROLE_MANAGER_POLL = ROLE_MANAGER_POLL;\nexports.ROLE_UNBOUND = ROLE_UNBOUND;\nexports.RoleManager = RoleManager;\nexports.RoleManagerClient = RoleManagerClient;\nexports.SELF_ANNOUNCE = SELF_ANNOUNCE;\nexports.SERIAL_TRANSPORT = SERIAL_TRANSPORT;\nexports.SERVICE_CLIENT_ADDED = SERVICE_CLIENT_ADDED;\nexports.SERVICE_CLIENT_REMOVED = SERVICE_CLIENT_REMOVED;\nexports.SERVICE_MIXIN_NODE_NAME = SERVICE_MIXIN_NODE_NAME;\nexports.SERVICE_NODE_NAME = SERVICE_NODE_NAME;\nexports.SERVICE_PROVIDER_ADDED = SERVICE_PROVIDER_ADDED;\nexports.SERVICE_PROVIDER_REMOVED = SERVICE_PROVIDER_REMOVED;\nexports.SERVICE_TEST_NODE_NAME = SERVICE_TEST_NODE_NAME;\nexports.SG90_RESPONSE_SPEED = SG90_RESPONSE_SPEED;\nexports.SRV_ACCELEROMETER = SRV_ACCELEROMETER;\nexports.SRV_ARCADE_GAMEPAD = SRV_ARCADE_GAMEPAD;\nexports.SRV_ARCADE_SOUND = SRV_ARCADE_SOUND;\nexports.SRV_AZURE_IOT_HUB_HEALTH = SRV_AZURE_IOT_HUB_HEALTH;\nexports.SRV_BARCODE_READER = SRV_BARCODE_READER;\nexports.SRV_BAROMETER = SRV_BAROMETER;\nexports.SRV_BIT_RADIO = SRV_BIT_RADIO;\nexports.SRV_BOOTLOADER = SRV_BOOTLOADER;\nexports.SRV_BUTTON = SRV_BUTTON;\nexports.SRV_BUZZER = SRV_BUZZER;\nexports.SRV_CAPACITIVE_BUTTON = SRV_CAPACITIVE_BUTTON;\nexports.SRV_CHARACTER_SCREEN = SRV_CHARACTER_SCREEN;\nexports.SRV_CODAL_MESSAGE_BUS = SRV_CODAL_MESSAGE_BUS;\nexports.SRV_COLOR = SRV_COLOR;\nexports.SRV_COMPASS = SRV_COMPASS;\nexports.SRV_CONTROL = SRV_CONTROL;\nexports.SRV_DIMMER = SRV_DIMMER;\nexports.SRV_DISTANCE = SRV_DISTANCE;\nexports.SRV_DMX = SRV_DMX;\nexports.SRV_DOT_MATRIX = SRV_DOT_MATRIX;\nexports.SRV_E_CO2 = SRV_E_CO2;\nexports.SRV_FLEX = SRV_FLEX;\nexports.SRV_GYROSCOPE = SRV_GYROSCOPE;\nexports.SRV_HEART_RATE = SRV_HEART_RATE;\nexports.SRV_HID_ADAPTER = SRV_HID_ADAPTER;\nexports.SRV_HID_KEYBOARD = SRV_HID_KEYBOARD;\nexports.SRV_HID_MOUSE = SRV_HID_MOUSE;\nexports.SRV_HUMIDITY = SRV_HUMIDITY;\nexports.SRV_ILLUMINANCE = SRV_ILLUMINANCE;\nexports.SRV_INDEXED_SCREEN = SRV_INDEXED_SCREEN;\nexports.SRV_INFRASTRUCTURE = SRV_INFRASTRUCTURE;\nexports.SRV_JOYSTICK = SRV_JOYSTICK;\nexports.SRV_LED = SRV_LED;\nexports.SRV_LED_PIXEL = SRV_LED_PIXEL;\nexports.SRV_LIGHT_LEVEL = SRV_LIGHT_LEVEL;\nexports.SRV_LOGGER = SRV_LOGGER;\nexports.SRV_MAGNETOMETER = SRV_MAGNETOMETER;\nexports.SRV_MATRIX_KEYPAD = SRV_MATRIX_KEYPAD;\nexports.SRV_MICROPHONE = SRV_MICROPHONE;\nexports.SRV_MIDI_OUTPUT = SRV_MIDI_OUTPUT;\nexports.SRV_MODEL_RUNNER = SRV_MODEL_RUNNER;\nexports.SRV_MOTION = SRV_MOTION;\nexports.SRV_MOTOR = SRV_MOTOR;\nexports.SRV_MULTITOUCH = SRV_MULTITOUCH;\nexports.SRV_POTENTIOMETER = SRV_POTENTIOMETER;\nexports.SRV_POWER = SRV_POWER;\nexports.SRV_PRESSURE_BUTTON = SRV_PRESSURE_BUTTON;\nexports.SRV_PROTO_TEST = SRV_PROTO_TEST;\nexports.SRV_PULSE_OXIMETER = SRV_PULSE_OXIMETER;\nexports.SRV_RAIN_GAUGE = SRV_RAIN_GAUGE;\nexports.SRV_REAL_TIME_CLOCK = SRV_REAL_TIME_CLOCK;\nexports.SRV_REFLECTED_LIGHT = SRV_REFLECTED_LIGHT;\nexports.SRV_RELAY = SRV_RELAY;\nexports.SRV_RNG = SRV_RNG;\nexports.SRV_ROLE_MANAGER = SRV_ROLE_MANAGER;\nexports.SRV_ROTARY_ENCODER = SRV_ROTARY_ENCODER;\nexports.SRV_ROVER = SRV_ROVER;\nexports.SRV_SENSOR_AGGREGATOR = SRV_SENSOR_AGGREGATOR;\nexports.SRV_SERVO = SRV_SERVO;\nexports.SRV_SETTINGS = SRV_SETTINGS;\nexports.SRV_SEVEN_SEGMENT_DISPLAY = SRV_SEVEN_SEGMENT_DISPLAY;\nexports.SRV_SOIL_MOISTURE = SRV_SOIL_MOISTURE;\nexports.SRV_SOLENOID = SRV_SOLENOID;\nexports.SRV_SOUND_LEVEL = SRV_SOUND_LEVEL;\nexports.SRV_SOUND_PLAYER = SRV_SOUND_PLAYER;\nexports.SRV_SOUND_SPECTRUM = SRV_SOUND_SPECTRUM;\nexports.SRV_SPEECH_SYNTHESIS = SRV_SPEECH_SYNTHESIS;\nexports.SRV_SWITCH = SRV_SWITCH;\nexports.SRV_TCP = SRV_TCP;\nexports.SRV_THERMOCOUPLE = SRV_THERMOCOUPLE;\nexports.SRV_THERMOMETER = SRV_THERMOMETER;\nexports.SRV_TRAFFIC_LIGHT = SRV_TRAFFIC_LIGHT;\nexports.SRV_TVOC = SRV_TVOC;\nexports.SRV_UV_INDEX = SRV_UV_INDEX;\nexports.SRV_VERIFIED_TELEMETRY = SRV_VERIFIED_TELEMETRY;\nexports.SRV_VIBRATION_MOTOR = SRV_VIBRATION_MOTOR;\nexports.SRV_WATER_LEVEL = SRV_WATER_LEVEL;\nexports.SRV_WEIGHT_SCALE = SRV_WEIGHT_SCALE;\nexports.SRV_WIFI = SRV_WIFI;\nexports.SRV_WIND_DIRECTION = SRV_WIND_DIRECTION;\nexports.SRV_WIND_SPEED = SRV_WIND_SPEED;\nexports.START = START;\nexports.STOP = STOP;\nexports.STREAMING_DEFAULT_INTERVAL = STREAMING_DEFAULT_INTERVAL;\nexports.SettingsClient = SettingsClient;\nexports.TIMEOUT = TIMEOUT;\nexports.TIMEOUT_DISCONNECT = TIMEOUT_DISCONNECT;\nexports.TRACE = TRACE;\nexports.TRACE_FILTER_HORIZON = TRACE_FILTER_HORIZON;\nexports.TRANSPORT_CONNECT_RETRY_DELAY = TRANSPORT_CONNECT_RETRY_DELAY;\nexports.TRANSPORT_PULSE_TIMEOUT = TRANSPORT_PULSE_TIMEOUT;\nexports.TYPESCRIPT_STATIC_NAMESPACE = TYPESCRIPT_STATIC_NAMESPACE;\nexports.Trace = Trace;\nexports.TracePlayer = TracePlayer;\nexports.TraceRecorder = TraceRecorder;\nexports.TraceView = TraceView;\nexports.Transport = Transport;\nexports.UNBOUND = UNBOUND;\nexports.USB_FILTERS = USB_FILTERS;\nexports.USB_TRANSPORT = USB_TRANSPORT;\nexports.VIRTUAL_DEVICE_NODE_NAME = VIRTUAL_DEVICE_NODE_NAME;\nexports.WEBSOCKET_TRANSPORT = WEBSOCKET_TRANSPORT;\nexports.WEB_SERIAL_FILTERS = WEB_SERIAL_FILTERS;\nexports.WallClockScheduler = WallClockScheduler;\nexports.WifiServer = WifiServer;\nexports.addCustomServiceSpecification = addCustomServiceSpecification;\nexports.addServiceProvider = addServiceProvider;\nexports.arrayConcatMany = arrayConcatMany;\nexports.arrayShuffle = arrayShuffle;\nexports.assert = assert;\nexports.bufferConcat = bufferConcat;\nexports.bufferConcatMany = bufferConcatMany;\nexports.bufferEq = bufferEq;\nexports.bufferToArray = bufferToArray;\nexports.bufferToString = bufferToString;\nexports.camelize = camelize;\nexports.capitalize = capitalize;\nexports.clampToStorage = clampToStorage;\nexports.cleanStack = cleanStack;\nexports.clearCustomServiceSpecifications = clearCustomServiceSpecifications;\nexports.clone = clone;\nexports.commandName = commandName;\nexports.concatBufferArray = concatBufferArray;\nexports.converters = converters;\nexports.crc = crc;\nexports.createBluetoothTransport = createBluetoothTransport;\nexports.createNodeUSBOptions = createNodeUSBOptions;\nexports.createUSBBus = createUSBBus;\nexports.createUSBTransport = createUSBTransport;\nexports.createUSBWorkerTransport = createUSBWorkerTransport;\nexports.createWebBus = createWebBus;\nexports.createWebSerialBus = createWebSerialBus;\nexports.createWebSerialTransport = createWebSerialTransport;\nexports.dashify = dashify;\nexports.dateToClock = dateToClock;\nexports.debounce = debounce;\nexports.debounceAsync = debounceAsync;\nexports.decodeMember = decodeMember;\nexports.decodeMembers = decodeMembers;\nexports.decodePacketData = decodePacketData;\nexports.decodeU32LE = decodeU32LE;\nexports.delay = delay;\nexports.dependencyId = dependencyId;\nexports.deviceServiceName = deviceServiceName;\nexports.deviceSpecificationFromIdentifier = deviceSpecificationFromIdentifier;\nexports.deviceSpecificationFromProductIdentifier = deviceSpecificationFromProductIdentifier;\nexports.deviceSpecifications = deviceSpecifications;\nexports.deviceSpecificationsForService = deviceSpecificationsForService;\nexports.ellipseJoin = ellipseJoin;\nexports.encodeU32LE = encodeU32LE;\nexports.encodings = encodings;\nexports.errorCode = errorCode;\nexports.escapeDeviceIdentifier = escapeDeviceIdentifier;\nexports.escapeDeviceNameIdentifier = escapeDeviceNameIdentifier;\nexports.flagsToValue = flagsToValue;\nexports.flashFirmwareBlob = flashFirmwareBlob;\nexports.flatClone = flatClone;\nexports.fnv1 = fnv1;\nexports.fromHex = fromHex;\nexports.fromUTF8 = fromUTF8;\nexports.generateDeviceSpecificationId = generateDeviceSpecificationId;\nexports.getNumber = getNumber;\nexports.groupBy = groupBy;\nexports.hash = hash;\nexports.hexDump = hexDump;\nexports.hexNum = hexNum;\nexports.hsvToCss = hsvToCss;\nexports.humanify = humanify;\nexports.identifierToUrlPath = identifierToUrlPath;\nexports.idiv = idiv;\nexports.inIFrame = inIFrame;\nexports.intOfBuffer = intOfBuffer;\nexports.isAckError = isAckError;\nexports.isActuator = isActuator;\nexports.isBufferEmpty = isBufferEmpty;\nexports.isCancelError = isCancelError;\nexports.isCommand = isCommand;\nexports.isConstRegister = isConstRegister;\nexports.isEvent = isEvent;\nexports.isHighLevelEvent = isHighLevelEvent;\nexports.isHighLevelRegister = isHighLevelRegister;\nexports.isInfrastructure = isInfrastructure;\nexports.isInstanceOf = isInstanceOf;\nexports.isIntegerType = isIntegerType;\nexports.isIntensity = isIntensity;\nexports.isNumericType = isNumericType;\nexports.isOptionalReadingRegisterCode = isOptionalReadingRegisterCode;\nexports.isPipeReport = isPipeReport;\nexports.isPipeReportOf = isPipeReportOf;\nexports.isReading = isReading;\nexports.isRegister = isRegister;\nexports.isReportOf = isReportOf;\nexports.isSensor = isSensor;\nexports.isSet = isSet;\nexports.isValue = isValue;\nexports.isValueOrIntensity = isValueOrIntensity;\nexports.isWebBluetoothEnabled = isWebBluetoothEnabled;\nexports.isWebBluetoothSupported = isWebBluetoothSupported;\nexports.isWebSerialEnabled = isWebSerialEnabled;\nexports.isWebSerialSupported = isWebSerialSupported;\nexports.isWebTransportSupported = isWebTransportSupported;\nexports.isWebUSBEnabled = isWebUSBEnabled;\nexports.isWebUSBSupported = isWebUSBSupported;\nexports.jdpack = jdpack;\nexports.jdpackEqual = jdpackEqual;\nexports.jdunpack = jdunpack;\nexports.jsonCopyFrom = jsonCopyFrom;\nexports.lightEncode = lightEncode;\nexports.loadServiceSpecifications = loadServiceSpecifications;\nexports.memberValueToString = memberValueToString;\nexports.memcpy = memcpy;\nexports.modifierCodes = modifierCodes;\nexports.normalizeDeviceSpecification = normalizeDeviceSpecification;\nexports.numberFormatFromStorageType = numberFormatFromStorageType;\nexports.numberFormatToStorageType = numberFormatToStorageType;\nexports.objectToUnpacked = objectToUnpacked;\nexports.packArguments = packArguments;\nexports.packFormat = packFormat;\nexports.packInfo = packInfo;\nexports.packetSpeedTest = packetSpeedTest;\nexports.parseDeviceId = parseDeviceId;\nexports.parseFirmwareFile = parseFirmwareFile;\nexports.parseLogicLog = parseLogicLog;\nexports.parsePacketFilter = parsePacketFilter;\nexports.parseServiceSpecificationMarkdownToJSON = parseServiceSpecificationMarkdownToJSON;\nexports.parseTrace = parseTrace;\nexports.parseUF2Firmware = parseUF2Firmware;\nexports.pick = pick;\nexports.prettyDuration = prettyDuration;\nexports.prettyMemberUnit = prettyMemberUnit;\nexports.prettyMicroDuration = prettyMicroDuration;\nexports.prettySize = prettySize;\nexports.prettyUnit = prettyUnit;\nexports.printPacket = printPacket;\nexports.randomRange = randomRange;\nexports.range = range;\nexports.read16 = read16;\nexports.read32 = read32;\nexports.readBlobToText = readBlobToText;\nexports.readBlobToUint8Array = readBlobToUint8Array;\nexports.renderHidMouseButtons = renderHidMouseButtons;\nexports.renderKeyboardKey = renderKeyboardKey;\nexports.replayLogicLog = replayLogicLog;\nexports.resolveUnit = resolveUnit;\nexports.reverseSelectors = reverseSelectors;\nexports.rgbToHtmlColor = rgbToHtmlColor;\nexports.roundWithPrecision = roundWithPrecision;\nexports.scaleFloatToInt = scaleFloatToInt;\nexports.scaleIntToFloat = scaleIntToFloat;\nexports.secondaryUnitConverters = secondaryUnitConverters;\nexports.selectors = selectors;\nexports.sendStayInBootloaderCommand = sendStayInBootloaderCommand;\nexports.sensorSpecifications = sensorSpecifications;\nexports.serviceClass = serviceClass;\nexports.serviceMap = serviceMap;\nexports.serviceName = serviceName;\nexports.serviceProviderDefinitionFromServiceClass = serviceProviderDefinitionFromServiceClass;\nexports.serviceShortIdOrClass = serviceShortIdOrClass;\nexports.serviceSpecificationFromClassIdentifier = serviceSpecificationFromClassIdentifier;\nexports.serviceSpecificationFromName = serviceSpecificationFromName;\nexports.serviceSpecificationToServiceTwinSpecification = serviceSpecificationToServiceTwinSpecification;\nexports.serviceSpecifications = serviceSpecifications;\nexports.serviceSpecificationsWithServiceTwinSpecification = serviceSpecificationsWithServiceTwinSpecification;\nexports.setAckError = setAckError;\nexports.setNumber = setNumber;\nexports.shortDeviceId = shortDeviceId;\nexports.signal = signal;\nexports.sizeOfNumberFormat = sizeOfNumberFormat;\nexports.snakify = snakify;\nexports.snapshotSensors = snapshotSensors;\nexports.splitFilter = splitFilter;\nexports.stack = stack;\nexports.startDevTools = startDevTools;\nexports.startRoles = startRoles;\nexports.startServiceProviderFromServiceClass = startServiceProviderFromServiceClass;\nexports.storageTypeRange = storageTypeRange;\nexports.strcmp = strcmp;\nexports.stringToBuffer = stringToBuffer;\nexports.stringToUint8Array = stringToUint8Array;\nexports.throttle = throttle;\nexports.throwError = throwError;\nexports.toArray = toArray;\nexports.toAscii = toAscii;\nexports.toFullHex = toFullHex;\nexports.toHex = toHex;\nexports.toMap = toMap;\nexports.toUTF8 = toUTF8;\nexports.toggleBit = toggleBit;\nexports.tonePayload = tonePayload;\nexports.tryParseMemberValue = tryParseMemberValue;\nexports.uint8ArrayToString = uint8ArrayToString;\nexports.uintOfBuffer = uintOfBuffer;\nexports.unique = unique;\nexports.uniqueMap = uniqueMap;\nexports.uniqueName = uniqueName;\nexports.unitDescription = unitDescription;\nexports.units = units;\nexports.unpackedToObject = unpackedToObject;\nexports.updateApplicable = updateApplicable;\nexports.usbRequestDevice = usbRequestDevice;\nexports.valueToFlags = valueToFlags;\nexports.wrapDecodedMembers = wrapDecodedMembers;\nexports.write16 = write16;\nexports.write32 = write32;\n","// Service: Common registers and commands\nexport const ANNOUNCE_INTERVAL = 0x1f4\n\nexport enum SystemReadingThreshold { // uint8_t\n    Neutral = 0x1,\n    Inactive = 0x2,\n    Active = 0x3,\n}\n\n\nexport enum SystemStatusCodes { // uint16_t\n    Ready = 0x0,\n    Initializing = 0x1,\n    Calibrating = 0x2,\n    Sleeping = 0x3,\n    WaitingForInput = 0x4,\n    CalibrationNeeded = 0x64,\n}\n\nexport enum SystemCmd {\n    /**\n     * No args. Enumeration data for control service; service-specific advertisement data otherwise.\n     * Control broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\n     */\n    Announce = 0x0,\n\n    /**\n     * No args. Registers number `N` is fetched by issuing command `0x1000 | N`.\n     * The report format is the same as the format of the register.\n     */\n    GetRegister = 0x1000,\n\n    /**\n     * No args. Registers number `N` is set by issuing command `0x2000 | N`, with the format\n     * the same as the format of the register.\n     */\n    SetRegister = 0x2000,\n\n    /**\n     * Event from sensor or a broadcast service.\n     *\n     * ```\n     * const [eventId, eventArgument] = jdunpack<[number, number]>(buf, \"u32 u32\")\n     * ```\n     */\n    Event = 0x1,\n\n    /**\n     * No args. Request to calibrate a sensor. The report indicates the calibration is done.\n     */\n    Calibrate = 0x2,\n}\n\nexport enum SystemReg {\n    /**\n     * Read-write uint32_t. This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Intensity = 0x1,\n\n    /**\n     * Read-write int32_t. The primary value of actuator (eg. servo pulse length, or motor duty cycle).\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Value = 0x2,\n\n    /**\n     * Constant int32_t. The lowest value that can be reported for the value register.\n     *\n     * ```\n     * const [minValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MinValue = 0x110,\n\n    /**\n     * Constant int32_t. The highest value that can be reported for the value register.\n     *\n     * ```\n     * const [maxValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MaxValue = 0x111,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the service, in mA.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    StreamingSamples = 0x3,\n\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingInterval = 0x4,\n\n    /**\n     * Read-only int32_t. Read-only value of the sensor, also reported in streaming.\n     *\n     * ```\n     * const [reading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Reading = 0x101,\n\n    /**\n     * Constant int32_t. The lowest value that can be reported by the sensor.\n     *\n     * ```\n     * const [minReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MinReading = 0x104,\n\n    /**\n     * Constant int32_t. The highest value that can be reported by the sensor.\n     *\n     * ```\n     * const [maxReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MaxReading = 0x105,\n\n    /**\n     * Read-only uint32_t. The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\n     * send a report in the same frame of the ``reading`` report.\n     *\n     * ```\n     * const [readingError] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ReadingError = 0x106,\n\n    /**\n     * Constant uint32_t. Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [readingResolution] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ReadingResolution = 0x108,\n\n    /**\n     * Read-write int32_t. Threshold when reading data gets inactive and triggers a ``inactive``.\n     *\n     * ```\n     * const [inactiveThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    InactiveThreshold = 0x5,\n\n    /**\n     * Read-write int32_t. Thresholds when reading data gets active and triggers a ``active`` event.\n     *\n     * ```\n     * const [activeThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ActiveThreshold = 0x6,\n\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingPreferredInterval = 0x102,\n\n    /**\n     * Constant uint32_t. The hardware variant of the service.\n     * For services which support this, there's an enum defining the meaning.\n     *\n     * ```\n     * const [variant] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCode = 0x103,\n\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    InstanceName = 0x109,\n}\n\nexport enum SystemEvent {\n    /**\n     * Notifies that the service has been activated (eg. button pressed, network connected, etc.)\n     */\n    Active = 0x1,\n\n    /**\n     * Notifies that the service has been dis-activated.\n     */\n    Inactive = 0x2,\n\n    /**\n     * Notifies that the some state of the service changed.\n     */\n    Change = 0x3,\n\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCodeChanged = 0x4,\n\n    /**\n     * Notifies that the threshold is back between ``low`` and ``high``.\n     */\n    Neutral = 0x7,\n}\n\n// Service: Base service\nexport enum BaseReg {\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     * It often corresponds to what's printed on the device:\n     * for example, `A` for button A, or `S0` for servo channel 0.\n     * Words like `left` should be avoided because of localization issues (unless they are printed on the device).\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    InstanceName = 0x109,\n\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet. If a service implements this register,\n     * it should also support the ``status_code_changed`` event defined below.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCode = 0x103,\n}\n\nexport enum BaseEvent {\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCodeChanged = 0x4,\n}\n\n// Service: Sensor\nexport enum SensorReg {\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    StreamingSamples = 0x3,\n\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingInterval = 0x4,\n\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingPreferredInterval = 0x102,\n}\n\n// Service: Accelerometer\nexport const SRV_ACCELEROMETER = 0x1f140409\nexport enum AccelerometerReg {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    Forces = 0x101,\n\n    /**\n     * Read-only g i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    ForcesError = 0x106,\n\n    /**\n     * Read-write g i12.20 (int32_t). Configures the range forces detected.\n     * Read-back after setting to get current value.\n     *\n     * ```\n     * const [maxForce] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    MaxForce = 0x80,\n}\n\nexport enum AccelerometerEvent {\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltUp = 0x81,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltDown = 0x82,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltLeft = 0x83,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltRight = 0x84,\n\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    FaceUp = 0x85,\n\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    FaceDown = 0x86,\n\n    /**\n     * Emitted when total force acting on accelerometer is much less than 1g.\n     */\n    Freefall = 0x87,\n\n    /**\n     * Emitted when forces change violently a few times.\n     */\n    Shake = 0x8b,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force2g = 0x8c,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force3g = 0x88,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force6g = 0x89,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force8g = 0x8a,\n}\n\n// Service: Arcade Gamepad\nexport const SRV_ARCADE_GAMEPAD = 0x1deaa06e\n\nexport enum ArcadeGamepadButton { // uint8_t\n    Left = 0x1,\n    Up = 0x2,\n    Right = 0x3,\n    Down = 0x4,\n    A = 0x5,\n    B = 0x6,\n    Menu = 0x7,\n    Select = 0x8,\n    Reset = 0x9,\n    Exit = 0xa,\n}\n\nexport enum ArcadeGamepadReg {\n    /**\n     * Indicates which buttons are currently active (pressed).\n     * `pressure` should be `0xff` for digital buttons, and proportional for analog ones.\n     *\n     * ```\n     * const [rest] = jdunpack<[([ArcadeGamepadButton, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [button, pressure] = rest[0]\n     * ```\n     */\n    Buttons = 0x101,\n\n    /**\n     * Constant. Indicates number of players supported and which buttons are present on the controller.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton[]]>(buf, \"u8[]\")\n     * ```\n     */\n    AvailableButtons = 0x180,\n}\n\nexport enum ArcadeGamepadEvent {\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from inactive to active.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from active to inactive.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    Up = 0x2,\n}\n\n// Service: Arcade sound\nexport const SRV_ARCADE_SOUND = 0x1fc63606\nexport enum ArcadeSoundCmd {\n    /**\n     * Argument: samples bytes. Play samples, which are single channel, signed 16-bit little endian values.\n     *\n     * ```\n     * const [samples] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Play = 0x80,\n}\n\nexport enum ArcadeSoundReg {\n    /**\n     * Read-write Hz u22.10 (uint32_t). Get or set playback sample rate (in samples per second).\n     * If you set it, read it back, as the value may be rounded up or down.\n     *\n     * ```\n     * const [sampleRate] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    SampleRate = 0x80,\n\n    /**\n     * Constant B uint32_t. The size of the internal audio buffer.\n     *\n     * ```\n     * const [bufferSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BufferSize = 0x180,\n\n    /**\n     * Read-only B uint32_t. How much data is still left in the buffer to play.\n     * Clients should not send more data than `buffer_size - buffer_pending`,\n     * but can keep the `buffer_pending` as low as they want to ensure low latency\n     * of audio playback.\n     *\n     * ```\n     * const [bufferPending] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BufferPending = 0x181,\n}\n\n// Service: Azure IoT Hub Health\nexport const SRV_AZURE_IOT_HUB_HEALTH = 0x1462eefc\n\nexport enum AzureIotHubHealthConnectionStatus { // uint16_t\n    Connected = 0x1,\n    Disconnected = 0x2,\n    Connecting = 0x3,\n    Disconnecting = 0x4,\n}\n\nexport enum AzureIotHubHealthReg {\n    /**\n     * Read-only string (bytes). Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured\n     *\n     * ```\n     * const [hubName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    HubName = 0x180,\n\n    /**\n     * Read-only string (bytes). Device identifier in Azure Iot Hub\n     *\n     * ```\n     * const [hubDeviceId] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    HubDeviceId = 0x181,\n\n    /**\n     * Read-only ConnectionStatus (uint16_t). Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    ConnectionStatus = 0x182,\n}\n\nexport enum AzureIotHubHealthCmd {\n    /**\n     * No args. Starts a connection to the IoT hub service\n     */\n    Connect = 0x81,\n\n    /**\n     * No args. Starts disconnecting from the IoT hub service\n     */\n    Disconnect = 0x82,\n\n    /**\n     * Argument: connection_string string (bytes). Restricted command to override the existing connection string to the Azure IoT Hub.\n     *\n     * ```\n     * const [connectionString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SetConnectionString = 0x86,\n}\n\nexport enum AzureIotHubHealthEvent {\n    /**\n     * Argument: connection_status ConnectionStatus (uint16_t). Raised when the connection status changes\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    ConnectionStatusChange = 0x3,\n}\n\n// Service: Barcode reader\nexport const SRV_BARCODE_READER = 0x1c739e6c\n\nexport enum BarcodeReaderFormat { // uint8_t\n    Aztec = 0x1,\n    Code128 = 0x2,\n    Code39 = 0x3,\n    Code93 = 0x4,\n    Codabar = 0x5,\n    DataMatrix = 0x6,\n    Ean13 = 0x8,\n    Ean8 = 0x9,\n    ITF = 0xa,\n    Pdf417 = 0xb,\n    QrCode = 0xc,\n    UpcA = 0xd,\n    UpcE = 0xe,\n}\n\nexport enum BarcodeReaderReg {\n    /**\n     * Read-write bool (uint8_t). Turns on or off the detection of barcodes.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Constant. Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\n     *\n     * ```\n     * const [format] = jdunpack<[BarcodeReaderFormat[]]>(buf, \"u8[]\")\n     * ```\n     */\n    Formats = 0x180,\n}\n\nexport enum BarcodeReaderEvent {\n    /**\n     * Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\n     * In case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\n     *\n     * ```\n     * const [format, data] = jdunpack<[BarcodeReaderFormat, string]>(buf, \"u8 s\")\n     * ```\n     */\n    Detect = 0x1,\n}\n\n// Service: Barometer\nexport const SRV_BAROMETER = 0x1e117cea\nexport enum BarometerReg {\n    /**\n     * Read-only hPa u22.10 (uint32_t). The air pressure.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Pressure = 0x101,\n\n    /**\n     * Read-only hPa u22.10 (uint32_t). The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\n     *\n     * ```\n     * const [pressureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    PressureError = 0x106,\n}\n\n// Service: bit:radio\nexport const SRV_BIT_RADIO = 0x1ac986cf\nexport enum BitRadioReg {\n    /**\n     * Read-write bool (uint8_t). Turns on/off the radio antenna.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write uint8_t. Group used to filter packets\n     *\n     * ```\n     * const [group] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Group = 0x80,\n\n    /**\n     * Read-write uint8_t. Antenna power to increase or decrease range.\n     *\n     * ```\n     * const [transmissionPower] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    TransmissionPower = 0x81,\n\n    /**\n     * Read-write uint8_t. Change the transmission and reception band of the radio to the given channel.\n     *\n     * ```\n     * const [frequencyBand] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    FrequencyBand = 0x82,\n}\n\nexport enum BitRadioCmd {\n    /**\n     * Argument: message string (bytes). Sends a string payload as a radio message, maximum 18 characters.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SendString = 0x80,\n\n    /**\n     * Argument: value f64 (uint64_t). Sends a double precision number payload as a radio message\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"f64\")\n     * ```\n     */\n    SendNumber = 0x81,\n\n    /**\n     * Sends a double precision number and a name payload as a radio message\n     *\n     * ```\n     * const [value, name] = jdunpack<[number, string]>(buf, \"f64 s\")\n     * ```\n     */\n    SendValue = 0x82,\n\n    /**\n     * Argument: data bytes. Sends a payload of bytes as a radio message\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SendBuffer = 0x83,\n\n    /**\n     * Raised when a string packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, message] = jdunpack<[number, number, number, string]>(buf, \"u32 u32 i8 x[1] s\")\n     * ```\n     */\n    StringReceived = 0x90,\n\n    /**\n     * Raised when a number packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, value, name] = jdunpack<[number, number, number, number, string]>(buf, \"u32 u32 i8 x[3] f64 s\")\n     * ```\n     */\n    NumberReceived = 0x91,\n\n    /**\n     * Raised when a buffer packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, data] = jdunpack<[number, number, number, Uint8Array]>(buf, \"u32 u32 i8 x[1] b\")\n     * ```\n     */\n    BufferReceived = 0x92,\n}\n\n// Service: Bootloader\nexport const SRV_BOOTLOADER = 0x1ffa9948\n\nexport enum BootloaderError { // uint32_t\n    NoError = 0x0,\n    PacketTooSmall = 0x1,\n    OutOfFlashableRange = 0x2,\n    InvalidPageOffset = 0x3,\n    NotPageAligned = 0x4,\n}\n\nexport enum BootloaderCmd {\n    /**\n     * No args. The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\n     * that \"fits\" this device.\n     */\n    Info = 0x0,\n\n    /**\n     * report Info\n     * ```\n     * const [serviceClass, pageSize, flashableSize, productIdentifer] = jdunpack<[number, number, number, number]>(buf, \"u32 u32 u32 u32\")\n     * ```\n     */\n\n    /**\n     * Argument: session_id uint32_t. The flashing server should generate a random id, and use this command to set it.\n     *\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SetSession = 0x81,\n\n    /**\n     * report SetSession\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n\n    /**\n     * Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\n     * Each chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\n     * and is included in response.\n     * Only the last chunk causes writing to flash and elicits response.\n     *\n     * ```\n     * const [pageAddress, pageOffset, chunkNo, chunkMax, sessionId, pageData] = jdunpack<[number, number, number, number, number, Uint8Array]>(buf, \"u32 u16 u8 u8 u32 x[4] x[4] x[4] x[4] b[208]\")\n     * ```\n     */\n    PageData = 0x80,\n\n    /**\n     * report PageData\n     * ```\n     * const [sessionId, pageError, pageAddress] = jdunpack<[number, BootloaderError, number]>(buf, \"u32 u32 u32\")\n     * ```\n     */\n}\n\n// Service: Button\nexport const SRV_BUTTON = 0x1473a263\nexport enum ButtonReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the pressure state of the button, where ``0`` is open.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Pressure = 0x101,\n\n    /**\n     * Constant bool (uint8_t). Indicates if the button provides analog ``pressure`` readings.\n     *\n     * ```\n     * const [analog] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Analog = 0x180,\n\n    /**\n     * Read-only bool (uint8_t). Determines if the button is pressed currently.\n     */\n    Pressed = 0x181,\n}\n\nexport enum ButtonEvent {\n    /**\n     * Emitted when button goes from inactive to active.\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: time ms uint32_t. Emitted when button goes from active to inactive. The 'time' parameter\n     * records the amount of time between the down and up events.\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Up = 0x2,\n\n    /**\n     * Argument: time ms uint32_t. Emitted when the press time is greater than 500ms, and then at least every 500ms\n     * as long as the button remains pressed. The 'time' parameter records the the amount of time\n     * that the button has been held (since the down event).\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Hold = 0x81,\n}\n\n// Service: Buzzer\nexport const SRV_BUZZER = 0x1b57b1d7\nexport enum BuzzerReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). The volume (duty cycle) of the buzzer.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Volume = 0x1,\n}\n\nexport enum BuzzerCmd {\n    /**\n     * Play a PWM tone with given period and duty for given duration.\n     * The duty is scaled down with `volume` register.\n     * To play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\n     * to send `P = 1000000 / F` and `D = P * V / 2`.\n     *\n     * ```\n     * const [period, duty, duration] = jdunpack<[number, number, number]>(buf, \"u16 u16 u16\")\n     * ```\n     */\n    PlayTone = 0x80,\n\n    /**\n     * Play a note at the given frequency and volume.\n     */\n    PlayNote = 0x81,\n}\n\n// Service: Capacitive Button\nexport const SRV_CAPACITIVE_BUTTON = 0x2865adc9\nexport enum CapacitiveButtonReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Threshold = 0x6,\n}\n\nexport enum CapacitiveButtonCmd {\n    /**\n     * No args. Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button.\n     * The report indicates the calibration is done.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Character Screen\nexport const SRV_CHARACTER_SCREEN = 0x1f37c56a\n\nexport enum CharacterScreenVariant { // uint8_t\n    LCD = 0x1,\n    OLED = 0x2,\n    Braille = 0x3,\n}\n\n\nexport enum CharacterScreenTextDirection { // uint8_t\n    LeftToRight = 0x1,\n    RightToLeft = 0x2,\n}\n\nexport enum CharacterScreenReg {\n    /**\n     * Read-write string (bytes). Text to show. Use `\\n` to break lines.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Message = 0x2,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Brightness of the screen. `0` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of character LED screen.\n     *\n     * ```\n     * const [variant] = jdunpack<[CharacterScreenVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Read-write TextDirection (uint8_t). Specifies the RTL or LTR direction of the text.\n     *\n     * ```\n     * const [textDirection] = jdunpack<[CharacterScreenTextDirection]>(buf, \"u8\")\n     * ```\n     */\n    TextDirection = 0x82,\n\n    /**\n     * Constant # uint8_t. Gets the number of rows.\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Rows = 0x180,\n\n    /**\n     * Constant # uint8_t. Gets the number of columns.\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Columns = 0x181,\n}\n\nexport enum CharacterScreenCmd {\n    /**\n     * Overrides the content of a single line at a 0-based index.\n     *\n     * ```\n     * const [index, message] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    SetLine = 0x80,\n\n    /**\n     * No args. Clears all text from the display.\n     */\n    Clear = 0x81,\n}\n\n// Service: CODAL Message Bus\nexport const SRV_CODAL_MESSAGE_BUS = 0x121ff81d\nexport enum CodalMessageBusCmd {\n    /**\n     * Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    Send = 0x80,\n}\n\nexport enum CodalMessageBusEvent {\n    /**\n     * Raised by the server is triggered by the server. The filtering logic of which event to send over JACDAC is up to the server implementation.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    Message = 0x80,\n}\n\n// Service: Color\nexport const SRV_COLOR = 0x1630d567\nexport enum ColorReg {\n    /**\n     * Detected color in the RGB color space.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u0.16 u0.16 u0.16\")\n     * ```\n     */\n    Color = 0x101,\n}\n\n// Service: Compass\nexport const SRV_COMPASS = 0x15b7b9bf\nexport enum CompassReg {\n    /**\n     * Read-only ° u16.16 (uint32_t). The heading with respect to the magnetic north.\n     *\n     * ```\n     * const [heading] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Heading = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the sensor. Turning on the sensor may start a calibration sequence.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-only ° u16.16 (uint32_t). Error on the heading reading\n     *\n     * ```\n     * const [headingError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeadingError = 0x106,\n}\n\nexport enum CompassCmd {\n    /**\n     * No args. Starts a calibration sequence for the compass.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Control\nexport const SRV_CONTROL = 0x0\n\nexport enum ControlAnnounceFlags { // uint16_t\n    RestartCounterSteady = 0xf,\n    RestartCounter1 = 0x1,\n    RestartCounter2 = 0x2,\n    RestartCounter4 = 0x4,\n    RestartCounter8 = 0x8,\n    StatusLightNone = 0x0,\n    StatusLightMono = 0x10,\n    StatusLightRgbNoFade = 0x20,\n    StatusLightRgbFade = 0x30,\n    SupportsACK = 0x100,\n    SupportsBroadcast = 0x200,\n    SupportsFrames = 0x400,\n    IsClient = 0x800,\n}\n\nexport enum ControlCmd {\n    /**\n     * No args. The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\n     * If this number ever goes down, it indicates that the device restarted.\n     * `service_class` indicates class identifier for each service index (service index `0` is always control, so it's\n     * skipped in this enumeration).\n     * `packet_count` indicates the number of packets sent by the current device since last announce,\n     * including the current announce packet (it is always 0 if this feature is not supported).\n     * The command form can be used to induce report, which is otherwise broadcast every 500ms.\n     */\n    Services = 0x0,\n\n    /**\n     * report Services\n     * ```\n     * const [flags, packetCount, serviceClass] = jdunpack<[ControlAnnounceFlags, number, number[]]>(buf, \"u16 u8 x[1] u32[]\")\n     * ```\n     */\n\n    /**\n     * No args. Do nothing. Always ignored. Can be used to test ACKs.\n     */\n    Noop = 0x80,\n\n    /**\n     * No args. Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\n     * For devices with status light (this can be discovered in the announce flags), the client should\n     * send the sequence of status light command to generate the identify animation.\n     */\n    Identify = 0x81,\n\n    /**\n     * No args. Reset device. ACK may or may not be sent.\n     */\n    Reset = 0x82,\n\n    /**\n     * The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\n     * to `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\n     * The `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n     *\n     * ```\n     * const [numResponses, startCounter, size] = jdunpack<[number, number, number]>(buf, \"u32 u32 u8\")\n     * ```\n     */\n    FloodPing = 0x83,\n\n    /**\n     * report FloodPing\n     * ```\n     * const [counter, dummyPayload] = jdunpack<[number, Uint8Array]>(buf, \"u32 b\")\n     * ```\n     */\n\n    /**\n     * Initiates a color transition of the status light from its current color to the one specified.\n     * The transition will complete in about `512 / speed` frames\n     * (each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\n     * As a special case, if speed is `0` the transition is immediate.\n     * If MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\n     * If a monochrome LEDs is fitted, the average value of ``red``, ``green``, ``blue`` is used.\n     * If intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\n     * on, and `0` (for all three channels) should be considered off.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    SetStatusLight = 0x84,\n\n    /**\n     * No args. Force client device into proxy mode.\n     */\n    Proxy = 0x85,\n}\n\nexport enum ControlReg {\n    /**\n     * Read-write μs uint32_t. When set to value other than `0`, it asks the device to reset after specified number of microseconds.\n     * This is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\n     * say 1.6s every 0.5s.\n     *\n     * ```\n     * const [resetIn] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ResetIn = 0x80,\n\n    /**\n     * Constant string (bytes). Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n     *\n     * ```\n     * const [deviceDescription] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    DeviceDescription = 0x180,\n\n    /**\n     * Constant uint32_t. A numeric code for the string above; used to identify firmware images and devices.\n     *\n     * ```\n     * const [productIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProductIdentifier = 0x181,\n\n    /**\n     * Constant uint32_t. Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n     *\n     * ```\n     * const [bootloaderProductIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BootloaderProductIdentifier = 0x184,\n\n    /**\n     * Constant string (bytes). A string describing firmware version; typically semver.\n     *\n     * ```\n     * const [firmwareVersion] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    FirmwareVersion = 0x185,\n\n    /**\n     * Read-only °C int16_t. MCU temperature in degrees Celsius (approximate).\n     *\n     * ```\n     * const [mcuTemperature] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    McuTemperature = 0x182,\n\n    /**\n     * Read-only μs uint64_t. Number of microseconds since boot.\n     *\n     * ```\n     * const [uptime] = jdunpack<[number]>(buf, \"u64\")\n     * ```\n     */\n    Uptime = 0x186,\n}\n\n// Service: Dimmer\nexport const SRV_DIMMER = 0x1fb02645\n\nexport enum DimmerVariant { // uint8_t\n    Light = 0x1,\n    Fan = 0x2,\n    Pump = 0x3,\n}\n\nexport enum DimmerReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). The intensity of the current. Set to ``0`` to turn off completely the current.\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Intensity = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical device\n     *\n     * ```\n     * const [variant] = jdunpack<[DimmerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Distance\nexport const SRV_DISTANCE = 0x141a6b8a\n\nexport enum DistanceVariant { // uint8_t\n    Ultrasonic = 0x1,\n    Infrared = 0x2,\n    LiDAR = 0x3,\n    Laser = 0x4,\n}\n\nexport enum DistanceReg {\n    /**\n     * Read-only m u16.16 (uint32_t). Current distance from the object\n     *\n     * ```\n     * const [distance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Distance = 0x101,\n\n    /**\n     * Constant m u16.16 (uint32_t). Minimum measurable distance\n     *\n     * ```\n     * const [minRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MinRange = 0x104,\n\n    /**\n     * Constant m u16.16 (uint32_t). Maximum measurable distance\n     *\n     * ```\n     * const [maxRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxRange = 0x105,\n\n    /**\n     * Constant Variant (uint8_t). Determines the type of sensor used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DistanceVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: DMX\nexport const SRV_DMX = 0x11cf8c05\nexport enum DmxReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the DMX bridge is active\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum DmxCmd {\n    /**\n     * Argument: channels bytes. Send a DMX packet, up to 236bytes long, including the start code.\n     *\n     * ```\n     * const [channels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Send = 0x80,\n}\n\n// Service: Dot Matrix\nexport const SRV_DOT_MATRIX = 0x110d154b\n\nexport enum DotMatrixVariant { // uint8_t\n    LED = 0x1,\n    Braille = 0x2,\n}\n\nexport enum DotMatrixReg {\n    /**\n     * Read-write bytes. The state of the screen where dot on/off state is\n     * stored as a bit, column by column. The column should be byte aligned.\n     *\n     * ```\n     * const [dots] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Dots = 0x2,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Constant # uint16_t. Number of rows on the screen\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Rows = 0x181,\n\n    /**\n     * Constant # uint16_t. Number of columns on the screen\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Columns = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of matrix used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DotMatrixVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Equivalent CO₂\nexport const SRV_E_CO2 = 0x169c9dc6\n\nexport enum ECO2Variant { // uint8_t\n    VOC = 0x1,\n    NDIR = 0x2,\n}\n\nexport enum ECO2Reg {\n    /**\n     * Read-only ppm u22.10 (uint32_t). Equivalent CO₂ (eCO₂) readings.\n     *\n     * ```\n     * const [eCO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2 = 0x101,\n\n    /**\n     * Read-only ppm u22.10 (uint32_t). Error on the reading value.\n     *\n     * ```\n     * const [eCO2Error] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Error = 0x106,\n\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinECO2 = 0x104,\n\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxECO2 = 0x105,\n\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ConditioningPeriod = 0x180,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[ECO2Variant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Flex\nexport const SRV_FLEX = 0x1f47c6c6\n\nexport enum FlexVariant { // uint8_t\n    Linear22Inch = 0x1,\n    Linear45Inch = 0x2,\n}\n\nexport enum FlexReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [bending] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Bending = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the flex sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[FlexVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Gyroscope\nexport const SRV_GYROSCOPE = 0x1e1b06f2\nexport enum GyroscopeReg {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    RotationRates = 0x101,\n\n    /**\n     * Read-only °/s i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [rotationRatesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    RotationRatesError = 0x106,\n\n    /**\n     * Read-write °/s i12.20 (int32_t). Configures the range of range of rotation rates.\n     *\n     * ```\n     * const [maxRate] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    MaxRate = 0x80,\n}\n\n// Service: Heart Rate\nexport const SRV_HEART_RATE = 0x166c6dc4\n\nexport enum HeartRateVariant { // uint8_t\n    Finger = 0x1,\n    Chest = 0x2,\n    Wrist = 0x3,\n    Pump = 0x4,\n    WebCam = 0x5,\n}\n\nexport enum HeartRateReg {\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated heart rate.\n     *\n     * ```\n     * const [heartRate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRate = 0x101,\n\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [heartRateError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRateError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[HeartRateVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: HID Adapter\nexport const SRV_HID_ADAPTER = 0x1e5758b5\nexport enum HidAdapterReg {\n    /**\n     * Read-write uint8_t. The number of configurations stored on the server.\n     *\n     * ```\n     * const [numConfigurations] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    NumConfigurations = 0x80,\n\n    /**\n     * Read-write uint8_t. The current configuration the server is using.\n     *\n     * ```\n     * const [currentConfiguration] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CurrentConfiguration = 0x81,\n}\n\nexport enum HidAdapterCmd {\n    /**\n     * Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned\n     *\n     * ```\n     * const [results, configurationNumber] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u8\")\n     * ```\n     */\n    GetConfiguration = 0x80,\n\n    /**\n     * Stores the given binding on the server. If a binding exists at this index, the new binding will replace it.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n     * ```\n     */\n    SetBinding = 0x82,\n\n    /**\n     * Clears a specific binding stored on the device.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex] = jdunpack<[number, number]>(buf, \"u8 u8\")\n     * ```\n     */\n    ClearBinding = 0x83,\n\n    /**\n     * Argument: configuration_number uint8_t. Clears a specific configuration stored on the device.\n     *\n     * ```\n     * const [configurationNumber] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ClearConfiguration = 0x84,\n\n    /**\n     * No args. Clears all configurations and bindings stored on the device.\n     */\n    Clear = 0x85,\n}\n\n\n/**\n * pipe_report Configuration\n * ```\n * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n * ```\n */\n\n\nexport enum HidAdapterEvent {\n    /**\n     * Event that notifies clients that the server has swapped to a new configuration or changed key bindings.\n     */\n    Changed = 0x3,\n}\n\n// Service: HID Keyboard\nexport const SRV_HID_KEYBOARD = 0x18b05b6a\n\nexport enum HidKeyboardModifiers { // uint8_t\n    None = 0x0,\n    LeftControl = 0x1,\n    LeftShift = 0x2,\n    LeftAlt = 0x4,\n    LeftGUI = 0x8,\n    RightControl = 0x10,\n    RightShift = 0x20,\n    RightAlt = 0x40,\n    RightGUI = 0x80,\n}\n\n\nexport enum HidKeyboardAction { // uint8_t\n    Press = 0x0,\n    Up = 0x1,\n    Down = 0x2,\n}\n\nexport enum HidKeyboardCmd {\n    /**\n     * Presses a key or a sequence of keys down.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, HidKeyboardModifiers, HidKeyboardAction])[]]>(buf, \"r: u16 u8 u8\")\n     * const [selector, modifiers, action] = rest[0]\n     * ```\n     */\n    Key = 0x80,\n\n    /**\n     * No args. Clears all pressed keys.\n     */\n    Clear = 0x81,\n}\n\n// Service: HID Mouse\nexport const SRV_HID_MOUSE = 0x1885dc1c\n\nexport enum HidMouseButton { // uint16_t\n    Left = 0x1,\n    Right = 0x2,\n    Middle = 0x4,\n}\n\n\nexport enum HidMouseButtonEvent { // uint8_t\n    Up = 0x1,\n    Down = 0x2,\n    Click = 0x3,\n    DoubleClick = 0x4,\n}\n\nexport enum HidMouseCmd {\n    /**\n     * Sets the up/down state of one or more buttons.\n     * A ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\n     * A ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\n     *\n     * ```\n     * const [buttons, event] = jdunpack<[HidMouseButton, HidMouseButtonEvent]>(buf, \"u16 u8\")\n     * ```\n     */\n    SetButton = 0x80,\n\n    /**\n     * Moves the mouse by the distance specified.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dx, dy, time] = jdunpack<[number, number, number]>(buf, \"i16 i16 u16\")\n     * ```\n     */\n    Move = 0x81,\n\n    /**\n     * Turns the wheel up or down. Positive if scrolling up.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dy, time] = jdunpack<[number, number]>(buf, \"i16 u16\")\n     * ```\n     */\n    Wheel = 0x82,\n}\n\n// Service: Humidity\nexport const SRV_HUMIDITY = 0x16c810b8\nexport enum HumidityReg {\n    /**\n     * Read-only %RH u22.10 (uint32_t). The relative humidity in percentage of full water saturation.\n     *\n     * ```\n     * const [humidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Humidity = 0x101,\n\n    /**\n     * Read-only %RH u22.10 (uint32_t). The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\n     *\n     * ```\n     * const [humidityError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityError = 0x106,\n\n    /**\n     * Constant %RH u22.10 (uint32_t). Lowest humidity that can be reported.\n     *\n     * ```\n     * const [minHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinHumidity = 0x104,\n\n    /**\n     * Constant %RH u22.10 (uint32_t). Highest humidity that can be reported.\n     *\n     * ```\n     * const [maxHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxHumidity = 0x105,\n}\n\n// Service: Illuminance\nexport const SRV_ILLUMINANCE = 0x1e6ecaf2\nexport enum IlluminanceReg {\n    /**\n     * Read-only lux u22.10 (uint32_t). The amount of illuminance, as lumens per square metre.\n     *\n     * ```\n     * const [light] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Light = 0x101,\n\n    /**\n     * Read-only lux u22.10 (uint32_t). Error on the reported sensor value.\n     *\n     * ```\n     * const [lightError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    LightError = 0x106,\n}\n\n// Service: Indexed screen\nexport const SRV_INDEXED_SCREEN = 0x16fa36e5\nexport enum IndexedScreenCmd {\n    /**\n     * Sets the update window for subsequent `set_pixels` commands.\n     *\n     * ```\n     * const [x, y, width, height] = jdunpack<[number, number, number, number]>(buf, \"u16 u16 u16 u16\")\n     * ```\n     */\n    StartUpdate = 0x81,\n\n    /**\n     * Argument: pixels bytes. Set pixels in current window, according to current palette.\n     * Each \"line\" of data is aligned to a byte.\n     *\n     * ```\n     * const [pixels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SetPixels = 0x83,\n}\n\nexport enum IndexedScreenReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set backlight brightness.\n     * If set to `0` the display may go to sleep.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * The current palette.\n     * The color entry repeats `1 << bits_per_pixel` times.\n     * This register may be write-only.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number, number])[]]>(buf, \"r: u8 u8 u8 x[1]\")\n     * const [blue, green, red] = rest[0]\n     * ```\n     */\n    Palette = 0x80,\n\n    /**\n     * Constant bit uint8_t. Determines the number of palette entries.\n     * Typical values are 1, 2, 4, or 8.\n     *\n     * ```\n     * const [bitsPerPixel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitsPerPixel = 0x180,\n\n    /**\n     * Constant px uint16_t. Screen width in \"natural\" orientation.\n     *\n     * ```\n     * const [width] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Width = 0x181,\n\n    /**\n     * Constant px uint16_t. Screen height in \"natural\" orientation.\n     *\n     * ```\n     * const [height] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Height = 0x182,\n\n    /**\n     * Read-write bool (uint8_t). If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\n     * If false, consecutive pixels in the \"height\" direction are sent next to each other.\n     * For embedded screen controllers, this is typically true iff `width < height`\n     * (in other words, it's only true for portrait orientation screens).\n     * Some controllers may allow the user to change this (though the refresh order may not be optimal then).\n     * This is independent of the `rotation` register.\n     *\n     * ```\n     * const [widthMajor] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    WidthMajor = 0x81,\n\n    /**\n     * Read-write px uint8_t. Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\n     * Some displays may allow changing this (which will also result in changes to `width` and `height`).\n     * Typical values are 1 and 2.\n     *\n     * ```\n     * const [upSampling] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    UpSampling = 0x82,\n\n    /**\n     * Read-write ° uint16_t. Possible values are 0, 90, 180 and 270 only.\n     * Write to this register do not affect `width` and `height` registers,\n     * and may be ignored by some screens.\n     *\n     * ```\n     * const [rotation] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Rotation = 0x83,\n}\n\n// Service: Infrastructure\nexport const SRV_INFRASTRUCTURE = 0x1e1589eb\n// Service: Joystick\nexport const SRV_JOYSTICK = 0x108f7456\n\nexport enum JoystickButtons { // uint32_t\n    Left = 0x1,\n    Up = 0x2,\n    Right = 0x4,\n    Down = 0x8,\n    A = 0x10,\n    B = 0x20,\n    Menu = 0x40,\n    Select = 0x80,\n    Reset = 0x100,\n    Exit = 0x200,\n    X = 0x400,\n    Y = 0x800,\n}\n\n\nexport enum JoystickVariant { // uint8_t\n    Thumb = 0x1,\n    ArcadeBall = 0x2,\n    ArcadeStick = 0x3,\n    Gamepad = 0x4,\n}\n\nexport enum JoystickReg {\n    /**\n     * If the joystick is analog, the directional buttons should be \"simulated\", based on joystick position\n     * (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\n     * If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\n     * The primary button on the joystick is `A`.\n     *\n     * ```\n     * const [buttons, x, y] = jdunpack<[JoystickButtons, number, number]>(buf, \"u32 i1.15 i1.15\")\n     * ```\n     */\n    Direction = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical joystick.\n     *\n     * ```\n     * const [variant] = jdunpack<[JoystickVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant Buttons (uint32_t). Indicates a bitmask of the buttons that are mounted on the joystick.\n     * If the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\n     * Even when marked as not available, they will still be simulated based on the analog joystick.\n     *\n     * ```\n     * const [buttonsAvailable] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    ButtonsAvailable = 0x180,\n}\n\nexport enum JoystickEvent {\n    /**\n     * Argument: buttons Buttons (uint32_t). Emitted whenever the state of buttons changes.\n     *\n     * ```\n     * const [buttons] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    ButtonsChanged = 0x3,\n}\n\n// Service: LED\nexport const SRV_LED = 0x1e3048f8\n\nexport enum LedVariant { // uint8_t\n    ThroughHole = 0x1,\n    SMD = 0x2,\n    Power = 0x3,\n    Bead = 0x4,\n}\n\nexport enum LedCmd {\n    /**\n     * This has the same semantics as `set_status_light` in the control service.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    Animate = 0x80,\n}\n\nexport enum LedReg {\n    /**\n     * The current color of the LED.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u8 u8 u8\")\n     * ```\n     */\n    Color = 0x180,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Constant uint16_t. If known, specifies the number of LEDs in parallel on this device.\n     *\n     * ```\n     * const [ledCount] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedCount = 0x183,\n\n    /**\n     * Constant nm uint16_t. If monochrome LED, specifies the wave length of the LED.\n     *\n     * ```\n     * const [waveLength] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WaveLength = 0x181,\n\n    /**\n     * Constant mcd uint16_t. The luminous intensity of the LED, at full value, in micro candella.\n     *\n     * ```\n     * const [luminousIntensity] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LuminousIntensity = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). The physical type of LED.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: LED Pixel\nexport const SRV_LED_PIXEL = 0x126f00e0\n\nexport enum LedPixelLightType { // uint8_t\n    WS2812B_GRB = 0x0,\n    APA102 = 0x10,\n    SK9822 = 0x11,\n}\n\n\nexport enum LedPixelVariant { // uint8_t\n    Strip = 0x1,\n    Ring = 0x2,\n    Stick = 0x3,\n    Jewel = 0x4,\n    Matrix = 0x5,\n}\n\nexport enum LedPixelReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set the luminosity of the strip.\n     * At `0` the power to the strip is completely shut down.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Read-only ratio u0.8 (uint8_t). This is the luminosity actually applied to the strip.\n     * May be lower than `brightness` if power-limited by the `max_power` register.\n     * It will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n     *\n     * ```\n     * const [actualBrightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    ActualBrightness = 0x180,\n\n    /**\n     * Read-write LightType (uint8_t). Specifies the type of light strip connected to controller.\n     * Controllers which are sold with lights should default to the correct type\n     * and could not allow change.\n     *\n     * ```\n     * const [lightType] = jdunpack<[LedPixelLightType]>(buf, \"u8\")\n     * ```\n     */\n    LightType = 0x80,\n\n    /**\n     * Read-write # uint16_t. Specifies the number of pixels in the strip.\n     * Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumPixels = 0x81,\n\n    /**\n     * Read-write # uint16_t. If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numColumns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumColumns = 0x83,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Constant # uint16_t. The maximum supported number of pixels.\n     * All writes to `num_pixels` are clamped to `max_pixels`.\n     *\n     * ```\n     * const [maxPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPixels = 0x181,\n\n    /**\n     * Read-write # uint16_t. How many times to repeat the program passed in `run` command.\n     * Should be set before the `run` command.\n     * Setting to `0` means to repeat forever.\n     *\n     * ```\n     * const [numRepeats] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumRepeats = 0x82,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the shape of the light strip.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedPixelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum LedPixelCmd {\n    /**\n     * Argument: program bytes. Run the given light \"program\". See service description for details.\n     *\n     * ```\n     * const [program] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Run = 0x81,\n}\n\n// Service: Light level\nexport const SRV_LIGHT_LEVEL = 0x17dc9a1c\n\nexport enum LightLevelVariant { // uint8_t\n    PhotoResistor = 0x1,\n    LEDMatrix = 0x2,\n    Ambient = 0x3,\n}\n\nexport enum LightLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Detect light level\n     *\n     * ```\n     * const [lightLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    LightLevel = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[LightLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Logger\nexport const SRV_LOGGER = 0x12dc1fca\n\nexport enum LoggerPriority { // uint8_t\n    Debug = 0x0,\n    Log = 0x1,\n    Warning = 0x2,\n    Error = 0x3,\n    Silent = 0x4,\n}\n\nexport enum LoggerReg {\n    /**\n     * Read-write Priority (uint8_t). Messages with level lower than this won't be emitted. The default setting may vary.\n     * Loggers should revert this to their default setting if the register has not been\n     * updated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\n     * Thus, clients should write this register every 1000ms and ignore messages which are\n     * too verbose for them.\n     *\n     * ```\n     * const [minPriority] = jdunpack<[LoggerPriority]>(buf, \"u8\")\n     * ```\n     */\n    MinPriority = 0x80,\n}\n\nexport enum LoggerCmd {\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Debug = 0x80,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Log = 0x81,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Warn = 0x82,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Error = 0x83,\n}\n\n// Service: Magnetometer\nexport const SRV_MAGNETOMETER = 0x13029088\nexport enum MagnetometerReg {\n    /**\n     * Indicates the current magnetic field on magnetometer.\n     * For reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i32 i32 i32\")\n     * ```\n     */\n    Forces = 0x101,\n\n    /**\n     * Read-only nT int32_t. Error on the readings.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ForcesError = 0x106,\n}\n\nexport enum MagnetometerCmd {\n    /**\n     * No args. Forces a calibration sequence where the user/device\n     * might have to rotate to be calibrated.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Matrix Keypad\nexport const SRV_MATRIX_KEYPAD = 0x13062dc8\n\nexport enum MatrixKeypadVariant { // uint8_t\n    Membrane = 0x1,\n    Keyboard = 0x2,\n    Elastomer = 0x3,\n    ElastomerLEDPixel = 0x4,\n}\n\nexport enum MatrixKeypadReg {\n    /**\n     * Read-only. The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n     * ``row = index / columns``, ``column = index % columns``.\n     *\n     * ```\n     * const [index] = jdunpack<[number[]]>(buf, \"u8[]\")\n     * ```\n     */\n    Pressed = 0x101,\n\n    /**\n     * Constant # uint8_t. Number of rows in the matrix\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Rows = 0x180,\n\n    /**\n     * Constant # uint8_t. Number of columns in the matrix\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Columns = 0x181,\n\n    /**\n     * Constant. The characters printed on the keys if any, in indexing sequence.\n     *\n     * ```\n     * const [label] = jdunpack<[string[]]>(buf, \"z[]\")\n     * ```\n     */\n    Labels = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical keypad. If the variant is ``ElastomerLEDPixel``\n     * and the next service on the device is a ``LEDPixel`` service, it is considered\n     * as the service controlling the LED pixel on the keypad.\n     *\n     * ```\n     * const [variant] = jdunpack<[MatrixKeypadVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum MatrixKeypadEvent {\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\n     *\n     * ```\n     * const [down] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\n     *\n     * ```\n     * const [up] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Up = 0x2,\n\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was not longer than 500ms.\n     *\n     * ```\n     * const [click] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Click = 0x80,\n\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was more than 500ms.\n     *\n     * ```\n     * const [longClick] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    LongClick = 0x81,\n}\n\n// Service: Microphone\nexport const SRV_MICROPHONE = 0x113dac86\nexport enum MicrophoneCmd {\n    /**\n     * The samples will be streamed back over the `samples` pipe.\n     * If `num_samples` is `0`, streaming will only stop when the pipe is closed.\n     * Otherwise the specified number of samples is streamed.\n     * Samples are sent as `i16`.\n     *\n     * ```\n     * const [samples, numSamples] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u32\")\n     * ```\n     */\n    Sample = 0x81,\n}\n\nexport enum MicrophoneReg {\n    /**\n     * Read-write μs uint32_t. Get or set microphone sampling period.\n     * Sampling rate is `1_000_000 / sampling_period Hz`.\n     *\n     * ```\n     * const [samplingPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SamplingPeriod = 0x80,\n}\n\n// Service: MIDI output\nexport const SRV_MIDI_OUTPUT = 0x1a848cd7\nexport enum MidiOutputReg {\n    /**\n     * Read-write bool (uint8_t). Opens or closes the port to the MIDI device\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum MidiOutputCmd {\n    /**\n     * No args. Clears any pending send data that has not yet been sent from the MIDIOutput's queue.\n     */\n    Clear = 0x80,\n\n    /**\n     * Argument: data bytes. Enqueues the message to be sent to the corresponding MIDI port\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Send = 0x81,\n}\n\n// Service: Model Runner\nexport const SRV_MODEL_RUNNER = 0x140f9a78\n\nexport enum ModelRunnerModelFormat { // uint32_t\n    TFLite = 0x334c4654,\n    ML4F = 0x30470f62,\n    EdgeImpulseCompiled = 0x30564945,\n}\n\nexport enum ModelRunnerCmd {\n    /**\n     * Argument: model_size B uint32_t. Open pipe for streaming in the model. The size of the model has to be declared upfront.\n     * The model is streamed over regular pipe data packets.\n     * The format supported by this instance of the service is specified in `format` register.\n     * When the pipe is closed, the model is written all into flash, and the device running the service may reset.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SetModel = 0x80,\n\n    /**\n     * report SetModel\n     * ```\n     * const [modelPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n\n    /**\n     * Argument: outputs pipe (bytes). Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\n     * and results are send over the `outputs` pipe.\n     *\n     * ```\n     * const [outputs] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    Predict = 0x81,\n\n    /**\n     * report Predict\n     * ```\n     * const [inputs] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n}\n\nexport enum ModelRunnerReg {\n    /**\n     * Read-write uint16_t. When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\n     * Model may be run less often if it takes longer to run than `N * sampling_interval`.\n     * The `outputs` register will stream its value after each run.\n     * This register is not stored in flash.\n     *\n     * ```\n     * const [autoInvokeEvery] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    AutoInvokeEvery = 0x80,\n\n    /**\n     * Read-only. Results of last model invocation as `float32` array.\n     *\n     * ```\n     * const [output] = jdunpack<[number[]]>(buf, \"f32[]\")\n     * ```\n     */\n    Outputs = 0x101,\n\n    /**\n     * Read-only. The shape of the input tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    InputShape = 0x180,\n\n    /**\n     * Read-only. The shape of the output tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    OutputShape = 0x181,\n\n    /**\n     * Read-only μs uint32_t. The time consumed in last model execution.\n     *\n     * ```\n     * const [lastRunTime] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    LastRunTime = 0x182,\n\n    /**\n     * Read-only B uint32_t. Number of RAM bytes allocated for model execution.\n     *\n     * ```\n     * const [allocatedArenaSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    AllocatedArenaSize = 0x183,\n\n    /**\n     * Read-only B uint32_t. The size of the model in bytes.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelSize = 0x184,\n\n    /**\n     * Read-only string (bytes). Textual description of last error when running or loading model (if any).\n     *\n     * ```\n     * const [lastError] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LastError = 0x185,\n\n    /**\n     * Constant ModelFormat (uint32_t). The type of ML models supported by this service.\n     * `TFLite` is flatbuffer `.tflite` file.\n     * `ML4F` is compiled machine code model for Cortex-M4F.\n     * The format is typically present as first or second little endian word of model file.\n     *\n     * ```\n     * const [format] = jdunpack<[ModelRunnerModelFormat]>(buf, \"u32\")\n     * ```\n     */\n    Format = 0x186,\n\n    /**\n     * Constant uint32_t. A version number for the format.\n     *\n     * ```\n     * const [formatVersion] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    FormatVersion = 0x187,\n\n    /**\n     * Constant bool (uint8_t). If present and true this service can run models independently of other\n     * instances of this service on the device.\n     *\n     * ```\n     * const [parallel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Parallel = 0x188,\n}\n\n// Service: Motion\nexport const SRV_MOTION = 0x1179a749\n\nexport enum MotionVariant { // uint8_t\n    PIR = 0x1,\n}\n\nexport enum MotionReg {\n    /**\n     * Read-only bool (uint8_t). Reports is movement is currently detected by the sensor.\n     *\n     * ```\n     * const [moving] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Moving = 0x101,\n\n    /**\n     * Constant m u16.16 (uint32_t). Maximum distance where objects can be detected.\n     *\n     * ```\n     * const [maxDistance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxDistance = 0x180,\n\n    /**\n     * Constant ° uint16_t. Opening of the field of view\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Angle = 0x181,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[MotionVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum MotionEvent {\n    /**\n     * A movement was detected.\n     */\n    Movement = 0x1,\n}\n\n// Service: Motor\nexport const SRV_MOTOR = 0x17004cd8\nexport enum MotorReg {\n    /**\n     * Read-write ratio i1.15 (int16_t). PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\n     * Positive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0``\n     * while ``enabled`` acts as brake.\n     *\n     * ```\n     * const [duty] = jdunpack<[number]>(buf, \"i1.15\")\n     * ```\n     */\n    Duty = 0x2,\n\n    /**\n     * Read-write bool (uint8_t). Turn the power to the motor on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Constant kg/cm u16.16 (uint32_t). Torque required to produce the rated power of an electrical motor at load speed.\n     *\n     * ```\n     * const [loadTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    LoadTorque = 0x180,\n\n    /**\n     * Constant rpm u16.16 (uint32_t). Revolutions per minute of the motor under full load.\n     *\n     * ```\n     * const [loadSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    LoadSpeed = 0x181,\n}\n\n// Service: Multitouch\nexport const SRV_MULTITOUCH = 0x18d55e2b\nexport enum MultitouchReg {\n    /**\n     * Read-only. Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\n     * no touch, wheres a value of around `100` or more indicates touch.\n     * It's best to ignore this (unless debugging), and use events.\n     *\n     * ```\n     * const [capacitance] = jdunpack<[number[]]>(buf, \"i32[]\")\n     * ```\n     */\n    Capacity = 0x101,\n}\n\nexport enum MultitouchEvent {\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Touch = 0x1,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is no longer touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Release = 0x2,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is briefly touched. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Tap = 0x80,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched for longer than 500ms. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    LongPress = 0x81,\n\n    /**\n     * Emitted when input channels are successively touched in order of increasing channel numbers.\n     */\n    SwipePos = 0x90,\n\n    /**\n     * Emitted when input channels are successively touched in order of decreasing channel numbers.\n     */\n    SwipeNeg = 0x91,\n}\n\n// Service: Potentiometer\nexport const SRV_POTENTIOMETER = 0x1f274746\n\nexport enum PotentiometerVariant { // uint8_t\n    Slider = 0x1,\n    Rotary = 0x2,\n}\n\nexport enum PotentiometerReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Position = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the potentiometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[PotentiometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Power\nexport const SRV_POWER = 0x1fa4c95a\n\nexport enum PowerPowerStatus { // uint8_t\n    Disallowed = 0x0,\n    Powering = 0x1,\n    Overload = 0x2,\n    Overprovision = 0x3,\n}\n\nexport enum PowerReg {\n    /**\n     * Read-write bool (uint8_t). Can be used to completely disable the service.\n     * When allowed, the service may still not be providing power, see\n     * `power_status` for the actual current state.\n     *\n     * ```\n     * const [allowed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Allowed = 0x1,\n\n    /**\n     * Read-write mA uint16_t. Limit the power provided by the service. The actual maximum limit will depend on hardware.\n     * This field may be read-only in some implementations - you should read it back after setting.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Read-only PowerStatus (uint8_t). Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\n     * `Overprovision` means there was another power provider, and we stopped not to overprovision the bus.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerStatus = 0x181,\n\n    /**\n     * Read-only mA uint16_t. Present current draw from the bus.\n     *\n     * ```\n     * const [currentDraw] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    CurrentDraw = 0x101,\n\n    /**\n     * Read-only mV uint16_t. Voltage on input.\n     *\n     * ```\n     * const [batteryVoltage] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    BatteryVoltage = 0x180,\n\n    /**\n     * Read-only ratio u0.16 (uint16_t). Fraction of charge in the battery.\n     *\n     * ```\n     * const [batteryCharge] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    BatteryCharge = 0x182,\n\n    /**\n     * Constant mWh uint32_t. Energy that can be delivered to the bus when battery is fully charged.\n     * This excludes conversion overheads if any.\n     *\n     * ```\n     * const [batteryCapacity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BatteryCapacity = 0x183,\n\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulseDuration] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    KeepOnPulseDuration = 0x80,\n\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulsePeriod] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    KeepOnPulsePeriod = 0x81,\n}\n\nexport enum PowerCmd {\n    /**\n     * No args. Sent by the power service periodically, as broadcast.\n     */\n    Shutdown = 0x80,\n}\n\nexport enum PowerEvent {\n    /**\n     * Argument: power_status PowerStatus (uint8_t). Emitted whenever `power_status` changes.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerStatusChanged = 0x3,\n}\n\n// Service: Pressure Button\nexport const SRV_PRESSURE_BUTTON = 0x281740c3\nexport enum PressureButtonReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Threshold = 0x6,\n}\n\n// Service: Protocol Test\nexport const SRV_PROTO_TEST = 0x16c7466a\nexport enum ProtoTestReg {\n    /**\n     * Read-write bool (uint8_t). A read write bool register.\n     *\n     * ```\n     * const [rwBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RwBool = 0x81,\n\n    /**\n     * Read-only bool (uint8_t). A read only bool register. Mirrors rw_bool.\n     *\n     * ```\n     * const [roBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RoBool = 0x181,\n\n    /**\n     * Read-write uint32_t. A read write u32 register.\n     *\n     * ```\n     * const [rwU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    RwU32 = 0x82,\n\n    /**\n     * Read-only uint32_t. A read only u32 register.. Mirrors rw_u32.\n     *\n     * ```\n     * const [roU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    RoU32 = 0x182,\n\n    /**\n     * Read-write int32_t. A read write i32 register.\n     *\n     * ```\n     * const [rwI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    RwI32 = 0x83,\n\n    /**\n     * Read-only int32_t. A read only i32 register.. Mirrors rw_i32.\n     *\n     * ```\n     * const [roI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    RoI32 = 0x183,\n\n    /**\n     * Read-write string (bytes). A read write string register.\n     *\n     * ```\n     * const [rwString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    RwString = 0x84,\n\n    /**\n     * Read-only string (bytes). A read only string register. Mirrors rw_string.\n     *\n     * ```\n     * const [roString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    RoString = 0x184,\n\n    /**\n     * Read-write bytes. A read write string register.\n     *\n     * ```\n     * const [rwBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    RwBytes = 0x85,\n\n    /**\n     * Read-only bytes. A read only string register. Mirrors ro_bytes.\n     *\n     * ```\n     * const [roBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    RoBytes = 0x185,\n\n    /**\n     * A read write i8, u8, u16, i32 register.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    RwI8U8U16I32 = 0x86,\n\n    /**\n     * A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    RoI8U8U16I32 = 0x186,\n\n    /**\n     * A read write u8, string register.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    RwU8String = 0x87,\n\n    /**\n     * A read only u8, string register.. Mirrors rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    RoU8String = 0x187,\n}\n\nexport enum ProtoTestEvent {\n    /**\n     * Argument: bool bool (uint8_t). An event raised when rw_bool is modified\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    EBool = 0x81,\n\n    /**\n     * Argument: u32 uint32_t. An event raised when rw_u32 is modified\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    EU32 = 0x82,\n\n    /**\n     * Argument: i32 int32_t. An event raised when rw_i32 is modified\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    EI32 = 0x83,\n\n    /**\n     * Argument: string string (bytes). An event raised when rw_string is modified\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    EString = 0x84,\n\n    /**\n     * Argument: bytes bytes. An event raised when rw_bytes is modified\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    EBytes = 0x85,\n\n    /**\n     * An event raised when rw_i8_u8_u16_i32 is modified\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    EI8U8U16I32 = 0x86,\n\n    /**\n     * An event raised when rw_u8_string is modified\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    EU8String = 0x87,\n}\n\nexport enum ProtoTestCmd {\n    /**\n     * Argument: bool bool (uint8_t). A command to set rw_bool.\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CBool = 0x81,\n\n    /**\n     * Argument: u32 uint32_t. A command to set rw_u32.\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    CU32 = 0x82,\n\n    /**\n     * Argument: i32 int32_t. A command to set rw_i32.\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    CI32 = 0x83,\n\n    /**\n     * Argument: string string (bytes). A command to set rw_string.\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    CString = 0x84,\n\n    /**\n     * Argument: bytes bytes. A command to set rw_string.\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    CBytes = 0x85,\n\n    /**\n     * A command to set rw_bytes.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    CI8U8U16I32 = 0x86,\n\n    /**\n     * A command to set rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    CU8String = 0x87,\n\n    /**\n     * Argument: p_bytes pipe (bytes). A command to read the content of rw_bytes, byte per byte, as a pipe.\n     *\n     * ```\n     * const [pBytes] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    CReportPipe = 0x90,\n}\n\n\n/**\n * pipe_report PBytes\n * ```\n * const [byte] = jdunpack<[number]>(buf, \"u8\")\n * ```\n */\n\n\n// Service: Pulse Oximeter\nexport const SRV_PULSE_OXIMETER = 0x10bb4eb6\nexport enum PulseOximeterReg {\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated oxygen level in blood.\n     *\n     * ```\n     * const [oxygen] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    Oxygen = 0x101,\n\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [oxygenError] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    OxygenError = 0x106,\n}\n\n// Service: Rain gauge\nexport const SRV_RAIN_GAUGE = 0x13734c95\nexport enum RainGaugeReg {\n    /**\n     * Read-only mm u16.16 (uint32_t). Total precipitation recorded so far.\n     *\n     * ```\n     * const [precipitation] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Precipitation = 0x101,\n\n    /**\n     * Constant mm u16.16 (uint32_t). Typically the amount of rain needed for tipping the bucket.\n     *\n     * ```\n     * const [precipitationPrecision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    PrecipitationPrecision = 0x108,\n}\n\n// Service: Real time clock\nexport const SRV_REAL_TIME_CLOCK = 0x1a8b1a28\n\nexport enum RealTimeClockVariant { // uint8_t\n    Computer = 0x1,\n    Crystal = 0x2,\n    Cuckoo = 0x3,\n}\n\nexport enum RealTimeClockReg {\n    /**\n     * Current time in 24h representation.\n     * * ``day_of_month`` is day of the month, starting at ``1``\n     * * ``day_of_week`` is day of the week, starting at ``1`` as monday\n     * Default streaming period is 1 second.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    LocalTime = 0x101,\n\n    /**\n     * Read-only s u16.16 (uint32_t). Time drift since the last call to the ``set_time`` command.\n     *\n     * ```\n     * const [error] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Error = 0x180,\n\n    /**\n     * Constant ppm u16.16 (uint32_t). Error on the clock, in parts per million of seconds.\n     *\n     * ```\n     * const [precision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Precision = 0x181,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical clock used by the sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[RealTimeClockVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum RealTimeClockCmd {\n    /**\n     * Sets the current time and resets the error.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    SetTime = 0x80,\n}\n\n// Service: Reflected light\nexport const SRV_REFLECTED_LIGHT = 0x126c4cb2\n\nexport enum ReflectedLightVariant { // uint8_t\n    InfraredDigital = 0x1,\n    InfraredAnalog = 0x2,\n}\n\nexport enum ReflectedLightReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Brightness = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor used\n     *\n     * ```\n     * const [variant] = jdunpack<[ReflectedLightVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum ReflectedLightEvent {\n    /**\n     * The sensor detected a transition from light to dark\n     */\n    Dark = 0x2,\n\n    /**\n     * The sensor detected a transition from dark to light\n     */\n    Light = 0x1,\n}\n\n// Service: Relay\nexport const SRV_RELAY = 0x183fe656\n\nexport enum RelayVariant { // uint8_t\n    Electromechanical = 0x1,\n    SolidState = 0x2,\n    Reed = 0x3,\n}\n\nexport enum RelayReg {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the relay circuit is currently energized (closed) or not.\n     *\n     * ```\n     * const [closed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Closed = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of relay used.\n     *\n     * ```\n     * const [variant] = jdunpack<[RelayVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant mA uint32_t. Maximum switching current for a resistive load.\n     *\n     * ```\n     * const [maxSwitchingCurrent] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MaxSwitchingCurrent = 0x180,\n}\n\nexport enum RelayEvent {\n    /**\n     * Emitted when relay goes from `inactive` to `active` state.\n     * Normally open (NO) relays close the circuit when activated.\n     */\n    Active = 0x1,\n\n    /**\n     * Emitted when relay goes from `active` to `inactive` state.\n     * Normally closed (NC) relays open the circuit when activated.\n     */\n    Inactive = 0x2,\n}\n\n// Service: Random Number Generator\nexport const SRV_RNG = 0x1789f0a2\n\nexport enum RngVariant { // uint8_t\n    Quantum = 0x1,\n    ADCNoise = 0x2,\n    WebCrypto = 0x3,\n}\n\nexport enum RngReg {\n    /**\n     * Read-only bytes. A register that returns a 64 bytes random buffer on every request.\n     * This never blocks for a long time. If you need additional random bytes, keep querying the register.\n     *\n     * ```\n     * const [random] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Random = 0x180,\n\n    /**\n     * Constant Variant (uint8_t). The type of algorithm/technique used to generate the number.\n     * `Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n     * `ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n     * `WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\n     *\n     * ```\n     * const [variant] = jdunpack<[RngVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Role Manager\nexport const SRV_ROLE_MANAGER = 0x1e4b7e66\nexport enum RoleManagerReg {\n    /**\n     * Read-write bool (uint8_t). Normally, if some roles are unfilled, and there are idle services that can fulfill them,\n     * the brain device will assign roles (bind) automatically.\n     * Such automatic assignment happens every second or so, and is trying to be smart about\n     * co-locating roles that share \"host\" (part before first slash),\n     * as well as reasonably stable assignments.\n     * Once user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.\n     *\n     * ```\n     * const [autoBind] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    AutoBind = 0x80,\n\n    /**\n     * Read-only bool (uint8_t). Indicates if all required roles have been allocated to devices.\n     *\n     * ```\n     * const [allRolesAllocated] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    AllRolesAllocated = 0x181,\n}\n\nexport enum RoleManagerCmd {\n    /**\n     * Get the role corresponding to given device identifer. Returns empty string if unset.\n     *\n     * ```\n     * const [deviceId, serviceIdx] = jdunpack<[Uint8Array, number]>(buf, \"b[8] u8\")\n     * ```\n     */\n    GetRole = 0x80,\n\n    /**\n     * report GetRole\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n\n    /**\n     * Set role. Can set to empty to remove role binding.\n     *\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n    SetRole = 0x81,\n\n    /**\n     * No args. Remove all role bindings.\n     */\n    ClearAllRoles = 0x84,\n\n    /**\n     * Argument: stored_roles pipe (bytes). Return all roles stored internally.\n     *\n     * ```\n     * const [storedRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListStoredRoles = 0x82,\n\n    /**\n     * Argument: required_roles pipe (bytes). List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\n     *\n     * ```\n     * const [requiredRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListRequiredRoles = 0x83,\n}\n\n\n/**\n * pipe_report StoredRoles\n * ```\n * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n * ```\n */\n\n/**\n * pipe_report RequiredRoles\n * ```\n * const [deviceId, serviceClass, serviceIdx, role] = jdunpack<[Uint8Array, number, number, string]>(buf, \"b[8] u32 u8 s\")\n * ```\n */\n\n\nexport enum RoleManagerEvent {\n    /**\n     * Notifies that role bindings have changed.\n     */\n    Change = 0x3,\n}\n\n// Service: Rotary encoder\nexport const SRV_ROTARY_ENCODER = 0x10fa29c9\nexport enum RotaryEncoderReg {\n    /**\n     * Read-only # int32_t. Upon device reset starts at `0` (regardless of the shaft position).\n     * Increases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Position = 0x101,\n\n    /**\n     * Constant # uint16_t. This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.\n     *\n     * ```\n     * const [clicksPerTurn] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    ClicksPerTurn = 0x180,\n}\n\n// Service: Rover\nexport const SRV_ROVER = 0x19f4d06b\nexport enum RoverReg {\n    /**\n     * The current position and orientation of the robot.\n     *\n     * ```\n     * const [x, y, vx, vy, heading] = jdunpack<[number, number, number, number, number]>(buf, \"i16.16 i16.16 i16.16 i16.16 i16.16\")\n     * ```\n     */\n    Kinematics = 0x101,\n}\n\n// Service: Sensor Aggregator\nexport const SRV_SENSOR_AGGREGATOR = 0x1d90e1c5\n\nexport enum SensorAggregatorSampleType { // uint8_t\n    U8 = 0x8,\n    I8 = 0x88,\n    U16 = 0x10,\n    I16 = 0x90,\n    U32 = 0x20,\n    I32 = 0xa0,\n}\n\nexport enum SensorAggregatorReg {\n    /**\n     * Set automatic input collection.\n     * These settings are stored in flash.\n     *\n     * ```\n     * const [samplingInterval, samplesInWindow, rest] = jdunpack<[number, number, ([Uint8Array, number, number, number, SensorAggregatorSampleType, number])[]]>(buf, \"u16 u16 x[4] r: b[8] u32 u8 u8 u8 i8\")\n     * const [deviceId, serviceClass, serviceNum, sampleSize, sampleType, sampleShift] = rest[0]\n     * ```\n     */\n    Inputs = 0x80,\n\n    /**\n     * Read-only uint32_t. Number of input samples collected so far.\n     *\n     * ```\n     * const [numSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    NumSamples = 0x180,\n\n    /**\n     * Read-only B uint8_t. Size of a single sample.\n     *\n     * ```\n     * const [sampleSize] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SampleSize = 0x181,\n\n    /**\n     * Read-write # uint32_t. When set to `N`, will stream `N` samples as `current_sample` reading.\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingSamples = 0x81,\n\n    /**\n     * Read-only bytes. Last collected sample.\n     *\n     * ```\n     * const [currentSample] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    CurrentSample = 0x101,\n}\n\n// Service: Servo\nexport const SRV_SERVO = 0x12fc9103\nexport enum ServoReg {\n    /**\n     * Read-write ° i16.16 (int32_t). Specifies the angle of the arm (request).\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    Angle = 0x2,\n\n    /**\n     * Read-write bool (uint8_t). Turn the power to the servo on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write ° i16.16 (int32_t). Correction applied to the angle to account for the servo arm drift.\n     *\n     * ```\n     * const [offset] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    Offset = 0x81,\n\n    /**\n     * Constant ° i16.16 (int32_t). Lowest angle that can be set.\n     *\n     * ```\n     * const [minAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    MinAngle = 0x110,\n\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to lowest angle.\n     *\n     * ```\n     * const [minPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MinPulse = 0x83,\n\n    /**\n     * Constant ° i16.16 (int32_t). Highest angle that can be set.\n     *\n     * ```\n     * const [maxAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    MaxAngle = 0x111,\n\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to highest angle.\n     *\n     * ```\n     * const [maxPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPulse = 0x85,\n\n    /**\n     * Constant kg/cm u16.16 (uint32_t). The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\n     *\n     * ```\n     * const [stallTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    StallTorque = 0x180,\n\n    /**\n     * Constant s/60° u16.16 (uint32_t). Time to move 60°.\n     *\n     * ```\n     * const [responseSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ResponseSpeed = 0x181,\n\n    /**\n     * Read-only ° i16.16 (int32_t). The current physical position of the arm.\n     *\n     * ```\n     * const [currentAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    CurrentAngle = 0x101,\n}\n\n// Service: Settings\nexport const SRV_SETTINGS = 0x1107dc4a\nexport enum SettingsCmd {\n    /**\n     * Argument: key string (bytes). Get the value of given setting. If no such entry exists, the value returned is empty.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Get = 0x80,\n\n    /**\n     * report Get\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n\n    /**\n     * Set the value of a given setting.\n     *\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n    Set = 0x81,\n\n    /**\n     * Argument: key string (bytes). Delete a given setting.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Delete = 0x84,\n\n    /**\n     * Argument: results pipe (bytes). Return keys of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListKeys = 0x82,\n\n    /**\n     * Argument: results pipe (bytes). Return keys and values of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    List = 0x83,\n\n    /**\n     * No args. Clears all keys.\n     */\n    Clear = 0x85,\n}\n\n\n/**\n * pipe_report ListedKey\n * ```\n * const [key] = jdunpack<[string]>(buf, \"s\")\n * ```\n */\n\n/**\n * pipe_report ListedEntry\n * ```\n * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n * ```\n */\n\n\nexport enum SettingsEvent {\n    /**\n     * Notifies that some setting have been modified.\n     */\n    Change = 0x3,\n}\n\n// Service: 7-segment display\nexport const SRV_SEVEN_SEGMENT_DISPLAY = 0x196158f7\nexport enum SevenSegmentDisplayReg {\n    /**\n     * Read-write bytes. Each byte encodes the display status of a digit using,\n     * where bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\n     * If incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\n     * Thus, sending an empty ``digits`` payload clears the screen.\n     *\n     * ```\n     * const [digits] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Digits = 0x2,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). Controls the brightness of the LEDs. ``0`` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\n     * If the column LEDs is not supported, the value remains false.\n     *\n     * ```\n     * const [doubleDots] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DoubleDots = 0x80,\n\n    /**\n     * Constant uint8_t. The number of digits available on the display.\n     *\n     * ```\n     * const [digitCount] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DigitCount = 0x180,\n\n    /**\n     * Constant bool (uint8_t). True if decimal points are available (on all digits).\n     *\n     * ```\n     * const [decimalPoint] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DecimalPoint = 0x181,\n}\n\nexport enum SevenSegmentDisplayCmd {\n    /**\n     * Argument: value f64 (uint64_t). Shows the number on the screen using the decimal dot if available.\n     */\n    SetNumber = 0x80,\n\n    /**\n     * Argument: text string (bytes). Shows the text on the screen. The client may decide to scroll the text if too long.\n     */\n    SetText = 0x81,\n}\n\n// Service: Soil moisture\nexport const SRV_SOIL_MOISTURE = 0x1d4aa3b3\n\nexport enum SoilMoistureVariant { // uint8_t\n    Resistive = 0x1,\n    Capacitive = 0x2,\n}\n\nexport enum SoilMoistureReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the wetness of the soil, from ``dry`` to ``wet``.\n     *\n     * ```\n     * const [moisture] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Moisture = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Describe the type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[SoilMoistureVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Solenoid\nexport const SRV_SOLENOID = 0x171723ca\n\nexport enum SolenoidVariant { // uint8_t\n    PushPull = 0x1,\n    Valve = 0x2,\n    Latch = 0x3,\n}\n\nexport enum SolenoidReg {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the solenoid is energized and pulled (on) or pushed (off).\n     *\n     * ```\n     * const [pulled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Pulled = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of solenoid used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SolenoidVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Sound level\nexport const SRV_SOUND_LEVEL = 0x14ad1a5d\nexport enum SoundLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The sound level detected by the microphone\n     *\n     * ```\n     * const [soundLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundLevel = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the microphone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write dB int16_t. The minimum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MinDecibels = 0x81,\n\n    /**\n     * Read-write dB int16_t. The maximum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MaxDecibels = 0x82,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a loud event.\n     *\n     * ```\n     * const [loudThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    LoudThreshold = 0x6,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a quiet event.\n     *\n     * ```\n     * const [quietThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    QuietThreshold = 0x5,\n}\n\nexport enum SoundLevelEvent {\n    /**\n     * Raised when a loud sound is detected\n     */\n    Loud = 0x1,\n\n    /**\n     * Raised when a period of quietness is detected\n     */\n    Quiet = 0x2,\n}\n\n// Service: Sound player\nexport const SRV_SOUND_PLAYER = 0x1403d338\nexport enum SoundPlayerReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Volume = 0x1,\n}\n\nexport enum SoundPlayerCmd {\n    /**\n     * Argument: name string (bytes). Starts playing a sound.\n     *\n     * ```\n     * const [name] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Play = 0x80,\n\n    /**\n     * Argument: sounds_port pipe (bytes). Returns the list of sounds available to play.\n     *\n     * ```\n     * const [soundsPort] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListSounds = 0x81,\n}\n\n\n/**\n * pipe_report ListSoundsPipe\n * ```\n * const [duration, name] = jdunpack<[number, string]>(buf, \"u32 s\")\n * ```\n */\n\n\n// Service: Sound Spectrum\nexport const SRV_SOUND_SPECTRUM = 0x157abc1e\nexport enum SoundSpectrumReg {\n    /**\n     * Read-only bytes. The computed frequency data.\n     *\n     * ```\n     * const [frequencyBins] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    FrequencyBins = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turns on/off the micropohone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write uint8_t. The power of 2 used as the size of the FFT to be used to determine the frequency domain.\n     *\n     * ```\n     * const [fftPow2Size] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    FftPow2Size = 0x80,\n\n    /**\n     * Read-write dB int16_t. The minimum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MinDecibels = 0x81,\n\n    /**\n     * Read-write dB int16_t. The maximum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MaxDecibels = 0x82,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). The averaging constant with the last analysis frame.\n     * If ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".\n     *\n     * ```\n     * const [smoothingTimeConstant] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    SmoothingTimeConstant = 0x83,\n}\n\n// Service: Speech synthesis\nexport const SRV_SPEECH_SYNTHESIS = 0x1204d995\nexport enum SpeechSynthesisReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the speech engine is in a non-paused state.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write string (bytes). Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\n     *\n     * ```\n     * const [lang] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Lang = 0x80,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Volume for utterances.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Volume = 0x81,\n\n    /**\n     * Read-write u16.16 (uint32_t). Pitch for utterances\n     *\n     * ```\n     * const [pitch] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Pitch = 0x82,\n\n    /**\n     * Read-write u16.16 (uint32_t). Rate for utterances\n     *\n     * ```\n     * const [rate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Rate = 0x83,\n}\n\nexport enum SpeechSynthesisCmd {\n    /**\n     * Argument: text string (bytes). Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n     *\n     * ```\n     * const [text] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Speak = 0x80,\n\n    /**\n     * No args. Cancels current utterance and all utterances from the utterance queue.\n     */\n    Cancel = 0x81,\n}\n\n// Service: Switch\nexport const SRV_SWITCH = 0x1ad29402\n\nexport enum SwitchVariant { // uint8_t\n    Slide = 0x1,\n    Tilt = 0x2,\n    PushButton = 0x3,\n    Tactile = 0x4,\n    Toggle = 0x5,\n    Proximity = 0x6,\n    Magnetic = 0x7,\n    FootPedal = 0x8,\n}\n\nexport enum SwitchReg {\n    /**\n     * Read-only bool (uint8_t). Indicates whether the switch is currently active (on).\n     *\n     * ```\n     * const [active] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Active = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of switch used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SwitchVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant s u16.16 (uint32_t). Specifies the delay without activity to automatically turn off after turning on.\n     * For example, some light switches in staircases have such a capability.\n     *\n     * ```\n     * const [autoOffDelay] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    AutoOffDelay = 0x180,\n}\n\nexport enum SwitchEvent {\n    /**\n     * Emitted when switch goes from ``off`` to ``on``.\n     */\n    On = 0x1,\n\n    /**\n     * Emitted when switch goes from ``on`` to ``off``.\n     */\n    Off = 0x2,\n}\n\n// Service: TCP\nexport const SRV_TCP = 0x1b43b70b\n\nexport enum TcpTcpError { // int32_t\n    InvalidCommand = 0x1,\n    InvalidCommandPayload = 0x2,\n}\n\nexport enum TcpCmd {\n    /**\n     * Argument: inbound pipe (bytes). Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\n     *\n     * ```\n     * const [inbound] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    Open = 0x80,\n\n    /**\n     * report Open\n     * ```\n     * const [outboundPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n}\n\nexport enum TcpPipeCmd {\n    /**\n     * Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\n     * After the connection is established, an empty data report is sent.\n     * Connection is closed by closing the pipe.\n     *\n     * ```\n     * const [tcpPort, hostname] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    OpenSsl = 0x1,\n\n    /**\n     * Argument: error TcpError (int32_t). Reported when an error is encountered. Negative error codes come directly from the SSL implementation.\n     *\n     * ```\n     * const [error] = jdunpack<[TcpTcpError]>(buf, \"i32\")\n     * ```\n     */\n    Error = 0x0,\n}\n\n\n/**\n * pipe_command Outdata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n\n/**\n * pipe_report Indata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n\n\n// Service: Thermocouple\nexport const SRV_THERMOCOUPLE = 0x143ac061\n\nexport enum ThermocoupleVariant { // uint8_t\n    TypeK = 0x1,\n    TypeJ = 0x2,\n    TypeT = 0x3,\n    TypeE = 0x4,\n    TypeN = 0x5,\n    TypeS = 0x6,\n    TypeR = 0x7,\n    TypeB = 0x8,\n}\n\nexport enum ThermocoupleReg {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    Temperature = 0x101,\n\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MinTemperature = 0x104,\n\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MaxTemperature = 0x105,\n\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TemperatureError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermocoupleVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Thermometer\nexport const SRV_THERMOMETER = 0x1421bac7\n\nexport enum ThermometerVariant { // uint8_t\n    Outdoor = 0x1,\n    Indoor = 0x2,\n    Body = 0x3,\n}\n\nexport enum ThermometerReg {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    Temperature = 0x101,\n\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MinTemperature = 0x104,\n\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MaxTemperature = 0x105,\n\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TemperatureError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Traffic Light\nexport const SRV_TRAFFIC_LIGHT = 0x15c38d9b\nexport enum TrafficLightReg {\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [red] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Red = 0x80,\n\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [orange] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Orange = 0x81,\n\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [green] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Green = 0x82,\n}\n\n// Service: Total Volatile organic compound\nexport const SRV_TVOC = 0x12a5b597\nexport enum TvocReg {\n    /**\n     * Read-only ppb u22.10 (uint32_t). Total volatile organic compound readings in parts per billion.\n     *\n     * ```\n     * const [tVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TVOC = 0x101,\n\n    /**\n     * Read-only ppb u22.10 (uint32_t). Error on the reading data\n     *\n     * ```\n     * const [tVOCError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TVOCError = 0x106,\n\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinTVOC = 0x104,\n\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxTVOC = 0x105,\n\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ConditioningPeriod = 0x180,\n}\n\n// Service: UV index\nexport const SRV_UV_INDEX = 0x1f6e0d90\n\nexport enum UvIndexVariant { // uint8_t\n    UVA_UVB = 0x1,\n    Visible_IR = 0x2,\n}\n\nexport enum UvIndexReg {\n    /**\n     * Read-only uv u16.16 (uint32_t). Ultraviolet index, typically refreshed every second.\n     *\n     * ```\n     * const [uvIndex] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndex = 0x101,\n\n    /**\n     * Read-only uv u16.16 (uint32_t). Error on the UV measure.\n     *\n     * ```\n     * const [uvIndexError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndexError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[UvIndexVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Verified Telemetry\nexport const SRV_VERIFIED_TELEMETRY = 0x2194841f\n\nexport enum VerifiedTelemetryStatus { // uint8_t\n    Unknown = 0x0,\n    Working = 0x1,\n    Faulty = 0x2,\n}\n\n\nexport enum VerifiedTelemetryFingerprintType { // uint8_t\n    FallCurve = 0x1,\n    CurrentSense = 0x2,\n    Custom = 0x3,\n}\n\nexport enum VerifiedTelemetryReg {\n    /**\n     * Read-only Status (uint8_t). Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    TelemetryStatus = 0x180,\n\n    /**\n     * Read-write ms uint32_t. Specifies the interval between computing the fingerprint information.\n     *\n     * ```\n     * const [telemetryStatusInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    TelemetryStatusInterval = 0x80,\n\n    /**\n     * Constant FingerprintType (uint8_t). Type of the fingerprint.\n     *\n     * ```\n     * const [fingerprintType] = jdunpack<[VerifiedTelemetryFingerprintType]>(buf, \"u8\")\n     * ```\n     */\n    FingerprintType = 0x181,\n\n    /**\n     * Template Fingerprint information of a working sensor.\n     *\n     * ```\n     * const [confidence, template] = jdunpack<[number, Uint8Array]>(buf, \"u16 b\")\n     * ```\n     */\n    FingerprintTemplate = 0x182,\n}\n\nexport enum VerifiedTelemetryCmd {\n    /**\n     * No args. This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.\n     */\n    ResetFingerprintTemplate = 0x80,\n\n    /**\n     * No args. This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.\n     */\n    RetrainFingerprintTemplate = 0x81,\n}\n\nexport enum VerifiedTelemetryEvent {\n    /**\n     * Argument: telemetry_status Status (uint8_t). The telemetry status of the device was updated.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    TelemetryStatusChange = 0x3,\n\n    /**\n     * The fingerprint template was updated\n     */\n    FingerprintTemplateChange = 0x80,\n}\n\n// Service: Vibration motor\nexport const SRV_VIBRATION_MOTOR = 0x183fc4a2\nexport enum VibrationMotorReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the vibration motor responds to vibrate commands.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum VibrationMotorCmd {\n    /**\n     * Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [duration, speed] = rest[0]\n     * ```\n     */\n    Vibrate = 0x80,\n}\n\n// Service: Water level\nexport const SRV_WATER_LEVEL = 0x147b62ed\n\nexport enum WaterLevelVariant { // uint8_t\n    Resistive = 0x1,\n    ContactPhotoElectric = 0x2,\n    NonContactPhotoElectric = 0x3,\n}\n\nexport enum WaterLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The reported water level.\n     *\n     * ```\n     * const [level] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Level = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[WaterLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Weight Scale\nexport const SRV_WEIGHT_SCALE = 0x1f4d5040\n\nexport enum WeightScaleVariant { // uint8_t\n    Body = 0x1,\n    Food = 0x2,\n    Jewelry = 0x3,\n}\n\nexport enum WeightScaleReg {\n    /**\n     * Read-only kg u16.16 (uint32_t). The reported weight.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Weight = 0x101,\n\n    /**\n     * Read-only kg u16.16 (uint32_t). The estimate error on the reported reading.\n     *\n     * ```\n     * const [weightError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightError = 0x106,\n\n    /**\n     * Read-write kg u16.16 (uint32_t). Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\n     * You do not need to subtract that from the reading, it has already been done.\n     *\n     * ```\n     * const [zeroOffset] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ZeroOffset = 0x80,\n\n    /**\n     * Read-write u16.16 (uint32_t). Calibrated gain on the weight scale error.\n     *\n     * ```\n     * const [gain] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Gain = 0x81,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Maximum supported weight on the scale.\n     *\n     * ```\n     * const [maxWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxWeight = 0x105,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Minimum recommend weight on the scale.\n     *\n     * ```\n     * const [minWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MinWeight = 0x104,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [weightResolution] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightResolution = 0x108,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical scale\n     *\n     * ```\n     * const [variant] = jdunpack<[WeightScaleVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum WeightScaleCmd {\n    /**\n     * No args. Call this command when there is nothing on the scale. If supported, the module should save the calibration data.\n     */\n    CalibrateZeroOffset = 0x80,\n\n    /**\n     * Argument: weight g u22.10 (uint32_t). Call this command with the weight of the thing on the scale.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    CalibrateGain = 0x81,\n}\n\n// Service: WIFI\nexport const SRV_WIFI = 0x18aae1fa\n\nexport enum WifiAPFlags { // uint32_t\n    HasPassword = 0x1,\n    WPS = 0x2,\n    HasSecondaryChannelAbove = 0x4,\n    HasSecondaryChannelBelow = 0x8,\n    IEEE_802_11B = 0x100,\n    IEEE_802_11A = 0x200,\n    IEEE_802_11G = 0x400,\n    IEEE_802_11N = 0x800,\n    IEEE_802_11AC = 0x1000,\n    IEEE_802_11AX = 0x2000,\n    IEEE_802_LongRange = 0x8000,\n}\n\nexport enum WifiCmd {\n    /**\n     * Argument: results pipe (bytes). Return list of WiFi network from the last scan.\n     * Scans are performed periodically while not connected (in particular, on startup and after current connection drops),\n     * as well as upon `reconnect` and `scan` commands.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    LastScanResults = 0x80,\n\n    /**\n     * Automatically connect to named network if available. Also set password if network is not open.\n     *\n     * ```\n     * const [ssid, password] = jdunpack<[string, string]>(buf, \"z z\")\n     * ```\n     */\n    AddNetwork = 0x81,\n\n    /**\n     * No args. Initiate a scan, wait for results, disconnect from current WiFi network if any,\n     * and then reconnect (using regular algorithm, see `set_network_priority`).\n     */\n    Reconnect = 0x82,\n\n    /**\n     * Argument: ssid string (bytes). Prevent from automatically connecting to named network in future.\n     * Forgetting a network resets its priority to `0`.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ForgetNetwork = 0x83,\n\n    /**\n     * No args. Clear the list of known networks.\n     */\n    ForgetAllNetworks = 0x84,\n\n    /**\n     * Set connection priority for a network.\n     * By default, all known networks have priority of `0`.\n     *\n     * ```\n     * const [priority, ssid] = jdunpack<[number, string]>(buf, \"i16 s\")\n     * ```\n     */\n    SetNetworkPriority = 0x85,\n\n    /**\n     * No args. Initiate search for WiFi networks. Generates `scan_complete` event.\n     */\n    Scan = 0x86,\n\n    /**\n     * Argument: results pipe (bytes). Return list of known WiFi networks.\n     * `flags` is currently always 0.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListKnownNetworks = 0x87,\n}\n\n\n/**\n * pipe_report Results\n * ```\n * const [flags, rssi, channel, bssid, ssid] = jdunpack<[WifiAPFlags, number, number, Uint8Array, string]>(buf, \"u32 x[4] i8 u8 b[6] s[33]\")\n * ```\n */\n\n/**\n * pipe_report NetworkResults\n * ```\n * const [priority, flags, ssid] = jdunpack<[number, number, string]>(buf, \"i16 i16 s\")\n * ```\n */\n\n\nexport enum WifiReg {\n    /**\n     * Read-write bool (uint8_t). Determines whether the WiFi radio is enabled. It starts enabled upon reset.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-only bool (uint8_t). Indicates whether or not we currently have an IP address assigned.\n     *\n     * ```\n     * const [connected] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Connected = 0x180,\n\n    /**\n     * Read-only bytes. 0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\n     *\n     * ```\n     * const [ipAddress] = jdunpack<[Uint8Array]>(buf, \"b[16]\")\n     * ```\n     */\n    IpAddress = 0x181,\n\n    /**\n     * Constant bytes. The 6-byte MAC address of the device. If a device does MAC address randomization it will have to \"restart\".\n     *\n     * ```\n     * const [eui48] = jdunpack<[Uint8Array]>(buf, \"b[6]\")\n     * ```\n     */\n    Eui48 = 0x182,\n\n    /**\n     * Read-only string (bytes). SSID of the access-point to which device is currently connected.\n     * Empty string if not connected.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s[32]\")\n     * ```\n     */\n    Ssid = 0x183,\n\n    /**\n     * Read-only dB int8_t. Current signal strength. Returns -128 when not connected.\n     *\n     * ```\n     * const [rssi] = jdunpack<[number]>(buf, \"i8\")\n     * ```\n     */\n    Rssi = 0x184,\n}\n\nexport enum WifiEvent {\n    /**\n     * Emitted upon successful join and IP address assignment.\n     */\n    GotIp = 0x1,\n\n    /**\n     * Emitted when disconnected from network.\n     */\n    LostIp = 0x2,\n\n    /**\n     * A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\n     * The event indicates how many networks where found, and how many are considered\n     * as candidates for connection.\n     *\n     * ```\n     * const [numNetworks, numKnownNetworks] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    ScanComplete = 0x80,\n\n    /**\n     * Emitted whenever the list of known networks is updated.\n     */\n    NetworksChanged = 0x81,\n}\n\n// Service: Wind direction\nexport const SRV_WIND_DIRECTION = 0x186be92b\nexport enum WindDirectionReg {\n    /**\n     * Read-only ° uint16_t. The direction of the wind.\n     *\n     * ```\n     * const [windDirection] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirection = 0x101,\n\n    /**\n     * Read-only ° uint16_t. Error on the wind direction reading\n     *\n     * ```\n     * const [windDirectionError] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirectionError = 0x106,\n}\n\n// Service: Wind speed\nexport const SRV_WIND_SPEED = 0x1b591bbf\nexport enum WindSpeedReg {\n    /**\n     * Read-only m/s u16.16 (uint32_t). The velocity of the wind.\n     *\n     * ```\n     * const [windSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeed = 0x101,\n\n    /**\n     * Read-only m/s u16.16 (uint32_t). Error on the reading\n     *\n     * ```\n     * const [windSpeedError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeedError = 0x106,\n\n    /**\n     * Constant m/s u16.16 (uint32_t). Maximum speed that can be measured by the sensor.\n     *\n     * ```\n     * const [maxWindSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxWindSpeed = 0x105,\n}\n\n","// Registers 0x001-0x07f - r/w common to all services\n// Registers 0x080-0x0ff - r/w defined per-service\n// Registers 0x100-0x17f - r/o common to all services\n// Registers 0x180-0x1ff - r/o defined per-service\n// Registers 0x200-0xeff - custom, defined per-service\n// Registers 0xf00-0xfff - reserved for implementation, should not be on the wire\n\nexport const CMD_GET_REG = 0x1000\nexport const CMD_SET_REG = 0x2000\n\nexport const CMD_EVENT_MASK = 0x8000\nexport const CMD_EVENT_CODE_MASK = 0x00ff\nexport const CMD_EVENT_COUNTER_POS = 8\nexport const CMD_EVENT_COUNTER_MASK = 0x7f\n\nexport const CMD_TOP_MASK = 0xf000\nexport const CMD_REG_MASK = 0x0fff\n\nexport const ACK_MIN_DELAY = 90\nexport const ACK_MAX_DELAY = 120\n\n// Commands 0x000-0x07f - common to all services\n// Commands 0x080-0xeff - defined per-service\n// Commands 0xf00-0xfff - reserved for implementation\n// enumeration data for CTRL, ad-data for other services\nexport const CMD_ADVERTISEMENT_DATA = 0x00\n\nexport const PIPE_PORT_SHIFT = 7\nexport const PIPE_COUNTER_MASK = 0x001f\nexport const PIPE_CLOSE_MASK = 0x0020\nexport const PIPE_METADATA_MASK = 0x0040\n\nexport const JD_SERIAL_HEADER_SIZE = 16\nexport const JD_SERIAL_MAX_PAYLOAD_SIZE = 236\nexport const JD_SERVICE_INDEX_MASK = 0x3f\nexport const JD_SERVICE_INDEX_INV_MASK = 0xc0\nexport const JD_SERVICE_INDEX_CRC_ACK = 0x3f\nexport const JD_SERVICE_INDEX_PIPE = 0x3e\nexport const JD_SERVICE_INDEX_MAX_NORMAL = 0x30\nexport const JD_SERVICE_INDEX_CTRL = 0x00\n\n// the COMMAND flag signifies that the device_identifier is the recipent\n// (i.e., it's a command for the peripheral); the bit clear means device_identifier is the source\n// (i.e., it's a report from peripheral or a broadcast message)\nexport const JD_FRAME_FLAG_COMMAND = 0x01\n// an ACK should be issued with CRC of this package upon reception\nexport const JD_FRAME_FLAG_ACK_REQUESTED = 0x02\n// the device_identifier contains target service class number\nexport const JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = 0x04\n\nexport const JD_ADVERTISEMENT_0_COUNTER_MASK = 0x0000000f\nexport const JD_ADVERTISEMENT_0_ACK_SUPPORTED = 0x00000100\n\n// time withouth seeing a package to be considered \"lost\", 2x announce interval\nexport const JD_DEVICE_LOST_DELAY = 1500\n// time without seeing a packet to be considered \"disconnected\"\nexport const JD_DEVICE_DISCONNECTED_DELAY = 5000\n\nexport const RESET_IN_TIME_US = 2000000\n\nexport const MAX_SERVICES_LENGTH = 59\n\nexport const NEW_LISTENER = \"newListener\"\nexport const REMOVE_LISTENER = \"removeListener\"\n\nexport const CONNECTION_STATE = \"connectionState\"\nexport const CONNECT = \"connect\"\nexport const LOST = \"lost\"\nexport const FOUND = \"found\"\nexport const CONNECTING = \"connecting\"\nexport const DISCONNECT = \"disconnect\"\nexport const DISCONNECTING = \"disconnecting\"\nexport const ANNOUNCE = \"announce\"\nexport const START = \"start\"\nexport const RESTART = \"restart\"\nexport const STOP = \"stop\"\nexport const CHANGE = \"change\"\nexport const EVENT = \"event\"\nexport const RENDER = \"render\"\nexport const REFRESH = \"refresh\"\nexport const MESSAGE = \"message\"\nexport const FIRMWARE_BLOBS_CHANGE = \"firmwareBlobsChange\"\nexport const LATE = \"late\"\nexport const GET_ATTEMPT = \"getAttempt\"\nexport const SERVICE_CLIENT_ADDED = `serviceClientAdded`\nexport const SERVICE_CLIENT_REMOVED = `serviceClientRemoved`\nexport const READING_SENT = \"readingSent\"\nexport const ROLE_CHANGE = \"roleChange\"\nexport const ROLE_MANAGER_CHANGE = \"roleManagerChange\"\n\nexport const SERVICE_PROVIDER_ADDED = `serviceProviderAdded`\nexport const SERVICE_PROVIDER_REMOVED = `serviceProviderRemoved`\n\nexport const IDENTIFY = \"identify\"\nexport const IDENTIFY_DURATION = 2000\nexport const RESET = \"reset\"\n\nexport const DATA = \"data\"\nexport const CLOSE = \"close\"\n\nexport const DEVICE_CONNECT = \"deviceConnect\"\nexport const DEVICE_LOST = \"deviceLost\"\nexport const DEVICE_FOUND = \"deviceFound\"\nexport const DEVICE_DISCONNECT = \"deviceDisconnect\"\nexport const DEVICE_ANNOUNCE = \"deviceAnnounce\"\nexport const DEVICE_PACKET_ANNOUNCE = \"devicePacketAnnounce\"\nexport const DEVICE_RESTART = \"deviceRestart\"\nexport const DEVICE_CHANGE = \"deviceChange\"\nexport const DEVICE_FIRMWARE_INFO = \"firmwareInfo\"\nexport const DEVICE_CLEAN = \"deviceClean\"\nexport const SELF_ANNOUNCE = \"selfAnnounce\"\n\nexport const PACKET_SEND = \"packetSend\"\nexport const PACKET_SEND_DISCONNECT = \"packetSendDisconnect\"\n\nexport const PACKET_PRE_PROCESS = \"packetPreProcess\"\nexport const PACKET_PROCESS = \"packetProcess\"\nexport const PACKET_RECEIVE = \"packetReceive\"\nexport const PACKET_RECEIVE_ANNOUNCE = \"packetReceiveAnnounce\"\nexport const PACKET_EVENT = \"packetEvent\"\nexport const PACKET_REPORT = \"packetReport\"\nexport const PACKET_ANNOUNCE = \"packetAnnounce\"\nexport const PACKET_INVALID_CRC = \"packetInvalidCrc\"\nexport const PACKET_INVALID_DATA = \"packetInvalidData\"\nexport const PACKET_DATA_NORMALIZE = \"packetDataNormalize\"\n\nexport const REPORT_RECEIVE = \"reportReceive\"\nexport const REPORT_UPDATE = \"reportUpdate\"\nexport const COMMAND_RECEIVE = \"commandReceive\"\n\nexport const ERROR = \"error\"\nexport const TRACE = \"trace\"\nexport const TIMEOUT = \"timeout\"\nexport const TIMEOUT_DISCONNECT = \"timeoutDisconnect\"\n\nexport const PROGRESS = \"progress\"\n\nexport const PACKET_KIND_RW = \"rw\"\nexport const PACKET_KIND_RO = \"ro\"\nexport const PACKET_KIND_EVENT = \"event\"\nexport const PACKET_KIND_ANNOUNCE = \"announce\"\n\nexport const REGISTER_NODE_NAME = \"register\"\nexport const REPORT_NODE_NAME = \"report\"\nexport const CONST_NODE_NAME = \"const\"\nexport const EVENT_NODE_NAME = \"event\"\nexport const SERVICE_NODE_NAME = \"service\"\nexport const SERVICE_MIXIN_NODE_NAME = \"serviceMixin\"\nexport const DEVICE_NODE_NAME = \"device\"\nexport const VIRTUAL_DEVICE_NODE_NAME = \"virtualdevice\"\nexport const BUS_NODE_NAME = \"bus\"\nexport const COMMAND_NODE_NAME = \"command\"\nexport const FIELD_NODE_NAME = \"field\"\nexport const PIPE_NODE_NAME = \"pipe\"\nexport const PIPE_REPORT_NODE_NAME = \"pipe_report\"\nexport const CRC_ACK_NODE_NAME = \"crcAck\"\nexport const SERVICE_TEST_NODE_NAME = \"serviceTest\"\n\nexport const REGISTER_REFRESH_TIMEOUT = 150\nexport const REGISTER_REFRESH_RETRY_0 = 30\nexport const REGISTER_REFRESH_RETRY_1 = 80\nexport const REGISTER_POLL_STREAMING_INTERVAL = 5000\nexport const REGISTER_POLL_FIRST_REPORT_INTERVAL = 400\nexport const REGISTER_POLL_REPORT_INTERVAL = 5001\nexport const REGISTER_POLL_REPORT_MAX_INTERVAL = 60000\nexport const REGISTER_POLL_REPORT_VOLATILE_INTERVAL = 1000\nexport const REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL = 5000\nexport const REGISTER_OPTIONAL_POLL_COUNT = 3\nexport const STREAMING_DEFAULT_INTERVAL = 50\n\nexport const FLASH_MAX_DEVICES = 6\n\nexport const PING_LOGGERS_POLL = 2400\nexport const ROLE_MANAGER_POLL = 1500\nexport const REFRESH_REGISTER_POLL = 50\n\nexport const USB_TRANSPORT = \"usb\"\nexport const BLUETOOTH_TRANSPORT = \"bluetooth\"\nexport const SERIAL_TRANSPORT = \"serial\"\nexport const PACKETIO_TRANSPORT = \"packetio\"\nexport const WEBSOCKET_TRANSPORT = \"web\"\n\nexport const META_ACK = \"ACK\"\nexport const META_ACK_FAILED = \"ACK_FAILED\"\nexport const META_PIPE = \"PIPE\"\nexport const META_GET = \"GET\"\nexport const META_TRACE = \"TRACE\"\n\nexport const REGISTER_PRE_GET = \"registerPreGet\"\n\nexport const TRACE_FILTER_HORIZON = 100\nexport const EMBED_MIN_ASPECT_RATIO = 1.22\n\nexport const BLUETOOTH_JACDAC_SERVICE = \"f8530001-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_RX_CHARACTERISTIC =\n    \"f8530002-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_TX_CHARACTERISTIC =\n    \"f8530003-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC =\n    \"f8530004-a97f-49f5-a554-3e373fbea2d5\"\n\nexport const TRANSPORT_CONNECT_RETRY_DELAY = 500\nexport const TRANSPORT_PULSE_TIMEOUT = 60000 // don't interfere with manual flashing of devices\n\nexport const ERROR_MICROBIT_V1 = \"microbit/v1-not-supported\"\nexport const ERROR_MICROBIT_UNKNOWN = \"microbit/unknown-hardware-revision\"\nexport const ERROR_MICROBIT_JACDAC_MISSING = \"microbit/jacdac-missing\"\nexport const ERROR_MICROBIT_INVALID_MEMORY = \"microbit/invalid-memory\"\n\nexport const ROLE_BOUND = \"roleBound\"\nexport const ROLE_UNBOUND = \"roleUnbound\"\nexport const ROLE_HAS_NO_SERVICE = \"roleHasNoService\"\nexport const BOUND = \"bound\"\nexport const UNBOUND = \"unbound\"\n\nexport const JACDAC_ERROR = \"JacdacError\"\n\nexport * from \"../../jacdac-spec/dist/specconstants\"\n","export function isMixinService(serviceClass: number) {\n    return (serviceClass & 0x2000_0000) === 0x2000_0000\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\nexport function packetsToRegisters(packets: jdspec.PacketInfo[]) {\n    return packets.filter(pkt => !pkt.derived && isRegister(pkt))\n}\n\nexport function parseIntFloat(\n    spec: jdspec.ServiceSpec,\n    w: string,\n    allowFloat = false\n): number {\n    if (/^-?0x[a-f\\d_]+$/i.test(w) || /^-?[\\d_]+$/.test(w)) {\n        const v = parseInt(w.replace(/_/g, \"\")) // allow for 0x3fff_ffff syntax\n        if (isNaN(v)) throw new Error(\"can't parse int: \" + w)\n        return v\n    }\n\n    if (allowFloat && /^-?\\d*(\\.\\d*)?(e(-?)\\d+)?$/.test(w)) {\n        const v = parseFloat(w)\n        if (isNaN(v)) throw new Error(\"can't parse float: \" + w)\n        return v\n    }\n\n    const ww = w.split(/\\./)\n    if (ww.length != 2) {\n        throw new Error(`expecting int or enum member here`)\n    }\n    const en = spec.enums[ww[0]]\n    if (!en) {\n        throw new Error(`${ww[0]} is not an enum type`)\n    }\n    // eslint-disable-next-line no-prototype-builtins\n    if (!en.members.hasOwnProperty(ww[1]))\n        throw new Error(`${ww[1]} is not a member of ${ww[0]}`)\n    return en.members[ww[1]] || 0\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"jdspec.d.ts\" />\nimport { parseIntFloat } from \"./jdutils\"\n\nexport const DEVICE_IMAGE_WIDTH = 1024\nexport const DEVICE_IMAGE_HEIGHT = 768\n\n// modified subset of SenML\nexport const unitDescription: jdspec.SMap<string> = {\n    \"°\": \"angle\",\n    \"°/s\": \"rotation rate\",\n    \"°/s2\": \"rotation acceleration\",\n    m: \"meter\",\n    kg: \"kilogram\",\n    s: \"second\",\n    A: \"ampere\",\n    K: \"kelvin\",\n    cd: \"candela\",\n    mol: \"mole\",\n    Hz: \"hertz\",\n    rad: \"radian\",\n    sr: \"steradian\",\n    N: \"newton\",\n    Pa: \"pascal\",\n    J: \"joule\",\n    W: \"watt\",\n    C: \"coulomb\",\n    V: \"volt\",\n    F: \"farad\",\n    Ohm: \"ohm\",\n    S: \"siemens\",\n    Wb: \"weber\",\n    T: \"tesla\",\n    H: \"henry\",\n    \"°C\": \"degrees Celsius\",\n    lm: \"lumen\",\n    lx: \"lux\",\n    Bq: \"becquerel\",\n    Gy: \"gray\",\n    Sv: \"sievert\",\n    kat: \"katal\",\n    m2: \"square meter (area)\",\n    m3: \"cubic meter (volume)\",\n    \"m/s\": \"meter per second (velocity)\",\n    \"m/s2\": \"meter per square second (acceleration)\",\n    \"m3/s\": \"cubic meter per second (flow rate)\",\n    \"W/m2\": \"watt per square meter (irradiance)\",\n    \"cd/m2\": \"candela per square meter (luminance)\",\n    bit: \"bit (information content)\",\n    \"bit/s\": \"bit per second (data rate)\",\n    lat: \"degrees latitude\",\n    lon: \"degrees longitude\",\n    pH: \"pH value (acidity; logarithmic quantity)\",\n    dB: \"decibel (logarithmic quantity)\",\n    dBW: \"decibel relative to 1 W (power level)\",\n    count: \"1 (counter value)\",\n    \"/\": \"1 (ratio e.g., value of a switch)\",\n    \"%RH\": \"Percentage (Relative Humidity)\",\n    \"%EL\": \"Percentage (remaining battery energy level)\",\n    EL: \"seconds (remaining battery energy level)\",\n    \"1/s\": \"1 per second (event rate)\",\n    \"S/m\": \"Siemens per meter (conductivity)\",\n    B: \"Byte (information content)\",\n    VA: \"volt-ampere (Apparent Power)\",\n    VAs: \"volt-ampere second (Apparent Energy)\",\n    var: \"volt-ampere reactive (Reactive Power)\",\n    vars: \"volt-ampere-reactive second (Reactive Energy)\",\n    \"J/m\": \"joule per meter (Energy per distance)\",\n    \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n    \"s/60°\": \"servo speed (time to travel 60°)\",\n    \"kg/cm\": \"torque\",\n    hsv: \"bit HSV color\",\n    rgb: \"RGB color\",\n    rpm: \"revolutions per minute\",\n    uv: \"UV index\",\n    lux: \"illuminance\",\n    bpm: \"beats per minute\",\n    mcd: \"micro candella\",\n    px: \"pixel\",\n}\n\nexport const secondaryUnitConverters: jdspec.SMap<{\n    name: string\n    unit: senml.Unit | \"#\"\n    scale: number\n    offset: number\n}> = {\n    ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1000, offset: 0 },\n    min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n    h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n    MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1000000, offset: 0 },\n    kW: { name: \"kilowatt\", unit: \"W\", scale: 1000, offset: 0 },\n    kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1000, offset: 0 },\n    kvar: { name: \"kilovar\", unit: \"var\", scale: 1000, offset: 0 },\n    Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n    Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n    kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 3600000, offset: 0 },\n    varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n    kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 3600000, offset: 0 },\n    kVAh: {\n        name: \"kilovolt-ampere-hour\",\n        unit: \"VAs\",\n        scale: 3600000,\n        offset: 0,\n    },\n    \"Wh/km\": {\n        name: \"watt-hour per kilometer\",\n        unit: \"J/m\",\n        scale: 3.6,\n        offset: 0,\n    },\n    KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n    GB: { name: \"gigabyte\", unit: \"B\", scale: 1.0e9, offset: 0 },\n    \"Mbit/s\": {\n        name: \"megabit per second\",\n        unit: \"bit/s\",\n        scale: 1000000,\n        offset: 0,\n    },\n    \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n    \"MB/s\": {\n        name: \"megabyte per second\",\n        unit: \"bit/s\",\n        scale: 8000000,\n        offset: 0,\n    },\n    mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1000, offset: 0 },\n    mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1000, offset: 0 },\n    dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n    \"ug/m3\": {\n        name: \"microgram per cubic meter\",\n        unit: \"kg/m3\",\n        scale: 1.0e-9,\n        offset: 0,\n    },\n    \"mm/h\": {\n        name: \"millimeter per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3600000,\n        offset: 0,\n    },\n    \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n    \"cm/s\": {\n        name: \"centimeter per seconds\",\n        unit: \"m/s\",\n        scale: 1 / 100,\n        offset: 0,\n    },\n    ppm: { name: \"parts per million\", unit: \"/\", scale: 1.0e-6, offset: 0 },\n    ppb: { name: \"parts per billion\", unit: \"/\", scale: 1.0e-9, offset: 0 },\n    \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1000, offset: 0 },\n    hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n    mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1000, offset: 0 },\n    cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n    km: { name: \"kilometer\", unit: \"m\", scale: 1000, offset: 0 },\n    \"km/h\": {\n        name: \"kilometer per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3.6,\n        offset: 0,\n    },\n    \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1000, offset: 0 },\n    nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n    nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n\n    // compat with previous Jacdac versions\n    frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n    us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n    mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 3.6e-3, offset: 0 },\n    g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n    \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 },\n}\n\nexport const encodings: jdspec.SMap<jdspec.Encoding> = {\n    json: \"JSON\",\n    bitset: \"bitset\",\n}\n\nexport function resolveUnit(unit: string) {\n    if (!unit) return { name: \"\", scale: 1, offset: 1 } // indentifier\n\n    // seconary unit?\n    const su = secondaryUnitConverters[unit]\n    if (su) return su\n\n    const name = unitDescription[unit]\n    if (name) return { name, unit, scale: 1, offset: 0 }\n\n    return undefined\n}\n\nexport function units(): { name: string; description: string }[] {\n    const r: { name: string; description: string }[] = []\n    Object.keys(unitDescription).forEach(k => {\n        r.push({ name: k, description: unitDescription[k] })\n        Object.keys(secondaryUnitConverters)\n            .filter(scd => secondaryUnitConverters[scd].unit === k)\n            .forEach(scd =>\n                r.push({\n                    name: scd,\n                    description: secondaryUnitConverters[scd].name,\n                })\n            )\n    })\n    r.sort((l, r) => l.name.localeCompare(r.name))\n    return r\n}\n\n/* check ranges, see system.md\nRegisters `0x001-0x07f` - r/w common to all services\nRegisters `0x080-0x0ff` - r/w defined per-service\nRegisters `0x100-0x17f` - r/o common to all services\nRegisters `0x180-0x1ff` - r/o defined per-service\nRegisters `0x200-0xeff` - custom, defined per-service\nRegisters `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n*/\nconst identifierRanges: { [index: string]: [number, number][] } = {\n    rw: [\n        [0x001, 0x07f],\n        [0x080, 0x0ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    ro: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    const: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    command: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    report: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    event: [\n        [0x00, 0x7f], // system\n        [0x80, 0xff],\n    ],\n}\n\nexport function parseServiceSpecificationMarkdownToJSON(\n    filecontent: string,\n    includes?: jdspec.SMap<jdspec.ServiceSpec>,\n    filename = \"\"\n): jdspec.ServiceSpec {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdspec.ServiceSpec = {\n        name: \"\",\n        status: \"experimental\",\n        shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n        camelName: \"\",\n        shortName: \"\",\n        extends: [],\n        notes: {},\n        classIdentifier: 0,\n        enums: {},\n        constants: {},\n        packets: [],\n        tags: [],\n    }\n\n    let backticksType = \"\"\n    let enumInfo: jdspec.EnumInfo = null\n    let packetInfo: jdspec.PacketInfo = null\n    let pipePacket: jdspec.PacketInfo = null\n    let errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let noteId = \"short\"\n    let lastCmd: jdspec.PacketInfo\n    let packetsToDescribe: jdspec.PacketInfo[]\n    let nextModifier: \"\" | \"segmented\" | \"multi-segmented\" | \"repeats\" = \"\"\n\n    const systemInfo = includes?.[\"_system\"]\n    const usedIds: jdspec.SMap<string> = {}\n    for (const prev of values(includes || {})) {\n        if (prev.classIdentifier) usedIds[prev.classIdentifier + \"\"] = prev.name\n    }\n\n    try {\n        if (includes[\"_system\"] && includes[\"_base\"]) processInclude(\"_base\")\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (errors.length) info.errors = errors\n\n    for (const k of Object.keys(info.notes))\n        info.notes[k] = normalizeMD(info.notes[k])\n    for (const v of info.packets) v.description = normalizeMD(v.description)\n\n    if (!info.camelName)\n        info.camelName = camelize(\n            info.name\n                .replace(/\\s+/g, \" \")\n                .replace(/[ -](.)/g, (f, l) => l.toUpperCase())\n                .replace(/[^\\w]+/g, \"_\")\n        )\n    if (!info.shortName) info.shortName = info.camelName\n\n    if (info.camelName == \"system\") info.classIdentifier = 0x1fff_fff1\n    else if (info.camelName == \"base\") info.classIdentifier = 0x1fff_fff3\n    else if (info.camelName == \"sensor\") info.classIdentifier = 0x1fff_fff2\n\n    if (info.shortName != \"control\" && !info.classIdentifier)\n        error(\"identifier: not specified\")\n\n    info.packets.forEach(pkt => (pkt.packFormat = packFormat(info, pkt)))\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || line.slice(0, 4) == \"    \"\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                const [, hd, cont] = m\n                packetsToDescribe = null\n                const newNoteId = cont.trim().toLowerCase()\n                if (hd == \"#\" && !info.name) {\n                    info.name = cont.trim()\n                    line = \"\"\n                } else if (\n                    newNoteId == \"registers\" ||\n                    newNoteId == \"commands\" ||\n                    newNoteId == \"events\" ||\n                    newNoteId == \"examples\"\n                ) {\n                    noteId = newNoteId\n                    line = \"\"\n                } else {\n                    if (noteId == \"short\") noteId = \"long\"\n                    // keep line\n                }\n            }\n\n            if (packetsToDescribe) {\n                for (const iface of packetsToDescribe)\n                    iface.description += line + \"\\n\"\n            } else {\n                if (line || info.notes[noteId]) {\n                    if (!info.notes[noteId]) info.notes[noteId] = \"\"\n                    info.notes[noteId] += line + \"\\n\"\n                }\n            }\n        } else {\n            if (packetsToDescribe && packetsToDescribe[0].description)\n                packetsToDescribe = null\n            const expanded = line\n                .replace(/\\/\\/.*/, \"\")\n                .replace(/[?@:=,{};]/g, s => \" \" + s + \" \")\n                .trim()\n            if (!expanded) return\n            const words = expanded.split(/\\s+/)\n            if (/^[;,]/.test(words[words.length - 1])) words.pop()\n            let cmd = words[0]\n            // allow for `command = Foo.Bar` etc (ie. command is not a keyword there)\n            if (words[1] == \":\" || words[1] == \"=\") cmd = \":\"\n            switch (cmd) {\n                case \"enum\":\n                case \"flags\":\n                    startEnum(words)\n                    break\n                case \"define\":\n                    constant(words)\n                    break\n                case \"meta\":\n                case \"pipe\":\n                case \"report\":\n                case \"command\":\n                case \"const\":\n                case \"ro\":\n                case \"rw\":\n                case \"event\":\n                case \"client\":\n                case \"volatile\":\n                case \"lowlevel\":\n                case \"restricted\":\n                    startPacket(words)\n                    break\n                case \"}\":\n                    if (packetInfo) {\n                        finishPacket()\n                    } else if (enumInfo) {\n                        enumInfo = null\n                    } else {\n                        error(\"nothing to end here\")\n                    }\n                    break\n                default:\n                    if (packetInfo) packetField(words)\n                    else if (enumInfo) enumMember(words)\n                    else metadataMember(words)\n            }\n        }\n    }\n\n    function finishPacket() {\n        const paderr = paddingError(packetInfo)\n\n        if (paderr) {\n            packetInfo.packed = true\n            error(`${paderr} in ${packetInfo.kind} ${packetInfo.name}`)\n        }\n\n        let repeats = false\n        let hadzero = false\n        for (const p of packetInfo.fields) {\n            if (hadzero) {\n                error(\n                    `field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`\n                )\n                break\n            }\n            if (p.startRepeats) {\n                if (repeats)\n                    error(\n                        `repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`\n                    )\n                repeats = true\n            }\n            if (p.storage == 0 && p.type != \"string0\") {\n                if (repeats) {\n                    error(\n                        `variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`\n                    )\n                    break\n                }\n                hadzero = true\n            }\n        }\n\n        const pid = packetInfo.identifier\n        const ranges = identifierRanges[packetInfo.kind]\n        if (\n            packetInfo.name != \"set_register\" &&\n            packetInfo.name != \"get_register\" &&\n            ranges &&\n            !ranges.some(range => range[0] <= pid && pid <= range[1])\n        )\n            error(\n                `${packetInfo.name} identifier 0x${pid.toString(\n                    16\n                )} out of range, expected in ${ranges\n                    .map(\n                        range =>\n                            `[${range\n                                .map(r => `0x${r.toString(16)}`)\n                                .join(\", \")}]`\n                    )\n                    .join(\", \")}`\n            )\n\n        // additional checks for specific packets\n        if (\n            [\n                \"reading_error\",\n                \"min_reading\",\n                \"max_reading\",\n                \"reading_resolution\",\n            ].indexOf(packetInfo.identifierName) > -1\n        ) {\n            const regid = packetInfo.identifierName\n            if (packetInfo.fields.length > 1) error(`${regid} must be a number`)\n            const reading = info.packets.find(\n                pkt => pkt.kind === \"ro\" && pkt.identifierName === \"reading\"\n            )\n            if (!reading) error(`${regid} register without a reading register`)\n            else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n                error(\n                    `${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`\n                )\n        }\n\n        packetInfo = null\n    }\n\n    function normalizeMD(md: string) {\n        return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n    }\n\n    function checkBraces(words: string[]) {\n        if (enumInfo || packetInfo) error(\"already in braces\")\n        if (words) {\n            if (words[2] != \"{\") error(`expecting: ${words[0]} NAME {`)\n        }\n\n        enumInfo = null\n        packetInfo = null\n    }\n\n    function forceSection(sectionId: string) {\n        if (noteId != sectionId) {\n            error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`)\n        }\n    }\n\n    function generalKind(k: jdspec.PacketKind): jdspec.PacketKind {\n        switch (k) {\n            case \"const\":\n            case \"ro\":\n            case \"rw\":\n                return \"rw\"\n            default:\n                return k\n        }\n    }\n\n    function startPacket(words: string[]) {\n        checkBraces(null)\n\n        let client: boolean = undefined\n        let lowLevel: boolean = undefined\n        let restricted: boolean = undefined\n        if (words[0] === \"restricted\") {\n            restricted = true\n            words.shift()\n        } else if (words[0] === \"client\") {\n            client = true\n            words.shift()\n        } else if (words[0] === \"lowlevel\") {\n            lowLevel = true\n            words.shift()\n        }\n\n        const kindSt = words.shift()\n        let kind: jdspec.PacketKind = \"command\"\n        if (kindSt == \"meta\") {\n            forceSection(\"commands\")\n            let w2 = words.shift()\n            if (w2 == \"pipe\") w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"meta_pipe_\" + w2) as any\n            else error(\"invalid token after meta\")\n        } else if (kindSt == \"pipe\") {\n            forceSection(\"commands\")\n            const w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\") kind = (\"pipe_\" + w2) as any\n            else error(\"invalid token after pipe\")\n        } else {\n            kind = kindSt as any\n        }\n\n        if (restricted && kind !== \"command\")\n            error(\"restricted only applies to commands\")\n\n        let internal: boolean = undefined\n        if (words[0] === \"internal\") {\n            internal = true\n            words.shift()\n        }\n\n        let volatile: boolean = undefined\n        if (words[0] === \"volatile\") {\n            if (kind != \"ro\" && kind != \"rw\")\n                error(\"volatile can only modify ro or rw\")\n            volatile = true\n            words.shift()\n        }\n\n        let name = words.shift()\n        const isReport = kind == \"report\"\n        if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n            words.unshift(name)\n            name = lastCmd.name\n        }\n\n        packetInfo = {\n            kind,\n            name: normalizeName(name),\n            identifier: undefined,\n            description: \"\",\n            fields: [],\n            internal,\n            client,\n            lowLevel,\n            volatile,\n            restricted,\n        }\n        if (isReport && lastCmd && name == lastCmd.name) {\n            packetInfo.secondary = true\n            lastCmd.hasReport = true\n        }\n        if (!packetsToDescribe) packetsToDescribe = []\n        packetsToDescribe.push(packetInfo)\n        if (words[0] == \"?\") {\n            words.shift()\n            packetInfo.optional = true\n        }\n\n        const prev = info.packets.filter(p => p.name == packetInfo.name)\n        if (prev.length == 0) {\n            // OK\n        } else if (\n            prev.length == 1 &&\n            prev[0].kind == \"command\" &&\n            packetInfo.kind == \"report\"\n        ) {\n            // OK\n        } else {\n            error(`packet redefinition ${prev.map(p => p.name).join(\", \")} `)\n        }\n\n        if (/pipe/.test(kind)) {\n            if (!pipePacket)\n                error(\n                    \"pipe definitions can only occur after the pipe-open packet\"\n                )\n            else packetInfo.pipeType = pipePacket.pipeType\n        }\n\n        const atat = words.indexOf(\"@\")\n        if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n            // no identifier\n            packetInfo.identifier = 0\n        } else if (atat >= 0) {\n            const w = words[atat + 1]\n            let v = parseInt(w)\n            let isSet = true\n            if (isNaN(v)) {\n                v = 0\n                isSet = false\n                if (systemInfo) {\n                    const systemPacket = systemInfo.packets.find(\n                        p => p.name == w\n                    )\n                    if (systemPacket) {\n                        v = systemPacket.identifier\n                        packetInfo.identifierName = w\n                        if (systemPacket.kind != kind)\n                            error(\n                                `kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`\n                            )\n                        else isSet = true\n                    } else error(`${w} not found in _system`)\n                } else {\n                    error(`${w} cannot be resolved, since _system is missing`)\n                }\n            }\n\n            // if we are accessing the reading or reading_error register, mark it volatile\n            if (kind === \"ro\" && (v === 0x101 || v === 0x106))\n                packetInfo.volatile = true\n\n            let isUser = false\n            let isSystem = false\n            let isHigh = 0x200 <= v && v <= 0xeff\n            switch (kind) {\n                case \"const\":\n                case \"ro\":\n                    forceSection(\"registers\")\n                    isSystem = 0x100 <= v && v <= 0x17f\n                    isUser = 0x180 <= v && v <= 0x1ff\n                    break\n                case \"rw\":\n                    forceSection(\"registers\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n                case \"report\":\n                case \"command\":\n                    forceSection(\"commands\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    isHigh = 0x100 <= v && v <= 0xeff\n                    break\n                case \"event\":\n                    forceSection(\"events\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n            }\n\n            if (isUser) {\n                // ok\n            } else if (isSystem) {\n                if (!packetInfo.identifierName)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} should be expressed with a name from _system.md`\n                    )\n            } else if (isHigh) {\n                if (!info.highCommands)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} is from the extended range but 'high: 1' missing`\n                    )\n            }\n\n            packetInfo.identifier = v\n            words.splice(atat, 2)\n        } else {\n            if (isReport && lastCmd) packetInfo.identifier = lastCmd.identifier\n            else error(`@ not found at ${packetInfo.name}`)\n        }\n\n        if (\n            info.packets.some(\n                p =>\n                    generalKind(p.kind) == generalKind(packetInfo.kind) &&\n                    (!/pipe/.test(p.kind) ||\n                        p.pipeType == packetInfo.pipeType) &&\n                    p.identifier == packetInfo.identifier\n            )\n        ) {\n            error(\"packet identifier already used\")\n        }\n\n        info.packets.push(packetInfo)\n\n        if (kind == \"command\") lastCmd = packetInfo\n        else lastCmd = null\n\n        if (words[0] == \"=\" || words[0] == \":\") {\n            words.unshift(\"_\")\n            packetField(words)\n            finishPacket()\n        } else {\n            const last = words.shift()\n            if (last == \"{\") {\n                if (words[0] == \"...\") words.shift()\n                if (words[0] == \"}\") {\n                    words.shift()\n                    finishPacket()\n                }\n                if (words.length) error(`excessive tokens: ${words[0]}...`)\n            } else {\n                if (last === undefined && kind == \"event\") {\n                    finishPacket()\n                } else {\n                    error(\"expecting '{'\")\n                }\n            }\n        }\n    }\n\n    function rangeCheck(tp: string, v: number) {\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n\n        if (isNaN(v)) return v // error already reported\n\n        if (storage == 0) {\n            error(`numeric values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (v < 0 && storage > 0) {\n            error(`negative values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (Math.floor(v) != v && typeShift == 0) {\n            error(`only integer values allowed for ${tp}; got ${v}`)\n            return v\n        }\n\n        let bits = storage < 0 ? -storage * 8 - 1 : storage * 8\n        bits -= typeShift || 0\n        // don't use bitshift to allow for more than 32 bits\n        let max = 1\n        while (bits--) max *= 2\n        if (-v == max) {\n            // OK - min_int\n        } else if (max == 1 && v == 1) {\n            // we make an exception for u0.8 being set to 1\n        } else {\n            if (Math.abs(v) >= max) {\n                error(`value ${v} is out of range for ${tp}`)\n                return v\n            }\n        }\n\n        return v\n    }\n\n    function parseVal(words: string[]) {\n        const eq = words.shift()\n        if (eq != \"=\" && eq != \":\") error(\"expecting '='\")\n        const val = words.shift()\n        return parseIntCheck(val, true)\n    }\n\n    function constant(words: string[]) {\n        if (words.length != 3) {\n            error(`define syntax is \"define name value\" (${words.join(\" \")}}`)\n            return\n        }\n\n        const name = words[1]\n        const svalue = words[2]\n\n        const hex = /^0x/.test(svalue)\n        const value = hex ? parseInt(svalue, 16) : parseInt(svalue)\n        if (isNaN(value)) {\n            error(\"invalid numeric value for constant\")\n            return\n        }\n        info.constants[name] = { value, hex }\n    }\n\n    function packetField(words: string[]) {\n        if (\n            words.length == 2 &&\n            (words[0] == \"repeats\" ||\n                words[0] == \"segmented\" ||\n                words[0] == \"multi-segmented\")\n        ) {\n            nextModifier = words[0]\n            return\n        }\n        const name = normalizeName(words.shift())\n        let defaultValue: number = undefined\n        let isOptional: boolean = undefined\n        let op = words.shift()\n        if (op == \"?\") {\n            isOptional = true\n            op = words.shift()\n        }\n        if (op == \"=\") {\n            defaultValue = parseIntCheck(words.shift(), true)\n            op = words.shift()\n        }\n\n        if (op != \":\") error(\"expecting ':'\")\n\n        const tp = words.shift()\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n        const isFloat = typeShift === null || undefined\n\n        let tok = words.shift()\n        let unit: jdspec.Unit\n        let encoding: jdspec.Encoding\n        if (tok != \"{\") {\n            if (type === \"string\" || type === \"bytes\")\n                encoding = normalizeEncoding(tok)\n            else unit = normalizeUnit(tok)\n            tok = words.shift()\n        }\n\n        if (defaultValue !== undefined) rangeCheck(tp, defaultValue)\n\n        let shift = typeShift || undefined\n        if (unit == \"/\") {\n            // / units should be used with ui0. data\n            if (!/^(u0|i1)\\.\\d+$/.test(tp))\n                error(\n                    `fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`\n                )\n\n            shift = Math.abs(storage) * 8\n            if (storage < 0) shift -= 1\n        }\n\n        const field: jdspec.PacketMember = {\n            name,\n            unit,\n            encoding,\n            shift,\n            isFloat,\n            type,\n            storage,\n            isSimpleType: canonicalType(storage) == type || undefined,\n            defaultValue,\n            isOptional,\n            multiSegmented: nextModifier == \"multi-segmented\" || undefined,\n            segmented:\n                nextModifier == \"segmented\" ||\n                nextModifier == \"multi-segmented\" ||\n                undefined,\n            startRepeats: nextModifier == \"repeats\" || undefined,\n        }\n\n        if (!unit) delete field.unit\n        if (!encoding) delete field.encoding\n\n        if (tok == \"{\") {\n            while (words.length) {\n                tok = words.shift()\n                if (tok == \"}\") break\n                tok = camelize(tok)\n                switch (tok) {\n                    case \"maxBytes\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(\"u8\", parseVal(words))\n                        break\n                    }\n                    case \"typicalMin\":\n                    case \"typicalMax\":\n                    case \"absoluteMin\":\n                    case \"absoluteMax\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(tp, parseVal(words))\n                        break\n                    }\n                    case \"preferredInterval\": {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if ((packetInfo as any)[tok] !== undefined)\n                            error(`field ${tok} already set`)\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ;(packetInfo as any)[tok] = rangeCheck(\n                            \"u32\",\n                            parseVal(words)\n                        )\n                        break\n                    }\n                    default:\n                        error(\"unknown constraint: \" + tok)\n                        break\n                }\n                if (words[0] == \",\") words.shift()\n            }\n            if (tok == \"}\") tok = null\n        }\n\n        if (tok) error(`excessive tokens at the end of member: ${tok}...`)\n\n        if (\n            field.typicalMin === undefined &&\n            field.typicalMax !== undefined &&\n            storage > 0\n        )\n            field.typicalMin = 0\n\n        if (\n            field.absoluteMin === undefined &&\n            field.absoluteMax !== undefined &&\n            storage > 0\n        )\n            field.absoluteMin = 0\n\n        if (!field.storage && field.maxBytes) field.storage = field.maxBytes\n\n        if (/pipe/.test(type)) {\n            packetInfo.pipeType = packetInfo.name\n            if (\n                pipePacket &&\n                pipePacket.name == packetInfo.name &&\n                packetInfo.kind == \"report\"\n            ) {\n                // keep old pipePacket\n            } else {\n                pipePacket = packetInfo\n            }\n        }\n\n        if (\n            !field.isOptional &&\n            packetInfo.fields[packetInfo.fields.length - 1]?.isOptional\n        ) {\n            error(`all fields after an optional field have to optional`)\n        }\n\n        packetInfo.fields.push(field)\n        nextModifier = undefined\n    }\n\n    function startEnum(words: string[]) {\n        checkBraces(null)\n        if (words[2] != \":\" || words[4] != \"{\")\n            error(\"expecting: enum NAME : TYPE {\")\n        enumInfo = {\n            name: normalizeName(words[1]),\n            storage: normalizeStorageType(words[3])[0],\n            isFlags: words[0] == \"flags\" || undefined,\n            members: {},\n        }\n        if (info.enums[enumInfo.name]) error(\"enum redefinition\")\n        info.enums[enumInfo.name] = enumInfo\n    }\n\n    function enumMember(words: string[]) {\n        if (words[1] != \"=\" || words.length != 3)\n            error(`expecting: FIELD_NAME = INTEGER`)\n        enumInfo.members[normalizeName(words[0])] = rangeCheck(\n            canonicalType(enumInfo.storage),\n            parseIntCheck(words[2])\n        )\n    }\n\n    function parseIntCheck(w: string, allowFloat = false) {\n        try {\n            return parseIntFloat(info, w, allowFloat)\n        } catch (e) {\n            error(e.message)\n            return 0\n        }\n    }\n\n    function looksRandom(n: number) {\n        const s = n.toString(16)\n        const h = \"0123456789abcdef\"\n        for (let i = 0; i < h.length; ++i) {\n            const hh = h[i]\n            if (s.indexOf(hh + hh + hh) >= 0) return false\n        }\n        if (/f00d|dead|deaf|beef/.test(s)) return false\n        return true\n    }\n\n    function genRandom() {\n        for (;;) {\n            const m = (Math.random() * 0xfff_ffff) | 0x1000_0000\n            if (looksRandom(m)) return m\n        }\n    }\n\n    function metadataMember(words: string[]) {\n        if (\n            !(\n                (words[1] == \"=\" || words[1] == \":\") &&\n                (words[0] == \"tags\" || words.length == 3)\n            )\n        )\n            error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`)\n        switch (words[0]) {\n            case \"extends\":\n                processInclude(words[2])\n                break\n            case \"class\":\n            case \"identifier\": {\n                info.classIdentifier = parseIntCheck(words[2])\n                if (info.name != \"Control\" && info.classIdentifier == 0)\n                    info.classIdentifier = 1\n                const gen = `how about ${toHex(genRandom())}`\n                if (\n                    !(\n                        info.classIdentifier == 0 ||\n                        (0x1000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x1fff_ff00) ||\n                        (0x2000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x2ffff_ff00)\n                    )\n                )\n                    error(`class identifier out of range; ${gen}`)\n                if (!looksRandom(info.classIdentifier))\n                    error(`class identifier doesn't look random; ${gen}`)\n                if (usedIds[info.classIdentifier + \"\"])\n                    error(\n                        `class identifier ${toHex(\n                            info.classIdentifier\n                        )} already used in ${\n                            usedIds[info.classIdentifier + \"\"]\n                        }; ${gen}`\n                    )\n                break\n            }\n            case \"camel\":\n                info.camelName = words[2]\n                break\n            case \"short\":\n                info.shortName = words[2]\n                break\n            case \"high\":\n                info.highCommands = !!parseIntCheck(words[2])\n                break\n            case \"status\":\n                if (\n                    [\"stable\", \"experimental\", \"deprecated\"].indexOf(words[2]) >\n                    -1\n                )\n                    info.status = <any>words[2]\n                else error(\"unknown status\")\n                break\n            case \"group\":\n                info.group = capitalize(words.slice(2).join(\" \"))\n                break\n            case \"tags\": {\n                const tags = words.slice(2).filter(w => w != \",\" && w != \";\")\n                info.tags = info.tags.concat(tags)\n                break\n            }\n            default:\n                error(\"unknown metadata field: \" + words[0])\n                break\n        }\n    }\n\n    function processInclude(name: string) {\n        if (name == \"_system\") return\n        const inner = includes[name]\n        if (!inner) return error(\"include file not found: \" + name)\n        if (\n            info.packets.some(pkt => !pkt.derived) ||\n            values(info.enums).some(e => !e.derived)\n        )\n            error(\"extends: only allowed on top of the .md file\")\n        if (inner.errors) errors = errors.concat(inner.errors)\n        const innerEnums = clone(inner.enums)\n        Object.keys(innerEnums)\n            .filter(k => !info.enums[k])\n            .forEach(k => {\n                const ie = innerEnums[k]\n                ie.derived = name\n                info.enums[k] = ie\n            })\n        const innerPackets = clone(\n            inner.packets.filter(\n                pkt =>\n                    !info.packets.find(\n                        ipkt =>\n                            ipkt.kind === pkt.kind &&\n                            ipkt.identifier === pkt.identifier\n                    )\n            )\n        )\n        innerPackets.forEach(pkt => (pkt.derived = name))\n        info.packets = [...info.packets, ...innerPackets]\n        if (inner.highCommands) info.highCommands = true\n        info.extends = inner.extends.concat([name])\n    }\n\n    function clone<T>(v: T): T {\n        return JSON.parse(JSON.stringify(v))\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function warn(msg: string) {\n        if (info.camelName == \"system\") return // no warnings in _system\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function normalizeName(n: string) {\n        if (!/^\\w+$/.test(n)) error(\"expecting name here\")\n        if (n.length > 31) error(`name '${n}' too long`)\n        return n\n    }\n\n    function normalizeStorageType(\n        tp: string\n    ): [jdspec.StorageType, string, number] {\n        if (info.enums[tp]) return [info.enums[tp].storage, tp, 0]\n        if (!tp) error(\"expecting type here\")\n        const tp2 = tp.replace(/_t$/, \"\").toLowerCase()\n        const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2)\n        if (m) {\n            const a = parseIntCheck(m[2])\n            const b = parseIntCheck(m[3])\n            const len = a + b\n            if (!(len == 8 || len == 16 || len == 32 || len == 64))\n                error(`fixed point ${tp} can't be ${len} bits`)\n            if (a == 0 && m[1] == \"i\")\n                error(\n                    `fixed point ${tp} can't be i0.X; has to be at least i1.X`\n                )\n            return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b]\n        }\n\n        switch (tp2) {\n            case \"bool\":\n                return [1, tp2, 0]\n            case \"i8\":\n            case \"u8\":\n            case \"i16\":\n            case \"u16\":\n            case \"i32\":\n            case \"u32\":\n            case \"i64\":\n            case \"u64\": {\n                let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3\n                if (tp2[0] == \"i\") sz = -sz\n                return [sz, tp2, 0]\n            }\n            case \"f16\":\n                return [2, tp2, null]\n            case \"f32\":\n                return [4, tp2, null]\n            case \"f64\":\n                return [8, tp2, null]\n            case \"pipe\":\n                return [12, tp2, 0]\n            case \"pipe_port\":\n                return [2, tp2, 0]\n            case \"devid\":\n                return [8, tp2, 0]\n            case \"bytes\":\n            case \"string\":\n            case \"string0\":\n                return [0, tp2, 0]\n            default: {\n                const m = /^u8\\[(\\d+)\\]$/.exec(tp2)\n                if (m) return [parseIntCheck(m[1]), tp2, 0]\n                error(\"unknown type: \" + tp + \" \" + tp2)\n                return [4, tp2, 0]\n            }\n        }\n    }\n\n    function normalizeEncoding(unit: string): jdspec.Encoding {\n        return (unit && encodings[unit.toLowerCase()]) || undefined\n    }\n\n    function normalizeUnit(unit: string): jdspec.Unit {\n        if (unit === undefined || unit === null) return undefined\n\n        if (unitDescription[unit] || secondaryUnitConverters[unit])\n            return unit as jdspec.Unit\n        error(`expecting unit, got '${unit}'`)\n        return undefined\n    }\n\n    function paddingError(iface: jdspec.PacketInfo): string {\n        let byteOffset = 0\n\n        for (const m of iface.fields) {\n            const sz = memberSize(m)\n            if (sz == 0) continue\n            const pad = sz > 4 ? 4 : sz\n            if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0)\n                return `need padding of ${\n                    pad - (byteOffset % pad)\n                } byte(s) before ${m.name}`\n            byteOffset += sz\n        }\n\n        return null\n    }\n}\n\nfunction values<T>(o: jdspec.SMap<T>): T[] {\n    const r: T[] = []\n    for (const k of Object.keys(o)) r.push(o[k])\n    return r\n}\n\nfunction fail(msg: string) {\n    throw new Error(msg)\n}\n\nfunction toUpper(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toUpperCase()\n}\n\nfunction toLower(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toLowerCase()\n}\n\nfunction packed(iface: jdspec.PacketInfo) {\n    if (!iface.packed) return \"\"\n    else return \" __attribute__((packed))\"\n}\n\nfunction cStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    if (tp < 0) return `int${-tp * 8}_t`\n    else return `uint${tp * 8}_t`\n}\n\nfunction cSharpStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    switch (tp) {\n        case -1:\n            return \"sbyte\"\n        case 1:\n            return \"byte\"\n        case -2:\n            return \"short\"\n        case 2:\n            return \"ushort\"\n        case -4:\n            return \"int\"\n        case 4:\n            return \"uint\"\n    }\n    return `unknown({${tp})`\n}\n\nfunction canonicalType(tp: jdspec.StorageType): string {\n    if (tp == 0) return \"bytes\"\n    if (tp < 0) return `i${-tp * 8}`\n    else return `u${tp * 8}`\n}\n\nfunction isRegister(k: jdspec.PacketKind) {\n    return k == \"ro\" || k == \"rw\" || k == \"const\"\n}\n\nfunction toHex(n: number): string {\n    if (n === undefined) return \"\"\n    if (n < 0) return \"-\" + toHex(n)\n    return \"0x\" + n.toString(16)\n}\n\nfunction unitPref(f: jdspec.PacketMember) {\n    if (!f.unit) return \"\"\n    else return prettyUnit(f.unit) + \" \"\n}\n\nfunction prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n            return \"°C\"\n        case \"/\":\n            return \"ratio\"\n        default:\n            return u\n    }\n}\n\nfunction toPython(info: jdspec.ServiceSpec) {\n    const r = [\n        \"# Autogenerated file for \" + info.name,\n        `# Add missing from ... import const`,\n    ]\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r.push(\n            `_JD_SERVICE_CLASS_${toUpper(info.shortName)} = const(${toHex(\n                info.classIdentifier\n            )})`\n        )\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r.push(\n            `_JD_${toUpper(cst)} = const(${\n                hex ? value.toString() : toHex(value)\n            })\\n`\n        )\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        for (const k of Object.keys(en.members))\n            r.push(`_${enPref}_${toUpper(k)} = const(${toHex(en.members[k])})`)\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName) {\n                // TODO find identifier and inline it\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            }\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r.push(`_${name} = const(${val})`)\n        }\n    }\n    return r.join(\"\\n\")\n}\n\nfunction toH(info: jdspec.ServiceSpec) {\n    let r = \"// Autogenerated C header file for \" + info.name + \"\\n\"\n    const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`\n    r += `#ifndef ${hdDef}\\n`\n    r += `#define ${hdDef} 1\\n`\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r += `\\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex(\n            info.classIdentifier\n        )}\\n`\n\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r += `#define ${pref}${toUpper(cst)} ${\n            hex ? toHex(value) : value.toString()\n        }\\n`\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        r += `\\n// enum ${en.name} (${cStorage(en.storage)})\\n`\n        for (const k of Object.keys(en.members))\n            r +=\n                \"#define \" +\n                enPref +\n                \"_\" +\n                toUpper(k) +\n                \" \" +\n                toHex(en.members[k]) +\n                \"\\n\"\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        r += wrapComment(cmt.comment)\n\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName)\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r += `#define ${name} ${val}\\n`\n        }\n\n        const isMetaPipe =\n            pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\"\n\n        if (cmt.needsStruct || isMetaPipe) {\n            let tname =\n                \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name)\n            if (pkt.kind == \"report\") tname += \"_report\"\n            r += `typedef struct ${tname} {\\n`\n            if (isMetaPipe) {\n                r += `    uint32_t identifier; // ${toHex(pkt.identifier)}\\n`\n            }\n            let unaligned = \"\"\n            for (let i = 0; i < pkt.fields.length; ++i) {\n                const f = pkt.fields[i]\n                let def = \"\"\n                const cst = cStorage(f.storage)\n                const sz = memberSize(f)\n                if (f.type == \"string\" || f.type == \"string0\")\n                    def = `char ${f.name}[${sz}]`\n                else if (cst == \"bytes\") def = `uint8_t ${f.name}[${sz}]`\n                else def = `${cst} ${f.name}`\n                // if it's the last field and it start repeats, treat it as an array\n                if (f.startRepeats && i == pkt.fields.length - 1) def += \"[0]\"\n                def += \";\"\n                if (!f.isSimpleType && f.type != \"devid\")\n                    def += \"  // \" + unitPref(f) + f.type\n                else if (f.unit) def += \" // \" + prettyUnit(f.unit)\n                r += \"    \" + unaligned + def + \"\\n\"\n                if (f.type == \"string0\") unaligned = \"// \"\n            }\n            r += `}${packed(pkt)} ${tname}_t;\\n\\n`\n        }\n    }\n    r += \"\\n#endif\\n\"\n    return r\n}\n\nexport function camelize(name: string) {\n    if (!name) return name\n    return (\n        name[0].toLowerCase() +\n        name.slice(1).replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase())\n    )\n}\n\nexport function capitalize(name: string) {\n    if (!name) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nfunction upperCamel(name: string) {\n    name = camelize(name)\n    if (!name?.length) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nexport function snakify(name: string) {\n    return name?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b)\n}\n\nexport function dashify(name: string) {\n    if (!name) return name\n    return snakify(name.replace(/^_+/, \"\"))\n        .replace(/(_|\\s)+/g, \"-\")\n        .toLowerCase()\n}\n\nexport function humanify(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b)\n        .replace(/(-|_)/g, \" \")\n}\n\nfunction addComment(pkt: jdspec.PacketInfo) {\n    let comment = \"\"\n\n    let typeInfo = \"\"\n    let needsStruct = false\n    if (pkt.fields.length == 0) {\n        if (pkt.kind != \"event\") typeInfo = \"No args\"\n    } else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n        const f0 = pkt.fields[0]\n        typeInfo = cStorage(f0.storage)\n        if (!f0.isSimpleType) typeInfo = f0.type + \" (\" + typeInfo + \")\"\n        typeInfo = unitPref(f0) + typeInfo\n        if (f0.name != \"_\") typeInfo = f0.name + \" \" + typeInfo\n    } else {\n        needsStruct = true\n    }\n\n    if (pkt.fields.length == 1) {\n        if (isRegister(pkt.kind)) {\n            let info = \"\"\n            if (pkt.kind == \"ro\") info = \"Read-only\"\n            else if (pkt.kind == \"const\") info = \"Constant\"\n            else info = \"Read-write\"\n            if (typeInfo) typeInfo = info + \" \" + typeInfo\n            else typeInfo = info\n        } else if (typeInfo) {\n            typeInfo = \"Argument: \" + typeInfo\n        }\n    }\n\n    if (pkt.kind == \"report\" && pkt.secondary) {\n        comment += \"Report: \" + typeInfo + \"\\n\"\n    } else {\n        if (pkt.description) {\n            let desc = pkt.description.replace(/\\n\\n[^]*/, \"\")\n            if (typeInfo) desc = typeInfo + \". \" + desc\n            comment = desc + \"\\n\" + comment\n        }\n    }\n\n    return {\n        comment,\n        needsStruct,\n    }\n}\n\nfunction wrapComment(comment: string) {\n    return (\n        \"\\n/**\\n * \" +\n        comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") +\n        \"\\n */\\n\"\n    )\n}\n\nfunction wrapSnippet(code: string) {\n    if (!code) return code\n    return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`\n}\n\nexport const TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\"\nfunction packFormatForField(\n    info: jdspec.ServiceSpec,\n    fld: jdspec.PacketMember,\n    isStatic?: boolean,\n    useBooleans?: boolean\n) {\n    const sz = memberSize(fld)\n    const szSuff = sz ? `[${sz}]` : ``\n    let tsType = \"number\"\n    let fmt = \"\"\n    if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n        fmt = fld.type\n    } else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n        fmt = \"b\" + szSuff\n    } else if (info.enums[fld.type]) {\n        fmt = canonicalType(info.enums[fld.type].storage)\n        tsType = upperCamel(info.camelName) + upperCamel(fld.type)\n        if (isStatic) tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType\n    } else {\n        switch (fld.type) {\n            case \"string\":\n                fmt = \"s\" + szSuff\n                tsType = \"string\"\n                break\n            case \"bytes\":\n                fmt = \"b\" + szSuff\n                break\n            case \"string0\":\n                fmt = \"z\"\n                tsType = \"string\"\n                break\n            case \"devid\":\n                fmt = \"b[8]\"\n                break\n            case \"pipe_port\":\n                fmt = \"u16\"\n                break\n            case \"pipe\":\n                fmt = \"b[12]\"\n                break\n            case \"bool\":\n                // TODO native bool support\n                fmt = \"u8\"\n                if (useBooleans) tsType = \"boolean\"\n                break\n            default:\n                return null\n        }\n    }\n\n    if (tsType == \"number\" && fmt && fmt[0] == \"b\") tsType = \"Buffer\"\n    return { fmt, tsType }\n}\n\n/**\n * Generates the format to pack/unpack a data payload for this packet\n * @param pkt\n * TODO fix this\n */\nexport function packFormat(\n    sinfo: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    useBooleans?: boolean\n): string {\n    if (pkt.packed || !pkt.fields?.length) return undefined\n\n    const fmt: string[] = []\n    for (const fld of pkt.fields) {\n        if (fld.startRepeats) fmt.push(\"r:\")\n        const ff = packFormatForField(sinfo, fld, false, useBooleans)\n        if (!ff) return undefined\n        fmt.push(ff.fmt)\n    }\n\n    return fmt.join(\" \")\n}\n\nexport function packInfo(\n    info: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    options?: {\n        isStatic?: boolean\n        useBooleans?: boolean\n        useJDOM?: boolean\n    }\n) {\n    const {\n        isStatic = false,\n        useBooleans = false,\n        useJDOM = false,\n    } = options || {}\n    const { kind } = pkt\n    const vars: string[] = []\n    const vartp: string[] = []\n    let fmt = \"\"\n    let repeats: string[]\n    let reptp: string[]\n\n    for (let i = 0; i < pkt.fields.length; ++i) {\n        const fld = pkt.fields[i]\n        let isArray = \"\"\n        if (fld.startRepeats) {\n            if (i == pkt.fields.length - 1) {\n                isArray = \"[]\"\n            } else {\n                fmt += \"r: \"\n                repeats = []\n                reptp = []\n                vars.push(\"rest\")\n            }\n        }\n        const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name)\n        const f0 = packFormatForField(info, fld, isStatic, useBooleans)\n        if (!f0 || /(reserved|padding)/.test(fld.name)) {\n            if (!f0)\n                console.log(\n                    `${pkt.name}/${fld.name} - can't get format for '${fld.type}'`\n                )\n            fmt += `x[${memberSize(fld)}] `\n        } else {\n            fmt += f0.fmt + isArray + \" \"\n            let tp = f0.tsType\n            if (tp == \"Buffer\" && !isStatic) tp = \"Uint8Array\"\n            tp += isArray\n            if (repeats) {\n                repeats.push(varname)\n                reptp.push(tp)\n            } else {\n                vars.push(varname)\n                vartp.push(tp)\n            }\n        }\n    }\n\n    fmt = fmt.replace(/ *$/, \"\")\n\n    if (reptp) vartp.push(\"([\" + reptp.join(\", \") + \"])[]\")\n\n    const pktName = camelize(pkt.name)\n    let buffers = \"\"\n    if (useJDOM) {\n        if (kind === \"command\") {\n            for (let i = 0; i < vars.length; ++i)\n                buffers += `const ${vars[i]}: ${vartp[i]} = ...\\n`\n            buffers += `await service.sendCmdPackedAsync(${capitalize(\n                info.camelName\n            )}Reg.${capitalize(pktName)}, [${vars.join(\", \")}])\\n`\n        } else if (isRegister(kind)) {\n            buffers +=\n                \"// get (register to REPORT_UPDATE event to enable background refresh)\\n\"\n            buffers += `const ${pktName}Reg = service.register(${capitalize(\n                info.camelName\n            )}Reg.${capitalize(pktName)})\\n`\n            buffers += `const [${vars.join(\", \")}] : [${vartp.join(\n                \", \"\n            )}] = ${pktName}Reg.unpackedValue\\n`\n            if (kind === \"rw\") {\n                buffers += \"// set\\n\"\n                buffers += `await ${pktName}Reg.sendSetPackedAsync([${vars.join(\n                    \", \"\n                )}])\\n`\n            }\n        }\n    } else {\n        buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\n            \", \"\n        )}]>(buf, \"${fmt}\")\\n`\n    }\n    if (repeats) buffers += `const [${repeats.join(\", \")}] = rest[0]\\n`\n\n    buffers = buffers.replace(/\\n*$/, \"\")\n\n    return {\n        buffers,\n        names: vars,\n        types: vartp,\n    }\n}\n\nfunction memberSize(fld: jdspec.PacketMember) {\n    return Math.abs(fld.storage)\n}\n\nfunction toTypescript(info: jdspec.ServiceSpec, language: \"ts\" | \"sts\" | \"c#\") {\n    const sts = language === \"sts\"\n    const csharp = language === \"c#\"\n    const useNamespace = sts || csharp\n\n    const indent = useNamespace ? \"    \" : \"\"\n    const indent2 = indent + \"    \"\n    const numberkw = csharp ? \"uint \" : \"\"\n    const hexkw = csharp ? \"byte[]\" : \"\"\n    const enumkw = csharp\n        ? indent + \"public enum\"\n        : sts\n        ? indent + \"export const enum\"\n        : \"export enum\"\n    const exportkw = csharp ? \"public\" : \"export\"\n    const cskw = csharp ? \";\" : \"\"\n    let r = useNamespace\n        ? `namespace ${\n              csharp\n                  ? capitalize(TYPESCRIPT_STATIC_NAMESPACE)\n                  : TYPESCRIPT_STATIC_NAMESPACE\n          } {\\n`\n        : \"\"\n\n    r += indent + \"// Service: \" + info.name + \"\\n\"\n    if (csharp) {\n        r += `${indent}public static class ${capitalize(\n            info.camelName\n        )}Constants\\n${indent}{\\n`\n    }\n    if (info.shortId[0] != \"_\") {\n        const name = csharp\n            ? \"ServiceClass\"\n            : `SRV_${snakify(info.camelName).toLocaleUpperCase()}`\n        r +=\n            indent +\n            (csharp ? indent : \"\") +\n            `${exportkw} const ${numberkw}${name} = ${toHex(\n                info.classIdentifier\n            )}${cskw}\\n`\n    }\n    const pref = upperCamel(info.camelName)\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r +=\n            indent +\n            (csharp ? indent : \"\") +\n            `${exportkw} const ${hex ? hexkw : numberkw}${\n                csharp ? capitalize(camelize(cst)) : toUpper(cst)\n            } = ${hex ? value.toString() : toHex(value)}${cskw}\\n`\n    }\n\n    if (csharp) {\n        r += indent + `}\\n`\n    }\n\n    for (const en of values(info.enums)) {\n        const enPref = pref + upperCamel(en.name)\n        r += `\\n${enumkw} ${enPref}${\n            csharp ? `: ${cSharpStorage(en.storage)}` : \"\"\n        } { // ${cStorage(en.storage)}\\n`\n        for (const k of Object.keys(en.members)) {\n            if (sts) r += indent2 + `//% block=\"${humanify(k).toLowerCase()}\"\\n`\n            r += indent2 + k + \" = \" + toHex(en.members[k]) + \",\\n\"\n        }\n        r += indent + \"}\\n\\n\"\n    }\n    const tsEnums: jdspec.SMap<string> = {}\n\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        const pack = pkt.fields.length\n            ? packInfo(info, pkt, {\n                  isStatic: sts,\n                  useBooleans: false,\n              }).buffers\n            : \"\"\n\n        let inner = \"Cmd\"\n        if (isRegister(pkt.kind)) inner = \"Reg\"\n        else if (pkt.kind == \"event\") inner = \"Event\"\n        else if (\n            pkt.kind == \"meta_pipe_command\" ||\n            pkt.kind == \"meta_pipe_report\"\n        )\n            inner = \"PipeCmd\"\n        else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n            inner = \"info\"\n\n        let text = \"\"\n        let meta = \"\"\n        if (pkt.secondary || inner == \"info\") {\n            if (pack)\n                text = wrapComment(\n                    `${pkt.kind} ${upperCamel(pkt.name)}${\n                        pkt.client ? \"\" : wrapSnippet(pack)\n                    }`\n                )\n        } else {\n            const val = toHex(pkt.identifier)\n            if (sts && pkt.kind === \"event\") {\n                meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\\n`\n            }\n            text = `${\n                wrapComment(\n                    cmt.comment + (pkt.client ? \"\" : wrapSnippet(pack))\n                ) + meta\n            }${upperCamel(pkt.name)} = ${val},\\n`\n        }\n\n        if (text) tsEnums[inner] = (tsEnums[inner] || \"\") + text\n\n        // don't line const strings in makecode,\n        // they don't get dropped efficiently\n    }\n\n    for (const k of Object.keys(tsEnums)) {\n        if (k == \"info\") r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\"\n        else {\n            const inner = tsEnums[k]\n                .replace(/^\\n+/, \"\")\n                .replace(/\\n$/, \"\")\n                .replace(/\\n/g, \"\\n    \" + indent)\n            r += `${enumkw} ${pref}${k} {\\n    ${indent}${inner}\\n${indent}}\\n\\n`\n        }\n    }\n\n    if (useNamespace) r += \"}\\n\"\n\n    return r.replace(/ *$/gm, \"\")\n}\n\nexport function generateDeviceSpecificationId(dev: jdspec.DeviceSpec) {\n    return (\n        escapeDeviceIdentifier(dev.company) +\n        \"-\" +\n        escapeDeviceNameIdentifier(dev.name) +\n        (dev.designIdentifier || \"\") +\n        (dev.version\n            ? `v${dev.version\n                  .toLowerCase()\n                  .replace(/^v/, \"\")\n                  .replace(/\\./g, \"\")}`\n            : \"\"\n        ).toLowerCase()\n    )\n}\n\nexport function normalizeDeviceSpecification(dev: jdspec.DeviceSpec) {\n    // reorder fields\n    const clone: jdspec.DeviceSpec = {\n        id: generateDeviceSpecificationId(dev),\n        name: dev.name,\n        company: dev.company,\n        description: dev.description,\n        repo: dev.repo,\n        link: dev.link,\n        services: dev.services,\n        productIdentifiers: dev.productIdentifiers,\n        transport: dev.transport?.toLowerCase(),\n        tags: dev.tags,\n        firmwares: dev.firmwares,\n        version: dev.version ? dev.version.replace(/^v/, \"\") : undefined,\n        designIdentifier: dev.designIdentifier,\n    }\n    if (dev.status !== undefined) clone.status = dev.status\n    return clone\n}\n\nexport function escapeDeviceIdentifier(text: string) {\n    if (!text) text = \"\"\n    const escaped = text\n        .trim()\n        .toLowerCase()\n        .replace(/([^a-z0-9_-])+/gi, \"-\")\n        .replace(/\\./g, \"\") // routing does not like dots\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\")\n    const id = snakify(escaped)\n    return id\n}\n\nexport function escapeDeviceNameIdentifier(text: string) {\n    return escapeDeviceIdentifier(text).replace(/-/g, \"\")\n}\n\nexport function converters(): jdspec.SMap<(s: jdspec.ServiceSpec) => string> {\n    return {\n        json: (j: jdspec.ServiceSpec) => JSON.stringify(j, null, 2),\n        c: toH,\n        ts: j => toTypescript(j, \"ts\"),\n        sts: j => toTypescript(j, \"sts\"),\n        cs: j => toTypescript(j, \"c#\"),\n        py: j => toPython(j),\n        /*\n        \"cpp\": toHPP,\n        */\n    }\n}\n\nexport function isNumericType(field: jdspec.PacketMember) {\n    const tp = field.type\n    return (\n        !field.startRepeats &&\n        /^[uif]\\d+(\\.\\d+)?$/.test(tp) &&\n        tp != \"pipe_port\" &&\n        tp != \"bool\"\n    )\n}\n","/**\n * Various flags to control the runtime environment\n * @category Runtime\n */\nexport class Flags {\n    /**\n     * Enables additional logging and diagnostics\n     */\n    static diagnostics = false\n    /**\n     * Trace who and what generates packets\n     */\n    static trace = false\n    /**\n     * Enables/disabled WebUSB\n     */\n    static webUSB = true\n    /**\n     * Enables/disabled WebSerial\n     */\n    static webSerial = true\n\n    /**\n     * Enables/disables WebBLE\n     */\n    static webBluetooth = false\n}\nexport default Flags\n","import Flags from \"./flags\"\n\nexport function throwError(msg: string, cancel?: boolean) {\n    const e = new Error(msg)\n    if (cancel)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (e as any).__cancel = true\n    throw e\n}\n\nexport function isCancelError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!(e as any)?.__cancel\n}\n\nexport function setAckError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (e) (e as any).__ack = true\n}\n\nexport function isAckError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!(e as any)?.__ack\n}\n\nexport function delay<T>(millis: number, value?: T): Promise<T | undefined> {\n    return new Promise(resolve => setTimeout(() => resolve(value), millis))\n}\n\nexport function memcpy(\n    trg: Uint8Array,\n    trgOff: number,\n    src: ArrayLike<number>,\n    srcOff?: number,\n    len?: number\n) {\n    if (srcOff === void 0) srcOff = 0\n    if (len === void 0) len = src.length - srcOff\n    for (let i = 0; i < len; ++i) trg[trgOff + i] = src[srcOff + i]\n}\n\nexport function strcmp(a: string, b: string) {\n    if (a == b) return 0\n    if (a < b) return -1\n    else return 1\n}\n\nexport function bufferEq(a: Uint8Array, b: ArrayLike<number>, offset = 0) {\n    if (a == b) return true\n    if (!a || !b || a.length != b.length) return false\n    for (let i = offset; i < a.length; ++i) {\n        if (a[i] != b[i]) return false\n    }\n    return true\n}\n\nexport function hash(buf: Uint8Array, bits: number) {\n    bits |= 0\n    if (bits < 1) return 0\n    const h = fnv1(buf)\n    if (bits >= 32) return h >>> 0\n    else return ((h ^ (h >>> bits)) & ((1 << bits) - 1)) >>> 0\n}\n\nexport function idiv(a: number, b: number) {\n    return ((a | 0) / (b | 0)) | 0\n}\nexport function fnv1(data: Uint8Array) {\n    let h = 0x811c9dc5\n    for (let i = 0; i < data.length; ++i) {\n        h = Math.imul(h, 0x1000193) ^ data[i]\n    }\n    return h\n}\n\nexport function crc(p: Uint8Array) {\n    let crc = 0xffff\n    for (let i = 0; i < p.length; ++i) {\n        const data = p[i]\n        let x = (crc >> 8) ^ data\n        x ^= x >> 4\n        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ x\n        crc &= 0xffff\n    }\n    return crc\n}\n\nexport function ALIGN(n: number) {\n    return (n + 3) & ~3\n}\n\n// this will take lower 8 bits from each character\nexport function stringToUint8Array(input: string) {\n    const len = input.length\n    const res = new Uint8Array(len)\n    for (let i = 0; i < len; ++i) res[i] = input.charCodeAt(i) & 0xff\n    return res\n}\n\nexport function uint8ArrayToString(input: ArrayLike<number>) {\n    const len = input.length\n    let res = \"\"\n    for (let i = 0; i < len; ++i) res += String.fromCharCode(input[i])\n    return res\n}\n\nexport function fromUTF8(binstr: string) {\n    if (!binstr) return \"\"\n\n    // escape function is deprecated\n    let escaped = \"\"\n    for (let i = 0; i < binstr.length; ++i) {\n        const k = binstr.charCodeAt(i) & 0xff\n        if (k == 37 || k > 0x7f) {\n            escaped += \"%\" + k.toString(16)\n        } else {\n            escaped += binstr.charAt(i)\n        }\n    }\n\n    // decodeURIComponent does the actual UTF8 decoding\n    return decodeURIComponent(escaped)\n}\n\nexport function toUTF8(str: string, cesu8?: boolean) {\n    let res = \"\"\n    if (!str) return res\n    for (let i = 0; i < str.length; ++i) {\n        let code = str.charCodeAt(i)\n        if (code <= 0x7f) res += str.charAt(i)\n        else if (code <= 0x7ff) {\n            res += String.fromCharCode(0xc0 | (code >> 6), 0x80 | (code & 0x3f))\n        } else {\n            if (!cesu8 && 0xd800 <= code && code <= 0xdbff) {\n                const next = str.charCodeAt(++i)\n                if (!isNaN(next))\n                    code = 0x10000 + ((code - 0xd800) << 10) + (next - 0xdc00)\n            }\n\n            if (code <= 0xffff)\n                res += String.fromCharCode(\n                    0xe0 | (code >> 12),\n                    0x80 | ((code >> 6) & 0x3f),\n                    0x80 | (code & 0x3f)\n                )\n            else\n                res += String.fromCharCode(\n                    0xf0 | (code >> 18),\n                    0x80 | ((code >> 12) & 0x3f),\n                    0x80 | ((code >> 6) & 0x3f),\n                    0x80 | (code & 0x3f)\n                )\n        }\n    }\n    return res\n}\n\nexport interface SMap<T> {\n    [index: string]: T\n}\n\n/** @internal */\nexport class PromiseBuffer<T> {\n    private waiting: ((v: T | Error) => void)[] = []\n    private available: (T | Error)[] = []\n\n    drain() {\n        for (const f of this.waiting) {\n            f(new Error(\"Promise Buffer Reset\"))\n        }\n        this.waiting = []\n        this.available = []\n    }\n\n    pushError(v: Error) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.push(v as any)\n    }\n\n    push(v: T) {\n        const f = this.waiting.shift()\n        if (f) f(v)\n        else this.available.push(v)\n    }\n\n    shiftAsync(timeout = 0) {\n        if (this.available.length > 0) {\n            const v = this.available.shift()\n            if (v instanceof Error) return Promise.reject<T>(v)\n            else return Promise.resolve<T | undefined>(v)\n        } else\n            return new Promise<T>((resolve, reject) => {\n                const f = (v: T | Error) => {\n                    if (v instanceof Error) reject(v)\n                    else resolve(v)\n                }\n                this.waiting.push(f)\n                if (timeout > 0) {\n                    delay(timeout).then(() => {\n                        const idx = this.waiting.indexOf(f)\n                        if (idx >= 0) {\n                            this.waiting.splice(idx, 1)\n                            reject(new Error(\"Timeout\"))\n                        }\n                    })\n                }\n            })\n    }\n}\n\n/** @internal */\nexport class PromiseQueue {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private readonly promises: SMap<(() => Promise<any>)[]> = {}\n\n    enqueue<T>(id: string, f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            let arr = this.promises[id]\n            if (!arr) {\n                arr = this.promises[id] = []\n            }\n            const cleanup = () => {\n                arr.shift()\n                if (arr.length == 0) delete this.promises[id]\n                else arr[0]()\n            }\n            arr.push(() =>\n                f().then(\n                    v => {\n                        cleanup()\n                        resolve(v)\n                    },\n                    err => {\n                        cleanup()\n                        reject(err)\n                    }\n                )\n            )\n            if (arr.length == 1) arr[0]()\n        })\n    }\n}\n\nexport function rgbToHtmlColor(rgb: number) {\n    return `#${(\"000000\" + rgb.toString(16)).slice(-6)}`\n}\n\nexport function toFullHex(n: number[]) {\n    return (\n        \"0x\" + n.map(id => (\"000000000\" + id.toString(16)).slice(-8)).join(\"\")\n    )\n}\n\nexport function toHex(bytes: ArrayLike<number>) {\n    if (!bytes) return undefined\n    let r = \"\"\n    for (let i = 0; i < bytes.length; ++i)\n        r += (\"0\" + bytes[i].toString(16)).slice(-2)\n    return r\n}\n\nexport function fromHex(hex: string) {\n    const r = new Uint8Array(hex.length >> 1)\n    for (let i = 0; i < hex.length; i += 2)\n        r[i >> 1] = parseInt(hex.slice(i, i + 2), 16)\n    return r\n}\n\nexport function isSet(v: unknown) {\n    return v !== null && v !== undefined\n}\n\nexport function toArray<T>(a: ArrayLike<T>): T[] {\n    const r: T[] = new Array(a.length)\n    for (let i = 0; i < a.length; ++i) r[i] = a[i]\n    return r\n}\n\nexport interface MutableArrayLike<T> {\n    readonly length: number\n    [n: number]: T\n}\n\nexport function hexNum(n: number): string {\n    if (isNaN(n)) return undefined\n    if (n < 0) return \"-\" + hexNum(-n)\n    return \"0x\" + n.toString(16)\n}\n\nexport function write32(buf: MutableArrayLike<number>, pos: number, v: number) {\n    buf[pos + 0] = (v >> 0) & 0xff\n    buf[pos + 1] = (v >> 8) & 0xff\n    buf[pos + 2] = (v >> 16) & 0xff\n    buf[pos + 3] = (v >> 24) & 0xff\n}\n\nexport function write16(buf: MutableArrayLike<number>, pos: number, v: number) {\n    buf[pos + 0] = (v >> 0) & 0xff\n    buf[pos + 1] = (v >> 8) & 0xff\n}\n\nexport function read32(buf: ArrayLike<number>, pos: number) {\n    return (\n        (buf[pos] |\n            (buf[pos + 1] << 8) |\n            (buf[pos + 2] << 16) |\n            (buf[pos + 3] << 24)) >>>\n        0\n    )\n}\n\nexport function read16(buf: ArrayLike<number>, pos: number) {\n    return buf[pos] | (buf[pos + 1] << 8)\n}\n\nexport function encodeU32LE(words: number[]) {\n    const r = new Uint8Array(words.length * 4)\n    for (let i = 0; i < words.length; ++i) write32(r, i * 4, words[i])\n    return r\n}\n\nexport function decodeU32LE(buf: Uint8Array) {\n    const res: number[] = []\n    for (let i = 0; i < buf.length; i += 4) res.push(read32(buf, i))\n    return res\n}\n\nexport function isBufferEmpty(data: Uint8Array): boolean {\n    if (!data) return true\n    const n = data.length\n    for (let i = 0; i < n; ++i) {\n        if (data[i]) return false\n    }\n    return true\n}\n\nexport function bufferToString(buf: Uint8Array) {\n    return fromUTF8(uint8ArrayToString(buf))\n}\n\nexport function stringToBuffer(str: string) {\n    return stringToUint8Array(toUTF8(str))\n}\n\nexport function bufferConcat(a: Uint8Array, b: Uint8Array) {\n    const r = new Uint8Array(a.length + b.length)\n    r.set(a, 0)\n    r.set(b, a.length)\n    return r\n}\n\nexport function bufferConcatMany(bufs: Uint8Array[]) {\n    let sz = 0\n    for (const buf of bufs) sz += buf.length\n    const r = new Uint8Array(sz)\n    sz = 0\n    for (const buf of bufs) {\n        r.set(buf, sz)\n        sz += buf.length\n    }\n    return r\n}\n\nexport function arrayConcatMany<T>(arrs: T[][]): T[] {\n    if (!arrs) return undefined\n\n    // weed out empty array\n    arrs = arrs.filter(a => !!a?.length)\n\n    let sz = 0\n    for (const buf of arrs) sz += buf.length\n    const r: T[] = new Array(sz)\n    sz = 0\n    for (const arr of arrs) {\n        for (let i = 0; i < arr.length; ++i) r[i + sz] = arr[i]\n        sz += arr.length\n    }\n    return r\n}\n\nexport function jsonCopyFrom<T>(trg: T, src: T) {\n    const v = clone(src)\n    for (const k of Object.keys(src)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-extra-semi\n        ;(trg as any)[k] = (v as any)[k]\n    }\n}\nexport function assert(\n    cond: boolean,\n    msg = \"Assertion failed\",\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    debugData?: any\n) {\n    if (!cond) {\n        if (debugData) console.debug(`assertion filed ${msg}`, debugData)\n        if (Flags.diagnostics)\n            // eslint-disable-next-line no-debugger\n            debugger\n        throw new Error(msg)\n    }\n}\n\nexport function flatClone<T extends unknown>(obj: T | null): T {\n    if (obj == null) return null\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const r: any = {}\n    Object.keys(obj).forEach(k => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        r[k] = (obj as any)[k]\n    })\n    return r\n}\n\nexport function clone<T>(v: T): T {\n    if (v == null) return null\n    return JSON.parse(JSON.stringify(v))\n}\n\nexport function throttle(handler: () => void, delay: number): () => void {\n    let enableCall = true\n    return function () {\n        if (!enableCall) return\n        enableCall = false\n        handler()\n        setTimeout(() => (enableCall = true), delay)\n    }\n}\n\nexport interface Signal {\n    signalled: Promise<boolean>\n    signal: () => void\n}\nexport function signal(): Signal {\n    let resolve: (v: boolean) => void\n    return {\n        signalled: new Promise(r => {\n            resolve = r\n        }),\n        signal: () => resolve(true),\n    }\n}\n\nexport function readBlobToUint8Array(blob: Blob): Promise<Uint8Array> {\n    if (blob?.arrayBuffer) {\n        return blob.arrayBuffer().then(data => new Uint8Array(data))\n    }\n\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.onload = () => {\n            resolve(new Uint8Array(fileReader.result as ArrayBuffer))\n        }\n        fileReader.onerror = e => {\n            console.log(e)\n            reject(e)\n        }\n        try {\n            fileReader.readAsArrayBuffer(blob)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nexport function readBlobToText(blob: Blob): Promise<string> {\n    if (blob.text) {\n        return blob.text()\n    }\n\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.onload = () => resolve(fileReader.result as string)\n        fileReader.onerror = e => {\n            console.log(e)\n            reject(e)\n        }\n        try {\n            fileReader.readAsText(blob)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nexport function debounce(handler: () => void, delay: number): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId: any\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId)\n        }\n        timeOutId = setTimeout(async () => {\n            handler()\n        }, delay)\n    }\n}\n\nexport function debounceAsync(\n    handler: () => Promise<void>,\n    delay: number\n): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId: any\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId)\n        }\n        timeOutId = setTimeout(async () => {\n            await handler()\n        }, delay)\n    }\n}\n\nexport function JSONTryParse(src: string) {\n    if (src === undefined || src === null) return src\n\n    try {\n        return JSON.parse(src)\n    } catch (e) {\n        return undefined\n    }\n}\n\nexport function roundWithPrecision(x: number, digits: number): number {\n    digits = digits | 0\n    // invalid digits input\n    if (digits <= 0) return Math.round(x)\n    if (x == 0) return 0\n    let r = 0\n    while (r == 0 && digits < 21) {\n        const d = Math.pow(10, digits++)\n        r = Math.round(x * d + Number.EPSILON) / d\n    }\n    return r\n}\n\nexport function randomRange(min: number, max: number) {\n    return Math.round(Math.random() * (max - min) + min)\n}\n\nexport function unique(values: string[]): string[] {\n    return Array.from(new Set(values).keys())\n}\n\nexport function uniqueMap<T, U>(\n    values: T[],\n    id: (value: T) => string,\n    converter: (value: T) => U\n) {\n    const r: SMap<T> = {}\n    for (let i = 0; i < values.length; ++i) {\n        const value = values[i]\n        const idv = id(value)\n        if (!r[idv]) {\n            r[idv] = value\n        }\n    }\n    return Object.values(r).map(converter)\n}\n\nexport function toMap<T, V>(\n    a: T[],\n    keyConverter: (value: T, index: number) => string,\n    valueConverter: (value: T, index: number) => V\n): SMap<V> {\n    const m: SMap<V> = {}\n    if (a)\n        for (let i = 0; i < a.length; ++i) {\n            const key = keyConverter(a[i], i)\n            if (key === undefined || key === null) continue\n            m[key] = valueConverter(a[i], i)\n        }\n    return m\n}\n\nexport function ellipseJoin(\n    values: string[],\n    maxChars: number,\n    ellipse = \"...\"\n) {\n    let r = \"\"\n    for (let i = 0; i < values.length && r.length < maxChars; ++i) {\n        if (r) r += \", \"\n        r += values[i]\n    }\n    if (r.length > maxChars) return r.slice(0, maxChars) + ellipse\n    else return r\n}\n\nexport function arrayShuffle<T>(a: T[]): T[] {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[a[i], a[j]] = [a[j], a[i]]\n    }\n    return a\n}\n\nexport function uniqueName(\n    names: string[],\n    name: string,\n    separator = \"\"\n): string {\n    if (names.indexOf(name) < 0) return name\n    // allocate names\n    let count = 2\n    while (names.indexOf(`${name}${separator}${count}`) > -1) count++\n    return `${name}${separator}${count}`\n}\n\nexport function groupBy<T>(list: T[], key: (value: T) => string): SMap<T[]> {\n    if (!list) return {}\n\n    const r: SMap<T[]> = {}\n    list.forEach(item => {\n        const k = key(item)\n        const a = r[k] || (r[k] = [])\n        a.push(item)\n    })\n    return r\n}\n\nexport function pick(...values: number[]) {\n    return values?.find(x => x !== undefined)\n}\n\n/**\n * Applies filters and returns array of [yays, nays]\n * @param values\n * @param condition\n */\nexport function splitFilter<T>(\n    values: ArrayLike<T>,\n    condition: (t: T) => boolean\n): [T[], T[]] {\n    const yays: T[] = []\n    const nays: T[] = []\n    const n = values.length\n    for (let i = 0; i < n; ++i) {\n        const v = values[i]\n        if (condition(v)) yays.push(v)\n        else nays.push(v)\n    }\n    return [yays, nays]\n}\n\nexport function range(end: number): number[] {\n    return Array(end)\n        .fill(0)\n        .map((_, i) => i)\n}\n\nexport function toggleBit(data: Uint8Array, bitindex: number) {\n    // find bit to flip\n    let byte = data[bitindex >> 3]\n    const bit = bitindex % 8\n    const on = 1 === ((byte >> bit) & 1)\n    // flip bit\n    if (on) {\n        byte &= ~(1 << bit)\n    } else {\n        byte |= 1 << bit\n    }\n    // save\n    data[bitindex >> 3] = byte\n}\n","import { read16, read32 } from \"./utils\"\n\n/** @internal */\nexport enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    UInt64LE = 17,\n    UInt64BE = 18,\n    Int64LE = 19,\n    Int64BE = 20,\n}\n\nfunction fmtInfoCore(fmt: NumberFormat) {\n    switch (fmt) {\n        case NumberFormat.Int8LE:\n            return -1\n        case NumberFormat.UInt8LE:\n            return 1\n        case NumberFormat.Int16LE:\n            return -2\n        case NumberFormat.UInt16LE:\n            return 2\n        case NumberFormat.Int32LE:\n            return -4\n        case NumberFormat.UInt32LE:\n            return 4\n        case NumberFormat.Int64LE:\n            return -8\n        case NumberFormat.UInt64LE:\n            return 8\n        case NumberFormat.Int8BE:\n            return -10\n        case NumberFormat.UInt8BE:\n            return 10\n        case NumberFormat.Int16BE:\n            return -20\n        case NumberFormat.UInt16BE:\n            return 20\n        case NumberFormat.Int32BE:\n            return -40\n        case NumberFormat.UInt32BE:\n            return 40\n        case NumberFormat.Int64BE:\n            return -80\n        case NumberFormat.UInt64BE:\n            return 80\n\n        case NumberFormat.Float32LE:\n            return 4\n        case NumberFormat.Float32BE:\n            return 40\n        case NumberFormat.Float64LE:\n            return 8\n        case NumberFormat.Float64BE:\n            return 80\n        default:\n            throw new Error(\"unknown format\")\n    }\n}\n\nfunction fmtInfo(fmt: NumberFormat) {\n    let size = fmtInfoCore(fmt)\n    let signed = false\n    if (size < 0) {\n        signed = true\n        size = -size\n    }\n    let swap = false\n    if (size >= 10) {\n        swap = true\n        size /= 10\n    }\n    let isFloat = false\n    switch (fmt) {\n        case NumberFormat.Float32LE:\n        case NumberFormat.Float32BE:\n        case NumberFormat.Float64LE:\n        case NumberFormat.Float64BE:\n            isFloat = true\n            break\n    }\n    return { size, signed, swap, isFloat }\n}\n\n/**\n * Get the size in bytes of specified number format.\n */\nexport function sizeOfNumberFormat(format: NumberFormat) {\n    switch (format) {\n        case NumberFormat.Int8LE:\n        case NumberFormat.UInt8LE:\n        case NumberFormat.Int8BE:\n        case NumberFormat.UInt8BE:\n            return 1\n        case NumberFormat.Int16LE:\n        case NumberFormat.UInt16LE:\n        case NumberFormat.Int16BE:\n        case NumberFormat.UInt16BE:\n            return 2\n        case NumberFormat.Int32LE:\n        case NumberFormat.Int32BE:\n        case NumberFormat.UInt32BE:\n        case NumberFormat.UInt32LE:\n        case NumberFormat.Float32BE:\n        case NumberFormat.Float32LE:\n            return 4\n        case NumberFormat.UInt64BE:\n        case NumberFormat.Int64BE:\n        case NumberFormat.UInt64LE:\n        case NumberFormat.Int64LE:\n        case NumberFormat.Float64BE:\n        case NumberFormat.Float64LE:\n            return 8\n    }\n    return 0\n}\n\nexport function getNumber(\n    buf: ArrayLike<number>,\n    fmt: NumberFormat,\n    offset: number\n) {\n    switch (fmt) {\n        case NumberFormat.UInt8BE:\n        case NumberFormat.UInt8LE:\n            return buf[offset]\n        case NumberFormat.Int8BE:\n        case NumberFormat.Int8LE:\n            return (buf[offset] << 24) >> 24\n        case NumberFormat.UInt16LE:\n            return read16(buf, offset)\n        case NumberFormat.Int16LE:\n            return (read16(buf, offset) << 16) >> 16\n        case NumberFormat.UInt32LE:\n            return read32(buf, offset)\n        case NumberFormat.Int32LE:\n            return read32(buf, offset) >> 0\n        case NumberFormat.UInt64LE:\n            return read32(buf, offset) + read32(buf, offset + 4) * 0x100000000\n        case NumberFormat.Int64LE:\n            return (\n                read32(buf, offset) +\n                (read32(buf, offset + 4) >> 0) * 0x100000000\n            )\n        default: {\n            const inf = fmtInfo(fmt)\n            if (inf.isFloat) {\n                const arr = new Uint8Array(inf.size)\n                for (let i = 0; i < inf.size; ++i) {\n                    arr[i] = buf[offset + i]\n                }\n                if (inf.swap) arr.reverse()\n                if (inf.size == 4) return new Float32Array(arr.buffer)[0]\n                else return new Float64Array(arr.buffer)[0]\n            }\n            throw new Error(\"unsupported fmt:\" + fmt)\n        }\n    }\n}\n\nexport function setNumber(\n    buf: Uint8Array,\n    fmt: NumberFormat,\n    offset: number,\n    r: number\n) {\n    const inf = fmtInfo(fmt)\n    if (inf.isFloat) {\n        const arr = new Uint8Array(inf.size)\n        if (inf.size == 4) new Float32Array(arr.buffer)[0] = r\n        else new Float64Array(arr.buffer)[0] = r\n        if (inf.swap) arr.reverse()\n        for (let i = 0; i < inf.size; ++i) {\n            buf[offset + i] = arr[i]\n        }\n        return\n    }\n\n    for (let i = 0; i < inf.size; ++i) {\n        const off = !inf.swap ? offset + i : offset + inf.size - i - 1\n        buf[off] = r & 0xff\n        r >>= 8\n    }\n}\n\nexport function uintOfBuffer(data: Uint8Array) {\n    let fmt: NumberFormat\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = NumberFormat.UInt8LE\n            break\n        case 2:\n        case 3:\n            fmt = NumberFormat.UInt16LE\n            break\n        default:\n            fmt = NumberFormat.UInt32LE\n            break\n    }\n    return getNumber(data, fmt, 0)\n}\n\nexport function intOfBuffer(data: Uint8Array) {\n    let fmt: NumberFormat\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = NumberFormat.Int8LE\n            break\n        case 2:\n        case 3:\n            fmt = NumberFormat.Int16LE\n            break\n        default:\n            fmt = NumberFormat.Int32LE\n            break\n    }\n    return getNumber(data, fmt, 0)\n}\n\nexport function bufferToArray(data: Uint8Array, fmt: NumberFormat) {\n    const res: number[] = []\n    const sz = sizeOfNumberFormat(fmt)\n    for (let off = 0; off <= data.length - sz; off += sz)\n        res.push(getNumber(data, fmt, off))\n    return res\n}\n\nexport function concatBufferArray(chunks: Uint8Array[]) {\n    let sz = 0\n    for (const ch of chunks) sz += ch.length\n    const r = new Uint8Array(sz)\n    sz = 0\n    for (const ch of chunks) {\n        r.set(ch, sz)\n        sz += ch.length\n    }\n    return r\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../jacdac-spec/spectool/jdspec.d.ts\" />\n\nimport { NumberFormat } from \"./buffer\"\nimport serviceSpecificationData from \"../../jacdac-spec/dist/services.json\"\nimport deviceRegistryData from \"../../jacdac-spec/dist/devices.json\"\nimport { fromHex, toHex } from \"./utils\"\nimport {\n    SystemEvent,\n    SystemReg,\n    SensorReg,\n    SRV_CONTROL,\n    SRV_ROLE_MANAGER,\n    SRV_SETTINGS,\n    SRV_BOOTLOADER,\n    SRV_LOGGER,\n    SRV_INFRASTRUCTURE,\n    SRV_PROTO_TEST,\n} from \"./constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet _serviceSpecifications: jdspec.ServiceSpec[] =\n    serviceSpecificationData as any\nlet _serviceSpecificationMap: Record<number, jdspec.ServiceSpec> = undefined\nlet _customServiceSpecifications: Record<string, jdspec.ServiceSpec> = {}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _deviceRegistry: jdspec.DeviceSpec[] = deviceRegistryData as any\n\n/**\n * Override built-in service specifications\n * @param specs\n * @category Specification\n */\nexport function loadServiceSpecifications(specs: jdspec.ServiceSpec[]) {\n    _serviceSpecifications = specs?.slice(0) || []\n    _serviceSpecificationMap = undefined\n}\n\n/**\n * Adds a custom service specification\n * @param service\n * @category Specification\n */\nexport function addCustomServiceSpecification(service: jdspec.ServiceSpec) {\n    if (service && service.classIdentifier) {\n        _customServiceSpecifications[service.classIdentifier] = service\n        _serviceSpecificationMap = undefined\n    }\n}\n\n/**\n * Clears any custom service specification\n * @category Specification\n */\nexport function clearCustomServiceSpecifications() {\n    _customServiceSpecifications = {}\n    _serviceSpecificationMap = undefined\n}\n\n/**\n * Returns a map from service short ids to service specifications\n * @category Specification\n */\nexport function serviceMap(): Record<string, jdspec.ServiceSpec> {\n    const m: Record<string, jdspec.ServiceSpec> = {}\n    _serviceSpecifications.forEach(spec => (m[spec.shortId] = spec))\n    return m\n}\n\n/**\n * Returns the list of service specifications\n * @category Specification\n */\nexport function serviceSpecifications() {\n    return _serviceSpecifications.slice(0)\n}\n\n/**\n * Resolve the device specification from the product identiier\n * @category Specification\n */\nexport function deviceSpecificationFromProductIdentifier(\n    productIdentifier: number\n): jdspec.DeviceSpec {\n    if (isNaN(productIdentifier)) return undefined\n\n    const spec = _deviceRegistry.find(\n        spec => spec.productIdentifiers?.indexOf(productIdentifier) > -1\n    )\n    return spec\n}\n\n/**\n * @internal\n */\nexport function deviceSpecificationFromIdentifier(\n    id: string\n): jdspec.DeviceSpec {\n    if (id === undefined) return undefined\n\n    const spec = _deviceRegistry.find(spec => spec.id === id)\n    return spec\n}\n\n/**\n * Gets the list of devices that use this service class\n * @param serviceClass\n * @category Specification\n */\nexport function deviceSpecificationsForService(\n    serviceClass: number\n): jdspec.DeviceSpec[] {\n    if (isNaN(serviceClass)) return undefined\n    return _deviceRegistry.filter(\n        spec => spec.services?.indexOf(serviceClass) > -1\n    )\n}\n\n/**\n * Gets the list of device specifications\n * @returns\n * @category Specification\n */\nexport function deviceSpecifications(options?: {\n    includeDeprecated?: boolean\n    includeExperimental?: boolean\n}): jdspec.DeviceSpec[] {\n    const { includeDeprecated, includeExperimental } = options || {}\n    let r = _deviceRegistry.slice(0)\n    if (!includeDeprecated) r = r.filter(d => d.status !== \"deprecated\")\n    if (!includeExperimental) r = r.filter(d => d.status !== \"experimental\")\n    return r\n}\n\n/**\n * @internal\n */\nexport function identifierToUrlPath(id: string) {\n    // compiled web site does not like . in path\n    return id?.replace(/-/g, \"/\").replace(/\\./g, \"\").toLowerCase()\n}\n\n/**\n * Checks if classIdentifier is compatible with requiredClassIdentifier\n * @category Specification\n */\nexport function isInstanceOf(\n    classIdentifier: number,\n    requiredClassIdentifier: number\n): boolean {\n    // garbage data\n    if (isNaN(classIdentifier)) return false\n\n    // direct hit\n    if (classIdentifier === requiredClassIdentifier) return true\n\n    // lookup inheritance chain\n    const classSpec = serviceSpecificationFromClassIdentifier(classIdentifier)\n    return !!classSpec?.extends?.some(extend => {\n        const extendSpec = serviceSpecificationFromName(extend)\n        return (\n            !!extendSpec &&\n            isInstanceOf(extendSpec.classIdentifier, requiredClassIdentifier)\n        )\n    })\n}\n\n/**\n * Checks if the service supports the Jacdac infrastructure\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isInfrastructure(spec: jdspec.ServiceSpec) {\n    return (\n        spec &&\n        ([\n            SRV_CONTROL,\n            SRV_ROLE_MANAGER,\n            SRV_LOGGER,\n            SRV_SETTINGS,\n            SRV_BOOTLOADER,\n            SRV_PROTO_TEST,\n            SRV_INFRASTRUCTURE,\n        ].indexOf(spec.classIdentifier) > -1 ||\n            spec.shortId[0] === \"_\")\n    )\n}\n\n/**\n * Looks up a service specification by name\n * @param shortId\n * @category Specification\n */\nexport function serviceSpecificationFromName(\n    shortId: string\n): jdspec.ServiceSpec {\n    if (!shortId) return undefined\n    return (\n        _serviceSpecifications.find(s => s.shortId === shortId) ||\n        Object.values(_customServiceSpecifications).find(\n            ser => ser.shortId === shortId\n        )\n    )\n}\n\n/**\n * Looks up a service specification by class\n * @param classIdentifier\n * @category Specification\n */\nexport function serviceSpecificationFromClassIdentifier(\n    classIdentifier: number\n): jdspec.ServiceSpec {\n    if (isNaN(classIdentifier)) return undefined\n    // try lookup cache\n    let srv = _serviceSpecificationMap?.[classIdentifier]\n    if (srv) return srv\n\n    // resolve\n    srv =\n        _serviceSpecifications.find(\n            s => s.classIdentifier === classIdentifier\n        ) || _customServiceSpecifications[classIdentifier]\n    if (srv) {\n        if (!_serviceSpecificationMap) _serviceSpecificationMap = {}\n        _serviceSpecificationMap[classIdentifier] = srv\n    }\n    return srv\n}\n\n/**\n * Indicates if the specified service is a sensor\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isSensor(spec: jdspec.ServiceSpec): boolean {\n    return (\n        spec &&\n        spec.packets.some(pkt => isReading(pkt)) &&\n        spec.packets.some(\n            pkt => pkt.identifier == SensorReg.StreamingSamples\n        ) &&\n        spec.packets.some(pkt => pkt.identifier == SensorReg.StreamingInterval)\n    )\n}\n\n/**\n * Indicates if the specified service is an actuator\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isActuator(spec: jdspec.ServiceSpec): boolean {\n    return (\n        spec &&\n        spec.packets.some(pkt => pkt.identifier === SystemReg.Value) &&\n        spec.packets.some(pkt => pkt.identifier === SystemReg.Intensity)\n    )\n}\n\n/**\n * Indicates if the packet information is a register\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isRegister(pkt: jdspec.PacketInfo) {\n    return pkt && (pkt.kind == \"const\" || pkt.kind == \"ro\" || pkt.kind == \"rw\")\n}\n\n/**\n * Indicates if the packet information is a ``reading`` register\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isReading(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"ro\" && pkt.identifier == SystemReg.Reading\n}\n\nconst ignoredRegister = [\n    SystemReg.StatusCode,\n    SystemReg.InstanceName,\n    SystemReg.StreamingInterval,\n    SystemReg.StreamingPreferredInterval,\n    SystemReg.StreamingSamples,\n    SystemReg.ReadingError,\n    SystemReg.ReadingResolution,\n    SystemReg.MinReading,\n    SystemReg.MaxReading,\n    SystemReg.MinValue,\n    SystemReg.MaxValue,\n    SystemReg.MaxPower,\n]\n/**\n * Indicates if the register is usable from a high-level programming environment.\n * @category Specification\n */\nexport function isHighLevelRegister(pkt: jdspec.PacketInfo) {\n    return (\n        isRegister(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredRegister.indexOf(pkt.identifier) < 0\n    )\n}\n\nconst ignoredEvents = [SystemEvent.StatusCodeChanged]\n/**\n * Indicates if the event is usable from a high-level programming environment.\n * @category Specification\n */\nexport function isHighLevelEvent(pkt: jdspec.PacketInfo) {\n    return (\n        isEvent(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredEvents.indexOf(pkt.identifier) < 0\n    )\n}\n\n/**\n * Indicate if the register code is an auxilliary register to support streaming.\n * @param code\n * @returns\n * @category Specification\n */\nexport function isOptionalReadingRegisterCode(code: number) {\n    const regs = [\n        SystemReg.MinReading,\n        SystemReg.MaxReading,\n        SystemReg.ReadingError,\n        SystemReg.ReadingResolution,\n        SystemReg.StreamingPreferredInterval,\n    ]\n    return regs.indexOf(code) > -1\n}\n\n/**\n * Indicates if the packet info represents an ``intensity`` register\n * @category Specification\n */\nexport function isIntensity(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == SystemReg.Intensity\n}\n\n/**\n * Indicates if the packet info represents a ``value`` register\n * @category Specification\n */\nexport function isValue(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == SystemReg.Value\n}\n\n/**\n * Indicates if the packet info represents a ``intensity`` or a ``value`` register\n * @category Specification\n */\nexport function isValueOrIntensity(pkt: jdspec.PacketInfo) {\n    return (\n        pkt &&\n        pkt.kind == \"rw\" &&\n        (pkt.identifier == SystemReg.Value ||\n            pkt.identifier == SystemReg.Intensity)\n    )\n}\n\n/**\n * Indicates if the packet info represents an ``const`` register\n * @category Specification\n */\nexport function isConstRegister(pkt: jdspec.PacketInfo) {\n    return pkt?.kind == \"const\"\n}\n\n/**\n * Indicates if the packet info represents an ``event``\n * @category Specification\n */\nexport function isEvent(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"event\"\n}\n\n/**\n * Indicates if the packet info represents a ``command``\n * @category Specification\n */\nexport function isCommand(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"command\"\n}\n\n/**\n * Indicates if the packet info represents a ``pipe_report``\n * @category Specification\n */\nexport function isPipeReport(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"pipe_report\"\n}\n\n/**\n * Indicates if the `report` packet is the report specication of the `cmd` command.\n * @category Specification\n */\nexport function isReportOf(cmd: jdspec.PacketInfo, report: jdspec.PacketInfo) {\n    return (\n        report.secondary &&\n        report.kind == \"report\" &&\n        cmd.kind == \"command\" &&\n        cmd.name == report.name\n    )\n}\n\n/**\n * Indicates if the `report` packet is the *pipe* report specication of the `cmd` command.\n * @category Specification\n */\nexport function isPipeReportOf(\n    cmd: jdspec.PacketInfo,\n    pipeReport: jdspec.PacketInfo\n) {\n    return (\n        pipeReport.kind == \"pipe_report\" &&\n        cmd.kind == \"command\" &&\n        cmd.pipeType &&\n        cmd.pipeType === pipeReport.pipeType\n    )\n}\n\n/**\n * @internal\n */\nexport function isIntegerType(tp: string) {\n    return /^[ui]\\d+(\\.|$)/.test(tp) || tp == \"pipe_port\" || tp == \"bool\"\n}\n\n/**\n * @internal\n */\nexport function numberFormatFromStorageType(tp: jdspec.StorageType) {\n    switch (tp) {\n        case -1:\n            return NumberFormat.Int8LE\n        case 1:\n            return NumberFormat.UInt8LE\n        case -2:\n            return NumberFormat.Int16LE\n        case 2:\n            return NumberFormat.UInt16LE\n        case -4:\n            return NumberFormat.Int32LE\n        case 4:\n            return NumberFormat.UInt32LE\n        case -8:\n            return NumberFormat.Int64LE\n        case 8:\n            return NumberFormat.UInt64LE\n        case 0:\n            return null\n        default:\n            return null\n    }\n}\n\n/**\n * @internal\n */\nexport function numberFormatToStorageType(nf: NumberFormat) {\n    switch (nf) {\n        case NumberFormat.Int8LE:\n            return -1\n        case NumberFormat.UInt8LE:\n            return 1\n        case NumberFormat.Int16LE:\n            return -2\n        case NumberFormat.UInt16LE:\n            return 2\n        case NumberFormat.Int32LE:\n            return -4\n        case NumberFormat.UInt32LE:\n            return 4\n        case NumberFormat.Int64LE:\n            return -8\n        case NumberFormat.UInt64LE:\n            return 8\n        default:\n            return null\n    }\n}\n\n/**\n * @internal\n */\nexport function scaleIntToFloat(v: number, info: jdspec.PacketMember) {\n    if (!info.shift) return v\n    if (info.shift < 0) return v * (1 << -info.shift)\n    else return v / (1 << info.shift)\n}\n\n/**\n * @internal\n */\nexport function scaleFloatToInt(v: number, info: jdspec.PacketMember) {\n    if (!info.shift) return v\n    if (info.shift < 0) return Math.round(v / (1 << -info.shift))\n    else return Math.round(v * (1 << info.shift))\n}\n\n/**\n * @internal\n */\nexport function storageTypeRange(tp: jdspec.StorageType): [number, number] {\n    if (tp == 0) throw new Error(\"no range for 0\")\n    if (tp < 0) {\n        const v = Math.pow(2, -tp * 8 - 1)\n        return [-v, v - 1]\n    } else {\n        const v = Math.pow(2, tp * 8)\n        return [0, v - 1]\n    }\n}\n\n/**\n * @internal\n */\nexport function clampToStorage(v: number, tp: jdspec.StorageType) {\n    const [min, max] = storageTypeRange(tp)\n    if (isNaN(v)) return 0\n    if (v < min) return min\n    if (v > max) return max\n    return v\n}\n\n/**\n * @internal\n */\nexport function memberValueToString(\n    value: any,\n    info: jdspec.PacketMember\n): string {\n    if (value === undefined || value === null) return \"\"\n    switch (info.type) {\n        case \"bytes\":\n            return toHex(value)\n        case \"string\":\n            return value\n        default:\n            return \"\" + value\n    }\n}\n\n/**\n * @internal\n */\nexport function tryParseMemberValue(\n    text: string,\n    info: jdspec.PacketMember\n): { value?: any; error?: string } {\n    if (!text) return {}\n\n    if (info.type === \"string\") return { value: text }\n    else if (info.type === \"pipe\") return {}\n    // not supported\n    else if (info.type === \"bytes\") {\n        try {\n            return { value: fromHex(text) }\n        } catch (e) {\n            return {\n                error: \"invalid hexadecimal format\",\n            }\n        }\n    } else {\n        const n = isIntegerType(info.type) ? parseInt(text) : parseFloat(text)\n        if (isNaN(n)) return { error: \"invalid format\" }\n        else return { value: n }\n    }\n}\n\n/**\n * Parses a device identifier into a buffer, returns undefined if invalid\n * @param id\n * @returns\n * @category Specification\n */\nexport function parseDeviceId(id: string): Uint8Array {\n    if (!id) return undefined\n    id = id.replace(/\\s/g, \"\")\n    if (id.length != 16 || !/^[a-f0-9]+$/i.test(id)) return undefined\n    return fromHex(id)\n}\n","import {\n    getNumber,\n    NumberFormat,\n    setNumber,\n    sizeOfNumberFormat,\n} from \"./buffer\"\nimport { clampToStorage, numberFormatToStorageType } from \"./spec\"\nimport { bufferEq, bufferToString, stringToBuffer } from \"./utils\"\n\n/**\n * @category Data Packing\n */\nexport type PackedSimpleValue = number | boolean | string | Uint8Array\n\n/**\n * @category Data Packing\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PackedValues = any[]\n\n// ASCII codes of characters\nconst ch_b = 98\nconst ch_i = 105\nconst ch_r = 114\nconst ch_s = 115\nconst ch_u = 117\nconst ch_x = 120\nconst ch_z = 122\n//const ch_0 = 48\n//const ch_9 = 57\nconst ch_colon = 58\nconst ch_sq_open = 91\nconst ch_sq_close = 93\n\nfunction numberFormatOfType(tp: string): NumberFormat {\n    switch (tp) {\n        case \"u8\":\n            return NumberFormat.UInt8LE\n        case \"u16\":\n            return NumberFormat.UInt16LE\n        case \"u32\":\n            return NumberFormat.UInt32LE\n        case \"i8\":\n            return NumberFormat.Int8LE\n        case \"i16\":\n            return NumberFormat.Int16LE\n        case \"i32\":\n            return NumberFormat.Int32LE\n        case \"f32\":\n            return NumberFormat.Float32LE\n        case \"f64\":\n            return NumberFormat.Float64LE\n        case \"i64\":\n            return NumberFormat.Int64LE\n        case \"u64\":\n            return NumberFormat.UInt64LE\n        default:\n            return null\n    }\n}\n\nfunction bufferSlice(buf: Uint8Array, start: number, end: number) {\n    return buf.slice(start, end)\n}\n\nclass TokenParser {\n    c0: number\n    size: number\n    div: number\n    fp = 0\n    nfmt: NumberFormat\n    word: string\n    isArray: boolean\n\n    constructor(public fmt: string) {}\n\n    parse() {\n        this.div = 1\n        this.isArray = false\n\n        const fmt = this.fmt\n        while (this.fp < fmt.length) {\n            let endp = this.fp\n            while (endp < fmt.length && fmt.charCodeAt(endp) != 32) endp++\n            let word = fmt.slice(this.fp, endp)\n            this.fp = endp + 1\n            if (!word) continue\n\n            const dotIdx = word.indexOf(\".\")\n            let c0 = word.charCodeAt(0)\n            // \"u10.6\" -> \"u16\", div = 1 << 6\n            if ((c0 == ch_i || c0 == ch_u) && dotIdx >= 0) {\n                const sz0 = parseInt(word.slice(1, dotIdx))\n                const sz1 = parseInt(word.slice(dotIdx + 1))\n                word = word[0] + (sz0 + sz1)\n                this.div = 1 << sz1\n            }\n\n            const c1 = word.charCodeAt(1)\n            if (c1 == ch_sq_open) {\n                this.size = parseInt(word.slice(2))\n            } else {\n                this.size = -1\n            }\n\n            if (\n                word.charCodeAt(word.length - 1) == ch_sq_close &&\n                word.charCodeAt(word.length - 2) == ch_sq_open\n            ) {\n                word = word.slice(0, -2)\n                this.isArray = true\n            }\n\n            this.nfmt = numberFormatOfType(word)\n            this.word = word\n\n            if (this.nfmt == null) {\n                if (c0 == ch_r) {\n                    if (c1 != ch_colon) c0 = 0\n                } else if (c0 == ch_s || c0 == ch_b || c0 == ch_x) {\n                    if (word.length != 1 && this.size == -1) c0 = 0\n                } else if (c0 == ch_z) {\n                    if (word.length != 1) c0 = 0\n                } else {\n                    c0 = 0\n                }\n                if (c0 == 0) throw new Error(`invalid format: ${word}`)\n                this.c0 = c0\n            } else {\n                this.size = sizeOfNumberFormat(this.nfmt)\n                this.c0 = -1\n            }\n\n            return true\n        }\n        return false\n    }\n}\n\nfunction jdunpackCore(buf: Uint8Array, fmt: string, repeat: number) {\n    const repeatRes: any[][] = repeat ? [] : null\n    let res: any[] = []\n    let off = 0\n    let fp0 = 0\n    const parser = new TokenParser(fmt)\n    if (repeat && buf.length == 0) return []\n    while (parser.parse()) {\n        if (parser.isArray && !repeat) {\n            res.push(\n                jdunpackCore(\n                    bufferSlice(buf, off, buf.length),\n                    fmt.slice(fp0),\n                    1\n                )\n            )\n            return res\n        }\n\n        fp0 = parser.fp\n        let sz = parser.size\n        const c0 = parser.c0\n        if (c0 == ch_z) {\n            let endoff = off\n            while (endoff < buf.length && buf[endoff] != 0) endoff++\n            sz = endoff - off\n        } else if (sz < 0) {\n            sz = buf.length - off\n        }\n\n        if (parser.nfmt !== null) {\n            let v = getNumber(buf, parser.nfmt, off)\n            if (parser.div != 1) v /= parser.div\n            res.push(v)\n            off += parser.size\n        } else {\n            const subbuf = bufferSlice(buf, off, off + sz)\n            if (c0 == ch_z || c0 == ch_s) {\n                let zerop = 0\n                while (zerop < subbuf.length && subbuf[zerop] != 0) zerop++\n                res.push(bufferToString(bufferSlice(subbuf, 0, zerop)))\n            } else if (c0 == ch_b) {\n                res.push(subbuf)\n            } else if (c0 == ch_x) {\n                // skip padding\n            } else if (c0 == ch_r) {\n                res.push(jdunpackCore(subbuf, fmt.slice(fp0), 2))\n                break\n            } else {\n                throw new Error(`whoops`)\n            }\n            off += subbuf.length\n            if (c0 == ch_z) off++\n        }\n\n        if (repeat && parser.fp >= fmt.length) {\n            parser.fp = 0\n            if (repeat == 2) {\n                repeatRes.push(res)\n                res = []\n            }\n            if (off >= buf.length) break\n        }\n    }\n\n    if (repeat == 2) {\n        if (res.length) repeatRes.push(res)\n        return repeatRes\n    } else {\n        return res\n    }\n}\n\n/**\n Unpacks a byte buffer into structured data as specified in the format string.\n See jdpack for format string reference.\n @category Data Packing\n*/\nexport function jdunpack<T extends PackedValues>(\n    buf: Uint8Array,\n    fmt: string\n): T {\n    if (!buf || !fmt) return undefined\n\n    // hot path for buffers\n    if (fmt === \"b\") return [buf.slice(0)] as T\n    // hot path\n    const nf = numberFormatOfType(fmt)\n    if (nf !== null) {\n        const sz = sizeOfNumberFormat(nf)\n        if (buf.length < sz)\n            throw new Error(\n                `size mistmatch, expected ${fmt} (${sz} bytes), got ${buf.length}`\n            )\n        return [getNumber(buf, nf, 0)] as T\n    }\n    // slow path\n    return jdunpackCore(buf, fmt, 0) as T\n}\n\nfunction jdpackCore(\n    trg: Uint8Array,\n    fmt: string,\n    data: PackedValues,\n    off: number\n) {\n    //console.log({ fmt, data })\n    let idx = 0\n    const parser = new TokenParser(fmt)\n    while (parser.parse()) {\n        const c0 = parser.c0\n\n        if (c0 == ch_x) {\n            // skip padding\n            off += parser.size\n            continue\n        }\n\n        const dataItem = data[idx++]\n\n        if (c0 == ch_r && dataItem) {\n            const fmt0 = fmt.slice(parser.fp)\n            for (const velt of dataItem as any[][]) {\n                off = jdpackCore(trg, fmt0, velt, off)\n            }\n            break\n        }\n\n        // use temporary variable to avoid a Gatsby build bug\n        let arr: any[]\n        if (parser.isArray) arr = dataItem\n        else arr = [dataItem]\n\n        for (const v of arr) {\n            if (parser.nfmt !== null) {\n                if (typeof v != \"number\")\n                    throw new Error(`expecting number, got ` + typeof v)\n                if (trg) {\n                    const st: jdspec.StorageType = numberFormatToStorageType(\n                        parser.nfmt\n                    )\n                    setNumber(\n                        trg,\n                        parser.nfmt,\n                        off,\n                        clampToStorage(Math.round(v * parser.div), st)\n                    )\n                }\n                off += parser.size\n            } else {\n                let buf: Uint8Array\n                if (typeof v === \"string\") {\n                    if (c0 == ch_z) buf = stringToBuffer(v + \"\\u0000\")\n                    else if (c0 == ch_s) buf = stringToBuffer(v)\n                    else throw new Error(`unexpected string`)\n                } else if (v && typeof v === \"object\" && v.length != null) {\n                    // assume buffer\n                    if (c0 == ch_b) buf = v\n                    else throw new Error(`unexpected buffer`)\n                } else {\n                    console.log({ parser, v })\n                    throw new Error(`expecting string or buffer`)\n                }\n\n                let sz = parser.size\n                if (sz >= 0) {\n                    if (buf.length > sz) buf = bufferSlice(buf, 0, sz)\n                } else {\n                    sz = buf.length\n                }\n\n                if (trg) trg.set(buf, off)\n                off += sz\n            }\n        }\n    }\n\n    if (data.length > idx) throw new Error(`format '${fmt}' too short`)\n\n    return off\n}\n\n/**\n\n* Format strings are space-separated sequences of type descriptions.\n* All numbers are understood to be little endian.\n* The following type descriptions are supported:\n* \n* - `u8`, `u16`, `u32` - unsigned, 1, 2, and 4 bytes long respectively\n* - `i8`, `i16`, `i32` - similar, but signed\n* - `b` - buffer until the end of input (has to be last)\n* - `s` - similar, but utf-8 encoded string\n* - `z` - NUL-terminated utf-8 string\n* - `b[10]` - 10 byte buffer (10 is just an example, here and below)\n* - `s[10]` - 10 byte utf-8 string; trailing NUL bytes (if any) are removed\n* - `x[10]` - 10 bytes of padding\n* \n* There is one more token, `r:`. The type descriptions following it are repeated in order\n* until the input buffer is exhausted.\n* When unpacking, fields after `r:` are repeated as an array of tuples.\n* \n* In case there's only a single field repeating,\n* it's also possible to append `[]` to its type, to get an array of values.\n* \n* @category Data Packing\n*/\nexport function jdpack<T extends PackedValues>(fmt: string, data: T) {\n    if (!fmt || !data) return undefined\n\n    // hot path for buffers\n    if (fmt === \"b\") return (data[0] as Uint8Array)?.slice(0)\n\n    // hot path\n    const nf = numberFormatOfType(fmt)\n    if (nf !== null) {\n        const buf = new Uint8Array(sizeOfNumberFormat(nf))\n        setNumber(buf, nf, 0, data[0])\n        return buf\n    }\n    // slow path\n    const len = jdpackCore(null, fmt, data, 0)\n    const res = new Uint8Array(len)\n    jdpackCore(res, fmt, data, 0)\n    return res\n}\n\n/**\n * Checks if two packed values serialize to the same buffer\n * @param fmt packing format string\n * @param left left data\n * @param right right data\n * @returns true if both data serialize to the same buffer\n * @category Data Packing\n */\nexport function jdpackEqual<T extends PackedValues>(\n    fmt: string,\n    left: T,\n    right: T\n) {\n    if (!left !== !right) return false\n    if (!left) return true\n\n    const leftBuffer = jdpack<T>(fmt, left)\n    const rightBuffer = jdpack<T>(fmt, right)\n    return bufferEq(leftBuffer, rightBuffer)\n}\n","import Packet from \"./packet\"\nimport { NumberFormat } from \"./buffer\"\nimport {\n    roundWithPrecision,\n    idiv,\n    fromHex,\n    hash,\n    fromUTF8,\n    uint8ArrayToString,\n    read16,\n    toHex,\n    toArray,\n    hexNum,\n    isSet,\n} from \"./utils\"\nimport {\n    isIntegerType,\n    numberFormatFromStorageType,\n    scaleIntToFloat,\n    isRegister,\n    serviceSpecificationFromName,\n    serviceSpecificationFromClassIdentifier,\n} from \"./spec\"\nimport {\n    CMD_SET_REG,\n    CMD_GET_REG,\n    CMD_REG_MASK,\n    PIPE_METADATA_MASK,\n    CMD_TOP_MASK,\n    PIPE_PORT_SHIFT,\n    JD_FRAME_FLAG_COMMAND,\n    JD_FRAME_FLAG_ACK_REQUESTED,\n    CMD_ADVERTISEMENT_DATA,\n    JD_SERVICE_INDEX_CTRL,\n} from \"./constants\"\nimport { SystemCmd, SystemReg } from \"../../jacdac-spec/dist/specconstants\"\nimport { jdpack, jdunpack } from \"./pack\"\nimport Flags from \"./flags\"\n\n/** @internal */\nexport enum RegisterType {\n    UInt, // default\n    UIntHex,\n    Int,\n    IntArray,\n    String,\n}\n\n/**\n * @internal\n */\nexport interface DecodedMember {\n    info: jdspec.PacketMember\n    value: any\n    numValue: number\n    scaledValue: number\n    humanValue: string\n    description: string\n    size: number\n}\n\n/**\n * @internal\n */\nexport interface DecodedPacket {\n    service: jdspec.ServiceSpec\n    info: jdspec.PacketInfo\n    decoded: DecodedMember[]\n    description: string\n    error?: string\n}\n\nexport function prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n        case \"Cel\":\n            return \"°C\"\n        case \"K\":\n            return \"°K\"\n        case \"/\":\n        case \"#\":\n            return \"\"\n        default:\n            return u\n    }\n}\n\nexport function prettyMemberUnit(\n    specification: jdspec.PacketMember,\n    showDataType?: boolean\n) {\n    const parts: string[] = [\n        prettyUnit(specification.unit),\n        isSet(specification.typicalMin) &&\n            `[${specification.typicalMin}, ${specification.typicalMax}]`,\n        isSet(specification.absoluteMin) &&\n            `absolute [${specification.absoluteMin}, ${specification.absoluteMax}]`,\n    ].filter(f => isSet(f) && f)\n    if (showDataType) parts.unshift(specification.type)\n    const helperText = parts.join(\", \")\n    return helperText\n}\n\nexport function prettySize(b: number) {\n    b = b | 0\n    if (b < 1000) return b + \"b\"\n    else if (b < 1000000) return roundWithPrecision(b / 1e3, 1) + \"kb\"\n    else return roundWithPrecision(b / 1e6, 1) + \"mb\"\n}\n\nexport function prettyDuration(ms: number) {\n    let s = ms / 1000\n    if (s < 1) return `${roundWithPrecision(s, 2)}s`\n    if (s < 10) return `${roundWithPrecision(s, 1)}s`\n    if (s < 60) return `${Math.floor(s)}s`\n\n    let r = \"\"\n    const d = Math.floor(s / (24 * 3600))\n    if (d > 0) {\n        r += d + \":\"\n        s -= d * (24 * 3600)\n    }\n    const h = Math.floor(s / 3600)\n    if (h > 0) {\n        r += h + \":\"\n        s -= h * 3600\n    }\n    const m = Math.floor(s / 60)\n    if (d > 0 || h > 0 || m > 0) {\n        r += m + \":\"\n        s -= m * 60\n    }\n    r += Math.floor(s)\n    return r\n}\n\nexport function prettyMicroDuration(us: number) {\n    if (us < 1000) return `${us}${prettyUnit(\"us\")}`\n    else return prettyDuration(us / 1000)\n}\n\n// 2 letter + 2 digit ID; 1.8%/0.3%/0.07%/0.015% collision probability among 50/20/10/5 devices\nexport function shortDeviceId(devid: string) {\n    const h = hash(fromHex(devid), 30)\n    return (\n        String.fromCharCode(0x41 + (h % 26)) +\n        String.fromCharCode(0x41 + (idiv(h, 26) % 26)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26) % 10)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26 * 10) % 10))\n    )\n}\n\nexport function decodeMember(\n    service: jdspec.ServiceSpec,\n    pktInfo: jdspec.PacketInfo,\n    member: jdspec.PacketMember,\n    pkt: Packet,\n    offset: number\n): DecodedMember {\n    if (!member) return null\n\n    if (pkt.data.length <= offset) return null\n\n    let numValue: number = undefined\n    let scaledValue: number = undefined\n    let value = undefined\n    let humanValue: string = undefined\n    let size = Math.abs(member.storage)\n\n    const enumInfo = service?.enums[member.type]\n    const isInt = isIntegerType(member.type) || !!enumInfo\n\n    if (member.isFloat && (size == 4 || size == 8)) {\n        if (size == 4) numValue = pkt.getNumber(NumberFormat.Float32LE, offset)\n        else numValue = pkt.getNumber(NumberFormat.Float64LE, offset)\n        value = scaledValue = numValue\n\n        if (Math.abs(value) < 10) humanValue = value.toFixed(5)\n        else if (Math.abs(value) < 1000) humanValue = value.toFixed(3)\n        else if (Math.abs(value) < 100000) humanValue = value.toFixed(2)\n        else humanValue = \"\" + value\n        if (member.unit) humanValue += prettyUnit(member.unit)\n    } else if (!isInt) {\n        const buf = size\n            ? pkt.data.slice(offset, offset + size)\n            : pkt.data.slice(offset)\n        if (member.type == \"string\") {\n            try {\n                value = fromUTF8(uint8ArrayToString(buf))\n            } catch {\n                // invalid UTF8\n                value = uint8ArrayToString(buf)\n            }\n            humanValue = JSON.stringify(value).replace(/\\\\u0000/g, \"\\\\0\")\n        } else if (member.type == \"pipe\") {\n            value = buf\n            const devid = toHex(buf.slice(0, 8))\n            const port = read16(buf, 8)\n            humanValue = \"pipe to \" + shortDeviceId(devid) + \" port:\" + port\n            // + \" [\" + toHex(buf.slice(10)) + \"]\"\n            if (pkt?.device?.bus) {\n                const trg = pkt.device.bus.device(devid, true)\n                if (trg)\n                    trg.port(port).pipeType =\n                        service?.shortId + \".\" + pktInfo.pipeType + \".report\"\n            }\n        } else {\n            value = buf\n            humanValue = hexDump(buf)\n        }\n        size = buf.length\n    } else {\n        const fmt = numberFormatFromStorageType(member.storage)\n        numValue = pkt.getNumber(fmt, offset)\n        value = scaledValue = scaleIntToFloat(numValue, member)\n        if (pkt.device && member.type == \"pipe_port\")\n            pkt.device.port(value).pipeType =\n                service?.shortId + \".\" + pktInfo.pipeType + \".command\"\n        if (enumInfo) {\n            if (enumInfo.isFlags) {\n                humanValue = \"\"\n                let curr = numValue\n                for (const key of Object.keys(enumInfo.members)) {\n                    const val = enumInfo.members[key]\n                    if ((curr & val) == val) {\n                        if (humanValue) humanValue += \" | \"\n                        humanValue += key\n                        curr &= ~val\n                    }\n                }\n                if (curr) {\n                    if (humanValue) humanValue += \" | \"\n                    humanValue += hexNum(curr)\n                }\n            } else {\n                humanValue = reverseLookup(enumInfo.members, numValue)\n            }\n        } else if (member.type == \"bool\") {\n            value = !!numValue\n            humanValue = value ? \"true\" : \"false\"\n        } else if (member.unit === \"ms\") humanValue = prettyDuration(value)\n        else if (member.unit === \"us\") humanValue = prettyMicroDuration(value)\n        else if (member.unit || scaledValue != numValue) {\n            // don't show so much digits\n            let v = scaledValue\n            if (member.unit) v = roundWithPrecision(v, 3)\n            humanValue = \"\" + v\n            if (member.unit) humanValue += prettyUnit(member.unit)\n        } else {\n            humanValue = scaledValue + \"\"\n            if (\n                (scaledValue | 0) == scaledValue &&\n                (!member.unit || scaledValue >= 15)\n            ) {\n                if (!member.unit) humanValue = hexNum(scaledValue)\n                else humanValue += \" (\" + hexNum(scaledValue) + \")\"\n            } else if (scaledValue && member.storage == 8) {\n                const did = toHex(pkt.data.slice(offset, offset + 8))\n                humanValue += ` (${did} / ${shortDeviceId(did)})`\n            }\n        }\n    }\n\n    return {\n        value,\n        numValue,\n        scaledValue,\n        humanValue,\n        description:\n            member.name +\n            \":\" +\n            (!humanValue\n                ? \"?\"\n                : humanValue.indexOf(\"\\n\") >= 0\n                ? \"\\n\" + humanValue.replace(/^/gm, \"      \")\n                : \" \" + humanValue),\n        info: member,\n        size,\n    }\n}\n\nexport function valueToFlags(enumInfo: jdspec.EnumInfo, value: number) {\n    const r = []\n    const curr = value\n    for (const key of Object.keys(enumInfo.members)) {\n        const val = enumInfo.members[key]\n        if (curr & val) {\n            r.push(val)\n        }\n    }\n    return r\n}\n\nexport function flagsToValue(values: number[]) {\n    return values.reduce((prev, cur) => prev | cur, 0)\n}\n\nexport function decodeMembers(\n    service: jdspec.ServiceSpec,\n    pktInfo: jdspec.PacketInfo,\n    pkt: Packet,\n    off = 0\n) {\n    const fields = pktInfo.fields.slice(0)\n    let idx = fields.findIndex(f => f.startRepeats)\n    if (idx >= 0) {\n        if (fields.some(f => !f.storage))\n            throw new Error(\"zero-sized field in repeats:\")\n        let sz = 0\n        for (const f of fields) sz += Math.abs(f.storage)\n        // make sure we have enough fields to decode all data\n        while (sz <= pkt.data.length) {\n            const f = fields[idx++]\n            sz += Math.abs(f.storage)\n            fields.push(f)\n        }\n    }\n    return fields\n        .map(mem => {\n            const decoded = decodeMember(service, pktInfo, mem, pkt, off)\n            if (decoded) off += decoded.size\n            return decoded\n        })\n        .filter(info => !!info)\n}\n\nexport function wrapDecodedMembers(decoded: DecodedMember[]) {\n    if (decoded.length == 0) return \" {}\"\n    else if (decoded.length == 1 && decoded[0].description.length < 60)\n        return \" { \" + decoded[0].description + \" }\"\n    else\n        return (\n            \" {\\n\" + decoded.map(d => \"    \" + d.description).join(\"\\n\") + \"\\n}\"\n        )\n}\n\nfunction syntheticPktInfo(\n    kind: jdspec.PacketKind,\n    addr: number\n): jdspec.PacketInfo {\n    return {\n        kind,\n        identifier: addr,\n        name: hexNum(addr),\n        description: \"\",\n        fields: [\n            {\n                name: \"_\",\n                type: \"bytes\",\n                storage: 0,\n            },\n        ],\n    }\n}\n\nfunction decodeRegister(\n    service: jdspec.ServiceSpec,\n    pkt: Packet\n): DecodedPacket {\n    const isSet = pkt.isRegisterSet\n    const isGet = pkt.isRegisterGet\n\n    if (isSet == isGet) return null\n\n    let error = \"\"\n    const addr = pkt.serviceCommand & CMD_REG_MASK\n    let regInfo = service?.packets.find(\n        p => isRegister(p) && p.identifier == addr\n    )\n    if (!regInfo) {\n        regInfo = syntheticPktInfo(\"rw\", addr)\n        error = `unable to decode register`\n    }\n\n    const decoded = decodeMembers(service, regInfo, pkt)\n\n    if (regInfo.packFormat && pkt.data.length) {\n        try {\n            const recoded: string = toHex(\n                jdpack(\n                    regInfo.packFormat,\n                    jdunpack(pkt.data, regInfo.packFormat)\n                )\n            )\n            if (recoded !== undefined && recoded !== toHex(pkt.data)) {\n                error = `invalid data packing, ${toHex(\n                    pkt.data\n                )} recoded to ${recoded}`\n            }\n        } catch (e) {\n            error = `invalid data packing, ${e.message}`\n        }\n    }\n\n    let description = \"\"\n    if (decoded.length == 0) description = regInfo.name\n    else if (decoded.length == 1)\n        description = regInfo.name + \": \" + decoded[0].humanValue\n    else description = wrapDecodedMembers(decoded)\n\n    if (isGet) description = \"GET \" + description\n    else description = \"SET \" + description\n\n    return {\n        service,\n        info: regInfo,\n        decoded,\n        description,\n        error,\n    }\n}\n\nfunction decodeEvent(service: jdspec.ServiceSpec, pkt: Packet): DecodedPacket {\n    if (pkt.isCommand || !pkt.isEvent) return null\n\n    const evCode = pkt.eventCode\n    const evInfo =\n        service?.packets.find(\n            p => p.kind == \"event\" && p.identifier == evCode\n        ) || syntheticPktInfo(\"event\", evCode)\n\n    const decoded = decodeMembers(service, evInfo, pkt)\n    const description =\n        `EVENT[${pkt.eventCounter}] ${evInfo.name}` +\n        wrapDecodedMembers(decoded)\n\n    return {\n        service,\n        info: evInfo,\n        decoded,\n        description,\n    }\n}\n\nfunction decodeCommand(\n    service: jdspec.ServiceSpec,\n    pkt: Packet\n): DecodedPacket {\n    const kind = pkt.isCommand ? \"command\" : \"report\"\n    const cmdInfo =\n        service?.packets.find(\n            p => p.kind == kind && p.identifier == pkt.serviceCommand\n        ) || syntheticPktInfo(kind, pkt.serviceCommand)\n\n    const decoded = decodeMembers(service, cmdInfo, pkt)\n    const description =\n        (pkt.isCommand ? \"CMD \" : \"REPORT \") +\n        cmdInfo.name +\n        wrapDecodedMembers(decoded)\n\n    return {\n        service,\n        info: cmdInfo,\n        decoded,\n        description,\n    }\n}\n\nfunction decodePacket(service: jdspec.ServiceSpec, pkt: Packet): DecodedPacket {\n    const decoded =\n        decodeRegister(service, pkt) ||\n        decodeEvent(service, pkt) ||\n        decodeCommand(service, pkt)\n    return decoded\n}\n\nfunction decodePipe(pkt: Packet): DecodedPacket {\n    const cmd = pkt.serviceCommand\n    const pinfo = pkt.device.port(cmd >> PIPE_PORT_SHIFT)\n    if (!pinfo.pipeType) return null\n\n    const [servId, pipeType, dir] = pinfo.pipeType.split(/\\./)\n    const service = serviceSpecificationFromName(servId)\n    if (!service) return null\n\n    const meta = !!(cmd & PIPE_METADATA_MASK)\n    const candidates = service.packets\n        .filter(\n            p =>\n                p.pipeType == pipeType &&\n                /pipe/.test(p.kind) &&\n                /meta/.test(p.kind) == meta &&\n                /command/.test(p.kind) == (dir == \"command\")\n        )\n        .filter(\n            p =>\n                !meta || pkt.getNumber(NumberFormat.UInt16LE, 0) == p.identifier\n        )\n\n    const cmdInfo = candidates[0]\n    if (cmdInfo) {\n        const decoded = decodeMembers(service, cmdInfo, pkt, meta ? 4 : 0)\n        const description =\n            cmdInfo.kind.toUpperCase() +\n            \" \" +\n            cmdInfo.name +\n            wrapDecodedMembers(decoded)\n        return {\n            service,\n            info: cmdInfo,\n            decoded,\n            description,\n        }\n    }\n\n    return null\n}\n\nexport function decodePacketData(pkt: Packet): DecodedPacket {\n    try {\n        if (pkt.device && pkt.isPipe) {\n            const info = decodePipe(pkt)\n            if (info) return info\n        }\n\n        const serviceClass = pkt.serviceClass\n        const service = serviceSpecificationFromClassIdentifier(serviceClass)\n        return decodePacket(service, pkt)\n    } catch (error) {\n        console.error(error, {\n            error,\n            pkt,\n            data: toHex(pkt.data),\n        })\n        throw error\n    }\n}\n\nfunction reverseLookup(map: Record<string, number>, n: number) {\n    for (const k of Object.keys(map)) {\n        if (map[k] == n) return k\n    }\n    return hexNum(n)\n}\n\nexport function serviceClass(name: string): number {\n    const serv = serviceSpecificationFromName(name)\n    return serv ? serv.classIdentifier : -1\n}\n\nexport function serviceName(serviceClass: number): string {\n    if (!isSet(serviceClass)) return \"?\"\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass)\n    return serv ? serv.name.toUpperCase() : \"?\"\n}\n\nexport function serviceShortIdOrClass(serviceClass: number) {\n    if (!isSet(serviceClass)) return \"?\"\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass)\n    return serv?.shortId || `0x${serviceClass.toString(16)}`\n}\n\nexport function deviceServiceName(pkt: Packet): string {\n    const srv_class = pkt?.device?.serviceClassAt(pkt.serviceIndex)\n    const serv_id = serviceName(srv_class)\n    return `${pkt?.device?.shortId || \"?\"}/${serv_id}:${pkt.serviceIndex}`\n}\n\nexport function commandName(n: number, serviceClass?: number): string {\n    let pref = \"\"\n    if ((n & CMD_TOP_MASK) == CMD_SET_REG) pref = \"SET[\"\n    else if ((n & CMD_TOP_MASK) == CMD_GET_REG) pref = \"GET[\"\n    if (pref) {\n        const reg = n & CMD_REG_MASK\n        let regName = SystemReg[reg]?.toLowerCase() // try reserved registers first, fast path\n        if (regName === undefined) {\n            const serviceSpec =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            regName = serviceSpec?.packets.find(\n                pkt => isRegister(pkt) && pkt.identifier === reg\n            )?.name\n        }\n        return (\n            pref +\n            (regName !== undefined ? regName : `x${reg.toString(16)}`) +\n            \"]\"\n        )\n    }\n\n    let r = SystemCmd[n]?.toLowerCase()\n    if (r === undefined) {\n        const serviceSpec =\n            serviceSpecificationFromClassIdentifier(serviceClass)\n        r = serviceSpec?.packets.find(\n            pkt => pkt.kind === \"command\" && pkt.identifier === n\n        )?.name\n    }\n    return r\n}\n\nfunction num2str(n: number) {\n    return n + \" (0x\" + n.toString(16) + \")\"\n}\n\nexport interface PrintPacketOptions {\n    showTime?: boolean\n    skipRepeatedAnnounce?: boolean\n}\n\nexport function toAscii(d: ArrayLike<number>) {\n    let r = \"\"\n    for (let i = 0; i < d.length; ++i) {\n        const c = d[i]\n        if (c < 32 || c >= 128) r += \".\"\n        else r += String.fromCharCode(c)\n    }\n    return r\n}\n\nexport function hexDump(d: ArrayLike<number>): string {\n    const chunk = 32\n    if (d.length <= chunk) return toHex(d) + \"\\u00A0|\\u00A0\" + toAscii(d)\n\n    const a = toArray(d)\n    let r = \"\"\n    for (let i = 0; i < d.length; i += chunk) {\n        if (i + chunk >= d.length) {\n            let s = toHex(a.slice(i))\n            while (s.length < chunk * 2) s += \"  \"\n            r += s + \"\\u00A0|\\u00A0\" + toAscii(a.slice(i))\n        } else {\n            r += hexDump(a.slice(i, i + chunk)) + \"\\n\"\n        }\n    }\n    return r\n}\n\nexport function printPacket(\n    pkt: Packet,\n    opts: PrintPacketOptions = {}\n): string {\n    const frame_flags = pkt.frameFlags\n    const devname = pkt.friendlyDeviceName\n    const service_name = pkt.friendlyServiceName\n    const cmdname = pkt.friendlyCommandName\n    const sender = pkt.sender\n\n    let pdesc = `${devname}/${service_name}: ${cmdname}; sz=${pkt.size}`\n\n    if (frame_flags & JD_FRAME_FLAG_COMMAND) pdesc = \"to \" + pdesc\n    else pdesc = \"from \" + pdesc\n    if (frame_flags & JD_FRAME_FLAG_ACK_REQUESTED)\n        pdesc = `[ack:${hexNum(pkt.crc)}] ` + pdesc\n\n    const d = pkt.data\n    if (\n        pkt.device &&\n        pkt.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n        pkt.serviceCommand == CMD_ADVERTISEMENT_DATA\n    ) {\n        if (pkt.device.lastServiceUpdate < pkt.timestamp) {\n            if (opts.skipRepeatedAnnounce) return \"\"\n            else pdesc = \" ====== \" + pdesc\n        } else {\n            const services = []\n            for (const sc of pkt.device.serviceClasses)\n                services.push(serviceName(sc))\n            pdesc += \"; \" + \"Announce services: \" + services.join(\", \")\n        }\n    } else {\n        const decoded = pkt.decoded\n        if (decoded) {\n            pdesc += \"; \" + decoded.description\n        } else if (0 < d.length && d.length <= 4) {\n            const v0 = pkt.uintData,\n                v1 = pkt.intData\n            pdesc += \"; \" + num2str(v0)\n            if (v0 != v1) pdesc += \"; signed: \" + num2str(v1)\n        } else if (d.length) {\n            pdesc += \"; \" + hexDump(d)\n        }\n    }\n\n    if (sender) pdesc += `; ${sender}`\n\n    return (\n        (!isNaN(pkt.timestamp) && opts?.showTime\n            ? Math.round(pkt.timestamp) + \"ms: \"\n            : \"\") + pdesc\n    )\n}\n","import {\n    crc,\n    ALIGN,\n    write16,\n    bufferConcat,\n    toHex,\n    fromHex,\n    throwError,\n    read32,\n    read16,\n    write32,\n    hexNum,\n    bufferToString,\n} from \"./utils\"\nimport {\n    JD_FRAME_FLAG_COMMAND,\n    JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS,\n    CMD_SET_REG,\n    JD_SERIAL_HEADER_SIZE,\n    JD_FRAME_FLAG_ACK_REQUESTED,\n    JD_SERVICE_INDEX_MASK,\n    JD_SERVICE_INDEX_INV_MASK,\n    JD_SERIAL_MAX_PAYLOAD_SIZE,\n    JD_SERVICE_INDEX_CRC_ACK,\n    JD_SERVICE_INDEX_PIPE,\n    PIPE_PORT_SHIFT,\n    PIPE_COUNTER_MASK,\n    PIPE_METADATA_MASK,\n    PIPE_CLOSE_MASK,\n    CMD_GET_REG,\n    JD_SERVICE_INDEX_CTRL,\n    CMD_REG_MASK,\n    CMD_EVENT_CODE_MASK,\n    CMD_EVENT_COUNTER_MASK,\n    CMD_EVENT_MASK,\n    CMD_EVENT_COUNTER_POS,\n    JD_SERVICE_INDEX_MAX_NORMAL,\n} from \"./constants\"\nimport JDDevice from \"./device\"\nimport { NumberFormat, getNumber } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport {\n    commandName,\n    DecodedPacket,\n    decodePacketData,\n    serviceName,\n    shortDeviceId,\n} from \"./pretty\"\nimport { SystemCmd } from \"../../jacdac-spec/dist/specconstants\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\n\nconst { warn } = console\n\n/**\n * A Jacdac packet\n * @category JDOM\n */\nexport class Packet {\n    private _header: Uint8Array\n    private _data: Uint8Array\n    private _meta: Record<string, unknown> = undefined // accesory data used by clients\n    timestamp: number\n    device: JDDevice\n    private _decoded: DecodedPacket\n    readonly key: number\n    // An optional tracing identity to avoid\n    // resending own packets for bridges\n    public sender: string\n    // Replayed in a trace\n    public replay?: boolean\n\n    private static _nextKey = 1\n    private constructor() {\n        this.key = Packet._nextKey++\n    }\n\n    static fromBinary(data: Uint8Array, timestamp?: number) {\n        if (!data || data.length > 252) return undefined\n        const p = new Packet()\n        p._header = data.slice(0, JD_SERIAL_HEADER_SIZE)\n        p._data = data.slice(\n            JD_SERIAL_HEADER_SIZE,\n            JD_SERIAL_HEADER_SIZE + p.size\n        )\n        if (timestamp !== undefined) p.timestamp = timestamp\n        return p\n    }\n\n    static from(service_command: number, data: Uint8Array) {\n        const p = new Packet()\n        p._header = new Uint8Array(JD_SERIAL_HEADER_SIZE)\n        p.data = data\n        p.serviceCommand = service_command\n        return p\n    }\n\n    static onlyHeader(service_command: number) {\n        return Packet.from(service_command, new Uint8Array(0))\n    }\n\n    toBuffer() {\n        // compute correct framing and CRC\n        const res = bufferConcat(this._header, this._data)\n        res[2] = this._data.length + 4\n        write16(res, 0, crc(res.slice(2)))\n        return res\n    }\n\n    get header() {\n        return this._header.slice(0)\n    }\n\n    get deviceIdentifier() {\n        return toHex(this._header.slice(4, 4 + 8))\n    }\n    set deviceIdentifier(id: string) {\n        const idb = fromHex(id)\n        if (idb.length != 8) throwError(\"Invalid id\")\n        if (this.isMultiCommand) throwError(\"Invalid multicast\")\n        this._header.set(idb, 4)\n        this._decoded = undefined\n    }\n\n    get frameFlags() {\n        return this._header[3]\n    }\n\n    set frameFlags(v: number) {\n        this._header[3] = v\n    }\n\n    get isMultiCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS)\n    }\n\n    get size(): number {\n        return this._header[12]\n    }\n\n    get requiresAck(): boolean {\n        return this.frameFlags & JD_FRAME_FLAG_ACK_REQUESTED ? true : false\n    }\n    set requiresAck(ack: boolean) {\n        if (ack != this.requiresAck)\n            this._header[3] ^= JD_FRAME_FLAG_ACK_REQUESTED\n        this._decoded = undefined\n    }\n\n    get serviceIndex(): number {\n        return this._header[13] & JD_SERVICE_INDEX_MASK\n    }\n    set serviceIndex(value: number) {\n        if (value == null) throw new Error(\"service_index not set\")\n        this._header[13] =\n            (this._header[13] & JD_SERVICE_INDEX_INV_MASK) | value\n        this._decoded = undefined\n    }\n\n    get serviceClass(): number {\n        if (this.isMultiCommand) return read32(this._header, 4)\n        return this.device?.serviceClassAt(this.serviceIndex)\n    }\n\n    get crc(): number {\n        return read16(this._header, 0)\n    }\n\n    get serviceCommand(): number {\n        return read16(this._header, 14)\n    }\n    set serviceCommand(cmd: number) {\n        write16(this._header, 14, cmd)\n        this._decoded = undefined\n    }\n\n    get isRegisterSet() {\n        return this.serviceCommand >> 12 == CMD_SET_REG >> 12\n    }\n\n    get isRegisterGet() {\n        return this.serviceCommand >> 12 == CMD_GET_REG >> 12\n    }\n\n    // TODO rename to registerCode\n    get registerIdentifier() {\n        if (!this.isRegisterGet && !this.isRegisterSet) return undefined\n        return this.serviceCommand & CMD_REG_MASK\n    }\n\n    get isEvent() {\n        return (\n            this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL &&\n            (this.serviceCommand & CMD_EVENT_MASK) !== 0\n        )\n    }\n\n    get eventCode() {\n        return this.isEvent\n            ? this.serviceCommand & CMD_EVENT_CODE_MASK\n            : undefined\n    }\n\n    get eventCounter() {\n        return this.isEvent\n            ? (this.serviceCommand >> CMD_EVENT_COUNTER_POS) &\n                  CMD_EVENT_COUNTER_MASK\n            : undefined\n    }\n\n    get isCRCAck() {\n        return this.serviceIndex === JD_SERVICE_INDEX_CRC_ACK\n    }\n\n    get isPipe() {\n        return this.serviceIndex === JD_SERVICE_INDEX_PIPE\n    }\n\n    get pipePort() {\n        return this.isPipe && this.serviceCommand >> PIPE_PORT_SHIFT\n    }\n\n    get pipeCount() {\n        return this.isPipe && this.serviceCommand & PIPE_COUNTER_MASK\n    }\n\n    get data(): Uint8Array {\n        return this._data\n    }\n\n    set data(buf: Uint8Array) {\n        if (buf.length > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw Error(\n                `jacdac packet length too large, ${buf.length} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`\n            )\n        this._header[12] = buf.length\n        this._data = buf\n        this._decoded = undefined\n    }\n\n    jdunpack<T extends PackedValues>(fmt: string): T {\n        return (this._data && fmt && jdunpack<T>(this._data, fmt)) || ([] as T)\n    }\n\n    get uintData() {\n        let buf = this._data\n        if (buf.length == 0) return undefined\n        if (buf.length < 4) buf = bufferConcat(buf, new Uint8Array(4))\n        if (buf.length == 8)\n            return read32(buf, 0) + read32(buf, 4) * 0x100000000\n        return read32(buf, 0)\n    }\n\n    get stringData(): string {\n        return this._data && bufferToString(this._data)\n    }\n\n    get intData() {\n        let fmt: NumberFormat\n        switch (this._data.length) {\n            case 0:\n                return undefined\n            case 1:\n                fmt = NumberFormat.Int8LE\n                break\n            case 2:\n            case 3:\n                fmt = NumberFormat.Int16LE\n                break\n            default:\n                fmt = NumberFormat.Int32LE\n                break\n        }\n        return this.getNumber(fmt, 0)\n    }\n\n    get isAnnounce() {\n        return (\n            this.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            this.isReport &&\n            this.serviceCommand == SystemCmd.Announce\n        )\n    }\n\n    get isRepeatedAnnounce() {\n        return (\n            this.isAnnounce && this.device?.lastServiceUpdate < this.timestamp\n        )\n    }\n\n    get decoded() {\n        if (!this._decoded) this._decoded = decodePacketData(this)\n        return this._decoded\n    }\n\n    get meta() {\n        if (!this._meta) this._meta = {}\n        return this._meta\n    }\n\n    clone() {\n        const pkt = new Packet()\n        pkt._header = this._header.slice()\n        pkt._data = this._data.slice()\n        pkt.timestamp = this.timestamp\n        return pkt\n    }\n\n    cloneForDevice(deviceId: string, serviceIndex: number) {\n        const idb = fromHex(deviceId)\n        if (idb.length != 8) throwError(\"Invalid id\")\n        if (!this.isMultiCommand) throwError(\"Must be multi command\")\n\n        const pkt = Packet.fromBinary(this.toBuffer(), this.timestamp)\n        pkt.frameFlags &= ~JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS\n        pkt._header.set(idb, 4)\n        pkt._decoded = undefined\n        pkt.serviceIndex = serviceIndex\n        return pkt\n    }\n\n    compress(stripped: Uint8Array[]) {\n        if (stripped.length == 0) return\n        let sz = -4\n        for (const s of stripped) {\n            sz += s.length\n        }\n        const data = new Uint8Array(sz)\n        this._header.set(stripped[0], 12)\n        data.set(stripped[0].slice(4), 0)\n        sz = stripped[0].length - 4\n        for (const s of stripped.slice(1)) {\n            data.set(s, sz)\n            sz += s.length\n        }\n        this._data = data\n        this._decoded = undefined\n    }\n\n    withFrameStripped() {\n        return bufferConcat(this._header.slice(12, 12 + 4), this._data)\n    }\n\n    getNumber(fmt: NumberFormat, offset: number) {\n        return getNumber(this._data, fmt, offset)\n    }\n\n    get isCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_COMMAND)\n    }\n\n    set isCommand(value: boolean) {\n        if (value) this._header[3] |= JD_FRAME_FLAG_COMMAND\n        else this._header[3] &= ~JD_FRAME_FLAG_COMMAND\n        this._decoded = undefined\n    }\n\n    get isReport() {\n        return !this.isCommand\n    }\n\n    toString(): string {\n        let msg = `${shortDeviceId(this.deviceIdentifier)}/${\n            this.serviceIndex\n        }[${this.frameFlags}]: ${this.serviceCommand} sz=${this.size}`\n        if (this.size < 20) msg += \": \" + toHex(this.data)\n        else msg += \": \" + toHex(this.data.slice(0, 20)) + \"...\"\n        return msg\n    }\n\n    sendCoreAsync(bus: JDBus) {\n        const buf = this.toBuffer()\n        // Here we're sending this packet as the only one in a frame, therefore we need to compute CRC (which toBuffer() does)\n        // There's no crc computation function on Packet, since it should be typically only applied to full frames.\n        // The crc field reads the CRC from the frame (which is useful eg for acks).\n        this._header[0] = buf[0]\n        this._header[1] = buf[1]\n        this._header[2] = buf[2]\n        return bus.sendPacketAsync(this)\n    }\n\n    sendReportAsync(dev: JDDevice) {\n        if (!dev) return Promise.resolve()\n        this.deviceIdentifier = dev.deviceId\n        return this.sendCoreAsync(dev.bus)\n    }\n\n    sendCmdAsync(dev: JDDevice) {\n        if (!dev) return Promise.resolve()\n        this.deviceIdentifier = dev.deviceId\n        this.isCommand = true\n        return this.sendCoreAsync(dev.bus)\n    }\n\n    sendAsMultiCommandAsync(bus: JDBus, service_class: number) {\n        this._header[3] |=\n            JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS | JD_FRAME_FLAG_COMMAND\n        write32(this._header, 4, service_class)\n        write32(this._header, 8, 0)\n        return this.sendCoreAsync(bus)\n    }\n\n    static fromFrame(frame: Uint8Array, timestamp: number) {\n        return frameToPackets(frame, timestamp)\n    }\n\n    static jdpacked<T extends PackedValues>(\n        service_command: number,\n        fmt: string,\n        nums: T\n    ) {\n        return Packet.from(service_command, jdpack<T>(fmt, nums))\n    }\n\n    // helpers\n    get friendlyDeviceName(): string {\n        if (this.isMultiCommand) return \"*\"\n        return this.device?.friendlyName || this.deviceIdentifier\n    }\n    get friendlyServiceName(): string {\n        let service_name: string\n        if (this.isCRCAck) {\n            service_name = \"CRC-ACK\"\n        } else if (this.isPipe) {\n            service_name = \"PIPE\"\n        } else {\n            const serv_id = serviceName(this.serviceClass)\n            service_name = `${serv_id} (${this.serviceIndex})`\n        }\n        return service_name\n    }\n    get friendlyCommandName(): string {\n        const cmd = this.serviceCommand\n        let cmdname: string\n        if (this.isCRCAck) {\n            cmdname = hexNum(cmd)\n        } else if (this.isPipe) {\n            cmdname = `port:${cmd >> PIPE_PORT_SHIFT} cnt:${\n                cmd & PIPE_COUNTER_MASK\n            }`\n            if (cmd & PIPE_METADATA_MASK) cmdname += \" meta\"\n            if (cmd & PIPE_CLOSE_MASK) cmdname += \" close\"\n        } else if (this.isEvent) {\n            const spec = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n            const code = this.eventCode\n            const pkt = spec?.packets.find(\n                pkt => pkt.kind === \"event\" && pkt.identifier === code\n            )\n            cmdname = pkt?.name\n        } else if (this.isReport) {\n            const spec = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n            const code = this.serviceCommand & ~CMD_GET_REG\n            const pkt = spec?.packets.find(\n                pkt => pkt.kind === \"report\" && pkt.identifier === code\n            )\n            cmdname = pkt?.name\n        } else {\n            cmdname = commandName(cmd, this.serviceClass)\n        }\n        return cmdname\n    }\n}\n\nfunction frameToPackets(frame: Uint8Array, timestamp: number) {\n    const size = frame[2] || 0\n    if (frame.length < size + 12) {\n        warn(\n            `${timestamp}ms: got only ${frame.length} bytes; expecting ${\n                size + 12\n            }`\n        )\n    } else if (size < 4) {\n        warn(`${timestamp}ms: empty packet`)\n    } else {\n        const computed = crc(frame.slice(2, size + 12))\n        const actual = read16(frame, 0)\n        if (actual != computed)\n            console.error(\n                `crc mismatch; sz=${size} got:${actual}, exp:${computed}`\n            )\n\n        const res: Packet[] = []\n        if (frame.length != 12 + frame[2])\n            warn(`${timestamp}ms: unexpected packet len: ${frame.length}`)\n        for (let ptr = 12; ptr < 12 + frame[2]; ) {\n            const psz = frame[ptr] + 4\n            const sz = ALIGN(psz)\n            const pkt = bufferConcat(\n                frame.slice(0, 12),\n                frame.slice(ptr, ptr + psz)\n            )\n            if (ptr + psz > 12 + frame[2])\n                warn(\n                    `${timestamp}ms: invalid frame compression, res len=${res.length}`\n                )\n            const p = Packet.fromBinary(pkt)\n            p.timestamp = timestamp\n            res.push(p)\n            // only set req_ack flag on first packet - otherwise we would sent multiple acks\n            if (res.length > 1) p.requiresAck = false\n            ptr += sz\n        }\n\n        return res\n    }\n\n    return []\n}\n\nexport default Packet\n","import { META_TRACE } from \"../constants\"\nimport Packet from \"../packet\"\nimport { printPacket } from \"../pretty\"\nimport { roundWithPrecision, toHex } from \"../utils\"\n\nconst TRACE_OVERSHOOT = 1.1\n\n/**\n * Collect stack trace at the current execution position\n * @returns\n * @internal\n */\nexport function stack() {\n    return new Error().stack\n}\n\n/**\n * @internal\n */\nexport function cleanStack(text: string) {\n    return text\n        ?.split(/\\n/g)\n        .slice(2)\n        .join(\"\\n\") // drop first 2 lines\n        .replace(/webpack-internal:\\/\\/\\//g, \"\")\n        .replace(/https:\\/\\/microsoft\\.github\\.io\\/jacdac-docs/g, \"\")\n}\n\n/**\n * A sequence of packets.\n * @category Trace\n */\nexport class Trace {\n    readonly maxLength: number\n    readonly description: string\n    /**\n     * Constructs a new empty trace or from an existing list of packets\n     * @param packets list of packets\n     * @param description description of the trace\n     */\n    constructor(\n        public packets: Packet[] = [],\n        options?: {\n            description?: string\n            maxLength?: number\n        }\n    ) {\n        this.description = options?.description\n        this.maxLength = options?.maxLength\n    }\n\n    /**\n     * Number of packets in trace\n     */\n    get length() {\n        return this.packets.length\n    }\n\n    /**\n     * Duration in milliseconds between the first and last packet.\n     */\n    get duration() {\n        if (!this.packets.length) return 0\n        return (\n            this.packets[this.packets.length - 1].timestamp -\n            this.packets[0].timestamp\n        )\n    }\n\n    /**\n     * Timestamp of the first packet, defaults to 0 if trace is empty.\n     */\n    get startTimestamp() {\n        return this.packets[0]?.timestamp || 0\n    }\n\n    /**\n     * Timestamp of the last packet, defaults to 0 if trace is empty.\n     */\n    get endTimestamp() {\n        return this.packets[this.packets.length - 1]?.timestamp || 0\n    }\n\n    /**\n     * Appends a packet to the trace\n     * @param packet packet to add\n     * @param maxLength If positive, prunes older packets when the length reaches maxLength\n     */\n    addPacket(packet: Packet) {\n        this.packets.push(packet)\n        if (\n            this.maxLength > 0 &&\n            this.packets.length > this.maxLength * TRACE_OVERSHOOT\n        ) {\n            // 10% overshoot of max\n            this.packets = this.packets.slice(-this.maxLength)\n        }\n    }\n\n    /**\n     * Gets a text-rendered view of the trace\n     * @param length maximum number of elements\n     * @returns text where each line is a packet\n     */\n    serializeToText(length?: number) {\n        const start = this.packets[0]?.timestamp || 0\n        let pkts = this.packets\n        if (length > 0) pkts = pkts.slice(-length)\n        const text = pkts.map(pkt => {\n            let t = `${roundWithPrecision(pkt.timestamp - start, 3)}\\t${toHex(\n                pkt.toBuffer()\n            )}\\t${printPacket(pkt, {}).replace(/\\r?\\n/g, \" \")}`\n            const trace = pkt.meta[META_TRACE] as string\n            if (trace) t += \"\\n\" + cleanStack(trace)\n            return t\n        })\n        if (this.description) {\n            text.unshift(this.description)\n            text.unshift(\"\")\n        }\n        return text.join(\"\\n\")\n    }\n}\nexport default Trace\n","import { NEW_LISTENER, REMOVE_LISTENER, ERROR, CHANGE } from \"./constants\"\nimport { Observable, Observer } from \"./observable\"\nimport Flags from \"./flags\"\nimport { stack } from \"./trace/trace\"\n\n/**\n * @category JDOM\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type EventHandler = (...args: any[]) => void\n\ninterface Listener {\n    handler: EventHandler\n    once: boolean\n    stackTrace?: string\n}\n\nfunction normalizeEventNames(eventNames: string | string[]): string[] {\n    if (!eventNames) eventNames = []\n    if (typeof eventNames === \"string\") eventNames = [eventNames]\n    return eventNames\n}\n\n/**\n * Base interface for evented nodes in Jacdac\n * @category JDOM\n */\nexport interface IEventSource {\n    readonly nodeId: number\n    changeId: number\n\n    /**\n     * Subscribes to an event and returns the unsubscription handler\n     * @param eventName\n     * @param next\n     */\n    subscribe<T>(\n        eventName: string | string[],\n        next: (value: T) => void\n    ): () => void\n}\n\n/**\n * Given a node or set of nodes, generate a stable string that can be used to track dependencies in frameworks like React.\n * @param nodes\n * @returns\n * @category JDOM\n */\nexport function dependencyId(nodes: IEventSource | IEventSource[]) {\n    if (Array.isArray(nodes))\n        return nodes?.map(node => node?.nodeId || \"?\").join(\",\") || \"\"\n    else return nodes?.nodeId || \"\"\n}\n\nlet nextNodeId = 0\n\n/**\n * Base class for evented nodes in Jacdac\n * @category JDOM\n */\nexport class JDEventSource implements IEventSource {\n    /**\n     * Gets an internal unique node identifier, mostly used for debugging.\n     * @category JDOM\n     */\n    public readonly nodeId = nextNodeId++\n\n    private readonly listeners: Record<string, Listener[]> = {}\n\n    /**\n     * Gets a counter of event emit calls.\n     * @category JDOM\n     */\n    readonly eventStats: Record<string, number> = {}\n\n    /**\n     * Gets a counter map from events to new listener counts\n     * @category JDOM\n     */\n    newListenerStats: Record<string, number> = undefined\n\n    /**\n     * @internal\n     */\n    constructor() {}\n\n    /**\n     * Registers a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to register\n     * @returns current object instance\n     * @category JDOM\n     */\n    on(eventName: string | string[], handler: EventHandler) {\n        if (!handler) return this\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.addListenerInternal(eventName, handler, false)\n        )\n        return this\n    }\n\n    /**\n     * Unregisters a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to unregister\n     * @returns current object instance\n     * @category JDOM\n     */\n    off(eventName: string | string[], handler: EventHandler) {\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.removeListenerInternal(eventName, handler)\n        )\n        return this\n    }\n\n    /**\n     * Registers a handler for one or more events to run only once.\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to execute\n     * @returns current object instance\n     * @category JDOM\n     */\n    once(eventName: string | string[], handler: EventHandler) {\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.addListenerInternal(eventName, handler, true)\n        )\n        return this\n    }\n\n    private addListenerInternal(\n        eventName: string,\n        handler: EventHandler,\n        once: boolean\n    ): void {\n        if (!eventName || !handler) {\n            return\n        }\n\n        const eventListeners =\n            this.listeners[eventName] || (this.listeners[eventName] = [])\n        const listener = eventListeners.find(\n            listener => listener.handler === handler\n        )\n        if (listener) {\n            listener.once = !!once\n            return\n        }\n\n        eventListeners.push({\n            handler,\n            once: !!once,\n            // debug only collection of trace for leak detection\n            stackTrace: Flags.diagnostics && stack(),\n        })\n        this.emit(NEW_LISTENER, eventName, handler)\n        // diagnostics\n        if (Flags.diagnostics) {\n            if (!this.newListenerStats) this.newListenerStats = {}\n            this.newListenerStats[eventName] =\n                (this.newListenerStats[eventName] || 0) + 1\n        }\n    }\n\n    private removeListenerInternal(\n        eventName: string,\n        handler: EventHandler\n    ): void {\n        if (!eventName || !handler) return\n\n        const eventListeners = this.listeners[eventName]\n        if (eventListeners) {\n            for (let i = 0; i < eventListeners.length; ++i) {\n                const listener = eventListeners[i]\n                if (handler === listener.handler) {\n                    eventListeners.splice(i, 1)\n                    this.emit(REMOVE_LISTENER, eventName, handler)\n                    return\n                }\n            }\n        }\n    }\n\n    /**\n     * Synchronously calls each of the listeners registered for the event named eventName,\n     * in the order they were registered, passing the supplied arguments to each.\n     * @param eventName\n     * @param args\n     * @category JDOM\n     */\n    emit(eventName: string, ...args: unknown[]): boolean {\n        if (!eventName) return false\n\n        // track event stats\n        this.eventStats[eventName] = (this.eventStats[eventName] || 0) + 1\n\n        const eventListeners = this.listeners[eventName]\n        if (!eventListeners || eventListeners.length == 0) {\n            // report unhandled errors\n            if (eventName == ERROR) console.error(args[0])\n            return false\n        }\n        for (let i = 0; i < eventListeners.length; ++i) {\n            const listener = eventListeners[i]\n            const handler = listener.handler\n            if (listener.once) {\n                eventListeners.splice(i, 1)\n                --i\n            }\n            try {\n                // eslint-disable-next-line prefer-spread\n                handler.apply(null, args)\n            } catch (e) {\n                // avoid recursive errors in error handler\n                if (eventName !== ERROR) this.emit(ERROR, e)\n            }\n        }\n        return true\n    }\n\n    /**\n     * Gets the number of listeners for a given event\n     * @param eventName name of the event\n     * @returns number of registered handlers\n     * @category JDOM\n     */\n    listenerCount(eventName: string): number {\n        if (!eventName) return 0\n        const listeners = this.listeners[eventName]\n        return listeners?.length || 0\n    }\n\n    /**\n     * Gets the list stack trace where an event was registered. Only enabled if ``Flags.debug`` is true.\n     * @param eventName name of the event\n     * @returns stack traces where a listener was added\n     * @category JDOM\n     */\n    listenerStackTraces(eventName: string): string[] {\n        const listeners = this.listeners[eventName]\n        return listeners?.map(listener => listener.stackTrace)\n    }\n\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * @category JDOM\n     */\n    eventNames(): string[] {\n        return Object.keys(this.listeners)\n    }\n\n    /**\n     * Creates an observable from the given event\n     * @param eventName\n     * @category JDOM\n     */\n    observe<T>(eventName: string | string[]): Observable<T> {\n        return new EventObservable<T>(this, normalizeEventNames(eventName))\n    }\n\n    /**\n     * Subscribes to an event and returns the unsubscription handler\n     * @param eventName\n     * @param next\n     * @category JDOM\n     */\n    subscribe<T>(\n        eventName: string | string[],\n        next: (value: T) => void\n    ): () => void {\n        const observer = this.observe<T>(eventName)\n        return observer.subscribe({ next }).unsubscribe\n    }\n\n    /**\n     * Gets a counter for the ``CHANGE`` event.\n     * @category JDOM\n     */\n    get changeId() {\n        return this.eventStats[CHANGE] || 0\n    }\n}\n\nclass EventObservable<T> implements Observable<T> {\n    constructor(\n        public readonly eventEmitter: JDEventSource,\n        public readonly eventNames: string[]\n    ) {\n        //console.log(`obs`, this.eventNames)\n    }\n\n    subscribe(observer: Observer<T>) {\n        //console.log(`on`, this.eventNames, observer)\n        if (observer.next) this.eventEmitter.on(this.eventNames, observer.next)\n        if (observer.error) this.eventEmitter.on(ERROR, observer.error)\n        // never completes\n        return {\n            unsubscribe: () => {\n                //console.log(`off`, this.eventNames, observer)\n                if (observer.next)\n                    this.eventEmitter.off(this.eventNames, observer.next)\n                if (observer.error) this.eventEmitter.off(ERROR, observer.error)\n            },\n        }\n    }\n}\nexport default JDEventSource\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport JDEventSource from \"./eventsource\"\n\n/**\n * Base class for JDOM Node classes.\n * @category JDOM\n */\nexport abstract class JDNode extends JDEventSource {\n    private _nodeData: Record<string, unknown>\n\n    constructor() {\n        super()\n    }\n\n    /**\n     * Globally unique identifier in the tree\n     * @category JDOM\n     */\n    abstract get id(): string\n\n    /**\n     * Gets a kind identifier useful for UI descriptions\n     * @category JDOM\n     */\n    abstract get nodeKind(): string\n\n    /**\n     * Gets the local name\n     * @category JDOM\n     */\n    abstract get name(): string\n\n    /**\n     * A human friendly name\n     * @category JDOM\n     */\n    get friendlyName(): string {\n        return this.name\n    }\n\n    /**\n     * Gets the name including parents\n     * @category JDOM\n     */\n    abstract get qualifiedName(): string\n\n    /**\n     * Gets the parent node in the Jacdac dom\n     * @category JDOM\n     */\n    abstract get parent(): JDNode\n\n    /**\n     * Gets the children of the current node\n     * @category JDOM\n     */\n    abstract get children(): JDNode[]\n\n    /**\n     * Gets a databag to store custom information\n     * @category JDOM\n     */\n    get nodeData() {\n        if (!this._nodeData) this._nodeData = {}\n        return this._nodeData\n    }\n\n    /**\n     * Emit event in current node and parent nodes\n     * @param event event to emit\n     * @param arg event arguments\n     * @category JDOM\n     */\n    emitPropagated(event: string, arg?: any) {\n        let current = this as JDNode\n        while (current) {\n            current.emit(event, arg || this)\n            current = current.parent\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    toString() {\n        return this.friendlyName\n    }\n}\n\nexport default JDNode\n","import JDNode from \"./node\"\nimport JDService from \"./service\"\nimport { DecodedPacket } from \"./pretty\"\n\n/**\n * Base class for JDOM service member classes.\n * @category JDOM\n */\nexport abstract class JDServiceMemberNode extends JDNode {\n    private _specification: jdspec.PacketInfo\n\n    /**\n     * Parent service\n     * @category JDOM\n     */\n    public readonly service: JDService\n    /**\n     * Identifier of the event.\n     * @category Specification\n     */\n    public readonly code: number\n\n    private readonly isPacket: (pkt: jdspec.PacketInfo) => boolean\n\n    /**\n     * @internal\n     */\n    constructor(\n        service: JDService,\n        code: number,\n        isPacket: (pkt: jdspec.PacketInfo) => boolean\n    ) {\n        super()\n        this._specification = null\n        this.service = service\n        this.code = code\n        this.isPacket = isPacket\n    }\n\n    /**\n     * Gets the node identifier in the JDOM tree\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${\n            this.service.device.deviceId\n        }:${this.service.serviceIndex.toString(16)}:${this.code.toString(16)}`\n    }\n\n    /**\n     * Gets the event name, if specified.\n     * @category JDOM\n     */\n    get name() {\n        return this.specification?.name || this.code.toString(16)\n    }\n\n    /**\n     * Gets the qualitified event name, if specified.\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.service.qualifiedName}.${this.name}`\n    }\n\n    /**\n     * Gets the event specification if known.\n     * @category Specification\n     */\n    get specification() {\n        if (this._specification === null)\n            // lookup once\n            this._specification = this.service.specification?.packets.find(\n                packet =>\n                    this.isPacket(packet) && packet.identifier === this.code\n            )\n        return this._specification\n    }\n\n    /**\n     * Gets the parent service client instance.\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.service\n    }\n\n    /**\n     * Gets the event friendly name.\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.service.friendlyName, this.name]\n        return parts.join(\".\")\n    }\n\n    /**\n     * @internal\n     */\n    abstract get decoded(): DecodedPacket\n}\n\nexport default JDServiceMemberNode\n","import { FIELD_NODE_NAME } from \"./constants\"\nimport JDNode from \"./node\"\nimport { DecodedMember } from \"./pretty\"\nimport JDServiceMemberNode from \"./servicemembernode\"\n\n/**\n * A Jacdac field.\n * @category JDOM\n */\nexport class JDField extends JDNode {\n    /**\n     * Gets the parent JDOM member\n     * @category JDOM\n     */\n    readonly member: JDServiceMemberNode\n    /**\n     * Gets the index in the unpacked data payload\n     * @category Specification\n     */\n    readonly index: number\n    /**\n     * Gets the field specification\n     * @category Specification\n     */\n    readonly specification: jdspec.PacketMember\n\n    /**\n     * @internal\n     */\n    constructor(\n        member: JDServiceMemberNode,\n        index: number,\n        specification: jdspec.PacketMember\n    ) {\n        super()\n        this.member = member\n        this.index = index\n        this.specification = specification\n    }\n\n    /**\n     * Gets the JDOM node identifier\n     * @category JDOM\n     */\n    get id(): string {\n        return `${this.nodeKind}:${\n            this.member.service.device.deviceId\n        }:${this.member.service.serviceIndex.toString(\n            16\n        )}:${this.member.code.toString(16)}:${this.index.toString(16)}`\n    }\n\n    /**\n     * Gets the JDOM name\n     * @category JDOM\n     */\n    get name(): string {\n        return this.specification.name === \"_\"\n            ? this.member.specification.name\n            : this.specification.name\n    }\n\n    /**\n     * @internal\n     */\n    get children(): JDNode[] {\n        return []\n    }\n\n    /**\n     * Gets the JDOM qualified name\n     * @category JDOM\n     */\n    get qualifiedName(): string {\n        return `${this.member.qualifiedName}.${this.name}`\n    }\n\n    /**\n     * Gets the JDOM parent\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.member\n    }\n\n    /**\n     * Gets the JDOM friendly name\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.member.friendlyName]\n        if (this.specification.name !== \"_\") parts.push(this.name)\n        return parts.join(\".\")\n    }\n\n    /**\n     * @internal\n     */\n    get dataTypeName(): string {\n        const parts = [this.member.service.specification.shortName, this.name]\n        return parts.join(\".\")\n    }\n\n    /**\n     * Gets the unit of the data stored in the field\n     * @category Data\n     */\n    get unit(): jdspec.Unit {\n        return this.specification.unit\n    }\n\n    /**\n     * Gets ``FIELD_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind(): string {\n        return FIELD_NODE_NAME\n    }\n\n    /**\n     * @internal\n     */\n    get decoded(): DecodedMember {\n        const decoded = this.member.decoded\n        return decoded?.decoded[this.index]\n    }\n\n    /**\n     * Gets the decoded field value\n     * @category Data\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get value(): any {\n        return this.decoded?.value\n    }\n}\n\nexport default JDField\n","import { PackedSimpleValue, PackedValues } from \"./pack\"\n\n/**\n * Unpacked data mapped as an object\n * @category Data Packing\n */\nexport interface PackedObject {\n    [index: string]: PackedSimpleValue | PackedObject | PackedObject[]\n}\n\n/**\n * Unrolls an array of packed values into a friendly object structure\n * @param data\n * @param fields\n * @returns\n * @category Data Packing\n */\nexport function unpackedToObject(\n    data: PackedValues,\n    fields: jdspec.PacketMember[],\n    defaultName?: string\n): PackedObject {\n    if (!data || !fields) return undefined\n    const r: PackedObject = {}\n    for (let i = 0; i < data.length; ++i) {\n        const field = fields[i]\n        const value = data[i]\n        const { name, startRepeats } = field\n        const prettyName = name === \"_\" && defaultName ? defaultName : name\n\n        if (startRepeats) {\n            const repeatFields = fields.slice(i)\n            console.log({ value, repeatFields, data })\n            r[\"repeat\"] = value.map((rdata: PackedValues) => {\n                const r: PackedObject = {}\n                for (let i = 0; i < repeatFields.length; ++i) {\n                    const field = fields[i]\n                    const value = rdata[i]\n                    const { name } = field\n                    const prettyName =\n                        name === \"_\" && defaultName ? defaultName : name\n                    r[prettyName] = value\n                }\n                return r\n            })\n            break\n        } else r[prettyName] = value\n    }\n    return r\n}\n\n/**\n * Converts an object structure into a flat packed data array\n * @param pkt\n * @param msg\n * @returns\n * @category Data Packing\n */\nexport function objectToUnpacked(\n    pkt: jdspec.PacketInfo,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    msg: any\n): PackedValues {\n    if (!msg) return []\n\n    if (typeof msg === \"number\" || typeof msg === \"string\")\n        return [msg as number]\n    else if (typeof msg === \"boolean\") return [msg ? 1 : 0]\n    else if (Array.isArray(msg)) {\n        // assume a packaged layout\n        return msg as PackedValues\n    } else {\n        const { fields } = pkt\n        const r: PackedValues = []\n        for (let i = 0; i < fields.length; ++i) {\n            const field = fields[i]\n            const name = field.name === \"_\" ? pkt.name : field.name\n            const value = msg[name]\n            if (field.startRepeats) {\n                const repeatFields = fields.slice(i)\n                r.push(\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    (value as any[]).map(vrow => {\n                        const arow: PackedSimpleValue[] = []\n                        for (let j = 0; j < repeatFields.length; ++j) {\n                            const rfield = repeatFields[j]\n                            const rname = rfield.name\n                            arow.push(vrow[rname])\n                        }\n                        return arow\n                    })\n                )\n                break\n            } else {\n                r.push(value)\n            }\n        }\n\n        return r\n    }\n}\n","import Packet from \"./packet\"\nimport {\n    CMD_SET_REG,\n    REPORT_RECEIVE,\n    REPORT_UPDATE,\n    CHANGE,\n    CMD_GET_REG,\n    REGISTER_NODE_NAME,\n    REGISTER_REFRESH_TIMEOUT,\n    REGISTER_REFRESH_RETRY_1,\n    REGISTER_REFRESH_RETRY_0,\n    GET_ATTEMPT,\n} from \"./constants\"\nimport JDService from \"./service\"\nimport { intOfBuffer, uintOfBuffer } from \"./buffer\"\nimport { bufferEq, toHex, fromUTF8, uint8ArrayToString } from \"./utils\"\nimport { DecodedPacket } from \"./pretty\"\nimport { isRegister } from \"./spec\"\nimport JDField from \"./field\"\nimport JDServiceMemberNode from \"./servicemembernode\"\nimport JDNode from \"./node\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport { PackedObject, unpackedToObject } from \"./packobject\"\n\n/**\n * A Jacdac register client.\n * @category JDOM\n */\nexport class JDRegister extends JDServiceMemberNode {\n    private _lastReportPkt: Packet\n    private _fields: JDField[]\n    private _lastSetTimestamp = -Infinity\n    private _lastGetTimestamp = -Infinity\n    private _lastGetAttempts = 0\n\n    /**\n     * @internal\n     */\n    constructor(service: JDService, code: number) {\n        super(service, code, isRegister)\n    }\n\n    /**\n     * Returns ``REGISTER_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind() {\n        return REGISTER_NODE_NAME\n    }\n\n    /**\n     * Gets the list of field, if the specification is known\n     * @category JDOM\n     */\n    get fields() {\n        if (!this._fields)\n            this._fields = this.specification?.fields.map(\n                (field, index) => new JDField(this, index, field)\n            )\n        return this._fields.slice()\n    }\n\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.fields\n    }\n\n    /**\n     * Timestamp of the last ``register set`` packet\n     * @category Packets\n     */\n    get lastSetTimestamp() {\n        return this._lastSetTimestamp\n    }\n\n    /**\n     * Timestamp of the last ``register get`` packet\n     * @category Packets\n     */\n    get lastGetTimestamp() {\n        return this._lastGetTimestamp\n    }\n\n    /**\n     * Clears the get timestamp\n     * @internal\n     * @category Packets\n     */\n    clearGetTimestamp() {\n        this._lastGetTimestamp = -Infinity\n    }\n\n    /**\n     * Number of attempts to send a ``get`` packet without response\n     * @category Packets\n     */\n    get lastGetAttempts() {\n        return this._lastGetAttempts\n    }\n\n    /**\n     * Send a message to set the register value\n     * @param data packed data\n     * @param autoRefresh immediately send a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendSetAsync(data: Uint8Array, autoRefresh?: boolean): Promise<void> {\n        const cmd = CMD_SET_REG | this.code\n        const pkt = Packet.from(cmd, data)\n        this._lastSetTimestamp = this.service.device.bus.timestamp\n        let p = this.service.sendPacketAsync(pkt, this.service.registersUseAcks)\n        if (autoRefresh)\n            p = this.service.device.bus\n                .delay(50)\n                .then(() => this.sendGetAsync())\n        return p\n    }\n\n    /**\n     * Requests the value of the register by sending a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendGetAsync(): Promise<void> {\n        if (this.specification?.kind === \"const\" && this.data !== undefined)\n            return Promise.resolve()\n\n        this._lastGetTimestamp = this.service.device.bus.timestamp\n        this._lastGetAttempts++\n        const cmd = CMD_GET_REG | this.code\n        return this.service\n            .sendCmdAsync(cmd, undefined, this.service.registersUseAcks)\n            .then(() => {\n                this.emit(GET_ATTEMPT)\n            })\n    }\n\n    /**\n     * Send a message to set the register value\n     * @param values message to pack and send\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetPackedAsync(\n        values: PackedValues,\n        autoRefresh?: boolean\n    ): Promise<void> {\n        const fmt = this.specification?.packFormat\n        if (!fmt) throw new Error(\"unknown register data format\")\n        return this.sendSetAsync(jdpack(fmt, values), autoRefresh)\n    }\n\n    /**\n     * Sends a message to set the register value as a bpolean\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetBoolAsync(value: boolean, autoRefresh?: boolean): Promise<void> {\n        return this.sendSetPackedAsync([value ? 1 : 0], autoRefresh)\n    }\n\n    /**\n     * Sends a message to set the register value as a string\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetStringAsync(value: string, autoRefresh?: boolean): Promise<void> {\n        return this.sendSetPackedAsync([value || \"\"], autoRefresh)\n    }\n\n    /**\n     * Gets the raw data from the last report packet\n     * @category Data\n     */\n    get data() {\n        return this._lastReportPkt?.data\n    }\n\n    /**\n     * Gets the timestamp when received the last report with data\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        return this._lastReportPkt?.timestamp\n    }\n\n    /**\n     * Get the data from the last report packet, unpacked according to the specification.\n     * @category Data\n     */\n    get unpackedValue(): PackedValues {\n        const d = this.data\n        const fmt = this.specification?.packFormat\n        return d && fmt && jdunpack(this.data, fmt)\n    }\n\n    /**\n     * Gets the data from the last report packet, unpacked and hydrated into an object.\n     * @category Data\n     */\n    get objectValue(): PackedObject {\n        const { specification } = this\n        return unpackedToObject(\n            this.unpackedValue,\n            specification?.fields,\n            specification.name\n        )\n    }\n\n    /**\n     * Gets the data as a signed integer\n     * @category Data\n     */\n    get intValue(): number {\n        const d = this.data\n        return d && intOfBuffer(d)\n    }\n\n    /**\n     * Gets the data as a unsigned integer\n     * @category Data\n     */\n    get uintValue(): number {\n        const d = this.data\n        return d && uintOfBuffer(d)\n    }\n\n    /**\n     * Gets the data as a boolean\n     * @category Data\n     */\n    get boolValue(): boolean {\n        if (this.data === undefined) return undefined\n        return !!this.intValue\n    }\n\n    /**\n     * Gets the data as a string\n     * @category Data\n     */\n    get stringValue(): string {\n        const buf = this.data\n        if (buf === undefined) return undefined\n\n        let value: string\n        try {\n            value = fromUTF8(uint8ArrayToString(buf))\n        } catch {\n            // invalid UTF8\n            value = uint8ArrayToString(buf)\n        }\n        return value\n    }\n\n    /**\n     * Gets a pretty printed represention of the data\n     * @category Data\n     */\n    get humanValue(): string {\n        return this.decoded?.decoded?.map(field => field.humanValue).join(\",\")\n    }\n\n    /**\n     * @internal\n     */\n    toString() {\n        const d = this.data\n        return `${this.id} ${d ? toHex(d) : \"\"}`\n    }\n\n    /**\n     * @internal\n     */\n    get decoded(): DecodedPacket {\n        return this._lastReportPkt?.decoded\n    }\n\n    /**\n     * Refresh the value of the register within a timeout\n     * @param skipIfValue don't refesh if any data if available\n     * @returns\n     * @category Data\n     */\n    refresh(skipIfValue?: boolean): Promise<void> {\n        // don't refetch consts\n        // don't refetch if already data\n        if (\n            !!this.data &&\n            (skipIfValue || this.specification?.kind === \"const\")\n        )\n            return\n\n        const bus = this.service.device.bus\n        return bus.withTimeout(\n            REGISTER_REFRESH_TIMEOUT,\n            new Promise<void>((resolve, reject) => {\n                this.once(REPORT_RECEIVE, () => {\n                    const f = resolve\n                    resolve = null\n                    f()\n                })\n                // re-send get if no answer within 40ms and 90ms\n                this.sendGetAsync()\n                    .then(() => bus.delay(REGISTER_REFRESH_RETRY_0))\n                    .then(() => {\n                        if (resolve)\n                            return this.sendGetAsync().then(() =>\n                                bus.delay(REGISTER_REFRESH_RETRY_1)\n                            )\n                    })\n                    .then(() => {\n                        if (resolve) return this.sendGetAsync()\n                    })\n                    .catch(e => reject(e))\n            })\n        )\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        if (pkt.isRegisterGet) this.processReport(pkt)\n        else if (pkt.isRegisterSet) {\n            // another device sent a set packet to this register\n            // so most likely it's value changed\n            // clear any data caching to force updating the value\n            this.clearGetTimestamp()\n        }\n    }\n\n    private processReport(pkt: Packet) {\n        const updated = !bufferEq(this.data, pkt.data)\n        this._lastReportPkt = pkt\n        this._lastGetAttempts = 0 // reset counter\n        this._lastGetTimestamp = this.service.device.bus.timestamp // reset time counter too\n        this.emit(REPORT_RECEIVE, this)\n        if (updated) {\n            this.emitPropagated(REPORT_UPDATE, this)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * @internal\n     */\n    compareTo(b: JDRegister) {\n        return this.code - b.code || this.service.compareTo(b.service)\n    }\n}\n\nexport default JDRegister\n","import JDNode from \"./node\"\nimport JDService from \"./service\"\nimport Packet from \"./packet\"\nimport {\n    CHANGE,\n    CMD_EVENT_COUNTER_MASK,\n    EVENT,\n    EVENT_NODE_NAME,\n} from \"./constants\"\nimport { isEvent } from \"./spec\"\nimport JDServiceMemberNode from \"./servicemembernode\"\nimport { DecodedPacket } from \"./pretty\"\nimport JDField from \"./field\"\n\n/**\n * A Jacdac event client.\n * @category JDOM\n */\nexport class JDEvent extends JDServiceMemberNode {\n    private _lastReportPkt: Packet\n    private _fields: JDField[]\n    private _count = 0\n\n    /**\n     * @internal\n     */\n    constructor(service: JDService, code: number) {\n        super(service, code, isEvent)\n    }\n\n    /**\n     * Returns the ``EVENT_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return EVENT_NODE_NAME\n    }\n\n    /**\n     * Gets the field node\n     * @category Service Clients\n     */\n    get fields() {\n        if (!this._fields)\n            this._fields = this.specification?.fields.map(\n                (field, index) => new JDField(this, index, field)\n            )\n        return this._fields.slice()\n    }\n\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.fields\n    }\n\n    /**\n     * Gets the raw data attached to the last event packet\n     * @category Data\n     */\n    get data() {\n        return this._lastReportPkt?.data\n    }\n\n    /**\n     * Gets the unpacked data attached to the last event packet, if the event specification is known.\n     * @category Data\n     */\n    get unpacked() {\n        const { packFormat } = this.specification || {}\n        return packFormat && this._lastReportPkt?.jdunpack(packFormat)\n    }\n\n    /**\n     * Gets a counter of occurences for this event.\n     * @category Data\n     */\n    get count() {\n        return this._count\n    }\n\n    /**\n     * Gets the timestamp of the last packet with data received for this event.\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        return this._lastReportPkt?.timestamp\n    }\n    /**\n     * @internal\n     */\n    get decoded(): DecodedPacket {\n        return this._lastReportPkt?.decoded\n    }\n\n    /**\n     * @internal\n     */\n    processEvent(pkt: Packet) {\n        const { device } = this.service\n        const ec = (device.eventCounter || 0) + 1\n        // how many packets ahead and behind current are we?\n        const ahead = (pkt.eventCounter - ec) & CMD_EVENT_COUNTER_MASK\n        const behind = (ec - pkt.eventCounter) & CMD_EVENT_COUNTER_MASK\n        // ahead == behind == 0 is the usual case, otherwise\n        // behind < 60 means this is an old event (or retransmission of something we already processed)\n        const old = behind < 60\n        const missed5 = ahead < 5\n        const isahead = ahead > 0\n\n        // ahead < 5 means we missed at most 5 events,\n        // so we ignore this one and rely on retransmission\n        // of the missed events, and then eventually the current event\n        if (isahead && (old || missed5)) return\n\n        this._lastReportPkt = pkt\n        this._count++\n        this.emitPropagated(EVENT, this)\n        this.emit(CHANGE)\n\n        // update device counter\n        device.eventCounter = pkt.eventCounter\n    }\n}\n\nexport default JDEvent\n","import JDEventSource from \"./eventsource\"\n\n/**\n * Base class for clients\n * @category Clients\n */\nexport class JDClient extends JDEventSource {\n    private unsubscribers: (() => void)[] = []\n    protected unmounted = false\n    constructor() {\n        super()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected log(msg: any) {\n        console.log(msg)\n    }\n\n    mount(unsubscribe: () => void): () => void {\n        this.unmounted = false\n        if (unsubscribe && this.unsubscribers.indexOf(unsubscribe) < 0)\n            this.unsubscribers.push(unsubscribe)\n        return unsubscribe\n    }\n\n    unmount() {\n        const us = this.unsubscribers\n        this.unsubscribers = []\n        us.forEach(u => u())\n        this.unmounted = true\n    }\n}\nexport default JDClient\n","import { toHex } from \"./utils\"\n\nexport function cryptoRandomUint32(length: number): Uint32Array {\n    if (typeof window === \"undefined\") return undefined // not supported\n    const vals = new Uint32Array(length)\n    window.crypto.getRandomValues(vals)\n    return vals\n}\n\nexport function anyRandomUint32(length: number): Uint32Array {\n    let r = cryptoRandomUint32(length)\n    if (!r) {\n        r = new Uint32Array(length)\n        for (let i = 0; i < r.length; ++i)\n            r[i] = (Math.random() * 0x1_0000_0000) >>> 0\n    }\n    return r\n}\n\nexport function randomUInt(max: number) {\n    const arr = anyRandomUint32(1)\n    return arr[0] % max\n}\n\nexport function randomBytes(n: number) {\n    const buf = anyRandomUint32(n)\n    const r = new Uint8Array(buf.length)\n    for (let i = 0; i < n; ++i) r[i] = buf[i] & 0xff\n    return r\n}\n\nexport function randomDeviceId() {\n    const devId = anyRandomUint32(8)\n    for (let i = 0; i < 8; ++i) devId[i] &= 0xff\n    return toHex(devId)\n}\n","import JDDevice from \"./device\"\nimport {\n    PIPE_PORT_SHIFT,\n    PIPE_COUNTER_MASK,\n    PIPE_CLOSE_MASK,\n    JD_SERVICE_INDEX_PIPE,\n    PIPE_METADATA_MASK,\n    PACKET_RECEIVE,\n    DATA,\n    CLOSE,\n} from \"./constants\"\nimport Packet from \"./packet\"\nimport JDBus from \"./bus\"\nimport { signal, fromHex, throwError, toHex } from \"./utils\"\nimport { JDClient } from \"./client\"\nimport { jdpack } from \"./pack\"\nimport { randomUInt } from \"./random\"\n\nconst { warn } = console\n\nexport class OutPipe {\n    private _count = 0\n\n    constructor(\n        private device: JDDevice,\n        private port: number,\n        readonly hosted?: boolean\n    ) {}\n\n    static from(bus: JDBus, pkt: Packet, hosted?: boolean) {\n        const [idbuf, port] = pkt.jdunpack<[Buffer, number]>(\"b[8] u16\")\n        const id = toHex(idbuf)\n        const dev = bus.device(id, false, pkt)\n        return new OutPipe(dev, port, hosted)\n    }\n\n    get count() {\n        return this._count\n    }\n\n    get isOpen() {\n        return this.device != null\n    }\n\n    send(buf: Uint8Array) {\n        return this.sendData(buf, 0)\n    }\n\n    sendMeta(buf: Uint8Array) {\n        return this.sendData(buf, PIPE_METADATA_MASK)\n    }\n\n    async respondForEach<T>(\n        items: ArrayLike<T>,\n        converter: (item: T) => Uint8Array\n    ) {\n        try {\n            const n = items.length\n            for (let i = 0; i < n; ++i) {\n                const item = items[i]\n                const data = converter(item)\n                await this.send(data)\n            }\n        } finally {\n            await this.close()\n        }\n    }\n\n    private async sendData(buf: Uint8Array, flags: number) {\n        if (!this.device) {\n            warn(\"sending data over closed pipe\")\n            return\n        }\n        const cmd =\n            (this.port << PIPE_PORT_SHIFT) |\n            flags |\n            (this._count & PIPE_COUNTER_MASK)\n        const pkt = Packet.from(cmd, buf)\n        pkt.serviceIndex = JD_SERVICE_INDEX_PIPE\n        this.device.sendPktWithAck(pkt).then(\n            () => {},\n            err => {\n                console.log(err)\n                this.free()\n            }\n        )\n        if (this.hosted) this.device.bus.processPacket(pkt)\n        this._count++\n    }\n\n    private free() {\n        this.device = null\n        this.port = null\n    }\n\n    async close() {\n        await this.sendData(new Uint8Array(0), PIPE_CLOSE_MASK)\n        this.free()\n    }\n}\n\nexport class InPipe extends JDClient {\n    private _port: number\n    private _count = 0\n\n    constructor(protected readonly bus: JDBus) {\n        super()\n\n        this._handlePacket = this._handlePacket.bind(this)\n        this.allocPort()\n        this.mount(\n            this.bus.selfDevice.subscribe(PACKET_RECEIVE, this._handlePacket)\n        )\n    }\n\n    get port() {\n        return this._port\n    }\n\n    get count() {\n        return this._count\n    }\n\n    get isOpen() {\n        return this._port != null\n    }\n\n    private allocPort() {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this._port = 1 + randomUInt(511)\n            const info = this.bus.selfDevice.port(this._port)\n            if (!info.localPipe && !info.pipeType) {\n                info.localPipe = this\n                break\n            }\n        }\n    }\n\n    openCommand(cmd: number) {\n        if (!this.isOpen) throwError(\"trying to access a closed pipe\")\n        const b = jdpack<[Uint8Array, number, number]>(\"b[8] u16 u16\", [\n            fromHex(this.bus.selfDeviceId),\n            this._port,\n            0,\n        ])\n        return Packet.from(cmd, b)\n    }\n\n    private _handlePacket(pkt: Packet) {\n        if (!pkt.isPipe) return\n        if (pkt.pipePort !== this._port) return\n        if (\n            (pkt.serviceCommand & PIPE_COUNTER_MASK) ==\n            (this._count & PIPE_COUNTER_MASK)\n        ) {\n            this._count++\n            this.emit(DATA, pkt)\n            if (pkt.serviceCommand & PIPE_CLOSE_MASK) {\n                this.close()\n            }\n        }\n    }\n\n    close() {\n        if (this._port == null) return\n        this.emit(CLOSE)\n        this._port = null\n        this.bus.selfDevice.port(this._port).localPipe = undefined\n        this.unmount()\n    }\n}\n\nexport class InPipeReader extends InPipe {\n    private done = signal()\n    private meta: Packet[] = []\n    private output: Packet[] = []\n\n    constructor(bus: JDBus) {\n        super(bus)\n        this.mount(\n            this.subscribe(DATA, (pkt: Packet) => {\n                if (pkt.serviceCommand & PIPE_METADATA_MASK) this.meta.push(pkt)\n                else this.output.push(pkt)\n            })\n        )\n        this.mount(this.subscribe(CLOSE, this.done.signal))\n    }\n\n    async readData(timeout = 500): Promise<Uint8Array[]> {\n        const r = await this.readAll(timeout)\n        return r.output.map(p => p.data).filter(b => !!b?.length)\n    }\n\n    async readAll(timeout = 500) {\n        const res = await this.bus.withTimeout(timeout, this.done.signalled)\n        if (!res) throw new Error(\"Timeout reading pipe: \" + timeout + \"ms\")\n        return {\n            meta: this.meta,\n            output: this.output,\n        }\n    }\n}\n","import JDDevice from \"./device\"\nimport Packet from \"./packet\"\nimport { serviceName } from \"./pretty\"\nimport JDRegister from \"./register\"\nimport {\n    PACKET_RECEIVE,\n    PACKET_SEND,\n    SERVICE_NODE_NAME,\n    REPORT_RECEIVE,\n    SERVICE_CLIENT_ADDED,\n    SERVICE_CLIENT_REMOVED,\n    CHANGE,\n    ROLE_CHANGE,\n} from \"./constants\"\nimport JDNode from \"./node\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    isRegister,\n    isReading,\n    isEvent,\n    isValue,\n    isIntensity,\n    isOptionalReadingRegisterCode,\n    isConstRegister,\n} from \"./spec\"\nimport JDEvent from \"./event\"\nimport { strcmp } from \"./utils\"\nimport {\n    BaseEvent,\n    BaseReg,\n    SystemEvent,\n    SystemReg,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { InPipeReader } from \"./pipes\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport Flags from \"./flags\"\nimport { isMixinService } from \"../../jacdac-spec/spectool/jdutils\"\nimport JDServiceServer from \"./servers/serviceserver\"\n\n/**\n * A Jacdac service client hosting registers, events.\n * @category JDOM\n */\nexport class JDService extends JDNode {\n    /**\n     * Gets the service class\n     * @category Control\n     */\n    readonly serviceClass: number\n    private _role: string\n    private _registers: JDRegister[]\n    private _events: JDEvent[]\n    private _reports: Packet[] = []\n    private _specification: jdspec.ServiceSpec = null\n    // packets received since last announce\n    public registersUseAcks = false\n    private readonly _clients: JDServiceClient[] = []\n\n    private _twin: JDServiceServer\n\n    /**\n     * Gets the device this service belongs to\n     * @category JDOM\n     */\n    public readonly device: JDDevice\n    /**\n     * Gets the service index in the service list\n     * @category Control\n     */\n    public readonly serviceIndex: number\n\n    /**\n     * @internal\n     */\n    constructor(device: JDDevice, serviceIndex: number) {\n        super()\n        this.device = device\n        this.serviceIndex = serviceIndex\n        this.serviceClass = this.device.serviceClassAt(this.serviceIndex)\n\n        const statusCodeChanged = this.event(BaseEvent.StatusCodeChanged)\n        statusCodeChanged.on(CHANGE, () => {\n            // todo update status code with event payload\n            const { data } = statusCodeChanged\n            console.debug(`${this}: status code changed event`, { data })\n            // schedule data update\n            const statusCode = this.register(BaseReg.StatusCode)\n            statusCode?.clearGetTimestamp()\n        })\n    }\n\n    /**\n     * Gets the node identifier\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${\n            this.device.deviceId\n        }:${this.serviceIndex.toString(16)}`\n    }\n\n    /**\n     * Gets the ``SERVICE_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return SERVICE_NODE_NAME\n    }\n\n    /**\n     * Gets the service name\n     * @category JDOM\n     */\n    get name() {\n        return serviceName(this.serviceClass)?.toLowerCase()\n    }\n\n    /**\n     * Gets the service name and parent names\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.device.friendlyName]\n        if (\n            this.device.services({ serviceClass: this.serviceClass }).length > 1\n        )\n            parts.push(`[${this.serviceIndex.toString(16)}]`)\n        return parts.join(\".\")\n    }\n\n    /**\n     * Gets the service qualified name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.device.qualifiedName}[${this.serviceIndex.toString(16)}]`\n    }\n\n    /**\n     * Gets the device holding the service\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.device\n    }\n\n    get role(): string {\n        return this._role\n    }\n\n    set role(value: string) {\n        if (value !== this._role) {\n            this._role = value\n            this.emit(ROLE_CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    report(identifier: number) {\n        return this._reports.find(r => r.registerIdentifier === identifier)\n    }\n\n    get reports() {\n        return this._reports.slice(0)\n    }\n\n    get mixins() {\n        // find all 0x2 services follow this service\n        const r = []\n        const { serviceClasses, serviceLength } = this.device\n        for (\n            let i = this.serviceIndex + 1;\n            i < serviceLength && isMixinService(serviceClasses[i]);\n            ++i\n        ) {\n            r.push(this.device.service(i))\n        }\n        return r\n    }\n\n    get isMixin() {\n        return isMixinService(this.serviceClass)\n    }\n\n    get twin(): JDServiceServer {\n        return this._twin\n    }\n\n    set twin(server: JDServiceServer) {\n        if (this._twin === server) return\n\n        if (this._twin) this._twin.twin = undefined\n        this._twin = server\n        server.twin = this\n        this.emit(CHANGE)\n    }\n\n    private _readingRegister: JDRegister\n    /**\n     * Gets the ``reading`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get readingRegister(): JDRegister {\n        if (!this._readingRegister) {\n            const pkt = this.specification?.packets.find(pkt => isReading(pkt))\n            this._readingRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._readingRegister\n    }\n\n    private _valueRegister: JDRegister\n    /**\n     * Gets the ``value`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get valueRegister(): JDRegister {\n        if (!this._valueRegister) {\n            const pkt = this.specification?.packets.find(pkt => isValue(pkt))\n            this._valueRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._valueRegister\n    }\n\n    private _intensityRegister: JDRegister\n    /**\n     * Gets the ``intensity`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get intensityRegister(): JDRegister {\n        if (!this._intensityRegister) {\n            const pkt = this.specification?.packets.find(pkt =>\n                isIntensity(pkt)\n            )\n            this._intensityRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._intensityRegister\n    }\n\n    private _statusCodeRegister: JDRegister\n    /**\n     * Gets the ``status_code`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get statusCodeRegister(): JDRegister {\n        if (!this._statusCodeRegister) {\n            const pkt = this.specification?.packets.find(\n                pkt => pkt.identifier === SystemReg.StatusCode\n            )\n            this._statusCodeRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._statusCodeRegister\n    }\n\n    /**\n     * Gets the service instance name, if resolved\n     * @category Control\n     */\n    get instanceName() {\n        const r = this.register(SystemReg.InstanceName)\n        return r?.stringValue\n    }\n\n    /**\n     * Resolves the service instance name, if resolved\n     * @category Control\n     */\n    async resolveInstanceName() {\n        const r = this.register(SystemReg.InstanceName)\n        await r?.refresh()\n        return r?.stringValue\n    }\n\n    /**\n     * Gets the specification of the service. Undefined if unknown\n     * @category Services\n     */\n    get specification() {\n        if (this._specification === null)\n            this._specification = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n        return this._specification\n    }\n\n    get events() {\n        return (\n            this.specification?.packets\n                .filter(isEvent)\n                .map(info => this.event(info.identifier)) || []\n        )\n    }\n\n    registers() {\n        if (!this._registers) {\n            const spec = this.specification\n            this._registers = (spec?.packets || [])\n                .filter(isRegister)\n                .map(pkt => new JDRegister(this, pkt.identifier))\n        }\n        return this._registers.slice(0)\n    }\n\n    /**\n     * Gets the registers and events\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return [...this.registers(), ...this.events]\n    }\n\n    /**\n     * Gets a register for the given code\n     * @param registerCode register identifier as found in the specification\n     * @returns a register instance (if found in specifiaction)\n     * @category Registers\n     */\n    register(registerCode: number): JDRegister {\n        if (isNaN(registerCode)) return undefined\n        // cache known registers\n        this.registers()\n        let register = this._registers.find(reg => reg.code === registerCode)\n        // we may not have a spec.\n        if (!register) {\n            const spec = this.specification\n            if (\n                spec &&\n                !spec.packets.some(\n                    pkt => isRegister(pkt) && pkt.identifier === registerCode\n                )\n            ) {\n                if (\n                    Flags.diagnostics &&\n                    !isOptionalReadingRegisterCode(registerCode)\n                )\n                    console.debug(\n                        `attempting to access register ${\n                            SystemReg[registerCode] ||\n                            `0x${registerCode.toString(16)}`\n                        }`\n                    )\n                return undefined\n            }\n            this._registers.push(\n                (register = new JDRegister(this, registerCode))\n            )\n        }\n        return register\n    }\n\n    /**\n     * Gets an event for the given code\n     * @param eventCode event identifier as found in the specification\n     * @returns a event instance (if found in specifiaction)\n     * @category Events\n     */\n    event(eventCode: number): JDEvent {\n        if (isNaN(eventCode)) return undefined\n\n        if (!this._events) this._events = []\n        let event = this._events.find(ev => ev.code === eventCode)\n        if (!event) {\n            const spec = this.specification\n            if (\n                spec &&\n                !spec.packets.some(\n                    pkt => isEvent(pkt) && pkt.identifier === eventCode\n                )\n            ) {\n                if (Flags.diagnostics)\n                    console.debug(\n                        `attempting to access event ${\n                            SystemEvent[eventCode] ||\n                            `0x${eventCode.toString(16)}`\n                        }`\n                    )\n                return undefined\n            }\n            this._events.push((event = new JDEvent(this, eventCode)))\n        }\n        return event\n    }\n\n    /**\n     * Send packet to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    async sendPacketAsync(pkt: Packet, ack?: boolean) {\n        pkt.device = this.device\n        pkt.serviceIndex = this.serviceIndex\n        if (ack !== undefined) pkt.requiresAck = !!ack\n        if (pkt.requiresAck) await this.device.sendPktWithAck(pkt)\n        else await pkt.sendCmdAsync(this.device)\n        this.emit(PACKET_SEND, pkt)\n\n        // invalid register after a command call to refresh their values asap\n        if (pkt.isCommand && !pkt.isRegisterGet && !pkt.isRegisterSet)\n            this.invalidateRegisterValues(pkt)\n    }\n\n    /**\n     * Send a command to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAsync(cmd: number, data?: Uint8Array, ack?: boolean) {\n        const pkt = data ? Packet.from(cmd, data) : Packet.onlyHeader(cmd)\n        return this.sendPacketAsync(pkt, ack)\n    }\n\n    /**\n     * Packs values and sends command to the service server\n     * @param cmd packet to send\n     * @param values unpacked values, layed as specified\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdPackedAsync<TValues extends PackedValues>(\n        cmd: number,\n        values?: TValues,\n        ack?: boolean\n    ) {\n        const spec = this.specification.packets.find(\n            pkt => pkt.kind === \"command\" && pkt.identifier === cmd\n        )\n        const packFormat = spec?.packFormat\n        if (!packFormat) throw new Error(\"Unknown packing format\")\n        const data = values ? jdpack(packFormat, values) : undefined\n        return this.sendCmdAsync(cmd, data, ack)\n    }\n\n    /**\n     * Send a command and await response to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAwaitResponseAsync(pkt: Packet, timeout = 500) {\n        const { bus } = this.device\n        return new Promise<Packet>((resolve, reject) => {\n            const handleRes = (resp: Packet) => {\n                if (resp.serviceCommand == pkt.serviceCommand) {\n                    this.off(REPORT_RECEIVE, handleRes)\n                    if (resolve) resolve(resp)\n                    resolve = null\n                }\n            }\n            bus.delay(timeout).then(() => {\n                if (!resolve) return\n                resolve = null\n                this.off(REPORT_RECEIVE, handleRes)\n                reject(\n                    new Error(\n                        `timeout (${timeout}ms) waiting for response to ${pkt}`\n                    )\n                )\n            })\n            this.sendPacketAsync(pkt).then(() => {\n                this.on(REPORT_RECEIVE, handleRes)\n            })\n            // the handler remove either upon timeout,\n            // or on first invocation of handleRes()\n        })\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        this.emit(PACKET_RECEIVE, pkt)\n        if (pkt.isReport) {\n            this.emit(REPORT_RECEIVE, pkt)\n            if (pkt.isRegisterGet) {\n                const id = pkt.registerIdentifier\n                const reg = this.register(id)\n                if (reg) reg.processPacket(pkt)\n            } else if (pkt.isEvent) {\n                const ev = this.event(pkt.eventCode)\n                if (ev) ev.processEvent(pkt)\n            } else if (pkt.isCommand) {\n                // this is a report...\n                console.log(\"cmd report\", { pkt })\n            }\n        } else if (pkt.isRegisterSet) {\n            const id = pkt.registerIdentifier\n            const reg = this.register(id)\n            if (reg) reg.processPacket(pkt)\n        } else if (pkt.isCommand) {\n            this.invalidateRegisterValues(pkt)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private invalidateRegisterValues(pkt: Packet) {\n        //console.log(`clearing register get timestamp`, pkt)\n        this.registers()\n            .filter(r => r.specification && !isConstRegister(r.specification))\n            .forEach(r => r.clearGetTimestamp())\n    }\n\n    /**\n     * @internal\n     */\n    compareTo(b: JDService): number {\n        return (\n            this.serviceClass - b.serviceClass ||\n            strcmp(this.device.deviceId, b.device.deviceId) ||\n            this.serviceIndex - b.serviceIndex\n        )\n    }\n\n    get clients(): JDServiceClient[] {\n        return this._clients?.slice(0) || []\n    }\n\n    addClient(client: JDServiceClient) {\n        if (client && this._clients.indexOf(client) < 0) {\n            this._clients.push(client)\n            this.emit(SERVICE_CLIENT_ADDED, client)\n        }\n    }\n\n    removeClient(client: JDServiceClient) {\n        const i = this._clients.indexOf(client)\n        if (i > -1) {\n            this._clients.splice(i, 1)\n            this.emit(SERVICE_CLIENT_REMOVED, client)\n        }\n    }\n\n    async receiveWithInPipe<TValues extends PackedValues>(\n        cmd: number,\n        packFormat: string,\n        timeout?: number\n    ) {\n        const inp = new InPipeReader(this.device.bus)\n        await this.sendPacketAsync(inp.openCommand(cmd), true)\n        const recv: TValues[] = []\n        for (const buf of await inp.readData(timeout)) {\n            const values = jdunpack<TValues>(buf, packFormat)\n            recv.push(values)\n        }\n        return recv\n    }\n}\n\nexport default JDService\n","import JDEventSource from \"./eventsource\"\nimport { jdpack } from \"./pack\"\nimport JDService from \"./service\"\n\nfunction trgbToValues(trgb: number) {\n    return [\n        (trgb >> 16) & 0xff,\n        (trgb >> 8) & 0xff,\n        trgb & 0xff,\n        (trgb >> 24) & 0xff,\n    ]\n}\n\nexport class LEDController extends JDEventSource {\n    constructor(\n        public readonly service: JDService,\n        public readonly command: number\n    ) {\n        super()\n    }\n\n    async blink(from: number, to: number, interval: number, repeat: number) {\n        const on = jdpack(\"u8 u8 u8 u8\", trgbToValues(from))\n        const off = jdpack(\"u8 u8 u8 u8\", trgbToValues(to))\n        const { bus } = this.service.device\n        for (let i = 0; i < repeat; ++i) {\n            await this.service.sendCmdAsync(this.command, on)\n            await bus.delay(interval - 1)\n            await this.service.sendCmdAsync(this.command, off)\n            await bus.delay(interval - 1)\n        }\n    }\n}\nexport default LEDController\n","import Packet from \"./packet\"\nimport {\n    JD_SERVICE_INDEX_CTRL,\n    DEVICE_ANNOUNCE,\n    DEVICE_CHANGE,\n    ANNOUNCE,\n    DISCONNECT,\n    JD_ADVERTISEMENT_0_COUNTER_MASK,\n    DEVICE_RESTART,\n    RESTART,\n    CHANGE,\n    PACKET_RECEIVE,\n    PACKET_REPORT,\n    PACKET_EVENT,\n    DEVICE_FIRMWARE_INFO,\n    ControlCmd,\n    DEVICE_NODE_NAME,\n    LOST,\n    DEVICE_LOST,\n    DEVICE_FOUND,\n    FOUND,\n    JD_SERVICE_INDEX_CRC_ACK,\n    ACK_MIN_DELAY,\n    ACK_MAX_DELAY,\n    ControlReg,\n    USB_TRANSPORT,\n    PACKETIO_TRANSPORT,\n    META_ACK_FAILED,\n    ControlAnnounceFlags,\n    IDENTIFY_DURATION,\n    PACKET_ANNOUNCE,\n    BLUETOOTH_TRANSPORT,\n    ERROR,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    REPORT_UPDATE,\n    SERIAL_TRANSPORT,\n    WEBSOCKET_TRANSPORT,\n    DEVICE_PACKET_ANNOUNCE,\n} from \"./constants\"\nimport { read32, bufferEq, setAckError, read16 } from \"./utils\"\nimport { getNumber, NumberFormat } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport JDService from \"./service\"\nimport { serviceClass, shortDeviceId } from \"./pretty\"\nimport JDNode from \"./node\"\nimport { isInstanceOf } from \"./spec\"\nimport { FirmwareInfo } from \"./flashing\"\nimport LEDController from \"./ledcontroller\"\nimport JDEventSource from \"./eventsource\"\nimport { ServiceFilter } from \"./filters/servicefilter\"\nimport { randomDeviceId } from \"./random\"\nimport Flags from \"./flags\"\n\n/**\n * Pipe information\n * @category Runtime\n */\nexport interface PipeInfo {\n    pipeType?: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    localPipe?: any\n}\n\ninterface AckAwaiter {\n    pkt: Packet\n    retriesLeft: number\n    okCb: () => void\n    errCb: () => void\n}\n\nexport interface DeviceStats {\n    dropped: number\n    restarts: number\n    announce: number\n}\n\n/**\n * Collects packet statistics about the device\n * @category JDOM\n */\nexport class DeviceStatsMonitor extends JDEventSource {\n    // counter\n    private _receivedPackets = 0\n    private _restarts = 0\n    private _announce = 0\n\n    // horizon\n    private readonly _data: {\n        received: number\n        total: number\n        restarts: number\n    }[] = Array(0xf << 2)\n        .fill(0)\n        .map(() => ({ received: 0, total: 0, restarts: 0 }))\n    private _dataIndex = 0\n\n    /**\n     * @internal\n     */\n    constructor() {\n        super()\n    }\n\n    /**\n     * Number of announce packets received by the device\n     **/\n    get announce() {\n        return this._announce\n    }\n\n    /**\n     * Average packet dropped per announce period\n     * @category Statistics\n     */\n    get dropped(): number {\n        const r =\n            this._data\n                .filter(e => !!e.total) // ignore total 0\n                .reduce((s, e) => s + (e.total - e.received), 0) /\n                this._data.length || 0\n        return r\n    }\n\n    /**\n     * Number of restarts within the last 64 announce packets\n     */\n    get restarts(): number {\n        const r = this._data.reduce((s, e) => s + e.restarts, 0)\n        return r\n    }\n\n    /**\n     * Gets the current stats\n     */\n    get current(): DeviceStats {\n        const { dropped, restarts, announce } = this\n        return { dropped, restarts, announce }\n    }\n\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt: Packet) {\n        this._announce++\n\n        const { current: oldCurrent } = this\n        // collect metrics\n        const received = this._receivedPackets\n        const total = pkt.data[2]\n        const restarts = this._restarts\n\n        this._data[this._dataIndex] = { received, total, restarts }\n        this._dataIndex = (this._dataIndex + 1) % this._data.length\n\n        // reset counter\n        this._receivedPackets = 0\n        this._restarts = 0\n\n        const { current } = this\n        if (\n            oldCurrent.dropped !== current.dropped ||\n            oldCurrent.restarts !== current.restarts\n        )\n            this.emit(CHANGE)\n    }\n\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    processPacket(pkt: Packet) {\n        this._receivedPackets++\n    }\n\n    /**\n     * @internal\n     */\n    processRestart() {\n        this._restarts++\n        this._announce = 0\n    }\n}\n\n/**\n * A Jacdac device hosting services.\n * @category JDOM\n */\nexport class JDDevice extends JDNode {\n    /**\n     * Indicates if the device is connected to a bus\n     * @category Lifecycle\n     */\n    connected: boolean\n    private _source: string\n    private _replay: boolean\n    private _lost: boolean\n    private _servicesData: Uint8Array\n    private _statusLight: LEDController\n    /**\n     * Timestamp of the last packet received from the device\n     * @category Lifecycle\n     */\n    lastSeen: number\n    /**\n     * Timestamp of the last service update packet received from the device\n     * @category Lifecycle\n     */\n    lastServiceUpdate: number\n    private _shortId: string\n    private _anonymizedId: string\n    private _services: JDService[]\n    private _ports: Record<string, PipeInfo>\n    private _ackAwaiting: AckAwaiter[]\n    private _flashing = false\n    private _identifying: boolean\n    private _eventCounter: number\n    /**\n     * Gets the bus this device belongs to\n     * @category JDOM\n     */\n    public readonly bus: JDBus\n    /**\n     * Gets the device identifier\n     * @category Control\n     */\n    public readonly deviceId: string\n\n    /**\n     * Gets a random device id for the lifetime of this object.\n     */\n    public get anonymizedDeviceId() {\n        if (!this._anonymizedId) this._anonymizedId = randomDeviceId()\n        return this._anonymizedId\n    }\n\n    /**\n     * @internal\n     */\n    constructor(bus: JDBus, deviceId: string, pkt?: Packet) {\n        super()\n        this.bus = bus\n        this.deviceId = deviceId\n        this.connected = true\n        this._lost = false\n        this._identifying = false\n\n        this._source = pkt?.sender\n        this._replay = !!pkt?.replay\n    }\n\n    /**\n     * Quality of service statistics for this device\n     * @category Diagnostics\n     */\n    readonly stats = new DeviceStatsMonitor()\n\n    /**\n     * Gets a description of the device.\n     * @returns a descriptive string for this device\n     * @category Diagnostics\n     */\n    describe() {\n        const ignoredServices = [SRV_CONTROL, SRV_LOGGER]\n        return (\n            this.toString() +\n            (this.isPhysical ? \"\" : \" (sim)\") +\n            \": \" +\n            this.services()\n                .filter(srv => ignoredServices.indexOf(srv.serviceClass) < 0)\n                .map(\n                    s =>\n                        s.instanceName ||\n                        s.specification?.camelName ||\n                        s.serviceClass.toString(16)\n                )\n                .join(\", \")\n        )\n    }\n\n    /**\n     * Gets a unique identifier for this device in the bus\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.deviceId}`\n    }\n\n    /**\n     * Gets the short id of the device\n     * @category JDOM\n     */\n    get name() {\n        return this.shortId\n    }\n\n    /**\n     * Identifies node as a device\n     * @category JDOM\n     */\n    get nodeKind() {\n        return DEVICE_NODE_NAME\n    }\n\n    /**\n     * Indicates if the devices is a physical device, not emulated.\n     * @category Transport\n     */\n    get isPhysical() {\n        return (\n            this._source === USB_TRANSPORT ||\n            this._source === BLUETOOTH_TRANSPORT ||\n            this._source === SERIAL_TRANSPORT ||\n            this._source === PACKETIO_TRANSPORT ||\n            this._source === WEBSOCKET_TRANSPORT\n        )\n    }\n\n    /**\n     * Indicates the source of packets\n     * @category Transport\n     */\n    get source() {\n        return this._source\n    }\n\n    /**\n     * Indicates if the device is part of a trace replay\n     * @category Transport\n     */\n    get replay() {\n        return this._replay\n    }\n\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get friendlyName() {\n        return this.shortId\n    }\n\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return this.shortId\n    }\n\n    /**\n     * Indicates if service information is available.\n     * This happens after a announce packet has been received.\n     * @category Lifecycle\n     */\n    get announced(): boolean {\n        return !!this._servicesData?.length\n    }\n\n    /**\n     * Gets the control announce flag from the annouce packet.\n     * @category Control\n     */\n    get announceFlags(): ControlAnnounceFlags {\n        return this._servicesData ? read16(this._servicesData, 0) : 0\n    }\n\n    /**\n     * Gets the restart counter from the announce packet.\n     * @category Control\n     */\n    get restartCounter(): number {\n        return this.announceFlags & ControlAnnounceFlags.RestartCounterSteady\n    }\n\n    /**\n     * Gets the status light announce flags from the announce packet.\n     * @category Control\n     */\n    get statusLightFlags(): ControlAnnounceFlags {\n        return this.announceFlags & ControlAnnounceFlags.StatusLightRgbFade\n    }\n\n    /**\n     * Indicates if the device is announced as a client\n     * @category Control\n     */\n    get isClient() {\n        return !!(this.announceFlags & ControlAnnounceFlags.IsClient)\n    }\n\n    /**\n     * Gets the number of packets sent since the last announce packet,\n     * as read from the announce packet.\n     * @category Control\n     */\n    get packetCount(): number {\n        return this._servicesData?.[2] || 0\n    }\n\n    /**\n     * Gets the device short identifier\n     * @category JDOM\n     */\n    get shortId() {\n        // TODO measure if caching is worth it\n        if (!this._shortId) this._shortId = shortDeviceId(this.deviceId)\n        return this._shortId\n    }\n\n    /**\n     * Gets the bus instance hosting this device.\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.bus\n    }\n\n    /**\n     * Gets the firmware information if any.\n     * @category Firmware\n     */\n    get firmwareInfo(): FirmwareInfo {\n        const ctrl = this.service(0)\n\n        const deviceId = this.deviceId\n        const name = ctrl?.register(ControlReg.DeviceDescription)?.stringValue\n        const version = this.firmwareVersion\n        const productIdentifier = ctrl?.register(\n            ControlReg.ProductIdentifier\n        )?.uintValue\n        const bootloaderProductIdentifier = ctrl?.register(\n            ControlReg.BootloaderProductIdentifier\n        )?.uintValue\n        const ready =\n            version &&\n            (productIdentifier !== undefined ||\n                bootloaderProductIdentifier !== undefined)\n\n        return ready\n            ? {\n                  deviceId,\n                  name,\n                  version,\n                  productIdentifier,\n                  bootloaderProductIdentifier,\n              }\n            : undefined\n    }\n\n    refreshFirmwareInfo() {\n        // listen for specific registers\n        const ctrl = this._services?.[0]\n        const firmwareRegs = [\n            (ControlReg.ProductIdentifier,\n            ControlReg.FirmwareVersion,\n            ControlReg.BootloaderProductIdentifier),\n        ]\n        firmwareRegs.forEach(reg =>\n            ctrl.register(reg).once(REPORT_UPDATE, () => {\n                this.emitPropagated(DEVICE_FIRMWARE_INFO)\n                this.emitPropagated(CHANGE)\n            })\n        )\n    }\n\n    /**\n     * Indicates if no packet from this device has been observed in a while.\n     * @category Lifecycle\n     */\n    get lost() {\n        return this._lost\n    }\n\n    /**\n     * Sets the lost status\n     * @category Lifecycle\n     * @internal\n     */\n    set lost(v: boolean) {\n        if (!!v === this._lost) return\n\n        // something changed\n        this._lost = !!v\n        if (this.lost) {\n            this.emit(LOST)\n            this.bus.emit(DEVICE_LOST, this)\n        } else {\n            this.emit(FOUND)\n            this.bus.emit(DEVICE_FOUND, this)\n        }\n        this.emit(CHANGE)\n        this.bus.emit(DEVICE_CHANGE, this)\n        this.bus.emit(CHANGE)\n    }\n\n    /**\n     * A flashing sequence is in progress\n     * @category Firmware\n     */\n    get flashing() {\n        return this._flashing\n    }\n\n    /**\n     * Sets the flashing sequence state\n     * @category Firmware\n     */\n    set flashing(value: boolean) {\n        if (value !== this._flashing) {\n            this._flashing = value\n            this.emit(CHANGE)\n            this.bus.emit(DEVICE_CHANGE, this)\n            this.bus.emit(CHANGE)\n            if (this._flashing) this.bus.sendStopStreaming()\n        }\n    }\n\n    /**\n     * Gets the number of events received by the service clients in this device\n     * @category Lifecycle\n     */\n    get eventCounter() {\n        return this._eventCounter\n    }\n\n    /**\n     * @internal\n     */\n    set eventCounter(v: number) {\n        this._eventCounter = v\n    }\n\n    /**\n     * Indicates if the device contains at least one service matching the service class\n     * @param serviceClass service class to match\n     * @returns true if at least one service present\n     * @category Services\n     */\n    hasService(serviceClass: number): boolean {\n        if (!this.announced) return false\n        if (serviceClass === 0) return true\n\n        // skip first 4 bytes\n        for (let i = 4; i < this._servicesData.length; i += 4) {\n            const sc = getNumber(this._servicesData, NumberFormat.UInt32LE, i)\n            if (isInstanceOf(sc, serviceClass)) return true\n        }\n        return false\n    }\n\n    /**\n     * Gets or allocates a pipe port\n     * @param id identifier of the port\n     * @returns a pipe port\n     * @category Services\n     */\n    port(id: number) {\n        if (!this._ports) this._ports = {}\n        const key = id + \"\"\n        const ex = this._ports[key]\n        if (!ex) return (this._ports[key] = {})\n        return ex\n    }\n\n    /**\n     * Gets the number of services hosted by the device\n     * @category Services\n     */\n    get serviceLength() {\n        if (!this.announced) return 0\n        return this._servicesData.length >> 2\n    }\n\n    /**\n     * Gets the service class at a given index\n     * @param index index of the service\n     * @returns service class\n     * @category Services\n     */\n    serviceClassAt(index: number): number {\n        if (index == 0) return 0\n\n        index <<= 2\n        if (!this.announced || index + 4 > this._servicesData.length)\n            return undefined\n        return read32(this._servicesData, index)\n    }\n\n    /**\n     * Gets the list of service classes\n     * @category Services\n     */\n    get serviceClasses(): number[] {\n        const r = []\n        const n = this.serviceLength\n        for (let i = 0; i < n; ++i) r.push(this.serviceClassAt(i))\n        return r\n    }\n\n    private initServices(force?: boolean) {\n        if (force) this._services = undefined\n\n        if (!this._services && this._servicesData) {\n            this._statusLight = undefined\n            const n = this.serviceLength\n            const s = []\n            for (let i = 0; i < n; ++i) s.push(new JDService(this, i))\n            this._services = s\n            this.lastServiceUpdate = this.bus.timestamp\n            this.refreshFirmwareInfo()\n        }\n    }\n\n    /**\n     * Gets the service client at the given service index\n     * @param serviceIndex index of the service client\n     * @returns service client\n     * @category Services\n     */\n    service(serviceIndex: number): JDService {\n        if (!this.announced) return undefined\n        this.initServices()\n        serviceIndex = serviceIndex | 0\n        return this._services && this._services[serviceIndex]\n    }\n\n    /**\n     * Gets a filtered list of service clients.\n     * @param options filters for services\n     * @returns services matching the filter\n     * @category Services\n     */\n    services(options?: ServiceFilter): JDService[] {\n        if (!this.announced) return []\n\n        if (options?.serviceIndex >= 0)\n            return [this.service(options?.serviceIndex)]\n\n        if (options?.serviceName && options?.serviceClass > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\")\n        let sc = serviceClass(options?.serviceName)\n        if (sc === undefined || sc < 0) sc = options?.serviceClass\n        if (sc === undefined) sc = -1\n\n        this.initServices()\n        let r = this._services?.slice() || []\n        if (sc > -1) r = r.filter(s => s.serviceClass == sc)\n\n        if (options?.specification) r = r.filter(s => !!s.specification)\n\n        const mixins = options?.mixins\n        if (mixins !== undefined) r = r.filter(s => s.isMixin === mixins)\n\n        return r\n    }\n\n    /**\n     * Gets the list of child services.\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.services()\n    }\n\n    /**\n     * @internal\n     */\n    sendCtrlCommand(cmd: number, payload: Uint8Array = null) {\n        const pkt = !payload\n            ? Packet.onlyHeader(cmd)\n            : Packet.from(cmd, payload)\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        return pkt.sendCmdAsync(this)\n    }\n\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt: Packet) {\n        this.stats.processAnnouncement(pkt)\n\n        let changed = false\n        const w0 = this._servicesData\n            ? getNumber(this._servicesData, NumberFormat.UInt32LE, 0)\n            : 0\n        const w1 = getNumber(pkt.data, NumberFormat.UInt32LE, 0)\n\n        // compare service data\n        const servicesChanged = !bufferEq(pkt.data, this._servicesData, 4)\n        this._servicesData = pkt.data\n\n        // check for restart\n        if (\n            w1 &&\n            (w1 & JD_ADVERTISEMENT_0_COUNTER_MASK) <\n                (w0 & JD_ADVERTISEMENT_0_COUNTER_MASK)\n        ) {\n            this.stats.processRestart()\n            this.initServices(true)\n            this.bus.emit(DEVICE_RESTART, this)\n            this.emit(RESTART)\n            changed = true\n        }\n\n        // notify that services got updated\n        if (servicesChanged) {\n            if (!changed) this.initServices(true)\n            this.bus.emit(DEVICE_ANNOUNCE, this)\n            this.emit(ANNOUNCE)\n            changed = true\n        }\n\n        // notify that we've received an announce packet\n        this.bus.emit(DEVICE_PACKET_ANNOUNCE, this)\n        this.emit(PACKET_ANNOUNCE)\n\n        // notify of any changes\n        if (changed) {\n            this.bus.emit(DEVICE_CHANGE, this)\n            this.bus.emit(CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        this.stats.processPacket(pkt)\n        this.lost = false\n        this.emit(PACKET_RECEIVE, pkt)\n        if (pkt.isReport) this.emit(PACKET_REPORT, pkt)\n        else if (pkt.isEvent) this.emit(PACKET_EVENT, pkt)\n\n        const service = this.service(pkt.serviceIndex)\n        if (service) service.processPacket(pkt)\n    }\n\n    /**\n     * @internal\n     */\n    disconnect() {\n        this.connected = false\n        this.emit(DISCONNECT)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets a controller for the status light. Returns undefined if the device does not support a status light.\n     * @category Control\n     */\n    get statusLight(): LEDController {\n        if (\n            !this._statusLight &&\n            this.statusLightFlags !== ControlAnnounceFlags.StatusLightNone\n        )\n            this._statusLight = new LEDController(\n                this.service(0),\n                ControlCmd.SetStatusLight\n            )\n        return this._statusLight\n    }\n\n    /**\n     * Sends an ``identify`` command to the device\n     * @category Lifecycle\n     */\n    async identify() {\n        if (this._identifying) return\n\n        try {\n            this._identifying = true\n            this.emit(CHANGE)\n            const statusLight = this.statusLight\n            if (statusLight) await statusLight.blink(0x0000ff, 0, 262, 4)\n            else {\n                const ctrl = this.service(0)\n                await ctrl.sendCmdAsync(ControlCmd.Identify, undefined, false)\n                await this.bus.delay(IDENTIFY_DURATION)\n            }\n        } catch (e) {\n            this.emit(ERROR, e)\n        } finally {\n            this._identifying = false\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Indicates the device should be identifying.\n     * @category Lifecycle\n     */\n    get identifying() {\n        return this._identifying\n    }\n\n    /**\n     * Sends a ``reset`` command to the device\n     * @category Lifecycle\n     */\n    reset() {\n        return this.service(0)?.sendCmdAsync(ControlCmd.Reset)\n    }\n\n    /**\n     * Tries to retrive the product identifier from the device\n     * @param retry number of devices\n     * @returns promise that returns product identifier if received\n     * @category Control\n     */\n    async resolveProductIdentifier(retry = 0): Promise<number> {\n        const fwIdRegister = this.service(0)?.register(\n            ControlReg.ProductIdentifier\n        )\n        if (!fwIdRegister) return undefined\n\n        while (retry-- >= 0 && fwIdRegister.data === undefined)\n            await fwIdRegister.refresh(true)\n        return fwIdRegister.uintValue\n    }\n\n    /**\n     * Returns the product identifier synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get productIdentifier(): number {\n        const reg = this.service(0)?.register(ControlReg.ProductIdentifier)\n        const v = reg?.uintValue\n        if (reg && v === undefined) reg?.refresh(true)\n        return v\n    }\n\n    /**\n     * Gets the elapsed time since boot in milli-seconds\n     * @category Control\n     */\n    get uptime(): number {\n        const reg = this.service(0)?.register(ControlReg.Uptime)\n        const v = reg?.unpackedValue?.[0]\n        if (reg && v === undefined) reg?.refresh(true)\n        let uptime: number = undefined\n        if (v !== undefined) {\n            // compute offset\n            uptime = v / 1000 + this.bus.timestamp - reg.lastDataTimestamp\n        }\n        return uptime\n    }\n\n    /**\n     * Returns the firmware version synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get firmwareVersion(): string {\n        const reg = this.service(0)?.register(ControlReg.FirmwareVersion)\n        const v = reg?.stringValue\n        if (reg && v === undefined) reg?.refresh(true)\n        return v\n    }\n\n    private initAcks() {\n        if (this._ackAwaiting) return\n\n        let drops = 0\n        let resends = 0\n        this._ackAwaiting = []\n        const cleanUp = this.subscribe(PACKET_REPORT, (rep: Packet) => {\n            if (rep.serviceIndex != JD_SERVICE_INDEX_CRC_ACK) return\n            let numdone = 0\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt && aa.pkt.crc == rep.serviceCommand) {\n                    //console.log(`ack`, aa.pkt)\n                    aa.pkt = null\n                    numdone++\n                    aa.okCb()\n                }\n            }\n            if (numdone)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt)\n        })\n\n        const resend = () => {\n            let numdrop = 0\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt) {\n                    if (--aa.retriesLeft < 0) {\n                        drops++\n                        aa.pkt.meta[META_ACK_FAILED] = true\n                        aa.pkt = null\n                        aa.errCb()\n                        numdrop++\n                        if (Flags.diagnostics)\n                            console.debug(\n                                `ack: ${this.shortId} drop ${aa.pkt} (${drops} drops, ${resends} resends)`\n                            )\n                    } else {\n                        resends++\n                        aa.pkt.sendCmdAsync(this)\n                        if (Flags.diagnostics)\n                            console.debug(\n                                `ack: ${this.shortId} resend ${aa.pkt} (${drops} drops, ${resends} resends)`\n                            )\n                    }\n                }\n            }\n            if (numdrop)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt)\n\n            if (Flags.diagnostics)\n                console.debug(\n                    `ack: ${this.shortId} awaits ${this._ackAwaiting.length}`\n                )\n            if (this._ackAwaiting.length > 0) {\n                this.bus.scheduler.setTimeout(\n                    resend,\n                    Math.random() * (ACK_MAX_DELAY - ACK_MIN_DELAY) +\n                        ACK_MIN_DELAY\n                )\n            } else {\n                this._ackAwaiting = undefined\n                cleanUp()\n            }\n        }\n\n        // start loop\n        this.bus.scheduler.setTimeout(resend, 40)\n    }\n\n    /**\n     * @internal\n     */\n    sendPktWithAck(pkt: Packet) {\n        // no acks possible when bus is passive\n        pkt.requiresAck = !this.bus.passive\n        this.initAcks()\n        return new Promise<void>((resolve, reject) => {\n            const ack = {\n                pkt,\n                retriesLeft: 4,\n                okCb: resolve,\n                errCb: () => {\n                    const e = new Error(\"No ACK for \" + pkt.toString())\n                    setAckError(e)\n                    reject(e)\n                },\n            }\n            this._ackAwaiting.push(ack)\n            pkt.sendCmdAsync(this)\n        })\n    }\n\n    /**\n     * @internal\n     */\n    async floodPing(numPkts = 100, size = 32) {\n        const pkt = Packet.jdpacked(ControlCmd.FloodPing, \"u32 u32 u8\", [\n            numPkts,\n            0x1000,\n            size,\n        ])\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        await this.sendPktWithAck(pkt)\n    }\n}\n\nexport default JDDevice\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A time scheduler to orchestrate time in the bus.\n * @category JDOM\n */\nexport interface Scheduler {\n    /**\n     * Gets the current timestamp\n     */\n    get timestamp(): number\n    /**\n     * Reset time\n     * @param delta\n     */\n    resetTime(delta: number): void\n    /**\n     * Start a timeout timer\n     */\n    setTimeout(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any\n    /**\n     * Cancel an existing timeout timer\n     */\n    clearTimeout(handle: any): void\n    /**\n     * Start an interval timer\n     */\n    setInterval(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any\n    /**\n     * Clear an interval timer\n     */\n    clearInterval(handle: any): void\n}\nexport default Scheduler\n\n/** @internal */\nexport class WallClockScheduler implements Scheduler {\n    private _now: () => number\n    private _startTime: number\n\n    constructor() {\n        this._now =\n            typeof performance !== \"undefined\"\n                ? () => performance.now()\n                : () => Date.now()\n        this._startTime = this._now()\n    }\n\n    get timestamp(): number {\n        return this._now() - this._startTime\n    }\n    resetTime(delta = 0) {\n        this._startTime = this._now() - delta\n    }\n    setTimeout(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any {\n        return setTimeout(handler, delay, args)\n    }\n    clearTimeout(handle: any): void {\n        clearTimeout(handle)\n    }\n    setInterval(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any {\n        return setInterval(handler, delay, args)\n    }\n    clearInterval(handle: any): void {\n        clearInterval(handle)\n    }\n}\n","import { bufferToArray, NumberFormat, getNumber } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport {\n    BootloaderCmd,\n    ControlCmd,\n    SRV_BOOTLOADER,\n    SRV_CONTROL,\n    CMD_ADVERTISEMENT_DATA,\n    CMD_GET_REG,\n    CMD_REG_MASK,\n    ControlReg,\n    PACKET_REPORT,\n} from \"./constants\"\nimport {\n    assert,\n    bufferConcat,\n    bufferToString,\n    strcmp,\n    readBlobToUint8Array,\n} from \"./utils\"\nimport { jdpack, jdunpack } from \"./pack\"\nimport { BootloaderError } from \"./constants\"\nimport { prettySize } from \"./pretty\"\nimport { deviceSpecificationFromProductIdentifier } from \"./spec\"\n\nconst BL_SUBPAGE_SIZE = 208\nconst BL_RETRIES = 15\nconst BL_SESSION_DELAY = 5\nconst BL_PAGE_DELAY = 5\n\nlet _startTime = 0\n\nconst uf2ExtTags: Record<string, number> = {\n    version: -0x9fc7bc,\n    name: -0x650d9d,\n    pageSize: 0x0be9f7,\n    productIdentifier: 0xc8a729,\n}\n\n/**\n * UF2 page data structure\n * @category Firmware\n * @internal\n */\nexport interface FirmwarePage {\n    data: Uint8Array\n    targetAddress: number\n}\n\n/**\n * Data structure representing a firmware binary\n * @category Firmware\n * @internal\n */\nexport interface FirmwareBlob {\n    pages: FirmwarePage[]\n    productIdentifier: number\n    pageSize: number\n    name: string\n    version: string\n    // name of the file or repo\n    store: string\n}\n\nfunction timestamp() {\n    if (!_startTime) _startTime = Date.now()\n    return Date.now() - _startTime\n}\n\nfunction log(msg: string) {\n    console.log(`BL [${timestamp()}ms]: ${msg}`)\n}\n\nclass FlashClient {\n    private pageSize: number\n    private flashSize: number\n    private sessionId: number\n    classClients: FlashClient[]\n    private lastStatus: Packet\n    private pending: boolean\n    public dev_class: number\n    public device: JDDevice\n\n    constructor(private bus: JDBus, adpkt: Packet) {\n        const d = bufferToArray(adpkt.data, NumberFormat.UInt32LE)\n        this.pageSize = d[1]\n        this.flashSize = d[2]\n        this.dev_class = d[3]\n        this.device = adpkt.device\n        this.handlePacket = this.handlePacket.bind(this)\n    }\n\n    private handlePacket(pkt: Packet) {\n        if (pkt.serviceCommand == BootloaderCmd.PageData) this.lastStatus = pkt\n    }\n\n    private start() {\n        this.device.on(PACKET_REPORT, this.handlePacket)\n    }\n\n    private stop() {\n        this.device.off(PACKET_REPORT, this.handlePacket)\n    }\n\n    private async sendCommandAsync(p: Packet) {\n        p.serviceIndex = 1\n        await p.sendCmdAsync(this.device)\n    }\n\n    private async startFlashAsync() {\n        this.sessionId = (Math.random() * 0x10000000) | 0\n        for (const d of this.classClients) {\n            d.start()\n            log(\n                `flashing ${d.device.shortId}; available flash=${\n                    d.flashSize / 1024\n                }kb; page=${d.pageSize}b`\n            )\n        }\n\n        const setsession = Packet.jdpacked<[number]>(\n            BootloaderCmd.SetSession,\n            \"u32\",\n            [this.sessionId]\n        )\n\n        this.allPending()\n\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            for (const d of this.classClients) {\n                if (d.pending) {\n                    if (\n                        d.lastStatus &&\n                        d.lastStatus.getNumber(NumberFormat.UInt32LE, 0) ==\n                            this.sessionId\n                    ) {\n                        d.pending = false\n                    } else {\n                        d.lastStatus = null\n                        log(`set session ${this.sessionId} on ${d.device}`)\n                        await d.sendCommandAsync(setsession)\n                    }\n                    await this.bus.delay(BL_SESSION_DELAY)\n                }\n            }\n            if (this.numPending() == 0) break\n            await this.waitForStatusAsync()\n        }\n\n        if (this.numPending()) throw new Error(\"Can't set session id\")\n    }\n\n    private async endFlashAsync() {\n        for (const f of this.classClients) {\n            await this.bus.delay(10)\n            await f.device.sendCtrlCommand(ControlCmd.Reset)\n        }\n    }\n\n    private allPending() {\n        for (const c of this.classClients) {\n            c.pending = true\n            c.lastStatus = null\n        }\n    }\n\n    private numPending() {\n        let num = 0\n        for (const c of this.classClients) if (c.pending) num++\n        return num\n    }\n\n    private async waitForStatusAsync() {\n        for (let i = 0; i < 100; ++i) {\n            if (this.classClients.every(c => c.lastStatus != null)) break\n            await this.bus.delay(5)\n        }\n    }\n\n    private async flashPage(page: FirmwarePage) {\n        const pageAddr = page.targetAddress\n        const pageSize = this.pageSize\n        const numSubpage =\n            ((pageSize + BL_SUBPAGE_SIZE - 1) / BL_SUBPAGE_SIZE) | 0\n\n        log(\n            `flash ${prettySize(this.pageSize)} at ${(\n                pageAddr & 0xffffff\n            ).toString(16)}`\n        )\n\n        if (page.data.length != this.pageSize)\n            throw new Error(\"invalid page size\")\n\n        for (const f of this.classClients) f.lastStatus = null\n\n        this.allPending()\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            log(`  attempt ${i}`)\n            let currSubpage = 0\n            for (let suboff = 0; suboff < pageSize; suboff += BL_SUBPAGE_SIZE) {\n                let sz = BL_SUBPAGE_SIZE\n                if (suboff + sz > pageSize) sz = pageSize - suboff\n                log(\n                    `send sub page ${currSubpage}/${\n                        numSubpage - 1\n                    } at ${suboff.toString(16)}[${sz}]`\n                )\n                const hd = jdpack(\"u32 u16 u8 u8 u32 u32 u32 u32 u32\", [\n                    pageAddr,\n                    suboff,\n                    currSubpage++,\n                    numSubpage - 1,\n                    this.sessionId,\n                    0,\n                    0,\n                    0,\n                    0,\n                ])\n                assert(hd.length == 4 * 7)\n                const p = Packet.from(\n                    BootloaderCmd.PageData,\n                    bufferConcat(hd, page.data.slice(suboff, suboff + sz))\n                )\n                // in first round, just broadcast everything\n                // in other rounds, broadcast everything except for last packet\n                if (i == 0 || currSubpage < numSubpage)\n                    await p.sendAsMultiCommandAsync(this.bus, SRV_BOOTLOADER)\n                else {\n                    for (const f of this.classClients)\n                        if (f.pending) {\n                            f.lastStatus = null\n                            await f.sendCommandAsync(p)\n                        }\n                }\n                await this.bus.delay(BL_PAGE_DELAY)\n            }\n\n            await this.waitForStatusAsync()\n\n            for (const f of this.classClients) {\n                if (f.pending) {\n                    let err = \"\"\n                    if (f.lastStatus) {\n                        const [session_id, page_error, pageAddrR] = jdunpack<\n                            [number, BootloaderError, number]\n                        >(f.lastStatus.data, \"u32 u32 u32\")\n                        if (session_id != this.sessionId)\n                            err = \"invalid session_id\"\n                        else if (pageAddrR != pageAddr)\n                            err = \"invalid page address\"\n                        else if (page_error)\n                            err =\n                                \"err: \" +\n                                (BootloaderError[page_error] || page_error)\n                    } else {\n                        err = \"timeout\"\n                    }\n                    if (err) {\n                        f.lastStatus = null\n                        log(`retry ${f.device}: ${err}`)\n                    } else {\n                        f.pending = false\n                    }\n                }\n            }\n\n            if (this.numPending() == 0) {\n                log(\n                    `page ${\n                        pageAddr & 0xffffff\n                    } done, ${i}/${BL_RETRIES} retries`\n                )\n                return\n            }\n        }\n\n        throw new Error(\"too many retries\")\n    }\n\n    public async flashFirmwareBlob(\n        fw: FirmwareBlob,\n        progress?: (perc: number) => void\n    ) {\n        const waitCycles = 15\n        const total = fw.pages.length + waitCycles + 3\n        let idx = 0\n        const prog = () => {\n            if (progress) progress((100 * idx) / total)\n            idx++\n        }\n        try {\n            prog()\n            await this.startFlashAsync()\n            prog()\n            for (const page of fw.pages) {\n                await this.flashPage(page)\n                prog()\n            }\n        } finally {\n            try {\n                // even if something failed, try to reset everyone\n                await this.endFlashAsync()\n                prog()\n                // wait until we're out of bootloader mode; otherwise the subsequent scan will keep devices in BL mode\n                for (let i = 0; i < waitCycles; ++i) {\n                    await this.bus.delay(150)\n                    prog()\n                }\n            } finally {\n                // even if resetting failed, unregister event listeners\n                for (const d of this.classClients) {\n                    d.stop()\n                }\n            }\n        }\n    }\n}\n\nconst UF2_MAGIC_START0 = 0x0a324655\nconst UF2_MAGIC_START1 = 0x9e5d5157\nconst UF2_MAGIC_END = 0x0ab16f30\n\n/**\n * Parses a UF2 firmware binary into firmware blobs\n * @param uf2\n * @param store\n * @returns\n * @category Firmware\n */\nexport function parseUF2Firmware(\n    uf2: Uint8Array,\n    store: string\n): FirmwareBlob[] {\n    const blobs: FirmwareBlob[] = []\n    let currBlob: FirmwareBlob\n    for (let off = 0; off < uf2.length; off += 512) {\n        const header = uf2.slice(off, off + 32)\n        const [\n            magic0,\n            magic1,\n            flags,\n            trgaddr,\n            payloadSize,\n            blkNo,\n            numBlocks,\n            familyID,\n        ] = bufferToArray(header, NumberFormat.UInt32LE)\n        if (\n            magic0 != UF2_MAGIC_START0 ||\n            magic1 != UF2_MAGIC_START1 ||\n            getNumber(uf2, NumberFormat.UInt32LE, off + 512 - 4) !=\n                UF2_MAGIC_END\n        )\n            throw new Error(\"invalid UF2\")\n        if (blkNo == 0) {\n            flush()\n            currBlob = {\n                pages: [],\n                productIdentifier: familyID,\n                version: \"\",\n                pageSize: 1024,\n                name: \"FW \" + familyID.toString(16),\n                store,\n            }\n        }\n        if (flags & 0x8000)\n            parseExtTags(uf2.slice(off + 32 + payloadSize, off + 512))\n        const pageSize = currBlob.pageSize || 1024\n        let currPage = currBlob.pages[currBlob.pages.length - 1]\n        if (\n            !currPage ||\n            !(\n                currPage.targetAddress <= trgaddr &&\n                trgaddr < currPage.targetAddress + pageSize\n            )\n        ) {\n            currPage = {\n                targetAddress: trgaddr & ~(pageSize - 1),\n                data: new Uint8Array(pageSize),\n            }\n            currPage.data.fill(0xff)\n            currBlob.pages.push(currPage)\n        }\n        currPage.data.set(\n            uf2.slice(off + 32, off + 32 + payloadSize),\n            trgaddr - currPage.targetAddress\n        )\n    }\n    flush()\n    return blobs\n\n    function flush() {\n        if (currBlob) blobs.push(currBlob)\n    }\n\n    function parseExtTags(buf: Uint8Array) {\n        let sz = 0\n        for (let i = 0; i < buf.length; i += sz) {\n            sz = buf[i]\n            if (sz == 0) break\n            const desig = getNumber(buf, NumberFormat.UInt32LE, i) >>> 8\n            for (const key of Object.keys(uf2ExtTags)) {\n                const tg = uf2ExtTags[key]\n                if (desig == Math.abs(tg)) {\n                    let v: any\n                    if (tg < 0) {\n                        v = bufferToString(buf.slice(i + 4, i + sz))\n                    } else {\n                        v = getNumber(buf, NumberFormat.UInt32LE, i + 4)\n                    }\n                    const cbany = currBlob as any\n                    cbany[key] = v\n                    break\n                }\n            }\n            sz = (sz + 3) & ~3\n        }\n    }\n}\n\n/**\n * Firmware information\n * @internal\n */\nexport interface FirmwareInfo {\n    deviceId: string\n    version: string\n    name: string\n    productIdentifier: number\n    bootloaderProductIdentifier: number\n}\n\n/**\n * Parse a UF2 firmware file and extracts firmware blobs\n * @param blob\n * @param store\n * @returns\n * @category Firmware\n */\nexport async function parseFirmwareFile(\n    blob: Blob,\n    store?: string\n): Promise<FirmwareBlob[]> {\n    const data = await readBlobToUint8Array(blob)\n    const buf = new Uint8Array(data)\n    const uf2Blobs = parseUF2Firmware(buf, store)\n    return uf2Blobs\n}\n\nasync function createFlashers(bus: JDBus) {\n    const flashers: FlashClient[] = []\n    const numTries = 10\n    const tryDelay = 10\n\n    const handlePkt = (p: Packet) => {\n        // note that we may get this even if recovery==false due to someone else asking\n        // (eg when the user set the recovery mode toggle)\n        if (\n            p.serviceIndex == 1 &&\n            p.serviceCommand == CMD_ADVERTISEMENT_DATA &&\n            p.getNumber(NumberFormat.UInt32LE, 0) == SRV_BOOTLOADER\n        ) {\n            if (!flashers.find(f => f.device.deviceId == p.deviceIdentifier)) {\n                log(`new flasher`)\n                flashers.push(new FlashClient(bus, p))\n            }\n        }\n    }\n\n    try {\n        bus.on(PACKET_REPORT, handlePkt)\n        for (let i = 0; i < numTries; ++i) {\n            // also ask BL services if any\n            const bl_announce = Packet.onlyHeader(CMD_ADVERTISEMENT_DATA)\n            await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER)\n            await bus.delay(tryDelay)\n        }\n    } finally {\n        bus.off(PACKET_REPORT, handlePkt)\n    }\n    return flashers\n}\n\n/**\n * Indicates if a firmware blob is applicated to the device information\n * @param dev\n * @param blob\n * @returns\n * @category Firmware\n */\nexport function updateApplicable(dev: FirmwareInfo, blob: FirmwareBlob) {\n    return (\n        dev &&\n        blob &&\n        dev.bootloaderProductIdentifier == blob.productIdentifier &&\n        dev.version !== blob.version\n    )\n}\n\n/**\n * Flash firmware blob onto device\n * @param bus\n * @param blob\n * @param updateCandidates\n * @param ignoreFirmwareCheck\n * @param progress\n * @returns\n * @category Firmware\n */\nexport async function flashFirmwareBlob(\n    bus: JDBus,\n    blob: FirmwareBlob,\n    updateCandidates: FirmwareInfo[],\n    ignoreFirmwareCheck: boolean,\n    progress?: (perc: number) => void\n) {\n    if (!updateCandidates?.length) return\n    _startTime = Date.now()\n    log(`resetting ${updateCandidates.length} device(s)`)\n    for (const d of updateCandidates) {\n        const device = bus.device(d.deviceId)\n        log(`resetting ${device}`)\n        await device.sendCtrlCommand(ControlCmd.Reset)\n    }\n    const allFlashers = await createFlashers(bus)\n    const flashers = allFlashers.filter(\n        f => !!ignoreFirmwareCheck || f.dev_class == blob.productIdentifier\n    )\n    if (!flashers.length) {\n        log(`no devices to flash`)\n        return\n    }\n    if (flashers.length != updateCandidates.length)\n        console.error(\n            `expected ${updateCandidates.length} flashers, got ${flashers.length}`\n        )\n    flashers[0].classClients = flashers\n    log(`flashing ${blob.name}`)\n    await flashers[0].flashFirmwareBlob(blob, progress)\n}\n\n/**\n * This command can be sent every 50ms to keep devices in bootloader mode\n * @param bus\n * @category Firmware\n */\nexport async function sendStayInBootloaderCommand(bus: JDBus) {\n    const bl_announce = Packet.onlyHeader(BootloaderCmd.Info)\n    await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER)\n}\n","import JDServiceServer from \"./serviceserver\"\nimport { jdpack, jdunpack, PackedSimpleValue, PackedValues } from \"../pack\"\nimport Packet from \"../packet\"\nimport { bufferEq, isSet, pick } from \"../utils\"\nimport JDEventSource from \"../eventsource\"\nimport {\n    CHANGE,\n    CMD_GET_REG,\n    PACKET_DATA_NORMALIZE,\n    PACKET_INVALID_DATA,\n    REGISTER_PRE_GET,\n    REPORT_RECEIVE,\n} from \"../constants\"\nimport { isRegister } from \"../spec\"\n\nfunction defaultFieldPayload(\n    specification: jdspec.PacketMember\n): PackedSimpleValue {\n    let r: PackedSimpleValue = undefined\n    switch (specification.type) {\n        case \"bool\":\n            r = 0\n            break\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const min = pick(\n                specification.typicalMin,\n                specification.absoluteMin,\n                undefined\n            )\n            const max = pick(\n                specification.typicalMax,\n                specification.absoluteMax,\n                undefined\n            )\n            if (max !== undefined && min !== undefined) r = (max + min) / 2\n            else r = 0\n            break\n        }\n        case \"bytes\": {\n            r = new Uint8Array(0)\n            break\n        }\n        case \"string\":\n        case \"string0\": {\n            r = \"\"\n            break\n        }\n    }\n\n    if (/^(u0|i1)\\.\\d+$/.test(specification.type)) r = 0\n\n    return r\n}\n\nfunction defaultPayload<T extends PackedValues>(\n    specification: jdspec.PacketInfo\n): T {\n    const { fields } = specification\n    const rs = fields.map(defaultFieldPayload)\n    return rs as T\n}\n\n/**\n * A register \"server\" instance, used to assembly service servers.\n * @category Servers\n */\nexport class JDRegisterServer<\n    TValues extends PackedValues\n> extends JDEventSource {\n    data: Uint8Array\n    lastSetTime: number\n    private readonly resetData: Uint8Array\n    readonly specification: jdspec.PacketInfo\n    readOnly: boolean\n    errorRegister: JDRegisterServer<TValues>\n    skipBoundaryCheck = false\n    skipErrorInjection = false\n\n    constructor(\n        public readonly service: JDServiceServer,\n        public readonly identifier: number,\n        defaultValue?: TValues\n    ) {\n        super()\n        const serviceSpecification = this.service.specification\n        this.specification = serviceSpecification.packets.find(\n            pkt => isRegister(pkt) && pkt.identifier === this.identifier\n        )\n        let v: PackedValues = defaultValue\n        if (!v && !this.specification.optional)\n            v = defaultPayload(this.specification)\n        if (v !== undefined && !v.some(vi => vi === undefined)) {\n            this.data = jdpack(this.packFormat, v)\n        }\n\n        // keep a copy to handle reset\n        this.resetData = this.data?.slice(0)\n\n        // don't check boundaries if there are none\n        this.skipBoundaryCheck = !this.specification?.fields.some(\n            field => isSet(field.absoluteMin) || isSet(field.absoluteMax)\n        )\n    }\n\n    get packFormat() {\n        return this.specification.packFormat\n    }\n\n    values(): TValues {\n        return jdunpack(this.data, this.packFormat) as TValues\n    }\n\n    private normalize(values: TValues) {\n        // enforce boundaries from spec\n        if (!this.skipBoundaryCheck) {\n            this.specification?.fields.forEach((field, fieldi) => {\n                if (field.isSimpleType) {\n                    let value = values[fieldi] as number\n                    // clamp within bounds\n                    const min = field.absoluteMin\n                    if (min !== undefined) value = Math.max(min, value)\n                    const max = field.absoluteMax\n                    if (max !== undefined) value = Math.min(max, value)\n                    // update\n                    values[fieldi] = value\n                }\n            })\n        }\n\n        // enforce other boundaries\n        this.emit(PACKET_DATA_NORMALIZE, values)\n    }\n\n    private shouldNormalize() {\n        return (\n            !this.skipBoundaryCheck || this.listenerCount(PACKET_DATA_NORMALIZE)\n        )\n    }\n\n    setValues(values: TValues, skipChangeEvent?: boolean) {\n        if (this.readOnly) return\n\n        if (this.shouldNormalize()) this.normalize(values)\n        const d = jdpack(this.packFormat, values)\n        if (!bufferEq(this.data, d)) {\n            this.data = d\n            if (!skipChangeEvent) this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.data = this.resetData?.slice(0)\n    }\n\n    async sendGetAsync() {\n        this.emit(REGISTER_PRE_GET)\n\n        let d = this.data\n        if (!d) return\n\n        const error =\n            !this.skipErrorInjection && this.errorRegister?.values()[0]\n        if (error && !isNaN(error)) {\n            // apply error artifically\n            const vs = this.values() as number[]\n            for (let i = 0; i < vs.length; ++i) {\n                vs[i] += Math.random() * error\n            }\n            d = jdpack(this.packFormat, vs)\n        }\n        await this.service.sendPacketAsync(\n            Packet.from(this.identifier | CMD_GET_REG, d)\n        )\n    }\n\n    handlePacket(pkt: Packet): boolean {\n        if (this.identifier !== pkt.registerIdentifier) return false\n\n        if (pkt.isRegisterGet) {\n            this.sendGetAsync()\n        } else if (this.identifier >> 8 !== 0x1) {\n            // set, non-const\n            let changed = false\n            let d = pkt.data\n\n            // unpack and check boundaries\n            if (this.shouldNormalize()) {\n                try {\n                    // unpack, apply boundaries, repack\n                    const values = jdunpack<TValues>(d, this.packFormat)\n                    this.normalize(values)\n                    d = jdpack<TValues>(this.packFormat, values)\n                } catch (e) {\n                    // invalid format, refuse\n                    this.emit(PACKET_INVALID_DATA, pkt)\n                }\n            }\n\n            // test if anything changed\n            if (!bufferEq(this.data, d)) {\n                this.data = d\n                changed = true\n            }\n            this.lastSetTime = this.service.timestamp\n            this.emit(REPORT_RECEIVE)\n            if (changed) this.emit(CHANGE)\n        }\n        return true\n    }\n}\nexport default JDRegisterServer\n","import {\n    BaseEvent,\n    SystemCmd,\n    SystemEvent,\n    SystemReg,\n    SystemStatusCodes,\n} from \"../../../jacdac-spec/dist/specconstants\"\nimport {\n    CHANGE,\n    DEVICE_CHANGE,\n    PACKET_RECEIVE,\n    PACKET_SEND,\n    REPORT_UPDATE,\n} from \"../constants\"\nimport JDServerServiceProvider from \"./serverserviceprovider\"\nimport JDEventSource from \"../eventsource\"\nimport Packet from \"../packet\"\nimport JDRegisterServer from \"./registerserver\"\nimport { isRegister, serviceSpecificationFromClassIdentifier } from \"../spec\"\nimport { PackedValues } from \"../pack\"\nimport JDService from \"../service\"\n\nconst CALIBRATION_DELAY = 5000\n\n/**\n * Server instiation options\n * @category Servers\n */\nexport interface JDServerOptions {\n    /**\n     * Service instance name\n     */\n    instanceName?: string\n    /**\n     * This server instance is a twin of a physical device and should not emit any packet\n     */\n    twin?: JDService\n    /**\n     * Initial value for the ``value`` register\n     */\n    valueValues?: PackedValues\n    /**\n     * Initial value for the ``intensity`` register\n     */\n    intensityValues?: PackedValues\n    /**\n     * Emit active/inactive events based on the intensity register\n     */\n    isActive?: (intensity: PackedValues) => boolean\n    /**\n     * Initial value for the ``variant`` register\n     */\n    variant?: number\n    /**\n     * A map of custom register initial values\n     */\n    registerValues?: {\n        code: number\n        values: PackedValues\n    }[]\n}\n\n/**\n * Base class for service server implementations\n * @category Servers\n */\nexport class JDServiceServer extends JDEventSource {\n    public serviceIndex = -1 // set by device\n    private _device: JDServerServiceProvider\n    public readonly specification: jdspec.ServiceSpec\n    private readonly _registers: JDRegisterServer<PackedValues>[] = []\n    private readonly commands: {\n        [identifier: number]: (pkt: Packet) => void\n    } = {}\n    readonly statusCode: JDRegisterServer<[SystemStatusCodes, number]>\n    readonly instanceName: JDRegisterServer<[string]>\n    private _twin: JDService\n    private _twinCleanup: (() => void)[]\n    private _locked = false\n\n    constructor(\n        public readonly serviceClass: number,\n        options?: JDServerOptions\n    ) {\n        super()\n        const {\n            instanceName,\n            variant,\n            valueValues,\n            intensityValues,\n            registerValues,\n            isActive,\n        } = options || {}\n\n        this.specification = serviceSpecificationFromClassIdentifier(\n            this.serviceClass\n        )\n\n        this.statusCode = this.addRegister<[SystemStatusCodes, number]>(\n            SystemReg.StatusCode,\n            [SystemStatusCodes.Ready, 0]\n        )\n        if (valueValues) this.addRegister(SystemReg.Value, valueValues)\n        if (intensityValues) {\n            const intensity = this.addRegister(\n                SystemReg.Intensity,\n                intensityValues\n            )\n            if (isActive)\n                intensity.on(CHANGE, () => {\n                    const ev = isActive(intensity.values())\n                    if (ev !== undefined)\n                        this.sendEvent(\n                            isActive(intensity.values())\n                                ? SystemEvent.Active\n                                : SystemEvent.Inactive\n                        )\n                })\n        }\n        if (variant) this.addRegister<[number]>(SystemReg.Variant, [variant])\n        this.instanceName = this.addRegister<[string]>(SystemReg.InstanceName, [\n            instanceName || \"\",\n        ])\n\n        // any extra\n        registerValues?.forEach(({ code, values }) =>\n            this.addRegister<PackedValues>(code, values)\n        )\n\n        // emit event when status code changes\n        this.statusCode.on(CHANGE, () =>\n            this.sendEvent(BaseEvent.StatusCodeChanged, this.statusCode.data)\n        )\n\n        // if the device has a calibrate command, regiser handler\n        // and put device in calibrationneeded state\n        if (\n            this.specification.packets.find(\n                pkt =>\n                    pkt.kind === \"command\" &&\n                    pkt.identifier === SystemCmd.Calibrate\n            )\n        ) {\n            this.addCommand(\n                SystemCmd.Calibrate,\n                this.handleCalibrate.bind(this)\n            )\n            this.statusCode.setValues(\n                [SystemStatusCodes.CalibrationNeeded, 0],\n                true\n            )\n        }\n\n        this.handleTwinPacket = this.handleTwinPacket.bind(this)\n    }\n\n    get device() {\n        return this._device\n    }\n\n    set device(value: JDServerServiceProvider) {\n        if (this._device !== value) {\n            this._device = value\n            this.emit(DEVICE_CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    get twin() {\n        return this._twin\n    }\n\n    set twin(service: JDService) {\n        if (service === this._twin) return\n\n        if (this._twin) {\n            this._twin.off(PACKET_RECEIVE, this.handleTwinPacket)\n            this._twin.off(PACKET_SEND, this.handleTwinPacket)\n            this._twinCleanup.forEach(tw => tw())\n            // unsubscribe\n        }\n        this._twin = service\n        this._twinCleanup = service ? [] : undefined\n        if (this._twin) {\n            this._twin.on(PACKET_RECEIVE, this.handleTwinPacket)\n            this._twin.on(PACKET_SEND, this.handleTwinPacket)\n            this._twin.registers().forEach(twinReg => {\n                const reg = this.register(twinReg.code)\n                if (reg) {\n                    reg?.setValues(twinReg.unpackedValue)\n                    this._twinCleanup.push(\n                        twinReg.subscribe(REPORT_UPDATE, () =>\n                            reg.setValues(twinReg.unpackedValue)\n                        )\n                    )\n                }\n            })\n        }\n\n        this.emit(CHANGE)\n    }\n\n    private handleTwinPacket(pkt: Packet) {\n        this.handlePacket(pkt)\n    }\n\n    get registers() {\n        return this._registers.slice(0)\n    }\n\n    get timestamp() {\n        const bus = this.device?.bus || this._twin?.device?.bus\n        return bus?.timestamp\n    }\n\n    register<TValues extends PackedValues = PackedValues>(\n        code: number\n    ): JDRegisterServer<TValues> {\n        return this._registers.find(\n            reg => reg.identifier === code\n        ) as JDRegisterServer<TValues>\n    }\n\n    protected addExistingRegister<TValues extends PackedValues = PackedValues>(\n        reg: JDRegisterServer<TValues>\n    ) {\n        this._registers.push(reg)\n        return reg\n    }\n\n    protected addRegister<TValues extends PackedValues = PackedValues>(\n        identifier: number,\n        defaultValue?: TValues\n    ): JDRegisterServer<TValues> {\n        let reg = this._registers.find(\n            r => r.identifier === identifier\n        ) as JDRegisterServer<TValues>\n        if (!reg && !this._locked) {\n            // make sure this register is supported\n            if (\n                !this.specification.packets.find(\n                    pkt => isRegister(pkt) && pkt.identifier === identifier\n                )\n            )\n                return undefined\n            reg = new JDRegisterServer<TValues>(this, identifier, defaultValue)\n            this._registers.push(reg)\n        }\n        return reg\n    }\n\n    reset() {\n        this.registers.forEach(reg => reg.reset())\n    }\n\n    /**\n     * Locks the current set of registers\n     */\n    public lock() {\n        this._locked = true\n    }\n\n    protected addCommand(identifier: number, handler: (pkt: Packet) => void) {\n        if (this._locked) console.error(`adding command to locked service`)\n        this.commands[identifier] = handler\n    }\n\n    async handlePacket(pkt: Packet) {\n        if (pkt.isRegisterGet || pkt.isRegisterSet) {\n            // find register to handle\n            const rid = pkt.registerIdentifier\n            let reg = this._registers.find(r => r.identifier === rid)\n            if (!reg) {\n                // try adding\n                reg = this.addRegister(rid)\n            }\n            reg?.handlePacket(pkt)\n        } else if (pkt.isCommand) {\n            const cmd = this.commands[pkt.serviceCommand]\n            if (cmd) cmd(pkt)\n            else if (cmd === undefined) console.log(`ignored command`, { pkt })\n        }\n        // ignored?\n    }\n\n    async sendPacketAsync(pkt: Packet) {\n        if (this.twin) return\n\n        pkt.serviceIndex = this.serviceIndex\n        await this.device.sendPacketAsync(pkt)\n    }\n\n    async sendEvent(eventCode: number, data?: Uint8Array) {\n        if (this.twin) return\n\n        const { device } = this\n        const { bus } = device\n        if (!bus) return\n\n        const now = bus.timestamp\n        const cmd = device.createEventCmd(eventCode)\n        const pkt = Packet.from(cmd, data || new Uint8Array(0))\n        await this.sendPacketAsync(pkt)\n        device.delayedSend(pkt, now + 20)\n        device.delayedSend(pkt, now + 100)\n    }\n\n    private async handleCalibrate() {\n        const [status] = this.statusCode.values()\n        if (status !== SystemStatusCodes.Ready) return\n        this.calibrate()\n    }\n\n    async calibrate() {\n        // notify that calibration started\n        this.statusCode.setValues([SystemStatusCodes.Calibrating, 0])\n        // wait 5 seconds\n        await this.device.bus.delay(CALIBRATION_DELAY)\n        // finish calibraion\n        this.statusCode.setValues([SystemStatusCodes.Ready, 0])\n    }\n}\nexport default JDServiceServer\n","import { SystemReg } from \"../../jacdac-spec/dist/specconstants\"\nimport {\n    CHANGE,\n    READING_SENT,\n    REFRESH,\n    SensorReg,\n    STREAMING_DEFAULT_INTERVAL,\n} from \"../jdom/constants\"\nimport { PackedValues } from \"../jdom/pack\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * Creation options for sensor servers\n * @category Servers\n * @internal\n */\nexport interface SensorServiceOptions<TReading extends PackedValues>\n    extends JDServerOptions {\n    readingValues?: TReading\n    readingError?: TReading\n    streamingInterval?: number\n    preferredStreamingInterval?: number\n}\n\nexport default class SensorServer<\n    TReading extends PackedValues\n> extends JDServiceServer {\n    readonly reading: JDRegisterServer<TReading>\n    readonly readingError: JDRegisterServer<TReading>\n    readonly streamingSamples: JDRegisterServer<[number]>\n    readonly streamingInterval: JDRegisterServer<[number]>\n    readonly preferredStreamingInterval: JDRegisterServer<[number]>\n\n    private lastStream = 0\n    private lastErrorReadingChanged = false\n\n    constructor(\n        public readonly serviceClass: number,\n        options?: SensorServiceOptions<TReading>\n    ) {\n        super(serviceClass, options)\n        const {\n            readingValues,\n            streamingInterval,\n            preferredStreamingInterval,\n            readingError,\n        } = options || {}\n        this.reading = this.addRegister<TReading>(\n            SystemReg.Reading,\n            readingValues\n        )\n        this.streamingSamples = this.addRegister<[number]>(\n            SensorReg.StreamingSamples\n        )\n        this.streamingInterval = this.addRegister<[number]>(\n            SensorReg.StreamingInterval,\n            [\n                streamingInterval ||\n                    preferredStreamingInterval ||\n                    this.reading.specification.preferredInterval ||\n                    STREAMING_DEFAULT_INTERVAL,\n            ]\n        )\n        if (preferredStreamingInterval !== undefined)\n            this.preferredStreamingInterval = this.addRegister<[number]>(\n                SensorReg.StreamingPreferredInterval,\n                [preferredStreamingInterval]\n            )\n        if (readingError !== undefined) {\n            this.readingError = this.addRegister<TReading>(\n                SystemReg.ReadingError,\n                readingError\n            )\n            this.reading.errorRegister = this.readingError\n            this.readingError.on(\n                CHANGE,\n                () => (this.lastErrorReadingChanged = true)\n            )\n        }\n\n        this.on(REFRESH, this.refreshRegisters.bind(this))\n    }\n\n    private refreshRegisters() {\n        const [samples] = this.streamingSamples.values()\n        if (samples <= 0 || !this.reading.data) return\n        // is it time to stream?\n        let interval = this.streamingInterval?.values()?.[0]\n        if (interval === undefined)\n            interval = this.preferredStreamingInterval?.values()?.[0]\n        if (interval === undefined)\n            interval = this.reading.specification.preferredInterval\n        if (interval === undefined) interval = STREAMING_DEFAULT_INTERVAL\n\n        const now = this.device.bus.timestamp\n        if (now - this.lastStream > interval) {\n            // let's stream a value!\n            this.lastStream = now\n            this.streamingSamples.setValues([samples - 1])\n            this.reading.sendGetAsync()\n            this.emit(READING_SENT)\n\n            // if the error changed, send value as well.\n            if (this.lastErrorReadingChanged) {\n                this.readingError?.sendGetAsync()\n                this.lastErrorReadingChanged = false\n            }\n        }\n    }\n}\n","import SensorServer from \"./sensorserver\"\nimport {\n    RealTimeClockCmd,\n    RealTimeClockReg,\n    RealTimeClockVariant,\n    REFRESH,\n    SRV_REAL_TIME_CLOCK,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDBus from \"../jdom/bus\"\nimport Packet from \"../jdom/packet\"\n\n/**\n * @internal\n */\nexport type RealTimeClockReadingType = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n]\n\n/**\n * @internal\n */\nexport function dateToClock(n: Date): RealTimeClockReadingType {\n    const year = n.getFullYear()\n    const month = n.getMonth() + 1\n    const date = n.getDate()\n    const day = n.getDay()\n    const hour = n.getHours()\n    const min = n.getMinutes()\n    const sec = n.getSeconds()\n\n    return [year, month, date, day, hour, min, sec]\n}\n\nexport default class RealTimeClockServer extends SensorServer<RealTimeClockReadingType> {\n    readonly error: JDRegisterServer<[number]>\n    readonly precision: JDRegisterServer<[number]>\n    private lastSecond = 0\n\n    constructor() {\n        super(SRV_REAL_TIME_CLOCK, {\n            readingValues: dateToClock(new Date()),\n            variant: RealTimeClockVariant.Computer,\n            streamingInterval: 1000,\n        })\n\n        this.error = this.addRegister<[number]>(RealTimeClockReg.Error, [0])\n        this.precision = this.addRegister<[number]>(\n            RealTimeClockReg.Precision,\n            [0]\n        )\n\n        this.addCommand(RealTimeClockCmd.SetTime, this.handleSetTime.bind(this))\n        this.on(REFRESH, this.refreshTime.bind(this))\n    }\n\n    static async syncTime(bus: JDBus) {\n        const values = dateToClock(new Date())\n        const pkt = Packet.jdpacked<RealTimeClockReadingType>(\n            RealTimeClockCmd.SetTime,\n            \"u16 u8 u8 u8 u8 u8 u8\",\n            values\n        )\n        await pkt.sendAsMultiCommandAsync(bus, SRV_REAL_TIME_CLOCK)\n    }\n\n    private handleSetTime(pkt: Packet) {\n        console.log(`set time`, { pkt })\n    }\n\n    private refreshTime() {\n        const d = new Date()\n        const s = d.getSeconds()\n        if (s !== this.lastSecond) {\n            const r = dateToClock(d)\n            this.reading.setValues(r)\n            this.lastSecond = s\n        }\n    }\n}\n","import JDBus from \"../bus\"\nimport {\n    CHANGE,\n    CONNECT,\n    CONNECTING,\n    CONNECTION_STATE,\n    DISCONNECT,\n    DISCONNECTING,\n    ERROR,\n    LOST,\n    PACKET_SEND_DISCONNECT,\n    SELF_ANNOUNCE,\n    TRANSPORT_CONNECT_RETRY_DELAY,\n    TRANSPORT_PULSE_TIMEOUT,\n} from \"../constants\"\nimport JDEventSource from \"../eventsource\"\nimport { Observable } from \"../observable\"\nimport Packet from \"../packet\"\nimport { assert, delay } from \"../utils\"\n\n/**\n * Connection states for transports\n * @category Transport\n */\nexport enum ConnectionState {\n    Connected = \"connected\",\n    Connecting = \"connecting\",\n    Disconnecting = \"disconnecting\",\n    Disconnected = \"disconnected\",\n}\n\n/**\n * General options for the transports\n * @category Transport\n */\nexport interface TransportOptions {\n    // if no packets is received within the pulse interval, disconnect/reconnect\n    checkPulse?: boolean\n    connectObservable?: Observable<void>\n    disconnectObservable?: Observable<void>\n}\n\n/**\n * A transport marshalls Jacdac packets between a physical device on the TypeScript bus.\n * @category Transport\n */\nexport abstract class Transport extends JDEventSource {\n    private _bus: JDBus\n    private _checkPulse: boolean\n    private _connectionTime: number\n    private _lastReceivedTime: number\n    protected disposed = false\n    private _cleanups: (() => void)[]\n\n    constructor(readonly type: string, options?: TransportOptions) {\n        super()\n        this._checkPulse = !!options?.checkPulse\n        this._cleanups = [\n            options?.connectObservable?.subscribe({\n                next: async () => {\n                    if (this.bus?.disconnected) {\n                        await delay(TRANSPORT_CONNECT_RETRY_DELAY)\n                        if (this.bus?.disconnected) {\n                            if (\n                                typeof document !== \"undefined\" &&\n                                document.visibilityState === \"visible\"\n                            )\n                                this.connect(true)\n                        }\n                    }\n                },\n            })?.unsubscribe,\n            options?.disconnectObservable?.subscribe({\n                next: () => {\n                    this.disconnect()\n                },\n            })?.unsubscribe,\n        ].filter(c => !!c)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(bus: JDBus) {\n        assert(!this._bus && !!bus)\n        this._bus = bus\n        if (this._checkPulse) {\n            this._bus.on(SELF_ANNOUNCE, this.checkPulse.bind(this))\n        }\n    }\n\n    private _connectionState = ConnectionState.Disconnected\n    private _connectPromise: Promise<void>\n    private _disconnectPromise: Promise<void>\n\n    /**\n     * Gets the bus connection state.\n     */\n    get connectionState(): ConnectionState {\n        return this._connectionState\n    }\n\n    private setConnectionState(state: ConnectionState) {\n        if (this._connectionState !== state) {\n            //console.debug(`${this._connectionState} -> ${state}`)\n            this._connectionState = state\n            this._connectionTime =\n                state === ConnectionState.Connected\n                    ? this.bus.timestamp\n                    : undefined\n            this._lastReceivedTime = undefined\n            this.emit(CONNECTION_STATE, this._connectionState)\n            this.bus.emit(CONNECTION_STATE, this)\n            switch (this._connectionState) {\n                case ConnectionState.Connected:\n                    this.emit(CONNECT)\n                    break\n                case ConnectionState.Connecting:\n                    this.emit(CONNECTING)\n                    break\n                case ConnectionState.Disconnecting:\n                    this.emit(DISCONNECTING)\n                    break\n                case ConnectionState.Disconnected:\n                    this.emit(DISCONNECT)\n                    break\n            }\n            this.emit(CHANGE)\n            this.bus.emit(CHANGE)\n        }\n    }\n\n    get connecting() {\n        return this.connectionState == ConnectionState.Connecting\n    }\n\n    get disconnecting() {\n        return this.connectionState == ConnectionState.Disconnecting\n    }\n\n    get connected() {\n        return this._connectionState == ConnectionState.Connected\n    }\n\n    get disconnected() {\n        return this._connectionState == ConnectionState.Disconnected\n    }\n\n    protected abstract transportSendPacketAsync(p: Packet): Promise<void>\n    protected abstract transportConnectAsync(\n        background?: boolean\n    ): Promise<void>\n    protected abstract transportDisconnectAsync(\n        background?: boolean\n    ): Promise<void>\n\n    private async checkPulse() {\n        assert(this._checkPulse)\n        if (!this.connected) return // ignore while connected\n        if (this.bus.safeBoot) return // don't mess with flashing bootloaders\n        const devices = this.bus.devices()\n        if (devices.some(dev => dev.flashing))\n            // don't mess with flashing\n            return\n\n        // detect if the proxy device is lost\n        const t =\n            this.bus.timestamp -\n            (this._lastReceivedTime || this._connectionTime)\n        if (t > TRANSPORT_PULSE_TIMEOUT) {\n            this.emit(LOST)\n            console.debug(`${this.type}: lost connection with device`)\n            if (this._lastReceivedTime !== undefined) await this.reconnect()\n            else await this.disconnect(true)\n        }\n    }\n\n    async sendPacketAsync(p: Packet) {\n        if (!this.connected) {\n            this.emit(PACKET_SEND_DISCONNECT, p)\n        } else {\n            await this.transportSendPacketAsync(p)\n        }\n    }\n\n    connect(background?: boolean): Promise<void> {\n        console.debug(\n            `${this.type}: connect ${background ? `(background)` : \"\"}`\n        )\n        if (this.disposed)\n            throw new Error(\"attempted to connect to a disposed transport\")\n        // already connected\n        if (this.connectionState == ConnectionState.Connected) {\n            console.debug(`${this.type}: already connected`)\n            return Promise.resolve()\n        }\n\n        // connecting\n        if (!this._connectPromise) {\n            // already disconnecting, retry when disconnected\n            if (this._disconnectPromise) {\n                console.debug(\n                    `${this.type}: queuing connect after disconnecting`\n                )\n                const p = this._disconnectPromise\n                this._disconnectPromise = undefined\n                this._connectPromise = p.then(() => this.connect())\n            } else {\n                // starting a fresh connection\n                console.debug(`${this.type}: connecting`)\n                this._connectPromise = Promise.resolve()\n                this.setConnectionState(ConnectionState.Connecting)\n                this._connectPromise = this._connectPromise.then(() =>\n                    this.transportConnectAsync(background)\n                )\n                const p = (this._connectPromise = this._connectPromise\n                    .then(() => {\n                        if (p == this._connectPromise) {\n                            this._connectPromise = undefined\n                            this.setConnectionState(ConnectionState.Connected)\n                        } else {\n                            console.debug(\n                                `${this.type}: connection aborted in flight`,\n                                {\n                                    state: this._connectionState,\n                                    old: this._connectPromise,\n                                    new: p,\n                                }\n                            )\n                            // already reported\n                        }\n                    })\n                    .catch(e => {\n                        if (p == this._connectPromise) {\n                            this._connectPromise = undefined\n                            this.setConnectionState(\n                                ConnectionState.Disconnected\n                            )\n                            if (!background) this.errorHandler(CONNECT, e)\n                            else\n                                console.debug(\n                                    `${this.type}: background connect failed`\n                                )\n                        } else {\n                            console.debug(\n                                `${this.type}: connection error aborted in flight`\n                            )\n                        }\n                    }))\n            }\n        } else {\n            console.debug(`${this.type}: connect with existing promise`)\n        }\n        return this._connectPromise\n    }\n\n    disconnect(background?: boolean): Promise<void> {\n        // already disconnected\n        if (this.connectionState == ConnectionState.Disconnected)\n            return Promise.resolve()\n\n        if (!this._disconnectPromise) {\n            // connection in progress, wait and disconnect when done\n            if (this._connectPromise) {\n                console.debug(\n                    `${this.type}: cancelling connection and disconnect`\n                )\n                this._connectPromise = undefined\n            }\n            console.debug(`${this.type}: disconnecting`)\n            this._disconnectPromise = Promise.resolve()\n            this.setConnectionState(ConnectionState.Disconnecting)\n            this._disconnectPromise = this._disconnectPromise.then(() =>\n                this.transportDisconnectAsync(background)\n            )\n            this._disconnectPromise = this._disconnectPromise\n                .catch(e => {\n                    this._disconnectPromise = undefined\n                    this.errorHandler(DISCONNECT, e)\n                })\n                .finally(() => {\n                    this._disconnectPromise = undefined\n                    this.setConnectionState(ConnectionState.Disconnected)\n                })\n        } else {\n            console.debug(`${this.type}: disconnect with existing promise`)\n        }\n        return this._disconnectPromise\n    }\n\n    async reconnect() {\n        console.debug(`${this.type}: reconnect`)\n        await this.disconnect(true)\n        await this.connect(true)\n    }\n\n    protected handlePacket(payload: Uint8Array) {\n        const { timestamp } = this.bus\n        this._lastReceivedTime = timestamp\n        const pkt = Packet.fromBinary(payload, timestamp)\n        pkt.sender = this.type\n        this.bus.processPacket(pkt)\n    }\n\n    protected handleFrame(payload: Uint8Array) {\n        const { timestamp } = this.bus\n        this._lastReceivedTime = timestamp\n        const pkts = Packet.fromFrame(payload, timestamp)\n        for (const pkt of pkts) {\n            pkt.sender = this.type\n            this.bus.processPacket(pkt)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected errorHandler(context: string, exception: any) {\n        this.emit(ERROR, { context, exception })\n        this.bus.emit(ERROR, { transport: this, context, exception })\n        this.emit(CHANGE)\n\n        // when a microbit flash is initiated via file download, the device will\n        // stop responding. we should not try to reconnect while this is the case\n        this.disconnect(true)\n    }\n\n    dispose() {\n        this.disposed = true\n        this._cleanups.forEach(c => c())\n        this._cleanups = []\n    }\n}\n\nexport default Transport\n","import JDBus from \"./bus\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND, SELF_ANNOUNCE } from \"./constants\"\nimport JDEventSource from \"./eventsource\"\nimport Packet from \"./packet\"\n\nexport interface BusStats {\n    packets: number\n    announce: number\n    acks: number\n    bytes: number\n\n    devices: number\n    simulators: number\n    transport?: string\n}\n\ninterface Stats {\n    packets: number\n    announce: number\n    acks: number\n    bytes: number\n}\n\nexport class BusStatsMonitor extends JDEventSource {\n    private readonly _prev: Stats[] = Array(4)\n        .fill(0)\n        .map(() => ({\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }))\n    private _previ = 0\n    private _temp: Stats = {\n        packets: 0,\n        announce: 0,\n        acks: 0,\n        bytes: 0,\n    }\n\n    /**\n     * @internal\n     */\n    constructor(private readonly bus: JDBus) {\n        super()\n        bus.on(PACKET_SEND, this.handlePacketSend.bind(this))\n        bus.on(PACKET_PROCESS, this.handlePacketProcess.bind(this))\n        bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this))\n    }\n\n    /**\n     * Computes the current packet statistics of the bus\n     */\n    get current(): BusStats {\n        const r: Stats = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }\n        const n = this._prev.length\n        for (let i = 0; i < this._prev.length; ++i) {\n            const p = this._prev[i]\n            r.packets += p.packets\n            r.announce += p.announce\n            r.acks += p.acks\n            r.bytes += p.bytes\n        }\n        // announce every 500ms\n        const n2 = n / 2\n        r.packets /= n2\n        r.announce /= n2\n        r.acks /= n2\n        r.bytes /= n2\n        return {\n            devices: this.bus.devices({ ignoreInfrastructure: true }).length,\n            simulators: this.bus.serviceProviders().length,\n            transport: this.bus.transports.find(\n                transport => transport.connected\n            )?.type,\n            ...r,\n        }\n    }\n\n    private accumulate(pkt: Packet) {\n        this._temp.packets++\n        this._temp.bytes += (pkt.header?.length || 0) + (pkt.data?.length || 0)\n        if (pkt.isAnnounce) this._temp.announce++\n        if (pkt.isCRCAck) this._temp.acks++\n    }\n\n    private handleSelfAnnounce() {\n        const changed =\n            JSON.stringify(this._prev) !== JSON.stringify(this._temp)\n        this._prev[this._previ] = this._temp\n        this._previ = (this._previ + 1) % this._prev.length\n        this._temp = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }\n        if (changed) this.emit(CHANGE)\n    }\n\n    private handlePacketSend(pkt: Packet) {\n        this.accumulate(pkt)\n    }\n\n    private handlePacketProcess(pkt: Packet) {\n        this.accumulate(pkt)\n    }\n}\n","import {\n    CHANGE,\n    ControlAnnounceFlags,\n    ControlCmd,\n    ControlReg,\n    IDENTIFY,\n    SRV_CONTROL,\n} from \"../constants\"\nimport { jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport JDRegisterServer from \"./registerserver\"\nimport JDServiceServer from \"./serviceserver\"\n\n/**\n * A control service server\n * @category Servers\n */\nexport class ControlServer extends JDServiceServer {\n    readonly deviceDescription: JDRegisterServer<[string]>\n    readonly mcuTemperature: JDRegisterServer<[number]>\n    readonly resetIn: JDRegisterServer<[number]>\n    readonly uptime: JDRegisterServer<[number]>\n    private startTime: number\n\n    statusLightColor: number = undefined\n\n    constructor(options?: { resetIn?: boolean }) {\n        super(SRV_CONTROL)\n        const { resetIn } = options || {}\n        this.startTime = Date.now()\n        this.deviceDescription = this.addRegister<[string]>(\n            ControlReg.DeviceDescription\n        )\n        this.mcuTemperature = this.addRegister<[number]>(\n            ControlReg.McuTemperature,\n            [25]\n        )\n        this.uptime = this.addRegister<[number]>(ControlReg.Uptime)\n        if (resetIn)\n            this.resetIn = this.addRegister<[number]>(ControlReg.ResetIn, [0])\n\n        this.addCommand(ControlCmd.Services, this.announce.bind(this))\n        this.addCommand(ControlCmd.Identify, this.identify.bind(this))\n        this.addCommand(ControlCmd.Reset, this.handleReset.bind(this))\n        this.addCommand(ControlCmd.Noop, null)\n        this.addCommand(\n            ControlCmd.SetStatusLight,\n            this.handleSetStatusLight.bind(this)\n        )\n    }\n\n    async announce() {\n        // restartCounter, flags, packetCount, serviceClass\n        const pkt = Packet.jdpacked<[ControlAnnounceFlags, number, number[]]>(\n            ControlCmd.Services,\n            \"u16 u8 x[1] u32[]\",\n            [\n                this.device.restartCounter |\n                    ControlAnnounceFlags.StatusLightRgbNoFade |\n                    ControlAnnounceFlags.SupportsACK,\n                this.device.packetCount + 1,\n                this.device\n                    .services()\n                    .slice(1)\n                    .map(srv => srv.serviceClass),\n            ]\n        )\n\n        await this.sendPacketAsync(pkt)\n\n        // micros\n        this.uptime.setValues([(Date.now() - this.startTime) * 100], true)\n\n        // check if we need to reset\n        if (this.resetIn) {\n            const [resetIn] = this.resetIn.values()\n            if (resetIn) {\n                const resetTimestamp = resetIn / 1000 + this.resetIn.lastSetTime\n                if (resetTimestamp < this.device.bus.timestamp) {\n                    // reset in expired\n                    console.debug(`${this} reset in expired`, {\n                        resetIn,\n                        lastSet: this.resetIn.lastSetTime,\n                        resetTimestamp,\n                    })\n                    this.device.reset()\n                }\n            }\n        }\n    }\n\n    async identify() {\n        this.emit(IDENTIFY)\n    }\n\n    private handleReset() {\n        this.startTime = Date.now()\n        this.device.reset()\n    }\n\n    private handleSetStatusLight(pkt: Packet) {\n        const [toRed, toGreen, toBlue] = jdunpack<\n            [number, number, number, number]\n        >(pkt.data, \"u8 u8 u8 u8\")\n        this.statusLightColor = (toRed << 16) | (toGreen << 8) | toBlue\n        this.emit(CHANGE)\n    }\n}\n\nexport default ControlServer\n","import JDBus from \"../bus\"\nimport { PACKET_PROCESS, PACKET_SEND, SELF_ANNOUNCE } from \"../constants\"\nimport JDEventSource from \"../eventsource\"\nimport Packet from \"../packet\"\nimport { shortDeviceId } from \"../pretty\"\nimport { randomDeviceId } from \"../random\"\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nexport abstract class JDServiceProvider extends JDEventSource {\n    private _bus: JDBus\n    public readonly template: string\n    public readonly deviceId: string\n    public readonly shortId: string\n\n    constructor(template: string, deviceId?: string) {\n        super()\n        this.template = template\n        this.deviceId = deviceId\n        if (!this.deviceId) this.deviceId = randomDeviceId()\n        this.shortId = shortDeviceId(this.deviceId)\n        this.handleSelfAnnounce = this.handleSelfAnnounce.bind(this)\n        this.handlePacket = this.handlePacket.bind(this)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(value: JDBus) {\n        if (value !== this._bus) {\n            this.stop()\n            this._bus = value\n            if (this._bus) this.start()\n        }\n    }\n\n    protected start() {\n        if (this._bus) {\n            this._bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce)\n            this._bus.on([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n        }\n    }\n\n    protected stop() {\n        if (this._bus) {\n            this._bus.off(SELF_ANNOUNCE, this.handleSelfAnnounce)\n            this._bus.off([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n            this._bus = undefined\n        }\n    }\n\n    protected handleSelfAnnounce(): void {}\n    protected abstract handlePacket(pkt: Packet): void\n}\nexport default JDServiceProvider\n","import JDServiceServer from \"./serviceserver\"\nimport Packet from \"../packet\"\nimport { isBufferEmpty } from \"../utils\"\nimport ControlServer from \"./controlserver\"\nimport {\n    CHANGE,\n    CMD_EVENT_COUNTER_MASK,\n    CMD_EVENT_COUNTER_POS,\n    CMD_EVENT_MASK,\n    ERROR,\n    JD_SERVICE_INDEX_CRC_ACK,\n    MAX_SERVICES_LENGTH,\n    REFRESH,\n    RESET,\n} from \"../constants\"\nimport JDServiceProvider from \"./serviceprovider\"\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nexport class JDServerServiceProvider extends JDServiceProvider {\n    private _services: JDServiceServer[]\n    public readonly controlService: ControlServer\n    private _restartCounter = 0\n    private _packetCount = 0\n    private _eventCounter: number = undefined\n    private _delayedPackets: {\n        timestamp: number\n        pkt: Packet\n    }[]\n\n    constructor(\n        template: string,\n        services: JDServiceServer[],\n        options?: {\n            deviceId?: string\n            resetIn?: boolean\n        }\n    ) {\n        super(template, options?.deviceId)\n        this.controlService = new ControlServer(options)\n        this._services = []\n        this.updateServices(services)\n\n        this.on(REFRESH, this.refreshRegisters.bind(this))\n    }\n\n    updateServices(services: JDServiceServer[]) {\n        // clear previous services\n        this._services?.slice(1).forEach(srv => (srv.device = undefined))\n        // store new services\n        this._services = [this.controlService, ...services]\n        if (this._services.length >= MAX_SERVICES_LENGTH) {\n            this.emit(\n                ERROR,\n                `too many services (${this._services.length}) > ${MAX_SERVICES_LENGTH}`\n            )\n            console.warn(`jacdac: dropping services to ${MAX_SERVICES_LENGTH}`)\n            this._services = this._services.slice(0, MAX_SERVICES_LENGTH)\n        }\n        this._services.forEach((srv, i) => {\n            srv.device = this\n            srv.serviceIndex = i\n        })\n        this.emit(CHANGE)\n    }\n\n    removeService(service: JDServiceServer) {\n        if (service?.device !== this) return // not in this device;\n        const newServices = this._services.slice(1)\n        const index = newServices.indexOf(service)\n        if (index > -1) {\n            newServices.splice(index, 1)\n            this.updateServices(newServices)\n        }\n    }\n\n    protected start() {\n        super.start()\n        this._packetCount = 0\n    }\n\n    protected stop() {\n        this._delayedPackets = undefined\n        super.stop()\n    }\n\n    protected handleSelfAnnounce() {\n        super.handleSelfAnnounce()\n        if (this._restartCounter < 0xf) this._restartCounter++\n        // async\n        this.controlService.announce()\n        // also send status codes, for non-zero codes\n        const activeServices = this.services().filter(\n            srv => !isBufferEmpty(srv.statusCode.data)\n        )\n        activeServices.forEach(srv => srv.statusCode.sendGetAsync())\n\n        // reset counter\n        this._packetCount = 0\n    }\n\n    get restartCounter() {\n        return this._restartCounter\n    }\n\n    get packetCount() {\n        return this._packetCount\n    }\n\n    services(): JDServiceServer[] {\n        return this._services.slice(0)\n    }\n\n    service(serviceIndex: number) {\n        return serviceIndex !== undefined && this._services[serviceIndex]\n    }\n\n    toString() {\n        return `host ${this.shortId}`\n    }\n\n    get eventCounter() {\n        return this._eventCounter\n    }\n\n    createEventCmd(evCode: number) {\n        if (!this._eventCounter) this._eventCounter = 0\n        this._eventCounter = (this._eventCounter + 1) & CMD_EVENT_COUNTER_MASK\n        if (evCode >> 8) throw new Error(\"invalid event code\")\n        return (\n            CMD_EVENT_MASK |\n            (this._eventCounter << CMD_EVENT_COUNTER_POS) |\n            evCode\n        )\n    }\n\n    async sendPacketAsync(pkt: Packet) {\n        if (!this.bus) return Promise.resolve()\n\n        // qos counter\n        this._packetCount++\n\n        pkt.deviceIdentifier = this.deviceId\n        // compute crc and send\n        const p = pkt.sendCoreAsync(this.bus)\n        // send to current bus\n        this.bus.processPacket(pkt)\n        // return priomise\n        return p\n    }\n\n    delayedSend(pkt: Packet, timestamp: number) {\n        if (!this._delayedPackets) {\n            this._delayedPackets = []\n            // start processing loop\n            setTimeout(this.processDelayedPackets.bind(this), 10)\n        }\n        const dp = { timestamp, pkt }\n        this._delayedPackets.push(dp)\n        this._delayedPackets.sort((l, r) => -l.timestamp + r.timestamp)\n    }\n\n    private processDelayedPackets() {\n        // consume packets that are ready\n        while (this._delayedPackets?.length) {\n            const { timestamp, pkt } = this._delayedPackets[0]\n            if (timestamp > this.bus.timestamp) break\n            this._delayedPackets.shift()\n            // do we wait?\n            try {\n                this.sendPacketAsync(pkt)\n            } catch (e) {\n                // something went wrong, clear queue\n                this._delayedPackets = undefined\n                throw e\n            }\n        }\n        // keep waiting or stop\n        if (!this._delayedPackets?.length) this._delayedPackets = undefined\n        // we're done\n        else setTimeout(this.processDelayedPackets.bind(this), 10)\n    }\n\n    protected handlePacket(pkt: Packet) {\n        const devIdMatch = pkt.deviceIdentifier == this.deviceId\n        if (pkt.requiresAck && devIdMatch) {\n            pkt.requiresAck = false // make sure we only do it once\n            const crc = pkt.crc\n            const ack = Packet.onlyHeader(crc)\n            ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK\n            this.sendPacketAsync(ack)\n        }\n\n        if (pkt.isMultiCommand) {\n            if (!pkt.isCommand) return // only commands supported\n            const multiCommandClass = pkt.serviceClass\n            for (const h of this._services) {\n                if (h.serviceClass == multiCommandClass) {\n                    // pretend it's directly addressed to us\n                    const npkt = pkt.cloneForDevice(this.deviceId, h.serviceIndex)\n                    h.handlePacket(npkt)\n                }\n            }\n        } else if (devIdMatch) {\n            if (!pkt.isCommand) return // huh? someone's pretending to be us?\n            const h = this._services[pkt.serviceIndex]\n            if (h) {\n                // log(`handle pkt at ${h.name} cmd=${pkt.service_command}`)\n                h.handlePacket(pkt)\n            }\n        } else {\n            if (pkt.isCommand) return // it's a command, and it's not for us\n            // reception of ACKs is handled by JDDevice class\n        }\n    }\n\n    private refreshRegisters() {\n        this._services.forEach(srv => srv.emit(REFRESH))\n    }\n\n    reset() {\n        this._restartCounter = 0\n        this._packetCount = 0\n        this._services?.forEach(srv => srv.reset())\n        this.emit(RESET)\n    }\n}\nexport default JDServerServiceProvider\n","import {\n    SRV_PROTO_TEST,\n    CHANGE,\n    ProtoTestReg,\n    ProtoTestCmd,\n    ProtoTestEvent,\n} from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { OutPipe } from \"../pipes\"\nimport JDRegisterServer from \"./registerserver\"\nimport JDServiceServer from \"./serviceserver\"\n\nexport class ProtocolTestServer extends JDServiceServer {\n    private rwBytes: JDRegisterServer<[Uint8Array]>\n\n    constructor() {\n        super(SRV_PROTO_TEST)\n\n        this.init<[boolean]>(\n            ProtoTestReg.RwBool,\n            ProtoTestReg.RoBool,\n            ProtoTestCmd.CBool,\n            ProtoTestEvent.EBool,\n            false\n        )\n        this.init<[number]>(\n            ProtoTestReg.RwI32,\n            ProtoTestReg.RoI32,\n            ProtoTestCmd.CI32,\n            ProtoTestEvent.EI32,\n            0\n        )\n        this.init<[number]>(\n            ProtoTestReg.RwU32,\n            ProtoTestReg.RoU32,\n            ProtoTestCmd.CU32,\n            ProtoTestEvent.EU32,\n            0\n        )\n        this.init<[string]>(\n            ProtoTestReg.RwString,\n            ProtoTestReg.RoString,\n            ProtoTestCmd.CString,\n            ProtoTestEvent.EString,\n            \"\"\n        )\n        this.rwBytes = this.init<[Uint8Array]>(\n            ProtoTestReg.RwBytes,\n            ProtoTestReg.RoBytes,\n            ProtoTestCmd.CBytes,\n            ProtoTestEvent.EBytes,\n            new Uint8Array(0)\n        )\n        this.init<[number, number, number, number]>(\n            ProtoTestReg.RwI8U8U16I32,\n            ProtoTestReg.RoI8U8U16I32,\n            ProtoTestCmd.CI8U8U16I32,\n            ProtoTestEvent.EI8U8U16I32,\n            0,\n            0,\n            0,\n            0\n        )\n        this.init<[number, string]>(\n            ProtoTestReg.RwU8String,\n            ProtoTestReg.RoU8String,\n            ProtoTestCmd.CU8String,\n            ProtoTestEvent.EU8String,\n            0,\n            \"\"\n        )\n\n        this.addCommand(\n            ProtoTestCmd.CReportPipe,\n            this.handleReportPipe.bind(this)\n        )\n    }\n\n    private init<TValues extends any[]>(\n        rwi: number,\n        roi: number,\n        ci: number,\n        ei: number,\n        ...values: TValues\n    ) {\n        const rw = this.addRegister(rwi, values)\n        const ro = this.addRegister(roi, rw.values())\n        rw.on(CHANGE, () => {\n            ro.setValues(rw.values())\n            this.sendEvent(ei, rw.data)\n        })\n        this.addCommand(ci, pkt =>\n            rw.setValues(jdunpack(pkt.data, rw.specification.packFormat))\n        )\n        return rw\n    }\n\n    private async handleReportPipe(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(this.rwBytes.data, (b: number) => {\n            const buf = new Uint8Array(1)\n            buf[0] = b\n            return jdpack<[Uint8Array]>(\"b\", [buf])\n        })\n    }\n}\nexport default ProtocolTestServer\n","import {\n    ButtonEvent,\n    ButtonReg,\n    CHANGE,\n    REFRESH,\n    SRV_BUTTON,\n} from \"../jdom/constants\"\nimport SensorServer from \"./sensorserver\"\nimport RegisterServer from \"../jdom/servers/registerserver\"\nimport { jdpack } from \"../jdom/pack\"\n\n/**\n * Server implementation for the button service\n * @category Servers\n */\nexport default class ButtonServer extends SensorServer<[number]> {\n    public static readonly HOLD_TIME = 500\n    public static readonly INACTIVE_VALUE = 0\n    public static readonly ACTIVE_VALUE = 1\n\n    private _downTime: number\n    private _nextHold: number\n\n    readonly analog: RegisterServer<[boolean]>\n    private _threshold: RegisterServer<[number]>\n\n    constructor(instanceName?: string, analog?: boolean) {\n        super(SRV_BUTTON, {\n            instanceName,\n            readingValues: [ButtonServer.INACTIVE_VALUE],\n            streamingInterval: 50,\n        })\n        this.analog = this.addRegister(ButtonReg.Analog, [!!analog])\n        this.on(REFRESH, this.handleRefresh.bind(this))\n    }\n\n    get threshold() {\n        return this._threshold\n    }\n\n    set threshold(value: RegisterServer<[number]>) {\n        if (value !== this._threshold) {\n            this._threshold = value\n            this.analog.setValues([!!this._threshold])\n            this.emit(CHANGE)\n        }\n    }\n\n    private isActive() {\n        // TODO: debouncing\n        const [v] = this.reading.values()\n        const t = this.threshold?.values()?.[0] || 0.5\n\n        return v > t\n    }\n\n    private async handleRefresh() {\n        const now = this.device.bus.timestamp\n        if (this.isActive()) {\n            // down event\n            if (this._downTime === undefined) {\n                this._downTime = now\n                this._nextHold = this._downTime + ButtonServer.HOLD_TIME\n                await this.sendEvent(ButtonEvent.Down)\n                // hold\n            } else if (now > this._nextHold) {\n                const time = now - this._downTime\n                this._nextHold =\n                    this.device.bus.timestamp + ButtonServer.HOLD_TIME\n                await this.sendEvent(\n                    ButtonEvent.Hold,\n                    jdpack<[number]>(\"u32\", [time])\n                )\n            }\n        } else {\n            // up event\n            if (this._downTime !== undefined) {\n                const time = now - this._downTime\n                this._downTime = undefined\n                this._nextHold = undefined\n                await this.sendEvent(\n                    ButtonEvent.Up,\n                    jdpack<[number]>(\"u32\", [time])\n                )\n            }\n        }\n    }\n\n    async down() {\n        this.reading.setValues([ButtonServer.ACTIVE_VALUE])\n    }\n\n    async up() {\n        this.reading.setValues([ButtonServer.INACTIVE_VALUE])\n    }\n}\n","import { BuzzerCmd, BuzzerReg, SRV_BUZZER } from \"../jdom/constants\"\nimport { jdpack, jdunpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport interface BuzzerTone {\n    frequency: number\n    duration: number\n    volume: number\n}\n\n/**\n * Encodes a buzzer tone information into a data payload\n * @param frequency sound frequency in Hz\n * @param ms sound duration in milliseconds\n * @param volume volume from [0..1]\n * @returns data payload\n * @category Data Packing\n */\nexport function tonePayload(frequency: number, ms: number, volume: number) {\n    const period = Math.round(1000000 / frequency)\n    const duty = (period * volume) >> 11\n    return jdpack(\"u16 u16 u16\", [period, duty, ms])\n}\n\n/**\n * Server implementation for the buzzer service\n * @category Servers\n */\nexport default class BuzzerServer extends JDServiceServer {\n    readonly volume: JDRegisterServer<[number]>\n\n    static PLAY_TONE = \"playTone\"\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_BUZZER, options)\n\n        this.volume = this.addRegister<[number]>(BuzzerReg.Volume, [0.2])\n        this.addCommand(BuzzerCmd.PlayTone, this.handlePlayTone.bind(this))\n    }\n\n    private handlePlayTone(pkt: Packet) {\n        const [period, , duration] = jdunpack<[number, number, number]>(\n            pkt.data,\n            \"u16 u16 u16\"\n        )\n        const frequency = 1000000 / period\n        const [volume] = this.volume.values()\n\n        this.emit(BuzzerServer.PLAY_TONE, <BuzzerTone>{\n            frequency,\n            duration,\n            volume,\n        })\n    }\n}\n","import {\n    CharacterScreenReg,\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n    CharacterScreenCmd,\n    SRV_CHARACTER_SCREEN,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class CharacterScreenServer extends JDServiceServer {\n    readonly message: JDRegisterServer<[string]>\n    readonly brightness: JDRegisterServer<[number]>\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[CharacterScreenVariant]>\n    readonly textDirection: JDRegisterServer<[CharacterScreenTextDirection]>\n\n    constructor(options?: {\n        message?: string\n        brightness?: number\n        rows?: number\n        columns?: number\n        variant?: CharacterScreenVariant\n        textDirection?: CharacterScreenTextDirection\n    }) {\n        super(SRV_CHARACTER_SCREEN)\n        const {\n            message = \"\",\n            rows = 2,\n            columns = 16,\n            variant,\n            textDirection,\n            brightness = 100,\n        } = options || {}\n\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [\n            message,\n        ])\n        this.brightness = this.addRegister<[number]>(\n            CharacterScreenReg.Brightness,\n            [brightness]\n        )\n        this.rows = this.addRegister<[number]>(CharacterScreenReg.Rows, [rows])\n        this.columns = this.addRegister<[number]>(CharacterScreenReg.Columns, [\n            columns,\n        ])\n        this.variant = this.addRegister<[CharacterScreenVariant]>(\n            CharacterScreenReg.Variant,\n            [variant || CharacterScreenVariant.LCD]\n        )\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [\n            \"\",\n        ])\n        this.textDirection = this.addRegister<[CharacterScreenTextDirection]>(\n            CharacterScreenReg.TextDirection,\n            [textDirection || CharacterScreenTextDirection.LeftToRight]\n        )\n\n        this.addCommand(\n            CharacterScreenCmd.SetLine,\n            this.handleSetLine.bind(this)\n        )\n        this.addCommand(CharacterScreenCmd.Clear, this.handleClear.bind(this))\n    }\n\n    handleClear() {\n        this.message.setValues([\"\"])\n    }\n\n    handleSetLine(pkt: Packet) {\n        const [line, lineMessage] = pkt.jdunpack<[number, string]>(\"u16 s\")\n        const [rows] = this.rows.values()\n        if (line >= rows) return\n        const [columns] = this.columns.values()\n\n        const [message = \"\"] = this.message.values()\n        const lines = message.split(\"\\n\")\n        lines[line] = lineMessage.slice(0, columns) // clip as needed\n        const newMessage = lines.map(l => l || \"\").join(\"\\n\")\n        this.message.setValues([newMessage])\n    }\n}\n","import {\n    JoystickButtons,\n    JoystickEvent,\n    JoystickReg,\n    JoystickVariant,\n    SRV_JOYSTICK,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_BUTTONS =\n    JoystickButtons.Left |\n    JoystickButtons.Right |\n    JoystickButtons.Up |\n    JoystickButtons.Down\n\n/**\n * @internal\n */\nexport const JOYSTICK_ARCADE_BUTTONS =\n    JOYSTICK_DPAD_BUTTONS |\n    JoystickButtons.A |\n    JoystickButtons.B |\n    JoystickButtons.Menu |\n    JoystickButtons.Select |\n    JoystickButtons.Exit\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_A_BUTTONS = JOYSTICK_DPAD_BUTTONS | JoystickButtons.A\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_AB_BUTTONS =\n    JOYSTICK_DPAD_A_BUTTONS | JoystickButtons.B\n\n/**\n * @internal\n */\nexport const JOYSTICK_GAMEPAD_EXTRA_BUTTONS =\n    JoystickButtons.B |\n    JoystickButtons.Select |\n    JoystickButtons.Menu |\n    JoystickButtons.Reset\n\n// https://w3c.github.io/gamepad/#remapping\nconst standardGamepadMapping = [\n    [JoystickButtons.Left, 14],\n    [JoystickButtons.Right, 15],\n    [JoystickButtons.Up, 12],\n    [JoystickButtons.Down, 13],\n    [JoystickButtons.A, 0],\n    [JoystickButtons.B, 1],\n    [JoystickButtons.Select, 8],\n    [JoystickButtons.Menu, 9],\n]\n\nexport default class JoystickServer extends SensorServer<\n    [JoystickButtons, number, number]\n> {\n    readonly variant: JDRegisterServer<[JoystickVariant]>\n    readonly buttonsAvailable: JDRegisterServer<[JoystickButtons]>\n\n    constructor(options?: {\n        instanceName?: string\n        variant?: JoystickVariant\n        buttonsAvailable?: JoystickButtons\n    }) {\n        super(SRV_JOYSTICK, {\n            instanceName: options?.instanceName,\n            readingValues: [0, 0, 0],\n            streamingInterval: 50,\n        })\n        const { variant = JoystickVariant.Thumb, buttonsAvailable = 0 } =\n            options || {}\n\n        this.variant = this.addRegister<[JoystickVariant]>(\n            JoystickReg.Variant,\n            [variant]\n        )\n        this.buttonsAvailable = this.addRegister<[JoystickButtons]>(\n            JoystickReg.ButtonsAvailable,\n            [buttonsAvailable]\n        )\n    }\n\n    get isDigital() {\n        const [value] = this.buttonsAvailable.values()\n        return (value & JOYSTICK_DPAD_BUTTONS) === JOYSTICK_DPAD_BUTTONS\n    }\n\n    async down(buttons: JoystickButtons) {\n        const [currentButtons, x, y] = this.reading.values()\n        const newButtons = currentButtons | buttons\n        await this.updateReading(newButtons, x, y)\n    }\n\n    async up(buttons: JoystickButtons) {\n        const [currentButtons, x, y] = this.reading.values()\n        const newButtons = currentButtons & ~buttons\n        await this.updateReading(newButtons, x, y)\n    }\n\n    async updateDirection(x: number, y: number) {\n        const [button] = this.reading.values()\n        await this.updateReading(button, x, y)\n    }\n\n    /**\n     * Read the state of a browser gamepad and apply it to the sensor\n     * @param gamepad\n     */\n    async update(gamepad: Gamepad) {\n        const { buttons, axes } = gamepad\n        const [buttonsAvailable] = this.buttonsAvailable.values()\n\n        let newButtons: JoystickButtons = 0\n        for (const [b, id] of standardGamepadMapping) {\n            if ((b & buttonsAvailable) == b && !!buttons[id].pressed) {\n                newButtons |= b\n            }\n        }\n\n        let newX = 0,\n            newY = 0\n        if (!this.isDigital) {\n            const [axeLeftRight, axeUpDown] = axes\n            newX = axeLeftRight\n            newY = axeUpDown\n        }\n\n        await this.updateReading(newButtons, newX, newY)\n    }\n\n    private async updateReading(\n        buttons: JoystickButtons,\n        x: number,\n        y: number\n    ) {\n        const [oldButtons] = this.reading.values()\n        if (this.isDigital) {\n            x =\n                buttons & JoystickButtons.Left\n                    ? -1\n                    : buttons & JoystickButtons.Right\n                    ? 1\n                    : 0\n            y =\n                buttons & JoystickButtons.Up\n                    ? -1\n                    : buttons & JoystickButtons.Down\n                    ? 1\n                    : 0\n        } else {\n            const threshold = -1\n            if (x < -threshold) buttons |= JoystickButtons.Left\n            else if (x > threshold) buttons |= JoystickButtons.Right\n            else buttons &= ~(JoystickButtons.Left | JoystickButtons.Right)\n            if (y < -threshold) buttons |= JoystickButtons.Up\n            else if (y > threshold) buttons |= JoystickButtons.Down\n            else buttons &= ~(JoystickButtons.Up | JoystickButtons.Down)\n        }\n        this.reading.setValues([buttons, x, y])\n\n        if (buttons !== oldButtons) {\n            await this.sendEvent(\n                JoystickEvent.ButtonsChanged,\n                jdpack<[number]>(\"u32\", [buttons])\n            )\n        }\n    }\n}\n","import {\n    CHANGE,\n    DotMatrixReg,\n    DotMatrixVariant,\n    SensorReg,\n    SRV_DOT_MATRIX,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class DotMatrixServer extends JDServiceServer {\n    readonly dots: JDRegisterServer<[Uint8Array]>\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly brightness: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[DotMatrixVariant]>\n\n    constructor(\n        columns: number,\n        rows: number,\n        options?: {\n            brightness?: number\n            variant?: DotMatrixVariant\n        }\n    ) {\n        super(SRV_DOT_MATRIX)\n        const { brightness, variant } = options || {}\n        this.dots = this.addRegister(DotMatrixReg.Dots, [new Uint8Array(0)])\n        this.rows = this.addRegister(DotMatrixReg.Rows, [rows])\n        this.columns = this.addRegister(DotMatrixReg.Columns, [columns])\n        if (brightness !== undefined)\n            this.brightness = this.addRegister(DotMatrixReg.Brightness, [128])\n        if (variant !== undefined)\n            this.variant = this.addRegister(DotMatrixReg.Variant, [variant])\n        this.rows.skipBoundaryCheck = true\n        this.rows.skipErrorInjection = true\n\n        if (variant === DotMatrixVariant.LED)\n            this.addRegister<[number]>(SensorReg.StreamingPreferredInterval, [\n                50,\n            ])\n\n        this.rows.on(CHANGE, this.updateDotsBuffer.bind(this))\n        this.columns.on(CHANGE, this.updateDotsBuffer.bind(this))\n\n        this.updateDotsBuffer()\n    }\n\n    private updateDotsBuffer() {\n        // columns must be byte aligned\n        const [rows] = this.rows.values()\n        const [columns] = this.columns.values()\n\n        // there's probably a much smarter way to do this\n        const columnspadded = columns + (8 - (columns % 8))\n        // total bits needed\n        const n = rows * columnspadded\n\n        if (this.dots.data?.length !== n) {\n            this.dots.data = new Uint8Array(n)\n            this.dots.emit(CHANGE)\n        }\n    }\n}\n","/*\n * `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n * `0xD1: fade(C+)` - set `N` pixels to color between colors in sequence\n * `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n * `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n * `0xD4: rotate_back(K)` - same, but towards the connector\n * `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n * `0xD6: range(P=0, N=length)` - range from pixel `P`, `N` pixels long\n * `0xD7: mode(K=0)` - set update mode\n * `0xD8: mode1(K=0)` - set update mode for next command only\n */\n\nexport const LIGHT_PROG_SET_ALL = 0xd0\nexport const LIGHT_PROG_FADE = 0xd1\nexport const LIGHT_PROG_FADE_HSV = 0xd2\nexport const LIGHT_PROG_ROTATE_FWD = 0xd3\nexport const LIGHT_PROG_ROTATE_BACK = 0xd4\nexport const LIGHT_PROG_SHOW = 0xd5\nexport const LIGHT_PROG_RANGE = 0xd6\nexport const LIGHT_PROG_MODE = 0xd7\nexport const LIGHT_PROG_MODE1 = 0xd8\n\nexport const LIGHT_MODE_REPLACE = 0x00\nexport const LIGHT_MODE_ADD_RGB = 0x01\nexport const LIGHT_MODE_SUBTRACT_RGB = 0x02\nexport const LIGHT_MODE_MULTIPLY_RGB = 0x03\nexport const LIGHT_MODE_LAST = 0x03\n\nexport const LIGHT_PROG_COLN = 0xc0\nexport const LIGHT_PROG_COL1 = 0xc1\nexport const LIGHT_PROG_COL2 = 0xc2\nexport const LIGHT_PROG_COL3 = 0xc3\n\nexport const LIGHT_PROG_COL1_SET = 0xcf\n","import {\n    CHANGE,\n    LedPixelCmd,\n    LedPixelLightType,\n    LedPixelReg,\n    LedPixelVariant,\n    RENDER,\n    SRV_LED_PIXEL,\n} from \"../jdom/constants\"\nimport {\n    LIGHT_MODE_ADD_RGB,\n    LIGHT_MODE_LAST,\n    LIGHT_MODE_MULTIPLY_RGB,\n    LIGHT_MODE_REPLACE,\n    LIGHT_MODE_SUBTRACT_RGB,\n    LIGHT_PROG_COL1,\n    LIGHT_PROG_COL1_SET,\n    LIGHT_PROG_COL2,\n    LIGHT_PROG_COL3,\n    LIGHT_PROG_COLN,\n    LIGHT_PROG_FADE,\n    LIGHT_PROG_FADE_HSV,\n    LIGHT_PROG_MODE,\n    LIGHT_PROG_MODE1,\n    LIGHT_PROG_RANGE,\n    LIGHT_PROG_ROTATE_BACK,\n    LIGHT_PROG_ROTATE_FWD,\n    LIGHT_PROG_SET_ALL,\n    LIGHT_PROG_SHOW,\n} from \"../jdom/lightconstants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { isBufferEmpty } from \"../jdom/utils\"\n\nconst PROG_EOF = 0\nconst PROG_CMD = 1\nconst PROG_NUMBER = 3\nconst PROG_COLOR_BLOCK = 4\n\ninterface RGB {\n    r: number\n    g: number\n    b: number\n}\n\nfunction rgb(r: number, g: number, b: number) {\n    return { r, g, b }\n}\n\nfunction hsv(hue: number, sat: number, val: number): RGB {\n    // scale down to 0..192\n    hue = (hue * 192) >> 8\n\n    // reference: based on FastLED's hsv2rgb rainbow algorithm\n    // [https://github.com/FastLED/FastLED](MIT)\n    const invsat = 255 - sat\n    const brightness_floor = (val * invsat) >> 8\n    const color_amplitude = val - brightness_floor\n    const section = (hue / 0x40) >> 0 // [0..2]\n    const offset = hue % 0x40 >> 0 // [0..63]\n\n    const rampup = offset\n    const rampdown = 0x40 - 1 - offset\n\n    const rampup_amp_adj = ((rampup * color_amplitude) / (256 / 4)) >> 0\n    const rampdown_amp_adj = ((rampdown * color_amplitude) / (256 / 4)) >> 0\n\n    const rampup_adj_with_floor = rampup_amp_adj + brightness_floor\n    const rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor\n\n    let r = 0,\n        g = 0,\n        b = 0\n    if (section) {\n        if (section == 1) {\n            // section 1: 0x40..0x7F\n            r = brightness_floor\n            g = rampdown_adj_with_floor\n            b = rampup_adj_with_floor\n        } else {\n            // section 2; 0x80..0xBF\n            r = rampup_adj_with_floor\n            g = brightness_floor\n            b = rampdown_adj_with_floor\n        }\n    } else {\n        // section 0: 0x00..0x3F\n        r = rampdown_adj_with_floor\n        g = rampup_adj_with_floor\n        b = brightness_floor\n    }\n    return rgb(r, g, b)\n}\n\nfunction mulcol(c: number, m: number): number {\n    let c2 = (c * m) >> 7\n    if (m < 128 && c == c2) c2--\n    else if (m > 128 && c == c2) c2++\n    return c2\n}\n\nfunction clamp(c: number): number {\n    if (c < 0) return 0\n    if (c > 255) return 255\n    return c\n}\n\nfunction SCALE0(c: number, i: number) {\n    return ((c & 0xff) * (1 + (i & 0xff))) >> 8\n}\n\nexport default class LedPixelServer extends JDServiceServer {\n    readonly brightness: JDRegisterServer<[number]>\n    readonly actualBrightness: JDRegisterServer<[number]>\n    readonly lightType: JDRegisterServer<[LedPixelLightType]>\n    readonly numPixels: JDRegisterServer<[number]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[LedPixelVariant]>\n    readonly maxPixels: JDRegisterServer<[number]>\n    readonly numRepeats: JDRegisterServer<[number]>\n    readonly numColumns: JDRegisterServer<[number]>\n\n    private pxbuffer: Uint8Array = new Uint8Array(0)\n\n    private prog_mode = 0\n    private prog_tmpmode = 0\n\n    private range_start = 0\n    private range_end = 0\n    private range_len = 0\n    private range_ptr = 0\n\n    private prog_ptr = 0\n    private prog_size = 0\n    private prog_data = new Uint8Array(0)\n\n    private dirty = true\n    private inited = false\n\n    power_enable = false\n\n    constructor(\n        options?: {\n            numPixels?: number\n            numColumns?: number\n            maxPixels?: number\n            maxPower?: number\n        } & JDServerOptions\n    ) {\n        super(SRV_LED_PIXEL, options)\n\n        const {\n            numColumns,\n            maxPower = 200,\n            maxPixels = 300,\n            numPixels = 15,\n        } = options || {}\n\n        this.brightness = this.addRegister<[number]>(LedPixelReg.Brightness, [\n            15,\n        ])\n        this.actualBrightness = this.addRegister<[number]>(\n            LedPixelReg.ActualBrightness,\n            [15]\n        )\n        this.lightType = this.addRegister<[LedPixelLightType]>(\n            LedPixelReg.LightType,\n            [LedPixelLightType.WS2812B_GRB]\n        )\n        this.numPixels = this.addRegister<[number]>(LedPixelReg.NumPixels, [\n            numPixels,\n        ])\n        this.maxPower = this.addRegister<[number]>(LedPixelReg.MaxPower, [\n            maxPower,\n        ])\n        this.maxPixels = this.addRegister<[number]>(LedPixelReg.MaxPixels, [\n            maxPixels,\n        ])\n        this.variant = this.addRegister<[LedPixelVariant]>(\n            LedPixelReg.Variant,\n            [LedPixelVariant.Strip]\n        )\n        this.numRepeats = this.addRegister<[number]>(LedPixelReg.NumRepeats, [\n            0,\n        ])\n        if (numColumns !== undefined)\n            this.numColumns = this.addRegister<[number]>(\n                LedPixelReg.NumColumns,\n                [numColumns]\n            )\n\n        this.brightness.on(\n            CHANGE,\n            () => (this.intensity = this.requested_intensity)\n        )\n        this.numPixels.on(CHANGE, this.allocRxBuffer.bind(this))\n        this.maxPixels.on(CHANGE, this.allocRxBuffer.bind(this))\n\n        this.addCommand(LedPixelCmd.Run, this.handleRun.bind(this))\n\n        this.allocRxBuffer()\n    }\n\n    /**\n     * Gets an array of RGB color numbers\n     */\n    get colors() {\n        return this.pxbuffer\n    }\n\n    private get maxpower(): number {\n        const [r] = this.maxPower.values() || [200]\n        return r\n    }\n\n    private get maxpixels(): number {\n        const [r] = this.maxPixels.values() || []\n        return r\n    }\n\n    private get numpixels(): number {\n        const [r] = this.numPixels.values() || [0]\n        return r\n    }\n\n    private get requested_intensity(): number {\n        const [r] = this.brightness.values() || [0]\n        return r\n    }\n\n    private get intensity(): number {\n        const [r] = this.actualBrightness.values() || [0]\n        return r\n    }\n\n    private set intensity(v: number) {\n        this.actualBrightness.setValues([v])\n    }\n\n    private jd_power_enable(value: boolean) {\n        this.power_enable = value\n    }\n\n    is_enabled() {\n        return this.numpixels > 0 && this.requested_intensity > 0\n    }\n\n    private allocRxBuffer() {\n        const { numpixels = 0, maxpixels, pxbuffer } = this\n        if (maxpixels !== undefined && numpixels > maxpixels)\n            this.numPixels.setValues([this.maxpixels])\n        const n = numpixels * 3 // don't need to prealloc here\n        if (pxbuffer || n !== pxbuffer.length) this.pxbuffer = new Uint8Array(n)\n    }\n\n    private reset_range() {\n        this.range_ptr = this.range_start\n    }\n\n    private set_next(c: RGB) {\n        if (this.range_ptr >= this.range_end) return false\n\n        const p = this.pxbuffer\n        const pi = this.range_ptr++ * 3\n        // fast path\n        if (this.prog_tmpmode == LIGHT_MODE_REPLACE) {\n            p[pi + 0] = c.r\n            p[pi + 1] = c.g\n            p[pi + 2] = c.b\n            return true\n        }\n\n        let r = p[pi + 0],\n            g = p[pi + 1],\n            b = p[pi + 2]\n        switch (this.prog_tmpmode) {\n            case LIGHT_MODE_ADD_RGB:\n                r += c.r\n                g += c.g\n                b += c.b\n                break\n            case LIGHT_MODE_SUBTRACT_RGB:\n                r -= c.r\n                g -= c.g\n                b -= c.b\n                break\n            case LIGHT_MODE_MULTIPLY_RGB:\n                r = mulcol(r, c.r)\n                g = mulcol(g, c.g)\n                b = mulcol(b, c.b)\n                break\n        }\n        p[pi + 0] = clamp(r)\n        p[pi + 1] = clamp(g)\n        p[pi + 2] = clamp(b)\n        return true\n    }\n\n    private limit_intensity() {\n        const { numpixels, requested_intensity, maxpower, pxbuffer } = this\n\n        let n = numpixels * 3\n        const prev_intensity = this.intensity\n        let intensity = this.intensity\n\n        intensity += 1 + (intensity >> 5)\n        if (\n            requested_intensity !== undefined &&\n            intensity > requested_intensity\n        )\n            intensity = requested_intensity\n\n        let current_full = 0\n        let current = 0\n        let current_prev = 0\n        let di = 0\n        while (n--) {\n            const v = pxbuffer[di++]\n            current += SCALE0(v, intensity)\n            current_prev += SCALE0(v, prev_intensity)\n            current_full += v\n        }\n\n        // 46uA per step of LED\n        current *= 46\n        current_prev *= 46\n        current_full *= 46\n\n        // 14mA is the chip at 48MHz, 930uA per LED is static\n        const base_current = 14000 + 930 * numpixels\n        const current_limit = maxpower * 1000 - base_current\n\n        if (current <= current_limit) {\n            this.intensity = intensity\n            // LOG(\"curr: %dmA; not limiting %d\", (base_current + current) / 1000, state->intensity);\n            return\n        }\n\n        if (current_prev <= current_limit) {\n            return // no change needed\n        }\n\n        let inten = current_limit / (current_full >> 8) - 1\n        if (inten < 0) inten = 0\n        this.intensity = inten\n    }\n\n    private prog_fetch_color(): RGB {\n        const ptr = this.prog_ptr\n        if (ptr + 3 > this.prog_size) return rgb(0, 0, 0)\n        const d = this.prog_data\n        this.prog_ptr = ptr + 3\n        return rgb(d[ptr + 0], d[ptr + 1], d[ptr + 2])\n    }\n\n    private prog_fetch(): {\n        dst?: number\n        prog: number\n    } {\n        if (this.prog_ptr >= this.prog_size) return { prog: PROG_EOF }\n        const d = this.prog_data\n        const c = d[this.prog_ptr++]\n        if (!(c & 0x80)) {\n            return { dst: c, prog: PROG_NUMBER }\n        } else if ((c & 0xc0) == 0x80) {\n            return {\n                dst: ((c & 0x3f) << 8) | d[this.prog_ptr++],\n                prog: PROG_NUMBER,\n            }\n        } else\n            switch (c) {\n                case LIGHT_PROG_COL1:\n                    return {\n                        dst: 1,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COL2:\n                    return {\n                        dst: 2,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COL3:\n                    return {\n                        dst: 3,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COLN:\n                    return {\n                        dst: d[this.prog_ptr++],\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                default:\n                    return {\n                        dst: c,\n                        prog: PROG_CMD,\n                    }\n            }\n    }\n\n    private prog_fetch_num(defl: number): number {\n        const prev = this.prog_ptr\n        const fr = this.prog_fetch()\n        const { dst: res, prog: r } = fr\n        if (r == PROG_NUMBER) return res\n        else {\n            this.prog_ptr = prev // rollback\n            return defl\n        }\n    }\n\n    private prog_fetch_cmd(): number {\n        let cmd: number\n        // skip until there's a command\n        for (;;) {\n            const c = this.prog_fetch()\n            switch (c.prog) {\n                case PROG_CMD:\n                    return c.dst\n                case PROG_COLOR_BLOCK:\n                    while (cmd--) this.prog_fetch_color()\n                    break\n                case PROG_EOF:\n                    return 0\n            }\n        }\n    }\n\n    private prog_set(len: number) {\n        this.reset_range()\n        const start = this.prog_ptr\n        for (;;) {\n            this.prog_ptr = start\n            let ok = false\n            for (let i = 0; i < len; ++i) {\n                // don't break the loop immediately if !ok - make sure the prog counter advances\n                ok = this.set_next(this.prog_fetch_color())\n            }\n            if (!ok) break\n        }\n    }\n\n    private prog_fade(len: number, usehsv: boolean) {\n        if (len < 2) {\n            this.prog_set(len)\n            return\n        }\n        let colidx = 0\n        const endp = this.prog_ptr + 3 * len\n        let col0 = this.prog_fetch_color()\n        let col1 = this.prog_fetch_color()\n\n        const colstep = ((len - 1) << 16) / this.range_len\n        let colpos = 0\n\n        this.reset_range()\n\n        for (;;) {\n            while (colidx < colpos >> 16) {\n                colidx++\n                col0 = col1\n                col1 = this.prog_fetch_color()\n            }\n            const fade1 = colpos & 0xffff\n            const fade0 = 0xffff - fade1\n            const col = rgb(\n                (col0.r * fade0 + col1.r * fade1 + 0x8000) >> 16,\n                (col0.g * fade0 + col1.g * fade1 + 0x8000) >> 16,\n                (col0.b * fade0 + col1.b * fade1 + 0x8000) >> 16\n            )\n            if (!this.set_next(usehsv ? hsv(col.r, col.g, col.b) : col)) break\n            colpos += colstep\n        }\n\n        this.prog_ptr = endp\n    }\n\n    private prog_rot(shift: number) {\n        if (shift <= 0 || shift >= this.range_len) return\n\n        const range_start = this.range_start\n        const range_end = this.range_end\n        const buf = this.pxbuffer\n\n        let first = range_start * 3\n        let middle = (range_start + shift) * 3\n        const last = range_end * 3\n        let next = middle\n\n        while (first != next) {\n            const tmp = buf[first]\n            const tmp1 = buf[first + 1]\n            const tmp2 = buf[first + 2]\n\n            buf[first] = buf[next]\n            buf[first + 1] = buf[next + 1]\n            buf[first + 2] = buf[next + 2]\n\n            buf[next] = tmp\n            buf[next + 1] = tmp1\n            buf[next + 2] = tmp2\n\n            first += 3\n            next += 3\n\n            if (next === last) next = middle\n            else if (first === middle) middle = next\n        }\n    }\n\n    private fetch_mode(): number {\n        const m = this.prog_fetch_num(0)\n        if (m > LIGHT_MODE_LAST) return 0\n        return m\n    }\n\n    private prog_process() {\n        const data = this.prog_data\n\n        if (this.prog_ptr >= this.prog_size) return false\n\n        // check that the program wasn't restarted\n        // concurrently\n        while (data === this.prog_data) {\n            const cmd = this.prog_fetch_cmd()\n            if (!cmd) break\n\n            if (cmd == LIGHT_PROG_SHOW) {\n                const k = this.prog_fetch_num(50)\n                this.dirty = true\n                setTimeout(this.animationFrame.bind(this), k)\n                // check data is still current;\n                return data === this.prog_data\n            }\n\n            switch (cmd) {\n                case LIGHT_PROG_COL1_SET:\n                    this.range_ptr = this.range_start + this.prog_fetch_num(0)\n                    this.set_next(this.prog_fetch_color())\n                    break\n                case LIGHT_PROG_FADE:\n                case LIGHT_PROG_FADE_HSV:\n                case LIGHT_PROG_SET_ALL: {\n                    const { dst: len, prog: pcmd } = this.prog_fetch()\n                    if (pcmd != PROG_COLOR_BLOCK || len == 0) continue // bailout\n                    if (cmd == LIGHT_PROG_SET_ALL) this.prog_set(len)\n                    else this.prog_fade(len, cmd == LIGHT_PROG_FADE_HSV)\n                    break\n                }\n\n                case LIGHT_PROG_ROTATE_BACK:\n                case LIGHT_PROG_ROTATE_FWD: {\n                    let k = this.prog_fetch_num(1)\n                    const len = this.range_len\n                    if (len == 0) continue\n                    while (k >= len) k -= len\n                    if (cmd == LIGHT_PROG_ROTATE_FWD && k != 0) k = len - k\n                    this.prog_rot(k)\n                    break\n                }\n\n                case LIGHT_PROG_MODE1:\n                    this.prog_tmpmode = this.fetch_mode()\n                    break\n\n                case LIGHT_PROG_MODE:\n                    this.prog_mode = this.fetch_mode()\n                    break\n\n                case LIGHT_PROG_RANGE: {\n                    let start = this.prog_fetch_num(0)\n                    const len = this.prog_fetch_num(this.numpixels)\n                    const numpixels = this.numpixels\n                    if (start > numpixels) start = numpixels\n                    let end = start + len\n                    if (end > numpixels) end = numpixels\n                    this.range_start = start\n                    this.range_end = end\n                    this.range_len = end - start\n                    break\n                }\n            }\n\n            if (cmd != LIGHT_PROG_MODE1) this.prog_tmpmode = this.prog_mode\n        }\n\n        return false\n    }\n\n    /**\n     * Perform an animation step\n     */\n    animationFrame() {\n        if (!this.prog_process()) return // concurrently udpated\n\n        if (!this.is_enabled()) return\n        if (this.dirty) {\n            this.dirty = false\n            if (isBufferEmpty(this.pxbuffer)) {\n                this.jd_power_enable(false)\n                return\n            } else {\n                this.jd_power_enable(true)\n            }\n            this.limit_intensity()\n            // we're ready to render...\n            this.emit(RENDER)\n        }\n    }\n\n    private sync_config() {\n        if (!this.is_enabled()) {\n            this.jd_power_enable(false)\n            return\n        }\n\n        if (!this.inited) {\n            this.inited = true\n            // initialize?\n            // px_init(this.lighttype);\n        }\n\n        this.jd_power_enable(true)\n    }\n\n    private handleRun(pkt: Packet) {\n        this.prog_data = pkt.data\n        this.prog_size = this.prog_data.length\n        this.prog_ptr = 0\n\n        this.range_start = 0\n        this.range_end = this.range_len = this.numpixels\n        this.prog_tmpmode = this.prog_mode = 0\n\n        this.sync_config()\n        this.animationFrame()\n    }\n}\n","import { MatrixKeypadReg, SRV_MATRIX_KEYPAD } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\nexport default class MatrixKeypadServer extends SensorServer<[[number][]]> {\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly labels: JDRegisterServer<[[string][]]>\n\n    constructor(columns: number, rows: number, labels?: string[]) {\n        super(SRV_MATRIX_KEYPAD, {\n            readingValues: [[]],\n        })\n\n        this.columns = this.addRegister(MatrixKeypadReg.Columns, [columns])\n        this.rows = this.addRegister(MatrixKeypadReg.Rows, [rows])\n        this.labels = this.addRegister(\n            MatrixKeypadReg.Labels,\n            labels ? [labels.map(l => [l])] : undefined\n        )\n    }\n\n    async down(button: number) {\n        const [values] = this.reading.values()\n        const valuei = values.findIndex(v => v[0] === button)\n        if (valuei < 0) {\n            values.push([button])\n            this.reading.setValues([values])\n        }\n    }\n\n    async up(button: number) {\n        const [values] = this.reading.values()\n        const valuei = values.findIndex(v => v[0] === button)\n        if (valuei > -1) {\n            values.splice(valuei, 1)\n            this.reading.setValues([values])\n        }\n    }\n}\n","import { MotorReg, SRV_MOTOR } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class MotorServer extends JDServiceServer {\n    readonly duty: JDRegisterServer<[number]>\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly loadTorque: JDRegisterServer<[number]>\n    readonly loadSpeed: JDRegisterServer<[number]>\n\n    constructor(instanceName?: string) {\n        super(SRV_MOTOR, { instanceName })\n\n        this.duty = this.addRegister<[number]>(MotorReg.Duty, [0])\n        this.enabled = this.addRegister<[boolean]>(MotorReg.Enabled, [false])\n        this.loadTorque = this.addRegister<[number]>(MotorReg.LoadTorque)\n        this.loadSpeed = this.addRegister<[number]>(MotorReg.LoadSpeed)\n    }\n}\n","import { JDClient } from \"../jdom/client\"\nimport { CHANGE, SystemEvent, SystemReadingThreshold } from \"../jdom/constants\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class LevelDetector extends JDClient {\n    private _state: number\n\n    constructor(readonly service: AnalogSensorServer) {\n        super()\n        this.reset()\n        if (this.service.inactiveThreshold)\n            this.mount(\n                this.service.inactiveThreshold.subscribe(\n                    CHANGE,\n                    this.reset.bind(this)\n                )\n            )\n        if (this.service.activeThreshold)\n            this.mount(\n                this.service.activeThreshold.subscribe(\n                    CHANGE,\n                    this.reset.bind(this)\n                )\n            )\n        this.mount(\n            this.service.reading.subscribe(CHANGE, this.update.bind(this))\n        )\n    }\n\n    reset() {\n        this._state = SystemReadingThreshold.Neutral\n    }\n\n    update() {\n        const [level] = this.service.reading.values()\n        if (level === undefined) {\n            this.setState(SystemReadingThreshold.Neutral)\n            return\n        }\n\n        const [active] = this.service.activeThreshold?.values()\n        if (active !== undefined && level >= active) {\n            this.setState(SystemReadingThreshold.Active)\n            return\n        }\n\n        const [inactive] = this.service.inactiveThreshold?.values()\n        if (inactive !== undefined && level <= inactive) {\n            this.setState(SystemReadingThreshold.Inactive)\n            return\n        }\n\n        // neutral\n        this.setState(SystemReadingThreshold.Neutral)\n    }\n\n    private setState(state: number) {\n        if (state === this._state) return\n\n        this._state = state\n        switch (state) {\n            case SystemReadingThreshold.Active:\n                this.service.sendEvent(SystemEvent.Active)\n                break\n            case SystemReadingThreshold.Inactive:\n                this.service.sendEvent(SystemEvent.Inactive)\n                break\n            case SystemReadingThreshold.Neutral:\n                this.service.sendEvent(SystemEvent.Neutral)\n                break\n        }\n    }\n}\n","import { SystemReg } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport LevelDetector from \"./leveldetector\"\nimport SensorServer, { SensorServiceOptions } from \"./sensorserver\"\n\n/**\n * Creation options for AnalogSensorServer\n * @category Servers\n * @internal\n */\nexport interface AnalogSensorServerOptions\n    extends SensorServiceOptions<[number]> {\n    minReading?: number\n    maxReading?: number\n    inactiveThreshold?: number\n    activeThreshold?: number\n    readingResolution?: number\n}\n\n/**\n * Base class for analog sensor servers\n * @category Servers\n */\nexport default class AnalogSensorServer extends SensorServer<[number]> {\n    readonly inactiveThreshold: JDRegisterServer<[number]>\n    readonly activeThreshold: JDRegisterServer<[number]>\n    readonly levelDetector: LevelDetector\n\n    constructor(serviceClass: number, options?: AnalogSensorServerOptions) {\n        super(serviceClass, options)\n        const {\n            minReading,\n            maxReading,\n            inactiveThreshold,\n            activeThreshold,\n            readingResolution,\n        } = options || {}\n        if (minReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MinReading, [minReading])\n        if (maxReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MaxReading, [maxReading])\n        if (readingResolution !== undefined)\n            this.addRegister<[number]>(SystemReg.ReadingResolution, [\n                readingResolution,\n            ])\n        if (\n            inactiveThreshold !== undefined ||\n            this.activeThreshold !== undefined\n        ) {\n            if (inactiveThreshold !== undefined)\n                this.inactiveThreshold = this.addRegister<[number]>(\n                    SystemReg.InactiveThreshold,\n                    [inactiveThreshold]\n                )\n            if (activeThreshold !== undefined)\n                this.activeThreshold = this.addRegister<[number]>(\n                    SystemReg.ActiveThreshold,\n                    [activeThreshold]\n                )\n            this.levelDetector = new LevelDetector(this)\n        }\n    }\n}\n","import { CHANGE, RainGaugeReg, SRV_RAIN_GAUGE } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class RainGaugeServer extends AnalogSensorServer {\n    readonly precipitationPrecision: JDRegisterServer<[number]>\n    private _tiltCount = 0\n    private _level = 0\n\n    constructor(options?: { bucketSize?: number }) {\n        super(SRV_RAIN_GAUGE, {\n            readingValues: [0],\n        })\n        const { bucketSize } = options || {}\n\n        this.precipitationPrecision = this.addRegister<[number]>(\n            RainGaugeReg.PrecipitationPrecision,\n            [bucketSize || 0.2794]\n        )\n        this._level = 0\n    }\n\n    get tiltCount() {\n        return this._tiltCount\n    }\n\n    get level() {\n        return this._level\n    }\n\n    async rain(fraction: number) {\n        if (!fraction) return\n\n        this._level += fraction\n        if (this._level >= 0.7) await this.tilt()\n        else this.emit(CHANGE)\n    }\n\n    async tilt() {\n        this._tiltCount++\n        this._level = 0\n\n        const [bucket] = this.precipitationPrecision.values()\n        const [current] = this.reading.values()\n        this.reading.setValues([current + (bucket || 0.2)])\n\n        this.emit(CHANGE)\n    }\n}\n","import {\n    ReflectedLightReg,\n    ReflectedLightVariant,\n    SRV_REFLECTED_LIGHT,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class ReflectedLightServer extends AnalogSensorServer {\n    readonly variant: JDRegisterServer<[ReflectedLightVariant]>\n\n    constructor(options?: { variant?: ReflectedLightVariant }) {\n        super(SRV_REFLECTED_LIGHT, { readingValues: [0] })\n        const { variant } = options || {}\n\n        this.variant = this.addRegister<[ReflectedLightVariant]>(\n            ReflectedLightReg.Variant,\n            [variant || ReflectedLightVariant.InfraredDigital]\n        )\n    }\n}\n","import { RotaryEncoderReg, SRV_ROTARY_ENCODER } from \"../jdom/constants\"\nimport SensorServer from \"./sensorserver\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\n\nexport default class RotaryEncoderServer extends SensorServer<[number]> {\n    readonly clicksPerTurn: JDRegisterServer<[number]>\n\n    constructor() {\n        super(SRV_ROTARY_ENCODER, { readingValues: [0], streamingInterval: 50 })\n\n        this.clicksPerTurn = this.addRegister<[number]>(\n            RotaryEncoderReg.ClicksPerTurn,\n            [12]\n        )\n    }\n\n    async rotate(clicks: number) {\n        const [position] = this.reading.values()\n        this.reading.setValues([position + (clicks >> 0)])\n    }\n}\n","import {\n    CHANGE,\n    PACKET_DATA_NORMALIZE,\n    ServoReg,\n    SRV_SERVO,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class ServoServer extends JDServiceServer {\n    readonly angle: JDRegisterServer<[number]>\n    readonly currentAngle: JDRegisterServer<[number]>\n    readonly offset: JDRegisterServer<[number]>\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly minAngle: JDRegisterServer<[number]>\n    readonly maxAngle: JDRegisterServer<[number]>\n    readonly responseSpeed: JDRegisterServer<[number]>\n    readonly stallTorque: JDRegisterServer<[number]>\n\n    constructor(\n        options?: {\n            minAngle?: number\n            maxAngle?: number\n            responseSpeed?: number\n            stallTorque?: number\n        } & JDServerOptions\n    ) {\n        super(SRV_SERVO, options)\n        const {\n            minAngle = -90,\n            maxAngle = 90,\n            responseSpeed,\n            stallTorque,\n        } = options || {}\n\n        this.angle = this.addRegister<[number]>(ServoReg.Angle, [0])\n        this.currentAngle = this.addRegister<[number]>(ServoReg.CurrentAngle, [\n            0,\n        ])\n        this.enabled = this.addRegister<[boolean]>(ServoReg.Enabled, [false])\n        this.minAngle = this.addRegister<[number]>(\n            ServoReg.MinAngle,\n            minAngle !== undefined ? [minAngle] : undefined\n        )\n        this.maxAngle = this.addRegister<[number]>(\n            ServoReg.MaxAngle,\n            maxAngle !== undefined ? [maxAngle] : undefined\n        )\n        this.offset = this.addRegister<[number]>(ServoReg.Offset, [0])\n        this.responseSpeed = this.addRegister<[number]>(\n            ServoReg.ResponseSpeed,\n            responseSpeed !== undefined ? [responseSpeed] : undefined\n        )\n        this.stallTorque = this.addRegister<[number]>(\n            ServoReg.StallTorque,\n            stallTorque !== undefined ? [stallTorque] : undefined\n        )\n\n        this.angle.on(PACKET_DATA_NORMALIZE, (values: [number]) => {\n            let angle = values[0]\n            const [minAngle] = this.minAngle.values()\n            const [maxAngle] = this.maxAngle.values()\n            if (minAngle !== undefined) angle = Math.max(minAngle, angle)\n            if (maxAngle !== undefined) angle = Math.min(maxAngle, angle)\n            values[0] = angle\n        })\n        this.angle.on(CHANGE, () =>\n            this.currentAngle.setValues(this.angle.values())\n        )\n    }\n}\n","import { SettingsCmd, SettingsEvent, SRV_SETTINGS } from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { fromHex, toHex } from \"../jdom/utils\"\n\nexport default class SettingsServer extends JDServiceServer {\n    private settings: Record<string, string>\n\n    constructor(readonly storageKey?: string) {\n        super(SRV_SETTINGS)\n\n        this.addCommand(SettingsCmd.Get, this.handleGet.bind(this))\n        this.addCommand(SettingsCmd.Set, this.handleSet.bind(this))\n        this.addCommand(SettingsCmd.Delete, this.handleDelete.bind(this))\n        this.addCommand(SettingsCmd.ListKeys, this.handleListKeys.bind(this))\n        this.addCommand(SettingsCmd.List, this.handleList.bind(this))\n        this.addCommand(SettingsCmd.Clear, this.handleClear.bind(this))\n\n        this.settings = this.read()\n    }\n\n    private getPayload(key: string) {\n        const value = this.settings[key]\n        const secret = /^$/.test(key)\n\n        let payload: Uint8Array\n        if (value === undefined) {\n            payload = new Uint8Array(0)\n        } else if (secret) {\n            const payload = new Uint8Array(1)\n            payload[0] = 0\n        } else {\n            payload = fromHex(value)\n        }\n\n        return payload\n    }\n\n    private async handleGet(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\")\n        const payload = this.getPayload(key)\n        const resp = Packet.jdpacked<[string, Uint8Array]>(\n            SettingsCmd.Get,\n            \"z b\",\n            [key, payload]\n        )\n        await this.sendPacketAsync(resp)\n    }\n\n    private async handleSet(pkt: Packet) {\n        const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\")\n        console.log({ cmd: \"set\", key, value })\n        this.settings[key] = toHex(value)\n        await this.save()\n    }\n\n    private async handleDelete(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\")\n        delete this.settings[key]\n        await this.save()\n    }\n\n    private async handleListKeys(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(Object.keys(this.settings), k =>\n            jdpack<[string]>(\"s\", [k])\n        )\n    }\n\n    private async handleList(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(Object.keys(this.settings), k => {\n            const payload = this.getPayload(k)\n            return jdpack<[string, Uint8Array]>(\"z b\", [k, payload])\n        })\n    }\n\n    private handleClear() {\n        this.settings = {}\n        this.save()\n    }\n\n    private read(): Record<string, string> {\n        if (!this.storageKey) return {}\n\n        try {\n            const payload =\n                typeof window !== \"undefined\" &&\n                window.localStorage.getItem(this.storageKey)\n            return JSON.parse(payload || \"{}\")\n        } catch (e) {\n            console.log(e)\n            return {}\n        }\n    }\n\n    private async save() {\n        if (this.storageKey) {\n            try {\n                if (typeof window !== \"undefined\")\n                    window.localStorage.setItem(\n                        this.storageKey,\n                        JSON.stringify(this.settings)\n                    )\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        await this.sendEvent(SettingsEvent.Change)\n    }\n}\n","import {\n    SpeechSynthesisCmd,\n    SpeechSynthesisReg,\n    SRV_SPEECH_SYNTHESIS,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class SpeechSynthesisServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly pitch: JDRegisterServer<[number]>\n    readonly rate: JDRegisterServer<[number]>\n    readonly lang: JDRegisterServer<[string]>\n    readonly volume: JDRegisterServer<[number]>\n\n    readonly synthesis: SpeechSynthesis\n\n    constructor() {\n        super(SRV_SPEECH_SYNTHESIS)\n\n        this.synthesis = typeof window !== \"undefined\" && window.speechSynthesis\n\n        this.enabled = this.addRegister<[boolean]>(SpeechSynthesisReg.Enabled, [\n            !this.synthesis?.paused,\n        ])\n        this.pitch = this.addRegister<[number]>(SpeechSynthesisReg.Pitch, [1])\n        this.rate = this.addRegister<[number]>(SpeechSynthesisReg.Rate, [1])\n        this.lang = this.addRegister<[string]>(SpeechSynthesisReg.Lang, [\"\"])\n        this.volume = this.addRegister<[number]>(SpeechSynthesisReg.Volume, [\n            0.5,\n        ])\n\n        this.addCommand(SpeechSynthesisCmd.Speak, this.handleSpeak.bind(this))\n        this.addCommand(SpeechSynthesisCmd.Cancel, this.handleCancel.bind(this))\n    }\n\n    private handleSpeak(pkt: Packet) {\n        const [text] = pkt.jdunpack(\"s\")\n        if (!this.synthesis || !text) return\n\n        const [pitch] = this.pitch.values()\n        const [rate] = this.pitch.values()\n        const [lang] = this.lang.values()\n        const [volume] = this.volume.values()\n\n        const utterance = new SpeechSynthesisUtterance(text)\n        utterance.pitch = pitch\n        utterance.rate = rate\n        utterance.lang = lang\n        utterance.volume = volume\n\n        this.synthesis.speak(utterance)\n    }\n\n    private handleCancel(pkt: Packet) {\n        this.synthesis?.cancel()\n    }\n}\n","import {\n    SRV_SWITCH,\n    SwitchEvent,\n    SwitchReg,\n    SwitchVariant,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\nexport default class SwitchServer extends SensorServer<[boolean]> {\n    readonly variant: JDRegisterServer<[SwitchVariant]>\n    readonly autoOffDelay: JDRegisterServer<[number]>\n    private autoOffInterval: any\n\n    constructor(options?: { autoOffDelay?: number; variant?: SwitchVariant }) {\n        super(SRV_SWITCH, { readingValues: [false], streamingInterval: 50 })\n        const { autoOffDelay, variant } = options || {}\n\n        this.variant = this.addRegister(\n            SwitchReg.Variant,\n            variant !== undefined ? [variant] : undefined\n        )\n        this.autoOffDelay = this.addRegister(\n            SwitchReg.AutoOffDelay,\n            autoOffDelay !== undefined ? [autoOffDelay] : undefined\n        )\n    }\n\n    async toggle() {\n        const [v] = this.reading.values()\n        if (!v) await this.switchOn()\n        else await this.switchOff()\n    }\n\n    async switchOn() {\n        const [v] = this.reading.values()\n        if (!v) {\n            this.reading.setValues([true])\n            await this.sendEvent(SwitchEvent.On)\n            this.startAutoOff()\n        }\n    }\n\n    async switchOff() {\n        const [v] = this.reading.values()\n        if (v) {\n            this.reading.setValues([false])\n            await this.sendEvent(SwitchEvent.Off)\n            this.stopAutoOff()\n        }\n    }\n\n    private startAutoOff() {\n        this.stopAutoOff()\n        if (this.autoOffDelay.data !== undefined) {\n            const [delay] = this.autoOffDelay.values()\n            this.autoOffInterval = setTimeout(this.switchOn.bind(this), delay)\n        }\n    }\n\n    private stopAutoOff() {\n        if (this.autoOffInterval) {\n            clearTimeout(this.autoOffInterval)\n            this.autoOffInterval = undefined\n        }\n    }\n}\n","import { SRV_TRAFFIC_LIGHT, TrafficLightReg } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class TrafficLightServer extends JDServiceServer {\n    readonly red: JDRegisterServer<[boolean]>\n    readonly orange: JDRegisterServer<[boolean]>\n    readonly green: JDRegisterServer<[boolean]>\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_TRAFFIC_LIGHT, options)\n\n        this.red = this.addRegister(TrafficLightReg.Red, [true])\n        this.orange = this.addRegister(TrafficLightReg.Orange, [false])\n        this.green = this.addRegister(TrafficLightReg.Green, [false])\n    }\n}\n","import {\n    LedCmd,\n    LedReg,\n    LedVariant,\n    REFRESH,\n    REGISTER_PRE_GET,\n    SRV_LED,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport interface LEDServiceOptions extends JDServerOptions {\n    ledCount?: number\n    variant?: LedVariant\n    luminousIntensity?: number\n    waveLength?: number\n    maxPower?: number\n    color?: [number, number, number]\n}\n\nexport default class LEDServer extends JDServiceServer {\n    readonly color: JDRegisterServer<[number, number, number]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly ledCount: JDRegisterServer<[number]>\n    readonly luminousIntensity: JDRegisterServer<[number]>\n    readonly waveLength: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[LedVariant]>\n\n    private _animation: {\n        red: number\n        green: number\n        blue: number\n        toRed: number\n        toGreen: number\n        toBlue: number\n        speed: number\n        start: number\n    }\n\n    constructor(options?: LEDServiceOptions) {\n        super(SRV_LED, options)\n        const {\n            ledCount = 1,\n            variant = LedVariant.ThroughHole,\n            luminousIntensity,\n            waveLength,\n            color = [255, 0, 0],\n            maxPower = 200,\n        } = options || {}\n\n        this.color = this.addRegister<[number, number, number]>(\n            LedReg.Color,\n            color\n        )\n        this.color.on(REGISTER_PRE_GET, this.updateColor.bind(this))\n        this.maxPower = this.addRegister(LedReg.MaxPower, [maxPower])\n        this.ledCount = this.addRegister(LedReg.LedCount, [ledCount])\n        if (luminousIntensity !== undefined)\n            this.luminousIntensity = this.addRegister(\n                LedReg.LuminousIntensity,\n                [luminousIntensity]\n            )\n        if (waveLength !== undefined)\n            this.waveLength = this.addRegister(LedReg.WaveLength, [waveLength])\n        this.variant = this.addRegister(LedReg.Variant, [variant])\n\n        this.addCommand(LedCmd.Animate, this.handleAnimate.bind(this))\n        // animation\n        this.on(REFRESH, this.updateColor.bind(this))\n    }\n\n    private updateColor() {\n        if (!this._animation) return // nothing to do\n\n        // compute new color\n        const { red, green, blue, toRed, toGreen, toBlue, speed, start } =\n            this._animation\n        const now = this.device.bus.timestamp\n        const elapsed = now - start\n        // see control.md\n        const total = ((512 / speed) * 100) | 0\n        const progress = elapsed / total // may overshoot\n        const alpha = Math.min(1, progress)\n        const oneAlpha = 1 - alpha\n\n        const newRed = (red * oneAlpha + alpha * toRed) | 0\n        const newGreen = (green * oneAlpha + alpha * toGreen) | 0\n        const newBlue = (blue * oneAlpha + alpha * toBlue) | 0\n\n        this.color.setValues([newRed, newGreen, newBlue])\n        // clear animation when done\n        if (progress > 1) this._animation = undefined\n    }\n\n    private handleAnimate(pkt: Packet) {\n        const [toRed, toGreen, toBlue, speed] =\n            pkt.jdunpack<[number, number, number, number]>(\"u8 u8 u8 u8\")\n\n        if (speed == 0) {\n            this.color.setValues([toRed, toGreen, toBlue])\n            this._animation = undefined\n        } else {\n            const [red, green, blue] = this.color.values()\n            this._animation = {\n                red,\n                green,\n                blue,\n                toRed,\n                toGreen,\n                toBlue,\n                speed,\n                start: this.device.bus.timestamp,\n            }\n        }\n    }\n}\n","import {\n    SoundPlayerCmd,\n    SoundPlayerReg,\n    SRV_SOUND_PLAYER,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport type SoundPlayerSound = [number, string]\n\nexport default class SoundPlayerServer extends JDServiceServer {\n    readonly volume: JDRegisterServer<[number]>\n    onPlay?: (name: string) => void\n    constructor(private readonly sounds: SoundPlayerSound[]) {\n        super(SRV_SOUND_PLAYER)\n\n        this.volume = this.addRegister(SoundPlayerReg.Volume, [0.5])\n        this.addCommand(\n            SoundPlayerCmd.ListSounds,\n            this.handleListSounds.bind(this)\n        )\n        this.addCommand(SoundPlayerCmd.Play, this.handlePlay.bind(this))\n    }\n\n    private async handleListSounds(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(this.sounds, sound =>\n            jdpack<[number, string]>(\"u32 s\", sound)\n        )\n    }\n\n    private handlePlay(pkt: Packet) {\n        const [name] = pkt.jdunpack(\"s\")\n        this.onPlay?.(name)\n    }\n}\n","import {\n    REGISTER_PRE_GET,\n    RngReg,\n    RngVariant,\n    SRV_RNG,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class RandomNumberGeneratorServer extends JDServiceServer {\n    readonly reading: JDRegisterServer<[Uint8Array]>\n    constructor() {\n        super(SRV_RNG, {\n            variant: RngVariant.WebCrypto,\n        })\n\n        this.reading = this.addRegister(RngReg.Random, [new Uint8Array(64)])\n        this.reading.on(REGISTER_PRE_GET, this.handleRefresh.bind(this))\n    }\n\n    private handleRefresh() {\n        // generate new data\n        const data = new Uint8Array(64)\n        if (typeof window !== \"undefined\") window.crypto.getRandomValues(data)\n        this.reading.setValues([data], true)\n    }\n}\n","import {\n    CHANGE,\n    CompassReg,\n    SRV_COMPASS,\n    SystemStatusCodes,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class CompassServer extends AnalogSensorServer {\n    private enabled: JDRegisterServer<[boolean]>\n    constructor() {\n        super(SRV_COMPASS, {\n            readingValues: [0],\n            minReading: 0,\n            maxReading: 360,\n            readingError: [1],\n        })\n\n        this.enabled = this.addRegister(CompassReg.Enabled, [false])\n        this.enabled.on(CHANGE, () => {\n            const [status] = this.statusCode.values()\n            if (status === SystemStatusCodes.CalibrationNeeded) {\n                console.log(\"start calibration\")\n                this.calibrate()\n            }\n        })\n    }\n}\n","import { DmxCmd, SRV_DMX } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { toHex } from \"../jdom/utils\"\n\nexport default class DMXServer extends JDServiceServer {\n    constructor() {\n        super(SRV_DMX, {\n            intensityValues: [0],\n        })\n\n        this.addCommand(DmxCmd.Send, this.handleSend.bind(this))\n    }\n\n    private handleSend(pkt: Packet) {\n        // ignore\n        console.log(`dmx send`, toHex(pkt.data))\n    }\n}\n","/**\n * @internal\n */\nexport function inIFrame() {\n    try {\n        return typeof window !== \"undefined\" && window.self !== window.top\n    } catch (e) {\n        return typeof window !== \"undefined\"\n    }\n}\n","import { getNumber, NumberFormat, setNumber } from \"../jdom/buffer\"\nimport { BitRadioCmd, BitRadioReg, SRV_BIT_RADIO } from \"../jdom/constants\"\nimport { inIFrame } from \"../jdom/iframeclient\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { memcpy, stringToBuffer } from \"../jdom/utils\"\n\n// keep in sync with CODAL\nconst RADIO_MAX_PACKET_SIZE = 32\n//const MAX_FIELD_DOUBLE_NAME_LENGTH = 8;\nconst MAX_PAYLOAD_LENGTH = 20\nconst PACKET_PREFIX_LENGTH = 9\nconst VALUE_PACKET_NAME_LEN_OFFSET = 13\nconst DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET = 17\n\n// Packet Spec:\n// | 0              | 1 ... 4       | 5 ... 8           | 9 ... 28\n// ----------------------------------------------------------------\n// | packet type    | system time   | serial number     | payload\n//\n// Serial number defaults to 0 unless enabled by user\n\n// payload: number (9 ... 12)\nconst PACKET_TYPE_NUMBER = 0\n// payload: number (9 ... 12), name length (13), name (14 ... 26)\nconst PACKET_TYPE_VALUE = 1\n// payload: string length (9), string (10 ... 28)\nconst PACKET_TYPE_STRING = 2\n// payload: buffer length (9), buffer (10 ... 28)\nconst PACKET_TYPE_BUFFER = 3\n// payload: number (9 ... 16)\nconst PACKET_TYPE_DOUBLE = 4\n// payload: number (9 ... 16), name length (17), name (18 ... 26)\nconst PACKET_TYPE_DOUBLE_VALUE = 5\n\nfunction getStringOffset(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return PACKET_PREFIX_LENGTH\n        case PACKET_TYPE_VALUE:\n            return VALUE_PACKET_NAME_LEN_OFFSET\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET\n        default:\n            return undefined\n    }\n}\n\n/*\nfunction getMaxStringLength(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return MAX_PAYLOAD_LENGTH - 2;\n        case PACKET_TYPE_VALUE:\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return MAX_FIELD_DOUBLE_NAME_LENGTH;\n        default:\n            return undefined;\n    }\n}\n*/\n\nfunction truncateString(str: string) {\n    // TODO\n    return str\n}\n\nclass RadioPacket {\n    public static getPacket(data: Uint8Array) {\n        if (!data) return undefined\n        // last 4 bytes is RSSi\n        return new RadioPacket(data)\n    }\n\n    public static mkPacket(packetType: number) {\n        const res = new RadioPacket()\n        res.data[0] = packetType\n        return res\n    }\n\n    private constructor(public readonly data?: Uint8Array) {\n        if (!data) this.data = new Uint8Array(RADIO_MAX_PACKET_SIZE + 4)\n    }\n\n    get signal() {\n        return getNumber(this.data, NumberFormat.Int32LE, this.data.length - 4)\n    }\n\n    get packetType() {\n        return this.data[0]\n    }\n\n    get time() {\n        return getNumber(this.data, NumberFormat.Int32LE, 1)\n    }\n\n    set time(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 1, val)\n    }\n\n    get serial() {\n        return getNumber(this.data, NumberFormat.Int32LE, 5)\n    }\n\n    set serial(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 5, val)\n    }\n\n    get stringPayload() {\n        const offset = getStringOffset(this.packetType) as number\n        return offset\n            ? this.data.slice(offset + 1, this.data[offset]).toString()\n            : undefined\n    }\n\n    set stringPayload(val: string) {\n        const offset = getStringOffset(this.packetType) as number\n        if (offset) {\n            const buf = stringToBuffer(truncateString(val))\n            this.data[offset] = buf.length\n            memcpy(this.data, offset + 1, buf)\n        }\n    }\n\n    get numberPayload() {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                return getNumber(\n                    this.data,\n                    NumberFormat.Int32LE,\n                    PACKET_PREFIX_LENGTH\n                )\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                return getNumber(\n                    this.data,\n                    NumberFormat.Float64LE,\n                    PACKET_PREFIX_LENGTH\n                )\n        }\n        return undefined\n    }\n\n    set numberPayload(val: number) {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                setNumber(\n                    this.data,\n                    NumberFormat.Int32LE,\n                    PACKET_PREFIX_LENGTH,\n                    val\n                )\n                break\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                setNumber(\n                    this.data,\n                    NumberFormat.Float64LE,\n                    PACKET_PREFIX_LENGTH,\n                    val\n                )\n                break\n        }\n    }\n\n    get bufferPayload() {\n        const len = this.data[PACKET_PREFIX_LENGTH]\n        return this.data.slice(\n            PACKET_PREFIX_LENGTH + 1,\n            PACKET_PREFIX_LENGTH + 1 + len\n        )\n    }\n\n    set bufferPayload(b: Uint8Array) {\n        const len = Math.min(b.length, MAX_PAYLOAD_LENGTH - 1)\n        this.data[PACKET_PREFIX_LENGTH] = len\n        memcpy(this.data, PACKET_PREFIX_LENGTH + 1, b, 0, len)\n    }\n\n    hasString() {\n        return (\n            this.packetType === PACKET_TYPE_STRING ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE\n        )\n    }\n\n    hasNumber() {\n        return (\n            this.packetType === PACKET_TYPE_NUMBER ||\n            this.packetType === PACKET_TYPE_DOUBLE ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE\n        )\n    }\n}\n\n/**\n * A server implementation of the bit:radio service\n * @category Servers\n */\nexport default class BitRadioServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly group: JDRegisterServer<[number]>\n    readonly transmissionPower: JDRegisterServer<[number]>\n    readonly frequencyBand: JDRegisterServer<[number]>\n\n    constructor() {\n        super(SRV_BIT_RADIO)\n\n        this.enabled = this.addRegister<[boolean]>(BitRadioReg.Enabled, [false])\n        this.group = this.addRegister<[number]>(BitRadioReg.Group, [1])\n        this.transmissionPower = this.addRegister<[number]>(\n            BitRadioReg.TransmissionPower,\n            [6]\n        )\n        this.frequencyBand = this.addRegister<[number]>(\n            BitRadioReg.FrequencyBand,\n            [7]\n        )\n\n        this.addCommand(\n            BitRadioCmd.SendString,\n            this.handleSendString.bind(this)\n        )\n        this.addCommand(\n            BitRadioCmd.SendNumber,\n            this.handleSendNumber.bind(this)\n        )\n        this.addCommand(BitRadioCmd.SendValue, this.handleSendValue.bind(this))\n        this.addCommand(\n            BitRadioCmd.SendBuffer,\n            this.handleSendBuffer.bind(this)\n        )\n    }\n\n    private handleSendString(pkt: Packet) {\n        const [message] = pkt.jdunpack<[string]>(\"s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_STRING)\n        rpkt.stringPayload = message\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendNumber(pkt: Packet) {\n        const [value] = pkt.jdunpack<[number, string]>(\"f64\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE)\n        rpkt.numberPayload = value\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendValue(pkt: Packet) {\n        const [value, name] = pkt.jdunpack<[number, string]>(\"f64 s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE_VALUE)\n        rpkt.stringPayload = name\n        rpkt.numberPayload = value\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendBuffer(pkt: Packet) {\n        const { data } = pkt\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_BUFFER)\n        rpkt.bufferPayload = data\n        this.sendRadioPacket(rpkt)\n    }\n\n    private sendRadioPacket(rpkt: RadioPacket) {\n        const [on] = this.enabled.values()\n        if (!on) return // radio is off\n\n        const { bus } = this.device\n        const { timestamp } = bus\n        const [group] = this.group.values()\n        rpkt.time = timestamp\n        rpkt.serial = 0 // todo\n        const msg = {\n            type: \"radiopacket\",\n            broadcast: true,\n            // TODO\n            rssi: -75,\n            // TODO\n            serial: 0,\n            time: bus.timestamp,\n            payload: {\n                groupId: group,\n                type: 0, // buffer\n                bufferData: rpkt.data,\n            },\n        }\n        // send message to parent\n        console.log(`bitradio: send`, msg)\n        if (inIFrame()) {\n            window.parent.postMessage(msg, \"*\")\n        }\n    }\n}\n","import { PowerReg, SRV_POWER } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class PowerServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly overload: JDRegisterServer<[boolean]>\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_POWER, options)\n        this.enabled = this.addRegister<[boolean]>(PowerReg.Allowed, [false])\n        this.maxPower = this.addRegister<[number]>(PowerReg.MaxPower, [500])\n        this.overload = this.addRegister<[boolean]>(PowerReg.PowerStatus, [\n            false,\n        ])\n    }\n}\n","import { CapacitiveButtonReg, SRV_CAPACITIVE_BUTTON } from \"../jdom/constants\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport RegisterServer from \"../jdom/servers/registerserver\"\n\nexport default class CapacitiveButtonServer extends JDServiceServer {\n    readonly threshold: RegisterServer<[number]>\n\n    constructor(options?: { threshold?: number } & JDServerOptions) {\n        super(SRV_CAPACITIVE_BUTTON, options)\n        const { threshold = 0.5 } = options || {}\n\n        this.threshold = this.addRegister(CapacitiveButtonReg.Threshold, [\n            threshold,\n        ])\n    }\n}\n","import {\n    CHANGE,\n    HidKeyboardAction,\n    HidKeyboardCmd,\n    HidKeyboardModifiers,\n    SRV_HID_KEYBOARD,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { SMap } from \"../jdom/utils\"\n\nexport default class HIDKeyboardServer extends JDServiceServer {\n    private _lastKey: [number, HidKeyboardModifiers, HidKeyboardAction][]\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_HID_KEYBOARD, options)\n\n        this.addCommand(HidKeyboardCmd.Clear, this.handleClear.bind(this))\n        this.addCommand(HidKeyboardCmd.Key, this.handleKey.bind(this))\n    }\n\n    get lastKey() {\n        return this._lastKey\n    }\n\n    private handleKey(pkt: Packet) {\n        const [rest] =\n            pkt.jdunpack<[[number, HidKeyboardModifiers, HidKeyboardAction][]]>(\n                \"r: u16 u8 u8\"\n            )\n        this._lastKey = rest\n        this.emit(CHANGE)\n    }\n\n    private handleClear() {\n        if (this._lastKey) {\n            this._lastKey = undefined\n            this.emit(CHANGE)\n        }\n    }\n}\n/**\n * @internal\n */\nexport const selectors: SMap<number> = {\n    a: 0x04,\n    b: 0x05,\n    c: 0x06,\n    d: 0x07,\n    e: 0x08,\n    f: 0x09,\n    g: 0x0a,\n    h: 0x0b,\n    i: 0x0c,\n    j: 0x0d,\n    k: 0x0e,\n    l: 0x0f,\n    m: 0x10,\n    n: 0x11,\n    o: 0x12,\n    p: 0x13,\n    q: 0x14,\n    r: 0x15,\n    s: 0x16,\n    t: 0x17,\n    u: 0x18,\n    v: 0x19,\n    w: 0x1a,\n    x: 0x1b,\n    y: 0x1c,\n    z: 0x1d,\n\n    \"1\": 0x1e,\n    \"2\": 0x1f,\n    \"3\": 0x20,\n    \"4\": 0x21,\n    \"5\": 0x22,\n    \"6\": 0x23,\n    \"7\": 0x24,\n    \"8\": 0x25,\n    \"9\": 0x26,\n    \"0\": 0x27,\n\n    \"!\": 0x1e,\n    \"@\": 0x1f,\n    \"#\": 0x20,\n    $: 0x21,\n    \"%\": 0x22,\n    \"^\": 0x23,\n    \"&\": 0x24,\n    \"*\": 0x25,\n    \"(\": 0x26,\n    \")\": 0x27,\n\n    enter: 0x28,\n    escape: 0x29,\n    backspace: 0x2a,\n    tab: 0x2b,\n    space: 0x2c,\n    \" \": 0x2c,\n    \"-\": 0x2d,\n    _: 0x2d,\n    \"=\": 0x2e,\n    \"+\": 0x2e,\n    \"[\": 0x2f,\n    \"{\": 0x2f,\n    \"]\": 0x30,\n    \"}\": 0x30,\n    \"\\\\\": 0x31,\n    \"|\": 0x31,\n    // non-US #\n    \"~\": 0x32,\n    \";\": 0x33,\n    \":\": 0x33,\n    \"'\": 0x34,\n    '\"': 0x34,\n    \"`\": 0x35,\n    \",\": 0x36,\n    //\"<\": 0x37,\n    \".\": 0x37,\n    //\">\": 0x37,\n    \"/\": 0x38,\n    \"?\": 0x38,\n    capslock: 0x39,\n    f1: 0x3a,\n    f2: 0x3b,\n    f3: 0x3c,\n    f4: 0x3d,\n    f5: 0x3e,\n    f6: 0x3f,\n    f7: 0x40,\n    f8: 0x41,\n    f9: 0x42,\n    f10: 0x43,\n    f11: 0x44,\n    f12: 0x45,\n    printscreen: 0x46,\n    scrolllock: 0x47,\n    pause: 0x48,\n    insert: 0x49,\n    home: 0x4a,\n    pageup: 0x4b,\n    delete: 0x4c,\n    end: 0x4d,\n    pagedown: 0x4e,\n    arrowright: 0x4f,\n    arrowleft: 0x50,\n    arrowdown: 0x51,\n    arrowup: 0x52,\n    numlock: 0x53,\n    numpaddivide: 0x54,\n    numpadmultiply: 0x55,\n    numpadsubstract: 0x56,\n    numpadadd: 0x57,\n    numpadenter: 0x58,\n    numpad1: 0x59,\n    numpad2: 0x5a,\n    numpad3: 0x5b,\n    numpad4: 0x5c,\n    numpad5: 0x5d,\n    numpad6: 0x5e,\n    numpad7: 0x5f,\n    numpad8: 0x60,\n    numpad9: 0x61,\n    numpad0: 0x62,\n    numpaddecimal: 0x63,\n    numpadequal: 0x67,\n    f13: 0x68,\n    f14: 0x69,\n    f15: 0x6a,\n    f16: 0x6b,\n    f17: 0x6c,\n    f18: 0x6d,\n    f19: 0x6e,\n    f20: 0x6f,\n    f21: 0x70,\n    f22: 0x71,\n    f23: 0x72,\n    f24: 0x73,\n    execute: 0x74,\n    help: 0x75,\n    contextmenu: 0x76,\n    select: 0x77,\n    stop: 0x78,\n    again: 0x79,\n    undo: 0x7a,\n    cut: 0x7b,\n    copy: 0x7c,\n    paste: 0x7d,\n    find: 0x7e,\n    mute: 0x7f,\n    volumeup: 0x80,\n    volumedown: 0x81,\n\n    numpadcomma: 0x85,\n}\n/**\n * @internal\n */\nexport const reverseSelectors: { [index: number]: string } = Object.keys(\n    selectors\n).reduce((r, key) => {\n    if (!r[selectors[key]]) r[selectors[key]] = key\n    return r\n}, {} as { [index: number]: string })\n\n/**\n * @internal\n */\nexport const modifierCodes = {\n    controlleft: HidKeyboardModifiers.LeftControl,\n    altleft: HidKeyboardModifiers.LeftAlt,\n    shiftleft: HidKeyboardModifiers.LeftShift,\n    metaleft: HidKeyboardModifiers.LeftGUI,\n\n    controlright: HidKeyboardModifiers.RightControl,\n    altright: HidKeyboardModifiers.RightAlt,\n    shiftright: HidKeyboardModifiers.RightShift,\n    metaright: HidKeyboardModifiers.RightGUI,\n}\n\n/**\n * @internal\n */\nexport function renderKeyboardKey(\n    selector: number,\n    modifiers: HidKeyboardModifiers,\n    pretty: boolean\n) {\n    const flags = pretty\n        ? [\n              \"Ctrl\",\n              \"Shift\",\n              \"Alt\",\n              \"Cmd\",\n              \"Ctrl Right\",\n              \"Shift Right\",\n              \"AltRight\",\n              \"Cmd Right\",\n          ]\n        : [\n              \"{controlleft}\",\n              \"{shiftleft}\",\n              \"{altleft}\",\n              \"{metaleft}\",\n              \"{controlright}\",\n              \"{shiftright}\",\n              \"{altright}\",\n              \"{metaright}\",\n          ]\n    const sep = pretty ? \" + \" : \" \"\n    const values = []\n    flags.forEach((flag, i) => {\n        if (modifiers & (1 << i)) {\n            values.push(flag)\n        }\n    })\n    const sel = reverseSelectors[selector]\n    if (sel !== undefined)\n        values.push(\n            pretty\n                ? sel.toUpperCase()\n                : !pretty && sel.length > 1\n                ? `{${sel}}`\n                : sel\n        )\n    const value = values.filter(v => !!v).join(sep)\n    return value\n}\n","import {\n    CHANGE,\n    HidMouseButton,\n    HidMouseButtonEvent,\n    HidMouseCmd,\n    SRV_HID_MOUSE,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport function renderHidMouseButtons(buttons: HidMouseButton) {\n    const btns = [\n        buttons & HidMouseButton.Left ? \"left\" : \"\",\n        buttons & HidMouseButton.Right ? \"right\" : \"\",\n        buttons & HidMouseButton.Middle ? \"middle\" : \"\",\n    ]\n        .filter(b => !!b)\n        .join(\", \")\n    return btns\n}\n\nexport default class HIDMouseServer extends JDServiceServer {\n    private _lastCommand: string\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_HID_MOUSE, options)\n\n        this.addCommand(HidMouseCmd.Move, this.handleMove.bind(this))\n        this.addCommand(HidMouseCmd.SetButton, this.handleSetButton.bind(this))\n        this.addCommand(HidMouseCmd.Wheel, this.handleWheel.bind(this))\n    }\n\n    get lastCommand() {\n        return this._lastCommand\n    }\n\n    setLastCommand(s: string) {\n        if (this._lastCommand !== s) {\n            this._lastCommand = s\n            this.emit(CHANGE)\n        }\n    }\n\n    private handleMove(pkt: Packet) {\n        const [dx, dy, time] =\n            pkt.jdunpack<[number, number, number]>(\"i16 i16 u16\")\n        this.setLastCommand(`move ${dx} ${dy} ${time}`)\n    }\n\n    private handleSetButton(pkt: Packet) {\n        const [buttons, event] =\n            pkt.jdunpack<[HidMouseButton, HidMouseButtonEvent]>(\"u16 u8\")\n        const btns = renderHidMouseButtons(buttons)\n        this.setLastCommand(\n            `set buttons ${btns || \"?\"} ${(\n                HidMouseButtonEvent[event] || \"?\"\n            ).toLocaleLowerCase()}`\n        )\n    }\n\n    private handleWheel(pkt: Packet) {\n        const [dy, time] = pkt.jdunpack<[number, number]>(\"i16 u16\")\n        this.setLastCommand(`wheel ${dy} ${time}`)\n    }\n}\n","import { DimmerReg, DimmerVariant, SRV_DIMMER } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class DimmerServer extends JDServiceServer {\n    readonly intensity: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[DimmerVariant]>\n\n    constructor(\n        instanceName?: string,\n        options: { variant?: DimmerVariant } = {}\n    ) {\n        super(SRV_DIMMER, { instanceName })\n\n        const { variant = DimmerVariant.Light } = options\n\n        this.intensity = this.addRegister<[number]>(DimmerReg.Intensity, [0])\n        this.variant = this.addRegister<[number]>(DimmerReg.Variant, [variant])\n    }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n    CHANGE,\n    SRV_AZURE_IOT_HUB_HEALTH,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { delay } from \"../jdom/utils\"\n\nfunction splitPair(kv: string): string[] {\n    const i = kv.indexOf(\"=\")\n    if (i < 0) return [kv, \"\"]\n    else return [kv.slice(0, i), kv.slice(i + 1)]\n}\n\nfunction parsePropertyBag(\n    msg: string,\n    separator?: string\n): Record<string, string> {\n    const r: Record<string, string> = {}\n    msg.split(separator || \"&\")\n        .map(kv => splitPair(kv))\n        .forEach(\n            parts =>\n                (r[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]))\n        )\n    return r\n}\n\nexport default class AzureIoTHubHealthServer extends JDServiceServer {\n    readonly hubName: JDRegisterServer<[string]>\n    readonly hubDeviceId: JDRegisterServer<[string]>\n    readonly connectionStatus: JDRegisterServer<\n        [AzureIotHubHealthConnectionStatus]\n    >\n    connectionString: string\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_AZURE_IOT_HUB_HEALTH, options)\n\n        this.hubName = this.addRegister(AzureIotHubHealthReg.HubName, [\"\"])\n        this.hubDeviceId = this.addRegister(AzureIotHubHealthReg.HubDeviceId, [\n            \"\",\n        ])\n        this.connectionStatus = this.addRegister(\n            AzureIotHubHealthReg.ConnectionStatus,\n            [AzureIotHubHealthConnectionStatus.Connected]\n        )\n        this.connectionStatus.on(CHANGE, () =>\n            this.sendEvent(AzureIotHubHealthEvent.ConnectionStatusChange)\n        )\n        this.connectionString = \"\"\n\n        this.addCommand(\n            AzureIotHubHealthCmd.Connect,\n            this.handleConnect.bind(this)\n        )\n        this.addCommand(\n            AzureIotHubHealthCmd.Disconnect,\n            this.handleDisconnect.bind(this)\n        )\n        this.addCommand(\n            AzureIotHubHealthCmd.SetConnectionString,\n            this.handleSetConnectionString.bind(this)\n        )\n    }\n\n    private async handleConnect() {\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Connecting,\n        ])\n        await delay(500)\n        if (!this.connectionString) this.connectionStatus.setValues([401])\n        else\n            this.connectionStatus.setValues([\n                AzureIotHubHealthConnectionStatus.Connected,\n            ])\n    }\n\n    private async handleDisconnect() {\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Disconnecting,\n        ])\n        await delay(500)\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Disconnected,\n        ])\n    }\n\n    private async handleSetConnectionString(pkt: Packet) {\n        const newConnectionString = pkt.stringData\n        if (newConnectionString !== this.connectionString) {\n            await this.handleDisconnect()\n            this.connectionString = newConnectionString\n            const connStringParts = parsePropertyBag(this.connectionString, \";\")\n            this.hubName.setValues([connStringParts[\"HostName\"] || \"\"])\n            this.hubDeviceId.setValues([connStringParts[\"DeviceId\"] || \"\"])\n            // notify connection string changed\n            this.sendEvent(AzureIotHubHealthEvent.ConnectionStatusChange)\n        }\n    }\n}\n","import {\n    CHANGE,\n    REFRESH,\n    SRV_VIBRATION_MOTOR,\n    VibrationMotorCmd,\n    VibrationMotorReg,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class VibrationMotorServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n\n    static VIBRATE_PATTERN = \"vibratePattern\"\n\n    private _animation: {\n        start: number\n        pattern: [number, number][]\n    }\n    private _animationStep = -1\n\n    constructor() {\n        super(SRV_VIBRATION_MOTOR)\n        this.enabled = this.addRegister<[boolean]>(VibrationMotorReg.Enabled, [\n            false,\n        ])\n        this.addCommand(\n            VibrationMotorCmd.Vibrate,\n            this.handleVibrate.bind(this)\n        )\n        this.on(REFRESH, this.handleRefresh.bind(this))\n    }\n\n    private handleRefresh() {\n        if (!this._animation) return // nothing to do\n\n        const { start, pattern } = this._animation\n        const now = this.device.bus.timestamp\n        const elapsed = now - start\n        let t = 0\n        for (let i = 0; i < pattern.length; ++i) {\n            const [duration, speed] = pattern[i]\n            const dt = duration << 3\n            t += dt\n            if (t - dt <= elapsed && t > elapsed) {\n                // we're playing this note\n                if (this._animationStep !== i) {\n                    this._animationStep = i\n                    this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                        duration,\n                        speed,\n                    })\n                }\n                break\n            }\n        }\n        if (elapsed > t) {\n            // animation finished\n            this._animation = undefined\n            this._animationStep = -1\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration: 0,\n                speed: 0,\n            })\n            this.emit(CHANGE)\n        }\n    }\n\n    private handleVibrate(pkt: Packet) {\n        const [pattern] = pkt.jdunpack<[[number, number][]]>(\"r: u8 u0.8\")\n        this._animation = {\n            start: this.device.bus.timestamp,\n            pattern,\n        }\n        this._animationStep = -1\n        if (pattern.length) {\n            const [duration, speed] = pattern[0]\n            this._animationStep = 0\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration,\n                speed,\n            })\n        }\n        this.emit(CHANGE)\n    }\n}\n","import {\n    CHANGE,\n    SRV_WIFI,\n    WifiAPFlags,\n    WifiCmd,\n    WifiEvent,\n    WifiReg,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport { Packet } from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport { randomBytes } from \"../jdom/random\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { toHex } from \"../jdom/utils\"\n\ninterface ScanResult {\n    flags: WifiAPFlags\n    rssi: number\n    channel: number\n    bssid: Uint8Array\n    ssid: string\n}\n\nexport class WifiServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly connected: JDRegisterServer<[boolean]>\n    readonly ssid: JDRegisterServer<[string]>\n    readonly ipAddress: JDRegisterServer<[Uint8Array]>\n    readonly eui48: JDRegisterServer<[Uint8Array]>\n\n    private _lastScanResults: ScanResult[] = [\n        {\n            ssid: \"HOME\",\n            bssid: new Uint8Array(0),\n            rssi: -42,\n            channel: 10,\n            flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n        },\n    ]\n    private _knownNetworks: {\n        ssid: string\n        flags: WifiAPFlags\n        priority: number\n        password: string\n    }[] = [\n        {\n            ssid: \"HOME\",\n            password: \"home\",\n            priority: 0,\n            flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n        },\n    ]\n\n    constructor() {\n        super(SRV_WIFI, { intensityValues: [true] })\n\n        this.enabled = this.addRegister(WifiReg.Enabled, [true])\n        this.connected = this.addRegister(WifiReg.Connected, [false])\n        this.ssid = this.addRegister(WifiReg.Ssid, [\"\"])\n        this.ipAddress = this.addRegister<[Uint8Array]>(WifiReg.IpAddress, [\n            new Uint8Array(0),\n        ])\n        this.eui48 = this.addRegister<[Uint8Array]>(WifiReg.Eui48, [\n            randomBytes(6),\n        ])\n\n        this.addCommand(WifiCmd.Scan, this.handleScan.bind(this))\n        this.addCommand(WifiCmd.Reconnect, this.handleReconnect.bind(this))\n        this.addCommand(\n            WifiCmd.LastScanResults,\n            this.handleLastScanResults.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.ListKnownNetworks,\n            this.handleListKnownNetworks.bind(this)\n        )\n        this.addCommand(WifiCmd.AddNetwork, this.handleAddNetwork.bind(this))\n        this.addCommand(\n            WifiCmd.ForgetAllNetworks,\n            this.handleForgetAllNetworks.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.ForgetNetwork,\n            this.handleForgetNetwork.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.SetNetworkPriority,\n            this.handleSetNetworkPriority.bind(this)\n        )\n\n        this.ipAddress.on(CHANGE, this.handleIpChange.bind(this))\n        this.enabled.on(CHANGE, this.handleEnabledChange.bind(this))\n    }\n\n    private handleEnabledChange() {\n        const [enabled] = this.enabled.values()\n        if (!enabled) this.disconnect()\n        else this.connect()\n    }\n\n    private handleIpChange() {\n        const [ip] = this.ipAddress.values()\n        console.debug(`wifi: ip ${toHex(ip)}`)\n        if (ip?.length) this.sendEvent(WifiEvent.GotIp)\n        else this.sendEvent(WifiEvent.LostIp)\n    }\n\n    private get scannedKnownNetworks() {\n        return this._lastScanResults.filter(n =>\n            this._knownNetworks.some(kn => kn.ssid === n.ssid)\n        )\n    }\n\n    private handleReconnect() {\n        console.debug(`wifi: reconnect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n            enabled: this.enabled.values()[0],\n            connected: this.connected.values()[0],\n        })\n        this.disconnect()\n        if (this.scannedKnownNetworks.length) {\n            console.debug(`wifi: reconnect, connect`)\n            this.enabled.setValues([true])\n        }\n    }\n\n    private connect() {\n        console.debug(`wifi: connect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n        })\n        const network = this.scannedKnownNetworks[0]\n        const { ssid } = network || {}\n        this.ssid.setValues([ssid || \"\"])\n        this.enabled.setValues([!!ssid])\n        this.connected.setValues([!!ssid])\n        this.ipAddress.setValues([randomBytes(4)])\n    }\n\n    private disconnect() {\n        console.debug(`wifi: disconnect`)\n        this.ssid.setValues([\"\"])\n        this.connected.setValues([false])\n        this.enabled.setValues([false])\n        this.ipAddress.setValues([new Uint8Array(0)])\n    }\n\n    private scan() {\n        this._lastScanResults = [\n            {\n                ssid: \"HOME\",\n                bssid: new Uint8Array(0),\n                rssi: -42,\n                channel: 10,\n                flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n            },\n            Math.random() > 0.5 && {\n                ssid: \"OFFICE\",\n                bssid: new Uint8Array(0),\n                rssi: -70,\n                channel: 11,\n                flags: WifiAPFlags.IEEE_802_11N,\n            },\n        ].filter(res => !!res)\n\n        this.sendEvent(\n            WifiEvent.ScanComplete,\n            jdpack<[number, number]>(\"u16 u16\", [\n                this._lastScanResults.length,\n                this.scannedKnownNetworks.length,\n            ])\n        )\n    }\n\n    private handleScan() {\n        this.scan()\n    }\n\n    private async handleLastScanResults(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        console.debug(`list scan results`, this._lastScanResults)\n        await pipe.respondForEach(\n            this._lastScanResults,\n            ({ flags, rssi, channel, bssid, ssid }) =>\n                jdpack<[WifiAPFlags, number, number, Uint8Array, string]>(\n                    \"u32 x[4] i8 u8 b[6] s[33]\",\n                    [flags, rssi, channel, bssid, ssid]\n                )\n        )\n    }\n\n    private async handleListKnownNetworks(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        console.debug(`list knowns`, this._knownNetworks)\n        await pipe.respondForEach(\n            this._knownNetworks,\n            ({ priority, flags, ssid }) =>\n                jdpack<[number, number, string]>(\"i16 i16 s\", [\n                    priority,\n                    flags,\n                    ssid,\n                ])\n        )\n    }\n\n    private handleAddNetwork(pkt: Packet) {\n        console.debug(`wifi: add network`)\n        const [ssid, password] = pkt.jdunpack<[string, string]>(\"z z\")\n        let network = this._knownNetworks.find(n => n.ssid === ssid)\n        if (!network) {\n            const scanned = this._lastScanResults.find(s => s.ssid === ssid)\n            this._knownNetworks.push(\n                (network = {\n                    ssid,\n                    flags: scanned?.flags,\n                    priority: 0,\n                    password: \"\",\n                })\n            )\n        }\n        network.password = password\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleForgetAllNetworks() {\n        this._knownNetworks = []\n        this.disconnect()\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleForgetNetwork(pkt: Packet) {\n        const [ssid] = pkt.jdunpack<[string]>(\"s\")\n        this._knownNetworks = this._knownNetworks.filter(\n            network => network.ssid !== ssid\n        )\n        const [currentSsid] = this.ssid.values()\n        if (ssid === currentSsid) this.disconnect()\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleSetNetworkPriority(pkt: Packet) {\n        const [priority, ssid] = pkt.jdunpack<[number, string]>(\"i16 s\")\n        const network = this._knownNetworks.find(\n            network => network.ssid === ssid\n        )\n        if (network) network.priority = priority\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n}\nexport default WifiServer\n","import JDBus from \"../jdom/bus\"\nimport {\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n    DistanceVariant,\n    LedPixelVariant,\n    PotentiometerVariant,\n    RelayReg,\n    RelayVariant,\n    SRV_ACCELEROMETER,\n    SRV_BAROMETER,\n    SRV_BUTTON,\n    SRV_BUZZER,\n    SRV_CHARACTER_SCREEN,\n    SRV_DISTANCE,\n    SRV_E_CO2,\n    SRV_HUMIDITY,\n    SRV_LED_PIXEL,\n    SRV_MATRIX_KEYPAD,\n    SRV_MOTOR,\n    SRV_POTENTIOMETER,\n    SRV_PROTO_TEST,\n    SRV_RAIN_GAUGE,\n    SRV_RELAY,\n    SRV_JOYSTICK,\n    SRV_ROTARY_ENCODER,\n    SRV_SERVO,\n    SRV_SETTINGS,\n    SRV_SWITCH,\n    SRV_THERMOMETER,\n    SRV_TRAFFIC_LIGHT,\n    SRV_VIBRATION_MOTOR,\n    SRV_TVOC,\n    SRV_WIND_DIRECTION,\n    SRV_WIND_SPEED,\n    SwitchVariant,\n    ThermometerVariant,\n    WindSpeedReg,\n    ECO2Variant,\n    SRV_SPEECH_SYNTHESIS,\n    SRV_SOIL_MOISTURE,\n    JoystickVariant,\n    SRV_REAL_TIME_CLOCK,\n    SRV_ILLUMINANCE,\n    SRV_LIGHT_LEVEL,\n    LightLevelVariant,\n    SRV_UV_INDEX,\n    SRV_REFLECTED_LIGHT,\n    ReflectedLightVariant,\n    SRV_MOTION,\n    SRV_LED,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n    SevenSegmentDisplayReg,\n    SRV_HEART_RATE,\n    HeartRateVariant,\n    LedVariant,\n    SRV_WATER_LEVEL,\n    SRV_SOUND_LEVEL,\n    SRV_COLOR,\n    SRV_SOUND_PLAYER,\n    SRV_PULSE_OXIMETER,\n    SRV_WEIGHT_SCALE,\n    WeightScaleVariant,\n    SRV_DOT_MATRIX,\n    SRV_RNG,\n    SRV_COMPASS,\n    SRV_THERMOCOUPLE,\n    ThermocoupleVariant,\n    SRV_GYROSCOPE,\n    SoundLevelReg,\n    SRV_SOUND_SPECTRUM,\n    SoundSpectrumReg,\n    SRV_SOLENOID,\n    SRV_DMX,\n    SRV_BIT_RADIO,\n    SRV_POWER,\n    CHANGE,\n    JoystickButtons,\n    SRV_HID_KEYBOARD,\n    SRV_HID_MOUSE,\n    //    SRV_AZURE_IOT_HUB,\n    SRV_DIMMER,\n    DimmerVariant,\n    SRV_AZURE_IOT_HUB_HEALTH,\n    DotMatrixVariant,\n    FlexVariant,\n    SRV_FLEX,\n    SRV_WIFI,\n} from \"../jdom/constants\"\nimport JDServerServiceProvider from \"../jdom/servers/serverserviceprovider\"\nimport ProtocolTestServer from \"../jdom/servers/protocoltestserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport ButtonServer from \"./buttonserver\"\nimport BuzzerServer from \"./buzzerserver\"\nimport CharacterScreenServer from \"./characterscreenserver\"\nimport JoystickServer, {\n    JOYSTICK_ARCADE_BUTTONS,\n    JOYSTICK_DPAD_AB_BUTTONS,\n} from \"./joystickserver\"\nimport DotMatrixServer from \"./dotmatrixserver\"\nimport LedPixelServer from \"./ledpixelserver\"\nimport MatrixKeypadServer from \"./matrixkeypadserver\"\nimport MotorServer from \"./motorserver\"\nimport RainGaugeServer from \"./raingaugeserver\"\nimport RealTimeClockServer from \"./realtimeclockserver\"\nimport ReflectedLightServer from \"./reflectedlightserver\"\nimport RotaryEncoderServer from \"./rotaryencoderserver\"\nimport SensorServer, { SensorServiceOptions } from \"./sensorserver\"\nimport ServoServer from \"./servoserver\"\nimport SettingsServer from \"./settingsserver\"\nimport SpeechSynthesisServer from \"./speechsynthesisserver\"\nimport SwitchServer from \"./switchserver\"\nimport TrafficLightServer from \"./trafficlightserver\"\nimport LEDServer from \"./ledserver\"\nimport { fromHex, hash, stringToUint8Array, toFullHex } from \"../jdom/utils\"\nimport SoundPlayerServer, { SoundPlayerSound } from \"./soundplayerserver\"\nimport AnalogSensorServer, {\n    AnalogSensorServerOptions,\n} from \"./analogsensorserver\"\nimport RandomNumberGeneratorServer from \"./randomnumbergeneratorserver\"\nimport CompassServer from \"./compassserver\"\nimport DMXServer from \"./dmxserver\"\nimport BitRadioServer from \"./bitradioserver\"\nimport PowerServer from \"./powerserver\"\nimport CapacitiveButtonServer from \"./capacitivebuttonserver\"\nimport HIDKeyboardServer from \"./hidkeyboardserver\"\nimport HIDMouseServer from \"./hidmouseserver\"\n//import AzureIoTHubServer from \"./azureiothubserver\"\nimport DimmerServer from \"./dimmerserver\"\nimport AzureIoTHubHealthServer from \"./azureiothubhealthserver\"\nimport JDServiceProvider from \"../jdom/servers/serviceprovider\"\nimport VibrationMotor from \"./vibrationmotorserver\"\nimport WifiServer from \"./wifiserver\"\n\nconst indoorThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"indoor\",\n    readingValues: [21.5],\n    streamingInterval: 1000,\n    minReading: -5,\n    maxReading: 50,\n    readingError: [0.25],\n    variant: ThermometerVariant.Indoor,\n}\nconst outdoorThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"temperature\",\n    readingValues: [21.5],\n    streamingInterval: 60000,\n    minReading: -40,\n    maxReading: 120,\n    readingError: [0.25],\n    variant: ThermometerVariant.Outdoor,\n}\nconst outdoorHumidityOptions: AnalogSensorServerOptions = {\n    instanceName: \"humidity\",\n    streamingInterval: 60000,\n    readingValues: [40],\n    readingError: [0.1],\n}\nconst medicalThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"medical\",\n    readingValues: [37.5],\n    streamingInterval: 1000,\n    minReading: 35,\n    maxReading: 42,\n    readingError: [0.5],\n    variant: ThermometerVariant.Body,\n}\nconst barometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"pressure\",\n    readingValues: [1013],\n    readingError: [0.4],\n}\nconst sonarOptions: AnalogSensorServerOptions = {\n    variant: DistanceVariant.Ultrasonic,\n    minReading: 0.02,\n    maxReading: 4,\n    readingValues: [1],\n}\n\nconst SG90_STALL_TORQUE = 1.8\n/**\n * @internal\n */\nexport const SG90_RESPONSE_SPEED = 0.12 // deg/60deg\n\nconst microServoOptions = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n    minAngle: -90,\n    maxAngle: 90,\n}\nconst microServo270Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n    minAngle: -135,\n    maxAngle: 135,\n}\nconst microServo360Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED * 2, // s/60deg\n    minAngle: -180,\n    maxAngle: 180,\n}\nconst windDirectionOptions: AnalogSensorServerOptions = {\n    readingValues: [0],\n    readingError: [5],\n    streamingInterval: 1000,\n}\nconst windSpeedOptions: AnalogSensorServerOptions = {\n    readingValues: [0],\n    readingError: [0.5],\n    streamingInterval: 1000,\n    registerValues: [{ code: WindSpeedReg.MaxWindSpeed, values: [55] }],\n}\nconst eCO2Options: AnalogSensorServerOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.VOC,\n}\nconst CO2Options: AnalogSensorServerOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.NDIR,\n}\nconst tvocOptions: AnalogSensorServerOptions = {\n    readingValues: [500],\n    streamingInterval: 1000,\n}\n\nconst microbitSounds: SoundPlayerSound[] = [\n    [0, \"giggle\"],\n    [0, \"happy\"],\n    [0, \"hello\"],\n    [0, \"mysterious\"],\n    [0, \"sad\"],\n    [0, \"slide\"],\n    [0, \"soaring\"],\n    [0, \"spring\"],\n    [0, \"twinkle\"],\n    [0, \"yawn\"],\n]\nconst soundLevel: AnalogSensorServerOptions = {\n    readingValues: [0],\n    inactiveThreshold: 10,\n    activeThreshold: 70,\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundLevelReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundLevelReg.MaxDecibels,\n            values: [-30],\n        },\n    ],\n}\nconst soundSpectrum: SensorServiceOptions<[Uint8Array]> = {\n    readingValues: [new Uint8Array(0)],\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundSpectrumReg.FftPow2Size,\n            values: [5],\n        },\n        {\n            code: SoundSpectrumReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundSpectrumReg.MaxDecibels,\n            values: [-30],\n        },\n        {\n            code: SoundSpectrumReg.SmoothingTimeConstant,\n            values: [0.8],\n        },\n    ],\n}\n\n/**\n * A factory for instantiation a simulated service server\n * @category Servers\n */\nexport interface ServiceProviderDefinition {\n    /**\n     * Name of the simulated device\n     */\n    name: string\n    /**\n     * List of service classes hosted by the provider\n     */\n    serviceClasses: number[]\n    /**\n     * Factory handler to instantiate simulated servers\n     */\n    services: () => JDServiceServer[]\n    /**\n     * Indicates if the simulated device should support resetId\n     */\n    resetIn?: boolean\n    /**\n     * Custom factory to wrap the services into a service provider\n     */\n    factory?: (services: JDServiceServer[]) => JDServiceProvider\n}\n\nconst _providerDefinitions: ServiceProviderDefinition[] = [\n    {\n        name: \"7-segment (4 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"ff112233\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [4],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"7-segment (8 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"0102040810204080\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [8],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"accelerometer\",\n        serviceClasses: [SRV_ACCELEROMETER],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n                preferredStreamingInterval: 20,\n            }),\n        ],\n    },\n    {\n        name: \"barometer\",\n        serviceClasses: [SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"bitradio\",\n        serviceClasses: [SRV_BIT_RADIO],\n        services: () => [new BitRadioServer()],\n    },\n    {\n        name: \"button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer()],\n    },\n    {\n        name: \"button (2x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer(\"B0\"), new ButtonServer(\"B1\")],\n    },\n    {\n        name: \"button (4x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`B${i}`)),\n    },\n    {\n        name: \"buzzer\",\n        serviceClasses: [SRV_BUZZER],\n        services: () => [new BuzzerServer()],\n    },\n    {\n        name: \"capacitive button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => {\n            const button = new ButtonServer()\n            const config = new CapacitiveButtonServer()\n            button.threshold = config.threshold\n            return [button, config]\n        },\n    },\n    {\n        name: \"capacitive button (6x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"capacitive button (12x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(12)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"character screen (LDC, 16x2)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({ message: \"hello\\nworld!\" }),\n        ],\n    },\n    {\n        name: \"character screen (OLED, 32x8, RTL)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hello\\nworld!\",\n                columns: 32,\n                rows: 8,\n                variant: CharacterScreenVariant.OLED,\n                textDirection: CharacterScreenTextDirection.RightToLeft,\n            }),\n        ],\n    },\n    {\n        name: \"character screen (Braille, 4x1)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hi\",\n                columns: 4,\n                rows: 1,\n                variant: CharacterScreenVariant.Braille,\n                textDirection: CharacterScreenTextDirection.LeftToRight,\n            }),\n        ],\n    },\n    {\n        name: \"color\",\n        serviceClasses: [SRV_COLOR],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_COLOR, {\n                readingValues: [0.5, 0, 0.5],\n                preferredStreamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"compass\",\n        serviceClasses: [SRV_COMPASS],\n        services: () => [new CompassServer()],\n    },\n    {\n        name: \"dimmer (fan)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"fan\", { variant: DimmerVariant.Fan }),\n        ],\n    },\n    {\n        name: \"dimmer (light)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"light\", { variant: DimmerVariant.Light }),\n        ],\n    },\n    {\n        name: \"distance (sonar)\",\n        serviceClasses: [SRV_DISTANCE],\n        services: () => [new AnalogSensorServer(SRV_DISTANCE, sonarOptions)],\n    },\n    {\n        name: \"DMX\",\n        serviceClasses: [SRV_DMX],\n        services: () => [new DMXServer()],\n    },\n    {\n        name: \"eCO₂\",\n        serviceClasses: [SRV_E_CO2],\n        services: () => [new AnalogSensorServer(SRV_E_CO2, eCO2Options)],\n    },\n    {\n        name: \"eCO₂ + TVOC\",\n        serviceClasses: [SRV_E_CO2, SRV_TVOC],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, eCO2Options),\n            new AnalogSensorServer(SRV_TVOC, tvocOptions),\n        ],\n    },\n    {\n        name: \"eCO₂ + humidity + thermometer\",\n        serviceClasses: [SRV_E_CO2, SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, CO2Options),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_THERMOMETER, indoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"flex sensor (2.2 inch)\",\n        serviceClasses: [SRV_FLEX],\n        services: () => [\n            new AnalogSensorServer(SRV_FLEX, {\n                variant: FlexVariant.Linear22Inch,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"gyroscope\",\n        serviceClasses: [SRV_GYROSCOPE],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_GYROSCOPE, {\n                readingValues: [0, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"heart rate\",\n        serviceClasses: [SRV_HEART_RATE],\n        services: () => [\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 100,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"humidity\",\n        serviceClasses: [SRV_HUMIDITY],\n        services: () => [\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature + barometer\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER, SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"illuminance\",\n        serviceClasses: [SRV_ILLUMINANCE],\n        services: () => [\n            new AnalogSensorServer(SRV_ILLUMINANCE, {\n                readingValues: [1],\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick + A + B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n                buttonsAvailable: JoystickButtons.A | JoystickButtons.B,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick+A)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n                buttonsAvailable: JoystickButtons.A,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (Dpad + all buttons)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_ARCADE_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (only DPad+A/B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_DPAD_AB_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"RGB LED (RGB through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: LedVariant.ThroughHole,\n                ledCount: 1,\n                color: [255, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"LED (5x blue through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: LedVariant.ThroughHole,\n                waveLength: 450,\n                ledCount: 5,\n                color: [0, 0, 255],\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (5x5 micro:bit)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(5, 5, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (8x8)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 8, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (11x7)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(11, 7, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"Braille matrix (8x4)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 4, {\n                variant: DotMatrixVariant.Braille,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 10\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 10,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 12\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 12,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 16\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 24\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 24,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel jewel 7\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 7,\n                variant: LedPixelVariant.Jewel,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel stick 8\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 8,\n                variant: LedPixelVariant.Stick,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 30\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 1000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 60\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 2000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 150\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 150,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 300\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 300,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (4x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (8x8)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (16x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                numColumns: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"light level (photo-resistor)\",\n        serviceClasses: [SRV_LIGHT_LEVEL],\n        services: () => [\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.PhotoResistor,\n            }),\n        ],\n    },\n    {\n        name: \"line tracker (digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [new ReflectedLightServer()],\n    },\n    {\n        name: \"line tracker (2x digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer(),\n            new ReflectedLightServer(),\n        ],\n    },\n    {\n        name: \"line tracker (analog)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer({\n                variant: ReflectedLightVariant.InfraredAnalog,\n            }),\n        ],\n    },\n    {\n        name: \"matrix keypad (3x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(3, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"*\",\n                \"0\",\n                \"#\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (4x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(4, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"A\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"B\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"C\",\n                \"*\",\n                \"0\",\n                \"#\",\n                \"D\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (1x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [new MatrixKeypadServer(4, 1, [\"1\", \"2\", \"3\", \"4\"])],\n    },\n    {\n        name: \"motion\",\n        serviceClasses: [SRV_MOTION],\n        services: () => [\n            new SensorServer(SRV_MOTION, {\n                readingValues: [false],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"motor\",\n        serviceClasses: [SRV_MOTOR],\n        services: () => [new MotorServer()],\n        resetIn: true,\n    },\n    {\n        name: \"protocol test\",\n        serviceClasses: [SRV_PROTO_TEST],\n        services: () => [new ProtocolTestServer()],\n    },\n    {\n        name: \"pulse oxymeter\",\n        serviceClasses: [SRV_PULSE_OXIMETER],\n        services: () => [\n            new SensorServer<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"oxymeter + heart beat\",\n        serviceClasses: [SRV_PULSE_OXIMETER, SRV_HEART_RATE],\n        services: () => [\n            new SensorServer<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 1000,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"power\",\n        serviceClasses: [SRV_POWER],\n        services: () => [new PowerServer()],\n    },\n    {\n        name: \"RNG (random number generator)\",\n        serviceClasses: [SRV_RNG],\n        services: () => [new RandomNumberGeneratorServer()],\n    },\n    {\n        name: \"rain gauge\",\n        serviceClasses: [SRV_RAIN_GAUGE],\n        services: () => [new RainGaugeServer()],\n    },\n    {\n        name: \"real time clock\",\n        serviceClasses: [SRV_REAL_TIME_CLOCK],\n        services: () => [new RealTimeClockServer()],\n    },\n    {\n        name: \"relay (EM/10A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () => [\n            new JDServiceServer(SRV_RELAY, {\n                intensityValues: [false],\n                isActive: values => !!values?.[0],\n                variant: RelayVariant.Electromechanical,\n                registerValues: [\n                    {\n                        code: RelayReg.MaxSwitchingCurrent,\n                        values: [10],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"relay 4x (SSR/5A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(\n                    () =>\n                        new JDServiceServer(SRV_RELAY, {\n                            intensityValues: [false],\n                            isActive: values => !!values?.[0],\n                            variant: RelayVariant.SolidState,\n                            registerValues: [\n                                {\n                                    code: RelayReg.MaxSwitchingCurrent,\n                                    values: [5],\n                                },\n                            ],\n                        })\n                ),\n    },\n    {\n        name: \"rotary encoder\",\n        serviceClasses: [SRV_ROTARY_ENCODER],\n        services: () => [new RotaryEncoderServer()],\n    },\n    {\n        name: \"rotary encoder + button\",\n        serviceClasses: [SRV_ROTARY_ENCODER, SRV_BUTTON],\n        services: () => [new RotaryEncoderServer(), new ButtonServer()],\n    },\n    {\n        name: \"rotary potentiometer\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Rotary,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"servo\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServoOptions)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (270°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo270Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (360°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo360Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo x 2\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(2)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 4\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 6\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 16\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(16)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"settings\",\n        serviceClasses: [SRV_SETTINGS],\n        services: () => [new SettingsServer()],\n    },\n    {\n        name: \"slider (potentiometer)\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Slider,\n            }),\n        ],\n    },\n    {\n        name: \"soil moisture\",\n        serviceClasses: [SRV_SOIL_MOISTURE],\n        services: () => [\n            new AnalogSensorServer(SRV_SOIL_MOISTURE, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"speech synthesis\",\n        serviceClasses: [SRV_SPEECH_SYNTHESIS],\n        services: () => [new SpeechSynthesisServer()],\n    },\n    {\n        name: \"solenoid\",\n        serviceClasses: [SRV_SOLENOID],\n        services: () => [\n            new JDServiceServer(SRV_SOLENOID, {\n                intensityValues: [0],\n            }),\n        ],\n    },\n    {\n        name: \"sound level\",\n        serviceClasses: [SRV_SOUND_LEVEL],\n        services: () => [new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel)],\n    },\n    {\n        name: \"sound spectrum\",\n        serviceClasses: [SRV_SOUND_SPECTRUM],\n        services: () => [\n            new SensorServer<[Uint8Array]>(SRV_SOUND_SPECTRUM, soundSpectrum),\n        ],\n    },\n    {\n        name: \"sound player (micro:bit v2 sounds)\",\n        serviceClasses: [SRV_SOUND_PLAYER],\n        services: () => [new SoundPlayerServer(microbitSounds)],\n    },\n    {\n        name: \"switch (slide)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Slide })],\n    },\n    {\n        name: \"switch (push button)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({ variant: SwitchVariant.PushButton }),\n        ],\n    },\n    {\n        name: \"switch (toggle)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Toggle })],\n    },\n    {\n        name: \"switch (tilt)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Tilt })],\n    },\n    {\n        name: \"switch (proximity)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({\n                variant: SwitchVariant.Proximity,\n                autoOffDelay: 30,\n            }),\n        ],\n    },\n    {\n        name: \"thermometer (outdoor)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"thermometer (medical)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, medicalThermometerOptions),\n        ],\n    },\n    {\n        name: \"traffic light\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () => [new TrafficLightServer()],\n    },\n    {\n        name: \"traffic crossing (4 x lights)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(_ => new TrafficLightServer()),\n    },\n    {\n        name: \"thermocouple\",\n        serviceClasses: [SRV_THERMOCOUPLE],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOCOUPLE, {\n                readingValues: [550],\n                streamingInterval: 1000,\n                minReading: 0,\n                maxReading: 1100,\n                readingError: [2.2],\n                variant: ThermocoupleVariant.TypeB,\n            }),\n        ],\n    },\n    {\n        name: \"TVOC\",\n        serviceClasses: [SRV_TVOC],\n        services: () => [new AnalogSensorServer(SRV_TVOC, tvocOptions)],\n    },\n    {\n        name: \"UV index\",\n        serviceClasses: [SRV_UV_INDEX],\n        services: () => [\n            new AnalogSensorServer(SRV_UV_INDEX, {\n                readingValues: [5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"vibration motor\",\n        serviceClasses: [SRV_VIBRATION_MOTOR],\n        services: () => [new VibrationMotor()],\n    },\n    {\n        name: \"water level\",\n        serviceClasses: [SRV_WATER_LEVEL],\n        services: () => [\n            new AnalogSensorServer(SRV_WATER_LEVEL, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (jewelry)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.001],\n                variant: WeightScaleVariant.Jewelry,\n                maxReading: 0.2,\n                minReading: 0.0005,\n                readingResolution: 0.00001,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (body)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [60],\n                variant: WeightScaleVariant.Body,\n                maxReading: 180,\n                readingResolution: 0.1,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (food)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.5],\n                variant: WeightScaleVariant.Food,\n                maxReading: 6,\n                readingResolution: 0.001,\n            }),\n        ],\n    },\n    {\n        name: \"wind direction\",\n        serviceClasses: [SRV_WIND_DIRECTION],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n        ],\n    },\n    {\n        name: \"wind speed\",\n        serviceClasses: [SRV_WIND_SPEED],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n        ],\n    },\n    {\n        name: \"weather station (wind speed, direction, rain)\",\n        serviceClasses: [SRV_WIND_SPEED, SRV_WIND_DIRECTION, SRV_RAIN_GAUGE],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n            new RainGaugeServer(),\n        ],\n    },\n    {\n        name: \"chassis (motor x 2 + sonar + light)\",\n        serviceClasses: [SRV_DISTANCE, SRV_LED_PIXEL, SRV_MOTOR],\n        services: () => [\n            new MotorServer(\"L\"),\n            new MotorServer(\"R\"),\n            new AnalogSensorServer(SRV_DISTANCE, sonarOptions),\n            new LedPixelServer({\n                numPixels: 5,\n                variant: LedPixelVariant.Stick,\n                instanceName: \"lights\",\n            }),\n        ],\n    },\n    {\n        name: \"railway crossing (2 x lights, 2 x servos, 1 x buffer)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT, SRV_SERVO, SRV_BUZZER],\n        services: () => [\n            new TrafficLightServer({ instanceName: \"left light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"left arm\",\n            }),\n            new TrafficLightServer({ instanceName: \"right light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"right arm\",\n            }),\n            new BuzzerServer({ instanceName: \"bell\" }),\n        ],\n    },\n    {\n        name: \"Arcade controller (6 x buttons)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [\n            new ButtonServer(\"Left\"),\n            new ButtonServer(\"Up\"),\n            new ButtonServer(\"Right\"),\n            new ButtonServer(\"Down\"),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n        ],\n    },\n    {\n        name: \"micro:bit v2\",\n        serviceClasses: [\n            SRV_DOT_MATRIX,\n            SRV_BUTTON,\n            SRV_ACCELEROMETER,\n            SRV_SOUND_LEVEL,\n            SRV_LIGHT_LEVEL,\n            SRV_BUZZER,\n            SRV_SOUND_PLAYER,\n        ],\n        services: () => [\n            new DotMatrixServer(5, 5),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n            new SensorServer<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n            }),\n            new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel),\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.LEDMatrix,\n            }),\n            new BuzzerServer(),\n            new SoundPlayerServer(microbitSounds),\n        ],\n    },\n    {\n        name: \"power + humidity\",\n        serviceClasses: [SRV_POWER, SRV_HUMIDITY],\n        services: () => [\n            new PowerServer(),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n        factory: services => {\n            const dev = new JDServerServiceProvider(\"power+humidity\", [\n                services[0],\n            ])\n            const pwr = dev.service(1) as PowerServer\n            pwr.enabled.on(CHANGE, () => {\n                const enabled = !!pwr.enabled.values()[0]\n                console.log(`power: ${enabled ? \"on\" : \"off\"}`)\n                if (enabled)\n                    // power + rest\n                    dev.updateServices(services)\n                // power only\n                else dev.updateServices([services[0]])\n            })\n            return dev\n        },\n    },\n    {\n        name: \"HID keyboard\",\n        serviceClasses: [SRV_HID_KEYBOARD],\n        services: () => [new HIDKeyboardServer()],\n    },\n    {\n        name: \"HID mouse\",\n        serviceClasses: [SRV_HID_MOUSE],\n        services: () => [new HIDMouseServer()],\n    },\n    /*    \n    {\n        name: \"Azure IoT Hub\",\n        serviceClasses: [SRV_AZURE_IOT_HUB],\n        services: () => [new AzureIoTHubServer()],\n    },\n    */\n    {\n        name: \"WiFi (virtual)\",\n        serviceClasses: [SRV_WIFI],\n        services: () => [new WifiServer()],\n    },\n    {\n        name: \"Azure IoT Hub Health\",\n        serviceClasses: [SRV_AZURE_IOT_HUB_HEALTH],\n        services: () => [new AzureIoTHubHealthServer()],\n    },\n]\n\n/**\n * Gets the list of simulated service providers\n * @category Servers\n */\nexport default function serviceProviderDefinitions() {\n    return _providerDefinitions.slice(0)\n}\n\nfunction stableSimulatorDeviceId(bus: JDBus, template: string): string {\n    const others = bus.serviceProviders().filter(sp => sp.template === template)\n    const word0 = hash(stringToUint8Array(template + others.length), 32)\n    const word1 = hash(stringToUint8Array(template + others.length + 1), 32)\n    const id = toFullHex([word0, word1])\n    return id.slice(2)\n}\n\n/**\n * Instantiates a new service provider instance and adds it to the bus\n * @category Servers\n */\nexport function addServiceProvider(\n    bus: JDBus,\n    definition: ServiceProviderDefinition\n) {\n    const services = definition.services()\n    services.forEach(srv => srv.lock())\n    const deviceId = stableSimulatorDeviceId(bus, definition.name)\n    const options = {\n        resetIn: definition.resetIn,\n        deviceId,\n    }\n    const d =\n        definition.factory?.(services) ||\n        new JDServerServiceProvider(definition.name, services, options)\n    bus.addServiceProvider(d)\n    return d\n}\n\n/**\n * Finds the first service provider that supports the given service class\n * @category Servers\n */\nexport function serviceProviderDefinitionFromServiceClass(\n    serviceClass: number\n) {\n    return _providerDefinitions.find(\n        provider =>\n            provider.serviceClasses.length === 1 &&\n            provider.serviceClasses[0] === serviceClass\n    )\n}\n\n/**\n * Starts a service provider that hosts the given service class.\n * @category Servers\n */\nexport function startServiceProviderFromServiceClass(\n    bus: JDBus,\n    serviceClass: number\n) {\n    const provider = serviceProviderDefinitionFromServiceClass(serviceClass)\n    return addServiceProvider(bus, provider)\n}\n","import JDService from \"./service\"\nimport JDDevice from \"./device\"\nimport JDBus from \"./bus\"\nimport { JDClient } from \"./client\"\n\n/**\n * Base class for service clients\n * @category Clients\n */\nexport class JDServiceClient extends JDClient {\n    constructor(public readonly service: JDService) {\n        super()\n    }\n\n    protected get device(): JDDevice {\n        return this.service.device\n    }\n\n    protected get bus(): JDBus {\n        return this.device.bus\n    }\n\n    toString(): string {\n        return `client of ${this.service}`\n    }\n}\n","import {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../servers/servers\"\nimport {\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    DISCONNECT,\n    ERROR,\n    EVENT,\n    RoleManagerCmd,\n    ROLE_MANAGER_POLL,\n    SELF_ANNOUNCE,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SystemEvent,\n} from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { InPipeReader } from \"../pipes\"\nimport JDService from \"../service\"\nimport { JDServiceClient } from \"../serviceclient\"\nimport {\n    arrayConcatMany,\n    debounceAsync,\n    fromHex,\n    groupBy,\n    toHex,\n} from \"../utils\"\n\n/**\n * A service role assigment\n * @category Clients\n */\nexport interface Role {\n    /**\n     * Identifier of the bound device\n     */\n    deviceId: string\n    /**\n     * Service class bound, for sanity check\n     */\n    serviceClass: number\n    /**\n     * Service index bound\n     */\n    serviceIndex: number\n    /**\n     * Role name\n     */\n    name: string\n}\n\n/**\n * A client for the role manager service\n * @category Clients\n */\nexport class RoleManagerClient extends JDServiceClient {\n    private _roles: Role[] = []\n    private _needRefresh = true\n    private _lastRefreshAttempt = 0\n\n    public readonly startRefreshRoles: () => void\n\n    constructor(service: JDService) {\n        super(service)\n        const changeEvent = service.event(SystemEvent.Change)\n\n        // always debounce refresh roles\n        this.startRefreshRoles = debounceAsync(\n            this.refreshRoles.bind(this),\n            200\n        )\n\n        // role manager emits change events\n        this.mount(changeEvent.subscribe(EVENT, this.handleChange.bind(this)))\n        // assign roles when need device enter the bus\n        this.mount(\n            this.bus.subscribe(DEVICE_ANNOUNCE, this.assignRoles.bind(this))\n        )\n        // unmount when device is removed\n        this.mount(\n            service.device.subscribe(DISCONNECT, () => {\n                if (this.bus.roleManager?.service === this.service)\n                    this.bus.setRoleManagerService(undefined)\n            })\n        )\n        // clear on unmount\n        this.mount(this.clearRoles.bind(this))\n        // retry to get roles on every self-announce\n        this.mount(\n            this.bus.subscribe(\n                SELF_ANNOUNCE,\n                this.handleSelfAnnounce.bind(this)\n            )\n        )\n    }\n\n    private handleSelfAnnounce() {\n        if (\n            this._needRefresh &&\n            this.bus.timestamp - this._lastRefreshAttempt > ROLE_MANAGER_POLL\n        )\n            this.startRefreshRoles()\n    }\n\n    get roles() {\n        return this._roles\n    }\n\n    private async handleChange() {\n        this.startRefreshRoles()\n    }\n\n    private async refreshRoles() {\n        if (this.unmounted) return\n\n        this._needRefresh = false\n        await this.collectRoles()\n\n        if (this.unmounted) return\n        this.assignRoles()\n    }\n\n    private async collectRoles() {\n        this._lastRefreshAttempt = this.bus.timestamp\n        const previousRolesHash = JSON.stringify(this._roles)\n        try {\n            const inp = new InPipeReader(this.bus)\n            await this.service.sendPacketAsync(\n                inp.openCommand(RoleManagerCmd.ListRequiredRoles),\n                true\n            )\n            // collect all roles\n            const roles: Role[] = []\n            for (const buf of await inp.readData(1000)) {\n                const [devidbuf, serviceClass, serviceIndex, name] = jdunpack<\n                    [Uint8Array, number, number, string]\n                >(buf, \"b[8] u32 u8 s\")\n                const deviceId = toHex(devidbuf)\n                const role: Role = {\n                    deviceId,\n                    serviceClass,\n                    serviceIndex,\n                    name,\n                }\n                roles.push(role)\n            }\n            // store result if changed\n            if (JSON.stringify(roles) !== previousRolesHash) {\n                this._roles = roles\n                this.emit(CHANGE)\n            }\n        } catch (e) {\n            this._needRefresh = true\n            this.emit(ERROR, e)\n        }\n    }\n\n    static unroledSrvs = [SRV_CONTROL, SRV_ROLE_MANAGER, SRV_LOGGER]\n\n    private assignRoles() {\n        this.bus\n            .services()\n            .filter(\n                srv =>\n                    RoleManagerClient.unroledSrvs.indexOf(srv.serviceClass) < 0\n            )\n            .forEach(srv => this.assignRole(srv))\n    }\n\n    private assignRole(service: JDService) {\n        const deviceId = service.device.deviceId\n        const serviceIndex = service.serviceIndex\n        const role = this._roles.find(\n            r => r.deviceId === deviceId && r.serviceIndex === serviceIndex\n        )\n        //console.debug(`role ${service.id} -> ${role?.role}`, { service })\n        service.role = role?.name\n    }\n\n    private clearRoles() {\n        this.bus.services().forEach(srv => (srv.role = undefined))\n    }\n\n    hasRoleForService(service: JDService) {\n        const { serviceClass } = service\n        return !!this._roles?.find(r => r.serviceClass === serviceClass)\n    }\n\n    compatibleRoles(service: JDService): Role[] {\n        const { serviceClass } = service\n        return this._roles?.filter(r => r.serviceClass === serviceClass)\n    }\n\n    role(name: string): Role {\n        return this._roles.find(r => r.serviceIndex > 0 && r.name === name)\n    }\n\n    async setRole(service: JDService, name: string) {\n        const { device, serviceIndex } = service\n        const { deviceId } = device\n        //console.debug(`set role ${deviceId}:${serviceIndex} to ${role}`)\n\n        const previous = name && this._roles.find(r => r.name === name)\n        if (\n            previous &&\n            previous.deviceId === deviceId &&\n            previous.serviceIndex === serviceIndex\n        ) {\n            // nothing todo\n            console.debug(`role unmodified, skipping`)\n            return\n        }\n\n        // set new role assignment\n        {\n            const data = jdpack<[Uint8Array, number, string]>(\"b[8] u8 s\", [\n                fromHex(deviceId),\n                serviceIndex,\n                name || \"\",\n            ])\n            await this.service.sendPacketAsync(\n                Packet.from(RoleManagerCmd.SetRole, data),\n                true\n            )\n        }\n\n        // clear previous role assignment\n        if (previous) {\n            console.debug(\n                `clear role ${previous.deviceId}:${previous.serviceIndex}`\n            )\n            const data = jdpack<[Uint8Array, number, string]>(\"b[8] u8 s\", [\n                fromHex(previous.deviceId),\n                previous.serviceIndex,\n                \"\",\n            ])\n            await this.service.sendPacketAsync(\n                Packet.from(RoleManagerCmd.SetRole, data),\n                true\n            )\n        }\n    }\n\n    startSimulators() {\n        if (!this._roles?.length) return\n\n        // collect roles that need to be bound\n        const todos = groupBy(\n            this._roles\n                .filter(role => !this.bus.device(role.deviceId, true))\n                .map(role => ({\n                    role,\n                    hostDefinition: serviceProviderDefinitionFromServiceClass(\n                        role.serviceClass\n                    ),\n                }))\n                .filter(todo => !!todo.hostDefinition),\n            todo => parentName(todo.role.name) || \"\"\n        )\n\n        // spawn devices with group of devices\n        Object.keys(todos).forEach(parent => {\n            const todo = todos[parent]\n            // no parent, spawn individual services\n            if (!parent) {\n                todo.forEach(t =>\n                    addServiceProvider(this.bus, t.hostDefinition)\n                )\n            } else {\n                // spawn all services into 1\n                addServiceProvider(this.bus, {\n                    name: \"\",\n                    serviceClasses: [],\n                    services: () =>\n                        arrayConcatMany(\n                            todo.map(t => t.hostDefinition.services())\n                        ),\n                })\n            }\n        })\n\n        function parentName(role: string) {\n            return role.split(\"/\", 1)[0]\n        }\n    }\n}\nexport default RoleManagerClient\n","import Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport { strcmp, arrayConcatMany, toHex } from \"./utils\"\nimport {\n    JD_SERVICE_INDEX_CTRL,\n    CMD_ADVERTISEMENT_DATA,\n    DEVICE_ANNOUNCE,\n    PACKET_SEND,\n    ERROR,\n    CONNECTING,\n    DEVICE_CONNECT,\n    DEVICE_DISCONNECT,\n    PACKET_RECEIVE,\n    PACKET_RECEIVE_ANNOUNCE,\n    PACKET_EVENT,\n    PACKET_REPORT,\n    PACKET_PROCESS,\n    DEVICE_CHANGE,\n    CHANGE,\n    FIRMWARE_BLOBS_CHANGE,\n    BUS_NODE_NAME,\n    DEVICE_NODE_NAME,\n    SERVICE_NODE_NAME,\n    EVENT_NODE_NAME,\n    REGISTER_NODE_NAME,\n    FIELD_NODE_NAME,\n    JD_DEVICE_DISCONNECTED_DELAY,\n    JD_DEVICE_LOST_DELAY,\n    JD_SERVICE_INDEX_CRC_ACK,\n    SELF_ANNOUNCE,\n    TIMEOUT,\n    LATE,\n    REPORT_UPDATE,\n    REGISTER_POLL_REPORT_INTERVAL,\n    REGISTER_POLL_REPORT_MAX_INTERVAL,\n    REGISTER_OPTIONAL_POLL_COUNT,\n    PACKET_PRE_PROCESS,\n    STREAMING_DEFAULT_INTERVAL,\n    REGISTER_POLL_FIRST_REPORT_INTERVAL,\n    SERVICE_PROVIDER_ADDED,\n    SERVICE_PROVIDER_REMOVED,\n    REFRESH,\n    ROLE_MANAGER_CHANGE,\n    TIMEOUT_DISCONNECT,\n    REGISTER_POLL_STREAMING_INTERVAL,\n    REPORT_RECEIVE,\n    CMD_SET_REG,\n    PING_LOGGERS_POLL,\n    RESET_IN_TIME_US,\n    REFRESH_REGISTER_POLL,\n    META_TRACE,\n    DEVICE_CLEAN,\n    REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL,\n    REGISTER_POLL_REPORT_VOLATILE_INTERVAL,\n    SRV_INFRASTRUCTURE,\n    CONNECTION_STATE,\n} from \"./constants\"\nimport { serviceClass } from \"./pretty\"\nimport JDNode from \"./node\"\nimport { FirmwareBlob, sendStayInBootloaderCommand } from \"./flashing\"\nimport JDService from \"./service\"\nimport {\n    deviceSpecificationFromProductIdentifier,\n    isConstRegister,\n    isReading,\n    isSensor,\n} from \"./spec\"\nimport {\n    LoggerPriority,\n    LoggerReg,\n    SensorReg,\n    SRV_LOGGER,\n    SRV_REAL_TIME_CLOCK,\n    SystemReg,\n} from \"../../src/jdom/constants\"\nimport JDServiceProvider from \"./servers/serviceprovider\"\nimport RealTimeClockServer from \"../servers/realtimeclockserver\"\nimport { SRV_ROLE_MANAGER } from \"../../src/jdom/constants\"\nimport Transport, { ConnectionState } from \"./transport/transport\"\nimport { BusStatsMonitor } from \"./busstats\"\nimport RoleManagerClient from \"./clients/rolemanagerclient\"\nimport JDBridge from \"./bridge\"\nimport { randomDeviceId } from \"./random\"\nimport { ControlReg, SRV_CONTROL } from \"../../jacdac-spec/dist/specconstants\"\nimport Scheduler, { WallClockScheduler } from \"./scheduler\"\nimport ServiceFilter from \"./filters/servicefilter\"\nimport DeviceFilter from \"./filters/devicefilter\"\nimport Flags from \"./flags\"\nimport { stack } from \"./trace/trace\"\n\n/**\n * Creation options for a bus\n * @category JDOM\n */\nexport interface BusOptions {\n    /**\n     * The self-device device id\n     */\n    deviceId?: string\n    /**\n     * A custom scheduler to control time\n     */\n    scheduler?: Scheduler\n    /**\n     * Parent domain origin to handle iframe messages\n     */\n    parentOrigin?: string\n}\n\n/**\n * A Jacdac bus manager. This instance maintains the list of devices on the bus.\n * @category JDOM\n */\nexport class JDBus extends JDNode {\n    /**\n     * @internal\n     */\n    readonly selfDeviceId: string\n    /**\n     * A timer and interval schedular to orchastrate bus timestamps\n     * @category Scheduling\n     */\n    readonly scheduler: Scheduler\n    /**\n     * @internal\n     */\n    readonly parentOrigin: string\n    private readonly _transports: Transport[] = []\n    private _bridges: JDBridge[] = []\n    private _devices: JDDevice[] = []\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _gcInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _announceInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _safeBootInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _refreshRegistersInterval: any\n    private _lastPingLoggerTime = 0\n    private _lastResetInTime = 0\n    private _restartCounter = 0\n    private _roleManagerClient: RoleManagerClient\n    private _minLoggerPriority = LoggerPriority.Debug\n    private _firmwareBlobs: FirmwareBlob[]\n    private _gcDevicesFrozen = 0\n    private _serviceProviders: JDServiceProvider[] = []\n    private _streaming = false\n    private _unsubscribeBroadcastChannel: () => void\n    private _passive = false\n\n    /**\n     * Gets an instance that tracks packet statistics\n     * @category Diagnostics\n     **/\n    public readonly stats: BusStatsMonitor\n\n    /**\n     * Creates the bus with the given transport\n     * @param sendPacket\n     * @category Lifecycle\n     */\n    constructor(transports?: Transport[], options?: BusOptions) {\n        super()\n\n        this.selfDeviceId = options?.deviceId || randomDeviceId()\n        this.scheduler = options?.scheduler || new WallClockScheduler()\n        this.parentOrigin = options?.parentOrigin || \"*\"\n        this.stats = new BusStatsMonitor(this)\n\n        // some transport may be undefined\n        transports?.filter(tr => !!tr).map(tr => this.addTransport(tr))\n\n        // tell loggers to send data, every now and then\n        // send resetin packets\n        this.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this))\n        // tell RTC clock the computer time\n        this.on(DEVICE_ANNOUNCE, this.handleRealTimeClockSync.bind(this))\n        // grab the default role manager\n        this.on(DEVICE_CHANGE, this.handleRoleManager.bind(this))\n\n        // start all timers\n        this.start()\n    }\n\n    private configureBroadcastChannel() {\n        if (typeof BroadcastChannel === \"undefined\") return\n\n        // the purpose of this code is to orchestrate\n        // interactions with multiple tabs and windows\n        const channel = new BroadcastChannel(\"jacdac\")\n        const postConnectionState = () => {\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: CONNECTION_STATE,\n                transports: this._transports.map(tr => ({\n                    type: tr.type,\n                    connectionState: tr.connectionState,\n                })),\n            })\n        }\n        // update other windows with connection status\n        const unsubConnectionState = this.subscribe(\n            CONNECTION_STATE,\n            postConnectionState\n        )\n        const handleVisibilityChange = () => {\n            // tell other windows, we are visible or not\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: \"visibilitychange\",\n                visibilityState: document.visibilityState,\n            })\n        }\n        const handleBroadcastMessage = async (\n            msg: MessageEvent<{\n                id: string\n                event: string\n                visibilityState?: VisibilityState\n                transports: { type: string; connectionState: string }[]\n            }>\n        ) => {\n            const { data } = msg\n            const { event, transports, visibilityState } = data\n            switch (event) {\n                case \"visibilitychange\": {\n                    // automatically disconnect if another pane becomes live\n                    //console.debug(\n                    //   `broadcast ${id}: ${event} ${visibilityState}`\n                    //)\n                    if (visibilityState === \"visible\") await this.disconnect()\n                    else {\n                        // let other window disconnect\n                        await this.delay(2000)\n                        await this.connect(true)\n                    }\n                    break\n                }\n                case CONNECTION_STATE: {\n                    //console.debug(`broadcast ${id}: ${event}`, transports)\n                    // if any other window is trying to connect, disconnect\n                    transports\n                        .filter(\n                            tr =>\n                                tr.connectionState ===\n                                ConnectionState.Connecting\n                        )\n                        .forEach(ctr => {\n                            this.transports\n                                .filter(tr => tr.type === ctr.type)\n                                .forEach(tr => tr.disconnect())\n                        })\n                }\n            }\n        }\n\n        channel.addEventListener(\"message\", handleBroadcastMessage, false)\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n        this._unsubscribeBroadcastChannel = () => {\n            unsubConnectionState()\n            document.removeEventListener(\n                \"visibilitychange\",\n                handleVisibilityChange\n            )\n            channel.removeEventListener(\"message\", handleBroadcastMessage)\n            channel.close()\n        }\n\n        // notify other pages\n        handleVisibilityChange()\n    }\n\n    /**\n     * Gets the list of transports registers with the bus\n     * @category Transports and Bridges\n     */\n    get transports() {\n        return this._transports.slice(0)\n    }\n\n    /**\n     * Adds a transport to the bus\n     * @category Transports and Bridges\n     */\n    addTransport(transport: Transport) {\n        if (this._transports.indexOf(transport) > -1) return // already added\n\n        this._transports.push(transport)\n        transport.bus = this\n        transport.bus.on(CONNECTING, () => this.preConnect(transport))\n    }\n\n    /**\n     * Gets the list of bridges registered with the bus\n     * @category Transports and Bridges\n     */\n    get bridges() {\n        return this._bridges.slice(0)\n    }\n\n    /**\n     * Add a bridge to the bus and returns a callback to remove it.\n     * @param bridge\n     * @returns callback to remove bridge\n     * @category Transports and Bridges\n     * @internal\n     */\n    addBridge(bridge: JDBridge): () => void {\n        if (this._bridges.indexOf(bridge) < 0) {\n            console.debug(`add bridge`, { bridge })\n            this._bridges.push(bridge)\n            this.emit(CHANGE)\n        }\n        return () => this.removeBridge(bridge)\n    }\n\n    private removeBridge(bridge: JDBridge) {\n        const i = this._bridges.indexOf(bridge)\n        if (i > -1) {\n            console.debug(`remove bridge`, { bridge })\n            this._bridges.splice(i, 1)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Do not send any packet on the bus\n     */\n    get passive(): boolean {\n        return this._passive\n    }\n\n    set passive(value: boolean) {\n        if (value !== this._passive) {\n            this._passive = value\n            this.emit(CHANGE)\n        }\n    }\n\n    private preConnect(transport: Transport) {\n        //console.debug(`preconnect ${transport.type}`, { transport })\n        return Promise.all(\n            this._transports\n                .filter(t => t !== transport)\n                .map(t => t.disconnect())\n        )\n    }\n\n    /**\n     * Connects the bus going through the transports chronologically. Does nothing if already connected.\n     * @param background connection was triggered automatically\n     * @category Lifecycle\n     */\n    async connect(background?: boolean) {\n        if (this.connected) return\n\n        for (const transport of this._transports) {\n            // start connection\n            await transport.connect(background)\n            // keep going if not connected\n            if (transport.connected) break\n        }\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Disconnects the bus and any connected transport.\n     * @category Lifecycle\n     */\n    async disconnect() {\n        for (const transport of this._transports) {\n            await transport.disconnect()\n        }\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Starts to process packets and updates the JDOM nodes\n     * @category Lifecycle\n     */\n    start() {\n        this.configureBroadcastChannel()\n        if (!this._announceInterval)\n            this._announceInterval = this.scheduler.setInterval(() => {\n                if (!this.passive) this.emit(SELF_ANNOUNCE)\n            }, 499)\n        this.backgroundRefreshRegisters = true\n        if (!this._gcInterval)\n            this._gcInterval = this.scheduler.setInterval(\n                () => this.gcDevices(),\n                JD_DEVICE_DISCONNECTED_DELAY\n            )\n    }\n\n    /**\n     * Stops processing packets\n     * @category Lifecycle\n     */\n    async stop() {\n        await this.disconnect()\n        if (this._unsubscribeBroadcastChannel) {\n            this._unsubscribeBroadcastChannel()\n            this._unsubscribeBroadcastChannel = undefined\n        }\n        if (this._announceInterval) {\n            this.scheduler.clearInterval(this._announceInterval)\n            this._announceInterval = undefined\n        }\n        this.safeBoot = false\n        this.backgroundRefreshRegisters = false\n        if (this._gcInterval) {\n            this.scheduler.clearInterval(this._gcInterval)\n            this._gcInterval = undefined\n        }\n    }\n\n    /**\n     * Stops the bus and all transport connections.\n     * @category Lifecycle\n     */\n    async dispose() {\n        console.debug(`${this.id}: disposing.`)\n        await this.stop()\n        this._transports.forEach(transport => transport.dispose())\n    }\n\n    /**\n     * Indicates that the bus is sending commands keep devices in bootloader mode.\n     * This property is signaled by CHANGE.\n     * @category Lifecycle\n     */\n    get safeBoot() {\n        return !!this._safeBootInterval\n    }\n\n    /**\n     * Turn on or off the safe boot mode where the bus keeps devices in bootloader mode.\n     * Triggers a CHANGE event.\n     * @category Lifecycle\n     */\n    set safeBoot(enabled: boolean) {\n        if (enabled && !this._safeBootInterval) {\n            this._safeBootInterval = this.scheduler.setInterval(() => {\n                // don't send message if any device is flashing\n                if (this._devices.some(d => d.flashing)) return\n                sendStayInBootloaderCommand(this)\n            }, 50)\n            this.emit(CHANGE)\n        } else if (!enabled && this._safeBootInterval) {\n            this.scheduler.clearInterval(this._safeBootInterval)\n            this._safeBootInterval = undefined\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Indicates if any of the transports is connected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get connected() {\n        return this._transports.some(t => t.connected)\n    }\n\n    /**\n     * Indicates if any of the transports is disconnected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get disconnected() {\n        return this._transports.every(t => t.disconnected)\n    }\n\n    /**\n     * Clears known devices and service providers (simulators). Optionally reset bus timestamp.\n     * @param timestamp\n     * @category Services\n     */\n    clear(timestamp = 0) {\n        // clear hosts\n        if (this._serviceProviders?.length) {\n            this._serviceProviders.forEach(host => (host.bus = undefined))\n            this._serviceProviders = []\n        }\n\n        // clear devices\n        const devs = this._devices\n        if (devs?.length) {\n            this._devices = []\n            devs.forEach(dev => {\n                dev.disconnect()\n                this.emit(DEVICE_DISCONNECT, dev)\n                this.emit(DEVICE_CHANGE, dev)\n            })\n        }\n        this.resetTime(timestamp)\n    }\n\n    /**\n     * Gets a unique identifier for this node in the Jacdac DOM.\n     * @category JDOM\n     */\n    get id(): string {\n        return this.nodeKind\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get name(): string {\n        return \"bus\"\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get friendlyName(): string {\n        return this.name\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get qualifiedName(): string {\n        return this.name\n    }\n\n    /**\n     * Returns the ``BUS_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind(): string {\n        return BUS_NODE_NAME\n    }\n\n    /**\n     * Gets the default role manager service client, if any\n     * @category Services\n     */\n    get roleManager(): RoleManagerClient {\n        return this._roleManagerClient\n    }\n\n    /**\n     * Sets the default role manager service client\n     * @category Services\n     */\n    setRoleManagerService(service: JDService) {\n        //console.log(`set role manager`, { service })\n        // clean if needed\n        if (\n            this._roleManagerClient &&\n            this._roleManagerClient.service !== service\n        ) {\n            //console.debug(\"unmount role manager\")\n            this._roleManagerClient.unmount()\n            this._roleManagerClient = undefined\n        }\n\n        // allocate new manager\n        if (service && service !== this._roleManagerClient?.service) {\n            //console.debug(\"mount role manager\")\n            this._roleManagerClient = new RoleManagerClient(service)\n            this.emit(ROLE_MANAGER_CHANGE)\n            this.emit(CHANGE)\n            this._roleManagerClient.startRefreshRoles()\n        }\n    }\n\n    /**\n     * @internal\n     */\n    toString(): string {\n        return `bus: ${this._devices?.length || 0} devices, ${\n            this._transports\n                ?.filter(tr => tr.connected)\n                .map(tr => tr.type)\n                .join(\", \") || \"\"\n        }`\n    }\n\n    /**\n     * Gets a detailled description of the devices and services connected to the bus\n     * @returns\n     */\n    describe() {\n        return `\ntransport:\n${this._transports.map(tr => `  ${tr.type}: ${tr.connectionState}`).join(\"\\n\")}\n\n${this.devices({ ignoreInfrastructure: true })\n    .map(\n        dev => `device: \n  id: ${dev.shortId} (0x${dev.deviceId})\n  product: ${\n      dev.productIdentifier\n          ? `${\n                deviceSpecificationFromProductIdentifier(dev.productIdentifier)\n                    ?.id || \"?\"\n            } (0x${dev.productIdentifier?.toString(16)})`\n          : \"\"\n  }\n  firmware_version: ${dev.firmwareVersion || \"\"}\n  services:\n${dev\n    .services()\n    .slice(1)\n    .map(srv =>\n        [\n            `    ${\n                srv.specification?.shortName || srv.name\n            } (0x${srv.serviceClass.toString(16)})`,\n            ...srv\n                .registers()\n                .filter(reg => !!reg.data)\n                .map(\n                    reg =>\n                        `        ${reg.specification?.kind || \"reg\"} ${\n                            reg.name\n                        }: ${reg.humanValue} (${toHex(reg.data)})`\n                ),\n            ...srv.events.map(ev => `        event ${ev.name}: ${ev.count}`),\n        ].join(\"\\n\")\n    )\n    .join(\"\\n\")}\n`\n    )\n    .join(\"\\n\")}`\n    }\n\n    /**\n     * Resolves a JDOM node from an identifier\n     * @param id node identifier\n     * @returns node if found, undefined otherwise\n     * @category JDOM\n     */\n    node(id: string): JDNode {\n        const resolve = (): JDNode => {\n            const m =\n                /^(?<type>bus|device|service|register|event|field)(:(?<dev>\\w+)(:(?<srv>\\w+)(:(?<reg>\\w+(:(?<idx>\\w+))?))?)?)?$/.exec(\n                    id\n                )\n            if (!m) return undefined\n            const type = m.groups[\"type\"]\n            const dev = m.groups[\"dev\"]\n            const srv = parseInt(m.groups[\"srv\"], 16)\n            const reg = parseInt(m.groups[\"reg\"], 16)\n            const idx = parseInt(m.groups[\"idx\"], 16)\n            //console.log(type, this.device(dev), this.device(dev)?.service(srv), this.device(dev)?.service(srv)?.register(reg), idx)\n            switch (type) {\n                case BUS_NODE_NAME:\n                    return this\n                case DEVICE_NODE_NAME:\n                    return this.device(dev, true)\n                case SERVICE_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)\n                case REGISTER_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.register(reg)\n                case EVENT_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.event(reg)\n                case FIELD_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.register(reg)\n                        ?.fields[idx]\n            }\n            console.info(`node ${id} not found`)\n            return undefined\n        }\n        const node = resolve()\n        return node\n    }\n\n    private resetTime(delta = 0) {\n        this.scheduler.resetTime(delta)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets the current bus-relavite time in milliseconds\n     * @category Scheduling\n     */\n    get timestamp(): number {\n        return this.scheduler.timestamp\n    }\n\n    /**\n     * Indicates if the bus should force all sensors to stream\n     */\n    get streaming(): boolean {\n        return this._streaming\n    }\n\n    /**\n     * Sets automatic streaming on and off\n     */\n    set streaming(value: boolean) {\n        this._streaming = value\n    }\n\n    /**\n     * Creates a promise that awaits for the given duration using the bus scheduler\n     * @category Scheduling\n     */\n    delay<T>(millis: number, value?: T): Promise<T | undefined> {\n        return new Promise(resolve =>\n            this.scheduler.setTimeout(() => resolve(value), millis)\n        )\n    }\n\n    /**\n     * Gets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    get minLoggerPriority(): LoggerPriority {\n        return this._minLoggerPriority\n    }\n\n    /**\n     * Sets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    set minLoggerPriority(priority: LoggerPriority) {\n        if (priority !== this._minLoggerPriority) {\n            this._minLoggerPriority = priority\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Returns undefined\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return undefined\n    }\n\n    private async handleRealTimeClockSync(device: JDDevice) {\n        // tell time to the RTC clocks\n        if (device.hasService(SRV_REAL_TIME_CLOCK))\n            await RealTimeClockServer.syncTime(this)\n    }\n\n    private handleRoleManager() {\n        if (this.roleManager) return\n\n        const service = this.services({ serviceClass: SRV_ROLE_MANAGER })[0]\n        this.setRoleManagerService(service)\n    }\n\n    /**\n     * Sends a packet to the bus\n     * @param packet packet to send\n     * @internal\n     */\n    async sendPacketAsync(packet: Packet) {\n        packet.timestamp = this.timestamp\n        if (Flags.trace) packet.meta[META_TRACE] = stack()\n\n        // special debug mode to avoid dashboard interfere with packets\n        // will generate fails for acks\n        if (this.passive) return\n\n        this.emit(PACKET_SEND, packet)\n\n        await Promise.all(\n            this._transports.map(transport => transport.sendPacketAsync(packet))\n        )\n    }\n\n    /**\n     * Gets the list of known firmware blobs\n     * @category Firmware\n     */\n    get firmwareBlobs() {\n        return this._firmwareBlobs\n    }\n\n    /**\n     * Sets the list of known firmware blobs\n     * @category Firmware\n     */\n    set firmwareBlobs(blobs: FirmwareBlob[]) {\n        this._firmwareBlobs = blobs\n        this.emit(FIRMWARE_BLOBS_CHANGE)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets the current list of known devices on the bus\n     * @category Services\n     */\n    devices(options?: DeviceFilter) {\n        if (options?.serviceName && options?.serviceClass > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\")\n        const sc =\n            options?.serviceClass > -1\n                ? options?.serviceClass\n                : serviceClass(options?.serviceName)\n\n        let r = this._devices.slice(0)\n        if (sc > -1) r = r.filter(s => s.hasService(sc))\n        if (options?.ignoreInfrastructure)\n            r = r.filter(\n                s =>\n                    s.deviceId !== this.selfDeviceId &&\n                    s.serviceClasses.indexOf(SRV_INFRASTRUCTURE) < 0\n            )\n        if (options?.announced) r = r.filter(s => s.announced)\n        if (options?.ignoreSimulators)\n            r = r.filter(r => !this.findServiceProvider(r.deviceId))\n        if (options?.productIdentifier) r = r.filter(r => !!r.productIdentifier)\n        if (options?.physical) r = r.filter(r => !!r.isPhysical)\n        return r\n    }\n\n    /**\n     * Gets the current list of service providers on the bus\n     * @category Services\n     */\n    serviceProviders(): JDServiceProvider[] {\n        return this._serviceProviders.slice(0)\n    }\n\n    /**\n     * Get a service providers for a given device\n     * @param deviceId\n     * @category Services\n     */\n    findServiceProvider(deviceId: string) {\n        return this._serviceProviders.find(d => d.deviceId === deviceId)\n    }\n\n    /**\n     * Adds the service provider to the bus and returns the associated devoce\n     * @param provider instance to add\n     * @category Services\n     */\n    addServiceProvider(provider: JDServiceProvider) {\n        if (provider && this._serviceProviders.indexOf(provider) < 0) {\n            this._serviceProviders.push(provider)\n            provider.bus = this\n\n            this.emit(SERVICE_PROVIDER_ADDED, provider)\n            this.emit(CHANGE)\n        }\n\n        return this.device(provider.deviceId)\n    }\n\n    /**\n     * Removes the service provider from the bus\n     * @param provider instance to remove\n     * @category Services\n     */\n    removeServiceProvider(provider: JDServiceProvider) {\n        if (!provider) return\n\n        const i = this._serviceProviders.indexOf(provider)\n        if (i > -1) {\n            this.removeDevice(provider.deviceId)\n            // remove host\n            this._serviceProviders.splice(i, 1)\n            provider.bus = undefined\n            this.emit(SERVICE_PROVIDER_REMOVED, provider)\n\n            // removed host\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Remove a device client by identifier\n     * @param deviceId\n     * @category Devices\n     */\n    removeDevice(deviceId: string) {\n        // remove device as well\n        const devi = this._devices.findIndex(d => d.deviceId === deviceId)\n        if (devi > -1) {\n            const dev = this._devices[devi]\n            this._devices.splice(devi, 1)\n            dev.disconnect()\n            this.emit(DEVICE_DISCONNECT, dev)\n            this.emit(DEVICE_CHANGE, dev)\n        }\n    }\n\n    /**\n     * Gets the list of devices\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.devices()\n    }\n\n    /**\n     * Gets the current list of services from all the known devices on the bus\n     * @category Services\n     */\n    services(options?: ServiceFilter & DeviceFilter): JDService[] {\n        return arrayConcatMany(\n            this.devices(options).map(d => d.services(options))\n        )\n    }\n\n    /**\n     * Gets a device on the bus\n     * @param id device identifier to query\n     * @param skipCreate do not create new device if missing\n     * @param pkt packet that generated this device query\n     * @category Services\n     */\n    device(id: string, skipCreate?: boolean, pkt?: Packet) {\n        if (id === \"0000000000000000\" && !skipCreate) {\n            console.warn(\"jadac: trying to access device 0000000000000000\")\n            return undefined\n        }\n        let d = this._devices.find(d => d.deviceId == id)\n        if (!d && !skipCreate) {\n            if (this.devicesFrozen) {\n                console.debug(`info`, `devices frozen, dropping ${id}`)\n                return undefined\n            }\n            d = new JDDevice(this, id, pkt)\n            this._devices.push(d)\n            console.debug(\n                `${id === this.selfDeviceId ? \"self\" : \"new\"} device ${\n                    d.shortId\n                } (${id})`\n            )\n            // stable sort\n            this._devices.sort((l, r) => strcmp(l.deviceId, r.deviceId))\n            this.emit(DEVICE_CONNECT, d)\n            this.emit(DEVICE_CHANGE, d)\n            this.emit(CHANGE)\n        }\n        return d\n    }\n\n    /**\n     * Push a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    pushDeviceFrozen() {\n        this._gcDevicesFrozen++\n    }\n\n    /**\n     * Pop a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    popDeviceFrozen() {\n        this._gcDevicesFrozen = Math.max(0, this._gcDevicesFrozen - 1)\n    }\n\n    /**\n     * Indicates if the device list if currently frozen.\n     * @category Lifecycle\n     */\n    get devicesFrozen() {\n        return this._gcDevicesFrozen > 0\n    }\n\n    private gcDevices() {\n        this.emit(DEVICE_CLEAN)\n        if (this.devicesFrozen) {\n            console.debug(\"devices frozen\")\n            return\n        }\n\n        const LOST_DELAY = JD_DEVICE_LOST_DELAY\n        const DISCONNECTED_DELAY = JD_DEVICE_DISCONNECTED_DELAY\n        const lostCutoff = this.timestamp - LOST_DELAY\n        const disconnectedCutoff = this.timestamp - DISCONNECTED_DELAY\n\n        // cycle through events and disconnect devices that are long gone\n        for (let i = 0; i < this._devices.length; ++i) {\n            const dev = this._devices[i]\n\n            if (dev.lastSeen < disconnectedCutoff) {\n                this._devices.splice(i, 1)\n                i--\n                this.disconnectDevice(dev)\n            } else if (dev.lastSeen < lostCutoff) {\n                dev.lost = true\n            }\n        }\n    }\n\n    private disconnectDevice(dev: JDDevice) {\n        dev.disconnect()\n        this.emit(DEVICE_DISCONNECT, dev)\n        this.emit(DEVICE_CHANGE, dev)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Ingests and process a packet received from the bus.\n     * @param pkt a jacdac packet\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        if (!pkt.isMultiCommand && !pkt.device) {\n            pkt.device = this.device(pkt.deviceIdentifier, false, pkt)\n            // the device id is unknown dropping\n            if (!pkt.device) {\n                if (Flags.diagnostics)\n                    console.debug(\n                        `unknown pkt device ${pkt.deviceIdentifier}`,\n                        {\n                            pkt,\n                        }\n                    )\n                return\n            }\n        }\n        this.emit(PACKET_PRE_PROCESS, pkt)\n        let isAnnounce = false\n        if (!pkt.device) {\n            // skip\n        } else if (pkt.isCommand) {\n            if (pkt.deviceIdentifier == this.selfDeviceId) {\n                if (pkt.requiresAck) {\n                    const ack = Packet.onlyHeader(pkt.crc)\n                    ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK\n                    ack.deviceIdentifier = this.selfDeviceId\n                    ack.sendReportAsync(this.selfDevice)\n                }\n            }\n            pkt.device.processPacket(pkt)\n        } else {\n            pkt.device.lastSeen = pkt.timestamp\n            if (pkt.serviceIndex == JD_SERVICE_INDEX_CTRL) {\n                if (pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n                    isAnnounce = true\n                    pkt.device.processAnnouncement(pkt)\n                } else if (\n                    pkt.isMultiCommand &&\n                    pkt.serviceCommand == (CMD_SET_REG | ControlReg.ResetIn)\n                ) {\n                    // someone else is doing reset in\n                    this._lastResetInTime = this.timestamp\n                }\n            }\n            pkt.device.processPacket(pkt)\n        }\n        this.emit(PACKET_PROCESS, pkt)\n        // don't spam with duplicate advertisement events\n        if (isAnnounce) {\n            this.emit(PACKET_RECEIVE_ANNOUNCE, pkt)\n        } else {\n            this.emit(PACKET_RECEIVE, pkt)\n            if (pkt.isEvent) this.emit(PACKET_EVENT, pkt)\n            else if (pkt.isReport) this.emit(PACKET_REPORT, pkt)\n        }\n    }\n\n    /**\n     * Gets the virtual device created by this bus to handle pipes.\n     * @category Services\n     */\n    get selfDevice() {\n        return this.device(this.selfDeviceId)\n    }\n\n    private handleSelfAnnounce(): Promise<void> {\n        return Promise.all([\n            this.sendAnnounce(),\n            this.sendResetIn(),\n            this.sendPingLoggers(),\n        ]).then(() => {})\n    }\n\n    private async sendAnnounce() {\n        // we do not support any services (at least yet)\n        if (this._restartCounter < 0xf) this._restartCounter++\n        const pkt = Packet.jdpacked<[number, number[][]]>(\n            CMD_ADVERTISEMENT_DATA,\n            \"u32 r: u32\",\n            [this._restartCounter | 0x100, [[SRV_INFRASTRUCTURE]]]\n        )\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        pkt.deviceIdentifier = this.selfDeviceId\n        await pkt.sendReportAsync(this.selfDevice)\n    }\n\n    get lastResetInTime() {\n        return this._lastResetInTime\n    }\n\n    private async sendResetIn() {\n        // don't send reset if already received\n        // or no devices\n        if (!this.devices({ ignoreInfrastructure: true }).length) return\n        this._lastResetInTime = this.timestamp\n        const rst = Packet.jdpacked<[number]>(\n            CMD_SET_REG | ControlReg.ResetIn,\n            \"u32\",\n            [RESET_IN_TIME_US]\n        )\n        await rst.sendAsMultiCommandAsync(this, SRV_CONTROL)\n    }\n\n    public async sendStopStreaming(): Promise<void> {\n        console.debug(`bus: stop streaming`)\n        const readingRegisters = this.services({\n            announced: true,\n            ignoreInfrastructure: true,\n        })\n            .map(\n                srv =>\n                    srv.readingRegister &&\n                    srv.register(SensorReg.StreamingSamples)\n            )\n            .filter(reg => !!reg)\n\n        await Promise.all(\n            readingRegisters.map(reg => reg.sendSetPackedAsync([0]))\n        )\n    }\n\n    private async sendPingLoggers() {\n        if (\n            this._minLoggerPriority < LoggerPriority.Silent &&\n            this.timestamp - this._lastPingLoggerTime > PING_LOGGERS_POLL &&\n            this.devices({\n                ignoreInfrastructure: true,\n                serviceClass: SRV_LOGGER,\n            }).length > 0\n        ) {\n            this._lastPingLoggerTime = this.timestamp\n            const pkt = Packet.jdpacked<[LoggerPriority]>(\n                CMD_SET_REG | LoggerReg.MinPriority,\n                \"u8\",\n                [this._minLoggerPriority]\n            )\n            await pkt.sendAsMultiCommandAsync(this, SRV_LOGGER)\n        }\n    }\n\n    /**\n     * Indicates if registers are automatically refreshed in the background.\n     * @category Services\n     */\n    get backgroundRefreshRegisters() {\n        return !!this._refreshRegistersInterval\n    }\n\n    /**\n     * Enables or disables automatically refreshing registers in the background.\n     * @param enabled true to automatically refresh registers\n     * @category Services\n     */\n    set backgroundRefreshRegisters(enabled: boolean) {\n        if (!!enabled !== this.backgroundRefreshRegisters) {\n            if (!enabled) {\n                if (this._refreshRegistersInterval)\n                    this.scheduler.clearInterval(this._refreshRegistersInterval)\n                this._refreshRegistersInterval = undefined\n            } else {\n                this._refreshRegistersInterval = this.scheduler.setInterval(\n                    this.handleRefreshRegisters.bind(this),\n                    REFRESH_REGISTER_POLL\n                )\n            }\n        }\n    }\n\n    /**\n     * Cycles through all known registers and refreshes the once that have REPORT_UPDATE registered\n     */\n    private handleRefreshRegisters() {\n        const devices = this._devices.filter(\n            device => device.announced && !device.lost\n        ) // don't try lost devices or devices flashing\n\n        // skip if no devices or any device is currently flashing\n        if (!devices.length || devices.some(dev => dev.flashing)) return // no devices, we're done\n\n        // collect registers\n        const registers = arrayConcatMany(\n            devices.map(device =>\n                arrayConcatMany(\n                    device.services({ specification: true }).map(service =>\n                        service\n                            .registers()\n                            // someone is listening for reports\n                            .filter(\n                                reg =>\n                                    // automatic streaming\n                                    (this._streaming &&\n                                        reg.code === SystemReg.Reading) ||\n                                    // listening for updates\n                                    reg.listenerCount(REPORT_RECEIVE) > 0 ||\n                                    reg.listenerCount(REPORT_UPDATE) > 0\n                            )\n                            // ask if data is missing or non-const/status code\n                            .filter(\n                                reg =>\n                                    !reg.data ||\n                                    !(\n                                        isConstRegister(reg.specification) ||\n                                        reg.code === SystemReg.StatusCode ||\n                                        reg.code === SystemReg.ReadingError\n                                    )\n                            )\n                            // stop asking optional registers\n                            .filter(\n                                reg =>\n                                    !reg.specification?.optional ||\n                                    reg.lastGetAttempts <\n                                        REGISTER_OPTIONAL_POLL_COUNT\n                            )\n                    )\n                )\n            )\n        )\n\n        // refresh values\n        for (const register of registers) {\n            const { service, specification } = register\n            const noDataYet = !register.data\n            const age = this.timestamp - register.lastGetTimestamp\n            const backoff = register.lastGetAttempts\n\n            // streaming register? use streaming sample\n            if (isReading(specification) && isSensor(service.specification)) {\n                // compute refresh interval\n                const intervalRegister = service.register(\n                    SensorReg.StreamingInterval\n                )\n                let interval = intervalRegister?.uintValue\n                // no interval data\n                if (interval === undefined) {\n                    // use preferred interval data or default to 50\n                    const preferredIntervalRegister = service.register(\n                        SensorReg.StreamingPreferredInterval\n                    )\n                    const preferredInterval =\n                        preferredIntervalRegister?.uintValue\n                    interval = preferredInterval\n                    // if no interval, poll interval value\n                    if (interval === undefined) {\n                        // all async\n                        if (\n                            intervalRegister &&\n                            !intervalRegister.data &&\n                            this.timestamp - intervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL\n                        )\n                            intervalRegister.sendGetAsync()\n\n                        if (\n                            preferredIntervalRegister &&\n                            !preferredIntervalRegister.data &&\n                            this.timestamp -\n                                preferredIntervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL\n                        )\n                            preferredIntervalRegister.sendGetAsync()\n                    }\n                }\n                // still no interval data use from spec or default\n                if (interval === undefined)\n                    interval =\n                        specification.preferredInterval ||\n                        STREAMING_DEFAULT_INTERVAL\n                const streamingSamplesRegister = service.register(\n                    SensorReg.StreamingSamples\n                )\n                const streamingSamplesAge =\n                    this.timestamp - streamingSamplesRegister.lastSetTimestamp\n                // need to figure out when we asked for streaming\n                const midSamplesAge = (interval * 0xff) >> 1\n                // compute if half aged\n                if (streamingSamplesAge > midSamplesAge) {\n                    //console.debug({ samplesAge, midSamplesAge, interval })\n                    streamingSamplesRegister.sendSetPackedAsync([0xff])\n                }\n\n                // first query, get data asap once per second\n                if (noDataYet && age > 1000) register.sendGetAsync()\n            } // regular register, ping if data is old\n            else {\n                const volatile = !!specification?.volatile\n                const expiration = volatile\n                    ? Math.min(\n                          REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL,\n                          REGISTER_POLL_REPORT_VOLATILE_INTERVAL *\n                              (1 << backoff)\n                      )\n                    : Math.min(\n                          REGISTER_POLL_REPORT_MAX_INTERVAL,\n                          (noDataYet\n                              ? REGISTER_POLL_FIRST_REPORT_INTERVAL\n                              : REGISTER_POLL_REPORT_INTERVAL) *\n                              (1 << backoff)\n                      )\n                if (age > expiration) {\n                    //console.log(`bus: poll ${register.id}`, register, age, backoff, expiration)\n                    register.sendGetAsync()\n                }\n            }\n        }\n\n        // apply streaming samples to service provider\n        this._serviceProviders.map(host => host.emit(REFRESH))\n    }\n\n    /**\n     * Runs a promise with a timeout. Returns undefined if timeout happens before of disconnection.\n     * @param timeout duration to wait before declaring timeout\n     * @param promise promise to wrap\n     * @category Lifecycle\n     */\n    withTimeout<T>(timeout: number, promise: Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            let done = false\n            const tid = setTimeout(() => {\n                if (!done) {\n                    done = true\n                    if (!this._transports.some(tr => tr.connected)) {\n                        // the bus got disconnected so all operation will\n                        // time out going further\n                        this.emit(TIMEOUT_DISCONNECT)\n                        resolve(undefined)\n                    } else {\n                        // the command timed out\n                        this.emit(TIMEOUT)\n                        this.emit(ERROR, \"Timeout (\" + timeout + \"ms)\")\n                        resolve(undefined)\n                    }\n                }\n            }, timeout)\n            promise.then(\n                v => {\n                    if (!done) {\n                        done = true\n                        clearTimeout(tid)\n                        resolve(v)\n                    } else {\n                        // we already gave up\n                        this.emit(LATE)\n                    }\n                },\n                e => {\n                    if (!done) {\n                        done = true\n                        clearTimeout(tid)\n                        reject(e)\n                    }\n                }\n            )\n        })\n    }\n}\n\nexport default JDBus\n","import JDBus from \"../bus\"\nimport JDClient from \"../client\"\nimport { CHANGE, PROGRESS } from \"../constants\"\nimport Trace from \"./trace\"\n\n/**\n * A player for packet traces.\n * @category Trace\n */\nexport class TracePlayer extends JDClient {\n    private _trace: Trace\n    private _busStartTimestamp = 0\n    private _index = 0\n    private _interval: any\n    private _lastProgressEmit = 0\n\n    constructor(public readonly bus: JDBus, public speed: number = 1) {\n        super()\n        this.tick = this.tick.bind(this)\n\n        // always stop when unmounting\n        this.mount(() => this.stop())\n    }\n\n    get running() {\n        return !!this._interval\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    set trace(t: Trace) {\n        if (t !== this._trace) {\n            this.stop()\n            this._trace = t\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Gets the adjusted timestamp\n     */\n    get elapsed() {\n        return (this.bus.timestamp - this._busStartTimestamp) * this.speed\n    }\n\n    get progress() {\n        if (!this.trace) return 0\n        return Math.max(0, Math.min(1, this.elapsed / this.trace.duration))\n    }\n\n    get length() {\n        return this.trace?.length || 0\n    }\n\n    start() {\n        if (this._interval || !this._trace) return // already running\n\n        // this is the reference start time of this run\n        this._busStartTimestamp = this.bus.timestamp\n        this._index = 0\n        this._interval = this.bus.scheduler.setInterval(this.tick, 50)\n        this.emit(CHANGE)\n        this.emitProgress(true)\n    }\n\n    stop() {\n        if (this._interval) {\n            this.bus.scheduler.clearInterval(this._interval)\n            this._interval = undefined\n            this.emitProgress(true)\n            this.emit(CHANGE)\n        }\n    }\n\n    private tick() {\n        if (!this._trace) return\n\n        const busElapsed = this.elapsed\n        const packets = this.trace.packets\n        const packetStart = packets[0]?.timestamp || 0\n\n        while (this._index < packets.length) {\n            const packet = packets[this._index]\n            const packetElapsed = packet.timestamp - packetStart\n            if (packetElapsed > busElapsed) break // wait to catch up\n            // clone packet and send\n            const pkt = packet.clone()\n            pkt.replay = true\n            pkt.timestamp = this._busStartTimestamp + packetElapsed\n            this.bus.processPacket(pkt)\n            this._index++\n        }\n\n        //console.log(`replay ${this._index} ${nframes} frames, ${npackets} packets`)\n        this.emitProgress()\n        if (this._index >= packets.length) this.stop()\n    }\n\n    private emitProgress(force?: boolean) {\n        if (force || this.bus.timestamp - this._lastProgressEmit > 250) {\n            this.emit(PROGRESS, this.progress)\n            this._lastProgressEmit = this.bus.timestamp\n        }\n    }\n}\nexport default TracePlayer\n","import { arrayConcatMany, fromHex } from \"./utils\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport TracePlayer from \"./trace/traceplayer\"\nimport Frame from \"./frame\"\nimport Trace from \"./trace/trace\"\nimport { META_TRACE } from \"./constants\"\n\n/**\n * Parse a trace text file\n * @param contents\n * @returns\n * @category Trace\n */\nexport function parseTrace(contents: string): Trace {\n    const description: string[] = []\n    const packets: Packet[] = []\n    contents?.split(/\\r?\\n/).forEach(ln => {\n        // parse data\n        const m = /^(\\d+.?\\d*)\\s+([a-f0-9]{12,})/i.exec(ln)\n        if (!m) {\n            // might be a stack trace\n            if (/^\\s+at\\s/.test(ln)) {\n                const lastPacket = packets[packets.length - 1]\n                if (lastPacket) {\n                    let trace = (lastPacket.meta[META_TRACE] as string) || \"\"\n                    trace += ln + \"\\n\"\n                    lastPacket.meta[META_TRACE] = trace\n                }\n            } else {\n                // probably junk data\n                if (packets.length == 0) description.push(ln)\n            }\n            return\n        }\n\n        const timestamp = parseInt(m[1])\n        const data = fromHex(m[2])\n        // add to array\n        packets.push(Packet.fromBinary(data, timestamp))\n    })\n    if (packets.length)\n        return new Trace(packets, {\n            description: description.join(\"\\n\").trim(),\n        })\n    else return undefined\n}\n\n/**\n * Parses a logic analyzer log into a trace\n * @param logcontents\n * @returns\n * @category Trace\n */\nexport function parseLogicLog(logcontents: string): Frame[] {\n    if (!logcontents) return undefined\n\n    const res: Frame[] = []\n    let frameBytes = []\n    let lastTime = 0\n    for (const ln of logcontents.split(/\\r?\\n/)) {\n        let m = /^JD (\\d+) ([0-9a-f]+)/i.exec(ln)\n        if (m) {\n            res.push({\n                timestamp: parseInt(m[1]),\n                data: fromHex(m[2]),\n            })\n            continue\n        }\n\n        /** Windows, logic 1.*\nTime [s],Value,Parity Error,Framing Error\n0.042909760000000,0x00,,Error\n0.042980320000000,0xD4,,\n0.042990240000000,0x81,,\n0.043000160000000,0x10,,\n0.043010240000000,0x00,,\n0.043020160000000,0xE8,,\n0.043030240000000,0xDF,,\n0.043040160000000,0xCB,,\n0.043050240000000,0xD1,,\n0.043060160000000,0x97,,\n0.043070240000000,0x34,,\n0.043080160000000,0x37,,\n0.043090240000000,0x48,,\n0.043100160000000,0x0C,,\n0.043110080000000,0x00,,\n0.043120160000000,0x00,,\n0.043130080000000,0x00,,\n0.043140160000000,0x00,,\n0.043150080000000,0x00,,\n0.043160160000000,0x00,,\n0.043170080000000,0x00,,\n0.043180160000000,0xCA,,\n0.043190080000000,0x1F,,\n0.043200160000000,0xDC,,\n0.043210080000000,0x12,,\n0.043220160000000,0x46,,\n0.043230080000000,0x47,,\n0.043240160000000,0x27,,\n0.043250080000000,0x1F,,\n0.043264800000000,0x00,,Error\n0.063968960000000,0x00,,Error\n         */\n        m = /^([\\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(ln)\n        if (!m) continue\n        const tm = parseFloat(m[1])\n        if (lastTime && tm - lastTime > 0.1) {\n            res.push({\n                timestamp: lastTime * 1000,\n                data: new Uint8Array(frameBytes),\n                info: \"timeout\",\n            })\n            frameBytes = []\n            lastTime = 0\n        }\n\n        lastTime = tm\n        if (/(framing error|Error)/.test(ln)) {\n            if (frameBytes.length > 0)\n                res.push({\n                    timestamp: lastTime * 1000,\n                    data: new Uint8Array(frameBytes),\n                })\n            frameBytes = []\n            lastTime = 0\n        } else {\n            frameBytes.push(parseInt(m[2]))\n        }\n    }\n\n    return res\n}\n\n/**\n * Replays a parsed logic log\n * @param bus\n * @param frames\n * @param speed\n * @category Trace\n */\nexport function replayLogicLog(\n    bus: JDBus,\n    frames: Frame[],\n    speed?: number\n): void {\n    const packets = arrayConcatMany(\n        frames.map(frame => Packet.fromFrame(frame.data, frame.timestamp))\n    )\n    const player = new TracePlayer(bus, speed)\n    player.trace = new Trace(packets)\n    bus.clear(packets[0].timestamp)\n    player.start()\n}\n","import * as U from \"./utils\"\nimport Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport { PACKET_REPORT, CMD_GET_REG, JD_SERVICE_INDEX_CTRL } from \"./constants\"\nimport { ControlReg } from \"../../jacdac-spec/dist/specconstants\"\n\n/**\n * @internal\n */\nexport async function packetSpeedTest(dev: JDDevice) {\n    const pingCmd = CMD_GET_REG | ControlReg.ProductIdentifier\n\n    dev.on(PACKET_REPORT, onPacket)\n    const t0 = Date.now()\n    let lastSend = Date.now()\n    let numpkt = 0\n    let timeouts = 0\n    let numrecv = 0\n    let done = false\n\n    await ask()\n    while (numpkt < 100) {\n        await U.delay(50)\n        const now = Date.now()\n        if (now - t0 > 3000) break\n        if (now - lastSend > 100) {\n            timeouts++\n            await ask()\n        }\n    }\n    done = true\n    await U.delay(250)\n    dev.off(PACKET_REPORT, onPacket)\n    const ms = Date.now() - t0\n\n    const pktsPerSecond = numpkt / (ms / 1000)\n    const dropRate = (100 * (numpkt - numrecv)) / numpkt\n\n    return {\n        msg: `${pktsPerSecond.toFixed(1)} pkts/s; ${dropRate.toFixed(\n            2\n        )}% dropped`,\n        pktsPerSecond,\n        dropRate,\n    }\n\n    async function ask() {\n        lastSend = Date.now()\n        numpkt++\n        await dev.sendCtrlCommand(pingCmd)\n    }\n\n    async function onPacket(p: Packet) {\n        if (\n            p.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            p.serviceCommand == pingCmd\n        ) {\n            numrecv++\n            if (!done) await ask()\n        }\n    }\n}\n","import { setNumber, sizeOfNumberFormat } from \"./buffer\"\nimport { CMD_SET_REG, JD_SERIAL_MAX_PAYLOAD_SIZE } from \"./constants\"\nimport { PackedValues } from \"./pack\"\nimport Packet from \"./packet\"\nimport {\n    clampToStorage,\n    isRegister,\n    numberFormatFromStorageType,\n    scaleFloatToInt,\n} from \"./spec\"\nimport { stringToUint8Array, toUTF8 } from \"./utils\"\n\n/**\n * @internal\n */\nexport function packArguments(info: jdspec.PacketInfo, args: PackedValues) {\n    let repeatIdx = -1\n    let numReps = 0\n    let argIdx = 0\n    let dst = 0\n\n    const buf = new Uint8Array(256)\n\n    for (let i = 0; i < info.fields.length; ++argIdx, ++i) {\n        if (argIdx >= args.length && numReps > 0) break\n        const arg0 = argIdx < args.length ? args[argIdx] : 0\n        const fld = info.fields[i]\n\n        if (repeatIdx == -1 && fld.startRepeats) repeatIdx = i\n\n        const arg1 =\n            fld.type == \"string0\" && typeof arg0 == \"string\"\n                ? arg0 + \"\\u0000\"\n                : arg0\n\n        const arg =\n            typeof arg1 == \"boolean\"\n                ? arg1\n                    ? 1\n                    : 0\n                : typeof arg1 == \"string\"\n                ? stringToUint8Array(toUTF8(arg1))\n                : arg1\n\n        if (typeof arg == \"number\") {\n            const intVal = scaleFloatToInt(arg, fld)\n            if (fld.storage == 0)\n                throw new Error(`expecting ${fld.type} got number`)\n\n            const fmt = numberFormatFromStorageType(fld.storage)\n            setNumber(buf, fmt, dst, clampToStorage(intVal, fld.storage))\n            dst += sizeOfNumberFormat(fmt)\n        } else {\n            let size = Math.abs(fld.storage)\n            if (typeof arg1 == \"string\") {\n                if (size == 0) size = arg.length\n                const argCut = arg.slice(0, size)\n                buf.set(argCut, dst)\n                dst += size\n            } else if (size == 0 || size == arg.length) {\n                buf.set(arg, dst)\n                dst += arg.length\n            } else {\n                throw new Error(\n                    `expecting ${Math.abs(fld.storage)} bytes; got ${\n                        arg.length\n                    }`\n                )\n            }\n        }\n\n        if (dst >= JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw new Error(\n                `jacdac packet length too large, ${dst} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`\n            )\n\n        if (repeatIdx != -1 && i + 1 >= info.fields.length) {\n            i = repeatIdx - 1\n            numReps++\n        }\n    }\n\n    const cmd = isRegister(info)\n        ? info.identifier | CMD_SET_REG\n        : info.identifier\n    const pkt = Packet.from(cmd, buf.slice(0, dst))\n    if (info.kind != \"report\") pkt.isCommand = true\n    return pkt\n}\n","import {\n    ControlReg,\n    LoggerReg,\n    SRV_CONTROL,\n    SRV_LOGGER,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport { isInstanceOf, serviceSpecificationFromName } from \"./spec\"\n\n/**\n * @category Trace\n * @internal\n */\nexport type CompiledPacketFilter = (pkt: Packet) => boolean\n\n/**\n * @category Trace\n * @internal\n */\nexport interface PacketFilterProps {\n    announce?: boolean\n    repeatedAnnounce?: boolean\n    resetIn?: boolean\n    minPriority?: boolean\n    requiresAck?: boolean\n    log?: boolean\n    productIdentifiers?: number[]\n    flags?: string[]\n    regGet?: boolean\n    regSet?: boolean\n    devices?: Record<string, { from?: boolean; to?: boolean }>\n    selfDevice?: boolean\n    serviceClasses?: number[]\n    pkts?: string[]\n    before?: number\n    after?: number\n    grouping?: boolean\n    pipes?: boolean\n    port?: number\n    collapseAck?: boolean\n    collapsePipes?: boolean\n    collapseGets?: boolean\n    errors?: boolean\n}\n\n/**\n * @internal\n */\nexport interface PacketFilter {\n    source: string\n    props: PacketFilterProps\n    filter: CompiledPacketFilter\n}\n\n/**\n * Given a filter text, compiles packet filter\n * @param bus\n * @param text\n * @returns\n * @category Trace\n */\nexport function parsePacketFilter(bus: JDBus, text: string): PacketFilter {\n    if (!text) {\n        return {\n            source: text,\n            props: {\n                grouping: true,\n            },\n            filter: () => true,\n        }\n    }\n\n    const flags = new Set<string>()\n    const serviceClasses = new Set<number>()\n    const pkts = new Set<string>()\n    const productIdentifiers = new Set<number>()\n    let repeatedAnnounce: boolean = undefined\n    let announce: boolean = undefined\n    let resetIn: boolean = undefined\n    let minPriority: boolean = undefined\n    let regGet: boolean = undefined\n    let regSet: boolean = undefined\n    let requiresAck: boolean = undefined\n    let log: boolean = undefined\n    let before: number = undefined\n    let after: number = undefined\n    const devices: Record<string, { from: boolean; to: boolean }> = {}\n    let grouping = true\n    let pipes: boolean = undefined\n    let port: number = undefined\n    let collapseAck = true\n    let collapsePipes = true\n    let collapseGets = true\n    let errors: boolean = undefined\n    let selfDevice: boolean = undefined\n    text.split(/\\s+/g).forEach(part => {\n        const [, prefix, , value] =\n            /([a-z\\-_]+)([:=]([^\\s]+))?/.exec(part) || []\n        switch (prefix || \"\") {\n            case \"kind\":\n            case \"k\":\n                if (!value) break\n                flags.add(value.toLowerCase())\n                break\n            case \"service\":\n            case \"srv\": {\n                if (!value) break\n                const service = serviceSpecificationFromName(value)\n                const serviceClass =\n                    service?.classIdentifier || parseInt(value, 16)\n                if (serviceClass !== undefined && !isNaN(serviceClass))\n                    serviceClasses.add(serviceClass)\n                break\n            }\n            case \"announce\":\n            case \"a\":\n                announce = parseBoolean(value)\n                break\n            case \"repeated-announce\":\n            case \"ra\":\n                repeatedAnnounce = parseBoolean(value)\n                break\n            case \"self\":\n                selfDevice = parseBoolean(value)\n                break\n            case \"reset-in\":\n            case \"ri\":\n            case \"resetin\":\n                resetIn = parseBoolean(value)\n                break\n            case \"errors\":\n                errors = parseBoolean(value)\n                break\n            case \"min-priority\":\n            case \"minpri\":\n            case \"minpriority\":\n            case \"mi\":\n                minPriority = parseBoolean(value)\n                break\n            case \"requires-ack\":\n            case \"ack\":\n                requiresAck = parseBoolean(value)\n                break\n            case \"collapse-ack\":\n                collapseAck = parseBoolean(value)\n                break\n            case \"device\":\n            case \"dev\":\n            case \"to\":\n            case \"from\": {\n                if (!value) break\n                // resolve device by name\n                const deviceId = bus\n                    .devices()\n                    .find(\n                        d => d.shortId === value || d.name === value\n                    )?.deviceId\n                if (deviceId) {\n                    const data =\n                        devices[deviceId] ||\n                        (devices[deviceId] = { from: false, to: false })\n                    if (prefix === \"from\") data.from = true\n                    else if (prefix === \"to\") data.to = true\n                }\n                break\n            }\n            case \"pid\":\n            case \"product-identifier\": {\n                if (!value) return\n                // find register\n                const pid = parseInt(value.replace(/^0?x/, \"\"), 16)\n                if (!isNaN(pid)) productIdentifiers.add(pid)\n                break\n            }\n            case \"pkt\":\n            case \"reg\":\n            case \"register\":\n            case \"cmd\":\n            case \"command\":\n            case \"ev\":\n            case \"event\": {\n                if (!value) return\n                // find register\n                const id = parseInt(value.replace(/^0?x/, \"\"), 16)\n                if (!isNaN(id)) pkts.add(id.toString(16))\n                // support name\n                pkts.add(value)\n                break\n            }\n            case \"reg-get\":\n            case \"get\":\n                regGet = parseBoolean(value)\n                break\n            case \"reg-set\":\n            case \"set\":\n                regSet = parseBoolean(value)\n                break\n            case \"log\":\n                log = parseBoolean(value)\n                break\n            case \"before\":\n                before = parseTimestamp(value)\n                break\n            case \"after\":\n                after = parseTimestamp(value)\n                break\n            case \"grouping\":\n                grouping = parseBoolean(value)\n                break\n            case \"pipes\":\n                pipes = parseBoolean(value)\n                break\n            case \"collapse-pipe\":\n            case \"collapse-pipes\":\n                collapsePipes = parseBoolean(value)\n                break\n            case \"collapse-get\":\n            case \"collapse-gets\":\n                collapseGets = parseBoolean(value)\n                break\n            case \"port\":\n                port = parseInt(value)\n                break\n        }\n    })\n\n    const props = {\n        announce,\n        repeatedAnnounce,\n        resetIn,\n        minPriority,\n        requiresAck,\n        collapseAck,\n        log,\n        productIdentifiers:\n            !!productIdentifiers.size && Array.from(productIdentifiers.keys()),\n        flags: !!flags.size && Array.from(flags.keys()),\n        regGet,\n        regSet,\n        devices,\n        selfDevice,\n        serviceClasses:\n            !!serviceClasses.size && Array.from(serviceClasses.keys()),\n        pkts: !!pkts.size && Array.from(pkts.keys()),\n        before,\n        after,\n        grouping,\n        pipes,\n        collapsePipes,\n        collapseGets,\n        port,\n        errors,\n    }\n    const filter = compileFilter(props)\n    return {\n        source: text,\n        props,\n        filter,\n    }\n    function parseBoolean(value: string) {\n        if (value === \"false\" || value === \"no\") return false\n        else if (value === \"true\" || value === \"yes\" || !value) return true\n        else return undefined\n    }\n    function parseTimestamp(value: string) {\n        const t = parseInt(value)\n        return isNaN(t) ? undefined : t\n    }\n}\n\nfunction compileFilter(props: PacketFilterProps) {\n    const {\n        announce,\n        repeatedAnnounce,\n        resetIn,\n        minPriority,\n        requiresAck,\n        log,\n        productIdentifiers,\n        flags,\n        regGet,\n        regSet,\n        devices,\n        selfDevice,\n        serviceClasses,\n        pkts,\n        before,\n        after,\n        pipes,\n        port,\n        errors,\n    } = props\n\n    const filters: CompiledPacketFilter[] = []\n    if (before !== undefined) filters.push(pkt => pkt.timestamp <= before)\n    if (after !== undefined) filters.push(pkt => pkt.timestamp >= after)\n    if (announce !== undefined) filters.push(pkt => pkt.isAnnounce === announce)\n    if (repeatedAnnounce !== undefined)\n        filters.push(\n            pkt =>\n                (!pkt.isAnnounce || pkt.isRepeatedAnnounce) === repeatedAnnounce\n        )\n    if (resetIn !== undefined)\n        filters.push(\n            pkt =>\n                !!(\n                    pkt.isRegisterSet &&\n                    pkt.serviceClass === SRV_CONTROL &&\n                    pkt.registerIdentifier === ControlReg.ResetIn\n                ) === resetIn\n        )\n    if (minPriority !== undefined)\n        filters.push(\n            pkt =>\n                (pkt.isRegisterSet &&\n                    pkt.serviceClass == SRV_LOGGER &&\n                    pkt.registerIdentifier === LoggerReg.MinPriority) ===\n                minPriority\n        )\n    if (requiresAck !== undefined)\n        filters.push(pkt => pkt.requiresAck === requiresAck)\n    if (flags) filters.push(pkt => hasAnyFlag(pkt))\n    if (pipes !== undefined) filters.push(pkt => pkt.isPipe)\n    if (port !== undefined) filters.push(pkt => pkt.pipePort === port)\n\n    if (regGet !== undefined && regSet !== undefined)\n        filters.push(\n            pkt => pkt.isRegisterGet === regGet && pkt.isRegisterSet === regSet\n        )\n    else if (regGet !== undefined)\n        filters.push(pkt => pkt.isRegisterGet === regGet)\n    else if (regSet !== undefined)\n        filters.push(pkt => pkt.isRegisterSet === regSet)\n\n    if (log !== undefined)\n        filters.push(\n            pkt => (pkt.serviceClass === SRV_LOGGER && pkt.isReport) === log\n        )\n    if (selfDevice !== undefined) {\n        filters.push(pkt => {\n            const { device } = pkt\n            if (!device) return true\n            return (device === device.bus.selfDevice) === selfDevice\n        })\n    }\n    if (Object.keys(devices).length)\n        filters.push(pkt => {\n            if (!pkt.device) return false\n            const f = devices[pkt.device.deviceId]\n            return (\n                !!f && (!f.from || !pkt.isCommand) && (!f.to || pkt.isCommand)\n            )\n        })\n    if (serviceClasses) {\n        filters.push(pkt =>\n            serviceClasses.some(serviceClass =>\n                isInstanceOf(pkt.serviceClass, serviceClass)\n            )\n        )\n    }\n    if (pkts) {\n        filters.push(\n            pkt =>\n                pkts.indexOf(pkt.decoded?.info.identifier.toString(16)) > -1 ||\n                pkts.indexOf(pkt.decoded?.info.name) > -1\n        )\n    }\n    if (productIdentifiers)\n        filters.push(pkt => {\n            const fwid = pkt.device?.productIdentifier\n            return fwid === undefined || productIdentifiers.indexOf(fwid) > -1\n        })\n\n    if (errors !== undefined)\n        filters.push(pkt => !!pkt.decoded?.error === errors)\n\n    const filter: CompiledPacketFilter = (pkt: Packet) =>\n        filters.every(filter => filter(pkt))\n    return filter\n\n    function hasAnyFlag(pkt: Packet) {\n        const k = pkt.decoded?.info.kind\n        return !!k && flags.indexOf(k) > -1\n    }\n}\n","import JDBus from \"../bus\"\nimport JDClient from \"../client\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND, START, STOP } from \"../constants\"\nimport Packet from \"../packet\"\nimport Trace from \"./trace\"\n\nconst RECORDING_TRACE_MAX_ITEMS = 100000\n\n/**\n * A recorder of packets to create traces.\n * @category Trace\n */\nexport class TraceRecorder extends JDClient {\n    public maxRecordingLength = RECORDING_TRACE_MAX_ITEMS\n    private _trace: Trace\n    private _subscription: () => void\n\n    constructor(public readonly bus: JDBus) {\n        super()\n        this.handlePacket = this.handlePacket.bind(this)\n\n        this.mount(() => this._subscription?.())\n    }\n\n    start() {\n        if (this.recording) return\n\n        this._subscription = this.bus.subscribe(\n            [PACKET_PROCESS, PACKET_SEND],\n            this.handlePacket\n        )\n        this._trace = new Trace([], { maxLength: this.maxRecordingLength })\n        this.emit(START)\n        this.emit(CHANGE)\n    }\n\n    stop() {\n        if (!this.recording) return\n\n        this._subscription?.()\n        this._subscription = undefined\n        const t = this._trace\n        this._trace = undefined\n        this.emit(STOP)\n        this.emit(CHANGE)\n\n        return t\n    }\n\n    get recording() {\n        return !!this._trace\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    private handlePacket(pkt: Packet) {\n        // record packets in traces\n        this._trace.addPacket(pkt)\n        // notify that this packet has been processed\n        this.emit(PACKET_PROCESS, pkt)\n    }\n}\nexport default TraceRecorder\n","import JDBus from \"../bus\"\nimport { JDClient } from \"../client\"\nimport {\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    META_ACK,\n    META_GET,\n    META_PIPE,\n    PACKET_PROCESS,\n    PACKET_SEND,\n    TRACE_FILTER_HORIZON,\n} from \"../constants\"\nimport Packet from \"../packet\"\nimport { PacketFilter, parsePacketFilter } from \"../packetfilter\"\nimport Trace from \"./trace\"\nimport { throttle, toHex } from \"../utils\"\n\nconst TRACE_MAX_ITEMS = 1000\nconst FILTERED_TRACE_MAX_ITEMS = 100\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE = 10\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME = 5000\n\n/**\n * A grouped packet\n * @category Trace\n */\nexport interface TracePacketProps {\n    /**\n     * Unique key used for React lists\n     */\n    key: string\n    /**\n     * Identifier to match packets together\n     */\n    hash: string\n    /**\n     * The packet\n     */\n    packet: Packet\n    count?: number\n}\n\n/**\n * A filtered view over a packet trace\n * @category Trace\n */\nexport class TraceView extends JDClient {\n    private id = \"v\" + Math.random()\n    private _maxFilteredLength = FILTERED_TRACE_MAX_ITEMS\n\n    private _paused = false\n    private _trace: Trace\n    private _filter: string\n    private _packetFilter: PacketFilter = undefined\n    private _filteredPackets: TracePacketProps[] = []\n\n    public silent = false\n    private notifyPacketsChanged: () => void\n\n    constructor(\n        public readonly bus: JDBus,\n        filter: string,\n        throttleDelay = 200\n    ) {\n        super()\n        this._trace = new Trace([], { maxLength: TRACE_MAX_ITEMS })\n        this.handlePacket = this.handlePacket.bind(this)\n        this.handleFilterUpdate = this.handleFilterUpdate.bind(this)\n\n        this.notifyPacketsChanged = throttle(() => {\n            if (!this.silent)\n                this.setFilteredPackets()\n        }, throttleDelay)\n\n        this.mount(\n            this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n        )\n        this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.handleFilterUpdate))\n\n        this.filter = filter\n    }\n\n    /**\n     * No new packet is added to the filtered view\n     */\n    get paused() {\n        return this._paused\n    }\n\n    set paused(v: boolean) {\n        if (v !== this._paused) {\n            this._paused = v\n            if (!this._paused) {\n                this.refreshFilter()\n                this.emit(CHANGE)\n            }\n        }\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    set trace(t: Trace) {\n        if (t !== this._trace) {\n            this._trace = t\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    get filteredPackets() {\n        return this._filteredPackets\n    }\n\n    get filter() {\n        return this._filter\n    }\n\n    set filter(f: string) {\n        if (f !== this._filter) {\n            this._filter = f\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    get maxFilteredLength() {\n        return this._maxFilteredLength\n    }\n\n    set maxFilteredLength(v: number) {\n        if (this._maxFilteredLength !== v) {\n            this._maxFilteredLength = v\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    private setFilteredPackets() {\n        // always clone for React\n        this._filteredPackets = this._filteredPackets.slice(\n            0,\n            this._filteredPackets.length > this.maxFilteredLength * 1.1\n                ? this.maxFilteredLength\n                : this._filteredPackets.length\n        )\n        this.emit(CHANGE)\n    }\n\n    clear() {\n        this.trace = new Trace([], { maxLength: TRACE_MAX_ITEMS })\n        this._filteredPackets = []\n        this.setFilteredPackets()\n        this.emit(CHANGE)\n    }\n\n    private handleFilterUpdate() {\n        this.refreshFilter()\n    }\n\n    private refreshFilter() {\n        this.id = \"view\" + Math.random()\n        this._packetFilter = parsePacketFilter(this.bus, this._filter)\n        this._filteredPackets = []\n        const packets = this.trace.packets\n        // reapply filter to existing trace\n        for (\n            let i = packets.length - 1;\n            i >= 0 && this._filteredPackets.length < this.maxFilteredLength;\n            --i\n        ) {\n            const pkt = packets[i]\n            if (this._packetFilter?.filter(pkt)) {\n                this.addFilteredPacket(pkt)\n            }\n        }\n        this._filteredPackets = this._filteredPackets.reverse()\n        this.notifyPacketsChanged?.()\n    }\n\n    private handlePacket(pkt: Packet) {\n        if (this._paused) return\n\n        // remember packet\n        this.trace.addPacket(pkt)\n\n        // add packet to live list\n        if (this._packetFilter?.filter(pkt)) {\n            this.addFilteredPacket(pkt)\n            // debounced notification of changes\n            this.notifyPacketsChanged?.()\n        }\n    }\n\n    private addFilteredPacket(packet: Packet) {\n        if (packet.meta[this.id]) return\n        packet.meta[this.id] = true\n\n        // resolve packet device for pretty name\n        if (!packet.isMultiCommand && !packet.device)\n            packet.device = this.bus.device(\n                packet.deviceIdentifier,\n                false,\n                packet\n            )\n\n        // keep in filtered view\n        let filtered = true\n        const hash = toHex(packet.toBuffer())\n        if (this._packetFilter?.props.grouping) {\n            const old = this._filteredPackets\n                .slice(0, DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE)\n                .find(\n                    p =>\n                        packet.timestamp - p.packet.timestamp <\n                            DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME &&\n                        p.hash === hash\n                )\n            if (old) {\n                old.count++\n                filtered = false\n            }\n        }\n\n        // collapse acks\n        if (packet.isCRCAck) {\n            const pkts = this.trace.packets\n            const crc = packet.serviceCommand\n            const did = packet.deviceIdentifier\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON) // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i]\n                if (\n                    old.requiresAck &&\n                    old.deviceIdentifier === did &&\n                    old.crc === crc\n                ) {\n                    old.meta[META_ACK] = packet\n                    if (this._packetFilter?.props.collapseAck) filtered = false\n                    break\n                }\n            }\n        }\n        // report coming back\n        if (packet.isRegisterGet && packet.isReport && !packet.meta[META_GET]) {\n            const pkts = this.trace.packets\n            const did = packet.deviceIdentifier\n            const si = packet.serviceIndex\n            const rid = packet.registerIdentifier\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON) // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i]\n                if (\n                    old.isRegisterGet &&\n                    old.isCommand &&\n                    old.deviceIdentifier === did &&\n                    old.serviceIndex === si &&\n                    old.registerIdentifier === rid\n                ) {\n                    // response from a get command\n                    packet.meta[META_GET] = old\n                    if (this._packetFilter?.props.collapseGets) {\n                        // remove old\n                        this._filteredPackets.splice(i, 1)\n                        // keep new\n                    }\n                    break\n                }\n            }\n        }\n        // collapse pipes\n        if (\n            this._packetFilter?.props.collapsePipes &&\n            packet.isPipe &&\n            packet.isCommand\n        ) {\n            const pkts = this._filteredPackets\n            const m = Math.min(pkts.length, TRACE_FILTER_HORIZON) // max scan 100 packets back\n            const port = packet.pipePort\n            const did = packet.deviceIdentifier\n            for (let i = 0; i < m; ++i) {\n                const old = pkts[i].packet\n                if (old.deviceIdentifier === did && old.pipePort === port) {\n                    let pipePackets = old.meta[META_PIPE] as Packet[]\n                    if (!pipePackets) pipePackets = old.meta[META_PIPE] = []\n                    pipePackets[packet.pipeCount] = packet\n                    filtered = false\n                    break\n                }\n            }\n        }\n\n        if (filtered) {\n            const key = packet.timestamp + hash\n            this._filteredPackets.unshift({\n                key,\n                hash,\n                packet,\n                count: 1,\n            })\n        }\n    }\n}\nexport default TraceView\n","import {\n    LIGHT_PROG_COL1_SET,\n    LIGHT_PROG_FADE,\n    LIGHT_PROG_FADE_HSV,\n    LIGHT_PROG_MODE,\n    LIGHT_PROG_MODE1,\n    LIGHT_PROG_RANGE,\n    LIGHT_PROG_ROTATE_BACK,\n    LIGHT_PROG_ROTATE_FWD,\n    LIGHT_PROG_SET_ALL,\n    LIGHT_PROG_SHOW,\n} from \"./lightconstants\"\nimport { fromHex } from \"./utils\"\n\nfunction cmdCode(cmd: string) {\n    switch (cmd) {\n        case \"setall\":\n            return LIGHT_PROG_SET_ALL\n        case \"fade\":\n            return LIGHT_PROG_FADE\n        case \"fadehsv\":\n            return LIGHT_PROG_FADE_HSV\n        case \"rotfwd\":\n            return LIGHT_PROG_ROTATE_FWD\n        case \"rotback\":\n            return LIGHT_PROG_ROTATE_BACK\n        case \"show\":\n        case \"wait\":\n            return LIGHT_PROG_SHOW\n        case \"range\":\n            return LIGHT_PROG_RANGE\n        case \"mode\":\n            return LIGHT_PROG_MODE\n        case \"tmpmode\":\n            return LIGHT_PROG_MODE1\n        case \"setone\":\n            return LIGHT_PROG_COL1_SET\n        case \"mult\":\n            return 0x100\n        default:\n            return undefined\n    }\n}\n\nfunction isWhiteSpace(code: number) {\n    return code == 32 || code == 13 || code == 10 || code == 9\n}\n\n/**\n * Encodes a light command into a buffer\n * @param format\n * @param args\n * @returns\n * @category Data Packing\n */\nexport function lightEncode(format: string, args: (number | number[])[]) {\n    // tokens are white-space separated\n    // % - number from args[]\n    // # - color from args[]\n    // #0123ff - color\n    // 123 - number\n    // commands: set, fade, fadehsv, rotfwd, rotback, pause\n    // fadehsv 0 12 #00ffff #ffffff\n\n    const outarr: number[] = []\n    let colors: number[] = []\n    let pos = 0\n    let currcmd = 0\n\n    function pushNumber(n: number) {\n        if (n == null || (n | 0) != n || n < 0 || n >= 16383)\n            throw new Error(\"number out of range: \" + n)\n        if (n < 128) outarr.push(n)\n        else {\n            outarr.push(0x80 | (n >> 8))\n            outarr.push(n & 0xff)\n        }\n    }\n\n    function flush() {\n        if (currcmd == 0xcf) {\n            if (colors.length != 1) throw new Error(\"setone requires 1 color\")\n        } else {\n            if (colors.length == 0) return\n            if (colors.length <= 3) outarr.push(0xc0 | colors.length)\n            else {\n                outarr.push(0xc0)\n                outarr.push(colors.length)\n            }\n        }\n        for (const c of colors) {\n            outarr.push((c >> 16) & 0xff)\n            outarr.push((c >> 8) & 0xff)\n            outarr.push((c >> 0) & 0xff)\n        }\n        colors = []\n    }\n\n    function nextToken() {\n        while (isWhiteSpace(format.charCodeAt(pos))) pos++\n        const beg = pos\n        while (pos < format.length && !isWhiteSpace(format.charCodeAt(pos)))\n            pos++\n        return format.slice(beg, pos)\n    }\n\n    while (pos < format.length) {\n        const token = nextToken()\n        const t0 = token.charCodeAt(0)\n        if (97 <= t0 && t0 <= 122) {\n            // a-z\n            flush()\n            currcmd = cmdCode(token)\n            if (currcmd == undefined)\n                throw new Error(\"unknown light command: \" + token)\n            if (currcmd == 0x100) {\n                const f = parseFloat(nextToken())\n                if (isNaN(f) || f < 0 || f > 2)\n                    throw new Error(\"expecting scale\")\n                outarr.push(0xd8) // tmpmode\n                outarr.push(3) // mult\n                outarr.push(0xd0) // setall\n                const mm = Math.round(128 * f) & 0xff\n                outarr.push(0xc1)\n                outarr.push(mm)\n                outarr.push(mm)\n                outarr.push(mm)\n            } else {\n                outarr.push(currcmd)\n            }\n        } else if (48 <= t0 && t0 <= 57) {\n            // 0-9\n            pushNumber(parseInt(token))\n        } else if (t0 == 37) {\n            // %\n            if (args.length == 0) throw new Error(\"out of args, %\")\n            const v = args.shift()\n            if (typeof v != \"number\") throw new Error(\"expecting number\")\n            pushNumber(v)\n        } else if (t0 == 35) {\n            // #\n            if (token.length == 1) {\n                if (args.length == 0) throw new Error(\"out of args, #\")\n                const v = args.shift()\n                if (typeof v === \"number\") colors.push(v)\n                else if (Array.isArray(v)) for (const vv of v) colors.push(vv)\n                else throw Error(\"invalid number \" + v)\n            } else {\n                if (token.length == 7) {\n                    const b = fromHex(token.slice(1))\n                    const c = (b[0] << 16) | (b[1] << 8) | b[2]\n                    colors.push(c)\n                } else {\n                    throw new Error(\"invalid color: \" + token)\n                }\n            }\n        }\n    }\n    flush()\n\n    return new Uint8Array(outarr)\n}\n","/**\n * @internal\n */\nexport function hsvToCss(\n    hue: number,\n    saturation: number,\n    value: number,\n    brightness: number,\n    monochrome?: boolean\n) {\n    const csshue = (hue * 360) / 0xff\n    const csssat = (monochrome ? 0xff : saturation) / 0xff\n    const cssval = value / 0xff\n    const [h, s, l] = hsv_to_hsl(csshue, csssat, cssval)\n    const mixl = 0.3\n    const alpha = (mixl + (1 - mixl) * l) * brightness\n\n    return `hsla(${h}, ${s * 100}%, ${l * 100}%, ${alpha}`\n}\n\nfunction hsv_to_hsl(h: number, s: number, v: number) {\n    // both hsv and hsl values are in [0, 1]\n    const l = ((2 - s) * v) / 2\n\n    if (l != 0) {\n        if (l == 1) {\n            s = 0\n        } else if (l < 0.5) {\n            s = (s * v) / (l * 2)\n        } else {\n            s = (s * v) / (2 - l * 2)\n        }\n    }\n\n    return [h, s, l]\n}\n","import JDBus from \"./bus\"\nimport { JDClient } from \"./client\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND } from \"./constants\"\nimport Packet from \"./packet\"\nimport { randomDeviceId } from \"./random\"\n\n/**\n * A client that bridges received and sent packets to a parent iframe.\n * @category JDOM\n */\nexport abstract class JDBridge extends JDClient {\n    private _bus: JDBus\n    readonly bridgeId = `bridge-` + randomDeviceId()\n    packetSent = 0\n    packetProcessed = 0\n\n    constructor() {\n        super()\n        this.handleSendPacket = this.handleSendPacket.bind(this)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(newBus: JDBus) {\n        if (newBus !== this._bus) {\n            if (this._bus) this.unmount()\n            this._bus = newBus\n            if (this._bus) {\n                this.mount(\n                    this._bus.subscribe(PACKET_PROCESS, this.handleSendPacket)\n                )\n                this.mount(\n                    this._bus.subscribe(PACKET_SEND, this.handleSendPacket)\n                )\n                this.mount(this._bus.addBridge(this))\n            }\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Receives frame data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    protected receiveFrame(data: Uint8Array) {\n        if (!this._bus) return // disconnected\n\n        // try frame format (sent by hardware, hosts)\n        const pkts = Packet.fromFrame(data, this.bus.timestamp)\n        this.dispatchPackets(pkts)\n    }\n\n    /**\n     * Receives packet data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    protected receivePacket(data: Uint8Array) {\n        if (!this._bus) return // disconnected\n\n        // try as a single packet (send by the MakeCode simulator)\n        const pkt = Packet.fromBinary(data, this.bus.timestamp)\n        if (pkt) this.dispatchPackets([pkt])\n    }\n\n    private dispatchPackets(pkts: Packet[]) {\n        // bail out if no packets\n        if (!pkts?.length) return\n\n        this.packetProcessed += pkts.length\n\n        for (const pkt of pkts) {\n            // tracing the source of packets to avoid self-resending\n            pkt.sender = this.bridgeId\n            // send to native bus\n            this.bus.sendPacketAsync(pkt)\n            // send to javascript bus\n            this.bus.processPacket(pkt)\n        }\n    }\n\n    private handleSendPacket(pkt: Packet) {\n        if (!this._bus || pkt.sender === this.bridgeId) return\n        this.packetSent++\n        this.sendPacket(pkt.toBuffer())\n    }\n\n    /**\n     * Sends packet data over the bridge\n     * @param pkt\n     */\n    protected abstract sendPacket(data: Uint8Array): void\n}\nexport default JDBridge\n","import { CHANGE, SettingsCmd } from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { InPipeReader } from \"../pipes\"\nimport JDService from \"../service\"\nimport { JDServiceClient } from \"../serviceclient\"\nimport { bufferToString, stringToBuffer } from \"../utils\"\n\n/**\n * A settings service client implementation.\n * @category Clients\n */\nexport class SettingsClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        service.registersUseAcks = true\n    }\n\n    async clear() {\n        await this.service.sendCmdAsync(SettingsCmd.Clear)\n    }\n\n    async listKeys(): Promise<string[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.ListKeys),\n            true\n        )\n        const { output } = await inp.readAll()\n        const keys = output.map(pkt => pkt.stringData)\n        return keys.filter(k => !!k)\n    }\n\n    async list(): Promise<{ key: string; value?: Uint8Array }[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.List),\n            true\n        )\n        const { output } = await inp.readAll()\n        return output\n            .map(pkt => {\n                const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\")\n                return key && { key, value }\n            })\n            .filter(kv => !!kv)\n    }\n\n    async setValue(key: string, value: Uint8Array) {\n        key = key.trim()\n        if (value === undefined) {\n            await this.deleteValue(key)\n        } else {\n            const pkt = Packet.from(\n                SettingsCmd.Set,\n                jdpack(\"z b\", [key, value])\n            )\n            await this.service.sendPacketAsync(pkt)\n            this.emit(CHANGE)\n        }\n    }\n\n    async setStringValue(key: string, value: string) {\n        await this.setValue(key, value ? stringToBuffer(value) : undefined)\n    }\n\n    async getValue(key: string): Promise<Uint8Array> {\n        if (!key) return undefined\n\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Get, jdpack(\"s\", [key]))\n        const resp = await this.service.sendCmdAwaitResponseAsync(pkt)\n        const [rkey, value] = jdunpack<[string, Uint8Array]>(resp.data, \"z b\")\n        if (key !== rkey) {\n            console.error(\n                `device returned different key, got \"${rkey}\", expected \"${key}\"`\n            )\n            return undefined\n        }\n        return value\n    }\n\n    async getStringValue(key: string) {\n        const value = await this.getValue(key)\n        return value && bufferToString(value)\n    }\n\n    async deleteValue(key: string) {\n        if (!key) return\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Delete, jdpack(\"s\", [key]))\n        await this.service.sendPacketAsync(pkt)\n\n        this.emit(CHANGE)\n    }\n}\nexport default SettingsClient\n","import Packet from \"../packet\"\nimport Flags from \"../flags\"\nimport { bufferConcat } from \"../utils\"\nimport {\n    BLUETOOTH_JACDAC_TX_CHARACTERISTIC,\n    BLUETOOTH_JACDAC_RX_CHARACTERISTIC,\n    BLUETOOTH_JACDAC_SERVICE,\n    BLUETOOTH_TRANSPORT,\n} from \"../constants\"\nimport Transport from \"./transport\"\n\nconst JD_BLE_FIRST_CHUNK_FLAG = 0x80\n\n/**\n * Indicates with Web Bluetooth transport are enabled\n * @category Transport\n */\nexport function isWebBluetoothEnabled(): boolean {\n    return !!Flags.webBluetooth\n}\n\n/**\n * Indicates with Web Bluetooth is supported in this environment\n * @category Transport\n */\nexport function isWebBluetoothSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.bluetooth &&\n            !!navigator.bluetooth.requestDevice\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nfunction bleRequestDevice(\n    options?: RequestDeviceOptions\n): Promise<BluetoothDevice> {\n    // disabled\n    if (!Flags.webBluetooth) return Promise.resolve(undefined)\n\n    try {\n        console.debug(`bluetooth request`, { options })\n        return navigator?.bluetooth?.requestDevice?.(options)\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return undefined\n    }\n}\n\nfunction bleGetDevices(): Promise<BluetoothDevice[]> {\n    // disabled\n    if (!Flags.webBluetooth) return Promise.resolve([])\n\n    try {\n        return navigator?.bluetooth?.getDevices() || Promise.resolve([])\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return Promise.resolve([])\n    }\n}\n\nclass BluetoothTransport extends Transport {\n    private _device: BluetoothDevice\n    private _server: BluetoothRemoteGATTServer\n    private _service: BluetoothRemoteGATTService\n    private _rxCharacteristic: BluetoothRemoteGATTCharacteristic\n    private _txCharacteristic: BluetoothRemoteGATTCharacteristic\n    private _rxBuffer: Uint8Array\n    private _rxChunkCounter: number\n\n    constructor() {\n        super(BLUETOOTH_TRANSPORT, { checkPulse: true })\n\n        this.handleDisconnected = this.handleDisconnected.bind(this)\n        this.handleCharacteristicChanged =\n            this.handleCharacteristicChanged.bind(this)\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        // get a device\n        if (background) {\n            const devices = await bleGetDevices()\n            this._device = devices?.[0]\n        } else {\n            const device = await bleRequestDevice({\n                filters: [{ namePrefix: \"BBC micro:bit\" }],\n                optionalServices: [BLUETOOTH_JACDAC_SERVICE],\n            })\n            this._device = device\n        }\n\n        if (!this._device?.gatt) throw new Error(\"Device not found\")\n\n        // listen for disconnection\n        this._device.addEventListener(\n            \"gattserverdisconnected\",\n            this.handleDisconnected,\n            false\n        )\n\n        // connect to gatt\n        this._server = await this._device.gatt.connect()\n        // connect to service\n        this._service = await this._server.getPrimaryService(\n            BLUETOOTH_JACDAC_SERVICE\n        )\n        // connect to characteristic\n        this._rxCharacteristic = await this._service.getCharacteristic(\n            BLUETOOTH_JACDAC_RX_CHARACTERISTIC\n        )\n\n        this._txCharacteristic = await this._service.getCharacteristic(\n            BLUETOOTH_JACDAC_TX_CHARACTERISTIC\n        )\n        // listen for incoming packet\n        this._rxCharacteristic.addEventListener(\n            \"characteristicvaluechanged\",\n            this.handleCharacteristicChanged,\n            false\n        )\n        // start listening\n        await this._rxCharacteristic.startNotifications()\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this._txCharacteristic) {\n            console.debug(`trying to send Bluetooth packet while disconnected`)\n            return\n        }\n\n        const data = p.toBuffer()\n        const length = data.length\n\n        const totalChunks = Math.ceil(data.length / 18)\n        let remainingChunks = totalChunks == 0 ? 0 : totalChunks - 1\n        let sent = 0\n        while (sent < length) {\n            const n = Math.min(18, length - sent)\n            const chunk = data.slice(sent, sent + n)\n            const header = new Uint8Array(2)\n            header[0] = totalChunks & 0x7f\n\n            if (sent == 0) header[0] |= JD_BLE_FIRST_CHUNK_FLAG\n\n            header[1] = remainingChunks\n            this._txCharacteristic.writeValueWithoutResponse(\n                bufferConcat(header, chunk)\n            )\n            sent += n\n            remainingChunks = remainingChunks == 0 ? 0 : remainingChunks - 1\n            console.log(\n                `chunk: ${chunk.toString()} [${remainingChunks} chunks remaining]`\n            )\n        }\n    }\n\n    protected async transportDisconnectAsync() {\n        if (!this._device) return\n\n        console.debug(`ble: disconnecting`)\n        try {\n            this._rxCharacteristic?.removeEventListener(\n                \"characteristicvaluechanged\",\n                this.handleCharacteristicChanged\n            )\n            this._device?.removeEventListener(\n                \"gattserverdisconnected\",\n                this.handleDisconnected\n            )\n            this._server.disconnect()\n        } finally {\n            this._rxCharacteristic = undefined\n            this._txCharacteristic = undefined\n            this._service = undefined\n            this._server = undefined\n            this._device = undefined\n            this._rxBuffer = undefined\n        }\n    }\n\n    private handleDisconnected() {\n        // start disconnecting\n        this.disconnect()\n    }\n\n    private handleCharacteristicChanged() {\n        const data = new Uint8Array(this._rxCharacteristic.value.buffer)\n        const packetData = data.slice(2)\n        console.log(`received length ${data.length}`)\n\n        if (data[0] & JD_BLE_FIRST_CHUNK_FLAG) {\n            if (this._rxBuffer)\n                console.error(\n                    `Dropped buffer. Chunks remaining: ${this._rxChunkCounter}`\n                )\n            this._rxBuffer = new Uint8Array()\n            this._rxChunkCounter = data[0] & 0x7f\n            console.log(`Initial chunk counter: ${this._rxChunkCounter}`)\n        }\n\n        this._rxChunkCounter =\n            this._rxChunkCounter == 0 ? 0 : this._rxChunkCounter - 1\n        console.log(`after modification chunk counter: ${this._rxChunkCounter}`)\n\n        if (data[1] !== this._rxChunkCounter)\n            console.error(\n                `Data out of order. Expected chunk: ${this._rxChunkCounter} Got chunk: ${data[1]}`\n            )\n        else this._rxBuffer = bufferConcat(this._rxBuffer, packetData)\n\n        if (this._rxChunkCounter == 0) {\n            const pkt = Packet.fromBinary(this._rxBuffer, this.bus.timestamp)\n            console.log(`processed packet ${pkt}`)\n            pkt.sender = BLUETOOTH_TRANSPORT\n            this.bus.processPacket(pkt)\n            this._rxBuffer = undefined\n            this._rxChunkCounter = 0\n        }\n    }\n}\n\n/**\n * Creates a transport that uses Web Bluetooth\n * @category Transport\n */\nexport function createBluetoothTransport(): Transport {\n    return isWebBluetoothSupported() && new BluetoothTransport()\n}\n","import Proto from \"./proto\"\nimport {\n    throwError,\n    assert,\n    PromiseBuffer,\n    PromiseQueue,\n    memcpy,\n    write32,\n    write16,\n    read16,\n    encodeU32LE,\n    read32,\n    bufferToString,\n} from \"../utils\"\n\n// see https://github.com/microsoft/uf2/blob/main/hf2.md for full spec\nexport const HF2_DEVICE_MAJOR = 42\nexport const HF2_CMD_BININFO = 0x0001 // no arguments\nexport const HF2_MODE_BOOTLOADER = 0x01\nexport const HF2_MODE_USERSPACE = 0x02\n/*\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n*/\n\nexport const HF2_CMD_INFO = 0x0002\n// no arguments\n// results is utf8 character array\n\nexport const HF2_CMD_RESET_INTO_APP = 0x0003 // no arguments, no result\n\nexport const HF2_CMD_RESET_INTO_BOOTLOADER = 0x0004 // no arguments, no result\n\nexport const HF2_CMD_START_FLASH = 0x0005 // no arguments, no result\n\nexport const HF2_CMD_WRITE_FLASH_PAGE = 0x0006\n/*\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[flash_page_size];\n};\n*/\n// no result\n\nexport const HF2_CMD_CHKSUM_PAGES = 0x0007\n/*\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[num_pages];\n};\n*/\n\nexport const HF2_CMD_READ_WORDS = 0x0008\n/*\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[num_words];\n};\n*/\n\nexport const HF2_CMD_WRITE_WORDS = 0x0009\n/*\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[num_words];\n};\n*/\n// no result\n\nexport const HF2_CMD_DMESG = 0x0010\n// no arguments\n// results is utf8 character array\n\nexport const HF2_FLAG_SERIAL_OUT = 0x80\nexport const HF2_FLAG_SERIAL_ERR = 0xc0\nexport const HF2_FLAG_CMDPKT_LAST = 0x40\nexport const HF2_FLAG_CMDPKT_BODY = 0x00\nexport const HF2_FLAG_MASK = 0xc0\nexport const HF2_SIZE_MASK = 63\n\nexport const HF2_STATUS_OK = 0x00\nexport const HF2_STATUS_INVALID_CMD = 0x01\nexport const HF2_STATUS_EXEC_ERR = 0x02\nexport const HF2_STATUS_EVENT = 0x80\n\n// the eventId is overlayed on the tag+status; the mask corresponds\n// to the HF2_STATUS_EVENT above\nexport const HF2_EV_MASK = 0x800000\n\nexport const HF2_CMD_JDS_CONFIG = 0x0020\nexport const HF2_CMD_JDS_SEND = 0x0021\nexport const HF2_EV_JDS_PACKET = 0x800020\n\nexport interface HF2_IO {\n    onData: (v: Uint8Array) => void\n    onError: (e: Error) => void\n    connectAsync(background: boolean): Promise<Proto>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any): void\n    disconnectAsync(): Promise<void>\n    error(msg: string, code?: string): void\n    sendPacketAsync(pkt: Uint8Array): Promise<void>\n}\n\nexport class HF2Proto implements Proto {\n    eventHandlers: Record<string, (buf: Uint8Array) => void> = {}\n    msgs = new PromiseBuffer<Uint8Array>()\n    cmdSeq = (Math.random() * 0xffff) | 0\n    private lock = new PromiseQueue()\n\n    constructor(private io: HF2_IO) {\n        let frames: Uint8Array[] = []\n\n        io.onData = buf => {\n            const tp = buf[0] & HF2_FLAG_MASK\n            const len = buf[0] & 63\n            //console.log(`msg tp=${tp} len=${len}`)\n            const frame = new Uint8Array(len)\n            memcpy(frame, 0, buf, 1, len)\n            if (tp & HF2_FLAG_SERIAL_OUT) {\n                this.onSerial(frame, tp == HF2_FLAG_SERIAL_ERR)\n                return\n            }\n            frames.push(frame)\n            if (tp == HF2_FLAG_CMDPKT_BODY) {\n                return\n            } else {\n                assert(tp == HF2_FLAG_CMDPKT_LAST)\n                let total = 0\n                for (const f of frames) total += f.length\n                const r = new Uint8Array(total)\n                let ptr = 0\n                for (const f of frames) {\n                    memcpy(r, ptr, f)\n                    ptr += f.length\n                }\n                frames = []\n                if (r[2] & HF2_STATUS_EVENT) {\n                    // asynchronous event\n                    this.handleEvent(r)\n                } else {\n                    this.msgs.push(r)\n                }\n            }\n        }\n    }\n\n    error(m: string) {\n        return this.io?.error(m)\n    }\n\n    talkAsync(cmd: number, data?: Uint8Array) {\n        if (!this.io) console.error(\"rogue hf2 instance\")\n\n        let len = 8\n        if (data) len += data.length\n        const pkt = new Uint8Array(len)\n        const seq = ++this.cmdSeq & 0xffff\n        write32(pkt, 0, cmd)\n        write16(pkt, 4, seq)\n        write16(pkt, 6, 0)\n        if (data) memcpy(pkt, 8, data, 0, data.length)\n        let numSkipped = 0\n        const handleReturnAsync = (): Promise<Uint8Array> =>\n            this.msgs\n                .shiftAsync(1000) // we wait up to a second\n                .then(res => {\n                    if (read16(res, 0) != seq) {\n                        if (numSkipped < 3) {\n                            numSkipped++\n                            this.io.log(\n                                `message out of sync, (${seq} vs ${read16(\n                                    res,\n                                    0\n                                )}); will re-try`\n                            )\n                            return handleReturnAsync()\n                        }\n                        this.error(\"out of sync\")\n                    }\n                    let info = \"\"\n                    if (res[3]) info = \"; info=\" + res[3]\n                    switch (res[2]) {\n                        case HF2_STATUS_OK:\n                            return res.slice(4)\n                        case HF2_STATUS_INVALID_CMD:\n                            this.error(\"invalid command\" + info)\n                            break\n                        case HF2_STATUS_EXEC_ERR:\n                            this.error(\"execution error\" + info)\n                            break\n                        default:\n                            this.error(\"error \" + res[2] + info)\n                            break\n                    }\n                    return null\n                })\n                .catch(e => {\n                    console.debug(`HF2: ${e.message}; cmd=${cmd}`)\n                    this.error(e)\n                    return null\n                })\n\n        return this.lock.enqueue(\"talk\", () =>\n            this.sendMsgAsync(pkt).then(handleReturnAsync)\n        )\n    }\n\n    private sendMsgAsync(buf: Uint8Array, serial = 0) {\n        // Util.assert(buf.length <= this.maxMsgSize)\n        const frame = new Uint8Array(64)\n        const loop = (pos: number): Promise<void> => {\n            let len = buf.length - pos\n            if (len <= 0) return Promise.resolve()\n            if (len > 63) {\n                len = 63\n                frame[0] = HF2_FLAG_CMDPKT_BODY\n            } else {\n                frame[0] = HF2_FLAG_CMDPKT_LAST\n            }\n            if (serial)\n                frame[0] =\n                    serial == 1 ? HF2_FLAG_SERIAL_OUT : HF2_FLAG_SERIAL_ERR\n            frame[0] |= len\n            for (let i = 0; i < len; ++i) frame[i + 1] = buf[pos + i]\n            if (!this.io) return Promise.resolve()\n            return this.io.sendPacketAsync(frame).then(() => loop(pos + len))\n        }\n        return loop(0)\n    }\n\n    onEvent(id: number, f: (buf: Uint8Array) => void) {\n        assert(!!(id & HF2_EV_MASK))\n        this.eventHandlers[id + \"\"] = f\n    }\n\n    onJDMessage(f: (buf: Uint8Array) => void) {\n        this.talkAsync(HF2_CMD_JDS_CONFIG, encodeU32LE([1]))\n        this.onEvent(HF2_EV_JDS_PACKET, f)\n    }\n\n    sendJDMessageAsync(buf: Uint8Array) {\n        return this.talkAsync(HF2_CMD_JDS_SEND, buf).then(() => {})\n    }\n\n    handleEvent(buf: Uint8Array) {\n        const evid = read32(buf, 0)\n        const f = this.eventHandlers[evid + \"\"]\n        if (f) {\n            f(buf.slice(4))\n        } else {\n            this.io.log(\"unhandled event: \" + evid.toString(16))\n            // We can get these before we're ready to recv; this is fine.\n            //if (evid === 0x800020) {\n            //    this.io.onError(new Error(\"hf2 corrupted\"))\n            //}\n        }\n    }\n    onSerial(data: Uint8Array, iserr: boolean) {\n        const msg = `hf2 serial: ${bufferToString(data)}`\n        if (iserr) console.warn(msg)\n        else console.log(msg)\n    }\n\n    async postConnectAsync() {\n        await this.checkMode()\n        const buf = await this.talkAsync(HF2_CMD_INFO)\n        this.io.log(\"Connected to: \" + bufferToString(buf))\n    }\n\n    private async checkMode() {\n        // first check that we are not talking to a bootloader\n        const info = await this.talkAsync(HF2_CMD_BININFO)\n        const mode = read32(info, 0)\n        this.io.log(`hf2 mode ${mode}`)\n        if (mode == HF2_MODE_USERSPACE) {\n            // all good\n            this.io.log(`device in user-space mode`)\n        } else if (mode == HF2_MODE_BOOTLOADER) {\n            this.io.log(\n                `device in bootloader mode, reseting into user-space mode`\n            )\n            await this.talkAsync(HF2_CMD_RESET_INTO_APP)\n            // and fail\n            throwError(\"Device in bootloader mode\")\n        } else {\n            // unknown mdoe\n            throwError(\"Unknown device operation mode\")\n        }\n    }\n\n    async disconnectAsync() {\n        if (this.io) {\n            const io = this.io\n            this.io = undefined\n            await io.disconnectAsync()\n        }\n    }\n}\n","import Proto from \"./proto\"\nimport USBIO from \"./usbio\"\nimport {\n    delay,\n    PromiseQueue,\n    write32,\n    write16,\n    read32,\n    uint8ArrayToString,\n    fromHex,\n    bufferConcat,\n    fromUTF8,\n} from \"../utils\"\nimport Flags from \"../flags\"\nimport {\n    ERROR_MICROBIT_INVALID_MEMORY,\n    ERROR_MICROBIT_JACDAC_MISSING,\n    ERROR_MICROBIT_UNKNOWN,\n    ERROR_MICROBIT_V1,\n} from \"../constants\"\n\nexport const MICROBIT_V2_VENDOR_ID = 3368\nexport const MICROBIT_V2_PRODUCT_ID = 516\n\ninterface SendItem {\n    buf: Uint8Array\n    cb: () => void\n}\nexport class CMSISProto implements Proto {\n    private readonly q = new PromiseQueue()\n    private sendQ: SendItem[] = []\n    private irqn: number\n    private xchgAddr: number\n    private _onJDMsg: (buf: Uint8Array) => void\n    private pendingSerial: Uint8Array\n    private lastPendingSerial: number\n    private lastSend: number\n    private lastXchg: number\n    private recvTo: () => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _lastInterval: any\n\n    constructor(private io: USBIO) {}\n\n    private startRecvToLoop() {\n        console.assert(!this._lastInterval)\n\n        let last = this.recvTo\n        // do not use bus schedulere here\n        this._lastInterval = setInterval(() => {\n            if (!this.io) this.stopRecvToLoop()\n            if (last && last == this.recvTo) {\n                last()\n            }\n            last = this.recvTo\n        }, 200)\n    }\n\n    private stopRecvToLoop() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval)\n            this._lastInterval = undefined\n        }\n    }\n\n    private error(msg: string, code?: string) {\n        this.stopRecvToLoop()\n        this.io?.error(msg, code)\n        // clear state\n        this.xchgAddr = null\n    }\n\n    onJDMessage(f: (buf: Uint8Array) => void): void {\n        this._onJDMsg = f\n    }\n\n    sendJDMessageAsync(buf: Uint8Array): Promise<void> {\n        if (buf.length & 3) {\n            const tmp = new Uint8Array((buf.length + 3) & ~3)\n            tmp.set(buf)\n            buf = tmp\n        }\n        return new Promise<void>(resolve => {\n            this.sendQ.push({\n                buf,\n                cb: resolve,\n            })\n        })\n    }\n\n    async disconnectAsync() {\n        if (this.io) {\n            console.debug(`micro:bit: disconnect proto`)\n            this.stopRecvToLoop()\n            this._onJDMsg = () => console.warn(\"rogue jd callback\")\n            const io = this.io\n            this.io = undefined\n            if (io) await io.disconnectAsync()\n        }\n    }\n\n    private recvAsync() {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            // io may have been cleared\n            if (!this.io) {\n                reject(new Error(\"USB disconnected\"))\n                return\n            }\n            this.io.recvPacketAsync().then(\n                v => {\n                    const f = resolve\n                    resolve = null\n                    if (f) {\n                        this.recvTo = null\n                        f(v)\n                    }\n                },\n                err => {\n                    if (resolve) {\n                        resolve = null\n                        this.recvTo = null\n                        reject(err)\n                    }\n                }\n            )\n            this.recvTo = () => {\n                if (resolve) {\n                    resolve = null\n                    reject(new Error(\"CMSIS recv timeout\"))\n                }\n            }\n        })\n    }\n\n    private talkAsync(cmds: ArrayLike<number>) {\n        return this.q.enqueue(\"talk\", async () => {\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\")\n                return // disconnected\n            }\n            //console.log(\"TALK\", cmds)\n            await this.io.sendPacketAsync(new Uint8Array(cmds))\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\")\n                return // disconnected\n            }\n            let response = await this.recvAsync()\n            if (response[0] !== cmds[0]) {\n                const msg = `Bad response for ${cmds[0]} -> ${response[0]}, try again`\n                console.debug(msg, { cmds, response })\n                try {\n                    response = await this.recvAsync()\n                } catch (e) {\n                    // throw the original error in case of timeout\n                    this.error(msg)\n                }\n                if (response[0] !== cmds[0]) this.error(msg)\n            }\n            return response\n        })\n    }\n\n    private talkHexAsync(str: string) {\n        return this.talkAsync(fromHex(str.replace(/ /g, \"\")))\n    }\n\n    private decodeString(buf: Uint8Array) {\n        const len = buf[1]\n        const ss = buf.slice(2, 2 + len)\n        return uint8ArrayToString(ss)\n    }\n\n    private dapDelay(micros: number) {\n        const cmd = [0x09, 0, 0]\n        if (micros > 0xffff) this.error(\"too large delay\")\n        write16(cmd, 1, micros)\n        return this.talkAsync(cmd)\n    }\n\n    private async setBaudRate() {\n        const setBaud = [0x82, 0, 0, 0, 0]\n        write32(setBaud, 1, 115200)\n        await this.talkAsync(setBaud) // this reset the board on 0255\n    }\n\n    private async xchgLoop() {\n        let currSend: SendItem\n        while (this.io) {\n            const now = Date.now()\n            if (\n                Flags.diagnostics &&\n                this.lastXchg &&\n                now - this.lastXchg > 50\n            ) {\n                console.warn(\"slow xchg: \" + (now - this.lastXchg) + \"ms\")\n            }\n            this.lastXchg = now\n\n            let numev = 0\n            let inp = await this.readBytes(this.xchgAddr + 12, 256, true)\n            if (inp[2]) {\n                await this.writeWord(this.xchgAddr + 12, 0)\n                await this.triggerIRQ()\n                inp = inp.slice(0, inp[2] + 12)\n                this._onJDMsg(inp)\n                numev++\n            }\n\n            let sendFree = false\n            if (currSend) {\n                const send = await this.readBytes(this.xchgAddr + 12 + 256, 4)\n                if (!send[2]) {\n                    currSend.cb()\n                    currSend = null\n                    sendFree = true\n                    numev++\n                }\n            }\n\n            if (!currSend && this.sendQ.length) {\n                if (!sendFree) {\n                    const send = await this.readBytes(\n                        this.xchgAddr + 12 + 256,\n                        4\n                    )\n                    if (!send[2]) sendFree = true\n                }\n                if (sendFree) {\n                    currSend = this.sendQ.shift()\n                    const bbody = currSend.buf.slice(4)\n                    await this.writeWords(\n                        this.xchgAddr + 12 + 256 + 4,\n                        new Uint32Array(bbody.buffer)\n                    )\n                    const bhead = currSend.buf.slice(0, 4)\n                    await this.writeWords(\n                        this.xchgAddr + 12 + 256,\n                        new Uint32Array(bhead.buffer)\n                    )\n                    await this.triggerIRQ()\n                    this.lastSend = Date.now()\n                    numev++\n                } else {\n                    if (this.lastSend) {\n                        const d = Date.now() - this.lastSend\n                        if (d > 50) {\n                            this.lastSend = 0\n                            console.warn(\"failed to send packet fast enough\")\n                        }\n                    }\n                }\n            }\n\n            if (await this.readSerial()) numev++\n\n            if (numev == 0) await this.dapDelay(1000)\n        }\n    }\n\n    private async readSerial() {\n        let buf = await this.talkAsync([0x83])\n        const len = buf[1]\n        if (len) {\n            buf = buf.slice(2, 2 + len)\n            if (this.pendingSerial) buf = bufferConcat(this.pendingSerial, buf)\n            let ptr = 0\n            let beg = 0\n            while (ptr < buf.length) {\n                if (buf[ptr] == 10 || buf[ptr] == 13) {\n                    const line = buf.slice(beg, ptr)\n                    if (line.length)\n                        console.debug(\n                            \"microbit: \" + fromUTF8(uint8ArrayToString(line))\n                        )\n                    beg = ptr + 1\n                }\n                ptr++\n            }\n            buf = buf.slice(beg)\n            this.pendingSerial = buf.length ? buf : null\n            if (this.pendingSerial) this.lastPendingSerial = Date.now()\n        } else if (this.pendingSerial) {\n            const d = Date.now() - this.lastPendingSerial\n            if (d > 500) {\n                const s = fromUTF8(uint8ArrayToString(this.pendingSerial))\n                this.pendingSerial = null\n                console.log(\"SERIAL[TO]: \" + s)\n            }\n        }\n\n        return len\n    }\n\n    private async talkStringAsync(...cmds: number[]) {\n        return this.talkAsync(cmds).then(buf => this.decodeString(buf))\n    }\n\n    private async readDP(reg: number) {\n        const nums = [0x05, 0, 1, 2 | reg, 0, 0, 0, 0]\n        const buf = await this.talkAsync(nums)\n        return read32(buf, 3)\n    }\n\n    private async setupTAR(addr: number) {\n        const nums = [5, 0, 2, 1, 0x52, 0, 0, 0x23, 5, 0, 0, 0, 0]\n        write32(nums, 9, addr)\n        await this.talkAsync(nums)\n    }\n\n    private async writeWords(addr: number, data: Uint32Array) {\n        await this.setupTAR(addr)\n\n        const MAX = 0xe\n        let ptr = 0\n        const reqHd = [6, 0, MAX, 0, 0xd]\n        for (let i = 0; i < MAX * 4; ++i) reqHd.push(0)\n        const req = new Uint8Array(reqHd)\n        let overhang = 1\n        let ptrTX = 0\n        const count = data.length\n        const dataBytes = new Uint8Array(data.buffer)\n        let lastCh = MAX\n\n        //console.log(\"WRITE\", addr.toString(16), data)\n\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count) {\n                const ch = Math.min(count - ptrTX, MAX)\n                if (ch) {\n                    req[2] = ch\n                    req.set(dataBytes.slice(ptrTX * 4, (ptrTX + ch) * 4), 5)\n                    if (!this.io) {\n                        this.error(\"disconnected\")\n                        return\n                    }\n                    await this.io.sendPacketAsync(\n                        ch == MAX ? req : req.slice(0, 5 + 4 * ch)\n                    )\n                    ptrTX += ch\n                    lastCh = ch\n                }\n                if (overhang-- > 0) continue\n                const buf = await this.recvAsync()\n                if (buf[0] != req[0])\n                    this.error(`bad response, ${buf[0]} != ${req[0]}`)\n                if (buf[1] != MAX && buf[1] != lastCh)\n                    this.error(\n                        `bad response, ${buf[1]} != ${MAX} && ${buf[1]} != ${lastCh}`\n                    )\n                ptr += buf[1]\n            }\n        })\n    }\n\n    private async readBytes(addr: number, count: number, jdmode = false) {\n        if (addr & 3 || count & 3) this.error(\"unaligned\")\n        const b = await this.readWords(addr, count >> 2, jdmode)\n        return new Uint8Array(b.buffer)\n    }\n\n    private async readWords(addr: number, count: number, jdmode = false) {\n        await this.setupTAR(addr)\n        const MAX = 0xe\n        const res = new Uint32Array(count)\n        let ptr = 0\n        const req = new Uint8Array([6, 0, MAX, 0, 0xf])\n        let overhang = 1\n        let ptrTX = 0\n\n        // console.log(\"READ\", addr.toString(16), count)\n        let numPending = 0\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count || numPending) {\n                const ch = Math.min(count - ptrTX, MAX)\n                if (ch > 0) {\n                    req[2] = ch\n                    numPending++\n                    if (!this.io) {\n                        this.error(\"disconnected\")\n                        return\n                    }\n                    await this.io.sendPacketAsync(req)\n                    ptrTX += ch\n                }\n                if (overhang-- > 0) continue\n                const buf = await this.recvAsync()\n                numPending--\n                if (buf[0] != req[0]) {\n                    this.error(\"bad response\")\n                    return\n                }\n                const len = buf[1]\n                const words = new Uint32Array(\n                    buf.slice(4, (1 + len) * 4).buffer\n                )\n                if (words.length != len) {\n                    this.error(\"bad response2\")\n                    return\n                }\n                res.set(words, ptr)\n                // limit transfer, according to JD frame size\n                if (jdmode && ptr == 0) {\n                    const frmsz = new Uint8Array(res.buffer)[2]\n                    const words = (frmsz + 12 + 3) >> 2\n                    if (count > words) count = words\n                }\n                ptr += words.length\n            }\n        })\n\n        return res\n    }\n\n    private async findExchange() {\n        const memStart = 0x2000_0000\n        const memStop = memStart + 128 * 1024\n        const checkSize = 1024\n\n        let p0 = 0x20006000\n        let p1 = 0x20006000 + checkSize\n\n        const check = async (addr: number) => {\n            if (addr < memStart) return null\n            if (addr + checkSize > memStop) return null\n            const buf = await this.readWords(addr, checkSize >> 2)\n            for (let i = 0; i < buf.length; ++i) {\n                if (buf[i] == 0x786d444a && buf[i + 1] == 0xb0a6c0e9)\n                    return addr + (i << 2)\n            }\n            return 0\n        }\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const a0 = await check(p0)\n            if (a0) return a0\n            const a1 = await check(p1)\n            if (a1) return a1\n            if (a0 === null && a1 === null) return null\n            p0 -= checkSize\n            p1 += checkSize\n        }\n    }\n\n    private async triggerIRQ() {\n        const addr = 0xe000e200 + (this.irqn >> 5) * 4\n        const data = new Uint32Array([1 << (this.irqn & 31)])\n        await this.writeWords(addr, data)\n    }\n\n    private writeWord(addr: number, val: number) {\n        return this.writeWords(addr, new Uint32Array([val]))\n    }\n\n    private async reset() {\n        await this.writeWord(0xe000edfc, 0) // DEMCR\n        await this.writeWord(0xe000ed0c, 0x05fa0000 | (1 << 2)) // AIRCR\n    }\n\n    async postConnectAsync() {\n        this.startRecvToLoop()\n        const devid = await this.talkStringAsync(0x80)\n        if (/^9902/.test(devid)) {\n            this.error(\n                `micro:bit v1 is not supported. sorry.`,\n                ERROR_MICROBIT_V1\n            )\n            return\n        }\n        if (!/^990[3456789]/.test(devid)) {\n            this.error(\n                `Invalid Vendor0 response: ` + devid,\n                ERROR_MICROBIT_UNKNOWN\n            )\n            return\n        }\n\n        this.io.log(\"DAPLink v\" + (await this.talkStringAsync(0x00, 0x04)))\n\n        await this.setBaudRate() // this may reset the board\n\n        const freq = [0x11, 0, 0, 0, 0]\n        write32(freq, 1, 10_000_000)\n        await this.talkAsync(freq)\n\n        const inits = [\n            \"02 00\", // connect\n            \"04 00 64 00 00 00\", // configure delays\n            // SWD switch\n            \"12 38 FF FF FF FF FF FF FF\", // ones\n            \"12 10 9E E7\", // SWD\n            \"12 38 FF FF FF FF FF FF FF\", // ones\n            \"12 08 00\", // zero\n            // read DPIDR\n            \"05 00 01 02 00 00 00 00\",\n            // clear errors\n            \"05 00 03 00 04 00 00 00 08 00 00 00 00 04 00 00 00 50\",\n        ]\n\n        for (const ini of inits) await this.talkHexAsync(ini)\n\n        for (let i = 0; i < 100; ++i) {\n            const st = await this.readDP(4)\n            const mask = (1 << 29) | (1 << 31)\n            if ((st & mask) == mask) break\n            await delay(20)\n        }\n\n        await this.reset()\n        await delay(1000) // the actual minimum until mbbridge starts seems to be 700ms; give it some more time just in case\n\n        const xchg = await this.findExchange()\n        if (xchg === null) {\n            this.error(\n                `exchange address not found; add jacdac to your project`,\n                ERROR_MICROBIT_JACDAC_MISSING\n            )\n            return\n        }\n        this.xchgAddr = xchg\n        const info = await this.readBytes(xchg, 16)\n        this.irqn = info[8]\n        if (info[12 + 2] != 0xff) {\n            this.error(\n                \"invalid memory; try power-cycling the micro:bit\",\n                ERROR_MICROBIT_INVALID_MEMORY\n            )\n            return\n        }\n        // clear initial lock\n        await this.writeWord(xchg + 12, 0)\n        this.io.log(\n            `exchange address: 0x${xchg.toString(16)}; irqn=${this.irqn}`\n        )\n\n        /* async */ this.xchgLoop().catch(e => {\n            console.debug(e)\n            this.error(e?.message || \"an error occured\")\n        })\n    }\n}\n","import { JACDAC_ERROR } from \"./constants\"\n\n/**\n * Common Jacdac error type\n * @category Runtime\n */\nexport class JDError extends Error {\n    constructor(message: string, readonly jacdacName?: string) {\n        super(message)\n        this.name = JACDAC_ERROR\n    }\n}\nexport default JDError\n\n/**\n * Extract the Jacdac error code if any\n * @param e\n * @returns\n * @category Runtime\n */\nexport function errorCode(e: JDError): string {\n    return e.name === JACDAC_ERROR ? (e as JDError)?.jacdacName : undefined\n}\n","import { HF2Proto, HF2_DEVICE_MAJOR, HF2_IO } from \"./hf2\"\nimport {\n    CMSISProto,\n    MICROBIT_V2_PRODUCT_ID,\n    MICROBIT_V2_VENDOR_ID,\n} from \"./microbit\"\nimport { Observable } from \"../observable\"\nimport Proto from \"./proto\"\nimport { assert, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\n\nexport const USB_FILTERS = {\n    filters: [\n        {\n            // hf2 devices (incl. arcade)\n            classCode: 255,\n            subclassCode: HF2_DEVICE_MAJOR,\n        },\n        {\n            // micro:bit v2\n            vendorId: MICROBIT_V2_VENDOR_ID,\n            productId: MICROBIT_V2_PRODUCT_ID,\n        },\n    ],\n}\n\nconst controlTransferGetReport = 0x01\nconst controlTransferSetReport = 0x09\nconst controlTransferOutReport = 0x200\nconst controlTransferInReport = 0x100\n\nexport interface USBOptions {\n    requestDevice?: (options: USBDeviceRequestOptions) => Promise<USBDevice>\n    getDevices: (options: USBDeviceRequestOptions) => Promise<USBDevice[]>\n    connectObservable?: Observable<void>\n    disconnectObservable?: Observable<void>\n}\n\nexport default class USBIO implements HF2_IO {\n    private dev: USBDevice\n    private iface: USBInterface\n    private altIface: USBAlternateInterface\n    private epIn: USBEndpoint\n    private epOut: USBEndpoint\n    private readLoopStarted = false\n    private ready = false\n    private rawMode = false\n\n    constructor(public readonly options: USBOptions) {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return this.isMicrobit() ? new CMSISProto(this) : new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.epIn = null\n            this.epOut = null\n            this.onData = () => console.warn(\"rogue hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.dev\n            .close()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    recvPacketAsync(): Promise<Uint8Array> {\n        if (!this.rawMode) this.error(\"rawMode required\")\n        return this.recvPacketCoreAsync()\n    }\n\n    private recvPacketCoreAsync(): Promise<Uint8Array> {\n        const final = (res: USBInTransferResult) => {\n            if (res.status != \"ok\") this.error(\"USB IN transfer failed\")\n            const arr = new Uint8Array(res.data.buffer)\n            if (arr.length == 0) return this.recvPacketCoreAsync()\n            return arr\n        }\n\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n\n        if (!this.epIn) {\n            return this.dev\n                .controlTransferIn(\n                    {\n                        requestType: \"class\",\n                        recipient: \"interface\",\n                        request: controlTransferGetReport,\n                        value: controlTransferInReport,\n                        index: this.iface.interfaceNumber,\n                    },\n                    64\n                )\n                .then(final)\n        }\n\n        return this.dev.transferIn(this.epIn.endpointNumber, 64).then(final)\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(\n            `device ${this.dev ? this.dev.productName : \"n/a\"} (${msg})`,\n            code\n        )\n        this.onError(e)\n    }\n\n    private async readLoop() {\n        if (this.rawMode || this.readLoopStarted) return\n        this.readLoopStarted = true\n        console.debug(\"start read loop\")\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (!this.ready) {\n                break\n                //await delay(300)\n                //continue\n            }\n\n            try {\n                const buf = await this.recvPacketCoreAsync()\n\n                if (buf[0]) {\n                    // we've got data; retry reading immedietly after processing it\n                    this.onData(buf)\n                } else {\n                    // throttle down if no data coming\n                    await delay(5)\n                }\n            } catch (err) {\n                if (this.dev) {\n                    this.onError(err)\n                    await this.disconnectAsync()\n                }\n                await delay(300)\n            }\n        }\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        if (!this.epOut) {\n            return this.dev\n                .controlTransferOut(\n                    {\n                        requestType: \"class\",\n                        recipient: \"interface\",\n                        request: controlTransferSetReport,\n                        value: controlTransferOutReport,\n                        index: this.iface.interfaceNumber,\n                    },\n                    pkt\n                )\n                .then(res => {\n                    if (res.status != \"ok\")\n                        this.error(\"USB CTRL OUT transfer failed\")\n                })\n        }\n        return this.dev\n            .transferOut(this.epOut.endpointNumber, pkt)\n            .then(res => {\n                if (res.status != \"ok\") this.error(\"USB OUT transfer failed\")\n            })\n    }\n\n    private isMicrobit() {\n        return (\n            this.dev && this.dev.productId == 516 && this.dev.vendorId == 3368\n        )\n    }\n\n    private checkDevice() {\n        this.iface = undefined\n        this.altIface = undefined\n        if (!this.dev) return false\n        console.debug(\n            \"connect device: \" +\n                this.dev.manufacturerName +\n                \" \" +\n                this.dev.productName\n        )\n        // resolve interfaces\n        const subcl = this.isMicrobit() ? 0 : HF2_DEVICE_MAJOR\n        for (const iface of this.dev.configuration.interfaces) {\n            const alt = iface.alternates[0]\n            if (alt.interfaceClass == 0xff && alt.interfaceSubclass == subcl) {\n                this.iface = iface\n                this.altIface = alt\n                break\n            }\n        }\n        if (this.isMicrobit()) this.rawMode = true\n        return !!this.iface\n    }\n\n    private async tryReconnectAsync(deviceId?: string) {\n        try {\n            const devices = await this.options.getDevices(USB_FILTERS)\n            this.dev = deviceId\n                ? devices.find(dev => dev.serialNumber === deviceId)\n                : devices[0]\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    private async requestDeviceAsync() {\n        try {\n            this.dev = await this.options.requestDevice(USB_FILTERS)\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync(deviceId)\n        if (!this.dev && !background) await this.requestDeviceAsync()\n        // background call and no device, just give up for now\n        if (!this.dev && background) throwError(\"device not paired\", true)\n\n        // let's connect\n        await this.openDeviceAsync()\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n\n    private async openDeviceAsync() {\n        if (!this.dev) throwError(\"device not found\")\n        if (!this.checkDevice()) throwError(\"device does not support HF2\")\n\n        await this.dev.open()\n        await this.dev.selectConfiguration(1)\n        if (this.altIface.endpoints.length) {\n            this.epIn = this.altIface.endpoints.filter(\n                e => e.direction == \"in\"\n            )[0]\n            this.epOut = this.altIface.endpoints.filter(\n                e => e.direction == \"out\"\n            )[0]\n            assert(this.epIn.packetSize == 64)\n            assert(this.epOut.packetSize == 64)\n        }\n        console.debug(\"claim interface\")\n        await this.dev.claimInterface(this.iface.interfaceNumber)\n        console.debug(\"all connected\")\n        this.ready = true\n        /* no await */ this.readLoop()\n    }\n}\n","import { HF2Proto, HF2_IO } from \"./hf2\"\nimport Proto from \"./proto\"\nimport { assert, bufferConcat, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\n\nexport const WEB_SERIAL_FILTERS = {\n    filters: [\n        {\n            usbVendorId: 0x303a, // espressif\n        },\n    ],\n}\n\nexport default class WebSerialIO implements HF2_IO {\n    private dev: SerialPort\n    private readLoopStarted = false\n    ready = false\n    private writer: WritableStreamDefaultWriter<Uint8Array>\n    private reader: ReadableStreamDefaultReader<Uint8Array>\n\n    constructor() {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.cancelStreams()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    private devInfo() {\n        if (!this.dev) return \"n/a\"\n        const h = (n: number) => (\"000\" + n.toString(16)).slice(-4)\n        const info = this.dev.getInfo()\n        return h(info.usbVendorId) + \":\" + h(info.usbProductId)\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code)\n        this.onError(e)\n    }\n\n    private async cancelStreams() {\n        if (this.reader)\n            try {\n                await this.reader.cancel()\n                this.reader.releaseLock()\n                // eslint-disable-next-line no-empty\n            } catch {}\n        try {\n            this.writer.releaseLock()\n            // eslint-disable-next-line no-empty\n        } catch {}\n        await this.dev.close()\n    }\n\n    private async readLoop() {\n        if (this.readLoopStarted) return\n\n        this.readLoopStarted = true\n        console.debug(\"start read loop\")\n\n        const readpkt = async (\n            reader: ReadableStreamDefaultReader<Uint8Array>\n        ) => {\n            let value: Uint8Array = null\n            for (;;) {\n                const tmp = await reader.read()\n                if (tmp.done || !this.dev) return null // reader cancelled\n                if (!value) value = tmp.value\n                else value = bufferConcat(value, tmp.value)\n                // Despite the fact that the device always sends full 64 bytes USB packets\n                // the Windows serial driver will sometimes give only one character, and then the remaining\n                // 63 in the second read - this must be going through some UART abstraction layers I guess... ¯\\_(ツ)_/¯\n                if (value && (value.length & 63) == 0) return value\n            }\n        }\n\n        for (;;) {\n            const reader = this.dev?.readable?.getReader()\n            if (!reader) {\n                await delay(100)\n                continue\n            }\n            this.reader = reader\n            console.debug(\"start new read loop round\")\n            try {\n                // eslint-disable-next-line no-constant-condition\n                for (;;) {\n                    const value = await readpkt(reader)\n                    if (!value) break\n                    // console.log(\"Recv\", toHex(value))\n                    if (value.length > 64)\n                        for (let i = 0; i < value.length; i += 64) {\n                            this.onData(value.slice(i, i + 64))\n                        }\n                    else this.onData(value)\n                }\n            } catch (e) {\n                if (this.dev) this.onError(e)\n                await delay(100)\n            } finally {\n                try {\n                    reader.releaseLock()\n                } catch {}\n                await delay(100)\n            }\n        }\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev || !this.writer)\n            return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt\n            pkt = new Uint8Array(64)\n            pkt.set(p)\n        }\n        return this.writer.write(pkt)\n    }\n\n    private async tryReconnectAsync() {\n        try {\n            const ports = await navigator.serial.getPorts()\n            this.dev = ports[0]\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    private async requestDeviceAsync() {\n        try {\n            this.dev = await navigator.serial.requestPort(WEB_SERIAL_FILTERS)\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync()\n        if (!this.dev && !background) await this.requestDeviceAsync()\n        // background call and no device, just give up for now\n        if (!this.dev && background) throwError(\"device not paired\", true)\n\n        // let's connect\n        await this.openDeviceAsync()\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n\n    private async openDeviceAsync() {\n        if (!this.dev) throwError(\"device not found\")\n\n        await this.dev.open({\n            baudRate: 115200, // not really\n            bufferSize: 32 * 1024,\n        })\n\n        this.writer = this.dev.writable?.getWriter()\n        if (!this.writer) throwError(\"no writer\")\n        this.ready = true\n        /* no await */ this.readLoop()\n    }\n}\n","import { Observable, Observer } from \"../observable\"\n\n/**\n * @internal\n */\nexport class EventTargetObservable<TEvent> implements Observable<TEvent> {\n    constructor(\n        public readonly element: EventTarget,\n        public readonly eventName: string\n    ) {}\n\n    subscribe(observer: Observer<TEvent>): { unsubscribe: () => void } {\n        const handler: EventListener = (ev: Event) =>\n            !!observer.next && observer.next(<TEvent>(<any>ev))\n        this.element.addEventListener(this.eventName, handler, false)\n        return {\n            unsubscribe: () =>\n                this.element.removeEventListener(this.eventName, handler),\n        }\n    }\n}\nexport default EventTargetObservable\n","import Packet from \"../packet\"\nimport EventTargetObservable from \"./eventtargetobservable\"\nimport Flags from \"../flags\"\nimport { USB_TRANSPORT } from \"../constants\"\nimport Transport from \"./transport\"\nimport JDBus from \"../bus\"\nimport Proto from \"./proto\"\nimport USBIO, { USBOptions } from \"./usbio\"\n\nexport function isWebUSBEnabled(): boolean {\n    return !!Flags.webUSB\n}\n\nexport function isWebUSBSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.usb &&\n            !!navigator.usb.getDevices\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nexport function usbRequestDevice(\n    options?: USBDeviceRequestOptions\n): Promise<USBDevice> {\n    // disabled\n    if (!Flags.webUSB) return Promise.resolve(undefined)\n\n    try {\n        return navigator?.usb?.requestDevice?.(options)\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return undefined\n    }\n}\n\nfunction usbGetDevices(): Promise<USBDevice[]> {\n    // disabled\n    if (!Flags.webUSB) return Promise.resolve([])\n\n    try {\n        return navigator?.usb?.getDevices() || Promise.resolve([])\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return Promise.resolve([])\n    }\n}\n\nclass WebUSBTransport extends Transport {\n    private hf2: Proto\n    constructor(public readonly options: USBOptions) {\n        super(USB_TRANSPORT, { ...options, checkPulse: true })\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        const transport = new USBIO(this.options)\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e)\n        this.hf2 = await transport.connectAsync(background)\n        this.hf2.onJDMessage(this.handleFrame.bind(this))\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this.hf2) throw new Error(\"hf2 transport disconnected\")\n\n        const buf = p.toBuffer()\n        await this.hf2.sendJDMessageAsync(buf)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async transportDisconnectAsync(background?: boolean) {\n        const h = this.hf2\n        this.hf2 = undefined\n        if (h) await h.disconnectAsync()\n    }\n}\n\nfunction defaultOptions(): USBOptions {\n    return (\n        isWebUSBSupported() && {\n            getDevices: usbGetDevices,\n            requestDevice: usbRequestDevice,\n            connectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"connect\"\n            ),\n            disconnectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"disconnect\"\n            ),\n        }\n    )\n}\n\nexport function createUSBTransport(options?: USBOptions): Transport {\n    if (!options) options = defaultOptions()\n    return options && new WebUSBTransport(options)\n}\n\nexport function createUSBBus(options?: USBOptions) {\n    return new JDBus([createUSBTransport(options)])\n}\n","import { USB_TRANSPORT } from \"../constants\"\nimport EventTargetObservable from \"./eventtargetobservable\"\nimport Flags from \"../flags\"\nimport Packet from \"../packet\"\nimport { Transport, TransportOptions } from \"./transport\"\nimport {\n    TransportConnectMessage,\n    TransportMessage,\n    TransportPacketMessage,\n} from \"./transportmessages\"\nimport { isWebUSBEnabled, usbRequestDevice } from \"./usb\"\nimport { USB_FILTERS } from \"./usbio\"\n\nclass WorkerTransport extends Transport {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private pending: {\n        [id: string]: {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            resolve: (t: any) => void\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            reject: (e: any) => void\n        }\n    } = {}\n\n    constructor(\n        public readonly type: string,\n        public readonly worker: Worker,\n        public readonly options: {\n            requestDevice: () => Promise<string>\n        } & TransportOptions\n    ) {\n        super(type, options)\n        this.worker.addEventListener(\"message\", this.handleMessage.bind(this))\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private postMessageAsync<T>(msg: TransportMessage) {\n        const id = (msg.id = \"\" + Math.random())\n        const p = new Promise<T>((resolve, reject) => {\n            this.worker.postMessage(msg)\n            this.pending[id] = { resolve, reject }\n        })\n        return p\n    }\n\n    private handleMessage(ev: MessageEvent) {\n        const data: TransportMessage = ev.data\n        const { jacdac, type } = data || {}\n        if (!jacdac) return // not our message\n        switch (type) {\n            case \"packet\": {\n                const { payload } = data as TransportPacketMessage\n                //debug(`wt: packet`, payload)\n                this.handlePacket(payload)\n                break\n            }\n            case \"frame\": {\n                const { payload } = data as TransportPacketMessage\n                //debug(`wt: frame`, payload)\n                this.handleFrame(payload)\n                break\n            }\n            case \"connect\":\n            case \"disconnect\": {\n                const { id, error } = data\n                const { resolve, reject } = this.pending[id] || {}\n                if (resolve) {\n                    if (error) reject(error)\n                    else resolve(undefined)\n                }\n                break\n            }\n            case \"error\": {\n                const { error, background, type } = data as TransportMessage\n                if (Flags.diagnostics) console.debug(data)\n                if (!background) this.errorHandler(type, error)\n                break\n            }\n        }\n    }\n\n    protected async transportSendPacketAsync(p: Packet): Promise<void> {\n        // don't wait\n        const buf = p.toBuffer()\n        this.worker.postMessage(<TransportPacketMessage>{\n            jacdac: true,\n            type: \"packet\",\n            payload: buf,\n        })\n    }\n\n    protected async transportConnectAsync(background?: boolean) {\n        let deviceId: string\n        if (!background) {\n            // request permission first\n            deviceId = await this.options.requestDevice()\n        }\n\n        // try connect\n        await this.postMessageAsync<void>(<TransportConnectMessage>{\n            jacdac: true,\n            type: \"connect\",\n            deviceId,\n            background,\n        })\n    }\n\n    protected transportDisconnectAsync(background?: boolean): Promise<void> {\n        return this.postMessageAsync<void>(<TransportMessage>{\n            jacdac: true,\n            type: \"disconnect\",\n            background,\n        })\n    }\n}\n\nexport function createUSBWorkerTransport(worker: Worker) {\n    return (\n        isWebUSBEnabled() &&\n        new WorkerTransport(USB_TRANSPORT, worker, {\n            checkPulse: true,\n            requestDevice: () =>\n                usbRequestDevice(USB_FILTERS).then(dev => dev?.serialNumber),\n            connectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"connect\"\n            ),\n            disconnectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"disconnect\"\n            ),\n        })\n    )\n}\n","import Packet from \"../packet\"\nimport Flags from \"../flags\"\nimport { SERIAL_TRANSPORT, USB_TRANSPORT } from \"../constants\"\nimport Transport from \"./transport\"\nimport JDBus from \"../bus\"\nimport Proto from \"./proto\"\nimport WebSerialIO from \"./webserialio\"\nimport { HF2_IO } from \"./hf2\"\n\nexport function isWebSerialEnabled(): boolean {\n    return !!Flags.webSerial\n}\n\nexport function isWebSerialSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.serial &&\n            !!navigator.serial.getPorts\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nclass WebSerialTransport extends Transport {\n    private hf2: Proto\n    constructor(private mkTransport: () => HF2_IO) {\n        super(SERIAL_TRANSPORT)\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        const transport = this.mkTransport()\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e)\n        this.hf2 = await transport.connectAsync(background)\n        this.hf2.onJDMessage(this.handleFrame.bind(this))\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this.hf2) throw new Error(\"hf2 transport disconnected\")\n\n        const buf = p.toBuffer()\n        await this.hf2.sendJDMessageAsync(buf)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async transportDisconnectAsync(background?: boolean) {\n        const h = this.hf2\n        this.hf2 = undefined\n        if (h) await h.disconnectAsync()\n    }\n}\n\n/**\n * Creates a transport over a Web Serial connection\n * @category\n */\nexport function createWebSerialTransport(\n    mkTransport: () => HF2_IO = () => new WebSerialIO()\n): Transport {\n    return isWebSerialSupported() && new WebSerialTransport(mkTransport)\n}\n\n/**\n * Creates a bus with a Web Serial connection\n * @category\n */\nexport function createWebSerialBus() {\n    return new JDBus([createWebSerialTransport()])\n}\n","import EventTargetObservable from \"./eventtargetobservable\"\nimport { HF2_DEVICE_MAJOR } from \"./hf2\"\nimport { MICROBIT_V2_PRODUCT_ID, MICROBIT_V2_VENDOR_ID } from \"./microbit\"\nimport { USBOptions } from \"./usbio\"\n\nexport function createNodeUSBOptions(): USBOptions {\n    console.debug(`jacdac: creating usb transport`)\n\n    async function devicesFound(devices: USBDevice[]): Promise<USBDevice> {\n        for (const device of devices) {\n            // microbit v2\n            if (\n                device.vendorId === MICROBIT_V2_VENDOR_ID &&\n                device.productId === MICROBIT_V2_PRODUCT_ID\n            ) {\n                return device\n            }\n            // jacdac device\n            else if (device.deviceVersionMajor == HF2_DEVICE_MAJOR) {\n                for (const iface of device.configuration.interfaces) {\n                    const alt = iface.alternates[0]\n                    if (\n                        alt.interfaceClass == 0xff &&\n                        alt.interfaceSubclass == HF2_DEVICE_MAJOR\n                    ) {\n                        return device\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const USB = require(\"webusb\").USB\n    const usb = new USB({\n        devicesFound,\n    })\n\n    async function requestDevice(\n        options: USBDeviceRequestOptions\n    ): Promise<USBDevice> {\n        console.debug(`requesting device...`)\n        try {\n            const device = await usb.requestDevice(options)\n            return device\n        } catch (e) {\n            console.debug(e)\n            return undefined\n        }\n    }\n\n    async function getDevices(\n        options: USBDeviceRequestOptions\n    ): Promise<USBDevice[]> {\n        //const devices = await usb.getDevices()\n        //return devices\n        const dev = await requestDevice(options)\n        return dev ? [dev] : []\n    }\n\n    const connectObservable = new EventTargetObservable(usb, \"connect\")\n    const disconnectObservable = new EventTargetObservable(usb, \"disconnect\")\n\n    return {\n        getDevices,\n        requestDevice,\n        connectObservable,\n        disconnectObservable,\n    }\n}\n","import { HF2Proto, HF2_IO } from \"./hf2\"\nimport Proto from \"./proto\"\nimport { assert, bufferConcat, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\nimport { WEB_SERIAL_FILTERS } from \"./webserialio\"\n\ninterface Port {\n    path: string\n    manufacturer: string\n    serialNumber: string\n    pnpId: string\n    locationId: string\n    vendorId: string\n    productId: string\n}\n\nfunction toPromise<T>(f: (cb: (err: Error, res: T) => void) => void) {\n    return new Promise<T>((resolve, reject) =>\n        f((err, result) => {\n            if (err) reject(err)\n            else resolve(result)\n        })\n    )\n}\n\n/**\n * @internal\n */\nexport class NodeWebSerialIO implements HF2_IO {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private dev: any\n    private port: Port\n    ready = false\n\n    /**\n     * \n     * @param SerialPort ``require(\"serialport\")``\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private SerialPort: any) {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.cancelStreams()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    private devInfo() {\n        if (!this.port) return \"n/a\"\n        return this.port.vendorId + \":\" + this.port.productId\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code)\n        this.onError(e)\n    }\n\n    private async cancelStreams() {\n        await toPromise(cb => this.dev.close(cb))\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt\n            pkt = new Uint8Array(64)\n            pkt.set(p)\n        }\n        return toPromise<void>(cb => this.dev.write(pkt, undefined, cb))\n    }\n\n    private async tryReconnectAsync() {\n        try {\n            this.dev = undefined\n            this.port = undefined\n\n            const ports: Port[] = await this.SerialPort.list()\n            this.port = ports.filter(\n                p =>\n                    /^PX/.test(p.serialNumber) ||\n                    WEB_SERIAL_FILTERS.filters.some(\n                        f => f.usbVendorId == parseInt(p.vendorId, 16)\n                    )\n            )[0]\n\n            if (this.port) {\n                await toPromise(cb => {\n                    this.dev = new this.SerialPort(\n                        this.port.path,\n                        { baudRate: 115200 },\n                        cb\n                    )\n                })\n                let tmpdata: Uint8Array\n                this.dev.on(\"data\", (buf: Uint8Array) => {\n                    if (tmpdata) buf = bufferConcat(tmpdata, buf)\n                    tmpdata = null\n\n                    // This was only observed with WebSerial, but better safe than sorry\n                    if (buf.length & 63) {\n                        tmpdata = buf\n                        return\n                    }\n\n                    if (buf.length > 64)\n                        for (let i = 0; i < buf.length; i += 64) {\n                            this.onData(buf.slice(i, i + 64))\n                        }\n                    else this.onData(buf)\n                })\n                this.dev.on(\"error\", (err: any) => {\n                    this.error(err.messsage || err + \"\")\n                })\n            }\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n            this.port = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync()\n        if (!this.dev && background)\n            throwError(\"can't find suitable device\", true)\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n}\nexport default NodeWebSerialIO","import JDBridge from \"../bridge\"\nimport { inIFrame } from \"../iframeclient\"\n\nclass IFrameBridge extends JDBridge {\n    constructor(readonly targetOrigin: string) {\n        super()\n        this.handleMessage = this.handleMessage.bind(this)\n        window.addEventListener(\"message\", this.handleMessage, false)\n        this.mount(() =>\n            window.removeEventListener(\"message\", this.handleMessage)\n        )\n        console.debug(`jacdac: iframe bridge created`)\n    }\n\n    private handleMessage(msg: MessageEvent) {\n        const { data } = msg\n        if (data.channel === \"jacdac\" && data.type === \"messagepacket\") {\n            const payload: Uint8Array = data.data\n            this.receivePacket(payload)\n        }\n    }\n\n    protected sendPacket(data: Uint8Array): void {\n        const msg = {\n            type: \"messagepacket\",\n            channel: \"jacdac\",\n            data,\n            sender: this.bridgeId,\n            broadcast: true,\n        }\n        window.parent.postMessage(msg, this.targetOrigin)\n    }\n}\n\nexport default function createIFrameBridge(parentOrigin = \"*\"): JDBridge {\n    return inIFrame() && new IFrameBridge(parentOrigin)\n}\n\nexport function startDevTools() {\n    if (\n        typeof window !== \"undefined\" &&\n        !/^https:\\/\\/microsoft.github.io\\/jacdac-docs\\//.test(\n            window.location.href\n        )\n    )\n        window.location.href = `https://microsoft.github.io/jacdac-docs/clients/javascript/devtools.html#${window.location.href}`\n}\n","import JDBus from \"../bus\"\nimport { createUSBTransport, isWebUSBSupported } from \"./usb\"\nimport { createWebSerialTransport, isWebSerialSupported } from \"./webserial\"\nimport { createBluetoothTransport, isWebBluetoothSupported } from \"./bluetooth\"\nimport { USBOptions } from \"./usbio\"\nimport createIFrameBridge from \"../bridges/iframebridge\"\n\n/**\n * Creates a Jacdac bus using WebUSB, WebSerial or WebBluetooth\n * @param options\n * @returns\n * @category Transport\n */\nexport function createWebBus(options?: {\n    usbOptions?: USBOptions\n    iframeTargetOrigin?: string\n}) {\n    const { usbOptions, iframeTargetOrigin } = options || {}\n    const bus = new JDBus([\n        usbOptions !== null && createUSBTransport(usbOptions),\n        createWebSerialTransport(),\n        createBluetoothTransport(),\n    ])\n    const iframeBridge =\n        iframeTargetOrigin !== null && createIFrameBridge(iframeTargetOrigin)\n    if (iframeBridge) iframeBridge.bus = bus\n    return bus\n}\n\n/**\n * Indicates if any of the USB/Serial/Bluetooth transports is supported\n * @returns \n * @category Transport\n */\nexport function isWebTransportSupported() {\n    return (\n        isWebUSBSupported() ||\n        isWebSerialSupported() ||\n        isWebBluetoothSupported()\n    )\n}\n","import {\n    BOUND,\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    DEVICE_DISCONNECT,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    UNBOUND,\n} from \"./constants\"\nimport JDBus from \"./bus\"\nimport JDDevice from \"./device\"\nimport JDService from \"./service\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { JDClient } from \"./client\"\n\n/**\n * A binding from a name to a service\n * @category Roles\n */\nexport interface RoleBinding {\n    role: string\n    serviceClass: number\n    preferredDeviceId?: string\n    service?: JDService\n}\n\n/**\n * A role manager\n * @category Roles\n */\nexport class RoleManager extends JDClient {\n    private readonly _roles: RoleBinding[] = []\n\n    /**\n     * Gets the bus for this role\n     */\n    public readonly bus: JDBus\n\n    constructor(bus: JDBus) {\n        super()\n        this.bus = bus\n        this.mount(\n            this.bus.subscribe(DEVICE_ANNOUNCE, this.addServices.bind(this))\n        )\n        this.mount(\n            this.bus.subscribe(\n                DEVICE_DISCONNECT,\n                this.removeServices.bind(this)\n            )\n        )\n\n        this.bindServices()\n    }\n\n    /**\n     * Indicates if all roles are bound.\n     */\n    get isBound() {\n        return this._roles.every(({ service }) => !!service)\n    }\n\n    /**\n     * Gets the list of roles tracked by the manager\n     */\n    roles(bound: boolean = undefined) {\n        if (bound !== undefined)\n            return this._roles.filter(({ service }) => !!service === bound)\n        else return this._roles.slice(0)\n    }\n\n    /**\n     * Updates the list of roles\n     * @param newRoles\n     */\n    updateRoles(newRoles: RoleBinding[]) {\n        const oldBound = this.isBound\n        let changed = false\n\n        // remove unknown roles\n        const supportedNewRoles = newRoles.filter(({ serviceClass }) =>\n            serviceSpecificationFromClassIdentifier(serviceClass)\n        )\n\n        // unbind removed roles\n        let i = 0\n        while (i < this._roles.length) {\n            const role = this._roles[i]\n            if (!supportedNewRoles.find(r => r.role === role.role)) {\n                changed = true\n                this._roles.splice(i, 1)\n                this.emit(ROLE_UNBOUND, role.role)\n            } else {\n                i++\n            }\n        }\n\n        // update or add roles\n        for (const newRole of supportedNewRoles) {\n            const existingRole = this._roles.find(r => r.role === newRole.role)\n            if (!existingRole) {\n                // added role\n                changed = true\n                this._roles.push({ ...newRole })\n            } else if (existingRole.serviceClass !== newRole.serviceClass) {\n                // modified type, force rebinding\n                changed = true\n                existingRole.serviceClass = newRole.serviceClass\n                if (existingRole.service) {\n                    existingRole.service = undefined\n                    this.emit(ROLE_UNBOUND, existingRole.role)\n                }\n            } // else unmodifed role\n        }\n        // bound services\n        this.bindServices(changed)\n        this.emitBoundEvents(oldBound)\n    }\n\n    /**\n     * Resolves the service bound to a given role.\n     * @param role\n     * @returns\n     */\n    public service(role: string): JDService {\n        return this._roles.find(r => r.role === role)?.service\n    }\n\n    /**\n     * Updates or creates a new role\n     * @param role name of the role\n     * @param serviceClass desired service class\n     * @param preferredDeviceId optional preferred device id\n     * @returns\n     */\n    public updateRole(\n        role: string,\n        serviceClass: number,\n        preferredDeviceId?: string\n    ) {\n        if (!serviceSpecificationFromClassIdentifier(serviceClass)) return // unknown role type\n\n        let binding = this._roles.find(r => r.role === role)\n\n        // check if we already have this role\n        if (binding && serviceClass === binding.serviceClass) {\n            if (!binding.service && preferredDeviceId) {\n                binding.preferredDeviceId = preferredDeviceId\n            }\n            return\n        }\n        const oldBound = this.isBound\n        // new role\n        binding = { role, serviceClass, preferredDeviceId }\n        this._roles.push(binding)\n        if (!this.bindRole(binding)) {\n            this.emit(ROLE_UNBOUND, role)\n        }\n        this.emit(CHANGE)\n        this.emitBoundEvents(oldBound)\n    }\n\n    private emitBoundEvents(oldBound: boolean) {\n        const bound = this.isBound\n        if (oldBound !== bound) this.emit(bound ? BOUND : UNBOUND)\n    }\n\n    // TODO: need to respect other (unbound) role's preferredDeviceId\n    private bindRole(role: RoleBinding) {\n        const ret = this.bus\n            .services({\n                ignoreInfrastructure: true,\n                serviceClass: role.serviceClass,\n            })\n            .filter(s => !this.roles(true).find(r => r.service === s))\n        if (ret.length) {\n            let theOne = ret[0]\n            if (role.preferredDeviceId) {\n                const newOne = ret.find(\n                    s => s.device.deviceId === role.preferredDeviceId\n                )\n                if (newOne) theOne = newOne\n            }\n            role.service = theOne\n            this.emit(ROLE_BOUND, role.role)\n            return true\n        }\n        return false\n    }\n\n    private bindServices(changed?: boolean) {\n        this.roles(false).forEach(binding => {\n            if (this.bindRole(binding)) changed = true\n        })\n        if (changed) this.emit(CHANGE)\n    }\n\n    private addServices(dev: JDDevice) {\n        if (dev === this.bus.selfDevice) return\n        this.bindServices()\n    }\n\n    private removeServices(dev: JDDevice) {\n        let changed = false\n        this._roles\n            .filter(r => r.service?.device === dev)\n            .forEach(r => {\n                r.service = undefined\n                this.emit(ROLE_UNBOUND, r.role)\n                changed = true\n            })\n        this.bindServices(changed)\n    }\n\n    toString() {\n        return this._roles\n            .map(({ role, service }) => `${role}->${service || \"?\"}`)\n            .join(\",\")\n    }\n}\nexport default RoleManager\n\n/**\n * Tracks a set of roles\n * @param bus bus hosting the devices\n * @param bindings map of role names to device service pairs\n * @param onUpdate callback to run whenver role assignments change\n * @param options Additional options\n * @returns A unsubscribe callback to cleanup handlers\n * @category Roles\n */\nexport function startRoles<\n    TRoles extends Record<\n        string,\n        { serviceClass: number; preferredDeviceId?: string }\n    >\n>(\n    bus: JDBus,\n    bindings: TRoles,\n    onUpdate: (roles: Record<keyof TRoles, JDService>) => void,\n    options?: {\n        /**\n         * Calls update even if not all role around bound\n         */\n        incomplete?: boolean\n    }\n): () => void {\n    const { incomplete } = options || {}\n    const roleManager = new RoleManager(bus)\n    roleManager.updateRoles(\n        Object.keys(bindings).map(role => ({\n            role,\n            serviceClass: bindings[role].serviceClass,\n            preferredDeviceId: bindings[role].preferredDeviceId,\n        }))\n    )\n    const roles = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const r: Record<keyof TRoles, JDService> = {} as any\n        for (const key in bindings) {\n            const srv = roleManager.service(key)\n            if (srv) r[key] = srv\n        }\n        return r\n    }\n    const update = () => {\n        if (!incomplete && !roleManager.isBound) return\n        onUpdate(roles())\n    }\n    const unsubscribe = roleManager.subscribe(CHANGE, update)\n    update()\n    return unsubscribe\n}\n\n/*\nfunction test(bus: JDBus) {\n    const bindings = {\n        thermo1: { serviceClass: SRV_BUTTON },\n        thermo2: { serviceClass: SRV_BUTTON },\n    }\n    trackRoles(\n        bus,\n        bindings,\n        ({ thermo1, thermo2 }) => {\n            console.log({ thermo1, thermo2 })\n        },\n        { incomplete: true }\n    )\n}\n*/\n","import JDBus from \"./bus\"\nimport { isSensor, serviceSpecifications } from \"./spec\"\nimport { toMap } from \"./utils\"\n\nlet _sensorSpecs: jdspec.ServiceSpec[]\n\n/**\n * Gets the list of sensor specifications available\n * @returns\n */\nexport function sensorSpecifications() {\n    if (!_sensorSpecs) {\n        _sensorSpecs = serviceSpecifications().filter(\n            srv => !srv.shortName.startsWith(\"_\") && isSensor(srv)\n        )\n    }\n    return _sensorSpecs\n}\n\n/**\n * Collects and flattens all sensor data into a serializable object\n * @param bus\n * @returns\n */\nexport function snapshotSensors(\n    bus: JDBus\n): Record<string, number[] | Record<string, number>[]> {\n    return toMap(\n        sensorSpecifications(),\n        srv => srv.camelName,\n        srv =>\n            bus\n                .services({\n                    serviceClass: srv.classIdentifier,\n                    ignoreInfrastructure: true,\n                    announced: true,\n                })\n                .map(srv => {\n                    const reg = srv.readingRegister\n                    const spec = reg.specification\n                    return spec.fields.length === 1\n                        ? reg.unpackedValue?.[0] || 0\n                        : reg.objectValue || {}\n                })\n    )\n}\n","import { SRV_CONTROL } from \"../jdom/constants\"\nimport {\n    isHighLevelRegister,\n    isInfrastructure,\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecifications,\n} from \"../jdom/spec\"\n\nexport enum ServiceTwinRegisterFlag {\n    Const = 0x0001,\n    Volatile = 0x0002,\n}\n\nexport interface ServiceTwinRegisterSpec {\n    code: number // code <= 255 => ro, otherwise rw\n    name: string\n    flags: ServiceTwinRegisterFlag\n    packf: string\n    fields?: string[]\n}\n\nexport interface ServiceTwinSpec {\n    serviceClass: number\n    name: string\n    registers: ServiceTwinRegisterSpec[]\n}\n\nexport function serviceSpecificationToServiceTwinSpecification(\n    specification: jdspec.ServiceSpec\n): ServiceTwinSpec {\n    if (!specification) return undefined\n\n    const {\n        classIdentifier: serviceClass,\n        camelName: name,\n        packets,\n    } = specification\n\n    const registers = packets\n        .filter(isHighLevelRegister) // TODO formalize\n        .map<ServiceTwinRegisterSpec>(reg => {\n            let flags = 0\n            if (reg.kind == \"const\") flags |= ServiceTwinRegisterFlag.Const\n            if (reg.volatile) flags |= ServiceTwinRegisterFlag.Volatile\n            const r: ServiceTwinRegisterSpec = {\n                code: reg.identifier,\n                name: reg.name,\n                flags,\n                packf: reg.packFormat,\n                fields:\n                    reg.fields.length > 1\n                        ? reg.fields.map(f => f.name)\n                        : undefined,\n            }\n            return r\n        })\n    const dspec: ServiceTwinSpec = {\n        serviceClass,\n        name,\n        registers,\n    }\n    return dspec\n}\n\nexport function serviceSpecificationsWithServiceTwinSpecification() {\n    const specs = [\n        serviceSpecificationFromClassIdentifier(SRV_CONTROL),\n        ...serviceSpecifications().filter(srv => !isInfrastructure(srv)),\n    ]\n    return specs\n}\n","import{LIBUSB_ENDPOINT_IN as e,on as t,removeListener as r,getDeviceList as n,LIBUSB_ENDPOINT_OUT as i,LIBUSB_TRANSFER_TYPE_BULK as s,LIBUSB_TRANSFER_TYPE_INTERRUPT as o,LIBUSB_RECIPIENT_DEVICE as c,LIBUSB_RECIPIENT_INTERFACE as a,LIBUSB_RECIPIENT_ENDPOINT as u,LIBUSB_RECIPIENT_OTHER as l,LIBUSB_REQUEST_TYPE_STANDARD as d,LIBUSB_REQUEST_TYPE_CLASS as h,LIBUSB_REQUEST_TYPE_VENDOR as f,LIBUSB_TRANSFER_STALL as v,LIBUSB_TRANSFER_OVERFLOW as p}from\"usb\";function m(){}function E(){E.init.call(this)}function g(e){return void 0===e._maxListeners?E.defaultMaxListeners:e._maxListeners}function b(e,t,r){if(t)e.call(r);else for(var n=e.length,i=N(e,n),s=0;s<n;++s)i[s].call(r)}function w(e,t,r,n){if(t)e.call(r,n);else for(var i=e.length,s=N(e,i),o=0;o<i;++o)s[o].call(r,n)}function _(e,t,r,n,i){if(t)e.call(r,n,i);else for(var s=e.length,o=N(e,s),c=0;c<s;++c)o[c].call(r,n,i)}function I(e,t,r,n,i,s){if(t)e.call(r,n,i,s);else for(var o=e.length,c=N(e,o),a=0;a<o;++a)c[a].call(r,n,i,s)}function D(e,t,r,n){if(t)e.apply(r,n);else for(var i=e.length,s=N(e,i),o=0;o<i;++o)s[o].apply(r,n)}function T(e,t,r,n){var i,s,o,c;if(\"function\"!=typeof r)throw new TypeError('\"listener\" argument must be a function');if((s=e._events)?(s.newListener&&(e.emit(\"newListener\",t,r.listener?r.listener:r),s=e._events),o=s[t]):(s=e._events=new m,e._eventsCount=0),o){if(\"function\"==typeof o?o=s[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),!o.warned&&(i=g(e))&&i>0&&o.length>i){o.warned=!0;var a=new Error(\"Possible EventEmitter memory leak detected. \"+o.length+\" \"+t+\" listeners added. Use emitter.setMaxListeners() to increase limit\");a.name=\"MaxListenersExceededWarning\",a.emitter=e,a.type=t,a.count=o.length,c=a,\"function\"==typeof console.warn?console.warn(c):console.log(c)}}else o=s[t]=r,++e._eventsCount;return e}function C(e,t,r){var n=!1;function i(){e.removeListener(t,i),n||(n=!0,r.apply(e,arguments))}return i.listener=r,i}function S(e){var t=this._events;if(t){var r=t[e];if(\"function\"==typeof r)return 1;if(r)return r.length}return 0}function N(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}m.prototype=Object.create(null),E.EventEmitter=E,E.usingDomains=!1,E.prototype.domain=void 0,E.prototype._events=void 0,E.prototype._maxListeners=void 0,E.defaultMaxListeners=10,E.init=function(){this.domain=null,E.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new m,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},E.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||isNaN(e))throw new TypeError('\"n\" argument must be a positive number');return this._maxListeners=e,this},E.prototype.getMaxListeners=function(){return g(this)},E.prototype.emit=function(e){var t,r,n,i,s,o,c,a=\"error\"===e;if(o=this._events)a=a&&null==o.error;else if(!a)return!1;if(c=this.domain,a){if(t=arguments[1],!c){if(t instanceof Error)throw t;var u=new Error('Uncaught, unspecified \"error\" event. ('+t+\")\");throw u.context=t,u}return t||(t=new Error('Uncaught, unspecified \"error\" event')),t.domainEmitter=this,t.domain=c,t.domainThrown=!1,c.emit(\"error\",t),!1}if(!(r=o[e]))return!1;var l=\"function\"==typeof r;switch(n=arguments.length){case 1:b(r,l,this);break;case 2:w(r,l,this,arguments[1]);break;case 3:_(r,l,this,arguments[1],arguments[2]);break;case 4:I(r,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(n-1),s=1;s<n;s++)i[s-1]=arguments[s];D(r,l,this,i)}return!0},E.prototype.addListener=function(e,t){return T(this,e,t,!1)},E.prototype.on=E.prototype.addListener,E.prototype.prependListener=function(e,t){return T(this,e,t,!0)},E.prototype.once=function(e,t){if(\"function\"!=typeof t)throw new TypeError('\"listener\" argument must be a function');return this.on(e,C(this,e,t)),this},E.prototype.prependOnceListener=function(e,t){if(\"function\"!=typeof t)throw new TypeError('\"listener\" argument must be a function');return this.prependListener(e,C(this,e,t)),this},E.prototype.removeListener=function(e,t){var r,n,i,s,o;if(\"function\"!=typeof t)throw new TypeError('\"listener\" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new m:(delete n[e],n.removeListener&&this.emit(\"removeListener\",e,r.listener||t));else if(\"function\"!=typeof r){for(i=-1,s=r.length;s-- >0;)if(r[s]===t||r[s].listener&&r[s].listener===t){o=r[s].listener,i=s;break}if(i<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new m,this;delete n[e]}else!function(e,t){for(var r=t,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}(r,i);n.removeListener&&this.emit(\"removeListener\",e,o||t)}return this},E.prototype.removeAllListeners=function(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new m,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new m:delete r[e]),this;if(0===arguments.length){for(var n,i=Object.keys(r),s=0;s<i.length;++s)\"removeListener\"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners(\"removeListener\"),this._events=new m,this._eventsCount=0,this}if(\"function\"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},E.prototype.listeners=function(e){var t,r=this._events;return r&&(t=r[e])?\"function\"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(t):[]},E.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):S.call(e,t)},E.prototype.listenerCount=S,E.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};class y extends E{constructor(){super(...arguments),this.isEventListenerObject=e=>void 0!==e.handleEvent}addEventListener(e,t){if(t){const r=this.isEventListenerObject(t)?t.handleEvent:t;super.addListener(e,r)}}removeEventListener(e,t){if(t){const r=this.isEventListenerObject(t)?t.handleEvent:t;super.removeListener(e,r)}}dispatchEvent(e){return super.emit(e.type,e)}}class P{constructor(e){this.configurationValue=null,this.configurationName=null,this.interfaces=[],this.configurationValue=e.configurationValue,this.configurationName=e.configurationName,this.interfaces=e.interfaces}}class L{constructor(e){this.interfaceNumber=null,this.alternates=[],this._claimed=!1,this._currentAlternate=0,this._handle=null,this.interfaceNumber=e.interfaceNumber,this.alternates=e.alternates,this._handle=e._handle}get claimed(){return this._claimed}get alternate(){return this.alternates.find(e=>e.alternateSetting===this._currentAlternate)}selectAlternateInterface(e){return k.selectAlternateInterface(this._handle,this.interfaceNumber,e).then(()=>{this._currentAlternate=e})}claimInterface(){return k.claimInterface(this._handle,this.interfaceNumber).then(()=>{this._claimed=!0})}releaseInterface(){return k.releaseInterface(this._handle,this.interfaceNumber).then(()=>{this._claimed=!1})}reset(){this._currentAlternate=0}}class V{constructor(e){this.alternateSetting=null,this.interfaceClass=null,this.interfaceSubclass=null,this.interfaceProtocol=null,this.interfaceName=null,this.endpoints=[],this.alternateSetting=e.alternateSetting,this.interfaceClass=e.interfaceClass,this.interfaceSubclass=e.interfaceSubclass,this.interfaceProtocol=e.interfaceProtocol,this.interfaceName=e.interfaceName,this.endpoints=e.endpoints}}class O{constructor(e){this.endpointNumber=null,this.direction=null,this.type=null,this.packetSize=null,this.endpointNumber=e.endpointNumber,this.direction=e.direction,this.type=e.type,this.packetSize=e.packetSize}}class U{constructor(e){this.manufacturerName=null,this.productName=null,this.serialNumber=null,this._configurations=[],this._currentConfiguration=null,this.url=null,this._maxPacketSize=0,this._handle=null,this.usbVersionMajor=e.usbVersionMajor,this.usbVersionMinor=e.usbVersionMinor,this.usbVersionSubminor=e.usbVersionSubminor,this.deviceClass=e.deviceClass,this.deviceSubclass=e.deviceSubclass,this.deviceProtocol=e.deviceProtocol,this.vendorId=e.vendorId,this.productId=e.productId,this.deviceVersionMajor=e.deviceVersionMajor,this.deviceVersionMinor=e.deviceVersionMinor,this.deviceVersionSubminor=e.deviceVersionSubminor,this.manufacturerName=e.manufacturerName,this.productName=e.productName,this.serialNumber=e.serialNumber,this._configurations=e.configurations,this.url=e.url,this._maxPacketSize=e._maxPacketSize,this._handle=e._handle,this._currentConfiguration=e._currentConfiguration}get configurations(){return this._configurations}get configuration(){return this.configurations.find(e=>e.configurationValue===this._currentConfiguration)}get connected(){return k.getConnected(this._handle)}get opened(){return k.getOpened(this._handle)}getEndpoint(e,t){let r=null,n=null;return this.configuration.interfaces.some(i=>(r=i.alternate.endpoints.find(r=>r.endpointNumber===t&&r.direction===e),r&&(n=i),r)),{endpoint:r,iface:n}}setupInvalid(t){if(\"interface\"===t.recipient){const e=255&t.index,r=this.configuration.interfaces.find(t=>t.interfaceNumber===e);if(!r)return\"interface not found\";if(!r.claimed)return\"invalid state\"}else if(\"endpoint\"===t.recipient){const r=15&t.index,n=t.index&e?\"in\":\"out\",i=this.getEndpoint(n,r);if(!i.endpoint)return\"endpoint not found\";if(!i.iface.claimed)return\"invalid state\"}}open(){return new Promise((e,t)=>this.connected?this.opened?e():void k.open(this._handle).then(e).catch(e=>{t(new Error(`open error: ${e}`))}):t(new Error(\"open error: device not found\")))}close(){return new Promise((e,t)=>{if(!this.connected)return t(new Error(\"close error: device not found\"));if(!this.opened)return e();const r=this.configuration.interfaces.map(e=>this.releaseInterface(e.interfaceNumber));Promise.all(r).catch(e=>{}).then(()=>k.close(this._handle)).then(e).catch(e=>{t(new Error(`close error: ${e}`))})})}selectConfiguration(e){return new Promise((t,r)=>{if(e===this._currentConfiguration)return t();if(!this.connected)return r(new Error(\"selectConfiguration error: device not found\"));return this.configurations.find(t=>t.configurationValue===e)?this.opened?void k.selectConfiguration(this._handle,e).then(()=>{this._currentConfiguration=e,this.configuration.interfaces.forEach(e=>e.reset()),t()}).catch(e=>{r(new Error(`selectConfiguration error: ${e}`))}):r(new Error(\"selectConfiguration error: invalid state\")):r(new Error(\"selectConfiguration error: configuration not found\"))})}claimInterface(e){return new Promise((t,r)=>{if(!this.connected)return r(new Error(\"claimInterface error: device not found\"));const n=this.configuration.interfaces.find(t=>t.interfaceNumber===e);return n?this.opened?n.claimed?t():void n.claimInterface().then(t).catch(e=>{r(new Error(`claimInterface error: ${e}`))}):r(new Error(\"claimInterface error: invalid state\")):r(new Error(\"claimInterface error: interface not found\"))})}releaseInterface(e){return new Promise((t,r)=>{if(!this.connected)return r(new Error(\"releaseInterface error: device not found\"));const n=this.configuration.interfaces.find(t=>t.interfaceNumber===e);return n?this.opened?n.claimed?void n.releaseInterface().then(t).catch(e=>{r(new Error(`releaseInterface error: ${e}`))}):t():r(new Error(\"releaseInterface error: invalid state\")):r(new Error(\"releaseInterface error: interface not found\"))})}selectAlternateInterface(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"selectAlternateInterface error: device not found\"));const i=this.configuration.interfaces.find(t=>t.interfaceNumber===e);return i?this.opened&&i.claimed?void i.selectAlternateInterface(t).then(r).catch(e=>{n(new Error(`selectAlternateInterface error: ${e}`))}):n(new Error(\"selectAlternateInterface error: invalid state\")):n(new Error(\"selectAlternateInterface error: interface not found\"))})}controlTransferIn(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"controlTransferIn error: device not found\"));if(!this.opened)return n(new Error(\"controlTransferIn error: invalid state\"));const i=this.setupInvalid(e);if(i)return n(new Error(`controlTransferIn error: ${i}`));k.controlTransferIn(this._handle,e,t).then(r).catch(e=>{n(new Error(`controlTransferIn error: ${e}`))})})}controlTransferOut(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"controlTransferOut error: device not found\"));if(!this.opened)return n(new Error(\"controlTransferOut error: invalid state\"));const i=this.setupInvalid(e);if(i)return n(new Error(`controlTransferOut error: ${i}`));k.controlTransferOut(this._handle,e,t).then(r).catch(e=>{n(new Error(`controlTransferOut error: ${e}`))})})}clearHalt(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"clearHalt error: device not found\"));const i=this.getEndpoint(e,t);return i.endpoint?this.opened&&i.iface.claimed?void k.clearHalt(this._handle,e,t).then(r).catch(e=>{n(new Error(`clearHalt error: ${e}`))}):n(new Error(\"clearHalt error: invalid state\")):n(new Error(\"clearHalt error: endpoint not found\"))})}transferIn(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"transferIn error: device not found\"));const i=this.getEndpoint(\"in\",e);return i.endpoint?\"interrupt\"!==i.endpoint.type&&\"bulk\"!==i.endpoint.type?n(new Error(\"transferIn error: invalid access\")):this.opened&&i.iface.claimed?void k.transferIn(this._handle,e,t).then(r).catch(e=>{n(new Error(`transferIn error: ${e}`))}):n(new Error(\"transferIn error: invalid state\")):n(new Error(\"transferIn error: endpoint not found\"))})}transferOut(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"transferOut error: device not found\"));const i=this.getEndpoint(\"out\",e);return i.endpoint?\"interrupt\"!==i.endpoint.type&&\"bulk\"!==i.endpoint.type?n(new Error(\"transferOut error: invalid access\")):this.opened&&i.iface.claimed?void k.transferOut(this._handle,e,t).then(r).catch(e=>{n(new Error(`transferOut error: ${e}`))}):n(new Error(\"transferOut error: invalid state\")):n(new Error(\"transferOut error: endpoint not found\"))})}isochronousTransferIn(e,t){return new Promise((r,n)=>{if(!this.connected)return n(new Error(\"isochronousTransferIn error: device not found\"));const i=this.getEndpoint(\"in\",e);return i.endpoint?\"isochronous\"!==i.endpoint.type?n(new Error(\"isochronousTransferIn error: invalid access\")):this.opened&&i.iface.claimed?void k.isochronousTransferIn(this._handle,e,t).then(r).catch(e=>{n(new Error(`isochronousTransferIn error: ${e}`))}):n(new Error(\"isochronousTransferIn error: invalid state\")):n(new Error(\"isochronousTransferIn error: endpoint not found\"))})}isochronousTransferOut(e,t,r){return new Promise((n,i)=>{if(!this.connected)return i(new Error(\"isochronousTransferOut error: device not found\"));const s=this.getEndpoint(\"out\",e);return s.endpoint?\"isochronous\"!==s.endpoint.type?i(new Error(\"isochronousTransferOut error: invalid access\")):this.opened&&s.iface.claimed?void k.isochronousTransferOut(this._handle,e,t,r).then(n).catch(e=>{i(new Error(`isochronousTransferOut error: ${e}`))}):i(new Error(\"isochronousTransferOut error: invalid state\")):i(new Error(\"isochronousTransferOut error: endpoint not found\"))})}reset(){return new Promise((e,t)=>this.connected?this.opened?void k.reset(this._handle).then(e).catch(e=>{t(new Error(`reset error: ${e}`))}):t(new Error(\"reset error: invalid state\")):t(new Error(\"reset error: device not found\")))}}const A=200,B=10,x={WEB_UUID:\"3408b638-09a9-47a0-8bfd-a0768815b665\",LIBUSB_DT_BOS:15,LIBUSB_DT_BOS_SIZE:5,LIBUSB_TRANSFER_TYPE_MASK:3,USB_VERSION:513,CAPABILITY_VERSION:256,URL_REQUEST_TYPE:192,URL_REQUEST_INDEX:2,CLEAR_FEATURE:1,ENDPOINT_HALT:0};class $ extends E{constructor(){super(),this.devices={};const e=e=>{this.loadDevice(e,B).then(e=>{if(e){const t=this.getDeviceHandle(e);this.devicetoUSBDevice(t).then(e=>{e&&this.emit($.EVENT_DEVICE_CONNECT,e)})}})},n=e=>{const t=this.getDeviceHandle(e);t&&this.devices[t]&&(delete this.devices[t],this.emit($.EVENT_DEVICE_DISCONNECT,t))};this.on(\"newListener\",r=>{0===this.listenerCount(r)&&(r===$.EVENT_DEVICE_CONNECT?t(\"attach\",e):r===$.EVENT_DEVICE_DISCONNECT&&t(\"detach\",n))}),this.on(\"removeListener\",t=>{0===this.listenerCount(t)&&(t===$.EVENT_DEVICE_CONNECT?r(\"attach\",e):t===$.EVENT_DEVICE_DISCONNECT&&r(\"detach\",n))})}getDeviceHandle(e){return null===e.busNumber||null===e.deviceAddress?null:`${e.busNumber}.${e.deviceAddress}`}serialPromises(e,t){return t.reduce(function(t,r){return t.then(t=>e.call(this,r).then(e=>(e&&t.push(e),t)))}.bind(this),Promise.resolve([]))}serialDevicePromises(e,t,r){return r.reduce(function(r,n){return r.then(r=>e.call(this,t,n).then(e=>(r.push(e),r)))}.bind(this),Promise.resolve([]))}delay(e=A){return new Promise((t,r)=>{setTimeout(t,e)})}retryPromise(e,t=0,r=A){return new Promise((n,i)=>{e().then(n).catch(s=>0===t?i(s):this.delay(r).then(()=>this.retryPromise(e,--t,r)).then(n).catch(e=>i(e)))})}loadDevices(e){this.devices={};let t=n();return e&&(t=this.preFilterDevices(t,e)),this.serialPromises(this.loadDevice,t)}preFilterDevices(e,t){return e.filter(e=>t.some(t=>(!t.vendorId||t.vendorId===e.deviceDescriptor.idVendor)&&(!t.productId||t.productId===e.deviceDescriptor.idProduct)))}loadDevice(e,t=0){try{e.configDescriptor,e.allConfigDescriptors,e.deviceDescriptor}catch(e){return Promise.resolve(null)}return this.getCapabilities(e,t).then(e=>this.getWebCapability(e)).then(t=>this.getWebUrl(e,t).then(t=>{const r=this.getDeviceHandle(e);return this.devices[r]={device:e,url:t},e}))}getCapabilities(e,t){return new Promise((r,n)=>{this.openDevice(e,t).then(()=>{e.getCapabilities((t,n)=>{try{e.close()}catch(e){}if(t)return r([]);r(n)})}).catch(e=>{r([])})})}getWebCapability(e){return e.filter(e=>5===e.type).find(e=>{const t=this.decodeUUID(e.data.slice(1,17)),r=e.data.readUInt16LE(17);return t===x.WEB_UUID&&r===x.CAPABILITY_VERSION})}decodeUUID(e){const t=`00000000${e.readUInt32LE(0).toString(16)}`.slice(-8),r=`0000${e.readUInt16LE(4).toString(16)}`.slice(-4),n=`0000${e.readUInt16LE(6).toString(16)}`.slice(-4),i=[];for(let t=8;t<10;t++)i.push(`00${e.readUInt8(t).toString(16)}`.slice(-2));const s=[];for(let t=10;t<16;t++)s.push(`00${e.readUInt8(t).toString(16)}`.slice(-2));return`${t}-${r}-${n}-${i.join(\"\")}-${s.join(\"\")}`}getWebUrl(e,t,r=!0){return new Promise((n,i)=>{if(!t||!t.data||t.data.byteLength<20)return n(null);const s=t.data.readUInt8(19),o=t.data.readUInt8(20);this.openDevice(e).then(()=>{e.controlTransfer(x.URL_REQUEST_TYPE,s,o,x.URL_REQUEST_INDEX,64,(t,s)=>{if(e.close(),t)return r?n(null):i(t);let o=s.toString(\"utf8\",3);const c=s.readUInt8(2);0===c&&(o=\"http://\"+o),1===c&&(o=\"https://\"+o),n(o)})}).catch(e=>{n(\"\")})})}devicetoUSBDevice(e){return new Promise((t,r)=>{const n=this.devices[e].device,i=this.devices[e].url;let s=null,o=null,c=null;try{o=n.configDescriptor,s=n.allConfigDescriptors,c=n.deviceDescriptor}catch(e){return t(null)}return s?this.serialDevicePromises(this.configToUSBConfiguration,n,s).then(e=>{if(!c)return t(new U({_handle:this.getDeviceHandle(n),url:i,configurations:e}));const r=this.decodeVersion(c.bcdDevice),s=this.decodeVersion(c.bcdUSB);let a=null,u=null;return this.getStringDescriptor(n,c.iManufacturer).then(e=>(a=e,this.getStringDescriptor(n,c.iProduct))).then(e=>(u=e,this.getStringDescriptor(n,c.iSerialNumber))).then(l=>{const d={_handle:this.getDeviceHandle(n),_maxPacketSize:c.bMaxPacketSize0,url:i,deviceClass:c.bDeviceClass,deviceSubclass:c.bDeviceSubClass,deviceProtocol:c.bDeviceProtocol,productId:c.idProduct,vendorId:c.idVendor,deviceVersionMajor:r.major,deviceVersionMinor:r.minor,deviceVersionSubminor:r.sub,usbVersionMajor:s.major,usbVersionMinor:s.minor,usbVersionSubminor:s.sub,manufacturerName:a,productName:u,serialNumber:l,configurations:e,_currentConfiguration:o.bConfigurationValue};return t(new U(d))})}).catch(e=>{t(null)}):t(null)})}decodeVersion(e){const t=`0000${e.toString(16)}`.slice(-4);return{major:parseInt(t.substr(0,2),null),minor:parseInt(t.substr(2,1),null),sub:parseInt(t.substr(3,1),null)}}getStringDescriptor(e,t){return new Promise(r=>{this.openDevice(e).then(()=>{e.getStringDescriptor(t,(t,n)=>{e.close(),r(t?\"\":n.toString())})}).catch(e=>{r(\"\")})})}bufferToDataView(e){const t=new Uint8Array(e).buffer;return new DataView(t)}bufferSourceToBuffer(e){const t=ArrayBuffer.isView(e)?e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength):e;return Buffer.from(t)}getEndpoint(t,r,n){let s=null;const o=n|(\"in\"===r?e:i);return t.interfaces.some(e=>{const t=e.endpoint(o);return!!t&&(s=t,!0)}),s}getInEndpoint(e,t){const r=this.getEndpoint(e,\"in\",t);if(r&&\"in\"===r.direction)return r}getOutEndpoint(e,t){const r=this.getEndpoint(e,\"out\",t);if(r&&\"out\"===r.direction)return r}endpointToUSBEndpoint(t){const r=t.bEndpointAddress&e?\"in\":\"out\";return new O({endpointNumber:t.bEndpointAddress^(\"in\"===r?e:i),direction:r,type:(t.bmAttributes&x.LIBUSB_TRANSFER_TYPE_MASK)===s?\"bulk\":(t.bmAttributes&x.LIBUSB_TRANSFER_TYPE_MASK)===o?\"interrupt\":\"isochronous\",packetSize:t.wMaxPacketSize})}interfaceToUSBAlternateInterface(e,t){return this.getStringDescriptor(e,t.iInterface).then(e=>new V({alternateSetting:t.bAlternateSetting,interfaceClass:t.bInterfaceClass,interfaceSubclass:t.bInterfaceSubClass,interfaceProtocol:t.bInterfaceProtocol,interfaceName:e,endpoints:t.endpoints.map(this.endpointToUSBEndpoint)}))}interfacesToUSBInterface(e,t){return this.serialDevicePromises(this.interfaceToUSBAlternateInterface,e,t).then(r=>new L({_handle:this.getDeviceHandle(e),interfaceNumber:t[0].bInterfaceNumber,alternates:r}))}configToUSBConfiguration(e,t){return this.getStringDescriptor(e,t.iConfiguration).then(r=>{const n=t.interfaces||[];return this.serialDevicePromises(this.interfacesToUSBInterface,e,n).then(e=>new P({configurationValue:t.bConfigurationValue,configurationName:r,interfaces:e}))})}getDevice(e){return this.devices[e]?this.devices[e].device:null}controlTransferParamsToType(e,t){return(\"device\"===e.recipient?c:\"interface\"===e.recipient?a:\"endpoint\"===e.recipient?u:l)|(\"standard\"===e.requestType?d:\"class\"===e.requestType?h:f)|t}openDevice(e,t=0){return this.retryPromise(()=>new Promise((t,r)=>{try{e.open()}catch(e){return r(e)}t()}),t)}getConnected(e){return null!==this.getDevice(e)}getOpened(e){const t=this.getDevice(e);return!!t&&null!==t.interfaces}listUSBDevices(e){return this.loadDevices(e).then(()=>this.serialPromises(this.devicetoUSBDevice,Object.keys(this.devices)))}open(e){const t=this.getDevice(e);return this.openDevice(t)}close(e){return new Promise((t,r)=>{this.getDevice(e).close(),t()})}selectConfiguration(e,t){return new Promise((r,n)=>{this.getDevice(e).setConfiguration(t,e=>{if(e)return n(e);r()})})}claimInterface(e,t){return new Promise((r,n)=>{this.getDevice(e).interface(t).claim(),r()})}releaseInterface(e,t){return new Promise((r,n)=>{this.getDevice(e).interface(t).release(!0,e=>{if(e)return n(e);r()})})}selectAlternateInterface(e,t,r){return new Promise((n,i)=>{this.getDevice(e).interface(t).setAltSetting(r,e=>{if(e)return i(e);n()})})}controlTransferIn(t,r,n){return new Promise((i,s)=>{const o=this.getDevice(t),c=this.controlTransferParamsToType(r,e);o.controlTransfer(c,r.request,r.value,r.index,n,(e,t)=>{if(e)return e.errno===v?i({status:\"stall\"}):e.errno===p?i({status:\"babble\"}):s(e);i({data:this.bufferToDataView(t),status:\"ok\"})})})}controlTransferOut(e,t,r){return new Promise((n,s)=>{const o=this.getDevice(e),c=this.controlTransferParamsToType(t,i),a=r?this.bufferSourceToBuffer(r):new Buffer(0);o.controlTransfer(c,t.request,t.value,t.index,a,e=>{if(e)return e.errno===v?n({bytesWritten:0,status:\"stall\"}):s(e);n({bytesWritten:a.byteLength,status:\"ok\"})})})}clearHalt(t,r,n){return new Promise((s,o)=>{const c=this.getDevice(t),a=n|(\"in\"===r?e:i);c.controlTransfer(u,x.CLEAR_FEATURE,x.ENDPOINT_HALT,a,0,e=>{if(e)return o(e);s()})})}transferIn(e,t,r){return new Promise((n,i)=>{const s=this.getDevice(e);this.getInEndpoint(s,t).transfer(r,(e,t)=>{if(e)return e.errno===v?n({status:\"stall\"}):e.errno===p?n({status:\"babble\"}):i(e);n({data:this.bufferToDataView(t),status:\"ok\"})})})}transferOut(e,t,r){return new Promise((n,i)=>{const s=this.getDevice(e),o=this.getOutEndpoint(s,t),c=this.bufferSourceToBuffer(r);o.transfer(c,e=>{if(e)return e.errno===v?n({bytesWritten:0,status:\"stall\"}):i(e);n({bytesWritten:c.byteLength,status:\"ok\"})})})}isochronousTransferIn(e,t,r){return new Promise((e,t)=>{t(\"isochronousTransferIn error: method not implemented\")})}isochronousTransferOut(e,t,r,n){return new Promise((e,t)=>{t(\"isochronousTransferOut error: method not implemented\")})}reset(e){return new Promise((t,r)=>{this.getDevice(e).reset(e=>{if(e)return r(e);t()})})}}$.EVENT_DEVICE_CONNECT=\"connect\",$.EVENT_DEVICE_DISCONNECT=\"disconnect\";const k=new $;class M{constructor(){this.bubbles=!1,this.cancelable=!1,this.cancelBubble=!1,this.composed=!1,this.defaultPrevented=!1,this.eventPhase=0,this.isTrusted=!0,this.returnValue=!0}composedPath(){return[]}initEvent(e,t,r){this.type=e,this.bubbles=t,this.cancelable=r}preventDefault(){this.defaultPrevented=!0}stopImmediatePropagation(){}stopPropagation(){}}class R extends M{constructor(e,t,r){super(),this.initEvent(t,r.bubbles,r.cancelable),this.target=e,this.device=r.device}}class j extends y{constructor(e){super(),this.allowedDevices=[],e=e||{},this.devicesFound=e.devicesFound;const t=e=>{if(this.replaceAllowedDevice(e)){const t=new R(this,\"connect\",{device:e});this.dispatchEvent(t),this.onconnect&&this.onconnect(t)}},r=e=>{const t=this.allowedDevices.find(t=>t._handle===e);if(t){const e=new R(this,\"disconnect\",{device:t});this.dispatchEvent(e),this.ondisconnect&&this.ondisconnect(e)}};this.on(\"newListener\",e=>{0===this.listenerCount(e)&&(\"connect\"===e?k.addListener($.EVENT_DEVICE_CONNECT,t):\"disconnect\"===e&&k.addListener($.EVENT_DEVICE_DISCONNECT,r))}),this.on(\"removeListener\",e=>{0===this.listenerCount(e)&&(\"connect\"===e?k.removeListener($.EVENT_DEVICE_CONNECT,t):\"disconnect\"===e&&k.removeListener($.EVENT_DEVICE_DISCONNECT,r))})}set onconnect(e){this._onconnect&&this.removeEventListener(\"connect\",this._onconnect),this._onconnect=e,this.addEventListener(\"connect\",this._onconnect)}set ondisconnect(e){this._ondisconnect&&this.removeEventListener(\"disconnect\",this._ondisconnect),this._ondisconnect=e,this.addEventListener(\"disconnect\",this._ondisconnect)}replaceAllowedDevice(e){for(const t in this.allowedDevices)if(this.isSameDevice(e,this.allowedDevices[t]))return this.allowedDevices[t]=e,!0;return!1}isSameDevice(e,t){return e.productId===t.productId&&e.vendorId===t.vendorId&&e.serialNumber===t.serialNumber}filterDevice(e,t){return e.filters.some(e=>{if(e.vendorId&&e.vendorId!==t.vendorId)return!1;if(e.productId&&e.productId!==t.productId)return!1;if(e.classCode){if(t.configuration.interfaces.some(t=>(!e.classCode||e.classCode===t.alternate.interfaceClass)&&((!e.subclassCode||e.subclassCode===t.alternate.interfaceSubclass)&&(!e.protocolCode||e.protocolCode===t.alternate.interfaceProtocol))))return!0}return(!e.classCode||e.classCode===t.deviceClass)&&((!e.subclassCode||e.subclassCode===t.deviceSubclass)&&((!e.protocolCode||e.protocolCode===t.deviceProtocol)&&(!e.serialNumber||e.serialNumber===t.serialNumber)))})}getDevices(){const e=this.allowedDevices.map(e=>({vendorId:e.vendorId||void 0,productId:e.productId||void 0,classCode:e.deviceClass||void 0,subclassCode:e.deviceSubclass||void 0,protocolCode:e.deviceProtocol||void 0,serialNumber:e.serialNumber||void 0}));return k.listUSBDevices(e).then(e=>{return e.filter(e=>{if(!e.connected)return!1;for(const t in this.allowedDevices)if(this.isSameDevice(e,this.allowedDevices[t]))return!0;return!1})})}requestDevice(e){return new Promise((t,r)=>{if(!e)return r(new TypeError(\"requestDevice error: 1 argument required, but only 0 present\"));if(e.constructor!=={}.constructor)return r(new TypeError(\"requestDevice error: parameter 1 (options) is not an object\"));if(!e.filters)return r(new TypeError(\"requestDevice error: required member filters is undefined\"));if(e.filters.constructor!==[].constructor)return r(new TypeError(\"requestDevice error: the provided value cannot be converted to a sequence\"));return e.filters.every(e=>e.protocolCode&&!e.subclassCode?(r(new TypeError(\"requestDevice error: subclass code is required\")),!1):!(e.subclassCode&&!e.classCode)||(r(new TypeError(\"requestDevice error: class code is required\")),!1))?k.listUSBDevices(e.filters).then(n=>{if(0===(n=n.filter(t=>this.filterDevice(e,t))).length)return r(new Error(\"requestDevice error: no devices found\"));function i(e){this.replaceAllowedDevice(e)||this.allowedDevices.push(e),t(e)}return this.devicesFound?this.devicesFound(n).then(e=>(e||r(new Error(\"selected device not found\")),i.call(this,e))):i.call(this,n[0])}).catch(e=>{r(new Error(`requestDevice error: ${e}`))}):void 0})}}const q=new j;export{j as USB,$ as USBAdapter,k as adapter,q as usb};\n","'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n// tslint:disable:ban-types\n\n/**\n * @hidden\n */\nexport interface EventListeners<T> {\n    newListener: keyof T;\n    removeListener: keyof T;\n}\n\n/**\n * @hidden\n */\nexport interface TypedDispatcher<T> {\n    addEventListener<K extends keyof T>(type: K, listener: (this: this, event: T[K]) => void): void;\n    addEventListener<E extends keyof EventListeners<T>>(type: E, listener: (this: this, event: EventListeners<T>[E]) => void): void;\n    removeEventListener<K extends keyof T>(type: K, callback: (this: this, event: T[K]) => void): void;\n    removeEventListener<E extends keyof EventListeners<T>>(type: E, callback: (this: this, event: EventListeners<T>[E]) => void): void;\n    dispatchEvent<K extends keyof T>(event: T[K]): boolean;\n    addListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    addListener<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    on<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    on<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    once<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    once<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    prependListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependOnceListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    removeAllListeners<K extends keyof T>(event?: K): this;\n    removeAllListeners<E extends keyof EventListeners<T>>(event?: E): this;\n    listeners<K extends keyof T>(event: K): Array<Function>;\n    listeners<E extends keyof EventListeners<T>>(event: EventListeners<T>[E]): Array<Function>;\n    emit<K extends keyof T>(event: K, data: T[K]): boolean;\n    eventNames<K extends keyof T, E extends keyof EventListeners<T>>(): Array<K | E>;\n    listenerCount<K extends keyof T>(type: K): number;\n    listenerCount<E extends keyof EventListeners<T>>(type: EventListeners<T>[E]): number;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n}\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter implements EventTarget {\n\n    private isEventListenerObject = (listener: EventListenerOrEventListenerObject): listener is EventListenerObject => (listener as EventListenerObject).handleEvent !== undefined;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject | null) {\n        if (listener) {\n            const handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;\n            super.addListener(type, handler);\n        }\n    }\n\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null) {\n        if (callback) {\n            const handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;\n            super.removeListener(type, handler);\n        }\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return super.emit(event.type, event);\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBInterface } from \"./interface\";\nimport { W3CUSBConfiguration } from \"./interfaces\";\n\n/**\n * USB Configuration\n */\nexport class USBConfiguration implements W3CUSBConfiguration {\n\n    /**\n     * The value of this configuration\n     */\n    public readonly configurationValue: number = null;\n\n    /**\n     * The name of this configuration\n     */\n    public readonly configurationName?: string = null;\n\n    /**\n     * The array of interfaces on this configuration\n     */\n    public readonly interfaces: Array<USBInterface> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBConfiguration>) {\n        this.configurationValue = init.configurationValue;\n        this.configurationName = init.configurationName;\n        this.interfaces = init.interfaces;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { adapter } from \"./adapter\";\nimport { W3CUSBInterface } from \"./interfaces\";\nimport { USBAlternateInterface } from \"./alternate\";\n\n/**\n * USB Interface\n */\nexport class USBInterface implements W3CUSBInterface {\n\n    /**\n     * Number of this interface\n     */\n    public readonly interfaceNumber: number = null;\n\n    /**\n     * Array of alternate interfaces\n     */\n    public readonly alternates: Array<USBAlternateInterface> = [];\n\n    private _claimed: boolean = false;\n    /**\n     * Whether this interface is claimed\n     */\n    public get claimed(): boolean {\n        return this._claimed;\n    }\n\n    private _currentAlternate: number = 0;\n    /**\n     * Return the current alternate interface\n     */\n    public get alternate(): USBAlternateInterface {\n        return this.alternates.find(alternate => alternate.alternateSetting === this._currentAlternate);\n    }\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBInterface>) {\n        this.interfaceNumber = init.interfaceNumber;\n        this.alternates = init.alternates;\n\n        this._handle = init._handle;\n    }\n\n    /**\n     * @hidden\n     */\n    public selectAlternateInterface(alternateSetting: number): Promise<void> {\n        return adapter.selectAlternateInterface(this._handle, this.interfaceNumber, alternateSetting)\n        .then(() => {\n            this._currentAlternate = alternateSetting;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public claimInterface(): Promise<void> {\n        return adapter.claimInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = true;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public releaseInterface(): Promise<void> {\n        return adapter.releaseInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = false;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public reset() {\n        this._currentAlternate = 0;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBEndpoint } from \"./endpoint\";\nimport { W3CUSBAlternateInterface } from \"./interfaces\";\n\n/**\n * USB Alternate Interface\n */\nexport class USBAlternateInterface implements W3CUSBAlternateInterface {\n\n    /**\n     * The alternate setting for this interface\n     */\n    public readonly alternateSetting: number = null;\n\n    /**\n     * The class of this interface\n     */\n    public readonly interfaceClass: number = null;\n\n    /**\n     * The sub class of this interface\n     */\n    public readonly interfaceSubclass: number = null;\n\n    /**\n     * The protocol of this interface\n     */\n    public readonly interfaceProtocol: number = null;\n\n    /**\n     * The name of this interface\n     */\n    public readonly interfaceName?: string = null;\n\n    /**\n     * The array of endpoints on this interface\n     */\n    public readonly endpoints: Array<USBEndpoint> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBAlternateInterface>) {\n        this.alternateSetting = init.alternateSetting;\n        this.interfaceClass = init.interfaceClass;\n        this.interfaceSubclass = init.interfaceSubclass;\n        this.interfaceProtocol = init.interfaceProtocol;\n        this.interfaceName = init.interfaceName;\n        this.endpoints = init.endpoints;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { W3CUSBEndpoint } from \"./interfaces\";\n\n/**\n * USB Endpoint\n */\nexport class USBEndpoint implements W3CUSBEndpoint {\n\n    /**\n     * The number of this endpoint\n     */\n    public readonly endpointNumber: number = null;\n\n    /**\n     * The direction of this endpoint\n     */\n    public readonly direction: USBDirection = null;\n\n    /**\n     * The type of this endpoint\n     */\n    public readonly type: USBEndpointType = null;\n\n    /**\n     * The packet size of this endpoint\n     */\n    public readonly packetSize: number = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBEndpoint>) {\n        this.endpointNumber = init.endpointNumber;\n        this.direction = init.direction;\n        this.type = init.type;\n        this.packetSize = init.packetSize;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { LIBUSB_ENDPOINT_IN } from \"usb\";\nimport { USBConfiguration } from \"./configuration\";\nimport { adapter } from \"./adapter\";\nimport { W3CUSBDevice } from \"./interfaces\";\n\n/**\n * @hidden\n */\ninterface EndpointResult {\n    endpoint: USBEndpoint;\n    iface: USBInterface;\n}\n\n/**\n * USB Device\n */\nexport class USBDevice implements W3CUSBDevice {\n\n    /**\n     * Major USB protocol version supported by the device\n     */\n    public readonly usbVersionMajor: number;\n\n    /**\n     * Minor USB protocol version supported by the device\n     */\n    public readonly usbVersionMinor: number;\n\n    /**\n     * Sub minor USB protocol version supported by the device\n     */\n    public readonly usbVersionSubminor: number;\n\n    /**\n     * Communication interface class of the device\n     */\n    public readonly deviceClass: number;\n\n    /**\n     * Communication interface sub class of the device\n     */\n    public readonly deviceSubclass: number;\n\n    /**\n     * Communication interface protocol of the device\n     */\n    public readonly deviceProtocol: number;\n\n    /**\n     * Vendor Identifier of the device\n     */\n    public readonly vendorId: number;\n\n    /**\n     * Product Identifier of the device\n     */\n    public readonly productId: number;\n\n    /**\n     * Major version of the device\n     */\n    public readonly deviceVersionMajor: number;\n\n    /**\n     * Minor version of the device\n     */\n    public readonly deviceVersionMinor: number;\n\n    /**\n     * Sub minor version of the device\n     */\n    public readonly deviceVersionSubminor: number;\n\n    /**\n     * Manufacturer name of the device\n     */\n    public readonly manufacturerName: string = null;\n\n    /**\n     * Product name of the device\n     */\n    public readonly productName: string = null;\n\n    /**\n     * Serial number of the device\n     */\n    public readonly serialNumber: string = null;\n\n    private _configurations: Array<USBConfiguration> = [];\n    /**\n     * List of configurations supported by the device\n     */\n    public get configurations(): Array<USBConfiguration> {\n        return this._configurations;\n    }\n\n    /**\n     * @hidden\n     */\n    public _currentConfiguration: number = null;\n    /**\n     * The currently selected configuration\n     */\n    public get configuration(): USBConfiguration {\n        return this.configurations.find(configuration => configuration.configurationValue === this._currentConfiguration);\n    }\n\n    /**\n     * @hidden\n     */\n    public get connected(): boolean {\n        return adapter.getConnected(this._handle);\n    }\n\n    /**\n     * A flag indicating whether the device is open\n     */\n    public get opened(): boolean {\n        return adapter.getOpened(this._handle);\n    }\n\n    /**\n     * URL advertised by the device (not part of Web USB specification)\n     */\n    public readonly url: string = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _maxPacketSize: number = 0;\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBDevice>) {\n        this.usbVersionMajor = init.usbVersionMajor;\n        this.usbVersionMinor = init.usbVersionMinor;\n        this.usbVersionSubminor = init.usbVersionSubminor;\n        this.deviceClass = init.deviceClass;\n        this.deviceSubclass = init.deviceSubclass;\n        this.deviceProtocol = init.deviceProtocol;\n        this.vendorId = init.vendorId;\n        this.productId = init.productId;\n        this.deviceVersionMajor = init.deviceVersionMajor;\n        this.deviceVersionMinor = init.deviceVersionMinor;\n        this.deviceVersionSubminor = init.deviceVersionSubminor;\n\n        this.manufacturerName = init.manufacturerName;\n        this.productName = init.productName;\n        this.serialNumber = init.serialNumber;\n\n        this._configurations = init.configurations;\n\n        this.url = init.url;\n        this._maxPacketSize = init._maxPacketSize;\n        this._handle = init._handle;\n        this._currentConfiguration = init._currentConfiguration;\n    }\n\n    private getEndpoint(direction: USBDirection, endpointNumber: number): EndpointResult {\n        let endpoint = null;\n        let iface = null;\n\n        this.configuration.interfaces.some(usbInterface => {\n            endpoint = usbInterface.alternate.endpoints.find(usbEndpoint => {\n                return (usbEndpoint.endpointNumber === endpointNumber && usbEndpoint.direction === direction);\n            });\n\n            if (endpoint) iface = usbInterface;\n            return endpoint;\n        });\n\n        return {\n            endpoint: endpoint,\n            iface: iface\n        };\n    }\n\n    private setupInvalid(setup: USBControlTransferParameters): string {\n        if (setup.recipient === \"interface\") {\n            const interfaceNumber = setup.index & 0xff; // lower 8 bits\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return \"interface not found\";\n            if (!iface.claimed) return \"invalid state\";\n\n        } else if (setup.recipient === \"endpoint\") {\n            const endpointNumber = setup.index & 0x0f; // lower 4 bits\n            const direction = setup.index & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return \"endpoint not found\";\n            if (!result.iface.claimed) return \"invalid state\";\n        }\n    }\n\n    /**\n     * Opens the device\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"open error: device not found\"));\n            if (this.opened) return resolve();\n\n            adapter.open(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`open error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Closes the device\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"close error: device not found\"));\n            if (!this.opened) return resolve();\n\n            const releaseInterfacePromises = this.configuration.interfaces.map(\n                iface => this.releaseInterface(iface.interfaceNumber));\n\n            Promise.all(releaseInterfacePromises)\n            .catch(_error => { /* Ignore */ })\n            .then(() => adapter.close(this._handle))\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`close error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select a configuration for the device\n     * @param configurationValue The configuration value to select\n     * @returns Promise containing any error\n     */\n    public selectConfiguration(configurationValue: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            // Don't change the configuration if it's already set correctly\n            if (configurationValue === this._currentConfiguration) return resolve();\n\n            if (!this.connected) return reject(new Error(\"selectConfiguration error: device not found\"));\n\n            const config =  this.configurations.find(configuration => configuration.configurationValue === configurationValue);\n            if (!config) return reject(new Error(\"selectConfiguration error: configuration not found\"));\n\n            if (!this.opened) return reject(new Error(\"selectConfiguration error: invalid state\"));\n\n            adapter.selectConfiguration(this._handle, configurationValue)\n            .then(() => {\n                this._currentConfiguration = configurationValue;\n                this.configuration.interfaces.forEach(iface => iface.reset());\n                resolve();\n            })\n            .catch(error => {\n                reject(new Error(`selectConfiguration error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Claim an interface on the device\n     * @param interfaceNumber The interface number to claim\n     * @returns Promise containing any error\n     */\n    public claimInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"claimInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"claimInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"claimInterface error: invalid state\"));\n            if (iface.claimed) return resolve();\n\n            iface.claimInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`claimInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Release an interface on the device\n     * @param interfaceNumber The interface number to release\n     * @returns Promise containing any error\n     */\n    public releaseInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"releaseInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"releaseInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"releaseInterface error: invalid state\"));\n            if (!iface.claimed) return resolve();\n\n            iface.releaseInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`releaseInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select an alternate interface on the device\n     * @param interfaceNumber The interface number to change\n     * @param alternateSetting The alternate setting to use\n     * @returns Promise containing any error\n     */\n    public selectAlternateInterface(interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"selectAlternateInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"selectAlternateInterface error: interface not found\"));\n\n            if (!this.opened || !iface.claimed) return reject(new Error(\"selectAlternateInterface error: invalid state\"));\n\n            iface.selectAlternateInterface(alternateSetting)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`selectAlternateInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer in from the device\n     *\n     * @param setup The USB control transfer parameters\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferIn(setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferIn error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferIn error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferIn error: ${setupError}`));\n\n            adapter.controlTransferIn(this._handle, setup, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param setup The USB control transfer parameters\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferOut(setup: USBControlTransferParameters, data?: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferOut error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferOut error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferOut error: ${setupError}`));\n\n            adapter.controlTransferOut(this._handle, setup, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Clear a halt condition on an endpoint\n     *\n     * @param direction The direction of the endpoint to clear\n     * @param endpointNumber The endpoint number of the endpoint to clear\n     * @returns Promise containing any error\n     */\n    public clearHalt(direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"clearHalt error: device not found\"));\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"clearHalt error: endpoint not found\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"clearHalt error: invalid state\"));\n\n            adapter.clearHalt(this._handle, direction, endpointNumber)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`clearHalt error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer in from the device\n     *\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public transferIn(endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferIn error: invalid state\"));\n\n            adapter.transferIn(this._handle, endpointNumber, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public transferOut(endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferOut error: invalid state\"));\n\n            adapter.transferOut(this._handle, endpointNumber, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer in from the device\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferIn(endpointNumber: number, packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferIn error: invalid state\"));\n\n            adapter.isochronousTransferIn(this._handle, endpointNumber, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer out to the device\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferOut(endpointNumber: number, data: BufferSource, packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferOut error: invalid state\"));\n\n            adapter.isochronousTransferOut(this._handle, endpointNumber, data, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Soft reset the device\n     * @returns Promise containing any error\n     */\n    public reset(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"reset error: device not found\"));\n            if (!this.opened) return reject(new Error(\"reset error: invalid state\"));\n\n            adapter.reset(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`reset error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport {\n    getDeviceList,\n    Device,\n    Endpoint,\n    InEndpoint,\n    OutEndpoint,\n    ConfigDescriptor,\n    InterfaceDescriptor,\n    on,\n    removeListener,\n    LIBUSB_ENDPOINT_IN,\n    LIBUSB_ENDPOINT_OUT,\n    LIBUSB_TRANSFER_OVERFLOW,\n    LIBUSB_TRANSFER_STALL,\n    LIBUSB_TRANSFER_TYPE_INTERRUPT,\n    LIBUSB_TRANSFER_TYPE_BULK,\n    LIBUSB_RECIPIENT_DEVICE,\n    LIBUSB_RECIPIENT_INTERFACE,\n    LIBUSB_RECIPIENT_ENDPOINT,\n    LIBUSB_RECIPIENT_OTHER,\n    LIBUSB_REQUEST_TYPE_STANDARD,\n    LIBUSB_REQUEST_TYPE_CLASS,\n    LIBUSB_REQUEST_TYPE_VENDOR,\n    EndpointDescriptor,\n    DeviceDescriptor,\n    Capability\n} from \"usb\";\nimport { USBConfiguration } from \"./configuration\";\nimport { USBInterface } from \"./interface\";\nimport { USBAlternateInterface } from \"./alternate\";\nimport { USBEndpoint } from \"./endpoint\";\nimport { USBDevice } from \"./device\";\n\n/**\n * @hidden\n */\nconst DEFAULT_DELAY_TIMEOUT = 200;\n/**\n * @hidden\n */\nconst DEFAULT_RETRY_COUNT = 10;\n\n/**\n * @hidden\n */\nconst CONSTANTS = {\n    WEB_UUID: \"3408b638-09a9-47a0-8bfd-a0768815b665\",\n    LIBUSB_DT_BOS: 0x0f,\n    LIBUSB_DT_BOS_SIZE: 0x05,\n    LIBUSB_TRANSFER_TYPE_MASK: 0x03,\n    USB_VERSION: 0x201,\n    CAPABILITY_VERSION: 0x0100,\n    URL_REQUEST_TYPE: 0xC0,\n    URL_REQUEST_INDEX: 0x02,\n    CLEAR_FEATURE: 0x01,\n    ENDPOINT_HALT: 0x00\n};\n\n/**\n * @hidden\n */\nexport interface Adapter {\n    getConnected(handle: string): boolean;\n    getOpened(handle: string): boolean;\n\n    listUSBDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<USBDevice>>;\n    open(handle: string): Promise<void>;\n    close(handle: string): Promise<void>;\n    selectConfiguration(handle: string, id: number): Promise<void>;\n    claimInterface(handle: string, address: number): Promise<void>;\n    releaseInterface(handle: string, address: number): Promise<void>;\n    selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void>;\n    controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult>;\n    controlTransferOut(handle: string, setup: USBControlTransferParameters, data: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult>;\n    clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void>;\n    transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult>;\n    transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult>;\n    isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult>;\n    isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult>;\n    reset(handle: string): Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport class USBAdapter extends EventEmitter implements Adapter {\n\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    // Maintains a live list of connected Web USB devices\n    private devices: { [key: string]: { device: Device, url: string }} = {};\n\n    constructor() {\n        super();\n\n        const attachCallback = device => {\n            this.loadDevice(device, DEFAULT_RETRY_COUNT)\n            .then(loadedDevice => {\n                if (loadedDevice) {\n                    const handle = this.getDeviceHandle(loadedDevice);\n                    this.devicetoUSBDevice(handle)\n                    .then(usbDevice => {\n                        if (usbDevice) {\n                            this.emit(USBAdapter.EVENT_DEVICE_CONNECT, usbDevice);\n                        }\n                    });\n                }\n            });\n        };\n\n        const detachCallback = device => {\n            const handle = this.getDeviceHandle(device);\n\n            if (handle && this.devices[handle]) {\n                delete this.devices[handle];\n                this.emit(USBAdapter.EVENT_DEVICE_DISCONNECT, handle);\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                on(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                on(\"detach\", detachCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                removeListener(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                removeListener(\"detach\", detachCallback);\n            }\n        });\n    }\n\n    private getDeviceHandle(device: Device): string {\n        if (device.busNumber === null || device.deviceAddress === null) {\n            return null;\n        }\n\n        return `${device.busNumber}.${device.deviceAddress}`;\n    }\n\n    private serialPromises<T>(task: (param: any) => Promise<T>, params: Array<any>): Promise<Array<T>> {\n        function reducer(chain, param) {\n            return chain\n            .then(results => {\n                return task.call(this, param)\n                .then(result => {\n                    if (result) {\n                        results.push(result);\n                    }\n                    return results;\n                });\n            });\n        }\n        return params.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private serialDevicePromises<T>(task: (device: Device, descriptor: any) => Promise<T>, device: Device, descriptors: Array<any>): Promise<Array<T>> {\n        function reducer(chain, descriptor) {\n            return chain\n            .then(results => {\n                return task.call(this, device, descriptor)\n                .then(result => {\n                    results.push(result);\n                    return results;\n                });\n            });\n        }\n        return descriptors.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private delay(timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    private retryPromise(fn: () => Promise<any>, retries: number = 0, timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, reject) => {\n            fn()\n            .then(resolve)\n            .catch(error => {\n                if (retries === 0) {\n                    return reject(error);\n                }\n\n                return this.delay(timeout)\n                .then(() => this.retryPromise(fn, --retries, timeout))\n                .then(resolve)\n                .catch(retryError => reject(retryError));\n            });\n        });\n    }\n\n    private loadDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<Device>> {\n        // Reset device cache\n        this.devices = {};\n        let devices = getDeviceList();\n\n        if (preFilters) {\n            // Pre-filter devices\n            devices = this.preFilterDevices(devices, preFilters);\n        }\n\n        return this.serialPromises(this.loadDevice, devices);\n    }\n\n    private preFilterDevices(devices: Array<Device>, preFilters: Array<USBDeviceFilter>): Array<Device> {\n        // Just pre-filter on vid/pid\n        return devices.filter(device => preFilters.some(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.deviceDescriptor.idVendor) return false;\n\n            // Product\n            if (filter.productId && filter.productId !== device.deviceDescriptor.idProduct) return false;\n\n            // Ignore serial number for node-usb as it requires device connection\n            return true;\n        }));\n    }\n\n    private loadDevice(device: Device, retries: number = 0): Promise<Device> {\n\n        // Early guard against unsupported USB devices\n        try {\n            // tslint:disable-next-line:no-unused-expression\n            device.configDescriptor;\n            // tslint:disable-next-line:no-unused-expression\n            device.allConfigDescriptors;\n            // tslint:disable-next-line:no-unused-expression\n            device.deviceDescriptor;\n        } catch (_error) {\n            return Promise.resolve(null);\n        }\n\n        return this.getCapabilities(device, retries)\n        .then(capabilities => this.getWebCapability(capabilities))\n        .then(capability => {\n            return this.getWebUrl(device, capability)\n            .then(url => {\n                const handle = this.getDeviceHandle(device);\n                this.devices[handle] = {\n                    device: device,\n                    url: url\n                };\n                return device;\n            });\n        });\n    }\n\n    private getCapabilities(device: Device, retries: number): Promise<Array<Capability>> {\n        return new Promise((resolve, _reject) => {\n\n            this.openDevice(device, retries)\n            .then(() => {\n                device.getCapabilities((error, capabilities) => {\n                    try {\n                        // Older macs (<10.12) can error with some host devices during a close at this point\n                        device.close();\n                    // tslint:disable-next-line:no-empty\n                    } catch (_error) {}\n                    if (error) return resolve([]);\n                    resolve(capabilities);\n                });\n            })\n            .catch(_error => {\n                resolve([]);\n            });\n        });\n    }\n\n    private getWebCapability(capabilities: Array<Capability>): Capability {\n        const platformCapabilities = capabilities.filter(capability => {\n            return capability.type === 5;\n        });\n\n        const webCapability = platformCapabilities.find(capability => {\n            const uuid = this.decodeUUID(capability.data.slice(1, 17));\n            const version = capability.data.readUInt16LE(17);\n            return uuid === CONSTANTS.WEB_UUID && version === CONSTANTS.CAPABILITY_VERSION;\n        });\n\n        return webCapability;\n    }\n\n    private decodeUUID(buffer: Buffer): string {\n        const data1 = `00000000${buffer.readUInt32LE(0).toString(16)}`.slice(-8);\n        const data2 = `0000${buffer.readUInt16LE(4).toString(16)}`.slice(-4);\n        const data3 = `0000${buffer.readUInt16LE(6).toString(16)}`.slice(-4);\n\n        const data4 = [];\n        for (let i = 8; i < 10; i ++) {\n            data4.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        const data5 = [];\n        for (let i = 10; i < 16; i ++) {\n            data5.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        return `${data1}-${data2}-${data3}-${data4.join(\"\")}-${data5.join(\"\")}`;\n    }\n\n    private getWebUrl(device: Device, capability: Capability, suppressErrors: boolean = true): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (!capability || !capability.data || capability.data.byteLength < 20) return resolve(null);\n\n            const vendor = capability.data.readUInt8(19);\n            const page = capability.data.readUInt8(20);\n\n            this.openDevice(device)\n            .then(() => {\n                device.controlTransfer(CONSTANTS.URL_REQUEST_TYPE, vendor, page, CONSTANTS.URL_REQUEST_INDEX, 64, (error, buffer) => {\n                    device.close();\n\n                    if (error) {\n                        // An error may be due to the URL not existing\n                        if (suppressErrors) return resolve(null);\n                        else return reject(error);\n                    }\n\n                    // const length = buffer.readUInt8(0);\n                    // const type = buffer.readUInt8(1);\n                    let url = buffer.toString(\"utf8\", 3);\n\n                    const scheme = buffer.readUInt8(2); // 0 - http, 1 - https, 255 - in url\n                    if (scheme === 0) url = \"http://\" + url;\n                    if (scheme === 1) url = \"https://\" + url;\n\n                    resolve(url);\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private devicetoUSBDevice(handle: string): Promise<USBDevice> {\n        return new Promise((resolve, _reject) => {\n            const device = this.devices[handle].device;\n            const url = this.devices[handle].url;\n\n            let configs: Array<ConfigDescriptor> = null;\n            let configDescriptor: ConfigDescriptor = null;\n            let deviceDescriptor: DeviceDescriptor = null;\n\n            try {\n                configDescriptor = device.configDescriptor;\n                configs = device.allConfigDescriptors;\n                deviceDescriptor = device.deviceDescriptor;\n            } catch (_error) {\n                return resolve(null);\n            }\n\n            if (!configs) return resolve(null);\n\n            return this.serialDevicePromises(this.configToUSBConfiguration, device, configs)\n            .then(configurations => {\n\n                if (!deviceDescriptor) {\n                    return resolve(new USBDevice({\n                        _handle: this.getDeviceHandle(device),\n                        url: url,\n                        configurations: configurations\n                    }));\n                }\n\n                const deviceVersion = this.decodeVersion(deviceDescriptor.bcdDevice);\n                const usbVersion = this.decodeVersion(deviceDescriptor.bcdUSB);\n                let manufacturerName = null;\n                let productName = null;\n\n                return this.getStringDescriptor(device, deviceDescriptor.iManufacturer)\n                .then(name => {\n                    manufacturerName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iProduct);\n                })\n                .then(name => {\n                    productName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iSerialNumber);\n                })\n                .then(serialNumber => {\n                    const props: Partial<USBDevice> = {\n                        _handle: this.getDeviceHandle(device),\n                        _maxPacketSize: deviceDescriptor.bMaxPacketSize0,\n                        url: url,\n                        deviceClass: deviceDescriptor.bDeviceClass,\n                        deviceSubclass: deviceDescriptor.bDeviceSubClass,\n                        deviceProtocol: deviceDescriptor.bDeviceProtocol,\n                        productId: deviceDescriptor.idProduct,\n                        vendorId: deviceDescriptor.idVendor,\n                        deviceVersionMajor: deviceVersion.major,\n                        deviceVersionMinor: deviceVersion.minor,\n                        deviceVersionSubminor: deviceVersion.sub,\n                        usbVersionMajor: usbVersion.major,\n                        usbVersionMinor: usbVersion.minor,\n                        usbVersionSubminor: usbVersion.sub,\n                        manufacturerName: manufacturerName,\n                        productName: productName,\n                        serialNumber: serialNumber,\n                        configurations: configurations,\n                        _currentConfiguration: configDescriptor.bConfigurationValue\n                    };\n                    return resolve(new USBDevice(props));\n                });\n            }).catch(_error => {\n                resolve(null);\n            });\n        });\n    }\n\n    private decodeVersion(version: number): { [key: string]: number } {\n        const hex = `0000${version.toString(16)}`.slice(-4);\n        return {\n            major: parseInt(hex.substr(0, 2), null),\n            minor: parseInt(hex.substr(2, 1), null),\n            sub: parseInt(hex.substr(3, 1), null),\n        };\n    }\n\n    private getStringDescriptor(device: Device, index: number): Promise<string> {\n        return new Promise(resolve => {\n            this.openDevice(device)\n            .then(() => {\n                device.getStringDescriptor(index, (error, buffer) => {\n                    device.close();\n                    resolve(error ? \"\" : buffer.toString());\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private bufferToDataView(buffer: Buffer): DataView {\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private bufferSourceToBuffer(bufferSource: ArrayBuffer | ArrayBufferView): Buffer {\n        const arrayBuffer = ArrayBuffer.isView(bufferSource)\n            ? bufferSource.buffer.slice(bufferSource.byteOffset, bufferSource.byteOffset + bufferSource.byteLength)\n            : bufferSource;\n\n        return Buffer.from(arrayBuffer);\n    }\n\n    private getEndpoint(device: Device, direction: USBDirection, endpointNumber: number): Endpoint {\n        let endpoint: Endpoint = null;\n        const address = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n\n        device.interfaces.some(iface => {\n            const epoint = iface.endpoint(address);\n\n            if (epoint) {\n                endpoint = epoint;\n                return true;\n            }\n            return false;\n        });\n\n        return endpoint;\n    }\n\n    private getInEndpoint(device: Device, endpointNumber: number): InEndpoint {\n        const endpoint = this.getEndpoint(device, \"in\", endpointNumber);\n        if (endpoint && endpoint.direction === \"in\") return (endpoint as InEndpoint);\n    }\n\n    private getOutEndpoint(device: Device, endpointNumber: number): OutEndpoint {\n        const endpoint = this.getEndpoint(device, \"out\", endpointNumber);\n        if (endpoint && endpoint.direction === \"out\") return (endpoint as OutEndpoint);\n    }\n\n    private endpointToUSBEndpoint(descriptor: EndpointDescriptor): USBEndpoint {\n        const direction = descriptor.bEndpointAddress & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n        return new USBEndpoint({\n            endpointNumber: descriptor.bEndpointAddress ^ (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT),\n            direction: direction,\n            type: (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_BULK ? \"bulk\"\n                : (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_INTERRUPT ? \"interrupt\"\n                : \"isochronous\",\n            packetSize: descriptor.wMaxPacketSize\n        });\n    }\n\n    private interfaceToUSBAlternateInterface(device: Device, descriptor: InterfaceDescriptor): Promise<USBAlternateInterface> {\n        return this.getStringDescriptor(device, descriptor.iInterface)\n        .then(name => {\n            return new USBAlternateInterface({\n                alternateSetting: descriptor.bAlternateSetting,\n                interfaceClass: descriptor.bInterfaceClass,\n                interfaceSubclass: descriptor.bInterfaceSubClass,\n                interfaceProtocol: descriptor.bInterfaceProtocol,\n                interfaceName: name,\n                endpoints: descriptor.endpoints.map(this.endpointToUSBEndpoint)\n            });\n        });\n    }\n\n    private interfacesToUSBInterface(device: Device, descriptors: Array<InterfaceDescriptor>): Promise<USBInterface> {\n        return this.serialDevicePromises(this.interfaceToUSBAlternateInterface, device, descriptors)\n        .then(alternates => {\n            return new USBInterface({\n                _handle: this.getDeviceHandle(device),\n                interfaceNumber: descriptors[0].bInterfaceNumber,\n                alternates: alternates\n            });\n        });\n    }\n\n    private configToUSBConfiguration(device: Device, descriptor: ConfigDescriptor): Promise<USBConfiguration> {\n        return this.getStringDescriptor(device, descriptor.iConfiguration)\n        .then(name => {\n            const allInterfaces = descriptor.interfaces || [];\n\n            return this.serialDevicePromises(this.interfacesToUSBInterface, device, allInterfaces)\n            .then(interfaces => {\n                return new USBConfiguration({\n                    configurationValue: descriptor.bConfigurationValue,\n                    configurationName: name,\n                    interfaces: interfaces\n                });\n            });\n        });\n    }\n\n    private getDevice(handle: string): Device {\n        if (!this.devices[handle]) return null;\n        return this.devices[handle].device;\n    }\n\n    private controlTransferParamsToType(setup: USBControlTransferParameters, direction: number): number {\n        const recipient = setup.recipient === \"device\" ? LIBUSB_RECIPIENT_DEVICE\n                        : setup.recipient === \"interface\" ? LIBUSB_RECIPIENT_INTERFACE\n                        : setup.recipient === \"endpoint\" ? LIBUSB_RECIPIENT_ENDPOINT\n                        : LIBUSB_RECIPIENT_OTHER;\n\n        const requestType = setup.requestType === \"standard\" ? LIBUSB_REQUEST_TYPE_STANDARD\n                          : setup.requestType === \"class\" ? LIBUSB_REQUEST_TYPE_CLASS\n                          : LIBUSB_REQUEST_TYPE_VENDOR;\n\n        return recipient | requestType | direction;\n    }\n\n    private openDevice(device: Device, retries: number = 0): Promise<void> {\n        return this.retryPromise(() => {\n            return new Promise<void>((resolve, reject) => {\n                try {\n                    device.open();\n                } catch (error) {\n                    return reject(error);\n                }\n                resolve();\n            });\n        }, retries);\n    }\n\n    public getConnected(handle: string): boolean {\n        return this.getDevice(handle) !== null;\n    }\n\n    public getOpened(handle: string): boolean {\n        const device = this.getDevice(handle);\n        if (!device) return false;\n        return (device.interfaces !== null);\n    }\n\n    public listUSBDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<USBDevice>> {\n        return this.loadDevices(preFilters)\n        .then(() => {\n            return this.serialPromises(this.devicetoUSBDevice, Object.keys(this.devices));\n        });\n    }\n\n    public open(handle: string): Promise<void> {\n        const device = this.getDevice(handle);\n        return this.openDevice(device);\n    }\n\n    public close(handle: string): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.close();\n            resolve();\n        });\n    }\n\n    public selectConfiguration(handle: string, id: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.setConfiguration(id, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public claimInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).claim();\n            resolve();\n        });\n    }\n\n    public releaseInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).release(true, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const iface = device.interface(interfaceNumber);\n\n            iface.setAltSetting(alternateSetting, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_IN);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, length, (error, buffer) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(buffer),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public controlTransferOut(handle: string, setup: USBControlTransferParameters, data?: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_OUT);\n            const buffer = data ? this.bufferSourceToBuffer(data) : new Buffer(0);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const wIndex = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n            device.controlTransfer(LIBUSB_RECIPIENT_ENDPOINT, CONSTANTS.CLEAR_FEATURE, CONSTANTS.ENDPOINT_HALT, wIndex, 0, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getInEndpoint(device, endpointNumber);\n\n            endpoint.transfer(length, (error, data) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(data),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getOutEndpoint(device, endpointNumber);\n            const buffer = this.bufferSourceToBuffer(data);\n\n            endpoint.transfer(buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferIn error: method not implemented\");\n        });\n    }\n\n    public isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferOut error: method not implemented\");\n        });\n    }\n\n    public reset(handle: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            device.reset(error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n}\n\n/**\n * @hidden\n */\nexport const adapter = new USBAdapter();\n","/*\n* Node WebUSB\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n// tslint:disable:max-classes-per-file\n\n/**\n * @hidden\n */\nexport class DOMEvent implements Event {\n\n    /**\n     * Type of the event\n     */\n    public type: string;\n\n    /**\n     * @hidden\n     */\n    public target: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public currentTarget: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public srcElement: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public timeStamp: number;\n\n    /**\n     * @hidden\n     */\n    public bubbles = false;\n\n    /**\n     * @hidden\n     */\n    public cancelable = false;\n\n    /**\n     * @hidden\n     */\n    public cancelBubble = false;\n\n    /**\n     * @hidden\n     */\n    public composed = false;\n\n    /**\n     * @hidden\n     */\n    public defaultPrevented = false;\n\n    /**\n     * @hidden\n     */\n    public eventPhase = 0;\n\n    /**\n     * @hidden\n     */\n    public isTrusted = true;\n\n    /**\n     * @hidden\n     */\n    public returnValue = true;\n\n    /**\n     * @hidden\n     */\n    public AT_TARGET: number;\n\n    /**\n     * @hidden\n     */\n    public BUBBLING_PHASE: number;\n\n    /**\n     * @hidden\n     */\n    public CAPTURING_PHASE: number;\n\n    /**\n     * @hidden\n     */\n    public NONE: number;\n\n    /**\n     * @hidden\n     */\n    public composedPath(): Array<EventTarget> {\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    public initEvent(type: string, bubbles?: boolean, cancelable?: boolean) {\n        this.type = type;\n        this.bubbles = bubbles;\n        this.cancelable = cancelable;\n    }\n\n    /**\n     * @hidden\n     */\n    public preventDefault() {\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public stopImmediatePropagation() {\n        return;\n    }\n\n    /**\n     * @hidden\n     */\n    public stopPropagation() {\n        return;\n    }\n}\n\n/**\n * @hidden\n */\nexport class W3CUSBConnectionEvent extends DOMEvent implements USBConnectionEvent {\n\n    /**\n     * Device connected or disconnected\n     */\n    public readonly device: USBDevice;\n\n    /**\n     * Type of the event\n     */\n    public readonly type: \"connect\" | \"disconnect\";\n\n    /**\n     * @hidden\n     */\n    constructor(target: EventTarget, type: \"connect\" | \"disconnect\", eventInitDict: USBConnectionEventInit) {\n        super();\n        this.initEvent(type, eventInitDict.bubbles, eventInitDict.cancelable);\n        this.target = target;\n        this.device = eventInitDict.device;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"./dispatcher\";\nimport { USBAdapter, adapter } from \"./adapter\";\nimport { W3CUSBConnectionEvent } from \"./events\";\nimport { W3CUSB } from \"./interfaces\";\nimport { USBDevice as Device } from \"./device\";\n\n/**\n * USB Options\n */\nexport interface USBOptions {\n    /**\n     * A `device found` callback function to allow the user to select a device\n     */\n    devicesFound?: (devices: Array<USBDevice>) => Promise<USBDevice | void>;\n}\n\n/**\n * @hidden\n */\nexport interface USBEvents {\n    /**\n     * USBDevice connected event\n     */\n    connect: USBConnectionEvent;\n    /**\n     * USBDevice disconnected event\n     */\n    disconnect: USBConnectionEvent;\n}\n\n/**\n * USB class\n */\nexport class USB extends (EventDispatcher as new() => TypedDispatcher<USBEvents>) implements W3CUSB {\n\n    private allowedDevices: Array<Device> = [];\n    private devicesFound: (devices: Array<USBDevice>) => Promise<USBDevice | void>;\n\n    private _onconnect: (ev: USBConnectionEvent) => void;\n    public set onconnect(fn: (ev: USBConnectionEvent) => void) {\n        if (this._onconnect) {\n            this.removeEventListener(\"connect\", this._onconnect);\n        }\n        this._onconnect = fn;\n        this.addEventListener(\"connect\", this._onconnect);\n    }\n\n    private _ondisconnect: (ev: USBConnectionEvent) => void;\n    public set ondisconnect(fn: (ev: USBConnectionEvent) => void) {\n        if (this._ondisconnect) {\n            this.removeEventListener(\"disconnect\", this._ondisconnect);\n        }\n        this._ondisconnect = fn;\n        this.addEventListener(\"disconnect\", this._ondisconnect);\n    }\n\n    /**\n     * USB constructor\n     * @param options USB initialisation options\n     */\n    constructor(options?: USBOptions) {\n        super();\n\n        options = options || {};\n        this.devicesFound = options.devicesFound;\n\n        const deviceConnectCallback = device => {\n            // When connected, emit an event if it was a known allowed device\n            if (this.replaceAllowedDevice(device)) {\n                const event = new W3CUSBConnectionEvent(this as EventTarget, \"connect\", { device }) as USBConnectionEvent;\n                this.dispatchEvent(event);\n\n                if (this.onconnect) {\n                    this.onconnect(event);\n                }\n            }\n        };\n\n        const deviceDisconnectCallback = handle => {\n            // When disconnected, emit an event if the device was a known allowed device\n            const device = this.allowedDevices.find(allowedDevices => allowedDevices._handle === handle);\n\n            if (device) {\n                const event = new W3CUSBConnectionEvent(this as EventTarget, \"disconnect\", { device }) as USBConnectionEvent;\n                this.dispatchEvent(event);\n\n                if (this.ondisconnect) {\n                    this.ondisconnect(event);\n                }\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === \"connect\") {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === \"disconnect\") {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === \"connect\") {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === \"disconnect\") {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n    }\n\n    private replaceAllowedDevice(device: Device): boolean {\n        for (const i in this.allowedDevices) {\n            if (this.isSameDevice(device, this.allowedDevices[i])) {\n                this.allowedDevices[i] = device;\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private isSameDevice(device1: USBDevice, device2: USBDevice): boolean {\n        return (device1.productId === device2.productId\n             && device1.vendorId === device2.vendorId\n             && device1.serialNumber === device2.serialNumber);\n    }\n\n    private filterDevice(options: USBDeviceRequestOptions, device: USBDevice): boolean {\n        return options.filters.some(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.vendorId) return false;\n\n            // Product\n            if (filter.productId && filter.productId !== device.productId) return false;\n\n            // Class\n            if (filter.classCode) {\n\n                // Interface Descriptors\n                const match = device.configuration.interfaces.some(iface => {\n                    // Class\n                    if (filter.classCode && filter.classCode !== iface.alternate.interfaceClass) return false;\n\n                    // Subclass\n                    if (filter.subclassCode && filter.subclassCode !== iface.alternate.interfaceSubclass) return false;\n\n                    // Protocol\n                    if (filter.protocolCode && filter.protocolCode !== iface.alternate.interfaceProtocol) return false;\n\n                    return true;\n                });\n\n                if (match) return true;\n            }\n\n            // Class\n            if (filter.classCode && filter.classCode !== device.deviceClass) return false;\n\n            // Subclass\n            if (filter.subclassCode && filter.subclassCode !== device.deviceSubclass) return false;\n\n            // Protocol\n            if (filter.protocolCode && filter.protocolCode !== device.deviceProtocol) return false;\n\n            // Serial\n            if (filter.serialNumber && filter.serialNumber !== device.serialNumber) return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Gets all allowed Web USB devices which are connected\n     * @returns Promise containing an array of devices\n     */\n    public getDevices(): Promise<Array<USBDevice>> {\n        // Create pre-filters\n        const preFilters = this.allowedDevices.map(device => ({\n            vendorId: device.vendorId || undefined,\n            productId: device.productId || undefined,\n            classCode: device.deviceClass || undefined,\n            subclassCode: device.deviceSubclass || undefined,\n            protocolCode: device.deviceProtocol || undefined,\n            serialNumber: device.serialNumber || undefined\n        }));\n\n        // Refresh devices and filter for allowed ones\n        return adapter.listUSBDevices(preFilters)\n        .then(devices => {\n            const allowed = devices.filter(device => {\n                if (!device.connected) {\n                    return false;\n                }\n\n                for (const i in this.allowedDevices) {\n                    if (this.isSameDevice(device, this.allowedDevices[i])) {\n                        return true;\n                    }\n                }\n\n                return false;\n            });\n\n            return allowed;\n        });\n    }\n\n    /**\n     * Requests a single Web USB device\n     * @param options The options to use when scanning\n     * @returns Promise containing the selected device\n     */\n    public requestDevice(options: USBDeviceRequestOptions): Promise<USBDevice> {\n        return new Promise((resolve, reject) => {\n            // Must have options\n            if (!options) {\n                return reject(new TypeError(\"requestDevice error: 1 argument required, but only 0 present\"));\n            }\n\n            // Options must be an object\n            if (options.constructor !== {}.constructor) {\n                return reject(new TypeError(\"requestDevice error: parameter 1 (options) is not an object\"));\n            }\n\n            // Must have a filter\n            if (!options.filters) {\n                return reject(new TypeError(\"requestDevice error: required member filters is undefined\"));\n            }\n\n            // Filter must be an array\n            if (options.filters.constructor !== [].constructor) {\n                return reject(new TypeError(\"requestDevice error: the provided value cannot be converted to a sequence\"));\n            }\n\n            // Check filters\n            const check = options.filters.every(filter => {\n\n                // Protocol & Subclass\n                if (filter.protocolCode && !filter.subclassCode) {\n                    reject(new TypeError(\"requestDevice error: subclass code is required\"));\n                    return false;\n                }\n\n                // Subclass & Class\n                if (filter.subclassCode && !filter.classCode) {\n                    reject(new TypeError(\"requestDevice error: class code is required\"));\n                    return false;\n                }\n\n                return true;\n            });\n\n            if (!check) return;\n\n            return adapter.listUSBDevices(options.filters)\n            .then(devices => {\n                devices = devices.filter(device => this.filterDevice(options, device));\n\n                if (devices.length === 0) {\n                    return reject(new Error(\"requestDevice error: no devices found\"));\n                }\n\n                function selectFn(device: USBDevice) {\n                    if (!this.replaceAllowedDevice(device)) this.allowedDevices.push(device);\n                    resolve(device);\n                }\n\n                // If no devicesFound function, select the first device found\n                if (!this.devicesFound) return selectFn.call(this, devices[0]);\n\n                return this.devicesFound(devices)\n                .then(device => {\n                    if (!device) {\n                        reject(new Error(\"selected device not found\"));\n                    }\n\n                    return selectFn.call(this, device);\n                });\n            }).catch(error => {\n                reject(new Error(`requestDevice error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USB, USBOptions } from \"./usb\";\n\n/**\n * Default usb instance synonymous with `navigator.usb`\n */\nexport const usb = new USB();\n\n/**\n * USB class for creating new instances\n */\nexport { USB, USBOptions };\n\n/**\n * Adapter\n */\nexport {\n    adapter,\n    USBAdapter\n} from \"./adapter\";\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var usb = exports = module.exports = require('bindings')('usb_bindings');\nvar events = require('events')\nvar util = require('util')\n\nvar isBuffer = function(obj) {\n\treturn obj && obj instanceof Uint8Array\n}\n\nif (usb.INIT_ERROR) {\n\tconsole.warn(\"Failed to initialize libusb.\")\n\tusb.Device = function () { throw new Error(\"Device cannot be instantiated directly.\") };\n\tusb.Transfer = function () { throw new Error(\"Transfer cannot be instantiated directly.\") };\n\tusb.setDebugLevel = function () { };\n\tusb.getDeviceList = function () { return []; };\n\tusb._enableHotplugEvents = function () { };\n\tusb._disableHotplugEvents = function () { };\n}\n\nObject.keys(events.EventEmitter.prototype).forEach(function (key) {\n\texports[key] = events.EventEmitter.prototype[key];\n});\n\n// convenience method for finding a device by vendor and product id\nexports.findByIds = function(vid, pid) {\n\tvar devices = usb.getDeviceList()\n\n\tfor (var i = 0; i < devices.length; i++) {\n\t\tvar deviceDesc = devices[i].deviceDescriptor\n\t\tif ((deviceDesc.idVendor == vid) && (deviceDesc.idProduct == pid)) {\n\t\t\treturn devices[i]\n\t\t}\n\t}\n}\n\nusb.Device.prototype.timeout = 1000\n\nusb.Device.prototype.open = function(defaultConfig){\n\tthis.__open()\n\tif (defaultConfig === false) return\n\tthis.interfaces = []\n\tvar len = this.configDescriptor ? this.configDescriptor.interfaces.length : 0\n\tfor (var i=0; i<len; i++){\n\t\tthis.interfaces[i] = new Interface(this, i)\n\t}\n}\n\nusb.Device.prototype.close = function(){\n\tthis.__close()\n\tthis.interfaces = null\n}\n\nObject.defineProperty(usb.Device.prototype, \"configDescriptor\", {\n\tget: function() {\n\t\ttry {\n\t\t\treturn this._configDescriptor || (this._configDescriptor = this.__getConfigDescriptor())\n\t\t} catch(e) {\n\t\t\t// Check descriptor exists\n\t\t\tif (e.errno == usb.LIBUSB_ERROR_NOT_FOUND) return null;\n\t\t\tthrow e;\n\t\t}\n\t}\n});\n\nObject.defineProperty(usb.Device.prototype, \"allConfigDescriptors\", {\n\tget: function() {\n\t\ttry {\n\t\t\treturn this._allConfigDescriptors || (this._allConfigDescriptors = this.__getAllConfigDescriptors())\n\t\t} catch(e) {\n\t\t\t// Check descriptors exist\n\t\t\tif (e.errno == usb.LIBUSB_ERROR_NOT_FOUND) return [];\n\t\t\tthrow e;\n\t\t}\n\t}\n});\n\nObject.defineProperty(usb.Device.prototype, \"parent\", {\n\tget: function() {\n\t\treturn this._parent || (this._parent = this.__getParent())\n\t}\n});\n\nusb.Device.prototype.interface = function(addr){\n\tif (!this.interfaces){\n\t\tthrow new Error(\"Device must be open before searching for interfaces\")\n\t}\n\taddr = addr || 0\n\tfor (var i=0; i<this.interfaces.length; i++){\n\t\tif (this.interfaces[i].interfaceNumber == addr){\n\t\t\treturn this.interfaces[i]\n\t\t}\n\t}\n}\n\nvar SETUP_SIZE = usb.LIBUSB_CONTROL_SETUP_SIZE\n\nusb.Device.prototype.controlTransfer =\nfunction(bmRequestType, bRequest, wValue, wIndex, data_or_length, callback){\n\tvar self = this\n\tvar isIn = !!(bmRequestType & usb.LIBUSB_ENDPOINT_IN)\n\tvar wLength\n\n\tif (isIn){\n\t\tif (!(data_or_length >= 0)){\n\t\t\tthrow new TypeError(\"Expected size number for IN transfer (based on bmRequestType)\")\n\t\t}\n\t\twLength = data_or_length\n\t}else{\n\t\tif (!isBuffer(data_or_length)){\n\t\t\tthrow new TypeError(\"Expected buffer for OUT transfer (based on bmRequestType)\")\n\t\t}\n\t\twLength = data_or_length.length\n\t}\n\n\t// Buffer for the setup packet\n\t// http://libusbx.sourceforge.net/api-1.0/structlibusb__control__setup.html\n\tvar buf = Buffer.alloc(wLength + SETUP_SIZE)\n\tbuf.writeUInt8(   bmRequestType, 0)\n\tbuf.writeUInt8(   bRequest,      1)\n\tbuf.writeUInt16LE(wValue,        2)\n\tbuf.writeUInt16LE(wIndex,        4)\n\tbuf.writeUInt16LE(wLength,       6)\n\n\tif (!isIn){\n\t\tbuf.set(data_or_length, SETUP_SIZE)\n\t}\n\n\tvar transfer = new usb.Transfer(this, 0, usb.LIBUSB_TRANSFER_TYPE_CONTROL, this.timeout,\n\t\tfunction(error, buf, actual){\n\t\t\tif (callback){\n\t\t\t\tif (isIn){\n\t\t\t\t\tcallback.call(self, error, buf.slice(SETUP_SIZE, SETUP_SIZE + actual))\n\t\t\t\t}else{\n\t\t\t\t\tcallback.call(self, error)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t)\n\n\ttry {\n\t\ttransfer.submit(buf)\n\t} catch (e) {\n\t\tif (callback){\n\t\t\tprocess.nextTick(function() { callback.call(self, e); });\n\t\t}\n\t}\n\treturn this;\n}\n\nusb.Device.prototype.getStringDescriptor = function (desc_index, callback) {\n\tvar langid = 0x0409;\n\tvar length = 255;\n\tthis.controlTransfer(\n\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t((usb.LIBUSB_DT_STRING << 8) | desc_index),\n\t\tlangid,\n\t\tlength,\n\t\tfunction (error, buf) {\n\t\t\tif (error) return callback(error);\n\t\t\tcallback(undefined, buf.toString('utf16le', 2));\n\t\t}\n\t);\n}\n\nusb.Device.prototype.getBosDescriptor = function (callback) {\n\n\tif (this._bosDescriptor) {\n\t\t// Cached descriptor\n\t\treturn callback(undefined, this._bosDescriptor);\n\t}\n\n\tif (this.deviceDescriptor.bcdUSB < 0x201) {\n\t\t// BOS is only supported from USB 2.0.1\n\t\treturn callback(undefined, null);\n\t}\n\n\tthis.controlTransfer(\n\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t(usb.LIBUSB_DT_BOS << 8),\n\t\t0,\n\t\tusb.LIBUSB_DT_BOS_SIZE,\n\t\tfunction (error, buffer) {\n\t\t\tif (error) {\n\t\t\t\t// Check BOS descriptor exists\n\t\t\t\tif (error.errno == usb.LIBUSB_TRANSFER_STALL) return callback(undefined, null);\n\t\t\t\treturn callback(error, null);\n\t\t\t}\n\n\t\t\tvar totalLength = buffer.readUInt16LE(2);\n\t\t\tthis.controlTransfer(\n\t\t\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\t\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t\t\t(usb.LIBUSB_DT_BOS << 8),\n\t\t\t\t0,\n\t\t\t\ttotalLength,\n\t\t\t\tfunction (error, buffer) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\t// Check BOS descriptor exists\n\t\t\t\t\t\tif (error.errno == usb.LIBUSB_TRANSFER_STALL) return callback(undefined, null);\n\t\t\t\t\t\treturn callback(error, null);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar descriptor = {\n\t\t\t\t\t\tbLength: buffer.readUInt8(0),\n\t\t\t\t\t\tbDescriptorType: buffer.readUInt8(1),\n\t\t\t\t\t\twTotalLength: buffer.readUInt16LE(2),\n\t\t\t\t\t\tbNumDeviceCaps: buffer.readUInt8(4),\n\t\t\t\t\t\tcapabilities: []\n\t\t\t\t\t};\n\n\t\t\t\t\tvar i = usb.LIBUSB_DT_BOS_SIZE;\n\t\t\t\t\twhile (i < descriptor.wTotalLength) {\n\t\t\t\t\t\tvar capability = {\n\t\t\t\t\t\t\tbLength: buffer.readUInt8(i + 0),\n\t\t\t\t\t\t\tbDescriptorType: buffer.readUInt8(i + 1),\n\t\t\t\t\t\t\tbDevCapabilityType: buffer.readUInt8(i + 2)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tcapability.dev_capability_data = buffer.slice(i + 3, i + capability.bLength);\n\t\t\t\t\t\tdescriptor.capabilities.push(capability);\n\t\t\t\t\t\ti += capability.bLength;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache descriptor\n\t\t\t\t\tthis._bosDescriptor = descriptor;\n\t\t\t\t\tcallback(undefined, this._bosDescriptor);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n}\n\nusb.Device.prototype.getCapabilities = function (callback) {\n\tvar capabilities = [];\n\tvar self = this;\n\n\tthis.getBosDescriptor(function(error, descriptor) {\n\t\tif (error) return callback(error, null);\n\n\t\tvar len = descriptor ? descriptor.capabilities.length : 0\n\t\tfor (var i=0; i<len; i++){\n\t\t\tcapabilities.push(new Capability(self, i))\n\t\t}\n\n\t\tcallback(undefined, capabilities);\n\t});\n}\n\nusb.Device.prototype.setConfiguration = function(desired, cb) {\n\tvar self = this;\n\tthis.__setConfiguration(desired, function(err) {\n\t\tif (!err) {\n\t\t\tthis.interfaces = []\n\t\t\tvar len = this.configDescriptor ? this.configDescriptor.interfaces.length : 0\n\t\t\tfor (var i=0; i<len; i++) {\n\t\t\t\tthis.interfaces[i] = new Interface(this, i)\n\t\t\t}\n\t\t}\n\t\tcb.call(self, err)\n\t});\n}\n\nfunction Interface(device, id){\n\tthis.device = device\n\tthis.id = id\n\tthis.altSetting = 0;\n\tthis.__refresh()\n}\n\nInterface.prototype.__refresh = function(){\n\tthis.descriptor = this.device.configDescriptor.interfaces[this.id][this.altSetting]\n\tthis.interfaceNumber = this.descriptor.bInterfaceNumber\n\tthis.endpoints = []\n\tvar len = this.descriptor.endpoints.length\n\tfor (var i=0; i<len; i++){\n\t\tvar desc = this.descriptor.endpoints[i]\n\t\tvar c = (desc.bEndpointAddress&usb.LIBUSB_ENDPOINT_IN)?InEndpoint:OutEndpoint\n\t\tthis.endpoints[i] = new c(this.device, desc)\n\t}\n}\n\nInterface.prototype.claim = function(){\n\tthis.device.__claimInterface(this.id)\n}\n\nInterface.prototype.release = function(closeEndpoints, cb){\n\tvar self = this;\n\tif (typeof closeEndpoints == 'function') {\n\t\tcb = closeEndpoints;\n\t\tcloseEndpoints = null;\n\t}\n\n\tif (!closeEndpoints || this.endpoints.length == 0) {\n\t\tnext();\n\t} else {\n\t\tvar n = self.endpoints.length;\n\t\tself.endpoints.forEach(function (ep, i) {\n\t\t\tif (ep.pollActive) {\n\t\t\t\tep.once('end', function () {\n\t\t\t\t\tif (--n == 0) next();\n\t\t\t\t});\n\t\t\t\tep.stopPoll();\n\t\t\t} else {\n\t\t\t\tif (--n == 0) next();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction next () {\n\t\tself.device.__releaseInterface(self.id, function(err){\n\t\t\tif (!err){\n\t\t\t\tself.altSetting = 0;\n\t\t\t\tself.__refresh()\n\t\t\t}\n\t\t\tcb.call(self, err)\n\t\t})\n\t}\n}\n\nInterface.prototype.isKernelDriverActive = function(){\n\treturn this.device.__isKernelDriverActive(this.id)\n}\n\nInterface.prototype.detachKernelDriver = function() {\n\treturn this.device.__detachKernelDriver(this.id)\n};\n\nInterface.prototype.attachKernelDriver = function() {\n\treturn this.device.__attachKernelDriver(this.id)\n};\n\n\nInterface.prototype.setAltSetting = function(altSetting, cb){\n\tvar self = this;\n\tthis.device.__setInterface(this.id, altSetting, function(err){\n\t\tif (!err){\n\t\t\tself.altSetting = altSetting;\n\t\t\tself.__refresh();\n\t\t}\n\t\tcb.call(self, err)\n\t})\n}\n\nInterface.prototype.endpoint = function(addr){\n\tfor (var i=0; i<this.endpoints.length; i++){\n\t\tif (this.endpoints[i].address == addr){\n\t\t\treturn this.endpoints[i]\n\t\t}\n\t}\n}\n\nfunction Capability(device, id){\n\tthis.device = device\n\tthis.id = id\n\tthis.descriptor = this.device._bosDescriptor.capabilities[this.id]\n\tthis.type = this.descriptor.bDevCapabilityType\n\tthis.data = this.descriptor.dev_capability_data\n}\n\nfunction Endpoint(device, descriptor){\n\tthis.device = device\n\tthis.descriptor = descriptor\n\tthis.address = descriptor.bEndpointAddress\n\tthis.transferType = descriptor.bmAttributes&0x03\n}\nutil.inherits(Endpoint, events.EventEmitter)\n\nEndpoint.prototype.timeout = 0\n\nEndpoint.prototype.clearHalt = function(callback){\n\treturn this.device.__clearHalt(this.address, callback);\n}\n\nEndpoint.prototype.makeTransfer = function(timeout, callback){\n\treturn new usb.Transfer(this.device, this.address, this.transferType, timeout, callback)\n}\n\nEndpoint.prototype.startPoll = function(nTransfers, transferSize, callback){\n\tif (this.pollTransfers){\n\t\tthrow new Error(\"Polling already active\")\n\t}\n\n\tnTransfers = nTransfers || 3;\n\tthis.pollTransferSize = transferSize || this.descriptor.wMaxPacketSize;\n\tthis.pollActive = true\n\tthis.pollPending = 0\n\n\tvar transfers = []\n\tfor (var i=0; i<nTransfers; i++){\n\t\ttransfers[i] = this.makeTransfer(0, callback)\n\t}\n\treturn transfers;\n}\n\nEndpoint.prototype.stopPoll = function(cb){\n\tif (!this.pollTransfers) {\n\t\tthrow new Error('Polling is not active.');\n\t}\n\tfor (var i=0; i<this.pollTransfers.length; i++){\n\t\ttry {\n\t\t\tthis.pollTransfers[i].cancel()\n\t\t} catch (err) {\n\t\t\tthis.emit('error', err);\n\t\t}\n\t}\n\tthis.pollActive = false\n\tif (cb) this.once('end', cb);\n}\n\nfunction InEndpoint(device, descriptor){\n\tEndpoint.call(this, device, descriptor)\n}\n\nexports.InEndpoint = InEndpoint\nutil.inherits(InEndpoint, Endpoint)\nInEndpoint.prototype.direction = \"in\"\n\nInEndpoint.prototype.transfer = function(length, cb){\n\tvar self = this\n\tvar buffer = Buffer.alloc(length)\n\n\tfunction callback(error, buf, actual){\n\t\tcb.call(self, error, buffer.slice(0, actual))\n\t}\n\n\ttry {\n\t\tthis.makeTransfer(this.timeout, callback).submit(buffer)\n\t} catch (e) {\n\t\tprocess.nextTick(function() { cb.call(self, e); });\n\t}\n\treturn this;\n}\n\nInEndpoint.prototype.startPoll = function(nTransfers, transferSize){\n\tvar self = this\n\tthis.pollTransfers = InEndpoint.super_.prototype.startPoll.call(this, nTransfers, transferSize, transferDone)\n\n\tfunction transferDone(error, buf, actual){\n\t\tif (!error){\n\t\t\tself.emit(\"data\", buf.slice(0, actual))\n\t\t}else if (error.errno != usb.LIBUSB_TRANSFER_CANCELLED){\n\t\t\tself.emit(\"error\", error)\n\t\t\tself.stopPoll()\n\t\t}\n\n\t\tif (self.pollActive){\n\t\t\tstartTransfer(this)\n\t\t}else{\n\t\t\tself.pollPending--\n\n\t\t\tif (self.pollPending == 0){\n\t\t\t\tdelete self.pollTransfers;\n\t\t\t\tself.emit('end')\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction startTransfer(t){\n\t\ttry {\n\t\t\tt.submit(Buffer.alloc(self.pollTransferSize), transferDone);\n\t\t} catch (e) {\n\t\t\tself.emit(\"error\", e);\n\t\t\tself.stopPoll();\n\t\t}\n\t}\n\n\tthis.pollTransfers.forEach(startTransfer)\n\tself.pollPending = this.pollTransfers.length\n}\n\n\n\nfunction OutEndpoint(device, descriptor){\n\tEndpoint.call(this, device, descriptor)\n}\nexports.OutEndpoint = OutEndpoint\nutil.inherits(OutEndpoint, Endpoint)\nOutEndpoint.prototype.direction = \"out\"\n\nOutEndpoint.prototype.transfer = function(buffer, cb){\n\tvar self = this\n\tif (!buffer){\n\t\tbuffer = Buffer.alloc(0)\n\t}else if (!isBuffer(buffer)){\n\t\tbuffer = Buffer.from(buffer)\n\t}\n\n\tfunction callback(error, buf, actual){\n\t\tif (cb) cb.call(self, error)\n\t}\n\n\ttry {\n\t\tthis.makeTransfer(this.timeout, callback).submit(buffer);\n\t} catch (e) {\n\t\tprocess.nextTick(function() { callback(e); });\n\t}\n\n\treturn this;\n}\n\nOutEndpoint.prototype.transferWithZLP = function (buf, cb) {\n\tif (buf.length % this.descriptor.wMaxPacketSize == 0) {\n\t\tthis.transfer(buf);\n\t\tthis.transfer(Buffer.alloc(0), cb);\n\t} else {\n\t\tthis.transfer(buf, cb);\n\t}\n}\n\nvar hotplugListeners = 0;\nexports.on('newListener', function(name) {\n\tif (name !== 'attach' && name !== 'detach') return;\n\tif (++hotplugListeners === 1) {\n\t\tusb._enableHotplugEvents();\n\t}\n});\n\nexports.on('removeListener', function(name) {\n\tif (name !== 'attach' && name !== 'detach') return;\n\tif (--hotplugListeners === 0) {\n\t\tusb._disableHotplugEvents();\n\t}\n});\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n  path = require('path'),\n  fileURLToPath = require('file-uri-to-path'),\n  join = path.join,\n  dirname = path.dirname,\n  exists =\n    (fs.accessSync &&\n      function(path) {\n        try {\n          fs.accessSync(path);\n        } catch (e) {\n          return false;\n        }\n        return true;\n      }) ||\n    fs.existsSync ||\n    path.existsSync,\n  defaults = {\n    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',\n    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',\n    platform: process.platform,\n    arch: process.arch,\n    nodePreGyp:\n      'node-v' +\n      process.versions.modules +\n      '-' +\n      process.platform +\n      '-' +\n      process.arch,\n    version: process.versions.node,\n    bindings: 'bindings.node',\n    try: [\n      // node-gyp's linked version in the \"build\" dir\n      ['module_root', 'build', 'bindings'],\n      // node-waf and gyp_addon (a.k.a node-gyp)\n      ['module_root', 'build', 'Debug', 'bindings'],\n      ['module_root', 'build', 'Release', 'bindings'],\n      // Debug files, for development (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Debug', 'bindings'],\n      ['module_root', 'Debug', 'bindings'],\n      // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Release', 'bindings'],\n      ['module_root', 'Release', 'bindings'],\n      // Legacy from node-waf, node <= 0.4.x\n      ['module_root', 'build', 'default', 'bindings'],\n      // Production \"Release\" buildtype binary (meh...)\n      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],\n      // node-qbs builds\n      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],\n      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}\n      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']\n    ]\n  };\n\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */\n\nfunction bindings(opts) {\n  // Argument surgery\n  if (typeof opts == 'string') {\n    opts = { bindings: opts };\n  } else if (!opts) {\n    opts = {};\n  }\n\n  // maps `defaults` onto `opts` object\n  Object.keys(defaults).map(function(i) {\n    if (!(i in opts)) opts[i] = defaults[i];\n  });\n\n  // Get the module root\n  if (!opts.module_root) {\n    opts.module_root = exports.getRoot(exports.getFileName());\n  }\n\n  // Ensure the given bindings name ends with .node\n  if (path.extname(opts.bindings) != '.node') {\n    opts.bindings += '.node';\n  }\n\n  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035\n  var requireFunc =\n    typeof __webpack_require__ === 'function'\n      ? __non_webpack_require__\n      : require;\n\n  var tries = [],\n    i = 0,\n    l = opts.try.length,\n    n,\n    b,\n    err;\n\n  for (; i < l; i++) {\n    n = join.apply(\n      null,\n      opts.try[i].map(function(p) {\n        return opts[p] || p;\n      })\n    );\n    tries.push(n);\n    try {\n      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);\n      if (!opts.path) {\n        b.path = n;\n      }\n      return b;\n    } catch (e) {\n      if (e.code !== 'MODULE_NOT_FOUND' &&\n          e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' &&\n          !/not find/i.test(e.message)) {\n        throw e;\n      }\n    }\n  }\n\n  err = new Error(\n    'Could not locate the bindings file. Tried:\\n' +\n      tries\n        .map(function(a) {\n          return opts.arrow + a;\n        })\n        .join('\\n')\n  );\n  err.tries = tries;\n  throw err;\n}\nmodule.exports = exports = bindings;\n\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */\n\nexports.getFileName = function getFileName(calling_file) {\n  var origPST = Error.prepareStackTrace,\n    origSTL = Error.stackTraceLimit,\n    dummy = {},\n    fileName;\n\n  Error.stackTraceLimit = 10;\n\n  Error.prepareStackTrace = function(e, st) {\n    for (var i = 0, l = st.length; i < l; i++) {\n      fileName = st[i].getFileName();\n      if (fileName !== __filename) {\n        if (calling_file) {\n          if (fileName !== calling_file) {\n            return;\n          }\n        } else {\n          return;\n        }\n      }\n    }\n  };\n\n  // run the 'prepareStackTrace' function above\n  Error.captureStackTrace(dummy);\n  dummy.stack;\n\n  // cleanup\n  Error.prepareStackTrace = origPST;\n  Error.stackTraceLimit = origSTL;\n\n  // handle filename that starts with \"file://\"\n  var fileSchema = 'file://';\n  if (fileName.indexOf(fileSchema) === 0) {\n    fileName = fileURLToPath(fileName);\n  }\n\n  return fileName;\n};\n\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */\n\nexports.getRoot = function getRoot(file) {\n  var dir = dirname(file),\n    prev;\n  while (true) {\n    if (dir === '.') {\n      // Avoids an infinite loop in rare cases, like the REPL\n      dir = process.cwd();\n    }\n    if (\n      exists(join(dir, 'package.json')) ||\n      exists(join(dir, 'node_modules'))\n    ) {\n      // Found the 'package.json' file or 'node_modules' dir; we're done\n      return dir;\n    }\n    if (prev === dir) {\n      // Got to the top\n      throw new Error(\n        'Could not find module root given file: \"' +\n          file +\n          '\". Do you have a `package.json` file? '\n      );\n    }\n    // Try the parent dir next\n    prev = dir;\n    dir = join(dir, '..');\n  }\n};\n","\"use strict\";","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","\n/**\n * Module dependencies.\n */\n\nvar sep = require('path').sep || '/';\n\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath (uri) {\n  if ('string' != typeof uri ||\n      uri.length <= 7 ||\n      'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1);\n\n  // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  }\n\n  // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n  path = path.replace(/^(.+)\\|/, '$1:');\n\n  // for Windows, we need to invert the path separators from what a URI uses\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {\n    // has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = sep + path;\n  }\n\n  return host + path;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nvar isArgumentsObject = require('is-arguments');\nvar isGeneratorFunction = require('is-generator-function');\nvar whichTypedArray = require('which-typed-array');\nvar isTypedArray = require('is-typed-array');\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n","'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n","'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n","'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n","\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach (obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n\n","'use strict';\n\nvar possibleNames = [\n\t'BigInt64Array',\n\t'BigUint64Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Int8Array',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray'\n];\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\n\nmodule.exports = function availableTypedArrays() {\n\tvar out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n","'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","exports.interopDefault = function(a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function(source, dest) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    // Skip duplicate re-exports when they have the same value.\n    if (key in dest && dest[key] === source[key]) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function(dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {\r\n    createWebBus, JDBus,\r\n} from \"jacdac-ts\";\r\n\r\nlet bus: JDBus;\r\n\r\nexport let initBus = (): JDBus => {\r\n    initBus = () => { throw \"multiple initialization\" };\r\n    bus = createWebBus();\r\n    return bus;\r\n}\r\n"],"names":["SystemReadingThreshold","SystemStatusCodes","SystemCmd","SystemReg","SystemEvent","BaseReg","BaseEvent","SensorReg","AccelerometerReg","AccelerometerEvent","ArcadeGamepadButton","ArcadeGamepadReg","ArcadeGamepadEvent","ArcadeSoundCmd","ArcadeSoundReg","AzureIotHubHealthConnectionStatus","AzureIotHubHealthReg","AzureIotHubHealthCmd","AzureIotHubHealthEvent","BarcodeReaderFormat","BarcodeReaderReg","BarcodeReaderEvent","BarometerReg","BitRadioReg","BitRadioCmd","BootloaderError","BootloaderCmd","ButtonReg","ButtonEvent","BuzzerReg","BuzzerCmd","CapacitiveButtonReg","CapacitiveButtonCmd","CharacterScreenVariant","CharacterScreenTextDirection","CharacterScreenReg","CharacterScreenCmd","CodalMessageBusCmd","CodalMessageBusEvent","ColorReg","CompassReg","CompassCmd","ControlAnnounceFlags","ControlCmd","ControlReg","DimmerVariant","DimmerReg","DistanceVariant","DistanceReg","DmxReg","DmxCmd","DotMatrixVariant","DotMatrixReg","ECO2Variant","ECO2Reg","FlexVariant","FlexReg","GyroscopeReg","HeartRateVariant","HeartRateReg","HidAdapterReg","HidAdapterCmd","HidAdapterEvent","HidKeyboardModifiers","HidKeyboardAction","HidKeyboardCmd","HidMouseButton","HidMouseButtonEvent","HidMouseCmd","HumidityReg","IlluminanceReg","IndexedScreenCmd","IndexedScreenReg","JoystickButtons","JoystickVariant","JoystickReg","JoystickEvent","LedVariant","LedCmd","LedReg","LedPixelLightType","LedPixelVariant","LedPixelReg","LedPixelCmd","LightLevelVariant","LightLevelReg","LoggerPriority","LoggerReg","LoggerCmd","MagnetometerReg","MagnetometerCmd","MatrixKeypadVariant","MatrixKeypadReg","MatrixKeypadEvent","MicrophoneCmd","MicrophoneReg","MidiOutputReg","MidiOutputCmd","ModelRunnerModelFormat","ModelRunnerCmd","ModelRunnerReg","MotionVariant","MotionReg","MotionEvent","MotorReg","MultitouchReg","MultitouchEvent","PotentiometerVariant","PotentiometerReg","PowerPowerStatus","PowerReg","PowerCmd","PowerEvent","PressureButtonReg","ProtoTestReg","ProtoTestEvent","ProtoTestCmd","PulseOximeterReg","RainGaugeReg","RealTimeClockVariant","RealTimeClockReg","RealTimeClockCmd","ReflectedLightVariant","ReflectedLightReg","ReflectedLightEvent","RelayVariant","RelayReg","RelayEvent","RngVariant","RngReg","RoleManagerReg","RoleManagerCmd","RoleManagerEvent","RotaryEncoderReg","RoverReg","SensorAggregatorSampleType","SensorAggregatorReg","ServoReg","SettingsCmd","SettingsEvent","SevenSegmentDisplayReg","SevenSegmentDisplayCmd","SoilMoistureVariant","SoilMoistureReg","SolenoidVariant","SolenoidReg","SoundLevelReg","SoundLevelEvent","SoundPlayerReg","SoundPlayerCmd","SoundSpectrumReg","SpeechSynthesisReg","SpeechSynthesisCmd","SwitchVariant","SwitchReg","SwitchEvent","TcpTcpError","TcpCmd","TcpPipeCmd","ThermocoupleVariant","ThermocoupleReg","ThermometerVariant","ThermometerReg","TrafficLightReg","TvocReg","UvIndexVariant","UvIndexReg","VerifiedTelemetryStatus","VerifiedTelemetryFingerprintType","VerifiedTelemetryReg","VerifiedTelemetryCmd","VerifiedTelemetryEvent","VibrationMotorReg","VibrationMotorCmd","WaterLevelVariant","WaterLevelReg","WeightScaleVariant","WeightScaleReg","WeightScaleCmd","WifiAPFlags","WifiCmd","WifiReg","WifiEvent","WindDirectionReg","WindSpeedReg","toHex","isRegister","prettyUnit","NumberFormat","RegisterType","warn","ConnectionState","VibrationMotor","U.delay","ServiceTwinRegisterFlag","EventHandlers","EventEmitter","init","call","this","$getMaxListeners","that","undefined","_maxListeners","defaultMaxListeners","emitNone","handler","isFn","self","len","length","listeners","arrayClone","i","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","args","apply","_addListener","target","type","listener","prepend","m","events","existing","e","TypeError","_events","newListener","emit","_eventsCount","unshift","push","warned","w","Error","name","emitter","count","console","log","_onceWrap","fired","g","removeListener","arguments","listenerCount","evlistener","arr","copy","Array","prototype","Object","create","usingDomains","domain","active","Domain","getPrototypeOf","setMaxListeners","n","isNaN","getMaxListeners","er","doError","error","err","context","domainEmitter","domainThrown","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","index","k","pop","spliceOne","removeAllListeners","key","keys","ret","unwrapListeners","eventNames","Reflect","ownKeys","EventDispatcher","[object Object]","handleEvent","isEventListenerObject","super","callback","event","USBConfiguration","configurationValue","configurationName","interfaces","USBInterface","interfaceNumber","alternates","_handle","claimed","_claimed","alternate","find","alternateSetting","_currentAlternate","adapter","selectAlternateInterface","then","claimInterface","releaseInterface","USBAlternateInterface","interfaceClass","interfaceSubclass","interfaceProtocol","interfaceName","endpoints","USBEndpoint","endpointNumber","direction","packetSize","USBDevice","usbVersionMajor","usbVersionMinor","usbVersionSubminor","deviceClass","deviceSubclass","deviceProtocol","vendorId","productId","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","manufacturerName","productName","serialNumber","_configurations","configurations","url","_maxPacketSize","_currentConfiguration","configuration","connected","getConnected","opened","getOpened","endpoint","iface","some","usbInterface","usbEndpoint","setup","recipient","LIBUSB_ENDPOINT_IN","result","getEndpoint","Promise","resolve","reject","open","catch","releaseInterfacePromises","map","all","_error","close","selectConfiguration","forEach","reset","setupError","setupInvalid","controlTransferIn","data","controlTransferOut","clearHalt","transferIn","transferOut","packetLengths","isochronousTransferIn","isochronousTransferOut","DEFAULT_DELAY_TIMEOUT","DEFAULT_RETRY_COUNT","CONSTANTS","WEB_UUID","LIBUSB_DT_BOS","LIBUSB_DT_BOS_SIZE","LIBUSB_TRANSFER_TYPE_MASK","USB_VERSION","CAPABILITY_VERSION","URL_REQUEST_TYPE","URL_REQUEST_INDEX","CLEAR_FEATURE","ENDPOINT_HALT","USBAdapter","attachCallback","device","loadDevice","loadedDevice","handle","getDeviceHandle","devicetoUSBDevice","usbDevice","EVENT_DEVICE_CONNECT","detachCallback","devices","EVENT_DEVICE_DISCONNECT","busNumber","deviceAddress","task","params","reduce","chain","param","results","bind","descriptors","descriptor","timeout","_reject","setTimeout","fn","retries","delay","retryPromise","retryError","preFilters","getDeviceList","preFilterDevices","serialPromises","filter","deviceDescriptor","idVendor","idProduct","configDescriptor","allConfigDescriptors","getCapabilities","capabilities","getWebCapability","capability","getWebUrl","openDevice","uuid","decodeUUID","slice","version","readUInt16LE","buffer","data1","readUInt32LE","toString","data2","data3","data4","readUInt8","data5","join","suppressErrors","byteLength","vendor","page","controlTransfer","scheme","configs","serialDevicePromises","configToUSBConfiguration","deviceVersion","decodeVersion","bcdDevice","usbVersion","bcdUSB","getStringDescriptor","iManufacturer","iProduct","iSerialNumber","props","bMaxPacketSize0","bDeviceClass","bDeviceSubClass","bDeviceProtocol","major","minor","sub","bConfigurationValue","hex","parseInt","substr","arrayBuffer","Uint8Array","DataView","bufferSource","ArrayBuffer","isView","byteOffset","Buffer","from","address","LIBUSB_ENDPOINT_OUT","epoint","bEndpointAddress","bmAttributes","LIBUSB_TRANSFER_TYPE_BULK","LIBUSB_TRANSFER_TYPE_INTERRUPT","wMaxPacketSize","iInterface","bAlternateSetting","bInterfaceClass","bInterfaceSubClass","bInterfaceProtocol","endpointToUSBEndpoint","interfaceToUSBAlternateInterface","bInterfaceNumber","iConfiguration","allInterfaces","interfacesToUSBInterface","LIBUSB_RECIPIENT_DEVICE","LIBUSB_RECIPIENT_INTERFACE","LIBUSB_RECIPIENT_ENDPOINT","LIBUSB_RECIPIENT_OTHER","requestType","LIBUSB_REQUEST_TYPE_STANDARD","LIBUSB_REQUEST_TYPE_CLASS","LIBUSB_REQUEST_TYPE_VENDOR","getDevice","loadDevices","id","setConfiguration","interface","claim","release","setAltSetting","controlTransferParamsToType","request","value","errno","LIBUSB_TRANSFER_STALL","status","LIBUSB_TRANSFER_OVERFLOW","bufferToDataView","bufferSourceToBuffer","bytesWritten","wIndex","getInEndpoint","transfer","getOutEndpoint","_endpointNumber","_packetLengths","_resolve","_data","DOMEvent","bubbles","cancelable","defaultPrevented","W3CUSBConnectionEvent","eventInitDict","initEvent","USB","options","devicesFound","deviceConnectCallback","replaceAllowedDevice","dispatchEvent","onconnect","deviceDisconnectCallback","allowedDevices","ondisconnect","_onconnect","removeEventListener","addEventListener","_ondisconnect","isSameDevice","device1","device2","filters","classCode","subclassCode","protocolCode","listUSBDevices","constructor","every","filterDevice","selectFn","usb"],"version":3,"file":"index.b31310b1.js.map","sourceRoot":"/__parcel_source_root/"}