function e(e,t,i,n){Object.defineProperty(e,t,{get:i,set:n,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},i={},n={},r=t.parcelRequire8282;null==r&&((r=function(e){if(e in i)return i[e].exports;if(e in n){var t=n[e];delete n[e];var r={id:e,exports:{}};return i[e]=r,t.call(r.exports,r,r.exports),r.exports}var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=function(e,t){n[e]=t},t.parcelRequire8282=r);var s={};Object.defineProperty(s,"__esModule",{value:!0});var a,o,d,c,l,u,p,m;s.SystemReadingThreshold=void 0,(a=s.SystemReadingThreshold||(s.SystemReadingThreshold={}))[a.Neutral=1]="Neutral",a[a.Inactive=2]="Inactive",a[a.Active=3]="Active",s.SystemStatusCodes=void 0,(o=s.SystemStatusCodes||(s.SystemStatusCodes={}))[o.Ready=0]="Ready",o[o.Initializing=1]="Initializing",o[o.Calibrating=2]="Calibrating",o[o.Sleeping=3]="Sleeping",o[o.WaitingForInput=4]="WaitingForInput",o[o.CalibrationNeeded=100]="CalibrationNeeded",s.SystemCmd=void 0,(d=s.SystemCmd||(s.SystemCmd={}))[d.Announce=0]="Announce",d[d.GetRegister=4096]="GetRegister",d[d.SetRegister=8192]="SetRegister",d[d.Event=1]="Event",d[d.Calibrate=2]="Calibrate",s.SystemReg=void 0,(c=s.SystemReg||(s.SystemReg={}))[c.Intensity=1]="Intensity",c[c.Value=2]="Value",c[c.MinValue=272]="MinValue",c[c.MaxValue=273]="MaxValue",c[c.MaxPower=7]="MaxPower",c[c.StreamingSamples=3]="StreamingSamples",c[c.StreamingInterval=4]="StreamingInterval",c[c.Reading=257]="Reading",c[c.MinReading=260]="MinReading",c[c.MaxReading=261]="MaxReading",c[c.ReadingError=262]="ReadingError",c[c.ReadingResolution=264]="ReadingResolution",c[c.InactiveThreshold=5]="InactiveThreshold",c[c.ActiveThreshold=6]="ActiveThreshold",c[c.StreamingPreferredInterval=258]="StreamingPreferredInterval",c[c.Variant=263]="Variant",c[c.StatusCode=259]="StatusCode",c[c.InstanceName=265]="InstanceName",s.SystemEvent=void 0,(l=s.SystemEvent||(s.SystemEvent={}))[l.Active=1]="Active",l[l.Inactive=2]="Inactive",l[l.Change=3]="Change",l[l.StatusCodeChanged=4]="StatusCodeChanged",l[l.Neutral=7]="Neutral",s.BaseReg=void 0,(u=s.BaseReg||(s.BaseReg={}))[u.InstanceName=265]="InstanceName",u[u.StatusCode=259]="StatusCode",s.BaseEvent=void 0,(p=s.BaseEvent||(s.BaseEvent={}))[p.StatusCodeChanged=4]="StatusCodeChanged",s.SensorReg=void 0,(m=s.SensorReg||(s.SensorReg={}))[m.StreamingSamples=3]="StreamingSamples",m[m.StreamingInterval=4]="StreamingInterval",m[m.StreamingPreferredInterval=258]="StreamingPreferredInterval";var h,f;s.AccelerometerReg=void 0,(h=s.AccelerometerReg||(s.AccelerometerReg={}))[h.Forces=257]="Forces",h[h.ForcesError=262]="ForcesError",h[h.MaxForce=128]="MaxForce",s.AccelerometerEvent=void 0,(f=s.AccelerometerEvent||(s.AccelerometerEvent={}))[f.TiltUp=129]="TiltUp",f[f.TiltDown=130]="TiltDown",f[f.TiltLeft=131]="TiltLeft",f[f.TiltRight=132]="TiltRight",f[f.FaceUp=133]="FaceUp",f[f.FaceDown=134]="FaceDown",f[f.Freefall=135]="Freefall",f[f.Shake=139]="Shake",f[f.Force2g=140]="Force2g",f[f.Force3g=136]="Force3g",f[f.Force6g=137]="Force6g",f[f.Force8g=138]="Force8g";var g,v,y;s.ArcadeGamepadButton=void 0,(g=s.ArcadeGamepadButton||(s.ArcadeGamepadButton={}))[g.Left=1]="Left",g[g.Up=2]="Up",g[g.Right=3]="Right",g[g.Down=4]="Down",g[g.A=5]="A",g[g.B=6]="B",g[g.Menu=7]="Menu",g[g.Select=8]="Select",g[g.Reset=9]="Reset",g[g.Exit=10]="Exit",s.ArcadeGamepadReg=void 0,(v=s.ArcadeGamepadReg||(s.ArcadeGamepadReg={}))[v.Buttons=257]="Buttons",v[v.AvailableButtons=384]="AvailableButtons",s.ArcadeGamepadEvent=void 0,(y=s.ArcadeGamepadEvent||(s.ArcadeGamepadEvent={}))[y.Down=1]="Down",y[y.Up=2]="Up";var _,b;s.ArcadeSoundCmd=void 0,(_=s.ArcadeSoundCmd||(s.ArcadeSoundCmd={}))[_.Play=128]="Play",s.ArcadeSoundReg=void 0,(b=s.ArcadeSoundReg||(s.ArcadeSoundReg={}))[b.SampleRate=128]="SampleRate",b[b.BufferSize=384]="BufferSize",b[b.BufferPending=385]="BufferPending";var k,w,S,T;s.AzureIotHubHealthConnectionStatus=void 0,(k=s.AzureIotHubHealthConnectionStatus||(s.AzureIotHubHealthConnectionStatus={}))[k.Connected=1]="Connected",k[k.Disconnected=2]="Disconnected",k[k.Connecting=3]="Connecting",k[k.Disconnecting=4]="Disconnecting",s.AzureIotHubHealthReg=void 0,(w=s.AzureIotHubHealthReg||(s.AzureIotHubHealthReg={}))[w.HubName=384]="HubName",w[w.HubDeviceId=385]="HubDeviceId",w[w.ConnectionStatus=386]="ConnectionStatus",s.AzureIotHubHealthCmd=void 0,(S=s.AzureIotHubHealthCmd||(s.AzureIotHubHealthCmd={}))[S.Connect=129]="Connect",S[S.Disconnect=130]="Disconnect",S[S.SetConnectionString=134]="SetConnectionString",s.AzureIotHubHealthEvent=void 0,(T=s.AzureIotHubHealthEvent||(s.AzureIotHubHealthEvent={}))[T.ConnectionStatusChange=3]="ConnectionStatusChange";var R,C,I;s.BarcodeReaderFormat=void 0,(R=s.BarcodeReaderFormat||(s.BarcodeReaderFormat={}))[R.Aztec=1]="Aztec",R[R.Code128=2]="Code128",R[R.Code39=3]="Code39",R[R.Code93=4]="Code93",R[R.Codabar=5]="Codabar",R[R.DataMatrix=6]="DataMatrix",R[R.Ean13=8]="Ean13",R[R.Ean8=9]="Ean8",R[R.ITF=10]="ITF",R[R.Pdf417=11]="Pdf417",R[R.QrCode=12]="QrCode",R[R.UpcA=13]="UpcA",R[R.UpcE=14]="UpcE",s.BarcodeReaderReg=void 0,(C=s.BarcodeReaderReg||(s.BarcodeReaderReg={}))[C.Enabled=1]="Enabled",C[C.Formats=384]="Formats",s.BarcodeReaderEvent=void 0,(I=s.BarcodeReaderEvent||(s.BarcodeReaderEvent={}))[I.Detect=1]="Detect";var E;s.BarometerReg=void 0,(E=s.BarometerReg||(s.BarometerReg={}))[E.Pressure=257]="Pressure",E[E.PressureError=262]="PressureError";var A,N;s.BitRadioReg=void 0,(A=s.BitRadioReg||(s.BitRadioReg={}))[A.Enabled=1]="Enabled",A[A.Group=128]="Group",A[A.TransmissionPower=129]="TransmissionPower",A[A.FrequencyBand=130]="FrequencyBand",s.BitRadioCmd=void 0,(N=s.BitRadioCmd||(s.BitRadioCmd={}))[N.SendString=128]="SendString",N[N.SendNumber=129]="SendNumber",N[N.SendValue=130]="SendValue",N[N.SendBuffer=131]="SendBuffer",N[N.StringReceived=144]="StringReceived",N[N.NumberReceived=145]="NumberReceived",N[N.BufferReceived=146]="BufferReceived";const x=536516936;var F,P;s.BootloaderError=void 0,(F=s.BootloaderError||(s.BootloaderError={}))[F.NoError=0]="NoError",F[F.PacketTooSmall=1]="PacketTooSmall",F[F.OutOfFlashableRange=2]="OutOfFlashableRange",F[F.InvalidPageOffset=3]="InvalidPageOffset",F[F.NotPageAligned=4]="NotPageAligned",s.BootloaderCmd=void 0,(P=s.BootloaderCmd||(s.BootloaderCmd={}))[P.Info=0]="Info",P[P.SetSession=129]="SetSession",P[P.PageData=128]="PageData";var M,D;s.ButtonReg=void 0,(M=s.ButtonReg||(s.ButtonReg={}))[M.Pressure=257]="Pressure",M[M.Analog=384]="Analog",M[M.Pressed=385]="Pressed",s.ButtonEvent=void 0,(D=s.ButtonEvent||(s.ButtonEvent={}))[D.Down=1]="Down",D[D.Up=2]="Up",D[D.Hold=129]="Hold";var L,B;s.BuzzerReg=void 0,(L=s.BuzzerReg||(s.BuzzerReg={}))[L.Volume=1]="Volume",s.BuzzerCmd=void 0,(B=s.BuzzerCmd||(s.BuzzerCmd={}))[B.PlayTone=128]="PlayTone",B[B.PlayNote=129]="PlayNote";var V,O;s.CapacitiveButtonReg=void 0,(V=s.CapacitiveButtonReg||(s.CapacitiveButtonReg={}))[V.Threshold=6]="Threshold",s.CapacitiveButtonCmd=void 0,(O=s.CapacitiveButtonCmd||(s.CapacitiveButtonCmd={}))[O.Calibrate=2]="Calibrate";var U,j,z,$;s.CharacterScreenVariant=void 0,(U=s.CharacterScreenVariant||(s.CharacterScreenVariant={}))[U.LCD=1]="LCD",U[U.OLED=2]="OLED",U[U.Braille=3]="Braille",s.CharacterScreenTextDirection=void 0,(j=s.CharacterScreenTextDirection||(s.CharacterScreenTextDirection={}))[j.LeftToRight=1]="LeftToRight",j[j.RightToLeft=2]="RightToLeft",s.CharacterScreenReg=void 0,(z=s.CharacterScreenReg||(s.CharacterScreenReg={}))[z.Message=2]="Message",z[z.Brightness=1]="Brightness",z[z.Variant=263]="Variant",z[z.TextDirection=130]="TextDirection",z[z.Rows=384]="Rows",z[z.Columns=385]="Columns",s.CharacterScreenCmd=void 0,($=s.CharacterScreenCmd||(s.CharacterScreenCmd={}))[$.SetLine=128]="SetLine",$[$.Clear=129]="Clear";var W,H;s.CodalMessageBusCmd=void 0,(W=s.CodalMessageBusCmd||(s.CodalMessageBusCmd={}))[W.Send=128]="Send",s.CodalMessageBusEvent=void 0,(H=s.CodalMessageBusEvent||(s.CodalMessageBusEvent={}))[H.Message=128]="Message";var J;s.ColorReg=void 0,(J=s.ColorReg||(s.ColorReg={}))[J.Color=257]="Color";var q,G;s.CompassReg=void 0,(q=s.CompassReg||(s.CompassReg={}))[q.Heading=257]="Heading",q[q.Enabled=1]="Enabled",q[q.HeadingError=262]="HeadingError",s.CompassCmd=void 0,(G=s.CompassCmd||(s.CompassCmd={}))[G.Calibrate=2]="Calibrate";const K=0;var X,Y,Q;s.ControlAnnounceFlags=void 0,(X=s.ControlAnnounceFlags||(s.ControlAnnounceFlags={}))[X.RestartCounterSteady=15]="RestartCounterSteady",X[X.RestartCounter1=1]="RestartCounter1",X[X.RestartCounter2=2]="RestartCounter2",X[X.RestartCounter4=4]="RestartCounter4",X[X.RestartCounter8=8]="RestartCounter8",X[X.StatusLightNone=0]="StatusLightNone",X[X.StatusLightMono=16]="StatusLightMono",X[X.StatusLightRgbNoFade=32]="StatusLightRgbNoFade",X[X.StatusLightRgbFade=48]="StatusLightRgbFade",X[X.SupportsACK=256]="SupportsACK",X[X.SupportsBroadcast=512]="SupportsBroadcast",X[X.SupportsFrames=1024]="SupportsFrames",X[X.IsClient=2048]="IsClient",s.ControlCmd=void 0,(Y=s.ControlCmd||(s.ControlCmd={}))[Y.Services=0]="Services",Y[Y.Noop=128]="Noop",Y[Y.Identify=129]="Identify",Y[Y.Reset=130]="Reset",Y[Y.FloodPing=131]="FloodPing",Y[Y.SetStatusLight=132]="SetStatusLight",Y[Y.Proxy=133]="Proxy",s.ControlReg=void 0,(Q=s.ControlReg||(s.ControlReg={}))[Q.ResetIn=128]="ResetIn",Q[Q.DeviceDescription=384]="DeviceDescription",Q[Q.ProductIdentifier=385]="ProductIdentifier",Q[Q.BootloaderProductIdentifier=388]="BootloaderProductIdentifier",Q[Q.FirmwareVersion=389]="FirmwareVersion",Q[Q.McuTemperature=386]="McuTemperature",Q[Q.Uptime=390]="Uptime";var Z,ee;s.DimmerVariant=void 0,(Z=s.DimmerVariant||(s.DimmerVariant={}))[Z.Light=1]="Light",Z[Z.Fan=2]="Fan",Z[Z.Pump=3]="Pump",s.DimmerReg=void 0,(ee=s.DimmerReg||(s.DimmerReg={}))[ee.Intensity=1]="Intensity",ee[ee.Variant=263]="Variant";var te,ie;s.DistanceVariant=void 0,(te=s.DistanceVariant||(s.DistanceVariant={}))[te.Ultrasonic=1]="Ultrasonic",te[te.Infrared=2]="Infrared",te[te.LiDAR=3]="LiDAR",te[te.Laser=4]="Laser",s.DistanceReg=void 0,(ie=s.DistanceReg||(s.DistanceReg={}))[ie.Distance=257]="Distance",ie[ie.MinRange=260]="MinRange",ie[ie.MaxRange=261]="MaxRange",ie[ie.Variant=263]="Variant";var ne,re;s.DmxReg=void 0,(ne=s.DmxReg||(s.DmxReg={}))[ne.Enabled=1]="Enabled",s.DmxCmd=void 0,(re=s.DmxCmd||(s.DmxCmd={}))[re.Send=128]="Send";var se,ae;s.DotMatrixVariant=void 0,(se=s.DotMatrixVariant||(s.DotMatrixVariant={}))[se.LED=1]="LED",se[se.Braille=2]="Braille",s.DotMatrixReg=void 0,(ae=s.DotMatrixReg||(s.DotMatrixReg={}))[ae.Dots=2]="Dots",ae[ae.Brightness=1]="Brightness",ae[ae.Rows=385]="Rows",ae[ae.Columns=386]="Columns",ae[ae.Variant=263]="Variant";var oe,de;s.ECO2Variant=void 0,(oe=s.ECO2Variant||(s.ECO2Variant={}))[oe.VOC=1]="VOC",oe[oe.NDIR=2]="NDIR",s.ECO2Reg=void 0,(de=s.ECO2Reg||(s.ECO2Reg={}))[de.ECO2=257]="ECO2",de[de.ECO2Error=262]="ECO2Error",de[de.MinECO2=260]="MinECO2",de[de.MaxECO2=261]="MaxECO2",de[de.ConditioningPeriod=384]="ConditioningPeriod",de[de.Variant=263]="Variant";var ce,le;s.FlexVariant=void 0,(ce=s.FlexVariant||(s.FlexVariant={}))[ce.Linear22Inch=1]="Linear22Inch",ce[ce.Linear45Inch=2]="Linear45Inch",s.FlexReg=void 0,(le=s.FlexReg||(s.FlexReg={}))[le.Bending=257]="Bending",le[le.Variant=263]="Variant";var ue;s.GyroscopeReg=void 0,(ue=s.GyroscopeReg||(s.GyroscopeReg={}))[ue.RotationRates=257]="RotationRates",ue[ue.RotationRatesError=262]="RotationRatesError",ue[ue.MaxRate=128]="MaxRate";var pe,me;s.HeartRateVariant=void 0,(pe=s.HeartRateVariant||(s.HeartRateVariant={}))[pe.Finger=1]="Finger",pe[pe.Chest=2]="Chest",pe[pe.Wrist=3]="Wrist",pe[pe.Pump=4]="Pump",pe[pe.WebCam=5]="WebCam",s.HeartRateReg=void 0,(me=s.HeartRateReg||(s.HeartRateReg={}))[me.HeartRate=257]="HeartRate",me[me.HeartRateError=262]="HeartRateError",me[me.Variant=263]="Variant";var he,fe,ge;s.HidAdapterReg=void 0,(he=s.HidAdapterReg||(s.HidAdapterReg={}))[he.NumConfigurations=128]="NumConfigurations",he[he.CurrentConfiguration=129]="CurrentConfiguration",s.HidAdapterCmd=void 0,(fe=s.HidAdapterCmd||(s.HidAdapterCmd={}))[fe.GetConfiguration=128]="GetConfiguration",fe[fe.SetBinding=130]="SetBinding",fe[fe.ClearBinding=131]="ClearBinding",fe[fe.ClearConfiguration=132]="ClearConfiguration",fe[fe.Clear=133]="Clear",s.HidAdapterEvent=void 0,(ge=s.HidAdapterEvent||(s.HidAdapterEvent={}))[ge.Changed=3]="Changed";var ve,ye,_e;s.HidKeyboardModifiers=void 0,(ve=s.HidKeyboardModifiers||(s.HidKeyboardModifiers={}))[ve.None=0]="None",ve[ve.LeftControl=1]="LeftControl",ve[ve.LeftShift=2]="LeftShift",ve[ve.LeftAlt=4]="LeftAlt",ve[ve.LeftGUI=8]="LeftGUI",ve[ve.RightControl=16]="RightControl",ve[ve.RightShift=32]="RightShift",ve[ve.RightAlt=64]="RightAlt",ve[ve.RightGUI=128]="RightGUI",s.HidKeyboardAction=void 0,(ye=s.HidKeyboardAction||(s.HidKeyboardAction={}))[ye.Press=0]="Press",ye[ye.Up=1]="Up",ye[ye.Down=2]="Down",s.HidKeyboardCmd=void 0,(_e=s.HidKeyboardCmd||(s.HidKeyboardCmd={}))[_e.Key=128]="Key",_e[_e.Clear=129]="Clear";var be,ke,we;s.HidMouseButton=void 0,(be=s.HidMouseButton||(s.HidMouseButton={}))[be.Left=1]="Left",be[be.Right=2]="Right",be[be.Middle=4]="Middle",s.HidMouseButtonEvent=void 0,(ke=s.HidMouseButtonEvent||(s.HidMouseButtonEvent={}))[ke.Up=1]="Up",ke[ke.Down=2]="Down",ke[ke.Click=3]="Click",ke[ke.DoubleClick=4]="DoubleClick",s.HidMouseCmd=void 0,(we=s.HidMouseCmd||(s.HidMouseCmd={}))[we.SetButton=128]="SetButton",we[we.Move=129]="Move",we[we.Wheel=130]="Wheel";var Se;s.HumidityReg=void 0,(Se=s.HumidityReg||(s.HumidityReg={}))[Se.Humidity=257]="Humidity",Se[Se.HumidityError=262]="HumidityError",Se[Se.MinHumidity=260]="MinHumidity",Se[Se.MaxHumidity=261]="MaxHumidity";var Te;s.IlluminanceReg=void 0,(Te=s.IlluminanceReg||(s.IlluminanceReg={}))[Te.Light=257]="Light",Te[Te.LightError=262]="LightError";var Re,Ce;s.IndexedScreenCmd=void 0,(Re=s.IndexedScreenCmd||(s.IndexedScreenCmd={}))[Re.StartUpdate=129]="StartUpdate",Re[Re.SetPixels=131]="SetPixels",s.IndexedScreenReg=void 0,(Ce=s.IndexedScreenReg||(s.IndexedScreenReg={}))[Ce.Brightness=1]="Brightness",Ce[Ce.Palette=128]="Palette",Ce[Ce.BitsPerPixel=384]="BitsPerPixel",Ce[Ce.Width=385]="Width",Ce[Ce.Height=386]="Height",Ce[Ce.WidthMajor=129]="WidthMajor",Ce[Ce.UpSampling=130]="UpSampling",Ce[Ce.Rotation=131]="Rotation";const Ie=504728043;var Ee,Ae,Ne,xe;s.JoystickButtons=void 0,(Ee=s.JoystickButtons||(s.JoystickButtons={}))[Ee.Left=1]="Left",Ee[Ee.Up=2]="Up",Ee[Ee.Right=4]="Right",Ee[Ee.Down=8]="Down",Ee[Ee.A=16]="A",Ee[Ee.B=32]="B",Ee[Ee.Menu=64]="Menu",Ee[Ee.Select=128]="Select",Ee[Ee.Reset=256]="Reset",Ee[Ee.Exit=512]="Exit",Ee[Ee.X=1024]="X",Ee[Ee.Y=2048]="Y",s.JoystickVariant=void 0,(Ae=s.JoystickVariant||(s.JoystickVariant={}))[Ae.Thumb=1]="Thumb",Ae[Ae.ArcadeBall=2]="ArcadeBall",Ae[Ae.ArcadeStick=3]="ArcadeStick",Ae[Ae.Gamepad=4]="Gamepad",s.JoystickReg=void 0,(Ne=s.JoystickReg||(s.JoystickReg={}))[Ne.Direction=257]="Direction",Ne[Ne.Variant=263]="Variant",Ne[Ne.ButtonsAvailable=384]="ButtonsAvailable",s.JoystickEvent=void 0,(xe=s.JoystickEvent||(s.JoystickEvent={}))[xe.ButtonsChanged=3]="ButtonsChanged";var Fe,Pe,Me;s.LedVariant=void 0,(Fe=s.LedVariant||(s.LedVariant={}))[Fe.ThroughHole=1]="ThroughHole",Fe[Fe.SMD=2]="SMD",Fe[Fe.Power=3]="Power",Fe[Fe.Bead=4]="Bead",s.LedCmd=void 0,(Pe=s.LedCmd||(s.LedCmd={}))[Pe.Animate=128]="Animate",s.LedReg=void 0,(Me=s.LedReg||(s.LedReg={}))[Me.Color=384]="Color",Me[Me.MaxPower=7]="MaxPower",Me[Me.LedCount=387]="LedCount",Me[Me.WaveLength=385]="WaveLength",Me[Me.LuminousIntensity=386]="LuminousIntensity",Me[Me.Variant=263]="Variant";var De,Le,Be,Ve;s.LedPixelLightType=void 0,(De=s.LedPixelLightType||(s.LedPixelLightType={}))[De.WS2812B_GRB=0]="WS2812B_GRB",De[De.APA102=16]="APA102",De[De.SK9822=17]="SK9822",s.LedPixelVariant=void 0,(Le=s.LedPixelVariant||(s.LedPixelVariant={}))[Le.Strip=1]="Strip",Le[Le.Ring=2]="Ring",Le[Le.Stick=3]="Stick",Le[Le.Jewel=4]="Jewel",Le[Le.Matrix=5]="Matrix",s.LedPixelReg=void 0,(Be=s.LedPixelReg||(s.LedPixelReg={}))[Be.Brightness=1]="Brightness",Be[Be.ActualBrightness=384]="ActualBrightness",Be[Be.LightType=128]="LightType",Be[Be.NumPixels=129]="NumPixels",Be[Be.NumColumns=131]="NumColumns",Be[Be.MaxPower=7]="MaxPower",Be[Be.MaxPixels=385]="MaxPixels",Be[Be.NumRepeats=130]="NumRepeats",Be[Be.Variant=263]="Variant",s.LedPixelCmd=void 0,(Ve=s.LedPixelCmd||(s.LedPixelCmd={}))[Ve.Run=129]="Run";var Oe,Ue;s.LightLevelVariant=void 0,(Oe=s.LightLevelVariant||(s.LightLevelVariant={}))[Oe.PhotoResistor=1]="PhotoResistor",Oe[Oe.LEDMatrix=2]="LEDMatrix",Oe[Oe.Ambient=3]="Ambient",s.LightLevelReg=void 0,(Ue=s.LightLevelReg||(s.LightLevelReg={}))[Ue.LightLevel=257]="LightLevel",Ue[Ue.Variant=263]="Variant";const je=316415946;var ze,$e,We;s.LoggerPriority=void 0,(ze=s.LoggerPriority||(s.LoggerPriority={}))[ze.Debug=0]="Debug",ze[ze.Log=1]="Log",ze[ze.Warning=2]="Warning",ze[ze.Error=3]="Error",ze[ze.Silent=4]="Silent",s.LoggerReg=void 0,($e=s.LoggerReg||(s.LoggerReg={}))[$e.MinPriority=128]="MinPriority",s.LoggerCmd=void 0,(We=s.LoggerCmd||(s.LoggerCmd={}))[We.Debug=128]="Debug",We[We.Log=129]="Log",We[We.Warn=130]="Warn",We[We.Error=131]="Error";var He,Je;s.MagnetometerReg=void 0,(He=s.MagnetometerReg||(s.MagnetometerReg={}))[He.Forces=257]="Forces",He[He.ForcesError=262]="ForcesError",s.MagnetometerCmd=void 0,(Je=s.MagnetometerCmd||(s.MagnetometerCmd={}))[Je.Calibrate=2]="Calibrate";var qe,Ge,Ke;s.MatrixKeypadVariant=void 0,(qe=s.MatrixKeypadVariant||(s.MatrixKeypadVariant={}))[qe.Membrane=1]="Membrane",qe[qe.Keyboard=2]="Keyboard",qe[qe.Elastomer=3]="Elastomer",qe[qe.ElastomerLEDPixel=4]="ElastomerLEDPixel",s.MatrixKeypadReg=void 0,(Ge=s.MatrixKeypadReg||(s.MatrixKeypadReg={}))[Ge.Pressed=257]="Pressed",Ge[Ge.Rows=384]="Rows",Ge[Ge.Columns=385]="Columns",Ge[Ge.Labels=386]="Labels",Ge[Ge.Variant=263]="Variant",s.MatrixKeypadEvent=void 0,(Ke=s.MatrixKeypadEvent||(s.MatrixKeypadEvent={}))[Ke.Down=1]="Down",Ke[Ke.Up=2]="Up",Ke[Ke.Click=128]="Click",Ke[Ke.LongClick=129]="LongClick";var Xe,Ye;s.MicrophoneCmd=void 0,(Xe=s.MicrophoneCmd||(s.MicrophoneCmd={}))[Xe.Sample=129]="Sample",s.MicrophoneReg=void 0,(Ye=s.MicrophoneReg||(s.MicrophoneReg={}))[Ye.SamplingPeriod=128]="SamplingPeriod";var Qe,Ze;s.MidiOutputReg=void 0,(Qe=s.MidiOutputReg||(s.MidiOutputReg={}))[Qe.Enabled=1]="Enabled",s.MidiOutputCmd=void 0,(Ze=s.MidiOutputCmd||(s.MidiOutputCmd={}))[Ze.Clear=128]="Clear",Ze[Ze.Send=129]="Send";var et,tt,it;s.ModelRunnerModelFormat=void 0,(et=s.ModelRunnerModelFormat||(s.ModelRunnerModelFormat={}))[et.TFLite=860636756]="TFLite",et[et.ML4F=809963362]="ML4F",et[et.EdgeImpulseCompiled=810961221]="EdgeImpulseCompiled",s.ModelRunnerCmd=void 0,(tt=s.ModelRunnerCmd||(s.ModelRunnerCmd={}))[tt.SetModel=128]="SetModel",tt[tt.Predict=129]="Predict",s.ModelRunnerReg=void 0,(it=s.ModelRunnerReg||(s.ModelRunnerReg={}))[it.AutoInvokeEvery=128]="AutoInvokeEvery",it[it.Outputs=257]="Outputs",it[it.InputShape=384]="InputShape",it[it.OutputShape=385]="OutputShape",it[it.LastRunTime=386]="LastRunTime",it[it.AllocatedArenaSize=387]="AllocatedArenaSize",it[it.ModelSize=388]="ModelSize",it[it.LastError=389]="LastError",it[it.Format=390]="Format",it[it.FormatVersion=391]="FormatVersion",it[it.Parallel=392]="Parallel";var nt,rt,st;s.MotionVariant=void 0,(nt=s.MotionVariant||(s.MotionVariant={}))[nt.PIR=1]="PIR",s.MotionReg=void 0,(rt=s.MotionReg||(s.MotionReg={}))[rt.Moving=257]="Moving",rt[rt.MaxDistance=384]="MaxDistance",rt[rt.Angle=385]="Angle",rt[rt.Variant=263]="Variant",s.MotionEvent=void 0,(st=s.MotionEvent||(s.MotionEvent={}))[st.Movement=1]="Movement";var at;s.MotorReg=void 0,(at=s.MotorReg||(s.MotorReg={}))[at.Duty=2]="Duty",at[at.Enabled=1]="Enabled",at[at.LoadTorque=384]="LoadTorque",at[at.LoadSpeed=385]="LoadSpeed";var ot,dt;s.MultitouchReg=void 0,(ot=s.MultitouchReg||(s.MultitouchReg={}))[ot.Capacity=257]="Capacity",s.MultitouchEvent=void 0,(dt=s.MultitouchEvent||(s.MultitouchEvent={}))[dt.Touch=1]="Touch",dt[dt.Release=2]="Release",dt[dt.Tap=128]="Tap",dt[dt.LongPress=129]="LongPress",dt[dt.SwipePos=144]="SwipePos",dt[dt.SwipeNeg=145]="SwipeNeg";var ct,lt;s.PotentiometerVariant=void 0,(ct=s.PotentiometerVariant||(s.PotentiometerVariant={}))[ct.Slider=1]="Slider",ct[ct.Rotary=2]="Rotary",s.PotentiometerReg=void 0,(lt=s.PotentiometerReg||(s.PotentiometerReg={}))[lt.Position=257]="Position",lt[lt.Variant=263]="Variant";var ut,pt,mt,ht;s.PowerPowerStatus=void 0,(ut=s.PowerPowerStatus||(s.PowerPowerStatus={}))[ut.Disallowed=0]="Disallowed",ut[ut.Powering=1]="Powering",ut[ut.Overload=2]="Overload",ut[ut.Overprovision=3]="Overprovision",s.PowerReg=void 0,(pt=s.PowerReg||(s.PowerReg={}))[pt.Allowed=1]="Allowed",pt[pt.MaxPower=7]="MaxPower",pt[pt.PowerStatus=385]="PowerStatus",pt[pt.CurrentDraw=257]="CurrentDraw",pt[pt.BatteryVoltage=384]="BatteryVoltage",pt[pt.BatteryCharge=386]="BatteryCharge",pt[pt.BatteryCapacity=387]="BatteryCapacity",pt[pt.KeepOnPulseDuration=128]="KeepOnPulseDuration",pt[pt.KeepOnPulsePeriod=129]="KeepOnPulsePeriod",s.PowerCmd=void 0,(mt=s.PowerCmd||(s.PowerCmd={}))[mt.Shutdown=128]="Shutdown",s.PowerEvent=void 0,(ht=s.PowerEvent||(s.PowerEvent={}))[ht.PowerStatusChanged=3]="PowerStatusChanged";var ft;s.PressureButtonReg=void 0,(ft=s.PressureButtonReg||(s.PressureButtonReg={}))[ft.Threshold=6]="Threshold";const gt=382158442;var vt,yt,_t;s.ProtoTestReg=void 0,(vt=s.ProtoTestReg||(s.ProtoTestReg={}))[vt.RwBool=129]="RwBool",vt[vt.RoBool=385]="RoBool",vt[vt.RwU32=130]="RwU32",vt[vt.RoU32=386]="RoU32",vt[vt.RwI32=131]="RwI32",vt[vt.RoI32=387]="RoI32",vt[vt.RwString=132]="RwString",vt[vt.RoString=388]="RoString",vt[vt.RwBytes=133]="RwBytes",vt[vt.RoBytes=389]="RoBytes",vt[vt.RwI8U8U16I32=134]="RwI8U8U16I32",vt[vt.RoI8U8U16I32=390]="RoI8U8U16I32",vt[vt.RwU8String=135]="RwU8String",vt[vt.RoU8String=391]="RoU8String",s.ProtoTestEvent=void 0,(yt=s.ProtoTestEvent||(s.ProtoTestEvent={}))[yt.EBool=129]="EBool",yt[yt.EU32=130]="EU32",yt[yt.EI32=131]="EI32",yt[yt.EString=132]="EString",yt[yt.EBytes=133]="EBytes",yt[yt.EI8U8U16I32=134]="EI8U8U16I32",yt[yt.EU8String=135]="EU8String",s.ProtoTestCmd=void 0,(_t=s.ProtoTestCmd||(s.ProtoTestCmd={}))[_t.CBool=129]="CBool",_t[_t.CU32=130]="CU32",_t[_t.CI32=131]="CI32",_t[_t.CString=132]="CString",_t[_t.CBytes=133]="CBytes",_t[_t.CI8U8U16I32=134]="CI8U8U16I32",_t[_t.CU8String=135]="CU8String",_t[_t.CReportPipe=144]="CReportPipe";var bt;s.PulseOximeterReg=void 0,(bt=s.PulseOximeterReg||(s.PulseOximeterReg={}))[bt.Oxygen=257]="Oxygen",bt[bt.OxygenError=262]="OxygenError";var kt;s.RainGaugeReg=void 0,(kt=s.RainGaugeReg||(s.RainGaugeReg={}))[kt.Precipitation=257]="Precipitation",kt[kt.PrecipitationPrecision=264]="PrecipitationPrecision";var wt,St,Tt;s.RealTimeClockVariant=void 0,(wt=s.RealTimeClockVariant||(s.RealTimeClockVariant={}))[wt.Computer=1]="Computer",wt[wt.Crystal=2]="Crystal",wt[wt.Cuckoo=3]="Cuckoo",s.RealTimeClockReg=void 0,(St=s.RealTimeClockReg||(s.RealTimeClockReg={}))[St.LocalTime=257]="LocalTime",St[St.Error=384]="Error",St[St.Precision=385]="Precision",St[St.Variant=263]="Variant",s.RealTimeClockCmd=void 0,(Tt=s.RealTimeClockCmd||(s.RealTimeClockCmd={}))[Tt.SetTime=128]="SetTime";var Rt,Ct,It;s.ReflectedLightVariant=void 0,(Rt=s.ReflectedLightVariant||(s.ReflectedLightVariant={}))[Rt.InfraredDigital=1]="InfraredDigital",Rt[Rt.InfraredAnalog=2]="InfraredAnalog",s.ReflectedLightReg=void 0,(Ct=s.ReflectedLightReg||(s.ReflectedLightReg={}))[Ct.Brightness=257]="Brightness",Ct[Ct.Variant=263]="Variant",s.ReflectedLightEvent=void 0,(It=s.ReflectedLightEvent||(s.ReflectedLightEvent={}))[It.Dark=2]="Dark",It[It.Light=1]="Light";var Et,At,Nt;s.RelayVariant=void 0,(Et=s.RelayVariant||(s.RelayVariant={}))[Et.Electromechanical=1]="Electromechanical",Et[Et.SolidState=2]="SolidState",Et[Et.Reed=3]="Reed",s.RelayReg=void 0,(At=s.RelayReg||(s.RelayReg={}))[At.Closed=1]="Closed",At[At.Variant=263]="Variant",At[At.MaxSwitchingCurrent=384]="MaxSwitchingCurrent",s.RelayEvent=void 0,(Nt=s.RelayEvent||(s.RelayEvent={}))[Nt.Active=1]="Active",Nt[Nt.Inactive=2]="Inactive";var xt,Ft;s.RngVariant=void 0,(xt=s.RngVariant||(s.RngVariant={}))[xt.Quantum=1]="Quantum",xt[xt.ADCNoise=2]="ADCNoise",xt[xt.WebCrypto=3]="WebCrypto",s.RngReg=void 0,(Ft=s.RngReg||(s.RngReg={}))[Ft.Random=384]="Random",Ft[Ft.Variant=263]="Variant";const Pt=508264038;var Mt,Dt,Lt;s.RoleManagerReg=void 0,(Mt=s.RoleManagerReg||(s.RoleManagerReg={}))[Mt.AutoBind=128]="AutoBind",Mt[Mt.AllRolesAllocated=385]="AllRolesAllocated",s.RoleManagerCmd=void 0,(Dt=s.RoleManagerCmd||(s.RoleManagerCmd={}))[Dt.GetRole=128]="GetRole",Dt[Dt.SetRole=129]="SetRole",Dt[Dt.ClearAllRoles=132]="ClearAllRoles",Dt[Dt.ListStoredRoles=130]="ListStoredRoles",Dt[Dt.ListRequiredRoles=131]="ListRequiredRoles",s.RoleManagerEvent=void 0,(Lt=s.RoleManagerEvent||(s.RoleManagerEvent={}))[Lt.Change=3]="Change";var Bt;s.RotaryEncoderReg=void 0,(Bt=s.RotaryEncoderReg||(s.RotaryEncoderReg={}))[Bt.Position=257]="Position",Bt[Bt.ClicksPerTurn=384]="ClicksPerTurn";var Vt;s.RoverReg=void 0,(Vt=s.RoverReg||(s.RoverReg={}))[Vt.Kinematics=257]="Kinematics";var Ot,Ut;s.SensorAggregatorSampleType=void 0,(Ot=s.SensorAggregatorSampleType||(s.SensorAggregatorSampleType={}))[Ot.U8=8]="U8",Ot[Ot.I8=136]="I8",Ot[Ot.U16=16]="U16",Ot[Ot.I16=144]="I16",Ot[Ot.U32=32]="U32",Ot[Ot.I32=160]="I32",s.SensorAggregatorReg=void 0,(Ut=s.SensorAggregatorReg||(s.SensorAggregatorReg={}))[Ut.Inputs=128]="Inputs",Ut[Ut.NumSamples=384]="NumSamples",Ut[Ut.SampleSize=385]="SampleSize",Ut[Ut.StreamingSamples=129]="StreamingSamples",Ut[Ut.CurrentSample=257]="CurrentSample";var jt;s.ServoReg=void 0,(jt=s.ServoReg||(s.ServoReg={}))[jt.Angle=2]="Angle",jt[jt.Enabled=1]="Enabled",jt[jt.Offset=129]="Offset",jt[jt.MinAngle=272]="MinAngle",jt[jt.MinPulse=131]="MinPulse",jt[jt.MaxAngle=273]="MaxAngle",jt[jt.MaxPulse=133]="MaxPulse",jt[jt.StallTorque=384]="StallTorque",jt[jt.ResponseSpeed=385]="ResponseSpeed",jt[jt.CurrentAngle=257]="CurrentAngle";const zt=285727818;var $t,Wt;s.SettingsCmd=void 0,($t=s.SettingsCmd||(s.SettingsCmd={}))[$t.Get=128]="Get",$t[$t.Set=129]="Set",$t[$t.Delete=132]="Delete",$t[$t.ListKeys=130]="ListKeys",$t[$t.List=131]="List",$t[$t.Clear=133]="Clear",s.SettingsEvent=void 0,(Wt=s.SettingsEvent||(s.SettingsEvent={}))[Wt.Change=3]="Change";var Ht,Jt;s.SevenSegmentDisplayReg=void 0,(Ht=s.SevenSegmentDisplayReg||(s.SevenSegmentDisplayReg={}))[Ht.Digits=2]="Digits",Ht[Ht.Brightness=1]="Brightness",Ht[Ht.DoubleDots=128]="DoubleDots",Ht[Ht.DigitCount=384]="DigitCount",Ht[Ht.DecimalPoint=385]="DecimalPoint",s.SevenSegmentDisplayCmd=void 0,(Jt=s.SevenSegmentDisplayCmd||(s.SevenSegmentDisplayCmd={}))[Jt.SetNumber=128]="SetNumber",Jt[Jt.SetText=129]="SetText";var qt,Gt;s.SoilMoistureVariant=void 0,(qt=s.SoilMoistureVariant||(s.SoilMoistureVariant={}))[qt.Resistive=1]="Resistive",qt[qt.Capacitive=2]="Capacitive",s.SoilMoistureReg=void 0,(Gt=s.SoilMoistureReg||(s.SoilMoistureReg={}))[Gt.Moisture=257]="Moisture",Gt[Gt.Variant=263]="Variant";var Kt,Xt;s.SolenoidVariant=void 0,(Kt=s.SolenoidVariant||(s.SolenoidVariant={}))[Kt.PushPull=1]="PushPull",Kt[Kt.Valve=2]="Valve",Kt[Kt.Latch=3]="Latch",s.SolenoidReg=void 0,(Xt=s.SolenoidReg||(s.SolenoidReg={}))[Xt.Pulled=1]="Pulled",Xt[Xt.Variant=263]="Variant";var Yt,Qt;s.SoundLevelReg=void 0,(Yt=s.SoundLevelReg||(s.SoundLevelReg={}))[Yt.SoundLevel=257]="SoundLevel",Yt[Yt.Enabled=1]="Enabled",Yt[Yt.MinDecibels=129]="MinDecibels",Yt[Yt.MaxDecibels=130]="MaxDecibels",Yt[Yt.LoudThreshold=6]="LoudThreshold",Yt[Yt.QuietThreshold=5]="QuietThreshold",s.SoundLevelEvent=void 0,(Qt=s.SoundLevelEvent||(s.SoundLevelEvent={}))[Qt.Loud=1]="Loud",Qt[Qt.Quiet=2]="Quiet";var Zt,ei;s.SoundPlayerReg=void 0,(Zt=s.SoundPlayerReg||(s.SoundPlayerReg={}))[Zt.Volume=1]="Volume",s.SoundPlayerCmd=void 0,(ei=s.SoundPlayerCmd||(s.SoundPlayerCmd={}))[ei.Play=128]="Play",ei[ei.ListSounds=129]="ListSounds";var ti;s.SoundSpectrumReg=void 0,(ti=s.SoundSpectrumReg||(s.SoundSpectrumReg={}))[ti.FrequencyBins=257]="FrequencyBins",ti[ti.Enabled=1]="Enabled",ti[ti.FftPow2Size=128]="FftPow2Size",ti[ti.MinDecibels=129]="MinDecibels",ti[ti.MaxDecibels=130]="MaxDecibels",ti[ti.SmoothingTimeConstant=131]="SmoothingTimeConstant";var ii,ni;s.SpeechSynthesisReg=void 0,(ii=s.SpeechSynthesisReg||(s.SpeechSynthesisReg={}))[ii.Enabled=1]="Enabled",ii[ii.Lang=128]="Lang",ii[ii.Volume=129]="Volume",ii[ii.Pitch=130]="Pitch",ii[ii.Rate=131]="Rate",s.SpeechSynthesisCmd=void 0,(ni=s.SpeechSynthesisCmd||(s.SpeechSynthesisCmd={}))[ni.Speak=128]="Speak",ni[ni.Cancel=129]="Cancel";var ri,si,ai;s.SwitchVariant=void 0,(ri=s.SwitchVariant||(s.SwitchVariant={}))[ri.Slide=1]="Slide",ri[ri.Tilt=2]="Tilt",ri[ri.PushButton=3]="PushButton",ri[ri.Tactile=4]="Tactile",ri[ri.Toggle=5]="Toggle",ri[ri.Proximity=6]="Proximity",ri[ri.Magnetic=7]="Magnetic",ri[ri.FootPedal=8]="FootPedal",s.SwitchReg=void 0,(si=s.SwitchReg||(s.SwitchReg={}))[si.Active=257]="Active",si[si.Variant=263]="Variant",si[si.AutoOffDelay=384]="AutoOffDelay",s.SwitchEvent=void 0,(ai=s.SwitchEvent||(s.SwitchEvent={}))[ai.On=1]="On",ai[ai.Off=2]="Off";var oi,di,ci;s.TcpTcpError=void 0,(oi=s.TcpTcpError||(s.TcpTcpError={}))[oi.InvalidCommand=1]="InvalidCommand",oi[oi.InvalidCommandPayload=2]="InvalidCommandPayload",s.TcpCmd=void 0,(di=s.TcpCmd||(s.TcpCmd={}))[di.Open=128]="Open",s.TcpPipeCmd=void 0,(ci=s.TcpPipeCmd||(s.TcpPipeCmd={}))[ci.OpenSsl=1]="OpenSsl",ci[ci.Error=0]="Error";var li,ui;s.ThermocoupleVariant=void 0,(li=s.ThermocoupleVariant||(s.ThermocoupleVariant={}))[li.TypeK=1]="TypeK",li[li.TypeJ=2]="TypeJ",li[li.TypeT=3]="TypeT",li[li.TypeE=4]="TypeE",li[li.TypeN=5]="TypeN",li[li.TypeS=6]="TypeS",li[li.TypeR=7]="TypeR",li[li.TypeB=8]="TypeB",s.ThermocoupleReg=void 0,(ui=s.ThermocoupleReg||(s.ThermocoupleReg={}))[ui.Temperature=257]="Temperature",ui[ui.MinTemperature=260]="MinTemperature",ui[ui.MaxTemperature=261]="MaxTemperature",ui[ui.TemperatureError=262]="TemperatureError",ui[ui.Variant=263]="Variant";var pi,mi;s.ThermometerVariant=void 0,(pi=s.ThermometerVariant||(s.ThermometerVariant={}))[pi.Outdoor=1]="Outdoor",pi[pi.Indoor=2]="Indoor",pi[pi.Body=3]="Body",s.ThermometerReg=void 0,(mi=s.ThermometerReg||(s.ThermometerReg={}))[mi.Temperature=257]="Temperature",mi[mi.MinTemperature=260]="MinTemperature",mi[mi.MaxTemperature=261]="MaxTemperature",mi[mi.TemperatureError=262]="TemperatureError",mi[mi.Variant=263]="Variant";var hi;s.TrafficLightReg=void 0,(hi=s.TrafficLightReg||(s.TrafficLightReg={}))[hi.Red=128]="Red",hi[hi.Orange=129]="Orange",hi[hi.Green=130]="Green";var fi;s.TvocReg=void 0,(fi=s.TvocReg||(s.TvocReg={}))[fi.TVOC=257]="TVOC",fi[fi.TVOCError=262]="TVOCError",fi[fi.MinTVOC=260]="MinTVOC",fi[fi.MaxTVOC=261]="MaxTVOC",fi[fi.ConditioningPeriod=384]="ConditioningPeriod";var gi,vi;s.UvIndexVariant=void 0,(gi=s.UvIndexVariant||(s.UvIndexVariant={}))[gi.UVA_UVB=1]="UVA_UVB",gi[gi.Visible_IR=2]="Visible_IR",s.UvIndexReg=void 0,(vi=s.UvIndexReg||(s.UvIndexReg={}))[vi.UvIndex=257]="UvIndex",vi[vi.UvIndexError=262]="UvIndexError",vi[vi.Variant=263]="Variant";var yi,_i,bi,ki,wi;s.VerifiedTelemetryStatus=void 0,(yi=s.VerifiedTelemetryStatus||(s.VerifiedTelemetryStatus={}))[yi.Unknown=0]="Unknown",yi[yi.Working=1]="Working",yi[yi.Faulty=2]="Faulty",s.VerifiedTelemetryFingerprintType=void 0,(_i=s.VerifiedTelemetryFingerprintType||(s.VerifiedTelemetryFingerprintType={}))[_i.FallCurve=1]="FallCurve",_i[_i.CurrentSense=2]="CurrentSense",_i[_i.Custom=3]="Custom",s.VerifiedTelemetryReg=void 0,(bi=s.VerifiedTelemetryReg||(s.VerifiedTelemetryReg={}))[bi.TelemetryStatus=384]="TelemetryStatus",bi[bi.TelemetryStatusInterval=128]="TelemetryStatusInterval",bi[bi.FingerprintType=385]="FingerprintType",bi[bi.FingerprintTemplate=386]="FingerprintTemplate",s.VerifiedTelemetryCmd=void 0,(ki=s.VerifiedTelemetryCmd||(s.VerifiedTelemetryCmd={}))[ki.ResetFingerprintTemplate=128]="ResetFingerprintTemplate",ki[ki.RetrainFingerprintTemplate=129]="RetrainFingerprintTemplate",s.VerifiedTelemetryEvent=void 0,(wi=s.VerifiedTelemetryEvent||(s.VerifiedTelemetryEvent={}))[wi.TelemetryStatusChange=3]="TelemetryStatusChange",wi[wi.FingerprintTemplateChange=128]="FingerprintTemplateChange";var Si,Ti;s.VibrationMotorReg=void 0,(Si=s.VibrationMotorReg||(s.VibrationMotorReg={}))[Si.Enabled=1]="Enabled",s.VibrationMotorCmd=void 0,(Ti=s.VibrationMotorCmd||(s.VibrationMotorCmd={}))[Ti.Vibrate=128]="Vibrate";var Ri,Ci;s.WaterLevelVariant=void 0,(Ri=s.WaterLevelVariant||(s.WaterLevelVariant={}))[Ri.Resistive=1]="Resistive",Ri[Ri.ContactPhotoElectric=2]="ContactPhotoElectric",Ri[Ri.NonContactPhotoElectric=3]="NonContactPhotoElectric",s.WaterLevelReg=void 0,(Ci=s.WaterLevelReg||(s.WaterLevelReg={}))[Ci.Level=257]="Level",Ci[Ci.Variant=263]="Variant";var Ii,Ei,Ai;s.WeightScaleVariant=void 0,(Ii=s.WeightScaleVariant||(s.WeightScaleVariant={}))[Ii.Body=1]="Body",Ii[Ii.Food=2]="Food",Ii[Ii.Jewelry=3]="Jewelry",s.WeightScaleReg=void 0,(Ei=s.WeightScaleReg||(s.WeightScaleReg={}))[Ei.Weight=257]="Weight",Ei[Ei.WeightError=262]="WeightError",Ei[Ei.ZeroOffset=128]="ZeroOffset",Ei[Ei.Gain=129]="Gain",Ei[Ei.MaxWeight=261]="MaxWeight",Ei[Ei.MinWeight=260]="MinWeight",Ei[Ei.WeightResolution=264]="WeightResolution",Ei[Ei.Variant=263]="Variant",s.WeightScaleCmd=void 0,(Ai=s.WeightScaleCmd||(s.WeightScaleCmd={}))[Ai.CalibrateZeroOffset=128]="CalibrateZeroOffset",Ai[Ai.CalibrateGain=129]="CalibrateGain";var Ni,xi,Fi,Pi;s.WifiAPFlags=void 0,(Ni=s.WifiAPFlags||(s.WifiAPFlags={}))[Ni.HasPassword=1]="HasPassword",Ni[Ni.WPS=2]="WPS",Ni[Ni.HasSecondaryChannelAbove=4]="HasSecondaryChannelAbove",Ni[Ni.HasSecondaryChannelBelow=8]="HasSecondaryChannelBelow",Ni[Ni.IEEE_802_11B=256]="IEEE_802_11B",Ni[Ni.IEEE_802_11A=512]="IEEE_802_11A",Ni[Ni.IEEE_802_11G=1024]="IEEE_802_11G",Ni[Ni.IEEE_802_11N=2048]="IEEE_802_11N",Ni[Ni.IEEE_802_11AC=4096]="IEEE_802_11AC",Ni[Ni.IEEE_802_11AX=8192]="IEEE_802_11AX",Ni[Ni.IEEE_802_LongRange=32768]="IEEE_802_LongRange",s.WifiCmd=void 0,(xi=s.WifiCmd||(s.WifiCmd={}))[xi.LastScanResults=128]="LastScanResults",xi[xi.AddNetwork=129]="AddNetwork",xi[xi.Reconnect=130]="Reconnect",xi[xi.ForgetNetwork=131]="ForgetNetwork",xi[xi.ForgetAllNetworks=132]="ForgetAllNetworks",xi[xi.SetNetworkPriority=133]="SetNetworkPriority",xi[xi.Scan=134]="Scan",xi[xi.ListKnownNetworks=135]="ListKnownNetworks",s.WifiReg=void 0,(Fi=s.WifiReg||(s.WifiReg={}))[Fi.Enabled=1]="Enabled",Fi[Fi.Connected=384]="Connected",Fi[Fi.IpAddress=385]="IpAddress",Fi[Fi.Eui48=386]="Eui48",Fi[Fi.Ssid=387]="Ssid",Fi[Fi.Rssi=388]="Rssi",s.WifiEvent=void 0,(Pi=s.WifiEvent||(s.WifiEvent={}))[Pi.GotIp=1]="GotIp",Pi[Pi.LostIp=2]="LostIp",Pi[Pi.ScanComplete=128]="ScanComplete",Pi[Pi.NetworksChanged=129]="NetworksChanged";var Mi;s.WindDirectionReg=void 0,(Mi=s.WindDirectionReg||(s.WindDirectionReg={}))[Mi.WindDirection=257]="WindDirection",Mi[Mi.WindDirectionError=262]="WindDirectionError";var Di;s.WindSpeedReg=void 0,(Di=s.WindSpeedReg||(s.WindSpeedReg={}))[Di.WindSpeed=257]="WindSpeed",Di[Di.WindSpeedError=262]="WindSpeedError",Di[Di.MaxWindSpeed=261]="MaxWindSpeed";function Li(e){return 536870912==(536870912&e)}const Bi={"°":"angle","°/s":"rotation rate","°/s2":"rotation acceleration",m:"meter",kg:"kilogram",s:"second",A:"ampere",K:"kelvin",cd:"candela",mol:"mole",Hz:"hertz",rad:"radian",sr:"steradian",N:"newton",Pa:"pascal",J:"joule",W:"watt",C:"coulomb",V:"volt",F:"farad",Ohm:"ohm",S:"siemens",Wb:"weber",T:"tesla",H:"henry","°C":"degrees Celsius",lm:"lumen",lx:"lux",Bq:"becquerel",Gy:"gray",Sv:"sievert",kat:"katal",m2:"square meter (area)",m3:"cubic meter (volume)","m/s":"meter per second (velocity)","m/s2":"meter per square second (acceleration)","m3/s":"cubic meter per second (flow rate)","W/m2":"watt per square meter (irradiance)","cd/m2":"candela per square meter (luminance)",bit:"bit (information content)","bit/s":"bit per second (data rate)",lat:"degrees latitude",lon:"degrees longitude",pH:"pH value (acidity; logarithmic quantity)",dB:"decibel (logarithmic quantity)",dBW:"decibel relative to 1 W (power level)",count:"1 (counter value)","/":"1 (ratio e.g., value of a switch)","%RH":"Percentage (Relative Humidity)","%EL":"Percentage (remaining battery energy level)",EL:"seconds (remaining battery energy level)","1/s":"1 per second (event rate)","S/m":"Siemens per meter (conductivity)",B:"Byte (information content)",VA:"volt-ampere (Apparent Power)",VAs:"volt-ampere second (Apparent Energy)",var:"volt-ampere reactive (Reactive Power)",vars:"volt-ampere-reactive second (Reactive Energy)","J/m":"joule per meter (Energy per distance)","kg/m3":"kilogram per cubic meter (mass density, mass concentration)","s/60°":"servo speed (time to travel 60°)","kg/cm":"torque",hsv:"bit HSV color",rgb:"RGB color",rpm:"revolutions per minute",uv:"UV index",lux:"illuminance",bpm:"beats per minute",mcd:"micro candella",px:"pixel"},Vi={ms:{name:"millisecond",unit:"s",scale:.001,offset:0},min:{name:"minute",unit:"s",scale:60,offset:0},h:{name:"hour",unit:"s",scale:3600,offset:0},MHz:{name:"megahertz",unit:"Hz",scale:1e6,offset:0},kW:{name:"kilowatt",unit:"W",scale:1e3,offset:0},kVA:{name:"kilovolt-ampere",unit:"VA",scale:1e3,offset:0},kvar:{name:"kilovar",unit:"var",scale:1e3,offset:0},Ah:{name:"ampere-hour",unit:"C",scale:3600,offset:0},Wh:{name:"watt-hour",unit:"J",scale:3600,offset:0},kWh:{name:"kilowatt-hour",unit:"J",scale:36e5,offset:0},varh:{name:"var-hour",unit:"vars",scale:3600,offset:0},kvarh:{name:"kilovar-hour",unit:"vars",scale:36e5,offset:0},kVAh:{name:"kilovolt-ampere-hour",unit:"VAs",scale:36e5,offset:0},"Wh/km":{name:"watt-hour per kilometer",unit:"J/m",scale:3.6,offset:0},KiB:{name:"kibibyte",unit:"B",scale:1024,offset:0},GB:{name:"gigabyte",unit:"B",scale:1e9,offset:0},"Mbit/s":{name:"megabit per second",unit:"bit/s",scale:1e6,offset:0},"B/s":{name:"byte per second",unit:"bit/s",scale:8,offset:0},"MB/s":{name:"megabyte per second",unit:"bit/s",scale:8e6,offset:0},mV:{name:"millivolt",unit:"V",scale:.001,offset:0},mA:{name:"milliampere",unit:"A",scale:.001,offset:0},dBm:{name:"decibel (milliwatt)",unit:"dBW",scale:1,offset:-30},"ug/m3":{name:"microgram per cubic meter",unit:"kg/m3",scale:1e-9,offset:0},"mm/h":{name:"millimeter per hour",unit:"m/s",scale:1/36e5,offset:0},"m/h":{name:"meter per hour",unit:"m/s",scale:1/3600,offset:0},"cm/s":{name:"centimeter per seconds",unit:"m/s",scale:.01,offset:0},ppm:{name:"parts per million",unit:"/",scale:1e-6,offset:0},ppb:{name:"parts per billion",unit:"/",scale:1e-9,offset:0},"/100":{name:"percent",unit:"/",scale:.01,offset:0},"%":{name:"percent",unit:"/",scale:.01,offset:0},"/1000":{name:"permille",unit:"/",scale:.001,offset:0},hPa:{name:"hectopascal",unit:"Pa",scale:100,offset:0},mm:{name:"millimeter",unit:"m",scale:.001,offset:0},cm:{name:"centimeter",unit:"m",scale:.01,offset:0},km:{name:"kilometer",unit:"m",scale:1e3,offset:0},"km/h":{name:"kilometer per hour",unit:"m/s",scale:1/3.6,offset:0},"8ms":{name:"8 milliseconds",unit:"s",scale:.008,offset:0},nm:{name:"nanometer",unit:"m",scale:1e-9,offset:0},nT:{name:"nano Tesla",unit:"T",scale:1e9,offset:0},frac:{name:"ratio",unit:"/",scale:1,offset:0},us:{name:"micro seconds",unit:"s",scale:1e-6,offset:0},mWh:{name:"micro watt-hour",unit:"J",scale:.0036,offset:0},g:{name:"earth gravity",unit:"m/s2",scale:9.80665,offset:0},"#":{name:"count",unit:"#",scale:1,offset:0}},Oi={json:"JSON",bitset:"bitset"};const Ui={rw:[[1,127],[128,255],[512,3839],[3840,4095]],ro:[[256,383],[384,511],[512,3839],[3840,4095]],const:[[256,383],[384,511],[512,3839],[3840,4095]],command:[[0,127],[128,3839],[3840,4095]],report:[[0,127],[128,3839],[3840,4095]],event:[[0,127],[128,255]]};function ji(e){const t=[];for(const i of Object.keys(e))t.push(e[i]);return t}function zi(e){return null==e?void 0:e.replace(/([a-z])([A-Z])/g,((e,t,i)=>t+"_"+i)).toUpperCase()}function $i(e){return null==e?void 0:e.replace(/([a-z])([A-Z])/g,((e,t,i)=>t+"_"+i)).toLowerCase()}function Wi(e){return 0==e||[1,2,4,8].indexOf(Math.abs(e))<0?"bytes":e<0?`int${8*-e}_t`:`uint${8*e}_t`}function Hi(e){if(0==e||[1,2,4,8].indexOf(Math.abs(e))<0)return"bytes";switch(e){case-1:return"sbyte";case 1:return"byte";case-2:return"short";case 2:return"ushort";case-4:return"int";case 4:return"uint"}return`unknown({${e})`}function Ji(e){return 0==e?"bytes":e<0?"i"+8*-e:"u"+8*e}function qi(e){return"ro"==e||"rw"==e||"const"==e}function Gi(e){return void 0===e?"":e<0?"-"+Gi(e):"0x"+e.toString(16)}function Ki(e){return e.unit?Xi(e.unit)+" ":""}function Xi(e){switch(e){case"us":return"μs";case"C":return"°C";case"/":return"ratio";default:return e}}function Yi(e){let t="// Autogenerated C header file for "+e.name+"\n";const i=`_JACDAC_SPEC_${zi(e.camelName)}_H`;t+=`#ifndef ${i}\n`,t+=`#define ${i} 1\n`;let n="JD_"+zi(e.shortName)+"_";"_"==e.shortId[0]&&(n="JD_"),"_"!=e.shortId[0]&&(t+=`\n#define JD_SERVICE_CLASS_${zi(e.shortName)}  ${Gi(e.classIdentifier)}\n`);for(const i in e.constants){const{value:r,hex:s}=e.constants[i];t+=`#define ${n}${zi(i)} ${s?Gi(r):r.toString()}\n`}for(const i of ji(e.enums).filter((e=>!e.derived))){const e=n+zi(i.name);t+=`\n// enum ${i.name} (${Wi(i.storage)})\n`;for(const n of Object.keys(i.members))t+="#define "+e+"_"+zi(n)+" "+Gi(i.members[n])+"\n"}for(const i of e.packets){if(i.derived)continue;const s=rn(i);if(t+=sn(s.comment),!i.secondary&&"pipe_command"!=i.kind&&"pipe_report"!=i.kind){let e="CMD";qi(i.kind)?e="REG":"event"==i.kind?e="EV":"meta_pipe_command"!=i.kind&&"meta_pipe_report"!=i.kind||(e="PIPE");let r=Gi(i.identifier);i.identifierName&&(r="JD_"+e+"_"+zi(i.identifierName));const s=n+e+"_"+zi(i.name);s!=r&&(t+=`#define ${s} ${r}\n`)}const a="meta_pipe_report"==i.kind||"meta_pipe_command"==i.kind;if(s.needsStruct||a){let n="jd_"+$i(e.camelName)+"_"+$i(i.name);"report"==i.kind&&(n+="_report"),t+=`typedef struct ${n} {\n`,a&&(t+=`    uint32_t identifier; // ${Gi(i.identifier)}\n`);let s="";for(let e=0;e<i.fields.length;++e){const n=i.fields[e];let r="";const a=Wi(n.storage),o=ln(n);r="string"==n.type||"string0"==n.type?`char ${n.name}[${o}]`:"bytes"==a?`uint8_t ${n.name}[${o}]`:`${a} ${n.name}`,n.startRepeats&&e==i.fields.length-1&&(r+="[0]"),r+=";",n.isSimpleType||"devid"==n.type?n.unit&&(r+=" // "+Xi(n.unit)):r+="  // "+Ki(n)+n.type,t+="    "+s+r+"\n","string0"==n.type&&(s="// ")}t+=`}${r=i,r.packed?" __attribute__((packed))":""} ${n}_t;\n\n`}}var r;return t+="\n#endif\n",t}function Qi(e){return e?e[0].toLowerCase()+e.slice(1).replace(/_([a-z0-9])/gi,((e,t)=>t.toUpperCase())):e}function Zi(e){return e?e[0].toUpperCase()+e.slice(1):e}function en(e){return(null==(e=Qi(e))?void 0:e.length)?e[0].toUpperCase()+e.slice(1):e}function tn(e){return null==e?void 0:e.replace(/([a-z])([A-Z])/g,((e,t,i)=>t+"_"+i))}function nn(e){return null==e?void 0:e.replace(/([a-z])([A-Z])/g,((e,t,i)=>t+" "+i)).replace(/(-|_)/g," ")}function rn(e){let t="",i="",n=!1;if(0==e.fields.length)"event"!=e.kind&&(i="No args");else if(1!=e.fields.length||e.fields[0].startRepeats)n=!0;else{const t=e.fields[0];i=Wi(t.storage),t.isSimpleType||(i=t.type+" ("+i+")"),i=Ki(t)+i,"_"!=t.name&&(i=t.name+" "+i)}if(1==e.fields.length)if(qi(e.kind)){let t="";t="ro"==e.kind?"Read-only":"const"==e.kind?"Constant":"Read-write",i=i?t+" "+i:t}else i&&(i="Argument: "+i);if("report"==e.kind&&e.secondary)t+="Report: "+i+"\n";else if(e.description){let n=e.description.replace(/\n\n[^]*/,"");i&&(n=i+". "+n),t=n+"\n"+t}return{comment:t,needsStruct:n}}function sn(e){return"\n/**\n * "+e.replace(/\n+$/,"").replace(/\n/g,"\n * ")+"\n */\n"}function an(e){return e?`\n\`\`\`\n${e.replace(/^\n+/,"").replace(/\n+$/,"")}\n\`\`\`\n`:e}function on(e,t,i,n){const r=ln(t),s=r?`[${r}]`:"";let a="number",o="";if(/^[fiu]\d+(\.\d+)?$/.test(t.type)&&1<=r&&r<=8)o=t.type;else if(/^u8\[\d*\]$/.exec(t.type))o="b"+s;else if(e.enums[t.type])o=Ji(e.enums[t.type].storage),a=en(e.camelName)+en(t.type),i&&(a="jacdac."+a);else switch(t.type){case"string":o="s"+s,a="string";break;case"bytes":o="b"+s;break;case"string0":o="z",a="string";break;case"devid":o="b[8]";break;case"pipe_port":o="u16";break;case"pipe":o="b[12]";break;case"bool":o="u8",n&&(a="boolean");break;default:return null}return"number"==a&&o&&"b"==o[0]&&(a="Buffer"),{fmt:o,tsType:a}}function dn(e,t,i){var n;if(t.packed||!(null===(n=t.fields)||void 0===n?void 0:n.length))return;const r=[];for(const n of t.fields){n.startRepeats&&r.push("r:");const t=on(e,n,!1,i);if(!t)return;r.push(t.fmt)}return r.join(" ")}function cn(e,t,i){const{isStatic:n=!1,useBooleans:r=!1,useJDOM:s=!1}=i||{},{kind:a}=t,o=[],d=[];let c,l,u="";for(let i=0;i<t.fields.length;++i){const s=t.fields[i];let a="";s.startRepeats&&(i==t.fields.length-1?a="[]":(u+="r: ",c=[],l=[],o.push("rest")));const p=Qi("_"==s.name?t.name:s.name),m=on(e,s,n,r);if(!m||/(reserved|padding)/.test(s.name))m||console.log(`${t.name}/${s.name} - can't get format for '${s.type}'`),u+=`x[${ln(s)}] `;else{u+=m.fmt+a+" ";let e=m.tsType;"Buffer"!=e||n||(e="Uint8Array"),e+=a,c?(c.push(p),l.push(e)):(o.push(p),d.push(e))}}u=u.replace(/ *$/,""),l&&d.push("(["+l.join(", ")+"])[]");const p=Qi(t.name);let m="";if(s)if("command"===a){for(let e=0;e<o.length;++e)m+=`const ${o[e]}: ${d[e]} = ...\n`;m+=`await service.sendCmdPackedAsync(${Zi(e.camelName)}Reg.${Zi(p)}, [${o.join(", ")}])\n`}else qi(a)&&(m+="// get (register to REPORT_UPDATE event to enable background refresh)\n",m+=`const ${p}Reg = service.register(${Zi(e.camelName)}Reg.${Zi(p)})\n`,m+=`const [${o.join(", ")}] : [${d.join(", ")}] = ${p}Reg.unpackedValue\n`,"rw"===a&&(m+="// set\n",m+=`await ${p}Reg.sendSetPackedAsync([${o.join(", ")}])\n`));else m+=`const [${o.join(", ")}] = jdunpack<[${d.join(", ")}]>(buf, "${u}")\n`;return c&&(m+=`const [${c.join(", ")}] = rest[0]\n`),m=m.replace(/\n*$/,""),{buffers:m,names:o,types:d}}function ln(e){return Math.abs(e.storage)}function un(e,t){const i="sts"===t,n="c#"===t,r=i||n,s=r?"    ":"",a=s+"    ",o=n?"uint ":"",d=n?"byte[]":"",c=n?s+"public enum":i?s+"export const enum":"export enum",l=n?"public":"export",u=n?";":"";let p=r?`namespace ${n?Zi("jacdac"):"jacdac"} {\n`:"";if(p+=s+"// Service: "+e.name+"\n",n&&(p+=`${s}public static class ${Zi(e.camelName)}Constants\n${s}{\n`),"_"!=e.shortId[0]){p+=s+(n?s:"")+`${l} const ${o}${n?"ServiceClass":`SRV_${tn(e.camelName).toLocaleUpperCase()}`} = ${Gi(e.classIdentifier)}${u}\n`}const m=en(e.camelName);for(const t in e.constants){const{value:i,hex:r}=e.constants[t];p+=s+(n?s:"")+`${l} const ${r?d:o}${n?Zi(Qi(t)):zi(t)} = ${r?i.toString():Gi(i)}${u}\n`}n&&(p+=s+"}\n");for(const t of ji(e.enums)){p+=`\n${c} ${m+en(t.name)}${n?`: ${Hi(t.storage)}`:""} { // ${Wi(t.storage)}\n`;for(const e of Object.keys(t.members))i&&(p+=a+`//% block="${nn(e).toLowerCase()}"\n`),p+=a+e+" = "+Gi(t.members[e])+",\n";p+=s+"}\n\n"}const h={};for(const t of e.packets){if(t.derived)continue;const n=rn(t),r=t.fields.length?cn(e,t,{isStatic:i,useBooleans:!1}).buffers:"";let s="Cmd";qi(t.kind)?s="Reg":"event"==t.kind?s="Event":"meta_pipe_command"==t.kind||"meta_pipe_report"==t.kind?s="PipeCmd":"pipe_command"!=t.kind&&"pipe_report"!=t.kind||(s="info");let a="",o="";if(t.secondary||"info"==s)r&&(a=sn(`${t.kind} ${en(t.name)}${t.client?"":an(r)}`));else{const e=Gi(t.identifier);i&&"event"===t.kind&&(o=`//% block="${tn(t.name).replace(/_/g," ")}"\n`),a=`${sn(n.comment+(t.client?"":an(r)))+o}${en(t.name)} = ${e},\n`}a&&(h[s]=(h[s]||"")+a)}for(const e of Object.keys(h))if("info"==e)p+=h[e].replace(/^/gm,s)+"\n\n";else{p+=`${c} ${m}${e} {\n    ${s}${h[e].replace(/^\n+/,"").replace(/\n$/,"").replace(/\n/g,"\n    "+s)}\n${s}}\n\n`}return r&&(p+="}\n"),p.replace(/ *$/gm,"")}function pn(e){return mn(e.company)+"-"+hn(e.name)+(e.designIdentifier||"")+(e.version?`v${e.version.toLowerCase().replace(/^v/,"").replace(/\./g,"")}`:"").toLowerCase()}function mn(e){e||(e="");return tn(e.trim().toLowerCase().replace(/([^a-z0-9_-])+/gi,"-").replace(/\./g,"").replace(/^-+/,"").replace(/-+$/,""))}function hn(e){return mn(e).replace(/-/g,"")}class fn{}function gn(e,t){const i=new Error(e);throw t&&(i.__cancel=!0),i}function vn(e){e&&(e.__ack=!0)}function yn(e,t){return new Promise((i=>setTimeout((()=>i(t)),e)))}function _n(e,t,i,n,r){void 0===n&&(n=0),void 0===r&&(r=i.length-n);for(let s=0;s<r;++s)e[t+s]=i[n+s]}function bn(e,t){return e==t?0:e<t?-1:1}function kn(e,t,i=0){if(e==t)return!0;if(!e||!t||e.length!=t.length)return!1;for(let n=i;n<e.length;++n)if(e[n]!=t[n])return!1;return!0}function wn(e,t){if((t|=0)<1)return 0;const i=Tn(e);return t>=32?i>>>0:((i^i>>>t)&(1<<t)-1)>>>0}function Sn(e,t){return(0|e)/(0|t)|0}function Tn(e){let t=2166136261;for(let i=0;i<e.length;++i)t=Math.imul(t,16777619)^e[i];return t}function Rn(e){let t=65535;for(let i=0;i<e.length;++i){let n=t>>8^e[i];n^=n>>4,t=t<<8^n<<12^n<<5^n,t&=65535}return t}function Cn(e){return e+3&-4}function In(e){const t=e.length,i=new Uint8Array(t);for(let n=0;n<t;++n)i[n]=255&e.charCodeAt(n);return i}function En(e){const t=e.length;let i="";for(let n=0;n<t;++n)i+=String.fromCharCode(e[n]);return i}function An(e){if(!e)return"";let t="";for(let i=0;i<e.length;++i){const n=255&e.charCodeAt(i);t+=37==n||n>127?"%"+n.toString(16):e.charAt(i)}return decodeURIComponent(t)}function Nn(e,t){let i="";if(!e)return i;for(let n=0;n<e.length;++n){let r=e.charCodeAt(n);if(r<=127)i+=e.charAt(n);else if(r<=2047)i+=String.fromCharCode(192|r>>6,128|63&r);else{if(!t&&55296<=r&&r<=56319){const t=e.charCodeAt(++n);isNaN(t)||(r=65536+(r-55296<<10)+(t-56320))}i+=r<=65535?String.fromCharCode(224|r>>12,128|r>>6&63,128|63&r):String.fromCharCode(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r)}}return i}fn.diagnostics=!1,fn.trace=!1,fn.webUSB=!0,fn.webSerial=!0,fn.webBluetooth=!1;class xn{constructor(){this.waiting=[],this.available=[]}drain(){for(const e of this.waiting)e(new Error("Promise Buffer Reset"));this.waiting=[],this.available=[]}pushError(e){this.push(e)}push(e){const t=this.waiting.shift();t?t(e):this.available.push(e)}shiftAsync(e=0){if(this.available.length>0){const e=this.available.shift();return e instanceof Error?Promise.reject(e):Promise.resolve(e)}return new Promise(((t,i)=>{const n=e=>{e instanceof Error?i(e):t(e)};this.waiting.push(n),e>0&&yn(e).then((()=>{const e=this.waiting.indexOf(n);e>=0&&(this.waiting.splice(e,1),i(new Error("Timeout")))}))}))}}class Fn{constructor(){this.promises={}}enqueue(e,t){return new Promise(((i,n)=>{let r=this.promises[e];r||(r=this.promises[e]=[]);const s=()=>{r.shift(),0==r.length?delete this.promises[e]:r[0]()};r.push((()=>t().then((e=>{s(),i(e)}),(e=>{s(),n(e)})))),1==r.length&&r[0]()}))}}function Pn(e){return"0x"+e.map((e=>("000000000"+e.toString(16)).slice(-8))).join("")}function Mn(e){if(!e)return;let t="";for(let i=0;i<e.length;++i)t+=("0"+e[i].toString(16)).slice(-2);return t}function Dn(e){const t=new Uint8Array(e.length>>1);for(let i=0;i<e.length;i+=2)t[i>>1]=parseInt(e.slice(i,i+2),16);return t}function Ln(e){return null!=e}function Bn(e){const t=new Array(e.length);for(let i=0;i<e.length;++i)t[i]=e[i];return t}function Vn(e){if(!isNaN(e))return e<0?"-"+Vn(-e):"0x"+e.toString(16)}function On(e,t,i){e[t+0]=i>>0&255,e[t+1]=i>>8&255,e[t+2]=i>>16&255,e[t+3]=i>>24&255}function Un(e,t,i){e[t+0]=i>>0&255,e[t+1]=i>>8&255}function jn(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function zn(e,t){return e[t]|e[t+1]<<8}function $n(e){const t=new Uint8Array(4*e.length);for(let i=0;i<e.length;++i)On(t,4*i,e[i]);return t}function Wn(e){if(!e)return!0;const t=e.length;for(let i=0;i<t;++i)if(e[i])return!1;return!0}function Hn(e){return An(En(e))}function Jn(e){return In(Nn(e))}function qn(e,t){const i=new Uint8Array(e.length+t.length);return i.set(e,0),i.set(t,e.length),i}function Gn(e){if(!e)return;e=e.filter((e=>!!(null==e?void 0:e.length)));let t=0;for(const i of e)t+=i.length;const i=new Array(t);t=0;for(const n of e){for(let e=0;e<n.length;++e)i[e+t]=n[e];t+=n.length}return i}function Kn(e,t="Assertion failed",i){if(!e)throw i&&console.debug(`assertion filed ${t}`,i),fn.diagnostics,new Error(t)}function Xn(e){return null==e?null:JSON.parse(JSON.stringify(e))}function Yn(e,t){let i=!0;return function(){i&&(i=!1,e(),setTimeout((()=>i=!0),t))}}function Qn(){let e;return{signalled:new Promise((t=>{e=t})),signal:()=>e(!0)}}function Zn(e){return(null==e?void 0:e.arrayBuffer)?e.arrayBuffer().then((e=>new Uint8Array(e))):new Promise(((t,i)=>{const n=new FileReader;n.onload=()=>{t(new Uint8Array(n.result))},n.onerror=e=>{console.log(e),i(e)};try{n.readAsArrayBuffer(e)}catch(e){i(e)}}))}function er(e,t){let i;return function(){i&&clearTimeout(i),i=setTimeout((async()=>{await e()}),t)}}function tr(e,t){if((t|=0)<=0)return Math.round(e);if(0==e)return 0;let i=0;for(;0==i&&t<21;){const n=Math.pow(10,t++);i=Math.round(e*n+Number.EPSILON)/n}return i}function ir(e,t,i){const n={};if(e)for(let r=0;r<e.length;++r){const s=t(e[r],r);null!=s&&(n[s]=i(e[r],r))}return n}function nr(e,t){if(!e)return{};const i={};return e.forEach((e=>{const n=t(e);(i[n]||(i[n]=[])).push(e)})),i}function rr(...e){return null==e?void 0:e.find((e=>void 0!==e))}var sr;function ar(e){let t=function(e){switch(e){case s.NumberFormat.Int8LE:return-1;case s.NumberFormat.UInt8LE:return 1;case s.NumberFormat.Int16LE:return-2;case s.NumberFormat.UInt16LE:return 2;case s.NumberFormat.Int32LE:return-4;case s.NumberFormat.UInt32LE:return 4;case s.NumberFormat.Int64LE:return-8;case s.NumberFormat.UInt64LE:return 8;case s.NumberFormat.Int8BE:return-10;case s.NumberFormat.UInt8BE:return 10;case s.NumberFormat.Int16BE:return-20;case s.NumberFormat.UInt16BE:return 20;case s.NumberFormat.Int32BE:return-40;case s.NumberFormat.UInt32BE:return 40;case s.NumberFormat.Int64BE:return-80;case s.NumberFormat.UInt64BE:return 80;case s.NumberFormat.Float32LE:return 4;case s.NumberFormat.Float32BE:return 40;case s.NumberFormat.Float64LE:return 8;case s.NumberFormat.Float64BE:return 80;default:throw new Error("unknown format")}}(e),i=!1;t<0&&(i=!0,t=-t);let n=!1;t>=10&&(n=!0,t/=10);let r=!1;switch(e){case s.NumberFormat.Float32LE:case s.NumberFormat.Float32BE:case s.NumberFormat.Float64LE:case s.NumberFormat.Float64BE:r=!0}return{size:t,signed:i,swap:n,isFloat:r}}function or(e){switch(e){case s.NumberFormat.Int8LE:case s.NumberFormat.UInt8LE:case s.NumberFormat.Int8BE:case s.NumberFormat.UInt8BE:return 1;case s.NumberFormat.Int16LE:case s.NumberFormat.UInt16LE:case s.NumberFormat.Int16BE:case s.NumberFormat.UInt16BE:return 2;case s.NumberFormat.Int32LE:case s.NumberFormat.Int32BE:case s.NumberFormat.UInt32BE:case s.NumberFormat.UInt32LE:case s.NumberFormat.Float32BE:case s.NumberFormat.Float32LE:return 4;case s.NumberFormat.UInt64BE:case s.NumberFormat.Int64BE:case s.NumberFormat.UInt64LE:case s.NumberFormat.Int64LE:case s.NumberFormat.Float64BE:case s.NumberFormat.Float64LE:return 8}return 0}function dr(e,t,i){switch(t){case s.NumberFormat.UInt8BE:case s.NumberFormat.UInt8LE:return e[i];case s.NumberFormat.Int8BE:case s.NumberFormat.Int8LE:return e[i]<<24>>24;case s.NumberFormat.UInt16LE:return zn(e,i);case s.NumberFormat.Int16LE:return zn(e,i)<<16>>16;case s.NumberFormat.UInt32LE:return jn(e,i);case s.NumberFormat.Int32LE:return jn(e,i)>>0;case s.NumberFormat.UInt64LE:return jn(e,i)+4294967296*jn(e,i+4);case s.NumberFormat.Int64LE:return jn(e,i)+4294967296*(jn(e,i+4)>>0);default:{const n=ar(t);if(n.isFloat){const t=new Uint8Array(n.size);for(let r=0;r<n.size;++r)t[r]=e[i+r];return n.swap&&t.reverse(),4==n.size?new Float32Array(t.buffer)[0]:new Float64Array(t.buffer)[0]}throw new Error("unsupported fmt:"+t)}}}function cr(e,t,i,n){const r=ar(t);if(r.isFloat){const t=new Uint8Array(r.size);4==r.size?new Float32Array(t.buffer)[0]=n:new Float64Array(t.buffer)[0]=n,r.swap&&t.reverse();for(let n=0;n<r.size;++n)e[i+n]=t[n]}else for(let t=0;t<r.size;++t){e[r.swap?i+r.size-t-1:i+t]=255&n,n>>=8}}function lr(e){let t;switch(e.length){case 0:case 1:t=s.NumberFormat.UInt8LE;break;case 2:case 3:t=s.NumberFormat.UInt16LE;break;default:t=s.NumberFormat.UInt32LE}return dr(e,t,0)}function ur(e){let t;switch(e.length){case 0:case 1:t=s.NumberFormat.Int8LE;break;case 2:case 3:t=s.NumberFormat.Int16LE;break;default:t=s.NumberFormat.Int32LE}return dr(e,t,0)}function pr(e,t){const i=[],n=or(t);for(let r=0;r<=e.length-n;r+=n)i.push(dr(e,t,r));return i}s.NumberFormat=void 0,(sr=s.NumberFormat||(s.NumberFormat={}))[sr.Int8LE=1]="Int8LE",sr[sr.UInt8LE=2]="UInt8LE",sr[sr.Int16LE=3]="Int16LE",sr[sr.UInt16LE=4]="UInt16LE",sr[sr.Int32LE=5]="Int32LE",sr[sr.Int8BE=6]="Int8BE",sr[sr.UInt8BE=7]="UInt8BE",sr[sr.Int16BE=8]="Int16BE",sr[sr.UInt16BE=9]="UInt16BE",sr[sr.Int32BE=10]="Int32BE",sr[sr.UInt32LE=11]="UInt32LE",sr[sr.UInt32BE=12]="UInt32BE",sr[sr.Float32LE=13]="Float32LE",sr[sr.Float64LE=14]="Float64LE",sr[sr.Float32BE=15]="Float32BE",sr[sr.Float64BE=16]="Float64BE",sr[sr.UInt64LE=17]="UInt64LE",sr[sr.UInt64BE=18]="UInt64BE",sr[sr.Int64LE=19]="Int64LE",sr[sr.Int64BE=20]="Int64BE";let mr,hr=[{name:"Common registers and commands",status:"experimental",shortId:"_system",camelName:"system",shortName:"system",extends:[],notes:{short:"This file describes common register and command codes.\n\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).",commands:"Command codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.",registers:"Register codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.",events:"Events codes are 8-bit and are subdivided as follows:\n* Events `0x00-0x7f` - common to all services\n* Events `0x80-0xff` - defined per-service"},classIdentifier:536870897,enums:{ReadingThreshold:{name:"ReadingThreshold",storage:1,members:{Neutral:1,Inactive:2,Active:3}},StatusCodes:{name:"StatusCodes",storage:2,members:{Ready:0,Initializing:1,Calibrating:2,Sleeping:3,WaitingForInput:4,CalibrationNeeded:100}}},constants:{announce_interval:{value:500,hex:!1}},packets:[{kind:"command",name:"announce",identifier:0,description:"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.",fields:[],hasReport:!0},{kind:"report",name:"announce",identifier:0,description:"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.",fields:[],secondary:!0},{kind:"command",name:"get_register",identifier:4096,description:"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",fields:[],hasReport:!0},{kind:"report",name:"get_register",identifier:4096,description:"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",fields:[],secondary:!0},{kind:"command",name:"set_register",identifier:8192,description:"Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.",fields:[]},{kind:"report",name:"event",identifier:1,description:"Event from sensor or a broadcast service.",fields:[{name:"event_id",type:"u32",storage:4,isSimpleType:!0},{name:"event_argument",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32 u32"},{kind:"command",name:"calibrate",identifier:2,description:"Request to calibrate a sensor. The report indicates the calibration is done.",fields:[],hasReport:!0},{kind:"report",name:"calibrate",identifier:2,description:"Request to calibrate a sensor. The report indicates the calibration is done.",fields:[],secondary:!0},{kind:"rw",name:"intensity",identifier:1,description:"This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"rw",name:"value",identifier:2,description:"The primary value of actuator (eg. servo pulse length, or motor duty cycle).",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"const",name:"min_value",identifier:272,description:"The lowest value that can be reported for the value register.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"const",name:"max_value",identifier:273,description:"The highest value that can be reported for the value register.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"rw",name:"max_power",identifier:7,description:"Limit the power drawn by the service, in mA.",fields:[{name:"_",unit:"mA",type:"u16",storage:2,isSimpleType:!0,defaultValue:500,typicalMax:500,typicalMin:0}],packFormat:"u16"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100}],packFormat:"u32"},{kind:"ro",name:"reading",identifier:257,description:"Read-only value of the sensor, also reported in streaming.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],volatile:!0,packFormat:"i32"},{kind:"const",name:"min_reading",identifier:260,description:"The lowest value that can be reported by the sensor.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"const",name:"max_reading",identifier:261,description:"The highest value that can be reported by the sensor.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"ro",name:"reading_error",identifier:262,description:"The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\nsend a report in the same frame of the ``reading`` report.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],volatile:!0,packFormat:"u32"},{kind:"const",name:"reading_resolution",identifier:264,description:"Smallest, yet distinguishable change in reading.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"rw",name:"inactive_threshold",identifier:5,description:"Threshold when reading data gets inactive and triggers a ``inactive``.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"rw",name:"active_threshold",identifier:6,description:"Thresholds when reading data gets active and triggers a ``active`` event.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"const",name:"variant",identifier:263,description:"The hardware variant of the service.\nFor services which support this, there's an enum defining the meaning.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet.",fields:[{name:"code",type:"StatusCodes",storage:2},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,packFormat:"u16 u16"},{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.",fields:[{name:"_",type:"string",storage:0}],optional:!0,packFormat:"s"},{kind:"event",name:"active",identifier:1,description:"Notifies that the service has been activated (eg. button pressed, network connected, etc.)",fields:[]},{kind:"event",name:"inactive",identifier:2,description:"Notifies that the service has been dis-activated.",fields:[]},{kind:"event",name:"change",identifier:3,description:"Notifies that the some state of the service changed.",fields:[]},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"StatusCodes",storage:2},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16 u16"},{kind:"event",name:"neutral",identifier:7,description:"Notifies that the threshold is back between ``low`` and ``high``.",fields:[]}],tags:[]},{name:"Base service",status:"experimental",shortId:"_base",camelName:"base",shortName:"base",extends:[],notes:{short:"Base class for all services."},classIdentifier:536870899,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16"}],tags:[]},{name:"Sensor",status:"experimental",shortId:"_sensor",camelName:"sensor",shortName:"sensor",extends:["_base"],notes:{short:"Base class for sensors."},classIdentifier:536870898,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32"}],tags:[]},{name:"Accelerometer",status:"experimental",shortId:"accelerometer",camelName:"accelerometer",shortName:"accelerometer",extends:["_base","_sensor"],notes:{short:"A 3-axis accelerometer.",long:"## Orientation\n\nAn accelerometer module should translate acceleration values as follows:\n\n| Orientation           \t| X value (g) \t| Y value (g) \t| Z value (g) \t|\n|-----------------------\t|-------------\t|-------------\t|-------------\t|\n| Module lying flat     \t| 0           \t| 0           \t| -1          \t|\n| Module on left edge   \t| -1          \t| 0           \t| 0           \t|\n| Module on bottom edge \t| 0           \t| 1           \t| 0           \t|\n\nWe recommend an orientation marking on the PCB so that users can mount modules without having to experiment with the device. Left/bottom can be determined by assuming text on silk runs left-to-right.",events:"All events are debounced."},classIdentifier:521405449,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"forces",identifier:257,description:"Indicates the current forces acting on accelerometer.",fields:[{name:"x",unit:"g",shift:20,type:"i12.20",storage:-4},{name:"y",unit:"g",shift:20,type:"i12.20",storage:-4},{name:"z",unit:"g",shift:20,type:"i12.20",storage:-4}],volatile:!0,identifierName:"reading",packFormat:"i12.20 i12.20 i12.20"},{kind:"ro",name:"forces_error",identifier:262,description:"Error on the reading value.",fields:[{name:"_",unit:"g",shift:20,type:"i12.20",storage:-4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"i12.20"},{kind:"rw",name:"max_force",identifier:128,description:"Configures the range forces detected.\nRead-back after setting to get current value.",fields:[{name:"_",unit:"g",shift:20,type:"i12.20",storage:-4}],optional:!0,packFormat:"i12.20"},{kind:"event",name:"tilt_up",identifier:129,description:"Emitted when accelerometer is tilted in the given direction.",fields:[]},{kind:"event",name:"tilt_down",identifier:130,description:"Emitted when accelerometer is tilted in the given direction.",fields:[]},{kind:"event",name:"tilt_left",identifier:131,description:"Emitted when accelerometer is tilted in the given direction.",fields:[]},{kind:"event",name:"tilt_right",identifier:132,description:"Emitted when accelerometer is tilted in the given direction.",fields:[]},{kind:"event",name:"face_up",identifier:133,description:"Emitted when accelerometer is laying flat in the given direction.",fields:[]},{kind:"event",name:"face_down",identifier:134,description:"Emitted when accelerometer is laying flat in the given direction.",fields:[]},{kind:"event",name:"freefall",identifier:135,description:"Emitted when total force acting on accelerometer is much less than 1g.",fields:[]},{kind:"event",name:"shake",identifier:139,description:"Emitted when forces change violently a few times.",fields:[]},{kind:"event",name:"force_2g",identifier:140,description:"Emitted when force in any direction exceeds given threshold.",fields:[]},{kind:"event",name:"force_3g",identifier:136,description:"Emitted when force in any direction exceeds given threshold.",fields:[]},{kind:"event",name:"force_6g",identifier:137,description:"Emitted when force in any direction exceeds given threshold.",fields:[]},{kind:"event",name:"force_8g",identifier:138,description:"Emitted when force in any direction exceeds given threshold.",fields:[]}],tags:["C"],group:"Movement"},{name:"Arcade Gamepad",status:"deprecated",shortId:"arcadegamepad",camelName:"arcadeGamepad",shortName:"arcadeGamepad",extends:["_base","_sensor"],notes:{short:"This service is deprecated in favor or `joystick`; it is currently used by the micro:bit Arcade smart shield though.\nA gamepad with direction and action buttons for one player.\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers."},classIdentifier:501915758,enums:{Button:{name:"Button",storage:1,members:{Left:1,Up:2,Right:3,Down:4,A:5,B:6,Menu:7,Select:8,Reset:9,Exit:10}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"buttons",identifier:257,description:"Indicates which buttons are currently active (pressed).\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.",fields:[{name:"button",type:"Button",storage:1,startRepeats:!0},{name:"pressure",unit:"/",shift:8,type:"u0.8",storage:1}],volatile:!0,identifierName:"reading",packFormat:"r: u8 u0.8"},{kind:"const",name:"available_buttons",identifier:384,description:"Indicates number of players supported and which buttons are present on the controller.",fields:[{name:"button",type:"Button",storage:1,startRepeats:!0}],packFormat:"r: u8"},{kind:"event",name:"down",identifier:1,description:"Emitted when button goes from inactive to active.",fields:[{name:"button",type:"Button",storage:1}],identifierName:"active",packFormat:"u8"},{kind:"event",name:"up",identifier:2,description:"Emitted when button goes from active to inactive.",fields:[{name:"button",type:"Button",storage:1}],identifierName:"inactive",packFormat:"u8"}],tags:[],group:"Button"},{name:"Arcade sound",status:"experimental",shortId:"arcadesound",camelName:"arcadeSound",shortName:"arcadeSound",extends:["_base"],notes:{short:"A sound playing device.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC."},classIdentifier:533083654,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"play",identifier:128,description:"Play samples, which are single channel, signed 16-bit little endian values.",fields:[{name:"samples",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"rw",name:"sample_rate",identifier:128,description:"Get or set playback sample rate (in samples per second).\nIf you set it, read it back, as the value may be rounded up or down.",fields:[{name:"_",unit:"Hz",shift:10,type:"u22.10",storage:4,defaultValue:44100}],packFormat:"u22.10"},{kind:"const",name:"buffer_size",identifier:384,description:"The size of the internal audio buffer.",fields:[{name:"_",unit:"B",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"buffer_pending",identifier:385,description:"How much data is still left in the buffer to play.\nClients should not send more data than `buffer_size - buffer_pending`,\nbut can keep the `buffer_pending` as low as they want to ensure low latency\nof audio playback.",fields:[{name:"_",unit:"B",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"}],tags:[]},{name:"Azure IoT Hub Health",status:"experimental",shortId:"azureiothubhealth",camelName:"azureIotHubHealth",shortName:"azureIotHubHealth",extends:["_base"],notes:{short:"Health and diagnostics information about the Azure Iot Hub connection."},classIdentifier:342028028,enums:{ConnectionStatus:{name:"ConnectionStatus",storage:2,members:{Connected:1,Disconnected:2,Connecting:3,Disconnecting:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"ro",name:"hub_name",identifier:384,description:"Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured",fields:[{name:"_",type:"string",storage:0}],packFormat:"s"},{kind:"ro",name:"hub_device_id",identifier:385,description:"Device identifier in Azure Iot Hub",fields:[{name:"_",type:"string",storage:0}],packFormat:"s"},{kind:"ro",name:"connection_status",identifier:386,description:"Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.",fields:[{name:"_",type:"ConnectionStatus",storage:2}],packFormat:"u16"},{kind:"command",name:"connect",identifier:129,description:"Starts a connection to the IoT hub service",fields:[]},{kind:"command",name:"disconnect",identifier:130,description:"Starts disconnecting from the IoT hub service",fields:[]},{kind:"command",name:"set_connection_string",identifier:134,description:"Restricted command to override the existing connection string to the Azure IoT Hub.",fields:[{name:"connection_string",type:"string",storage:0}],restricted:!0,packFormat:"s"},{kind:"event",name:"connection_status_change",identifier:3,description:"Raised when the connection status changes",fields:[{name:"connection_status",type:"ConnectionStatus",storage:2}],identifierName:"change",packFormat:"u16"}],tags:[],group:"Iot"},{name:"Barcode reader",status:"experimental",shortId:"barcodereader",camelName:"barcodeReader",shortName:"barcodeReader",extends:["_base"],notes:{short:"A device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector)."},classIdentifier:477339244,enums:{Format:{name:"Format",storage:1,members:{Aztec:1,Code128:2,Code39:3,Code93:4,Codabar:5,DataMatrix:6,Ean13:8,Ean8:9,ITF:10,Pdf417:11,QrCode:12,UpcA:13,UpcE:14}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Turns on or off the detection of barcodes.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"const",name:"formats",identifier:384,description:"Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.",fields:[{name:"format",type:"Format",storage:1,startRepeats:!0}],optional:!0,packFormat:"r: u8"},{kind:"event",name:"detect",identifier:1,description:"Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.",fields:[{name:"format",type:"Format",storage:1},{name:"data",type:"string",storage:0}],identifierName:"active",packFormat:"u8 s"}],tags:[]},{name:"Barometer",status:"experimental",shortId:"barometer",camelName:"barometer",shortName:"barometer",extends:["_base","_sensor"],notes:{short:"A sensor measuring air pressure of outside environment.",registers:"Default streaming interval is 1s."},classIdentifier:504462570,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"pressure",identifier:257,description:"The air pressure.",fields:[{name:"_",unit:"hPa",shift:10,type:"u22.10",storage:4,absoluteMin:300,absoluteMax:1100,typicalMin:940,typicalMax:1040}],volatile:!0,identifierName:"reading",preferredInterval:6e4,packFormat:"u22.10"},{kind:"ro",name:"pressure_error",identifier:262,description:"The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.",fields:[{name:"_",unit:"hPa",shift:10,type:"u22.10",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u22.10"}],tags:["8bit"],group:"Environment"},{name:"bit:radio",status:"experimental",shortId:"bitradio",camelName:"bitRadio",shortName:"bitRadio",extends:["_base"],notes:{short:"Support for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices."},classIdentifier:449414863,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Turns on/off the radio antenna.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"group",identifier:128,description:"Group used to filter packets",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"rw",name:"transmission_power",identifier:129,description:"Antenna power to increase or decrease range.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0,defaultValue:6,absoluteMin:1,absoluteMax:7}],packFormat:"u8"},{kind:"rw",name:"frequency_band",identifier:130,description:"Change the transmission and reception band of the radio to the given channel.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0,defaultValue:7,absoluteMax:83,absoluteMin:0}],packFormat:"u8"},{kind:"command",name:"send_string",identifier:128,description:"Sends a string payload as a radio message, maximum 18 characters.",fields:[{name:"message",type:"string",storage:0}],packFormat:"s"},{kind:"command",name:"send_number",identifier:129,description:"Sends a double precision number payload as a radio message",fields:[{name:"value",isFloat:!0,type:"f64",storage:8}],packFormat:"f64"},{kind:"command",name:"send_value",identifier:130,description:"Sends a double precision number and a name payload as a radio message",fields:[{name:"value",isFloat:!0,type:"f64",storage:8},{name:"name",type:"string",storage:0}],packFormat:"f64 s"},{kind:"command",name:"send_buffer",identifier:131,description:"Sends a payload of bytes as a radio message",fields:[{name:"data",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"report",name:"string_received",identifier:144,description:"Raised when a string packet is received",fields:[{name:"time",unit:"ms",type:"u32",storage:4,isSimpleType:!0},{name:"device_serial_number",type:"u32",storage:4,isSimpleType:!0},{name:"rssi",unit:"dB",type:"i8",storage:-1,isSimpleType:!0},{name:"padding",type:"u8[1]",storage:1},{name:"message",type:"string",storage:0}],packFormat:"u32 u32 i8 b[1] s"},{kind:"report",name:"number_received",identifier:145,description:"Raised when a number packet is received",fields:[{name:"time",unit:"ms",type:"u32",storage:4,isSimpleType:!0},{name:"device_serial_number",type:"u32",storage:4,isSimpleType:!0},{name:"rssi",unit:"dB",type:"i8",storage:-1,isSimpleType:!0},{name:"padding",type:"u8[3]",storage:3},{name:"value",isFloat:!0,type:"f64",storage:8},{name:"name",type:"string",storage:0}],packFormat:"u32 u32 i8 b[3] f64 s"},{kind:"report",name:"buffer_received",identifier:146,description:"Raised when a buffer packet is received",fields:[{name:"time",unit:"ms",type:"u32",storage:4,isSimpleType:!0},{name:"device_serial_number",type:"u32",storage:4,isSimpleType:!0},{name:"rssi",unit:"dB",type:"i8",storage:-1,isSimpleType:!0},{name:"padding",type:"u8[1]",storage:1},{name:"data",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"u32 u32 i8 b[1] b"}],tags:[]},{name:"Bootloader",status:"experimental",shortId:"bootloader",camelName:"bootloader",shortName:"bootloader",extends:["_base"],notes:{short:"Allows flashing (reprogramming) devices over Jacdac."},classIdentifier:536516936,enums:{Error:{name:"Error",storage:4,members:{NoError:0,PacketTooSmall:1,OutOfFlashableRange:2,InvalidPageOffset:3,NotPageAligned:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"info",identifier:0,description:'The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\nthat "fits" this device.',fields:[],identifierName:"announce",hasReport:!0},{kind:"report",name:"info",identifier:0,description:'The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\nthat "fits" this device.',fields:[{name:"service_class",type:"u32",storage:4,isSimpleType:!0},{name:"page_size",unit:"B",type:"u32",storage:4,isSimpleType:!0},{name:"flashable_size",unit:"B",type:"u32",storage:4,isSimpleType:!0},{name:"product_identifer",type:"u32",storage:4,isSimpleType:!0}],secondary:!0,packFormat:"u32 u32 u32 u32"},{kind:"command",name:"set_session",identifier:129,description:"The flashing server should generate a random id, and use this command to set it.",fields:[{name:"session_id",type:"u32",storage:4,isSimpleType:!0}],hasReport:!0,packFormat:"u32"},{kind:"report",name:"set_session",identifier:129,description:"The flashing server should generate a random id, and use this command to set it.",fields:[{name:"session_id",type:"u32",storage:4,isSimpleType:!0}],secondary:!0,packFormat:"u32"},{kind:"command",name:"page_data",identifier:128,description:"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",fields:[{name:"page_address",type:"u32",storage:4,isSimpleType:!0},{name:"page_offset",type:"u16",storage:2,isSimpleType:!0},{name:"chunk_no",type:"u8",storage:1,isSimpleType:!0},{name:"chunk_max",type:"u8",storage:1,isSimpleType:!0},{name:"session_id",type:"u32",storage:4,isSimpleType:!0},{name:"reserved0",type:"u32",storage:4,isSimpleType:!0},{name:"reserved1",type:"u32",storage:4,isSimpleType:!0},{name:"reserved2",type:"u32",storage:4,isSimpleType:!0},{name:"reserved3",type:"u32",storage:4,isSimpleType:!0},{name:"page_data",type:"bytes",storage:208,isSimpleType:!0,maxBytes:208}],hasReport:!0,packFormat:"u32 u16 u8 u8 u32 u32 u32 u32 u32 b[208]"},{kind:"report",name:"page_data",identifier:128,description:"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",fields:[{name:"session_id",type:"u32",storage:4,isSimpleType:!0},{name:"page_error",type:"Error",storage:4},{name:"page_address",type:"u32",storage:4,isSimpleType:!0}],secondary:!0,packFormat:"u32 u32 u32"}],tags:["C"]},{name:"Button",status:"experimental",shortId:"button",camelName:"button",shortName:"button",extends:["_base","_sensor"],notes:{short:"A push-button, which returns to inactive position when not operated anymore."},classIdentifier:343122531,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"pressure",identifier:257,description:"Indicates the pressure state of the button, where ``0`` is open.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],lowLevel:!0,volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"analog",identifier:384,description:"Indicates if the button provides analog ``pressure`` readings.",fields:[{name:"_",type:"bool",storage:1}],optional:!0,packFormat:"u8"},{kind:"ro",name:"pressed",identifier:385,description:"Determines if the button is pressed currently.\n\nIf the event ``down`` is observed, ``pressed`` is true; if ``up`` or ``hold`` are observed, ``pressed`` is false.\nTo initialize, wait for any event or timeout to ``pressed`` is true after 750ms (1.5x hold time).",fields:[{name:"_",type:"bool",storage:1}],client:!0,packFormat:"u8"},{kind:"event",name:"down",identifier:1,description:"Emitted when button goes from inactive to active.",fields:[],identifierName:"active"},{kind:"event",name:"up",identifier:2,description:"Emitted when button goes from active to inactive. The 'time' parameter \nrecords the amount of time between the down and up events.",fields:[{name:"time",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],identifierName:"inactive",packFormat:"u32"},{kind:"event",name:"hold",identifier:129,description:"Emitted when the press time is greater than 500ms, and then at least every 500ms \nas long as the button remains pressed. The 'time' parameter records the the amount of time\nthat the button has been held (since the down event).",fields:[{name:"time",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"}],tags:["C","8bit","padauk"],group:"Button"},{name:"Buzzer",status:"experimental",shortId:"buzzer",camelName:"buzzer",shortName:"buzzer",extends:["_base"],notes:{short:"A simple buzzer."},classIdentifier:458731991,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"volume",identifier:1,description:"The volume (duty cycle) of the buzzer.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1,defaultValue:1}],identifierName:"intensity",packFormat:"u0.8"},{kind:"command",name:"play_tone",identifier:128,description:"Play a PWM tone with given period and duty for given duration.\nThe duty is scaled down with `volume` register.\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\nto send `P = 1000000 / F` and `D = P * V / 2`.",fields:[{name:"period",unit:"us",type:"u16",storage:2,isSimpleType:!0},{name:"duty",unit:"us",type:"u16",storage:2,isSimpleType:!0},{name:"duration",unit:"ms",type:"u16",storage:2,isSimpleType:!0}],lowLevel:!0,packFormat:"u16 u16 u16"},{kind:"command",name:"play_note",identifier:129,description:"Play a note at the given frequency and volume.",fields:[{name:"frequency",unit:"Hz",type:"u16",storage:2,isSimpleType:!0},{name:"volume",unit:"/",shift:16,type:"u0.16",storage:2},{name:"duration",unit:"ms",type:"u16",storage:2,isSimpleType:!0}],client:!0,packFormat:"u16 u0.16 u16"}],tags:["C","8bit"],group:"Sound"},{name:"Capacitive Button",status:"experimental",shortId:"capacitivebutton",camelName:"capacitiveButton",shortName:"capacitiveButton",extends:["_base"],notes:{short:"A configuration service for a capacitive push-button."},classIdentifier:677752265,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"threshold",identifier:6,description:"Indicates the threshold for ``up`` events.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"active_threshold",packFormat:"u0.16"},{kind:"command",name:"calibrate",identifier:2,description:"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \nThe report indicates the calibration is done.",fields:[],identifierName:"calibrate",hasReport:!0},{kind:"report",name:"calibrate",identifier:2,description:"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \nThe report indicates the calibration is done.",fields:[],secondary:!0}],tags:["8bit"],group:"Button"},{name:"Character Screen",status:"experimental",shortId:"characterscreen",camelName:"characterScreen",shortName:"characterScreen",extends:["_base"],notes:{short:"A screen that displays characters."},classIdentifier:523748714,enums:{Variant:{name:"Variant",storage:1,members:{LCD:1,OLED:2,Braille:3}},TextDirection:{name:"TextDirection",storage:1,members:{LeftToRight:1,RightToLeft:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"message",identifier:2,description:"Text to show. Use `\\n` to break lines.",fields:[{name:"_",type:"string",storage:0}],lowLevel:!0,identifierName:"value",packFormat:"s"},{kind:"rw",name:"brightness",identifier:1,description:"Brightness of the screen. `0` means off.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1}],optional:!0,identifierName:"intensity",packFormat:"u0.8"},{kind:"const",name:"variant",identifier:263,description:"Describes the type of character LED screen.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"rw",name:"text_direction",identifier:130,description:"Specifies the RTL or LTR direction of the text.",fields:[{name:"_",type:"TextDirection",storage:1}],optional:!0,packFormat:"u8"},{kind:"const",name:"rows",identifier:384,description:"Gets the number of rows.",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"const",name:"columns",identifier:385,description:"Gets the number of columns.",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"command",name:"set_line",identifier:128,description:"Overrides the content of a single line at a 0-based index.",fields:[{name:"index",type:"u16",storage:2,isSimpleType:!0},{name:"message",type:"string",storage:0}],packFormat:"u16 s"},{kind:"command",name:"clear",identifier:129,description:"Clears all text from the display.",fields:[]}],tags:[],group:"Display"},{name:"CODAL Message Bus",status:"experimental",shortId:"codalmessagebus",camelName:"codalMessageBus",shortName:"codalMessageBus",extends:["_base"],notes:{short:"A service that uses the [CODAL message bus](https://lancaster-university.github.io/microbit-docs/ubit/messageBus/) to send and receive small messages.\n\nYou can find known values for `source` in [CODAL repository](https://github.com/lancaster-university/codal-core/blob/master/inc/core/CodalComponent.h)\nIn MakeCode, you can listen for custom `source`, `value` values using [control.onEvent](https://makecode.microbit.org/reference/control/on-event]."},classIdentifier:304085021,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"send",identifier:128,description:"Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.",fields:[{name:"source",type:"u16",storage:2,isSimpleType:!0},{name:"value",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16 u16"},{kind:"event",name:"message",identifier:128,description:"Raised by the server is triggered by the server. The filtering logic of which event to send over JACDAC is up to the server implementation.",fields:[{name:"source",type:"u16",storage:2,isSimpleType:!0},{name:"value",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16 u16"}],tags:[]},{name:"Color",status:"experimental",shortId:"color",camelName:"color",shortName:"color",extends:["_base","_sensor"],notes:{short:"Senses RGB colors"},classIdentifier:372299111,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"color",identifier:257,description:"Detected color in the RGB color space.",fields:[{name:"red",unit:"/",shift:16,type:"u0.16",storage:2},{name:"green",unit:"/",shift:16,type:"u0.16",storage:2},{name:"blue",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16 u0.16 u0.16"}],tags:["8bit"],group:"Imaging"},{name:"Compass",status:"experimental",shortId:"compass",camelName:"compass",shortName:"compass",extends:["_base","_sensor"],notes:{short:"A sensor that measures the heading."},classIdentifier:364362175,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"heading",identifier:257,description:"The heading with respect to the magnetic north.",fields:[{name:"_",unit:"°",shift:16,type:"u16.16",storage:4,absoluteMin:0,absoluteMax:359}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u16.16"},{kind:"rw",name:"enabled",identifier:1,description:"Turn on or off the sensor. Turning on the sensor may start a calibration sequence.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"ro",name:"heading_error",identifier:262,description:"Error on the heading reading",fields:[{name:"_",unit:"°",shift:16,type:"u16.16",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u16.16"},{kind:"command",name:"calibrate",identifier:2,description:"Starts a calibration sequence for the compass.",fields:[],identifierName:"calibrate"}],tags:[]},{name:"Control",status:"experimental",shortId:"control",camelName:"control",shortName:"control",extends:["_base"],notes:{short:"Control service is always service index `0`.\nIt handles actions common to all services on a device.\n\nNote: some of the optional features (including `flood_ping`, `mcu_temperature`, and all string registers)\nare not implemented in `8bit` version."},classIdentifier:0,enums:{AnnounceFlags:{name:"AnnounceFlags",storage:2,isFlags:!0,members:{RestartCounterSteady:15,RestartCounter1:1,RestartCounter2:2,RestartCounter4:4,RestartCounter8:8,StatusLightNone:0,StatusLightMono:16,StatusLightRgbNoFade:32,StatusLightRgbFade:48,SupportsACK:256,SupportsBroadcast:512,SupportsFrames:1024,IsClient:2048}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"services",identifier:0,description:"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",fields:[],identifierName:"announce",hasReport:!0},{kind:"report",name:"services",identifier:0,description:"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",fields:[{name:"flags",type:"AnnounceFlags",storage:2},{name:"packet_count",type:"u8",storage:1,isSimpleType:!0},{name:"reserved",type:"u8",storage:1,isSimpleType:!0},{name:"service_class",type:"u32",storage:4,isSimpleType:!0,startRepeats:!0}],secondary:!0,packFormat:"u16 u8 u8 r: u32"},{kind:"command",name:"noop",identifier:128,description:"Do nothing. Always ignored. Can be used to test ACKs.",fields:[]},{kind:"command",name:"identify",identifier:129,description:"Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light. \nFor devices with status light (this can be discovered in the announce flags), the client should\nsend the sequence of status light command to generate the identify animation.",fields:[],optional:!0},{kind:"command",name:"reset",identifier:130,description:"Reset device. ACK may or may not be sent.",fields:[],optional:!0},{kind:"command",name:"flood_ping",identifier:131,description:"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.",fields:[{name:"num_responses",type:"u32",storage:4,isSimpleType:!0},{name:"start_counter",type:"u32",storage:4,isSimpleType:!0},{name:"size",unit:"B",type:"u8",storage:1,isSimpleType:!0}],optional:!0,hasReport:!0,packFormat:"u32 u32 u8"},{kind:"report",name:"flood_ping",identifier:131,description:"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.",fields:[{name:"counter",type:"u32",storage:4,isSimpleType:!0},{name:"dummy_payload",type:"bytes",storage:0,isSimpleType:!0}],secondary:!0,packFormat:"u32 b"},{kind:"command",name:"set_status_light",identifier:132,description:"Initiates a color transition of the status light from its current color to the one specified.\nThe transition will complete in about `512 / speed` frames\n(each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\nAs a special case, if speed is `0` the transition is immediate.\nIf MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\nIf a monochrome LEDs is fitted, the average value of ``red``, ``green``, ``blue`` is used.\nIf intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\non, and `0` (for all three channels) should be considered off.",fields:[{name:"to_red",type:"u8",storage:1,isSimpleType:!0},{name:"to_green",type:"u8",storage:1,isSimpleType:!0},{name:"to_blue",type:"u8",storage:1,isSimpleType:!0},{name:"speed",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8 u8 u8 u8"},{kind:"command",name:"proxy",identifier:133,description:"Force client device into proxy mode.",fields:[],optional:!0},{kind:"rw",name:"reset_in",identifier:128,description:"When set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.",fields:[{name:"_",unit:"us",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,packFormat:"u32"},{kind:"const",name:"device_description",identifier:384,description:"Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)",fields:[{name:"_",type:"string",storage:0}],optional:!0,packFormat:"s"},{kind:"const",name:"product_identifier",identifier:385,description:"A numeric code for the string above; used to identify firmware images and devices.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0,absoluteMin:805306368,absoluteMax:1073741823}],optional:!0,packFormat:"u32"},{kind:"const",name:"bootloader_product_identifier",identifier:388,description:"Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0,absoluteMin:805306368,absoluteMax:1073741823}],optional:!0,packFormat:"u32"},{kind:"const",name:"firmware_version",identifier:389,description:"A string describing firmware version; typically semver.",fields:[{name:"_",type:"string",storage:0}],optional:!0,packFormat:"s"},{kind:"ro",name:"mcu_temperature",identifier:386,description:"MCU temperature in degrees Celsius (approximate).",fields:[{name:"_",unit:"°C",type:"i16",storage:-2,isSimpleType:!0,typicalMin:-10,typicalMax:150}],volatile:!0,optional:!0,preferredInterval:6e4,packFormat:"i16"},{kind:"ro",name:"uptime",identifier:390,description:"Number of microseconds since boot.",fields:[{name:"_",unit:"us",type:"u64",storage:8,isSimpleType:!0}],volatile:!0,optional:!0,preferredInterval:6e4,packFormat:"u64"}],tags:["C","8bit"]},{name:"Dimmer",status:"experimental",shortId:"dimmer",camelName:"dimmer",shortName:"dimmer",extends:["_base"],notes:{short:"A light or fan controller that dims the current on a line."},classIdentifier:531637829,enums:{Variant:{name:"Variant",storage:1,members:{Light:1,Fan:2,Pump:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"intensity",identifier:1,description:"The intensity of the current. Set to ``0`` to turn off completely the current.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"intensity",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical device",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:[]},{name:"Distance",status:"experimental",shortId:"distance",camelName:"distance",shortName:"distance",extends:["_base","_sensor"],notes:{short:"A sensor that determines the distance of an object without any physical contact involved."},classIdentifier:337275786,enums:{Variant:{name:"Variant",storage:1,members:{Ultrasonic:1,Infrared:2,LiDAR:3,Laser:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"distance",identifier:257,description:"Current distance from the object",fields:[{name:"_",unit:"m",shift:16,type:"u16.16",storage:4,typicalMin:.02,typicalMax:4}],volatile:!0,identifierName:"reading",packFormat:"u16.16"},{kind:"const",name:"min_range",identifier:260,description:"Minimum measurable distance",fields:[{name:"_",unit:"m",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"min_reading",packFormat:"u16.16"},{kind:"const",name:"max_range",identifier:261,description:"Maximum measurable distance",fields:[{name:"_",unit:"m",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"max_reading",packFormat:"u16.16"},{kind:"const",name:"variant",identifier:263,description:"Determines the type of sensor used.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"]},{name:"DMX",status:"experimental",shortId:"dmx",camelName:"dmx",shortName:"dmx",extends:["_base"],notes:{short:"A service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512."},classIdentifier:298814469,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Determines if the DMX bridge is active",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"command",name:"send",identifier:128,description:"Send a DMX packet, up to 236bytes long, including the start code.",fields:[{name:"channels",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"}],tags:[]},{name:"Dot Matrix",status:"experimental",shortId:"dotmatrix",camelName:"dotMatrix",shortName:"dotMatrix",extends:["_base"],notes:{short:"A rectangular dot matrix display, made of monochrome LEDs or Braille pins."},classIdentifier:286070091,enums:{Variant:{name:"Variant",storage:1,members:{LED:1,Braille:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"dots",identifier:2,description:"The state of the screen where dot on/off state is\nstored as a bit, column by column. The column should be byte aligned.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],identifierName:"value",packFormat:"b"},{kind:"rw",name:"brightness",identifier:1,description:"Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1}],optional:!0,identifierName:"intensity",packFormat:"u0.8"},{kind:"const",name:"rows",identifier:385,description:"Number of rows on the screen",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"const",name:"columns",identifier:386,description:"Number of columns on the screen",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"const",name:"variant",identifier:263,description:"Describes the type of matrix used.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:[],group:"Display"},{name:"Equivalent CO₂",status:"experimental",shortId:"eco2",camelName:"eCO2",shortName:"eCO2",extends:["_base","_sensor"],notes:{short:"Measures equivalent CO₂ levels."},classIdentifier:379362758,enums:{Variant:{name:"Variant",storage:1,members:{VOC:1,NDIR:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"e_CO2",identifier:257,description:"Equivalent CO₂ (eCO₂) readings.",fields:[{name:"_",unit:"ppm",shift:10,type:"u22.10",storage:4,typicalMin:400,typicalMax:8192}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u22.10"},{kind:"ro",name:"e_CO2_error",identifier:262,description:"Error on the reading value.",fields:[{name:"_",unit:"ppm",shift:10,type:"u22.10",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u22.10"},{kind:"const",name:"min_e_CO2",identifier:260,description:"Minimum measurable value",fields:[{name:"_",unit:"ppm",shift:10,type:"u22.10",storage:4}],optional:!0,identifierName:"min_reading",packFormat:"u22.10"},{kind:"const",name:"max_e_CO2",identifier:261,description:"Minimum measurable value",fields:[{name:"_",unit:"ppm",shift:10,type:"u22.10",storage:4}],optional:!0,identifierName:"max_reading",packFormat:"u22.10"},{kind:"const",name:"conditioning_period",identifier:384,description:"Time required to achieve good sensor stability before measuring after long idle period.",fields:[{name:"_",unit:"s",type:"u32",storage:4,isSimpleType:!0}],optional:!0,packFormat:"u32"},{kind:"const",name:"variant",identifier:263,description:"Type of physical sensor and capabilities.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"],group:"Environment"},{name:"Flex",status:"experimental",shortId:"flex",camelName:"flex",shortName:"flex",extends:["_base","_sensor"],notes:{short:"A bending or deflection sensor."},classIdentifier:524797638,enums:{Variant:{name:"Variant",storage:1,members:{Linear22Inch:1,Linear45Inch:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"bending",identifier:257,description:"The relative position of the slider.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"Specifies the physical layout of the flex sensor.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["C","8bit"],group:"Slider"},{name:"Gyroscope",status:"experimental",shortId:"gyroscope",camelName:"gyroscope",shortName:"gyroscope",extends:["_base","_sensor"],notes:{short:"A 3-axis gyroscope."},classIdentifier:505087730,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"rotation_rates",identifier:257,description:"Indicates the current forces acting on accelerometer.",fields:[{name:"x",unit:"°/s",shift:20,type:"i12.20",storage:-4},{name:"y",unit:"°/s",shift:20,type:"i12.20",storage:-4},{name:"z",unit:"°/s",shift:20,type:"i12.20",storage:-4}],volatile:!0,identifierName:"reading",packFormat:"i12.20 i12.20 i12.20"},{kind:"ro",name:"rotation_rates_error",identifier:262,description:"Error on the reading value.",fields:[{name:"_",unit:"°/s",shift:20,type:"i12.20",storage:-4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"i12.20"},{kind:"rw",name:"max_rate",identifier:128,description:"Configures the range of range of rotation rates.",fields:[{name:"_",unit:"°/s",shift:20,type:"i12.20",storage:-4}],optional:!0,packFormat:"i12.20"}],tags:[],group:"Movement"},{name:"Heart Rate",status:"experimental",shortId:"heartrate",camelName:"heartRate",shortName:"heartRate",extends:["_base","_sensor"],notes:{short:"A sensor approximating the heart rate. \n\n\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**"},classIdentifier:376204740,enums:{Variant:{name:"Variant",storage:1,members:{Finger:1,Chest:2,Wrist:3,Pump:4,WebCam:5}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"heart_rate",identifier:257,description:"The estimated heart rate.",fields:[{name:"_",unit:"bpm",shift:16,type:"u16.16",storage:4,typicalMin:30,typicalMax:200}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u16.16"},{kind:"ro",name:"heart_rate_error",identifier:262,description:"The estimated error on the reported sensor data.",fields:[{name:"_",unit:"bpm",shift:16,type:"u16.16",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u16.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical sensor",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"],group:"Biometric"},{name:"HID Adapter",status:"experimental",shortId:"hidadapter",camelName:"hidAdapter",shortName:"hidAdapter",extends:["_base"],notes:{short:"A service for configuring how Jacdac device map to HID input events. Users can have multiple configurations and swap between them by writing to `current_configuration`."},classIdentifier:509040821,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"num_configurations",identifier:128,description:"The number of configurations stored on the server.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"rw",name:"current_configuration",identifier:129,description:"The current configuration the server is using.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"command",name:"get_configuration",identifier:128,description:"Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned",fields:[{name:"results",type:"pipe",storage:12},{name:"configuration_number",type:"u8",storage:1,isSimpleType:!0}],pipeType:"get_configuration",packFormat:"b[12] u8"},{kind:"pipe_report",name:"configuration",identifier:0,description:"Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned",fields:[{name:"configuration_number",type:"u8",storage:1,isSimpleType:!0},{name:"binding_index",type:"u8",storage:1,isSimpleType:!0},{name:"padding",type:"u8[2]",storage:2},{name:"device_id",type:"u64",storage:8,isSimpleType:!0},{name:"service_class",type:"u32",storage:4,isSimpleType:!0},{name:"trigger_value",type:"u32",storage:4,isSimpleType:!0},{name:"trigger_context",type:"u8",storage:1,isSimpleType:!0},{name:"service_index",type:"u8",storage:1,isSimpleType:!0},{name:"selector",type:"u16",storage:2,isSimpleType:!0},{name:"modifiers",type:"u16",storage:2,isSimpleType:!0}],pipeType:"get_configuration",packFormat:"u8 u8 b[2] u64 u32 u32 u8 u8 u16 u16"},{kind:"command",name:"set_binding",identifier:130,description:"Stores the given binding on the server. If a binding exists at this index, the new binding will replace it.",fields:[{name:"configuration_number",type:"u8",storage:1,isSimpleType:!0},{name:"binding_index",type:"u8",storage:1,isSimpleType:!0},{name:"padding",type:"u8[2]",storage:2},{name:"device_id",type:"u64",storage:8,isSimpleType:!0},{name:"service_class",type:"u32",storage:4,isSimpleType:!0},{name:"trigger_value",type:"u32",storage:4,isSimpleType:!0},{name:"trigger_context",type:"u8",storage:1,isSimpleType:!0},{name:"service_index",type:"u8",storage:1,isSimpleType:!0},{name:"selector",type:"u16",storage:2,isSimpleType:!0},{name:"modifiers",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u8 u8 b[2] u64 u32 u32 u8 u8 u16 u16"},{kind:"command",name:"clear_binding",identifier:131,description:"Clears a specific binding stored on the device.",fields:[{name:"configuration_number",type:"u8",storage:1,isSimpleType:!0},{name:"binding_index",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8 u8"},{kind:"command",name:"clear_configuration",identifier:132,description:"Clears a specific configuration stored on the device.",fields:[{name:"configuration_number",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"command",name:"clear",identifier:133,description:"Clears all configurations and bindings stored on the device.",fields:[]},{kind:"event",name:"changed",identifier:3,description:"Event that notifies clients that the server has swapped to a new configuration or changed key bindings.",fields:[],identifierName:"change"}],tags:[]},{name:"HID Keyboard",status:"experimental",shortId:"hidkeyboard",camelName:"hidKeyboard",shortName:"hidKeyboard",extends:["_base"],notes:{short:"Control a HID keyboard. \n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\nModifiers are in page 87.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command."},classIdentifier:414210922,enums:{Modifiers:{name:"Modifiers",storage:1,isFlags:!0,members:{None:0,LeftControl:1,LeftShift:2,LeftAlt:4,LeftGUI:8,RightControl:16,RightShift:32,RightAlt:64,RightGUI:128}},Action:{name:"Action",storage:1,members:{Press:0,Up:1,Down:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"key",identifier:128,description:"Presses a key or a sequence of keys down.",fields:[{name:"selector",type:"u16",storage:2,isSimpleType:!0,startRepeats:!0},{name:"modifiers",type:"Modifiers",storage:1},{name:"action",type:"Action",storage:1}],lowLevel:!0,packFormat:"r: u16 u8 u8"},{kind:"command",name:"clear",identifier:129,description:"Clears all pressed keys.",fields:[]}],tags:["8bit"]},{name:"HID Mouse",status:"experimental",shortId:"hidmouse",camelName:"hidMouse",shortName:"hidMouse",extends:["_base"],notes:{short:"Controls a HID mouse."},classIdentifier:411425820,enums:{Button:{name:"Button",storage:2,isFlags:!0,members:{Left:1,Right:2,Middle:4}},ButtonEvent:{name:"ButtonEvent",storage:1,members:{Up:1,Down:2,Click:3,DoubleClick:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"set_button",identifier:128,description:"Sets the up/down state of one or more buttons.\nA ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\nA ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).",fields:[{name:"buttons",type:"Button",storage:2},{name:"event",type:"ButtonEvent",storage:1}],packFormat:"u16 u8"},{kind:"command",name:"move",identifier:129,description:"Moves the mouse by the distance specified.\nIf the time is positive, it specifies how long to make the move.",fields:[{name:"dx",unit:"#",type:"i16",storage:-2,isSimpleType:!0},{name:"dy",unit:"#",type:"i16",storage:-2,isSimpleType:!0},{name:"time",unit:"ms",type:"u16",storage:2,isSimpleType:!0}],packFormat:"i16 i16 u16"},{kind:"command",name:"wheel",identifier:130,description:"Turns the wheel up or down. Positive if scrolling up.\nIf the time is positive, it specifies how long to make the move.",fields:[{name:"dy",unit:"#",type:"i16",storage:-2,isSimpleType:!0},{name:"time",unit:"ms",type:"u16",storage:2,isSimpleType:!0}],packFormat:"i16 u16"}],tags:["8bit"]},{name:"Humidity",status:"experimental",shortId:"humidity",camelName:"humidity",shortName:"humidity",extends:["_base","_sensor"],notes:{short:"A sensor measuring humidity of outside environment.",registers:"Default streaming interval is 1s."},classIdentifier:382210232,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"humidity",identifier:257,description:"The relative humidity in percentage of full water saturation.",fields:[{name:"_",unit:"%RH",shift:10,type:"u22.10",storage:4,typicalMax:100,typicalMin:0}],volatile:!0,identifierName:"reading",preferredInterval:5e3,packFormat:"u22.10"},{kind:"ro",name:"humidity_error",identifier:262,description:"The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.",fields:[{name:"_",unit:"%RH",shift:10,type:"u22.10",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u22.10"},{kind:"const",name:"min_humidity",identifier:260,description:"Lowest humidity that can be reported.",fields:[{name:"_",unit:"%RH",shift:10,type:"u22.10",storage:4,defaultValue:0}],identifierName:"min_reading",packFormat:"u22.10"},{kind:"const",name:"max_humidity",identifier:261,description:"Highest humidity that can be reported.",fields:[{name:"_",unit:"%RH",shift:10,type:"u22.10",storage:4,defaultValue:100}],identifierName:"max_reading",packFormat:"u22.10"}],tags:["C","8bit"],group:"Environment"},{name:"Illuminance",status:"experimental",shortId:"illuminance",camelName:"illuminance",shortName:"illuminance",extends:["_base","_sensor"],notes:{short:"Detects the amount of light falling onto a given surface area.\n\nNote that this is different from *luminance*, the amount of light that passes through, emits from, or reflects off an object."},classIdentifier:510577394,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"light",identifier:257,description:"The amount of illuminance, as lumens per square metre.",fields:[{name:"_",unit:"lux",shift:10,type:"u22.10",storage:4,typicalMax:1e5,typicalMin:0}],volatile:!0,identifierName:"reading",packFormat:"u22.10"},{kind:"ro",name:"light_error",identifier:262,description:"Error on the reported sensor value.",fields:[{name:"_",unit:"lux",shift:10,type:"u22.10",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u22.10"}],tags:["8bit","padauk"],group:"Imaging"},{name:"Indexed screen",status:"experimental",shortId:"indexedscreen",camelName:"indexedScreen",shortName:"indexedScreen",extends:["_base"],notes:{short:"A screen with indexed colors.\n\nThis is often run over an SPI connection, not regular single-wire JACDAC."},classIdentifier:385496805,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"start_update",identifier:129,description:"Sets the update window for subsequent `set_pixels` commands.",fields:[{name:"x",unit:"px",type:"u16",storage:2,isSimpleType:!0},{name:"y",unit:"px",type:"u16",storage:2,isSimpleType:!0},{name:"width",unit:"px",type:"u16",storage:2,isSimpleType:!0},{name:"height",unit:"px",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16 u16 u16 u16"},{kind:"command",name:"set_pixels",identifier:131,description:'Set pixels in current window, according to current palette.\nEach "line" of data is aligned to a byte.',fields:[{name:"pixels",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"rw",name:"brightness",identifier:1,description:"Set backlight brightness.\nIf set to `0` the display may go to sleep.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1}],identifierName:"intensity",packFormat:"u0.8"},{kind:"rw",name:"palette",identifier:128,description:"The current palette.\nThe color entry repeats `1 << bits_per_pixel` times.\nThis register may be write-only.",fields:[{name:"blue",type:"u8",storage:1,isSimpleType:!0,startRepeats:!0},{name:"green",type:"u8",storage:1,isSimpleType:!0},{name:"red",type:"u8",storage:1,isSimpleType:!0},{name:"padding",type:"u8",storage:1,isSimpleType:!0}],packFormat:"r: u8 u8 u8 u8"},{kind:"const",name:"bits_per_pixel",identifier:384,description:"Determines the number of palette entries.\nTypical values are 1, 2, 4, or 8.",fields:[{name:"_",unit:"bit",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"const",name:"width",identifier:385,description:'Screen width in "natural" orientation.',fields:[{name:"_",unit:"px",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"const",name:"height",identifier:386,description:'Screen height in "natural" orientation.',fields:[{name:"_",unit:"px",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"rw",name:"width_major",identifier:129,description:'If true, consecutive pixels in the "width" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the "height" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff `width < height`\n(in other words, it\'s only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the `rotation` register.',fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"rw",name:"up_sampling",identifier:130,description:"Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\nTypical values are 1 and 2.",fields:[{name:"_",unit:"px",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"rw",name:"rotation",identifier:131,description:"Possible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect `width` and `height` registers,\nand may be ignored by some screens.",fields:[{name:"_",unit:"°",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"}],tags:[]},{name:"Infrastructure",status:"experimental",shortId:"infrastructure",camelName:"infrastructure",shortName:"infrastructure",extends:["_base"],notes:{short:"A service that tags a device as purely infrastructure device.\n\n\nA Jacdac user interface can ignore any device that hosts this service."},classIdentifier:504728043,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"}],tags:[]},{name:"Joystick",status:"experimental",shortId:"joystick",camelName:"joystick",shortName:"joystick",extends:["_base","_sensor"],notes:{short:"A two axis directional joystick"},classIdentifier:277836886,enums:{Buttons:{name:"Buttons",storage:4,isFlags:!0,members:{Left:1,Up:2,Right:4,Down:8,A:16,B:32,Menu:64,Select:128,Reset:256,Exit:512,X:1024,Y:2048}},Variant:{name:"Variant",storage:1,members:{Thumb:1,ArcadeBall:2,ArcadeStick:3,Gamepad:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"direction",identifier:257,description:'If the joystick is analog, the directional buttons should be "simulated", based on joystick position\n(`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\nIf the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\nThe primary button on the joystick is `A`.',fields:[{name:"buttons",type:"Buttons",storage:4},{name:"x",unit:"/",shift:15,type:"i1.15",storage:-2},{name:"y",unit:"/",shift:15,type:"i1.15",storage:-2}],volatile:!0,identifierName:"reading",packFormat:"u32 i1.15 i1.15"},{kind:"const",name:"variant",identifier:263,description:"The type of physical joystick.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"const",name:"buttons_available",identifier:384,description:"Indicates a bitmask of the buttons that are mounted on the joystick.\nIf the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\nEven when marked as not available, they will still be simulated based on the analog joystick.",fields:[{name:"_",type:"Buttons",storage:4}],packFormat:"u32"},{kind:"event",name:"buttons_changed",identifier:3,description:"Emitted whenever the state of buttons changes.",fields:[{name:"buttons",type:"Buttons",storage:4}],identifierName:"change",packFormat:"u32"}],tags:["8bit","padauk"],group:"Button"},{name:"LED",status:"experimental",shortId:"led",camelName:"led",shortName:"led",extends:["_base"],notes:{short:"A controller for 1 or more monochrome or RGB LEDs connected in parallel."},classIdentifier:506480888,enums:{Variant:{name:"Variant",storage:1,members:{ThroughHole:1,SMD:2,Power:3,Bead:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"animate",identifier:128,description:"This has the same semantics as `set_status_light` in the control service.",fields:[{name:"to_red",type:"u8",storage:1,isSimpleType:!0},{name:"to_green",type:"u8",storage:1,isSimpleType:!0},{name:"to_blue",type:"u8",storage:1,isSimpleType:!0},{name:"speed",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8 u8 u8 u8"},{kind:"ro",name:"color",identifier:384,description:"The current color of the LED.",fields:[{name:"red",type:"u8",storage:1,isSimpleType:!0},{name:"green",type:"u8",storage:1,isSimpleType:!0},{name:"blue",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8 u8 u8"},{kind:"rw",name:"max_power",identifier:7,description:"Limit the power drawn by the light-strip (and controller).",fields:[{name:"_",unit:"mA",type:"u16",storage:2,isSimpleType:!0,defaultValue:100}],optional:!0,identifierName:"max_power",packFormat:"u16"},{kind:"const",name:"led_count",identifier:387,description:"If known, specifies the number of LEDs in parallel on this device.",fields:[{name:"_",type:"u16",storage:2,isSimpleType:!0}],optional:!0,packFormat:"u16"},{kind:"const",name:"wave_length",identifier:385,description:"If monochrome LED, specifies the wave length of the LED.",fields:[{name:"_",unit:"nm",type:"u16",storage:2,isSimpleType:!0,typicalMin:365,typicalMax:885}],optional:!0,packFormat:"u16"},{kind:"const",name:"luminous_intensity",identifier:386,description:"The luminous intensity of the LED, at full value, in micro candella.",fields:[{name:"_",unit:"mcd",type:"u16",storage:2,isSimpleType:!0,typicalMin:10,typicalMax:5e3}],optional:!0,packFormat:"u16"},{kind:"const",name:"variant",identifier:263,description:"The physical type of LED.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit","padauk"],group:"Light"},{name:"LED Pixel",status:"experimental",shortId:"ledpixel",camelName:"ledPixel",shortName:"ledPixel",extends:["_base"],notes:{short:"A controller for strips of individually controlled RGB LEDs.",long:"## Light programs\n\nRealistically, with 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network.\n\nThus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire.\n\nLight commands are not Jacdac commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof `run` command.\n\nDefinitions:\n* `P` - position in the strip\n* `R` - number of repetitions of the command\n* `N` - number of pixels affected by the command\n* `C` - single color designation\n* `C+` - sequence of color designations\n\nUpdate modes:\n* `0` - replace\n* `1` - add RGB\n* `2` - subtract RGB\n* `3` - multiply RGB (by c/128); each pixel value will change by at least 1\n\nProgram commands:\n* `0xD0: setall C+` - set all pixels in current range to given color pattern\n* `0xD1: fade C+` - set pixels in current range to colors between colors in sequence\n* `0xD2: fadehsv C+` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotfwd K` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotback K` - same, but towards the connector\n* `0xD5: show M=50` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range P=0 N=length W=1 S=0` - range from pixel `P`, `N` pixels long\n  (currently unsupported: every `W` pixels skip `S` pixels)\n* `0xD7: mode K=0` - set update mode\n* `0xD8: tmpmode K=0` - set update mode for next command only\n* `0xCF: setone P C` - set one pixel at `P` (in current range) to given color\n* `mult V` - macro to multiply current range by given value (float)\n\nA number `k` is encoded as follows:\n* `0 <= k < 128` -> `k`\n* `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\n* bigger and negative numbers are not supported\n\nThus, bytes `0xC0-0xFF` are free to use for commands.\n\nFormats:\n* `0xC1, R, G, B` - single color parameter\n* `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\n* `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\n* `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\n* `0xCF, <number>, R, G, B` - `set1` special format\n\nCommands are encoded as command byte, followed by parameters in the order\nfrom the command definition.\n\nThe `setone()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\nnumber, and followed by 3 bytes of color."},classIdentifier:309264608,enums:{LightType:{name:"LightType",storage:1,members:{WS2812B_GRB:0,APA102:16,SK9822:17}},Variant:{name:"Variant",storage:1,members:{Strip:1,Ring:2,Stick:3,Jewel:4,Matrix:5}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"brightness",identifier:1,description:"Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1,defaultValue:.05}],identifierName:"intensity",packFormat:"u0.8"},{kind:"ro",name:"actual_brightness",identifier:384,description:"This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1}],packFormat:"u0.8"},{kind:"rw",name:"light_type",identifier:128,description:"Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.",fields:[{name:"_",type:"LightType",storage:1}],packFormat:"u8"},{kind:"rw",name:"num_pixels",identifier:129,description:"Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0,defaultValue:15}],packFormat:"u16"},{kind:"rw",name:"num_columns",identifier:131,description:"If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0}],optional:!0,packFormat:"u16"},{kind:"rw",name:"max_power",identifier:7,description:"Limit the power drawn by the light-strip (and controller).",fields:[{name:"_",unit:"mA",type:"u16",storage:2,isSimpleType:!0,defaultValue:200}],identifierName:"max_power",packFormat:"u16"},{kind:"const",name:"max_pixels",identifier:385,description:"The maximum supported number of pixels.\nAll writes to `num_pixels` are clamped to `max_pixels`.",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"rw",name:"num_repeats",identifier:130,description:"How many times to repeat the program passed in `run` command.\nShould be set before the `run` command.\nSetting to `0` means to repeat forever.",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0,defaultValue:1}],packFormat:"u16"},{kind:"const",name:"variant",identifier:263,description:"Specifies the shape of the light strip.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"command",name:"run",identifier:129,description:'Run the given light "program". See service description for details.',fields:[{name:"program",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"}],tags:["C"],group:"Light"},{name:"Light level",status:"experimental",shortId:"lightlevel",camelName:"lightLevel",shortName:"lightLevel",extends:["_base","_sensor"],notes:{short:"A sensor that measures luminosity level."},classIdentifier:400333340,enums:{Variant:{name:"Variant",storage:1,members:{PhotoResistor:1,LEDMatrix:2,Ambient:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"light_level",identifier:257,description:"Detect light level",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical sensor.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit","padauk"],group:"Imaging"},{name:"Logger",status:"experimental",shortId:"logger",camelName:"logger",shortName:"logger",extends:["_base"],notes:{short:"A service which can report messages to the bus."},classIdentifier:316415946,enums:{Priority:{name:"Priority",storage:1,members:{Debug:0,Log:1,Warning:2,Error:3,Silent:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"min_priority",identifier:128,description:"Messages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.",fields:[{name:"_",type:"Priority",storage:1,defaultValue:1}],packFormat:"u8"},{kind:"report",name:"debug",identifier:128,description:"Report a message.",fields:[{name:"message",type:"string",storage:0}],packFormat:"s"},{kind:"report",name:"log",identifier:129,description:"Report a message.",fields:[{name:"message",type:"string",storage:0}],packFormat:"s"},{kind:"report",name:"warn",identifier:130,description:"Report a message.",fields:[{name:"message",type:"string",storage:0}],packFormat:"s"},{kind:"report",name:"error",identifier:131,description:"Report a message.",fields:[{name:"message",type:"string",storage:0}],packFormat:"s"}],tags:["C"]},{name:"Magnetometer",status:"experimental",shortId:"magnetomer",camelName:"magnetometer",shortName:"magnetometer",extends:["_base","_sensor"],notes:{short:"A 3-axis magnetometer."},classIdentifier:318935176,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"forces",identifier:257,description:"Indicates the current magnetic field on magnetometer.\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).",fields:[{name:"x",unit:"nT",type:"i32",storage:-4,isSimpleType:!0},{name:"y",unit:"nT",type:"i32",storage:-4,isSimpleType:!0},{name:"z",unit:"nT",type:"i32",storage:-4,isSimpleType:!0}],volatile:!0,identifierName:"reading",packFormat:"i32 i32 i32"},{kind:"ro",name:"forces_error",identifier:262,description:"Error on the readings.",fields:[{name:"_",unit:"nT",type:"i32",storage:-4,isSimpleType:!0}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"i32"},{kind:"command",name:"calibrate",identifier:2,description:"Forces a calibration sequence where the user/device\nmight have to rotate to be calibrated.",fields:[],identifierName:"calibrate"}],tags:[]},{name:"Matrix Keypad",status:"experimental",shortId:"matrixkeypad",camelName:"matrixKeypad",shortName:"matrixKeypad",extends:["_base","_sensor"],notes:{short:"A matrix of buttons connected as a keypad"},classIdentifier:319172040,enums:{Variant:{name:"Variant",storage:1,members:{Membrane:1,Keyboard:2,Elastomer:3,ElastomerLEDPixel:4}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"pressed",identifier:257,description:"The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n``row = index / columns``, ``column = index % columns``.",fields:[{name:"index",type:"u8",storage:1,isSimpleType:!0,startRepeats:!0}],volatile:!0,identifierName:"reading",packFormat:"r: u8"},{kind:"const",name:"rows",identifier:384,description:"Number of rows in the matrix",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"const",name:"columns",identifier:385,description:"Number of columns in the matrix",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"const",name:"labels",identifier:386,description:"The characters printed on the keys if any, in indexing sequence.",fields:[{name:"label",type:"string0",storage:0,startRepeats:!0}],optional:!0,packFormat:"r: z"},{kind:"const",name:"variant",identifier:263,description:"The type of physical keypad. If the variant is ``ElastomerLEDPixel``\nand the next service on the device is a ``LEDPixel`` service, it is considered\nas the service controlling the LED pixel on the keypad.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"event",name:"down",identifier:1,description:"Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],identifierName:"active",packFormat:"u8"},{kind:"event",name:"up",identifier:2,description:"Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],identifierName:"inactive",packFormat:"u8"},{kind:"event",name:"click",identifier:128,description:"Emitted together with `up` when the press time was not longer than 500ms.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"event",name:"long_click",identifier:129,description:"Emitted together with `up` when the press time was more than 500ms.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"}],tags:[],group:"Button"},{name:"Microphone",status:"experimental",shortId:"microphone",camelName:"microphone",shortName:"microphone",extends:["_base"],notes:{short:"A single-channel microphone."},classIdentifier:289254534,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"sample",identifier:129,description:"The samples will be streamed back over the `samples` pipe.\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\nOtherwise the specified number of samples is streamed.\nSamples are sent as `i16`.",fields:[{name:"samples",type:"pipe",storage:12},{name:"num_samples",type:"u32",storage:4,isSimpleType:!0}],pipeType:"sample",packFormat:"b[12] u32"},{kind:"rw",name:"sampling_period",identifier:128,description:"Get or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.",fields:[{name:"_",unit:"us",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"}],tags:[],group:"Sound"},{name:"MIDI output",status:"experimental",shortId:"midioutput",camelName:"midiOutput",shortName:"midiOutput",extends:["_base"],notes:{short:"A MIDI output device."},classIdentifier:444894423,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Opens or closes the port to the MIDI device",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"command",name:"clear",identifier:128,description:"Clears any pending send data that has not yet been sent from the MIDIOutput's queue.",fields:[]},{kind:"command",name:"send",identifier:129,description:"Enqueues the message to be sent to the corresponding MIDI port",fields:[{name:"data",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"}],tags:[],group:"Sound"},{name:"Model Runner",status:"experimental",shortId:"modelrunner",camelName:"modelRunner",shortName:"modelRunner",extends:["_base"],notes:{short:"Runs machine learning models.\n\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device."},classIdentifier:336566904,enums:{ModelFormat:{name:"ModelFormat",storage:4,members:{TFLite:860636756,ML4F:809963362,EdgeImpulseCompiled:810961221}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"set_model",identifier:128,description:"Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.",fields:[{name:"model_size",unit:"B",type:"u32",storage:4,isSimpleType:!0}],hasReport:!0,packFormat:"u32"},{kind:"report",name:"set_model",identifier:128,description:"Open pipe for streaming in the model. The size of the model has to be declared upfront.\nThe model is streamed over regular pipe data packets.\nThe format supported by this instance of the service is specified in `format` register.\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.",fields:[{name:"model_port",type:"pipe_port",storage:2}],secondary:!0,pipeType:"set_model",packFormat:"u16"},{kind:"command",name:"predict",identifier:129,description:"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.",fields:[{name:"outputs",type:"pipe",storage:12}],pipeType:"predict",hasReport:!0,packFormat:"b[12]"},{kind:"report",name:"predict",identifier:129,description:"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\nand results are send over the `outputs` pipe.",fields:[{name:"inputs",type:"pipe_port",storage:2}],secondary:!0,pipeType:"predict",packFormat:"u16"},{kind:"rw",name:"auto_invoke_every",identifier:128,description:"When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.",fields:[{name:"_",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16"},{kind:"ro",name:"outputs",identifier:257,description:"Results of last model invocation as `float32` array.",fields:[{name:"output",isFloat:!0,type:"f32",storage:4,startRepeats:!0}],volatile:!0,identifierName:"reading",packFormat:"r: f32"},{kind:"ro",name:"input_shape",identifier:384,description:"The shape of the input tensor.",fields:[{name:"dimension",type:"u16",storage:2,isSimpleType:!0,startRepeats:!0}],packFormat:"r: u16"},{kind:"ro",name:"output_shape",identifier:385,description:"The shape of the output tensor.",fields:[{name:"dimension",type:"u16",storage:2,isSimpleType:!0,startRepeats:!0}],packFormat:"r: u16"},{kind:"ro",name:"last_run_time",identifier:386,description:"The time consumed in last model execution.",fields:[{name:"_",unit:"us",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"allocated_arena_size",identifier:387,description:"Number of RAM bytes allocated for model execution.",fields:[{name:"_",unit:"B",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"model_size",identifier:388,description:"The size of the model in bytes.",fields:[{name:"_",unit:"B",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"last_error",identifier:389,description:"Textual description of last error when running or loading model (if any).",fields:[{name:"_",type:"string",storage:0}],packFormat:"s"},{kind:"const",name:"format",identifier:390,description:"The type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.",fields:[{name:"_",type:"ModelFormat",storage:4}],packFormat:"u32"},{kind:"const",name:"format_version",identifier:391,description:"A version number for the format.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"const",name:"parallel",identifier:392,description:"If present and true this service can run models independently of other\ninstances of this service on the device.",fields:[{name:"_",type:"bool",storage:1}],optional:!0,packFormat:"u8"}],tags:[]},{name:"Motion",status:"experimental",shortId:"motion",camelName:"motion",shortName:"motion",extends:["_base","_sensor"],notes:{short:"A sensor, typically PIR, that detects object motion within a certain range"},classIdentifier:293185353,enums:{Variant:{name:"Variant",storage:1,members:{PIR:1}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"moving",identifier:257,description:"Reports is movement is currently detected by the sensor.",fields:[{name:"_",type:"bool",storage:1}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u8"},{kind:"const",name:"max_distance",identifier:384,description:"Maximum distance where objects can be detected.",fields:[{name:"_",unit:"m",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"const",name:"angle",identifier:385,description:"Opening of the field of view",fields:[{name:"_",unit:"°",type:"u16",storage:2,isSimpleType:!0}],optional:!0,packFormat:"u16"},{kind:"const",name:"variant",identifier:263,description:"Type of physical sensor",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"event",name:"movement",identifier:1,description:"A movement was detected.",fields:[],identifierName:"active"}],tags:["8bit"],group:"Movement"},{name:"Motor",status:"experimental",shortId:"motor",camelName:"motor",shortName:"motor",extends:["_base"],notes:{short:"A bi-directional DC motor."},classIdentifier:385895640,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"duty",identifier:2,description:"PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \nwhile ``enabled`` acts as brake.",fields:[{name:"_",unit:"/",shift:15,type:"i1.15",storage:-2}],identifierName:"value",packFormat:"i1.15"},{kind:"rw",name:"enabled",identifier:1,description:"Turn the power to the motor on/off.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"const",name:"load_torque",identifier:384,description:"Torque required to produce the rated power of an electrical motor at load speed.",fields:[{name:"_",unit:"kg/cm",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"const",name:"load_speed",identifier:385,description:"Revolutions per minute of the motor under full load.",fields:[{name:"_",unit:"rpm",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"}],tags:["C","8bit"]},{name:"Multitouch",status:"experimental",shortId:"multitouch",camelName:"multitouch",shortName:"multitouch",extends:["_base","_sensor"],notes:{short:"A capacitive touch sensor with multiple inputs.",events:"Most events include the channel number of the input."},classIdentifier:416636459,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"capacity",identifier:257,description:"Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\nno touch, wheres a value of around `100` or more indicates touch.\nIt's best to ignore this (unless debugging), and use events.",fields:[{name:"capacitance",type:"i32",storage:-4,isSimpleType:!0,startRepeats:!0}],volatile:!0,identifierName:"reading",packFormat:"r: i32"},{kind:"event",name:"touch",identifier:1,description:"Emitted when an input is touched.",fields:[{name:"channel",type:"u32",storage:4,isSimpleType:!0}],identifierName:"active",packFormat:"u32"},{kind:"event",name:"release",identifier:2,description:"Emitted when an input is no longer touched.",fields:[{name:"channel",type:"u32",storage:4,isSimpleType:!0}],identifierName:"inactive",packFormat:"u32"},{kind:"event",name:"tap",identifier:128,description:"Emitted when an input is briefly touched. TODO Not implemented.",fields:[{name:"channel",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"event",name:"long_press",identifier:129,description:"Emitted when an input is touched for longer than 500ms. TODO Not implemented.",fields:[{name:"channel",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"event",name:"swipe_pos",identifier:144,description:"Emitted when input channels are successively touched in order of increasing channel numbers.",fields:[]},{kind:"event",name:"swipe_neg",identifier:145,description:"Emitted when input channels are successively touched in order of decreasing channel numbers.",fields:[]}],tags:[],group:"Button"},{name:"Potentiometer",status:"experimental",shortId:"potentiometer",camelName:"potentiometer",shortName:"potentiometer",extends:["_base","_sensor"],notes:{short:"A slider or rotary potentiometer."},classIdentifier:522667846,enums:{Variant:{name:"Variant",storage:1,members:{Slider:1,Rotary:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"position",identifier:257,description:"The relative position of the slider.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"Specifies the physical layout of the potentiometer.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["C","8bit"],group:"Slider"},{name:"Power",status:"experimental",shortId:"power",camelName:"power",shortName:"power",extends:["_base"],notes:{short:"A power-provider service.",long:"## Power negotiation protocol\n\nThe purpose of the power negotiation is to ensure that there is no more than ~900mA\ndelivered to the power rail.\nThis is realized by limiting the number of enabled power provider services to one.\n\nNote, that it's also possible to have low-current power providers,\nwhich are limited to 100mA and do not run a power provider service.\nThese are **not** accounted for in the power negotiation protocol.\n\nPower providers can have multiple _channels_, typically multiple Jacdac ports on the provider.\nEach channel can be limited to 900mA separately.\nIn normal operation, the data lines of each channels are connected together.\nThe ground lines are always connected together.\nMulti-channel power providers are also called _powered hubs_.\n\nWhile channels have separate current limits, there's nothing to prevent the user\nfrom joining two or more channels outside of the provider using a passive hub.\nThis would allow more than 900mA of current to be drawn, resulting in cables or components\ngetting hot and/or malfunctioning.\nThus, the power negotiation protocol seeks to detect situations where\nmultiple channels of power provider(s) are bridged together\nand shut down all but one of the channels involved.\n\nThe protocol is built around the power providers periodically sending specially crafted\n`shutdown` commands in broadcast mode.\nNote that this is unusual - services typically only send reports.\n\nThe `shutdown` commands can be reliably identified based on their first half (more details below).\nWhen a power provider starts receiving a `shutdown` command, it needs to take\nsteps to identify which of its channels the command is coming from.\nThis is typically realized with analog switches between data lines of channels.\nThe channel which received the `shutdown` command is then shut down.\nNote that in the case a single-channel provider any received `shutdown` command will cause a shut down.\n\nA multi-channel provider needs to also identify when a `shutdown` command it sent from one channel\nis received on any of its other channels and shut down one of the involved channels.\n\nIt is also possible to build a _data bridge_ device, with two or more ports.\nIt passes through all data except for `shutdown` commands,\nbut **does not** connect the power lines.\n\n### Protocol details\n\nThe `shutdown` commands follow a very narrow format:\n* they need to be the only packet in the frame (and thus we can also call them `shutdown` frames)\n* the second word of `device_id` needs to be set to `0xAA_AA_AA_AA` (alternating 0 and 1)\n* the service index is set to `0x3d`\n* the CRC is therefore fixed\n* therefore, the packet can be recognized by reading the first 8 bytes (total length is 16 bytes)\n\nThe exact byte structure of `shutdown` command is:\n`15 59 04 05 5A C9 A4 1F AA AA AA AA 00 3D 80 00`\n\nThere is one power service per channel.\nA multi-channel power provider can be implemented as one device with multiple services (typically with one MCU),\nor many devices with one service each (typically multiple MCUs).\nThe first option is preferred as it fixes the order of channels,\nbut the second option may be cheaper to implement.\n\nAfter queuing a `shutdown` command, the service enters a grace period\nuntil the report has been sent on the wire.\nDuring the grace period incoming `shutdown` commands are ignored.\n\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\n  sends the first `shutdown` command\n* Every enabled power service emits `shutdown` commands every 400-600ms (random; first few packets can be even sent more often)\n* If an enabled power service sees a `shutdown` command from somebody else,\n  it disables itself (unless in grace period)\n* If a disabled power service sees no `shutdown` command for more than ~1200ms, it enables itself\n  (this is when the previous power source is unplugged or otherwise malfunctions)\n* If a power service has been disabled for around 10s, it enables itself.\n\nAdditionally:\n* While the `allowed` register is set to `0`, the service will not enable itself (nor send `shutdown` commands)\n* When a current overdraw is detected, the service stop providing power and enters `Overload` state for around 2 seconds,\n  while still sending `shutdown` commands.\n\n### Client notes\n\nIf a client hears a `shutdown` command it just means it's on a branch of the\nnetwork with a (high) power provider.\nAs clients (brains) typically do not consume much current (as opposed to, say, servos),\nthe `shutdown` commands are typically irrelevant to them.\n\nFor power monitoring, the `power_status_changed` event (and possibly `power_status` register)\ncan be used.\nIn particular, user interfaces may alert the user to `Overload` status.\nThe `Overprovision` status is generally considered normal (eg. when two multi-channel power providers are linked together).\n\n### Server implementation notes\n\n#### An MCU per channel\n\nEvery channel has:\n* a cheap 8-bit MCU (eg., PMS150C)\n* a current limiter with latching circuit\n* an analog switch\n\nThe MCU is connected to data line of the channel.\nThe switch joins the data line of the channel with internal data bus, common to all channels.\nBoth the switch and the limiter are controlled by the MCU.\nThe latching circuit on the limiter shuts it down immediately on current overdraw.\n\nDuring reception, after the beginning of `shutdown` frame is detected,\nthe switch is opened for a brief period.\nIf the `shutdown` frame is received correctly, it means it was on MCU's channel.\n\n#### A dedicated MCU for multiple channels\n\nEvery channel has:\n* a current limiter with latching circuit\n* an analog switch\n* a wiggle-detection line connecting the MCU to data line of the channel\n\nThe MCU here needs at least 4 pins per channel.\nSwitches and limiters are set up like in the configuration above.\nThe Jacdac data line of the MCU is connected to internal data bus.\n\nWhile a Jacdac packet is being received, the MCU keeps checking if it is a \nbeginning of the `shutdown` frame.\nIf that is the case, it opens all switches and checks which one(s) of the channel\ndata lines wiggle (via the wiggle lines; this can be done with EXTI latches).\nThe one(s) that wiggle received the `shutdown` frame and need to be disabled.\n\nAlso, while sending the `shutdown` frames itself, it needs to be done separately\nfor each channel, with all the other switches open.\nIf during that operation we detect wiggle on other channels, then we have detected\na loop, and the respective channels needs to be disabled.\n\n#### A brain-integrated power supply\n\nHere, there's only one channel of power and we don't have hard real time requirements,\nso user-programmable brain can control it.\nThere is no need for analog switch or wiggle-detection line,\nbut the current limiter with latching circuit is still needed.\n\nThere is nothing special to do during reception of `shutdown` packet.\nWhen it is received, the current limiter should just be disabled.\n\nIdeally, exception/hard-fault handlers on the MCU should also disable the\ncurrent limiter.\nSimilarly, the limiter should be disabled while the MCU is in bootloader mode,\nor otherwise unaware of the power negotiation protocol. \n\n### Rationale for the grace period\n\nConsider the following scenario:\n\n* device A queues `shutdown` command for sending\n* A receives external `shutdown` packet from B (thus disabling A)\n* the A `shutdown` command is sent from the queue (thus eventually disabling B)\n\nTo avoid that, we make sure that at the precise instant when `shutdown` command is sent,\nthe power is enabled (and thus will stay enabled until another `shutdown` command arrives).\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\nand before starting UART transmission, however that would require breaking abstraction layers.\nSo instead, we never disable the service, while the `shutdown` packet is queued.\nThis may lead to delays in disabling power services, but these should be limited due to the\nrandom nature of the `shutdown` packet spacing.\n\n### Rationale for timings\n\nThe initial 0-300ms delay is set to spread out the `shutdown` periods of power services,\nto minimize collisions.\nThe `shutdown` periods are randomized 400-600ms, instead of a fixed 500ms used for regular\nservices, for the same reason.\n\nThe 1200ms period is set so that droping two `shutdown` packets in a row\nfrom the current provider will not cause power switch, while missing 3 will.\n\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\nwhile keeping it short enough for user to notice any problems such switching may cause."},classIdentifier:530893146,enums:{PowerStatus:{name:"PowerStatus",storage:1,members:{Disallowed:0,Powering:1,Overload:2,Overprovision:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"allowed",identifier:1,description:"Can be used to completely disable the service.\nWhen allowed, the service may still not be providing power, see \n`power_status` for the actual current state.",fields:[{name:"_",type:"bool",storage:1,defaultValue:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"max_power",identifier:7,description:"Limit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.",fields:[{name:"_",unit:"mA",type:"u16",storage:2,isSimpleType:!0,defaultValue:900,typicalMax:900,typicalMin:0}],optional:!0,identifierName:"max_power",packFormat:"u16"},{kind:"ro",name:"power_status",identifier:385,description:"Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\n`Overprovision` means there was another power provider, and we stopped not to overprovision the bus.",fields:[{name:"_",type:"PowerStatus",storage:1}],volatile:!0,packFormat:"u8"},{kind:"ro",name:"current_draw",identifier:257,description:"Present current draw from the bus.",fields:[{name:"_",unit:"mA",type:"u16",storage:2,isSimpleType:!0}],volatile:!0,optional:!0,identifierName:"reading",packFormat:"u16"},{kind:"ro",name:"battery_voltage",identifier:384,description:"Voltage on input.",fields:[{name:"_",unit:"mV",type:"u16",storage:2,isSimpleType:!0,typicalMin:4500,typicalMax:5500}],volatile:!0,optional:!0,packFormat:"u16"},{kind:"ro",name:"battery_charge",identifier:386,description:"Fraction of charge in the battery.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,optional:!0,packFormat:"u0.16"},{kind:"const",name:"battery_capacity",identifier:387,description:"Energy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.",fields:[{name:"_",unit:"mWh",type:"u32",storage:4,isSimpleType:!0}],optional:!0,packFormat:"u32"},{kind:"rw",name:"keep_on_pulse_duration",identifier:128,description:"Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",fields:[{name:"_",unit:"ms",type:"u16",storage:2,isSimpleType:!0,defaultValue:600}],optional:!0,packFormat:"u16"},{kind:"rw",name:"keep_on_pulse_period",identifier:129,description:"Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",fields:[{name:"_",unit:"ms",type:"u16",storage:2,isSimpleType:!0,defaultValue:2e4}],optional:!0,packFormat:"u16"},{kind:"command",name:"shutdown",identifier:128,description:"Sent by the power service periodically, as broadcast.",fields:[]},{kind:"event",name:"power_status_changed",identifier:3,description:"Emitted whenever `power_status` changes.",fields:[{name:"power_status",type:"PowerStatus",storage:1}],identifierName:"change",packFormat:"u8"}],tags:[]},{name:"Pressure Button",status:"experimental",shortId:"pressurebutton",camelName:"pressureButton",shortName:"pressureButton",extends:["_base"],notes:{short:"A pressure sensitive push-button."},classIdentifier:672612547,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"threshold",identifier:6,description:"Indicates the threshold for ``up`` events.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"active_threshold",packFormat:"u0.16"}],tags:["8bit"],group:"Button"},{name:"Protocol Test",status:"experimental",shortId:"prototest",camelName:"protoTest",shortName:"protoTest",extends:["_base"],notes:{short:"This is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you are porting Jacdac to a new platform.",long:"### Test procedure\n\nFor each ``rw`` registers, set a random value ``x``\n  * read ``rw`` and check value is equal to ``x``\n  * read ``ro`` and check value is equal to ``x``\n  * listen to ``e`` event and check that data is equal to ``x``\n  * call ``c`` command with new random value ``y``\n  * read ``rw`` and check value is equal to ``y``\n  * do all the above steps with acks\n\nFor each ``rw`` registers, there shall also\nbe an ``event`` and a ``command``. The event\nshould get raised when the value changes;\nand the command should set the value.",registers:"Every ``rw`` register has a corresponding ``ro`` regisrer\nand a corresponding ``set_...`` command to also set the value."},classIdentifier:382158442,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"rw_bool",identifier:129,description:"A read write bool register.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"ro",name:"ro_bool",identifier:385,description:"A read only bool register. Mirrors rw_bool.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"rw",name:"rw_u32",identifier:130,description:"A read write u32 register.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"ro_u32",identifier:386,description:"A read only u32 register.. Mirrors rw_u32.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"rw",name:"rw_i32",identifier:131,description:"A read write i32 register.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"ro",name:"ro_i32",identifier:387,description:"A read only i32 register.. Mirrors rw_i32.",fields:[{name:"_",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"rw",name:"rw_string",identifier:132,description:"A read write string register.",fields:[{name:"_",type:"string",storage:0}],packFormat:"s"},{kind:"ro",name:"ro_string",identifier:388,description:"A read only string register. Mirrors rw_string.",fields:[{name:"_",type:"string",storage:0}],packFormat:"s"},{kind:"rw",name:"rw_bytes",identifier:133,description:"A read write string register.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"ro",name:"ro_bytes",identifier:389,description:"A read only string register. Mirrors ro_bytes.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"rw",name:"rw_i8_u8_u16_i32",identifier:134,description:"A read write i8, u8, u16, i32 register.",fields:[{name:"i8",type:"i8",storage:-1,isSimpleType:!0},{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"u16",type:"u16",storage:2,isSimpleType:!0},{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i8 u8 u16 i32"},{kind:"ro",name:"ro_i8_u8_u16_i32",identifier:390,description:"A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.",fields:[{name:"i8",type:"i8",storage:-1,isSimpleType:!0},{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"u16",type:"u16",storage:2,isSimpleType:!0},{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i8 u8 u16 i32"},{kind:"rw",name:"rw_u8_string",identifier:135,description:"A read write u8, string register.",fields:[{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"string",type:"string",storage:0}],packFormat:"u8 s"},{kind:"ro",name:"ro_u8_string",identifier:391,description:"A read only u8, string register.. Mirrors rw_u8_string.",fields:[{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"string",type:"string",storage:0}],packFormat:"u8 s"},{kind:"event",name:"e_bool",identifier:129,description:"An event raised when rw_bool is modified",fields:[{name:"bool",type:"bool",storage:1}],packFormat:"u8"},{kind:"event",name:"e_u32",identifier:130,description:"An event raised when rw_u32 is modified",fields:[{name:"u32",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"event",name:"e_i32",identifier:131,description:"An event raised when rw_i32 is modified",fields:[{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"event",name:"e_string",identifier:132,description:"An event raised when rw_string is modified",fields:[{name:"string",type:"string",storage:0}],packFormat:"s"},{kind:"event",name:"e_bytes",identifier:133,description:"An event raised when rw_bytes is modified",fields:[{name:"bytes",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"event",name:"e_i8_u8_u16_i32",identifier:134,description:"An event raised when rw_i8_u8_u16_i32 is modified",fields:[{name:"i8",type:"i8",storage:-1,isSimpleType:!0},{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"u16",type:"u16",storage:2,isSimpleType:!0},{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i8 u8 u16 i32"},{kind:"event",name:"e_u8_string",identifier:135,description:"An event raised when rw_u8_string is modified",fields:[{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"string",type:"string",storage:0}],packFormat:"u8 s"},{kind:"command",name:"c_bool",identifier:129,description:"A command to set rw_bool.",fields:[{name:"bool",type:"bool",storage:1}],packFormat:"u8"},{kind:"command",name:"c_u32",identifier:130,description:"A command to set rw_u32.",fields:[{name:"u32",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"command",name:"c_i32",identifier:131,description:"A command to set rw_i32.",fields:[{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i32"},{kind:"command",name:"c_string",identifier:132,description:"A command to set rw_string.",fields:[{name:"string",type:"string",storage:0}],packFormat:"s"},{kind:"command",name:"c_bytes",identifier:133,description:"A command to set rw_string.",fields:[{name:"bytes",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"b"},{kind:"command",name:"c_i8_u8_u16_i32",identifier:134,description:"A command to set rw_bytes.",fields:[{name:"i8",type:"i8",storage:-1,isSimpleType:!0},{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"u16",type:"u16",storage:2,isSimpleType:!0},{name:"i32",type:"i32",storage:-4,isSimpleType:!0}],packFormat:"i8 u8 u16 i32"},{kind:"command",name:"c_u8_string",identifier:135,description:"A command to set rw_u8_string.",fields:[{name:"u8",type:"u8",storage:1,isSimpleType:!0},{name:"string",type:"string",storage:0}],packFormat:"u8 s"},{kind:"command",name:"c_report_pipe",identifier:144,description:"A command to read the content of rw_bytes, byte per byte, as a pipe.",fields:[{name:"p_bytes",type:"pipe",storage:12}],pipeType:"c_report_pipe",packFormat:"b[12]"},{kind:"pipe_report",name:"p_bytes",identifier:0,description:"A command to read the content of rw_bytes, byte per byte, as a pipe.",fields:[{name:"byte",type:"u8",storage:1,isSimpleType:!0}],pipeType:"c_report_pipe",packFormat:"u8"}],tags:[]},{name:"Pulse Oximeter",status:"experimental",shortId:"pulseoximeter",camelName:"pulseOximeter",shortName:"pulseOximeter",extends:["_base","_sensor"],notes:{short:"A sensor approximating the oxygen level. \n\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**"},classIdentifier:280710838,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"oxygen",identifier:257,description:"The estimated oxygen level in blood.",fields:[{name:"_",unit:"%",shift:8,type:"u8.8",storage:2,typicalMin:80,typicalMax:100}],volatile:!0,identifierName:"reading",packFormat:"u8.8"},{kind:"ro",name:"oxygen_error",identifier:262,description:"The estimated error on the reported sensor data.",fields:[{name:"_",unit:"%",shift:8,type:"u8.8",storage:2}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u8.8"}],tags:["8bit"],group:"Biometric"},{name:"Rain gauge",status:"experimental",shortId:"raingauge",camelName:"rainGauge",shortName:"rainGauge",extends:["_base","_sensor"],notes:{short:"Measures the amount of liquid precipitation over an area in a predefined period of time."},classIdentifier:326323349,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"precipitation",identifier:257,description:"Total precipitation recorded so far.",fields:[{name:"_",unit:"mm",shift:16,type:"u16.16",storage:4}],volatile:!0,identifierName:"reading",preferredInterval:6e4,packFormat:"u16.16"},{kind:"const",name:"precipitation_precision",identifier:264,description:"Typically the amount of rain needed for tipping the bucket.",fields:[{name:"_",unit:"mm",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"reading_resolution",packFormat:"u16.16"}],tags:["8bit"],group:"Environment"},{name:"Real time clock",status:"experimental",shortId:"realtimeclock",camelName:"realTimeClock",shortName:"realTimeClock",extends:["_base","_sensor"],notes:{short:"Real time clock to support collecting data with precise time stamps."},classIdentifier:445323816,enums:{Variant:{name:"Variant",storage:1,members:{Computer:1,Crystal:2,Cuckoo:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"local_time",identifier:257,description:"Current time in 24h representation. \n* ``day_of_month`` is day of the month, starting at ``1``\n* ``day_of_week`` is day of the week, starting at ``1`` as monday\nDefault streaming period is 1 second.",fields:[{name:"year",type:"u16",storage:2,isSimpleType:!0},{name:"month",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:12},{name:"day_of_month",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:31},{name:"day_of_week",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:7},{name:"hour",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:23},{name:"min",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:59},{name:"sec",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:60}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u16 u8 u8 u8 u8 u8 u8"},{kind:"ro",name:"error",identifier:384,description:"Time drift since the last call to the ``set_time`` command.",fields:[{name:"_",unit:"s",shift:16,type:"u16.16",storage:4}],volatile:!0,optional:!0,packFormat:"u16.16"},{kind:"const",name:"precision",identifier:385,description:"Error on the clock, in parts per million of seconds.",fields:[{name:"_",unit:"ppm",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical clock used by the sensor.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"command",name:"set_time",identifier:128,description:"Sets the current time and resets the error.",fields:[{name:"year",type:"u16",storage:2,isSimpleType:!0},{name:"month",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:12},{name:"day_of_month",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:31},{name:"day_of_week",type:"u8",storage:1,isSimpleType:!0,absoluteMin:1,absoluteMax:7},{name:"hour",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:23},{name:"min",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:59},{name:"sec",type:"u8",storage:1,isSimpleType:!0,absoluteMin:0,absoluteMax:60}],packFormat:"u16 u8 u8 u8 u8 u8 u8"}],tags:["8bit"]},{name:"Reflected light",status:"experimental",shortId:"reflectedlight",camelName:"reflectedLight",shortName:"reflectedLight",extends:["_base","_sensor"],notes:{short:"A sensor that detects light and dark surfaces, commonly used for line following robots."},classIdentifier:309087410,enums:{Variant:{name:"Variant",storage:1,members:{InfraredDigital:1,InfraredAnalog:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"brightness",identifier:257,description:"Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"Type of physical sensor used",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"event",name:"dark",identifier:2,description:"The sensor detected a transition from light to dark",fields:[],identifierName:"inactive"},{kind:"event",name:"light",identifier:1,description:"The sensor detected a transition from dark to light",fields:[],identifierName:"active"}],tags:["8bit"],group:"Imaging"},{name:"Relay",status:"experimental",shortId:"relay",camelName:"relay",shortName:"relay",extends:["_base"],notes:{short:"A switching relay."},classIdentifier:406840918,enums:{Variant:{name:"Variant",storage:1,members:{Electromechanical:1,SolidState:2,Reed:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"closed",identifier:1,description:"Indicates whether the relay circuit is currently energized (closed) or not.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"const",name:"variant",identifier:263,description:"Describes the type of relay used.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"const",name:"max_switching_current",identifier:384,description:"Maximum switching current for a resistive load.",fields:[{name:"_",unit:"mA",type:"u32",storage:4,isSimpleType:!0}],optional:!0,packFormat:"u32"},{kind:"event",name:"active",identifier:1,description:"Emitted when relay goes from `inactive` to `active` state.\nNormally open (NO) relays close the circuit when activated.",fields:[],identifierName:"active"},{kind:"event",name:"inactive",identifier:2,description:"Emitted when relay goes from `active` to `inactive` state.\nNormally closed (NC) relays open the circuit when activated.",fields:[],identifierName:"inactive"}],tags:["8bit"]},{name:"Random Number Generator",status:"experimental",shortId:"rng",camelName:"rng",shortName:"rng",extends:["_base"],notes:{short:"Generates random numbers using entropy sourced from physical processes.\n\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](https://en.wikipedia.org/wiki/Fortuna_(PRNG))),\nwhich is periodically re-seeded with entropy coming from some hardware source."},classIdentifier:394916002,enums:{Variant:{name:"Variant",storage:1,members:{Quantum:1,ADCNoise:2,WebCrypto:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"ro",name:"random",identifier:384,description:"A register that returns a 64 bytes random buffer on every request.\nThis never blocks for a long time. If you need additional random bytes, keep querying the register.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],volatile:!0,packFormat:"b"},{kind:"const",name:"variant",identifier:263,description:"The type of algorithm/technique used to generate the number.\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:[]},{name:"Role Manager",status:"experimental",shortId:"rolemanager",camelName:"roleManager",shortName:"roleManager",extends:["_base"],notes:{short:'Assign roles to services on the Jacdac bus.\n\nInternally, the role manager stores a mapping from `(device_id, service_idx)` to role name.\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\nEach client has a role, and roles are unique to clients\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\n\nRole names can be hierarchical, using slash character as a separator.\nExamples: `left_leg/acc`, `left_leg/gyro`, `right_leg/acc`.\nIf two roles share the prefix before first slash, it should be used as a hint that the services\nshould be co-located on a single device\n(eg., here the `left_leg` "location" is expected to have both an accelerometer and a gyro service on a single device).'},classIdentifier:508264038,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"auto_bind",identifier:128,description:'Normally, if some roles are unfilled, and there are idle services that can fulfill them,\nthe brain device will assign roles (bind) automatically.\nSuch automatic assignment happens every second or so, and is trying to be smart about \nco-locating roles that share "host" (part before first slash),\nas well as reasonably stable assignments.\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.',fields:[{name:"_",type:"bool",storage:1,defaultValue:1}],packFormat:"u8"},{kind:"ro",name:"all_roles_allocated",identifier:385,description:"Indicates if all required roles have been allocated to devices.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"command",name:"get_role",identifier:128,description:"Get the role corresponding to given device identifer. Returns empty string if unset.",fields:[{name:"device_id",type:"devid",storage:8},{name:"service_idx",type:"u8",storage:1,isSimpleType:!0}],hasReport:!0,packFormat:"b[8] u8"},{kind:"report",name:"get_role",identifier:128,description:"Get the role corresponding to given device identifer. Returns empty string if unset.",fields:[{name:"device_id",type:"devid",storage:8},{name:"service_idx",type:"u8",storage:1,isSimpleType:!0},{name:"role",type:"string",storage:0}],secondary:!0,packFormat:"b[8] u8 s"},{kind:"command",name:"set_role",identifier:129,description:"Set role. Can set to empty to remove role binding.",fields:[{name:"device_id",type:"devid",storage:8},{name:"service_idx",type:"u8",storage:1,isSimpleType:!0},{name:"role",type:"string",storage:0}],packFormat:"b[8] u8 s"},{kind:"command",name:"clear_all_roles",identifier:132,description:"Remove all role bindings.",fields:[]},{kind:"command",name:"list_stored_roles",identifier:130,description:"Return all roles stored internally.",fields:[{name:"stored_roles",type:"pipe",storage:12}],pipeType:"list_stored_roles",packFormat:"b[12]"},{kind:"pipe_report",name:"stored_roles",identifier:0,description:"Return all roles stored internally.",fields:[{name:"device_id",type:"devid",storage:8},{name:"service_idx",type:"u8",storage:1,isSimpleType:!0},{name:"role",type:"string",storage:0}],pipeType:"list_stored_roles",packFormat:"b[8] u8 s"},{kind:"command",name:"list_required_roles",identifier:131,description:"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.",fields:[{name:"required_roles",type:"pipe",storage:12}],pipeType:"list_required_roles",packFormat:"b[12]"},{kind:"pipe_report",name:"required_roles",identifier:0,description:"List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.",fields:[{name:"device_id",type:"devid",storage:8},{name:"service_class",type:"u32",storage:4,isSimpleType:!0},{name:"service_idx",type:"u8",storage:1,isSimpleType:!0},{name:"role",type:"string",storage:0}],pipeType:"list_required_roles",packFormat:"b[8] u32 u8 s"},{kind:"event",name:"change",identifier:3,description:"Notifies that role bindings have changed.",fields:[],identifierName:"change"}],tags:[]},{name:"Rotary encoder",status:"experimental",shortId:"rotaryencoder",camelName:"rotaryEncoder",shortName:"rotaryEncoder",extends:["_base","_sensor"],notes:{short:"An incremental rotary encoder - converts angular motion of a shaft to digital signal."},classIdentifier:284830153,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"position",identifier:257,description:'Upon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise "click", by `-1` for counter-clockwise.',fields:[{name:"_",unit:"#",type:"i32",storage:-4,isSimpleType:!0}],volatile:!0,identifierName:"reading",packFormat:"i32"},{kind:"const",name:"clicks_per_turn",identifier:384,description:"This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.",fields:[{name:"_",unit:"#",type:"u16",storage:2,isSimpleType:!0}],optional:!0,packFormat:"u16"}],tags:["C","8bit"],group:"Slider"},{name:"Rover",status:"experimental",shortId:"rover",camelName:"rover",shortName:"rover",extends:["_base","_sensor"],notes:{short:"A roving robot."},classIdentifier:435474539,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"kinematics",identifier:257,description:"The current position and orientation of the robot.",fields:[{name:"x",unit:"cm",shift:16,type:"i16.16",storage:-4},{name:"y",unit:"cm",shift:16,type:"i16.16",storage:-4},{name:"vx",unit:"cm/s",shift:16,type:"i16.16",storage:-4},{name:"vy",unit:"cm/s",shift:16,type:"i16.16",storage:-4},{name:"heading",unit:"°",shift:16,type:"i16.16",storage:-4}],volatile:!0,identifierName:"reading",packFormat:"i16.16 i16.16 i16.16 i16.16 i16.16"}],tags:[]},{name:"Sensor Aggregator",status:"experimental",shortId:"sensoraggregator",camelName:"sensorAggregator",shortName:"sensorAggregator",extends:["_base"],notes:{short:"Aggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service)."},classIdentifier:496034245,enums:{SampleType:{name:"SampleType",storage:1,members:{U8:8,I8:136,U16:16,I16:144,U32:32,I32:160}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"inputs",identifier:128,description:"Set automatic input collection.\nThese settings are stored in flash.",fields:[{name:"sampling_interval",unit:"ms",type:"u16",storage:2,isSimpleType:!0},{name:"samples_in_window",type:"u16",storage:2,isSimpleType:!0},{name:"reserved",type:"u32",storage:4,isSimpleType:!0},{name:"device_id",type:"devid",storage:8,startRepeats:!0},{name:"service_class",type:"u32",storage:4,isSimpleType:!0},{name:"service_num",type:"u8",storage:1,isSimpleType:!0},{name:"sample_size",unit:"B",type:"u8",storage:1,isSimpleType:!0},{name:"sample_type",type:"SampleType",storage:1},{name:"sample_shift",type:"i8",storage:-1,isSimpleType:!0}],packFormat:"u16 u16 u32 r: b[8] u32 u8 u8 u8 i8"},{kind:"ro",name:"num_samples",identifier:384,description:"Number of input samples collected so far.",fields:[{name:"_",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"sample_size",identifier:385,description:"Size of a single sample.",fields:[{name:"_",unit:"B",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"rw",name:"streaming_samples",identifier:129,description:"When set to `N`, will stream `N` samples as `current_sample` reading.",fields:[{name:"_",unit:"#",type:"u32",storage:4,isSimpleType:!0}],packFormat:"u32"},{kind:"ro",name:"current_sample",identifier:257,description:"Last collected sample.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],volatile:!0,identifierName:"reading",packFormat:"b"}],tags:[]},{name:"Servo",status:"experimental",shortId:"servo",camelName:"servo",shortName:"servo",extends:["_base"],notes:{short:"Servo is a small motor with arm that can be pointing at a specific direction.\n\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller."},classIdentifier:318542083,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"angle",identifier:2,description:"Specifies the angle of the arm (request).",fields:[{name:"_",unit:"°",shift:16,type:"i16.16",storage:-4,typicalMin:-90,typicalMax:90}],identifierName:"value",packFormat:"i16.16"},{kind:"rw",name:"enabled",identifier:1,description:"Turn the power to the servo on/off.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"offset",identifier:129,description:"Correction applied to the angle to account for the servo arm drift.",fields:[{name:"_",unit:"°",shift:16,type:"i16.16",storage:-4}],packFormat:"i16.16"},{kind:"const",name:"min_angle",identifier:272,description:"Lowest angle that can be set.",fields:[{name:"_",unit:"°",shift:16,type:"i16.16",storage:-4,defaultValue:-90}],identifierName:"min_value",packFormat:"i16.16"},{kind:"rw",name:"min_pulse",identifier:131,description:"The length of pulse corresponding to lowest angle.",fields:[{name:"_",unit:"us",type:"u16",storage:2,isSimpleType:!0,defaultValue:500}],packFormat:"u16"},{kind:"const",name:"max_angle",identifier:273,description:"Highest angle that can be set.",fields:[{name:"_",unit:"°",shift:16,type:"i16.16",storage:-4,defaultValue:90}],identifierName:"max_value",packFormat:"i16.16"},{kind:"rw",name:"max_pulse",identifier:133,description:"The length of pulse corresponding to highest angle.",fields:[{name:"_",unit:"us",type:"u16",storage:2,isSimpleType:!0,defaultValue:2500}],packFormat:"u16"},{kind:"const",name:"stall_torque",identifier:384,description:"The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.",fields:[{name:"_",unit:"kg/cm",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"const",name:"response_speed",identifier:385,description:"Time to move 60°.",fields:[{name:"_",unit:"s/60°",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"ro",name:"current_angle",identifier:257,description:"The current physical position of the arm.",fields:[{name:"_",unit:"°",shift:16,type:"i16.16",storage:-4}],volatile:!0,optional:!0,identifierName:"reading",packFormat:"i16.16"}],tags:["C"]},{name:"Settings",status:"experimental",shortId:"settings",camelName:"settings",shortName:"settings",extends:["_base"],notes:{short:"Non-volatile key-value storage interface for storing settings.",long:"## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device."},classIdentifier:285727818,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"get",identifier:128,description:"Get the value of given setting. If no such entry exists, the value returned is empty.",fields:[{name:"key",type:"string",storage:0}],hasReport:!0,packFormat:"s"},{kind:"report",name:"get",identifier:128,description:"Get the value of given setting. If no such entry exists, the value returned is empty.",fields:[{name:"key",type:"string0",storage:0},{name:"value",type:"bytes",storage:0,isSimpleType:!0}],secondary:!0,packFormat:"z b"},{kind:"command",name:"set",identifier:129,description:"Set the value of a given setting.",fields:[{name:"key",type:"string0",storage:0},{name:"value",type:"bytes",storage:0,isSimpleType:!0}],restricted:!0,packFormat:"z b"},{kind:"command",name:"delete",identifier:132,description:"Delete a given setting.",fields:[{name:"key",type:"string",storage:0}],restricted:!0,packFormat:"s"},{kind:"command",name:"list_keys",identifier:130,description:"Return keys of all settings.",fields:[{name:"results",type:"pipe",storage:12}],pipeType:"list_keys",packFormat:"b[12]"},{kind:"pipe_report",name:"listed_key",identifier:0,description:"Return keys of all settings.",fields:[{name:"key",type:"string",storage:0}],pipeType:"list_keys",packFormat:"s"},{kind:"command",name:"list",identifier:131,description:"Return keys and values of all settings.",fields:[{name:"results",type:"pipe",storage:12}],pipeType:"list",packFormat:"b[12]"},{kind:"pipe_report",name:"listed_entry",identifier:0,description:"Return keys and values of all settings.",fields:[{name:"key",type:"string0",storage:0},{name:"value",type:"bytes",storage:0,isSimpleType:!0}],pipeType:"list",packFormat:"z b"},{kind:"command",name:"clear",identifier:133,description:"Clears all keys.",fields:[],restricted:!0},{kind:"event",name:"change",identifier:3,description:"Notifies that some setting have been modified.",fields:[],identifierName:"change"}],tags:[]},{name:"7-segment display",status:"experimental",shortId:"sevensegmentdisplay",camelName:"sevenSegmentDisplay",shortName:"sevenSegmentDisplay",extends:["_base"],notes:{short:"A 7-segment numeric display, with one or more digits."},classIdentifier:425810167,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"digits",identifier:2,description:"Each byte encodes the display status of a digit using, \nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\nIf incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\nThus, sending an empty ``digits`` payload clears the screen.\n\n```text\n - A -\n G   B\n |   |\n - F -\n |   |   -\n E   C  |DP|\n - D -   -\n```",fields:[{name:"_",encoding:"bitset",type:"bytes",storage:0,isSimpleType:!0}],lowLevel:!0,identifierName:"value",packFormat:"b"},{kind:"rw",name:"brightness",identifier:1,description:"Controls the brightness of the LEDs. ``0`` means off.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"intensity",packFormat:"u0.16"},{kind:"rw",name:"double_dots",identifier:128,description:"Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.",fields:[{name:"_",type:"bool",storage:1}],optional:!0,packFormat:"u8"},{kind:"const",name:"digit_count",identifier:384,description:"The number of digits available on the display.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0}],packFormat:"u8"},{kind:"const",name:"decimal_point",identifier:385,description:"True if decimal points are available (on all digits).",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"command",name:"set_number",identifier:128,description:"Shows the number on the screen using the decimal dot if available.",fields:[{name:"value",isFloat:!0,type:"f64",storage:8}],client:!0,packFormat:"f64"},{kind:"command",name:"set_text",identifier:129,description:"Shows the text on the screen. The client may decide to scroll the text if too long.",fields:[{name:"text",type:"string",storage:0}],client:!0,packFormat:"s"}],tags:["8bit"],group:"Display"},{name:"Soil moisture",status:"experimental",shortId:"soilmoisture",camelName:"soilMoisture",shortName:"soilMoisture",extends:["_base","_sensor"],notes:{short:"A soil moisture sensor."},classIdentifier:491430835,enums:{Variant:{name:"Variant",storage:1,members:{Resistive:1,Capacitive:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"moisture",identifier:257,description:"Indicates the wetness of the soil, from ``dry`` to ``wet``.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"Describe the type of physical sensor.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"],group:"Environment"},{name:"Solenoid",status:"experimental",shortId:"solenoid",camelName:"solenoid",shortName:"solenoid",extends:["_base"],notes:{short:"A push-pull solenoid is a type of relay that pulls a coil when activated."},classIdentifier:387392458,enums:{Variant:{name:"Variant",storage:1,members:{PushPull:1,Valve:2,Latch:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"pulled",identifier:1,description:"Indicates whether the solenoid is energized and pulled (on) or pushed (off).",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"const",name:"variant",identifier:263,description:"Describes the type of solenoid used.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"]},{name:"Sound level",status:"experimental",shortId:"soundlevel",camelName:"soundLevel",shortName:"soundLevel",extends:["_base","_sensor"],notes:{short:"A sound level detector sensor, gives a relative indication of the sound level."},classIdentifier:346888797,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"sound_level",identifier:257,description:"The sound level detected by the microphone",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"rw",name:"enabled",identifier:1,description:"Turn on or off the microphone.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"min_decibels",identifier:129,description:"The minimum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.",fields:[{name:"_",unit:"dB",type:"i16",storage:-2,isSimpleType:!0}],optional:!0,packFormat:"i16"},{kind:"rw",name:"max_decibels",identifier:130,description:"The maximum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.",fields:[{name:"_",unit:"dB",type:"i16",storage:-2,isSimpleType:!0}],optional:!0,packFormat:"i16"},{kind:"rw",name:"loud_threshold",identifier:6,description:"The sound level to trigger a loud event.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"active_threshold",packFormat:"u0.16"},{kind:"rw",name:"quiet_threshold",identifier:5,description:"The sound level to trigger a quiet event.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"inactive_threshold",packFormat:"u0.16"},{kind:"event",name:"loud",identifier:1,description:"Raised when a loud sound is detected",fields:[],identifierName:"active"},{kind:"event",name:"quiet",identifier:2,description:"Raised when a period of quietness is detected",fields:[],identifierName:"inactive"}],tags:["8bit"],group:"Sound"},{name:"Sound player",status:"experimental",shortId:"soundplayer",camelName:"soundPlayer",shortName:"soundPlayer",extends:["_base"],notes:{short:"A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds."},classIdentifier:335795e3,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"volume",identifier:1,description:"Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],identifierName:"intensity",packFormat:"u0.16"},{kind:"command",name:"play",identifier:128,description:"Starts playing a sound.",fields:[{name:"name",type:"string",storage:0}],packFormat:"s"},{kind:"command",name:"list_sounds",identifier:129,description:"Returns the list of sounds available to play.",fields:[{name:"sounds_port",type:"pipe",storage:12}],pipeType:"list_sounds",packFormat:"b[12]"},{kind:"pipe_report",name:"list_sounds_pipe",identifier:0,description:"Returns the list of sounds available to play.",fields:[{name:"duration",unit:"ms",type:"u32",storage:4,isSimpleType:!0},{name:"name",type:"string",storage:0}],pipeType:"list_sounds",packFormat:"u32 s"}],tags:[],group:"Sound"},{name:"Sound Spectrum",status:"experimental",shortId:"soundspectrum",camelName:"soundSpectrum",shortName:"soundSpectrum",extends:["_base","_sensor"],notes:{short:"A microphone that analyzes the sound specturm"},classIdentifier:360365086,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"frequency_bins",identifier:257,description:"The computed frequency data.",fields:[{name:"_",type:"bytes",storage:0,isSimpleType:!0}],volatile:!0,identifierName:"reading",packFormat:"b"},{kind:"rw",name:"enabled",identifier:1,description:"Turns on/off the micropohone.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"fft_pow2_size",identifier:128,description:"The power of 2 used as the size of the FFT to be used to determine the frequency domain.",fields:[{name:"_",type:"u8",storage:1,isSimpleType:!0,defaultValue:5,absoluteMin:2,absoluteMax:7}],packFormat:"u8"},{kind:"rw",name:"min_decibels",identifier:129,description:"The minimum power value in the scaling range for the FFT analysis data",fields:[{name:"_",unit:"dB",type:"i16",storage:-2,isSimpleType:!0}],packFormat:"i16"},{kind:"rw",name:"max_decibels",identifier:130,description:"The maximum power value in the scaling range for the FFT analysis data",fields:[{name:"_",unit:"dB",type:"i16",storage:-2,isSimpleType:!0}],packFormat:"i16"},{kind:"rw",name:"smoothing_time_constant",identifier:131,description:'The averaging constant with the last analysis frame. \nIf ``0`` is set, there is no averaging done, whereas a value of ``1`` means "overlap the previous and current buffer quite a lot while computing the value".',fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1,defaultValue:.8}],packFormat:"u0.8"}],tags:[],group:"Sound"},{name:"Speech synthesis",status:"experimental",shortId:"speechsynthesis",camelName:"speechSynthesis",shortName:"speechSynthesis",extends:["_base"],notes:{short:"A speech synthesizer"},classIdentifier:302307733,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Determines if the speech engine is in a non-paused state.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"rw",name:"lang",identifier:128,description:"Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.",fields:[{name:"_",type:"string",storage:0}],optional:!0,packFormat:"s"},{kind:"rw",name:"volume",identifier:129,description:"Volume for utterances.",fields:[{name:"_",unit:"/",shift:8,type:"u0.8",storage:1,defaultValue:1}],optional:!0,packFormat:"u0.8"},{kind:"rw",name:"pitch",identifier:130,description:"Pitch for utterances",fields:[{name:"_",shift:16,type:"u16.16",storage:4,defaultValue:1,absoluteMax:2,absoluteMin:0}],optional:!0,packFormat:"u16.16"},{kind:"rw",name:"rate",identifier:131,description:"Rate for utterances",fields:[{name:"_",shift:16,type:"u16.16",storage:4,defaultValue:1,absoluteMin:.1,absoluteMax:10}],optional:!0,packFormat:"u16.16"},{kind:"command",name:"speak",identifier:128,description:"Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.",fields:[{name:"text",type:"string",storage:0}],packFormat:"s"},{kind:"command",name:"cancel",identifier:129,description:"Cancels current utterance and all utterances from the utterance queue.",fields:[]}],tags:[]},{name:"Switch",status:"experimental",shortId:"switch",camelName:"switch",shortName:"switch",extends:["_base","_sensor"],notes:{short:"A switch, which keeps its position."},classIdentifier:450008066,enums:{Variant:{name:"Variant",storage:1,members:{Slide:1,Tilt:2,PushButton:3,Tactile:4,Toggle:5,Proximity:6,Magnetic:7,FootPedal:8}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"active",identifier:257,description:"Indicates whether the switch is currently active (on).",fields:[{name:"_",type:"bool",storage:1}],volatile:!0,identifierName:"reading",packFormat:"u8"},{kind:"const",name:"variant",identifier:263,description:"Describes the type of switch used.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"const",name:"auto_off_delay",identifier:384,description:"Specifies the delay without activity to automatically turn off after turning on.\nFor example, some light switches in staircases have such a capability.",fields:[{name:"_",unit:"s",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"event",name:"on",identifier:1,description:"Emitted when switch goes from ``off`` to ``on``.",fields:[],identifierName:"active"},{kind:"event",name:"off",identifier:2,description:"Emitted when switch goes from ``on`` to ``off``.",fields:[],identifierName:"inactive"}],tags:["8bit"],group:"Button"},{name:"TCP",status:"experimental",shortId:"tcp",camelName:"tcp",shortName:"tcp",extends:["_base"],notes:{short:"Data transfer over TCP/IP and TLS stream sockets.",commands:"## Pipes"},classIdentifier:457422603,enums:{TcpError:{name:"TcpError",storage:-4,members:{InvalidCommand:1,InvalidCommandPayload:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"open",identifier:128,description:"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.",fields:[{name:"inbound",type:"pipe",storage:12}],pipeType:"open",hasReport:!0,packFormat:"b[12]"},{kind:"report",name:"open",identifier:128,description:"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.",fields:[{name:"outbound_port",type:"pipe_port",storage:2}],secondary:!0,pipeType:"open",packFormat:"u16"},{kind:"meta_pipe_command",name:"open_ssl",identifier:1,description:"Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\nAfter the connection is established, an empty data report is sent.\nConnection is closed by closing the pipe.",fields:[{name:"tcp_port",type:"u16",storage:2,isSimpleType:!0},{name:"hostname",type:"string",storage:0}],pipeType:"open",packFormat:"u16 s"},{kind:"pipe_command",name:"outdata",identifier:0,description:"Bytes to be sent directly over an established TCP or SSL connection.",fields:[{name:"data",type:"bytes",storage:0,isSimpleType:!0}],pipeType:"open",packFormat:"b"},{kind:"pipe_report",name:"indata",identifier:0,description:"Bytes read directly from directly over an established TCP or SSL connection.",fields:[{name:"data",type:"bytes",storage:0,isSimpleType:!0}],pipeType:"open",packFormat:"b"},{kind:"meta_pipe_report",name:"error",identifier:0,description:"Reported when an error is encountered. Negative error codes come directly from the SSL implementation.",fields:[{name:"error",type:"TcpError",storage:-4}],pipeType:"open",packFormat:"i32"}],tags:[]},{name:"Thermocouple",status:"experimental",shortId:"thermocouple",camelName:"thermocouple",shortName:"thermocouple",extends:["_base","_sensor"],notes:{short:"A thermocouple using a heat probe to gather temperatures."},classIdentifier:339394657,enums:{Variant:{name:"Variant",storage:1,members:{TypeK:1,TypeJ:2,TypeT:3,TypeE:4,TypeN:5,TypeS:6,TypeR:7,TypeB:8}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"temperature",identifier:257,description:"The temperature.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"i22.10"},{kind:"const",name:"min_temperature",identifier:260,description:"Lowest temperature that can be reported.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],identifierName:"min_reading",packFormat:"i22.10"},{kind:"const",name:"max_temperature",identifier:261,description:"Highest temperature that can be reported.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],identifierName:"max_reading",packFormat:"i22.10"},{kind:"ro",name:"temperature_error",identifier:262,description:"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.",fields:[{name:"_",unit:"°C",shift:10,type:"u22.10",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u22.10"},{kind:"const",name:"variant",identifier:263,description:"Specifies the type of thermometer.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"],group:"Environment"},{name:"Thermometer",status:"experimental",shortId:"thermometer",camelName:"thermometer",shortName:"thermometer",extends:["_base","_sensor"],notes:{short:"A thermometer measuring outside or inside environment."},classIdentifier:337754823,enums:{Variant:{name:"Variant",storage:1,members:{Outdoor:1,Indoor:2,Body:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"temperature",identifier:257,description:"The temperature.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"i22.10"},{kind:"const",name:"min_temperature",identifier:260,description:"Lowest temperature that can be reported.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],identifierName:"min_reading",packFormat:"i22.10"},{kind:"const",name:"max_temperature",identifier:261,description:"Highest temperature that can be reported.",fields:[{name:"_",unit:"°C",shift:10,type:"i22.10",storage:-4}],identifierName:"max_reading",packFormat:"i22.10"},{kind:"ro",name:"temperature_error",identifier:262,description:"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.",fields:[{name:"_",unit:"°C",shift:10,type:"u22.10",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u22.10"},{kind:"const",name:"variant",identifier:263,description:"Specifies the type of thermometer.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["C","8bit"],group:"Environment"},{name:"Traffic Light",status:"experimental",shortId:"trafficlight",camelName:"trafficLight",shortName:"trafficLight",extends:["_base"],notes:{short:"Controls a mini traffic with a red, orange and green LED."},classIdentifier:365137307,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"red",identifier:128,description:"The on/off state of the red light.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"rw",name:"orange",identifier:129,description:"The on/off state of the red light.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"rw",name:"green",identifier:130,description:"The on/off state of the red light.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"}],tags:["8bit"]},{name:"Total Volatile organic compound",status:"experimental",shortId:"tvoc",camelName:"tvoc",shortName:"tvoc",extends:["_base","_sensor"],notes:{short:"Measures equivalent Total Volatile Organic Compound levels."},classIdentifier:312849815,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"TVOC",identifier:257,description:"Total volatile organic compound readings in parts per billion.",fields:[{name:"_",unit:"ppb",shift:10,type:"u22.10",storage:4,absoluteMin:0,typicalMax:1187,typicalMin:0}],volatile:!0,identifierName:"reading",packFormat:"u22.10"},{kind:"ro",name:"TVOC_error",identifier:262,description:"Error on the reading data",fields:[{name:"_",unit:"ppb",shift:10,type:"u22.10",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u22.10"},{kind:"const",name:"min_TVOC",identifier:260,description:"Minimum measurable value",fields:[{name:"_",unit:"ppb",shift:10,type:"u22.10",storage:4}],optional:!0,identifierName:"min_reading",packFormat:"u22.10"},{kind:"const",name:"max_TVOC",identifier:261,description:"Minimum measurable value",fields:[{name:"_",unit:"ppb",shift:10,type:"u22.10",storage:4}],optional:!0,identifierName:"max_reading",packFormat:"u22.10"},{kind:"const",name:"conditioning_period",identifier:384,description:"Time required to achieve good sensor stability before measuring after long idle period.",fields:[{name:"_",unit:"s",type:"u32",storage:4,isSimpleType:!0}],optional:!0,packFormat:"u32"}],tags:["8bit"],group:"Environment"},{name:"UV index",status:"experimental",shortId:"uvindex",camelName:"uvIndex",shortName:"uvIndex",extends:["_base","_sensor"],notes:{short:"The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun."},classIdentifier:527306128,enums:{Variant:{name:"Variant",storage:1,members:{UVA_UVB:1,Visible_IR:2}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"uv_index",identifier:257,description:"Ultraviolet index, typically refreshed every second.",fields:[{name:"_",unit:"uv",shift:16,type:"u16.16",storage:4,typicalMax:11,typicalMin:0}],volatile:!0,identifierName:"reading",packFormat:"u16.16"},{kind:"ro",name:"uv_index_error",identifier:262,description:"Error on the UV measure.",fields:[{name:"_",unit:"uv",shift:16,type:"u16.16",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u16.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical sensor and capabilities.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"],group:"Environment"},{name:"Verified Telemetry",status:"experimental",shortId:"verifiedtelemetrysensor",camelName:"verifiedTelemetry",shortName:"verifiedTelemetry",extends:["_base"],notes:{short:"A mixin service that exposes verified telemetry information for a sensor (see https://github.com/Azure/Verified-Telemetry/tree/main/PnPModel)."},classIdentifier:563381279,enums:{Status:{name:"Status",storage:1,members:{Unknown:0,Working:1,Faulty:2}},FingerprintType:{name:"FingerprintType",storage:1,members:{FallCurve:1,CurrentSense:2,Custom:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"ro",name:"telemetry_status",identifier:384,description:"Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.",fields:[{name:"_",type:"Status",storage:1}],packFormat:"u8"},{kind:"rw",name:"telemetry_status_interval",identifier:128,description:"Specifies the interval between computing the fingerprint information.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],optional:!0,packFormat:"u32"},{kind:"const",name:"fingerprint_type",identifier:385,description:"Type of the fingerprint.",fields:[{name:"_",type:"FingerprintType",storage:1}],packFormat:"u8"},{kind:"ro",name:"fingerprint_template",identifier:386,description:"Template Fingerprint information of a working sensor.",fields:[{name:"confidence",unit:"%",type:"u16",storage:2,isSimpleType:!0},{name:"template",type:"bytes",storage:0,isSimpleType:!0}],packFormat:"u16 b"},{kind:"command",name:"reset_fingerprint_template",identifier:128,description:"This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.",fields:[]},{kind:"command",name:"retrain_fingerprint_template",identifier:129,description:"This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.",fields:[]},{kind:"event",name:"telemetry_status_change",identifier:3,description:"The telemetry status of the device was updated.",fields:[{name:"telemetry_status",type:"Status",storage:1}],identifierName:"change",packFormat:"u8"},{kind:"event",name:"fingerprint_template_change",identifier:128,description:"The fingerprint template was updated",fields:[]}],tags:[]},{name:"Vibration motor",status:"experimental",shortId:"vibration",camelName:"vibrationMotor",shortName:"vibrationMotor",extends:["_base"],notes:{short:"A vibration motor."},classIdentifier:406832290,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"enabled",identifier:1,description:"Determines if the vibration motor responds to vibrate commands.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"command",name:"vibrate",identifier:128,description:"Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.",fields:[{name:"duration",unit:"8ms",type:"u8",storage:1,isSimpleType:!0,startRepeats:!0},{name:"speed",unit:"/",shift:8,type:"u0.8",storage:1}],packFormat:"r: u8 u0.8"}],tags:[]},{name:"Water level",status:"experimental",shortId:"waterlevel",camelName:"waterLevel",shortName:"waterLevel",extends:["_base","_sensor"],notes:{short:"A sensor that measures liquid/water level."},classIdentifier:343630573,enums:{Variant:{name:"Variant",storage:1,members:{Resistive:1,ContactPhotoElectric:2,NonContactPhotoElectric:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"level",identifier:257,description:"The reported water level.",fields:[{name:"_",unit:"/",shift:16,type:"u0.16",storage:2}],volatile:!0,identifierName:"reading",packFormat:"u0.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical sensor.",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"}],tags:["8bit"]},{name:"Weight Scale",status:"experimental",shortId:"weightscale",camelName:"weightScale",shortName:"weightScale",extends:["_base","_sensor"],notes:{short:"A weight measuring sensor."},classIdentifier:525160512,enums:{Variant:{name:"Variant",storage:1,members:{Body:1,Food:2,Jewelry:3}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"weight",identifier:257,description:"The reported weight.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],volatile:!0,identifierName:"reading",packFormat:"u16.16"},{kind:"ro",name:"weight_error",identifier:262,description:"The estimate error on the reported reading.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u16.16"},{kind:"rw",name:"zero_offset",identifier:128,description:"Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\nYou do not need to subtract that from the reading, it has already been done.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"rw",name:"gain",identifier:129,description:"Calibrated gain on the weight scale error.",fields:[{name:"_",shift:16,type:"u16.16",storage:4}],optional:!0,packFormat:"u16.16"},{kind:"const",name:"max_weight",identifier:261,description:"Maximum supported weight on the scale.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"max_reading",packFormat:"u16.16"},{kind:"const",name:"min_weight",identifier:260,description:"Minimum recommend weight on the scale.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"min_reading",packFormat:"u16.16"},{kind:"const",name:"weight_resolution",identifier:264,description:"Smallest, yet distinguishable change in reading.",fields:[{name:"_",unit:"kg",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"reading_resolution",packFormat:"u16.16"},{kind:"const",name:"variant",identifier:263,description:"The type of physical scale",fields:[{name:"_",type:"Variant",storage:1}],optional:!0,identifierName:"variant",packFormat:"u8"},{kind:"command",name:"calibrate_zero_offset",identifier:128,description:"Call this command when there is nothing on the scale. If supported, the module should save the calibration data.",fields:[]},{kind:"command",name:"calibrate_gain",identifier:129,description:"Call this command with the weight of the thing on the scale.",fields:[{name:"weight",unit:"g",shift:10,type:"u22.10",storage:4}],packFormat:"u22.10"}],tags:["8bit"]},{name:"WIFI",status:"experimental",shortId:"wifi",camelName:"wifi",shortName:"wifi",extends:["_base"],notes:{short:"Discovery and connection to WiFi networks. Separate TCP service can be used for data transfer.\n\nThe device controlled by this service is meant to connect automatically, once configured.\nTo that end, it keeps a list of known WiFi networks, with priorities and passwords.\nIt will connect to the available network with numerically highest priority,\nbreaking ties in priority by signal strength (typically all known networks have priority of `0`)."},classIdentifier:413852154,enums:{APFlags:{name:"APFlags",storage:4,isFlags:!0,members:{HasPassword:1,WPS:2,HasSecondaryChannelAbove:4,HasSecondaryChannelBelow:8,IEEE_802_11B:256,IEEE_802_11A:512,IEEE_802_11G:1024,IEEE_802_11N:2048,IEEE_802_11AC:4096,IEEE_802_11AX:8192,IEEE_802_LongRange:32768}}},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"command",name:"last_scan_results",identifier:128,description:"Return list of WiFi network from the last scan.\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\nas well as upon `reconnect` and `scan` commands.",fields:[{name:"results",type:"pipe",storage:12}],pipeType:"last_scan_results",packFormat:"b[12]"},{kind:"pipe_report",name:"results",identifier:0,description:"Return list of WiFi network from the last scan.\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\nas well as upon `reconnect` and `scan` commands.",fields:[{name:"flags",type:"APFlags",storage:4},{name:"reserved",type:"u32",storage:4,isSimpleType:!0},{name:"rssi",unit:"dB",type:"i8",storage:-1,isSimpleType:!0,typicalMin:-100,typicalMax:-20},{name:"channel",type:"u8",storage:1,isSimpleType:!0,typicalMin:1,typicalMax:13},{name:"bssid",type:"u8[6]",storage:6},{name:"ssid",type:"string",storage:33,maxBytes:33}],pipeType:"last_scan_results",packFormat:"u32 u32 i8 u8 b[6] s[33]"},{kind:"command",name:"add_network",identifier:129,description:"Automatically connect to named network if available. Also set password if network is not open.",fields:[{name:"ssid",type:"string0",storage:0},{name:"password",type:"string0",storage:0,isOptional:!0}],packFormat:"z z"},{kind:"command",name:"reconnect",identifier:130,description:"Initiate a scan, wait for results, disconnect from current WiFi network if any,\nand then reconnect (using regular algorithm, see `set_network_priority`).",fields:[]},{kind:"command",name:"forget_network",identifier:131,description:"Prevent from automatically connecting to named network in future.\nForgetting a network resets its priority to `0`.",fields:[{name:"ssid",type:"string",storage:0}],packFormat:"s"},{kind:"command",name:"forget_all_networks",identifier:132,description:"Clear the list of known networks.",fields:[]},{kind:"command",name:"set_network_priority",identifier:133,description:"Set connection priority for a network.\nBy default, all known networks have priority of `0`.",fields:[{name:"priority",type:"i16",storage:-2,isSimpleType:!0},{name:"ssid",type:"string",storage:0}],packFormat:"i16 s"},{kind:"command",name:"scan",identifier:134,description:"Initiate search for WiFi networks. Generates `scan_complete` event.",fields:[]},{kind:"command",name:"list_known_networks",identifier:135,description:"Return list of known WiFi networks.\n`flags` is currently always 0.",fields:[{name:"results",type:"pipe",storage:12}],pipeType:"list_known_networks",packFormat:"b[12]"},{kind:"pipe_report",name:"network_results",identifier:0,description:"Return list of known WiFi networks.\n`flags` is currently always 0.",fields:[{name:"priority",type:"i16",storage:-2,isSimpleType:!0},{name:"flags",type:"i16",storage:-2,isSimpleType:!0},{name:"ssid",type:"string",storage:0}],pipeType:"list_known_networks",packFormat:"i16 i16 s"},{kind:"rw",name:"enabled",identifier:1,description:"Determines whether the WiFi radio is enabled. It starts enabled upon reset.",fields:[{name:"_",type:"bool",storage:1}],identifierName:"intensity",packFormat:"u8"},{kind:"ro",name:"connected",identifier:384,description:"Indicates whether or not we currently have an IP address assigned.",fields:[{name:"_",type:"bool",storage:1}],packFormat:"u8"},{kind:"ro",name:"ip_address",identifier:385,description:"0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.",fields:[{name:"_",type:"bytes",storage:16,isSimpleType:!0,maxBytes:16}],packFormat:"b[16]"},{kind:"const",name:"eui_48",identifier:386,description:'The 6-byte MAC address of the device. If a device does MAC address randomization it will have to "restart".',fields:[{name:"_",type:"bytes",storage:6,isSimpleType:!0,maxBytes:6}],packFormat:"b[6]"},{kind:"ro",name:"ssid",identifier:387,description:"SSID of the access-point to which device is currently connected.\nEmpty string if not connected.",fields:[{name:"_",type:"string",storage:32,maxBytes:32}],packFormat:"s[32]"},{kind:"ro",name:"rssi",identifier:388,description:"Current signal strength. Returns -128 when not connected.",fields:[{name:"_",unit:"dB",type:"i8",storage:-1,isSimpleType:!0,typicalMin:-128,typicalMax:-20}],volatile:!0,packFormat:"i8"},{kind:"event",name:"got_ip",identifier:1,description:"Emitted upon successful join and IP address assignment.",fields:[],identifierName:"active"},{kind:"event",name:"lost_ip",identifier:2,description:"Emitted when disconnected from network.",fields:[],identifierName:"inactive"},{kind:"event",name:"scan_complete",identifier:128,description:"A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\nThe event indicates how many networks where found, and how many are considered\nas candidates for connection.",fields:[{name:"num_networks",type:"u16",storage:2,isSimpleType:!0},{name:"num_known_networks",type:"u16",storage:2,isSimpleType:!0}],packFormat:"u16 u16"},{kind:"event",name:"networks_changed",identifier:129,description:"Emitted whenever the list of known networks is updated.",fields:[]}],tags:[],group:"Iot"},{name:"Wind direction",status:"experimental",shortId:"winddirection",camelName:"windDirection",shortName:"windDirection",extends:["_base","_sensor"],notes:{short:"A sensor that measures wind direction."},classIdentifier:409725227,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"wind_direction",identifier:257,description:"The direction of the wind.",fields:[{name:"_",unit:"°",type:"u16",storage:2,isSimpleType:!0,absoluteMin:0,absoluteMax:359}],volatile:!0,identifierName:"reading",preferredInterval:1e3,packFormat:"u16"},{kind:"ro",name:"wind_direction_error",identifier:262,description:"Error on the wind direction reading",fields:[{name:"_",unit:"°",type:"u16",storage:2,isSimpleType:!0}],volatile:!0,optional:!0,identifierName:"reading_error",packFormat:"u16"}],tags:["8bit"]},{name:"Wind speed",status:"experimental",shortId:"windspeed",camelName:"windSpeed",shortName:"windSpeed",extends:["_base","_sensor"],notes:{short:"A sensor that measures wind speed."},classIdentifier:458824639,enums:{},constants:{},packets:[{kind:"const",name:"instance_name",identifier:265,description:"A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",fields:[{name:"_",type:"string",storage:0}],optional:!0,identifierName:"instance_name",packFormat:"s",derived:"_base"},{kind:"ro",name:"status_code",identifier:259,description:"Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code",packFormat:"u16 u16",derived:"_base"},{kind:"event",name:"status_code_changed",identifier:4,description:"Notifies that the status code of the service changed.",fields:[{name:"code",type:"u16",storage:2,isSimpleType:!0},{name:"vendor_code",type:"u16",storage:2,isSimpleType:!0}],optional:!0,identifierName:"status_code_changed",packFormat:"u16 u16",derived:"_base"},{kind:"rw",name:"streaming_samples",identifier:3,description:"Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",fields:[{name:"_",unit:"#",type:"u8",storage:1,isSimpleType:!0}],internal:!0,identifierName:"streaming_samples",packFormat:"u8",derived:"_sensor"},{kind:"rw",name:"streaming_interval",identifier:4,description:"Period between packets of data when streaming in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0,defaultValue:100,typicalMin:1,typicalMax:6e4}],identifierName:"streaming_interval",packFormat:"u32",derived:"_sensor"},{kind:"const",name:"streaming_preferred_interval",identifier:258,description:"Preferred default streaming interval for sensor in milliseconds.",fields:[{name:"_",unit:"ms",type:"u32",storage:4,isSimpleType:!0}],internal:!0,optional:!0,identifierName:"streaming_preferred_interval",packFormat:"u32",derived:"_sensor"},{kind:"ro",name:"wind_speed",identifier:257,description:"The velocity of the wind.",fields:[{name:"_",unit:"m/s",shift:16,type:"u16.16",storage:4}],volatile:!0,identifierName:"reading",preferredInterval:6e4,packFormat:"u16.16"},{kind:"ro",name:"wind_speed_error",identifier:262,description:"Error on the reading",fields:[{name:"_",unit:"m/s",shift:16,type:"u16.16",storage:4}],volatile:!0,identifierName:"reading_error",packFormat:"u16.16"},{kind:"const",name:"max_wind_speed",identifier:261,description:"Maximum speed that can be measured by the sensor.",fields:[{name:"_",unit:"m/s",shift:16,type:"u16.16",storage:4}],optional:!0,identifierName:"max_reading",packFormat:"u16.16"}],tags:["8bit"]}],fr={};const gr=[{id:"microsoft-research-jacdaccableextender38v10",name:"JacdacCableExtender ",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[928595161],version:"1.0",designIdentifier:"38",status:"experimental"},{id:"microsoft-research-jacdacjoystick440344v03",name:"JacdacJoystick 44-0.3",company:"Microsoft Research",link:"https://github.com/microsoft/jacdac-padauk",services:[277836886],productIdentifiers:[832285283],version:"0.3",designIdentifier:"44",status:"experimental"},{id:"microsoft-research-jacdacmicrobitshieldlp29v03",name:"JacDacMicroBitShieldLP",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[1009620586],version:"0.3",designIdentifier:"29",status:"experimental"},{id:"microsoft-research-jacdacmotiondetection54v01",name:"JacdacMotionDetection ",company:"Microsoft Research",link:"https://github.com/microsoft/jacdac-padauk",services:[293185353],productIdentifiers:[1030407429],version:"0.1",designIdentifier:"54",status:"experimental"},{id:"microsoft-research-jacdacpinheaders45v02",name:"JacdacPinHeaders ",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[970939382],version:"0.2",designIdentifier:"45",status:"experimental"},{id:"microsoft-research-jacdactouchtest35v10",name:"JacdacTouchTest",company:"Microsoft Research",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[677752265],productIdentifiers:[933677864],version:"1.0",designIdentifier:"35",status:"experimental"},{id:"microsoft-research-jacdactouchtestelectrode36v10",name:"JacdacTouchTestElectrode",company:"Microsoft Research",repo:"",services:[677752265],productIdentifiers:[1026187559],version:"1.0",designIdentifier:"36",status:"experimental"},{id:"microsoft-research-jmaccelerometer30v02",name:"JM Accelerometer",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[521405449],productIdentifiers:[872001670],version:"0.2",designIdentifier:"30",status:"deprecated"},{id:"microsoft-research-jmaccelerometer30v10",name:"JM Accelerometer",company:"Microsoft Research",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[521405449],productIdentifiers:[952491663],tags:["kit"],version:"1.0",designIdentifier:"30"},{id:"microsoft-research-jmaccelerometerv20",name:"JM Accelerometer v2.0",company:"Microsoft Research",description:"A 3-axis accelerometer. 16G range.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[521405449],productIdentifiers:[1020174761],status:"deprecated"},{id:"microsoft-research-jmaccessswitchinput34v13",name:"JM Access Switch Input",company:"Microsoft Research",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[343122531,522667846,277836886],productIdentifiers:[964964313],tags:["kit"],version:"1.3",designIdentifier:"34"},{id:"microsoft-research-jmaccessswitchoutputv11",name:"JM Access Switch Output",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[406840918],productIdentifiers:[942325999],tags:["kit"],version:"1.1"},{id:"microsoft-research-jmambientlight55v01",name:"JM Ambient Light",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[400333340],productIdentifiers:[896864987],tags:["kit"],version:"0.1",designIdentifier:"55"},{id:"microsoft-research-jmanalogjoystick44v02",name:"JM Analog Joystick",company:"Microsoft Research",description:"",link:"https://github.com/microsoft/jacdac-padauk",services:[277836886],productIdentifiers:[976429228],tags:["kit"],version:"0.2",designIdentifier:"44"},{id:"microsoft-research-jmarcadebtnv20",name:"JM ArcadeBtn v2.0",company:"Microsoft Research",description:"Lets you connect a single arcade button with an LED.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[343122531],productIdentifiers:[886919574],status:"deprecated"},{id:"microsoft-research-jmarcadecontrolsv20",name:"JM Arcade Controls v2.0",company:"Microsoft Research",description:"Lets you connect arcade buttons and joystick to a Jacdac network.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[501915758],productIdentifiers:[954450524],status:"deprecated"},{id:"microsoft-research-jmbrainesp3248v02",name:"JM Brain ESP32",company:"Microsoft Research",repo:"https://github.com/microsoft/pxt-jacdac/",services:[342028028],productIdentifiers:[],transport:"serial",version:"0.2",designIdentifier:"48",status:"deprecated"},{id:"microsoft-research-jmbrainesp3248v03",name:"JM Brain ESP32",company:"Microsoft Research",repo:"https://github.com/microsoft/pxt-jacdac/",services:[342028028],productIdentifiers:[917230668],transport:"serial",version:"0.3",designIdentifier:"48",status:"experimental"},{id:"microsoft-research-jmbrainf441v02",name:"JM Brain F4",company:"Microsoft Research",description:"",link:"https://github.com/microsoft/pxt-jacdac",services:[414210922,411425820],productIdentifiers:[1003209864,970267564],tags:["kit"],firmwares:[{name:"HID Keyboard + Mouse",url:"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-f4.uf2"}],version:"0.2",designIdentifier:"41"},{id:"microsoft-research-jmbrainrp204059v01",name:"JM Brain RP2040",company:"Microsoft Research",description:"",link:"https://github.com/microsoft/pxt-jacdac",services:[414210922,411425820],productIdentifiers:[884301483,999933064],tags:["kit"],firmwares:[{name:"HID Keyboard + Mouse",url:"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-rp2040.uf2"}],version:"0.1",designIdentifier:"59"},{id:"microsoft-research-jmbutton10v13",name:"JM Button",company:"Microsoft Research",description:"",link:"https://github.com/microsoft/jacdac-padauk",services:[343122531],productIdentifiers:[896566497],tags:["kit"],version:"1.3",designIdentifier:"10"},{id:"microsoft-research-jmbutton40v02",name:"JM Button",company:"Microsoft Research",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[343122531],productIdentifiers:[946173966],tags:["kit"],version:"0.2",designIdentifier:"40"},{id:"microsoft-research-jmbuttonterminal62v01",name:"JM Button Terminal",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[343122531],productIdentifiers:[1047530059],tags:["kit"],version:"0.1",designIdentifier:"62"},{id:"microsoft-research-jmbuzzerv20",name:"JM Buzzer v2.0",company:"Microsoft Research",description:"A simple buzzer.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[458731991],productIdentifiers:[854957595],status:"deprecated"},{id:"microsoft-research-jmclickairquality4v32",name:"JM-Click Airquality4",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[379362758,312849815],productIdentifiers:[878106432],tags:["kit"],version:"3.2"},{id:"microsoft-research-jmclickcolorv32",name:"JM-Click Color",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[372299111],productIdentifiers:[1020991645],tags:["kit"],version:"3.2"},{id:"microsoft-research-jmcrankbuttonv20",name:"JM Crank + Button",company:"Microsoft Research",description:"A rotary encoder with a push button.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[284830153,343122531],productIdentifiers:[813927310],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmcrankv20",name:"JM Crank",company:"Microsoft Research",description:"A rotary encoder without a push button.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[284830153],productIdentifiers:[866678795],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmflexv10",name:"JM Flex",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[524797638],productIdentifiers:[840841542],tags:["kit"],version:"1.0"},{id:"microsoft-research-jmgamepadv20",name:"JM GamePad",company:"Microsoft Research",description:"Lets you convert a plastic d-pad controller, so that it can be connected to a Jacdac network.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[501915758],productIdentifiers:[919754666],version:"2.0"},{id:"microsoft-research-jmhapticmach101v10",name:"JM Haptic MACH-1.0",company:"Microsoft Research",description:"JM Haptic MACH-1.0",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[406832290],productIdentifiers:[1022649261],version:"1.0",designIdentifier:"1"},{id:"microsoft-research-jmhub39v03",name:"JM Hub",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[917230668],version:"0.3",designIdentifier:"39",status:"experimental"},{id:"microsoft-research-jmkeyboardkey46v10",name:"JM Keyboard Key",company:"Microsoft Research",description:"",link:"https://github.com/microsoft/jacdac-padauk",services:[343122531],productIdentifiers:[1067229774],tags:["kit"],version:"1.0",designIdentifier:"46",status:"deprecated"},{id:"microsoft-research-jmkeyboardkey46v11",name:"JM Keyboard Key",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[343122531],productIdentifiers:[911541523],tags:["kit"],version:"1.1",designIdentifier:"46",status:"deprecated"},{id:"microsoft-research-jmkeyboardkey46v12",name:"JM Keyboard Key",company:"Microsoft Research",link:"https://github.com/microsoft/jacdac-padauk",services:[343122531],productIdentifiers:[876567534],tags:[],version:"1.2",designIdentifier:"46"},{id:"microsoft-research-jmmachinelearning",name:"JM Machine Learning",company:"Microsoft Research",description:"Lets you run machine learning models on data coming from Jacdac network.",repo:"https://github.com/microsoft/pxt-tensorflow",link:"https://github.com/microsoft/jacdac-msr-modules",services:[336566904,496034245],productIdentifiers:[],status:"deprecated"},{id:"microsoft-research-jmmicrobitshieldlp29v05",name:"JM MicroBit Shield LP",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[974031363],version:"0.5",designIdentifier:"29",status:"experimental"},{id:"microsoft-research-jmmotorv21",name:"JM Motor",company:"Microsoft Research",description:"Lets you control a single DC motor (up to 5V; yellow plastic ones work well).",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[385895640],productIdentifiers:[809626198],version:"2.1",status:"deprecated"},{id:"microsoft-research-jmpinheader45v01",name:"JM Pin Header",company:"Microsoft Research",description:"A unregulated passive adapter from Jacdac to pin headers.",link:"https://github.com/microsoft/jacdac-msr-modules",services:[],productIdentifiers:[939230090],version:"0.1",designIdentifier:"45",status:"deprecated"},{id:"microsoft-research-jmpinheader45v02",name:"JM Pin Header",company:"Microsoft Research",description:"A regulated passive adapter from Jacdac to pin headers.",link:"https://github.com/microsoft/jacdac-msr-modules",services:[],productIdentifiers:[994328823],version:"0.2",designIdentifier:"45"},{id:"microsoft-research-jmpower",name:"JM Power",company:"Microsoft Research",description:"Lets you supply power to Jacdac network from a MicroUSB connection (eg. a USB battery pack).",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[530893146],productIdentifiers:[815885628],status:"deprecated"},{id:"microsoft-research-jmprotov20",name:"JM Proto",company:"Microsoft Research",description:"A prototype multi-function board.\n* ``0x3f9bc26a`` JM Touch-Proto v2.0",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[],productIdentifiers:[1052138004],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmpwmnpxv20",name:"JM PWM (npx)",company:"Microsoft Research",description:"A light-strip controller. Supports WS2812B, APA102, and SK9822.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[309264608],productIdentifiers:[895762065],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmpwmnpxv21",name:"JM PWM (npx)",company:"Microsoft Research",description:"A light-strip controller with MicroUSB connector for power. Supports WS2812B, APA102, and SK9822.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[309264608],productIdentifiers:[1013705700],version:"2.1",status:"deprecated"},{id:"microsoft-research-jmpwmservov20",name:"JM PWM (Servo)",company:"Microsoft Research",description:"A controller for a 5V servo.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[318542083],productIdentifiers:[816890446],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmpwmservov21",name:"JM PWM (Servo)",company:"Microsoft Research",description:"A controller for a 5V servo, with MicroUSB connector for power.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[318542083],productIdentifiers:[986140247],version:"2.1",status:"deprecated"},{id:"microsoft-research-jmrgbledbar58v01",name:"JM RGB LED Bar",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[309264608],productIdentifiers:[1046525691],tags:["kit"],version:"0.1",designIdentifier:"58"},{id:"microsoft-research-jmrgbledgeneric60v01",name:"JM RGB LED Generic",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[309264608],productIdentifiers:[967723905],tags:["kit"],version:"0.1",designIdentifier:"60"},{id:"microsoft-research-jmrgbledring37v21",name:"JM RGB LED Ring",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[309264608],productIdentifiers:[807926135],tags:["kit"],version:"2.1",designIdentifier:"37"},{id:"microsoft-research-jmrotarycontrolbuttonv10",name:"JM Rotary Control + Button",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[284830153,343122531],productIdentifiers:[1060754715],tags:["kit"],version:"1.0"},{id:"microsoft-research-jmsinglergbled42v01",name:"JM Single RGB LED",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[506480888],productIdentifiers:[917828732],tags:["kit"],version:"0.1",designIdentifier:"42"},{id:"microsoft-research-jmslider49v10",name:"JM Slider",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[522667846],productIdentifiers:[981005156],version:"1.0",designIdentifier:"49",status:"deprecated"},{id:"microsoft-research-jmslider49v11",name:"JM Slider",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[522667846],productIdentifiers:[966423091],tags:["kit"],version:"1.1",designIdentifier:"49"},{id:"microsoft-research-jmsliderv20",name:"JM Slider",company:"Microsoft Research",description:"A linear potentiometer (slider).",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[522667846],productIdentifiers:[1043615261],version:"2.0",status:"deprecated"},{id:"microsoft-research-jmspeechsynthesis61v33",name:"JM Speech Synthesis",company:"Microsoft Research",repo:"https://github.com/microsoft/jacdac-msr-modules",services:[302307733],productIdentifiers:[934541191],version:"3.3",designIdentifier:"61"},{id:"microsoft-research-jmtemperaturehumidity18v10a",name:"JM Temperature + Humidity",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[337754823,382210232],productIdentifiers:[899442616],version:"1.0A",designIdentifier:"18",status:"deprecated"},{id:"microsoft-research-jmtemperaturehumidity18v11",name:"JM Temperature + Humidity",company:"Microsoft Research",description:"",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[337754823,382210232],productIdentifiers:[827772887],tags:["kit"],version:"1.1",designIdentifier:"18"},{id:"microsoft-research-jmtouchprotov20",name:"JM Touch-Proto",company:"Microsoft Research",description:"A multi-touch sensor based on proto board.",repo:"https://github.com/microsoft/jacdac-msr-modules",link:"https://github.com/microsoft/jacdac-msr-modules",services:[416636459],productIdentifiers:[1067172458],version:"2.0",status:"deprecated"},{id:"microsoft-research-mikrobuscarrierboard53v01",name:"MikrobusCarrierBoard",company:"Microsoft Research",repo:"",services:[],productIdentifiers:[961789360],version:"0.1",designIdentifier:"53",status:"experimental"},{id:"microbit-foundation-microbitv2",name:"micro:bit V2",company:"microbit foundation",description:"The new micro:bit V2 has a built-in microphone and speaker to allow sound-sensing and sound-making without the need to attach another device. It also introduces capacitive touch sensing, a power-saving mode and more computing power for the classroom.",link:"https://microsoft.github.io/jacdac-docs/hardware/kit/oob/",services:[],productIdentifiers:[854992189],transport:"usb",tags:["kit"],firmwares:[{name:"Kit Out-Of-the-Box Experience",url:"https://github.com/microsoft/pxt-jacdac/releases/latest/download/microbit-oob.hex"}]}];function vr(){return hr.slice(0)}function yr(e){if(isNaN(e))return;return gr.find((t=>{var i;return(null===(i=t.productIdentifiers)||void 0===i?void 0:i.indexOf(e))>-1}))}function _r(e,t){var i;if(isNaN(e))return!1;if(e===t)return!0;const n=wr(e);return!!(null===(i=null==n?void 0:n.extends)||void 0===i?void 0:i.some((e=>{const i=kr(e);return!!i&&_r(i.classIdentifier,t)})))}function br(e){return e&&([K,Pt,je,zt,x,gt,Ie].indexOf(e.classIdentifier)>-1||"_"===e.shortId[0])}function kr(e){if(e)return hr.find((t=>t.shortId===e))||Object.values(fr).find((t=>t.shortId===e))}function wr(e){if(isNaN(e))return;let t=null==mr?void 0:mr[e];return t||(t=hr.find((t=>t.classIdentifier===e))||fr[e],t&&(mr||(mr={}),mr[e]=t),t)}function Sr(e){return e&&e.packets.some((e=>Rr(e)))&&e.packets.some((e=>e.identifier==s.SensorReg.StreamingSamples))&&e.packets.some((e=>e.identifier==s.SensorReg.StreamingInterval))}function Tr(e){return e&&("const"==e.kind||"ro"==e.kind||"rw"==e.kind)}function Rr(e){return e&&"ro"==e.kind&&e.identifier==s.SystemReg.Reading}const Cr=[s.SystemReg.StatusCode,s.SystemReg.InstanceName,s.SystemReg.StreamingInterval,s.SystemReg.StreamingPreferredInterval,s.SystemReg.StreamingSamples,s.SystemReg.ReadingError,s.SystemReg.ReadingResolution,s.SystemReg.MinReading,s.SystemReg.MaxReading,s.SystemReg.MinValue,s.SystemReg.MaxValue,s.SystemReg.MaxPower];function Ir(e){return Tr(e)&&!e.lowLevel&&!e.internal&&Cr.indexOf(e.identifier)<0}const Er=[s.SystemEvent.StatusCodeChanged];function Ar(e){return[s.SystemReg.MinReading,s.SystemReg.MaxReading,s.SystemReg.ReadingError,s.SystemReg.ReadingResolution,s.SystemReg.StreamingPreferredInterval].indexOf(e)>-1}function Nr(e){return e&&"rw"==e.kind&&e.identifier==s.SystemReg.Intensity}function xr(e){return e&&"rw"==e.kind&&e.identifier==s.SystemReg.Value}function Fr(e){return"const"==(null==e?void 0:e.kind)}function Pr(e){return"event"==e.kind}function Mr(e){return/^[ui]\d+(\.|$)/.test(e)||"pipe_port"==e||"bool"==e}function Dr(e){switch(e){case-1:return s.NumberFormat.Int8LE;case 1:return s.NumberFormat.UInt8LE;case-2:return s.NumberFormat.Int16LE;case 2:return s.NumberFormat.UInt16LE;case-4:return s.NumberFormat.Int32LE;case 4:return s.NumberFormat.UInt32LE;case-8:return s.NumberFormat.Int64LE;case 8:return s.NumberFormat.UInt64LE;default:return null}}function Lr(e){switch(e){case s.NumberFormat.Int8LE:return-1;case s.NumberFormat.UInt8LE:return 1;case s.NumberFormat.Int16LE:return-2;case s.NumberFormat.UInt16LE:return 2;case s.NumberFormat.Int32LE:return-4;case s.NumberFormat.UInt32LE:return 4;case s.NumberFormat.Int64LE:return-8;case s.NumberFormat.UInt64LE:return 8;default:return null}}function Br(e,t){return t.shift?t.shift<0?e*(1<<-t.shift):e/(1<<t.shift):e}function Vr(e,t){return t.shift?t.shift<0?Math.round(e/(1<<-t.shift)):Math.round(e*(1<<t.shift)):e}function Or(e){if(0==e)throw new Error("no range for 0");if(e<0){const t=Math.pow(2,8*-e-1);return[-t,t-1]}return[0,Math.pow(2,8*e)-1]}function Ur(e,t){const[i,n]=Or(t);return isNaN(e)?0:e<i?i:e>n?n:e}function jr(e){switch(e){case"u8":return s.NumberFormat.UInt8LE;case"u16":return s.NumberFormat.UInt16LE;case"u32":return s.NumberFormat.UInt32LE;case"i8":return s.NumberFormat.Int8LE;case"i16":return s.NumberFormat.Int16LE;case"i32":return s.NumberFormat.Int32LE;case"f32":return s.NumberFormat.Float32LE;case"f64":return s.NumberFormat.Float64LE;case"i64":return s.NumberFormat.Int64LE;case"u64":return s.NumberFormat.UInt64LE;default:return null}}function zr(e,t,i){return e.slice(t,i)}class $r{constructor(e){this.fmt=e,this.fp=0}parse(){this.div=1,this.isArray=!1;const e=this.fmt;for(;this.fp<e.length;){let t=this.fp;for(;t<e.length&&32!=e.charCodeAt(t);)t++;let i=e.slice(this.fp,t);if(this.fp=t+1,!i)continue;const n=i.indexOf(".");let r=i.charCodeAt(0);if((105==r||117==r)&&n>=0){const e=parseInt(i.slice(1,n)),t=parseInt(i.slice(n+1));i=i[0]+(e+t),this.div=1<<t}const s=i.charCodeAt(1);if(this.size=91==s?parseInt(i.slice(2)):-1,93==i.charCodeAt(i.length-1)&&91==i.charCodeAt(i.length-2)&&(i=i.slice(0,-2),this.isArray=!0),this.nfmt=jr(i),this.word=i,null==this.nfmt){if(114==r?58!=s&&(r=0):115==r||98==r||120==r?1!=i.length&&-1==this.size&&(r=0):122==r?1!=i.length&&(r=0):r=0,0==r)throw new Error(`invalid format: ${i}`);this.c0=r}else this.size=or(this.nfmt),this.c0=-1;return!0}return!1}}function Wr(e,t,i){const n=i?[]:null;let r=[],s=0,a=0;const o=new $r(t);if(i&&0==e.length)return[];for(;o.parse();){if(o.isArray&&!i)return r.push(Wr(zr(e,s,e.length),t.slice(a),1)),r;a=o.fp;let d=o.size;const c=o.c0;if(122==c){let t=s;for(;t<e.length&&0!=e[t];)t++;d=t-s}else d<0&&(d=e.length-s);if(null!==o.nfmt){let t=dr(e,o.nfmt,s);1!=o.div&&(t/=o.div),r.push(t),s+=o.size}else{const i=zr(e,s,s+d);if(122==c||115==c){let e=0;for(;e<i.length&&0!=i[e];)e++;r.push(Hn(zr(i,0,e)))}else if(98==c)r.push(i);else if(120!=c){if(114==c){r.push(Wr(i,t.slice(a),2));break}throw new Error("whoops")}s+=i.length,122==c&&s++}if(i&&o.fp>=t.length&&(o.fp=0,2==i&&(n.push(r),r=[]),s>=e.length))break}return 2==i?(r.length&&n.push(r),n):r}function Hr(e,t){if(!e||!t)return;if("b"===t)return[e.slice(0)];const i=jr(t);if(null!==i){const n=or(i);if(e.length<n)throw new Error(`size mistmatch, expected ${t} (${n} bytes), got ${e.length}`);return[dr(e,i,0)]}return Wr(e,t,0)}function Jr(e,t,i,n){let r=0;const s=new $r(t);for(;s.parse();){const a=s.c0;if(120==a){n+=s.size;continue}const o=i[r++];if(114==a&&o){const i=t.slice(s.fp);for(const t of o)n=Jr(e,i,t,n);break}let d;d=s.isArray?o:[o];for(const t of d)if(null!==s.nfmt){if("number"!=typeof t)throw new Error("expecting number, got "+typeof t);if(e){const i=Lr(s.nfmt);cr(e,s.nfmt,n,Ur(Math.round(t*s.div),i))}n+=s.size}else{let i;if("string"==typeof t)if(122==a)i=Jn(t+"\0");else{if(115!=a)throw new Error("unexpected string");i=Jn(t)}else{if(!t||"object"!=typeof t||null==t.length)throw console.log({parser:s,v:t}),new Error("expecting string or buffer");if(98!=a)throw new Error("unexpected buffer");i=t}let r=s.size;r>=0?i.length>r&&(i=zr(i,0,r)):r=i.length,e&&e.set(i,n),n+=r}}if(i.length>r)throw new Error(`format '${t}' too short`);return n}function qr(e,t){var i;if(!e||!t)return;if("b"===e)return null===(i=t[0])||void 0===i?void 0:i.slice(0);const n=jr(e);if(null!==n){const e=new Uint8Array(or(n));return cr(e,n,0,t[0]),e}const r=Jr(null,e,t,0),s=new Uint8Array(r);return Jr(s,e,t,0),s}var Gr;function Kr(e){switch(e){case"us":return"μs";case"C":case"Cel":return"°C";case"K":return"°K";case"/":case"#":return"";default:return e}}function Xr(e){return(e|=0)<1e3?e+"b":e<1e6?tr(e/1e3,1)+"kb":tr(e/1e6,1)+"mb"}function Yr(e){let t=e/1e3;if(t<1)return`${tr(t,2)}s`;if(t<10)return`${tr(t,1)}s`;if(t<60)return`${Math.floor(t)}s`;let i="";const n=Math.floor(t/86400);n>0&&(i+=n+":",t-=86400*n);const r=Math.floor(t/3600);r>0&&(i+=r+":",t-=3600*r);const s=Math.floor(t/60);return(n>0||r>0||s>0)&&(i+=s+":",t-=60*s),i+=Math.floor(t),i}function Qr(e){return e<1e3?`${e}${Kr("us")}`:Yr(e/1e3)}function Zr(e){const t=wn(Dn(e),30);return String.fromCharCode(65+t%26)+String.fromCharCode(65+Sn(t,26)%26)+String.fromCharCode(48+Sn(t,676)%10)+String.fromCharCode(48+Sn(t,6760)%10)}function es(e,t,i,n,r){var a;if(!i)return null;if(n.data.length<=r)return null;let o,d,c,l,u=Math.abs(i.storage);const p=null==e?void 0:e.enums[i.type],m=Mr(i.type)||!!p;if(!i.isFloat||4!=u&&8!=u)if(m){const s=Dr(i.storage);if(o=n.getNumber(s,r),c=d=Br(o,i),n.device&&"pipe_port"==i.type&&(n.device.port(c).pipeType=(null==e?void 0:e.shortId)+"."+t.pipeType+".command"),p)if(p.isFlags){l="";let e=o;for(const t of Object.keys(p.members)){const i=p.members[t];(e&i)==i&&(l&&(l+=" | "),l+=t,e&=~i)}e&&(l&&(l+=" | "),l+=Vn(e))}else l=function(e,t){for(const i of Object.keys(e))if(e[i]==t)return i;return Vn(t)}(p.members,o);else if("bool"==i.type)c=!!o,l=c?"true":"false";else if("ms"===i.unit)l=Yr(c);else if("us"===i.unit)l=Qr(c);else if(i.unit||d!=o){let e=d;i.unit&&(e=tr(e,3)),l=""+e,i.unit&&(l+=Kr(i.unit))}else if(l=d+"",(0|d)==d&&(!i.unit||d>=15))i.unit?l+=" ("+Vn(d)+")":l=Vn(d);else if(d&&8==i.storage){const e=Mn(n.data.slice(r,r+8));l+=` (${e} / ${Zr(e)})`}}else{const s=u?n.data.slice(r,r+u):n.data.slice(r);if("string"==i.type){try{c=An(En(s))}catch(e){c=En(s)}l=JSON.stringify(c).replace(/\\u0000/g,"\\0")}else if("pipe"==i.type){c=s;const i=Mn(s.slice(0,8)),r=zn(s,8);if(l="pipe to "+Zr(i)+" port:"+r,null===(a=null==n?void 0:n.device)||void 0===a?void 0:a.bus){const s=n.device.bus.device(i,!0);s&&(s.port(r).pipeType=(null==e?void 0:e.shortId)+"."+t.pipeType+".report")}}else c=s,l=us(s);u=s.length}else o=4==u?n.getNumber(s.NumberFormat.Float32LE,r):n.getNumber(s.NumberFormat.Float64LE,r),c=d=o,l=Math.abs(c)<10?c.toFixed(5):Math.abs(c)<1e3?c.toFixed(3):Math.abs(c)<1e5?c.toFixed(2):""+c,i.unit&&(l+=Kr(i.unit));return{value:c,numValue:o,scaledValue:d,humanValue:l,description:i.name+":"+(l?l.indexOf("\n")>=0?"\n"+l.replace(/^/gm,"      "):" "+l:"?"),info:i,size:u}}function ts(e,t,i,n=0){const r=t.fields.slice(0);let s=r.findIndex((e=>e.startRepeats));if(s>=0){if(r.some((e=>!e.storage)))throw new Error("zero-sized field in repeats:");let e=0;for(const t of r)e+=Math.abs(t.storage);for(;e<=i.data.length;){const t=r[s++];e+=Math.abs(t.storage),r.push(t)}}return r.map((r=>{const s=es(e,t,r,i,n);return s&&(n+=s.size),s})).filter((e=>!!e))}function is(e){return 0==e.length?" {}":1==e.length&&e[0].description.length<60?" { "+e[0].description+" }":" {\n"+e.map((e=>"    "+e.description)).join("\n")+"\n}"}function ns(e,t){return{kind:e,identifier:t,name:Vn(t),description:"",fields:[{name:"_",type:"bytes",storage:0}]}}function rs(e,t){const i=function(e,t){const i=t.isRegisterSet,n=t.isRegisterGet;if(i==n)return null;let r="";const s=4095&t.serviceCommand;let a=null==e?void 0:e.packets.find((e=>Tr(e)&&e.identifier==s));a||(a=ns("rw",s),r="unable to decode register");const o=ts(e,a,t);if(a.packFormat&&t.data.length)try{const e=Mn(qr(a.packFormat,Hr(t.data,a.packFormat)));void 0!==e&&e!==Mn(t.data)&&(r=`invalid data packing, ${Mn(t.data)} recoded to ${e}`)}catch(e){r=`invalid data packing, ${e.message}`}let d="";return d=0==o.length?a.name:1==o.length?a.name+": "+o[0].humanValue:is(o),d=n?"GET "+d:"SET "+d,{service:e,info:a,decoded:o,description:d,error:r}}(e,t)||function(e,t){if(t.isCommand||!t.isEvent)return null;const i=t.eventCode,n=(null==e?void 0:e.packets.find((e=>"event"==e.kind&&e.identifier==i)))||ns("event",i),r=ts(e,n,t);return{service:e,info:n,decoded:r,description:`EVENT[${t.eventCounter}] ${n.name}`+is(r)}}(e,t)||function(e,t){const i=t.isCommand?"command":"report",n=(null==e?void 0:e.packets.find((e=>e.kind==i&&e.identifier==t.serviceCommand)))||ns(i,t.serviceCommand),r=ts(e,n,t);return{service:e,info:n,decoded:r,description:(t.isCommand?"CMD ":"REPORT ")+n.name+is(r)}}(e,t);return i}function ss(e){try{if(e.device&&e.isPipe){const t=function(e){const t=e.serviceCommand,i=e.device.port(t>>7);if(!i.pipeType)return null;const[n,r,a]=i.pipeType.split(/\./),o=kr(n);if(!o)return null;const d=!!(64&t),c=o.packets.filter((e=>e.pipeType==r&&/pipe/.test(e.kind)&&/meta/.test(e.kind)==d&&/command/.test(e.kind)==("command"==a))).filter((t=>!d||e.getNumber(s.NumberFormat.UInt16LE,0)==t.identifier))[0];if(c){const t=ts(o,c,e,d?4:0),i=c.kind.toUpperCase()+" "+c.name+is(t);return{service:o,info:c,decoded:t,description:i}}return null}(e);if(t)return t}const t=e.serviceClass;return rs(wr(t),e)}catch(t){throw console.error(t,{error:t,pkt:e,data:Mn(e.data)}),t}}function as(e){const t=kr(e);return t?t.classIdentifier:-1}function os(e){if(!Ln(e))return"?";const t=wr(e);return t?t.name.toUpperCase():"?"}function ds(e,t){var i,n,r,a;let o="";if(8192==(61440&e)?o="SET[":4096==(61440&e)&&(o="GET["),o){const r=4095&e;let a=null===(i=s.SystemReg[r])||void 0===i?void 0:i.toLowerCase();if(void 0===a){const e=wr(t);a=null===(n=null==e?void 0:e.packets.find((e=>Tr(e)&&e.identifier===r)))||void 0===n?void 0:n.name}return o+(void 0!==a?a:`x${r.toString(16)}`)+"]"}let d=null===(r=s.SystemCmd[e])||void 0===r?void 0:r.toLowerCase();if(void 0===d){const i=wr(t);d=null===(a=null==i?void 0:i.packets.find((t=>"command"===t.kind&&t.identifier===e)))||void 0===a?void 0:a.name}return d}function cs(e){return e+" (0x"+e.toString(16)+")"}function ls(e){let t="";for(let i=0;i<e.length;++i){const n=e[i];t+=n<32||n>=128?".":String.fromCharCode(n)}return t}function us(e){if(e.length<=32)return Mn(e)+" | "+ls(e);const t=Bn(e);let i="";for(let n=0;n<e.length;n+=32)if(n+32>=e.length){let e=Mn(t.slice(n));for(;e.length<64;)e+="  ";i+=e+" | "+ls(t.slice(n))}else i+=us(t.slice(n,n+32))+"\n";return i}function ps(e,t={}){const i=e.frameFlags,n=e.friendlyDeviceName,r=e.friendlyServiceName,s=e.friendlyCommandName,a=e.sender;let o=`${n}/${r}: ${s}; sz=${e.size}`;o=1&i?"to "+o:"from "+o,2&i&&(o=`[ack:${Vn(e.crc)}] `+o);const d=e.data;if(e.device&&0==e.serviceIndex&&0==e.serviceCommand)if(e.device.lastServiceUpdate<e.timestamp){if(t.skipRepeatedAnnounce)return"";o=" ====== "+o}else{const t=[];for(const i of e.device.serviceClasses)t.push(os(i));o+="; Announce services: "+t.join(", ")}else{const t=e.decoded;if(t)o+="; "+t.description;else if(0<d.length&&d.length<=4){const t=e.uintData,i=e.intData;o+="; "+cs(t),t!=i&&(o+="; signed: "+cs(i))}else d.length&&(o+="; "+us(d))}return a&&(o+=`; ${a}`),(!isNaN(e.timestamp)&&(null==t?void 0:t.showTime)?Math.round(e.timestamp)+"ms: ":"")+o}s.RegisterType=void 0,(Gr=s.RegisterType||(s.RegisterType={}))[Gr.UInt=0]="UInt",Gr[Gr.UIntHex=1]="UIntHex",Gr[Gr.Int=2]="Int",Gr[Gr.IntArray=3]="IntArray",Gr[Gr.String=4]="String";const{warn:ms}=console;class hs{constructor(){this._meta=void 0,this.key=hs._nextKey++}static fromBinary(e,t){if(!e||e.length>252)return;const i=new hs;return i._header=e.slice(0,16),i._data=e.slice(16,16+i.size),void 0!==t&&(i.timestamp=t),i}static from(e,t){const i=new hs;return i._header=new Uint8Array(16),i.data=t,i.serviceCommand=e,i}static onlyHeader(e){return hs.from(e,new Uint8Array(0))}toBuffer(){const e=qn(this._header,this._data);return e[2]=this._data.length+4,Un(e,0,Rn(e.slice(2))),e}get header(){return this._header.slice(0)}get deviceIdentifier(){return Mn(this._header.slice(4,12))}set deviceIdentifier(e){const t=Dn(e);8!=t.length&&gn("Invalid id"),this.isMultiCommand&&gn("Invalid multicast"),this._header.set(t,4),this._decoded=void 0}get frameFlags(){return this._header[3]}set frameFlags(e){this._header[3]=e}get isMultiCommand(){return!!(4&this.frameFlags)}get size(){return this._header[12]}get requiresAck(){return!!(2&this.frameFlags)}set requiresAck(e){e!=this.requiresAck&&(this._header[3]^=2),this._decoded=void 0}get serviceIndex(){return 63&this._header[13]}set serviceIndex(e){if(null==e)throw new Error("service_index not set");this._header[13]=192&this._header[13]|e,this._decoded=void 0}get serviceClass(){var e;return this.isMultiCommand?jn(this._header,4):null===(e=this.device)||void 0===e?void 0:e.serviceClassAt(this.serviceIndex)}get crc(){return zn(this._header,0)}get serviceCommand(){return zn(this._header,14)}set serviceCommand(e){Un(this._header,14,e),this._decoded=void 0}get isRegisterSet(){return this.serviceCommand>>12==2}get isRegisterGet(){return this.serviceCommand>>12==1}get registerIdentifier(){if(this.isRegisterGet||this.isRegisterSet)return 4095&this.serviceCommand}get isEvent(){return this.serviceIndex<=48&&0!=(32768&this.serviceCommand)}get eventCode(){return this.isEvent?255&this.serviceCommand:void 0}get eventCounter(){return this.isEvent?this.serviceCommand>>8&127:void 0}get isCRCAck(){return 63===this.serviceIndex}get isPipe(){return 62===this.serviceIndex}get pipePort(){return this.isPipe&&this.serviceCommand>>7}get pipeCount(){return this.isPipe&&31&this.serviceCommand}get data(){return this._data}set data(e){if(e.length>236)throw Error(`jacdac packet length too large, ${e.length} > 236 bytes`);this._header[12]=e.length,this._data=e,this._decoded=void 0}jdunpack(e){return this._data&&e&&Hr(this._data,e)||[]}get uintData(){let e=this._data;if(0!=e.length)return e.length<4&&(e=qn(e,new Uint8Array(4))),8==e.length?jn(e,0)+4294967296*jn(e,4):jn(e,0)}get stringData(){return this._data&&Hn(this._data)}get intData(){let e;switch(this._data.length){case 0:return;case 1:e=s.NumberFormat.Int8LE;break;case 2:case 3:e=s.NumberFormat.Int16LE;break;default:e=s.NumberFormat.Int32LE}return this.getNumber(e,0)}get isAnnounce(){return 0==this.serviceIndex&&this.isReport&&this.serviceCommand==s.SystemCmd.Announce}get isRepeatedAnnounce(){var e;return this.isAnnounce&&(null===(e=this.device)||void 0===e?void 0:e.lastServiceUpdate)<this.timestamp}get decoded(){return this._decoded||(this._decoded=ss(this)),this._decoded}get meta(){return this._meta||(this._meta={}),this._meta}clone(){const e=new hs;return e._header=this._header.slice(),e._data=this._data.slice(),e.timestamp=this.timestamp,e}cloneForDevice(e,t){const i=Dn(e);8!=i.length&&gn("Invalid id"),this.isMultiCommand||gn("Must be multi command");const n=hs.fromBinary(this.toBuffer(),this.timestamp);return n.frameFlags&=-5,n._header.set(i,4),n._decoded=void 0,n.serviceIndex=t,n}compress(e){if(0==e.length)return;let t=-4;for(const i of e)t+=i.length;const i=new Uint8Array(t);this._header.set(e[0],12),i.set(e[0].slice(4),0),t=e[0].length-4;for(const n of e.slice(1))i.set(n,t),t+=n.length;this._data=i,this._decoded=void 0}withFrameStripped(){return qn(this._header.slice(12,16),this._data)}getNumber(e,t){return dr(this._data,e,t)}get isCommand(){return!!(1&this.frameFlags)}set isCommand(e){e?this._header[3]|=1:this._header[3]&=-2,this._decoded=void 0}get isReport(){return!this.isCommand}toString(){let e=`${Zr(this.deviceIdentifier)}/${this.serviceIndex}[${this.frameFlags}]: ${this.serviceCommand} sz=${this.size}`;return this.size<20?e+=": "+Mn(this.data):e+=": "+Mn(this.data.slice(0,20))+"...",e}sendCoreAsync(e){const t=this.toBuffer();return this._header[0]=t[0],this._header[1]=t[1],this._header[2]=t[2],e.sendPacketAsync(this)}sendReportAsync(e){return e?(this.deviceIdentifier=e.deviceId,this.sendCoreAsync(e.bus)):Promise.resolve()}sendCmdAsync(e){return e?(this.deviceIdentifier=e.deviceId,this.isCommand=!0,this.sendCoreAsync(e.bus)):Promise.resolve()}sendAsMultiCommandAsync(e,t){return this._header[3]|=5,On(this._header,4,t),On(this._header,8,0),this.sendCoreAsync(e)}static fromFrame(e,t){return function(e,t){const i=e[2]||0;if(e.length<i+12)ms(`${t}ms: got only ${e.length} bytes; expecting ${i+12}`);else{if(!(i<4)){const n=Rn(e.slice(2,i+12)),r=zn(e,0);r!=n&&console.error(`crc mismatch; sz=${i} got:${r}, exp:${n}`);const s=[];e.length!=12+e[2]&&ms(`${t}ms: unexpected packet len: ${e.length}`);for(let i=12;i<12+e[2];){const n=e[i]+4,r=Cn(n),a=qn(e.slice(0,12),e.slice(i,i+n));i+n>12+e[2]&&ms(`${t}ms: invalid frame compression, res len=${s.length}`);const o=hs.fromBinary(a);o.timestamp=t,s.push(o),s.length>1&&(o.requiresAck=!1),i+=r}return s}ms(`${t}ms: empty packet`)}return[]}(e,t)}static jdpacked(e,t,i){return hs.from(e,qr(t,i))}get friendlyDeviceName(){var e;return this.isMultiCommand?"*":(null===(e=this.device)||void 0===e?void 0:e.friendlyName)||this.deviceIdentifier}get friendlyServiceName(){let e;if(this.isCRCAck)e="CRC-ACK";else if(this.isPipe)e="PIPE";else{e=`${os(this.serviceClass)} (${this.serviceIndex})`}return e}get friendlyCommandName(){const e=this.serviceCommand;let t;if(this.isCRCAck)t=Vn(e);else if(this.isPipe)t=`port:${e>>7} cnt:${31&e}`,64&e&&(t+=" meta"),32&e&&(t+=" close");else if(this.isEvent){const e=wr(this.serviceClass),i=this.eventCode,n=null==e?void 0:e.packets.find((e=>"event"===e.kind&&e.identifier===i));t=null==n?void 0:n.name}else if(this.isReport){const e=wr(this.serviceClass),i=-4097&this.serviceCommand,n=null==e?void 0:e.packets.find((e=>"report"===e.kind&&e.identifier===i));t=null==n?void 0:n.name}else t=ds(e,this.serviceClass);return t}}hs._nextKey=1;function fs(){return(new Error).stack}function gs(e){return null==e?void 0:e.split(/\n/g).slice(2).join("\n").replace(/webpack-internal:\/\/\//g,"").replace(/https:\/\/microsoft\.github\.io\/jacdac-docs/g,"")}class vs{constructor(e=[],t){this.packets=e,this.description=null==t?void 0:t.description,this.maxLength=null==t?void 0:t.maxLength}get length(){return this.packets.length}get duration(){return this.packets.length?this.packets[this.packets.length-1].timestamp-this.packets[0].timestamp:0}get startTimestamp(){var e;return(null===(e=this.packets[0])||void 0===e?void 0:e.timestamp)||0}get endTimestamp(){var e;return(null===(e=this.packets[this.packets.length-1])||void 0===e?void 0:e.timestamp)||0}addPacket(e){this.packets.push(e),this.maxLength>0&&this.packets.length>1.1*this.maxLength&&(this.packets=this.packets.slice(-this.maxLength))}serializeToText(e){var t;const i=(null===(t=this.packets[0])||void 0===t?void 0:t.timestamp)||0;let n=this.packets;e>0&&(n=n.slice(-e));const r=n.map((e=>{let t=`${tr(e.timestamp-i,3)}\t${Mn(e.toBuffer())}\t${ps(e,{}).replace(/\r?\n/g," ")}`;const n=e.meta.TRACE;return n&&(t+="\n"+gs(n)),t}));return this.description&&(r.unshift(this.description),r.unshift("")),r.join("\n")}}function ys(e){return e||(e=[]),"string"==typeof e&&(e=[e]),e}let _s=0;class bs{constructor(){this.nodeId=_s++,this.listeners={},this.eventStats={},this.newListenerStats=void 0}on(e,t){return t?(ys(e).forEach((e=>this.addListenerInternal(e,t,!1))),this):this}off(e,t){return ys(e).forEach((e=>this.removeListenerInternal(e,t))),this}once(e,t){return ys(e).forEach((e=>this.addListenerInternal(e,t,!0))),this}addListenerInternal(e,t,i){if(!e||!t)return;const n=this.listeners[e]||(this.listeners[e]=[]),r=n.find((e=>e.handler===t));r?r.once=!!i:(n.push({handler:t,once:!!i,stackTrace:fn.diagnostics&&fs()}),this.emit("newListener",e,t),fn.diagnostics&&(this.newListenerStats||(this.newListenerStats={}),this.newListenerStats[e]=(this.newListenerStats[e]||0)+1))}removeListenerInternal(e,t){if(!e||!t)return;const i=this.listeners[e];if(i)for(let n=0;n<i.length;++n){if(t===i[n].handler)return i.splice(n,1),void this.emit("removeListener",e,t)}}emit(e,...t){if(!e)return!1;this.eventStats[e]=(this.eventStats[e]||0)+1;const i=this.listeners[e];if(!i||0==i.length)return"error"==e&&console.error(t[0]),!1;for(let n=0;n<i.length;++n){const r=i[n],s=r.handler;r.once&&(i.splice(n,1),--n);try{s.apply(null,t)}catch(t){"error"!==e&&this.emit("error",t)}}return!0}listenerCount(e){if(!e)return 0;const t=this.listeners[e];return(null==t?void 0:t.length)||0}listenerStackTraces(e){const t=this.listeners[e];return null==t?void 0:t.map((e=>e.stackTrace))}eventNames(){return Object.keys(this.listeners)}observe(e){return new ks(this,ys(e))}subscribe(e,t){return this.observe(e).subscribe({next:t}).unsubscribe}get changeId(){return this.eventStats.change||0}}class ks{constructor(e,t){this.eventEmitter=e,this.eventNames=t}subscribe(e){return e.next&&this.eventEmitter.on(this.eventNames,e.next),e.error&&this.eventEmitter.on("error",e.error),{unsubscribe:()=>{e.next&&this.eventEmitter.off(this.eventNames,e.next),e.error&&this.eventEmitter.off("error",e.error)}}}}class ws extends bs{constructor(){super()}get friendlyName(){return this.name}get nodeData(){return this._nodeData||(this._nodeData={}),this._nodeData}emitPropagated(e,t){let i=this;for(;i;)i.emit(e,t||this),i=i.parent}toString(){return this.friendlyName}}class Ss extends ws{constructor(e,t,i){super(),this._specification=null,this.service=e,this.code=t,this.isPacket=i}get id(){return`${this.nodeKind}:${this.service.device.deviceId}:${this.service.serviceIndex.toString(16)}:${this.code.toString(16)}`}get name(){var e;return(null===(e=this.specification)||void 0===e?void 0:e.name)||this.code.toString(16)}get qualifiedName(){return`${this.service.qualifiedName}.${this.name}`}get specification(){var e;return null===this._specification&&(this._specification=null===(e=this.service.specification)||void 0===e?void 0:e.packets.find((e=>this.isPacket(e)&&e.identifier===this.code))),this._specification}get parent(){return this.service}get friendlyName(){return[this.service.friendlyName,this.name].join(".")}}class Ts extends ws{constructor(e,t,i){super(),this.member=e,this.index=t,this.specification=i}get id(){return`${this.nodeKind}:${this.member.service.device.deviceId}:${this.member.service.serviceIndex.toString(16)}:${this.member.code.toString(16)}:${this.index.toString(16)}`}get name(){return"_"===this.specification.name?this.member.specification.name:this.specification.name}get children(){return[]}get qualifiedName(){return`${this.member.qualifiedName}.${this.name}`}get parent(){return this.member}get friendlyName(){const e=[this.member.friendlyName];return"_"!==this.specification.name&&e.push(this.name),e.join(".")}get dataTypeName(){return[this.member.service.specification.shortName,this.name].join(".")}get unit(){return this.specification.unit}get nodeKind(){return"field"}get decoded(){const e=this.member.decoded;return null==e?void 0:e.decoded[this.index]}get value(){var e;return null===(e=this.decoded)||void 0===e?void 0:e.value}}function Rs(e,t,i){if(!e||!t)return;const n={};for(let r=0;r<e.length;++r){const s=t[r],a=e[r],{name:o,startRepeats:d}=s,c="_"===o&&i?i:o;if(d){const s=t.slice(r);console.log({value:a,repeatFields:s,data:e}),n.repeat=a.map((e=>{const n={};for(let r=0;r<s.length;++r){const s=t[r],a=e[r],{name:o}=s;n["_"===o&&i?i:o]=a}return n}));break}n[c]=a}return n}class Cs extends Ss{constructor(e,t){super(e,t,Tr),this._lastSetTimestamp=-1/0,this._lastGetTimestamp=-1/0,this._lastGetAttempts=0}get nodeKind(){return"register"}get fields(){var e;return this._fields||(this._fields=null===(e=this.specification)||void 0===e?void 0:e.fields.map(((e,t)=>new Ts(this,t,e)))),this._fields.slice()}get children(){return this.fields}get lastSetTimestamp(){return this._lastSetTimestamp}get lastGetTimestamp(){return this._lastGetTimestamp}clearGetTimestamp(){this._lastGetTimestamp=-1/0}get lastGetAttempts(){return this._lastGetAttempts}sendSetAsync(e,t){const i=8192|this.code,n=hs.from(i,e);this._lastSetTimestamp=this.service.device.bus.timestamp;let r=this.service.sendPacketAsync(n,this.service.registersUseAcks);return t&&(r=this.service.device.bus.delay(50).then((()=>this.sendGetAsync()))),r}sendGetAsync(){var e;if("const"===(null===(e=this.specification)||void 0===e?void 0:e.kind)&&void 0!==this.data)return Promise.resolve();this._lastGetTimestamp=this.service.device.bus.timestamp,this._lastGetAttempts++;const t=4096|this.code;return this.service.sendCmdAsync(t,void 0,this.service.registersUseAcks).then((()=>{this.emit("getAttempt")}))}sendSetPackedAsync(e,t){var i;const n=null===(i=this.specification)||void 0===i?void 0:i.packFormat;if(!n)throw new Error("unknown register data format");return this.sendSetAsync(qr(n,e),t)}sendSetBoolAsync(e,t){return this.sendSetPackedAsync([e?1:0],t)}sendSetStringAsync(e,t){return this.sendSetPackedAsync([e||""],t)}get data(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.data}get lastDataTimestamp(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.timestamp}get unpackedValue(){var e;const t=this.data,i=null===(e=this.specification)||void 0===e?void 0:e.packFormat;return t&&i&&Hr(this.data,i)}get objectValue(){const{specification:e}=this;return Rs(this.unpackedValue,null==e?void 0:e.fields,e.name)}get intValue(){const e=this.data;return e&&ur(e)}get uintValue(){const e=this.data;return e&&lr(e)}get boolValue(){if(void 0!==this.data)return!!this.intValue}get stringValue(){const e=this.data;if(void 0===e)return;let t;try{t=An(En(e))}catch(i){t=En(e)}return t}get humanValue(){var e,t;return null===(t=null===(e=this.decoded)||void 0===e?void 0:e.decoded)||void 0===t?void 0:t.map((e=>e.humanValue)).join(",")}toString(){const e=this.data;return`${this.id} ${e?Mn(e):""}`}get decoded(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.decoded}refresh(e){var t;if(this.data&&(e||"const"===(null===(t=this.specification)||void 0===t?void 0:t.kind)))return;const i=this.service.device.bus;return i.withTimeout(150,new Promise(((e,t)=>{this.once("reportReceive",(()=>{const t=e;e=null,t()})),this.sendGetAsync().then((()=>i.delay(30))).then((()=>{if(e)return this.sendGetAsync().then((()=>i.delay(80)))})).then((()=>{if(e)return this.sendGetAsync()})).catch((e=>t(e)))})))}processPacket(e){e.isRegisterGet?this.processReport(e):e.isRegisterSet&&this.clearGetTimestamp()}processReport(e){const t=!kn(this.data,e.data);this._lastReportPkt=e,this._lastGetAttempts=0,this._lastGetTimestamp=this.service.device.bus.timestamp,this.emit("reportReceive",this),t&&(this.emitPropagated("reportUpdate",this),this.emit("change"))}compareTo(e){return this.code-e.code||this.service.compareTo(e.service)}}class Is extends Ss{constructor(e,t){super(e,t,Pr),this._count=0}get nodeKind(){return"event"}get fields(){var e;return this._fields||(this._fields=null===(e=this.specification)||void 0===e?void 0:e.fields.map(((e,t)=>new Ts(this,t,e)))),this._fields.slice()}get children(){return this.fields}get data(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.data}get unpacked(){var e;const{packFormat:t}=this.specification||{};return t&&(null===(e=this._lastReportPkt)||void 0===e?void 0:e.jdunpack(t))}get count(){return this._count}get lastDataTimestamp(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.timestamp}get decoded(){var e;return null===(e=this._lastReportPkt)||void 0===e?void 0:e.decoded}processEvent(e){const{device:t}=this.service,i=(t.eventCounter||0)+1,n=e.eventCounter-i&127,r=i-e.eventCounter&127;n>0&&(r<60||n<5)||(this._lastReportPkt=e,this._count++,this.emitPropagated("event",this),this.emit("change"),t.eventCounter=e.eventCounter)}}class Es extends bs{constructor(){super(),this.unsubscribers=[],this.unmounted=!1}log(e){console.log(e)}mount(e){return this.unmounted=!1,e&&this.unsubscribers.indexOf(e)<0&&this.unsubscribers.push(e),e}unmount(){const e=this.unsubscribers;this.unsubscribers=[],e.forEach((e=>e())),this.unmounted=!0}}function As(e){let t=function(e){if("undefined"==typeof window)return;const t=new Uint32Array(e);return window.crypto.getRandomValues(t),t}(e);if(!t){t=new Uint32Array(e);for(let e=0;e<t.length;++e)t[e]=4294967296*Math.random()>>>0}return t}function Ns(e){const t=As(e),i=new Uint8Array(t.length);for(let n=0;n<e;++n)i[n]=255&t[n];return i}function xs(){const e=As(8);for(let t=0;t<8;++t)e[t]&=255;return Mn(e)}const{warn:Fs}=console;class Ps{constructor(e,t,i){this.device=e,this.port=t,this.hosted=i,this._count=0}static from(e,t,i){const[n,r]=t.jdunpack("b[8] u16"),s=Mn(n),a=e.device(s,!1,t);return new Ps(a,r,i)}get count(){return this._count}get isOpen(){return null!=this.device}send(e){return this.sendData(e,0)}sendMeta(e){return this.sendData(e,64)}async respondForEach(e,t){try{const i=e.length;for(let n=0;n<i;++n){const i=t(e[n]);await this.send(i)}}finally{await this.close()}}async sendData(e,t){if(!this.device)return void Fs("sending data over closed pipe");const i=this.port<<7|t|31&this._count,n=hs.from(i,e);n.serviceIndex=62,this.device.sendPktWithAck(n).then((()=>{}),(e=>{console.log(e),this.free()})),this.hosted&&this.device.bus.processPacket(n),this._count++}free(){this.device=null,this.port=null}async close(){await this.sendData(new Uint8Array(0),32),this.free()}}class Ms extends Es{constructor(e){super(),this.bus=e,this._count=0,this._handlePacket=this._handlePacket.bind(this),this.allocPort(),this.mount(this.bus.selfDevice.subscribe("packetReceive",this._handlePacket))}get port(){return this._port}get count(){return this._count}get isOpen(){return null!=this._port}allocPort(){for(;;){this._port=1+(e=511,As(1)[0]%e);const t=this.bus.selfDevice.port(this._port);if(!t.localPipe&&!t.pipeType){t.localPipe=this;break}}var e}openCommand(e){this.isOpen||gn("trying to access a closed pipe");const t=qr("b[8] u16 u16",[Dn(this.bus.selfDeviceId),this._port,0]);return hs.from(e,t)}_handlePacket(e){e.isPipe&&e.pipePort===this._port&&(31&e.serviceCommand)==(31&this._count)&&(this._count++,this.emit("data",e),32&e.serviceCommand&&this.close())}close(){null!=this._port&&(this.emit("close"),this._port=null,this.bus.selfDevice.port(this._port).localPipe=void 0,this.unmount())}}class Ds extends Ms{constructor(e){super(e),this.done=Qn(),this.meta=[],this.output=[],this.mount(this.subscribe("data",(e=>{64&e.serviceCommand?this.meta.push(e):this.output.push(e)}))),this.mount(this.subscribe("close",this.done.signal))}async readData(e=500){return(await this.readAll(e)).output.map((e=>e.data)).filter((e=>!!(null==e?void 0:e.length)))}async readAll(e=500){if(!await this.bus.withTimeout(e,this.done.signalled))throw new Error("Timeout reading pipe: "+e+"ms");return{meta:this.meta,output:this.output}}}class Ls extends ws{constructor(e,t){super(),this._reports=[],this._specification=null,this.registersUseAcks=!1,this._clients=[],this.device=e,this.serviceIndex=t,this.serviceClass=this.device.serviceClassAt(this.serviceIndex);const i=this.event(s.BaseEvent.StatusCodeChanged);i.on("change",(()=>{const{data:e}=i;console.debug(`${this}: status code changed event`,{data:e});const t=this.register(s.BaseReg.StatusCode);null==t||t.clearGetTimestamp()}))}get id(){return`${this.nodeKind}:${this.device.deviceId}:${this.serviceIndex.toString(16)}`}get nodeKind(){return"service"}get name(){var e;return null===(e=os(this.serviceClass))||void 0===e?void 0:e.toLowerCase()}get friendlyName(){const e=[this.device.friendlyName];return this.device.services({serviceClass:this.serviceClass}).length>1&&e.push(`[${this.serviceIndex.toString(16)}]`),e.join(".")}get qualifiedName(){return`${this.device.qualifiedName}[${this.serviceIndex.toString(16)}]`}get parent(){return this.device}get role(){return this._role}set role(e){e!==this._role&&(this._role=e,this.emit("roleChange"),this.emit("change"))}report(e){return this._reports.find((t=>t.registerIdentifier===e))}get reports(){return this._reports.slice(0)}get mixins(){const e=[],{serviceClasses:t,serviceLength:i}=this.device;for(let n=this.serviceIndex+1;n<i&&Li(t[n]);++n)e.push(this.device.service(n));return e}get isMixin(){return Li(this.serviceClass)}get twin(){return this._twin}set twin(e){this._twin!==e&&(this._twin&&(this._twin.twin=void 0),this._twin=e,e.twin=this,this.emit("change"))}get readingRegister(){var e;if(!this._readingRegister){const t=null===(e=this.specification)||void 0===e?void 0:e.packets.find((e=>Rr(e)));this._readingRegister=t&&this.register(t.identifier)}return this._readingRegister}get valueRegister(){var e;if(!this._valueRegister){const t=null===(e=this.specification)||void 0===e?void 0:e.packets.find((e=>xr(e)));this._valueRegister=t&&this.register(t.identifier)}return this._valueRegister}get intensityRegister(){var e;if(!this._intensityRegister){const t=null===(e=this.specification)||void 0===e?void 0:e.packets.find((e=>Nr(e)));this._intensityRegister=t&&this.register(t.identifier)}return this._intensityRegister}get statusCodeRegister(){var e;if(!this._statusCodeRegister){const t=null===(e=this.specification)||void 0===e?void 0:e.packets.find((e=>e.identifier===s.SystemReg.StatusCode));this._statusCodeRegister=t&&this.register(t.identifier)}return this._statusCodeRegister}get instanceName(){const e=this.register(s.SystemReg.InstanceName);return null==e?void 0:e.stringValue}async resolveInstanceName(){const e=this.register(s.SystemReg.InstanceName);return await(null==e?void 0:e.refresh()),null==e?void 0:e.stringValue}get specification(){return null===this._specification&&(this._specification=wr(this.serviceClass)),this._specification}get events(){var e;return(null===(e=this.specification)||void 0===e?void 0:e.packets.filter(Pr).map((e=>this.event(e.identifier))))||[]}registers(){if(!this._registers){const e=this.specification;this._registers=((null==e?void 0:e.packets)||[]).filter(Tr).map((e=>new Cs(this,e.identifier)))}return this._registers.slice(0)}get children(){return[...this.registers(),...this.events]}register(e){if(isNaN(e))return;this.registers();let t=this._registers.find((t=>t.code===e));if(!t){const i=this.specification;if(i&&!i.packets.some((t=>Tr(t)&&t.identifier===e)))return void(fn.diagnostics&&!Ar(e)&&console.debug(`attempting to access register ${s.SystemReg[e]||`0x${e.toString(16)}`}`));this._registers.push(t=new Cs(this,e))}return t}event(e){if(isNaN(e))return;this._events||(this._events=[]);let t=this._events.find((t=>t.code===e));if(!t){const i=this.specification;if(i&&!i.packets.some((t=>Pr(t)&&t.identifier===e)))return void(fn.diagnostics&&console.debug(`attempting to access event ${s.SystemEvent[e]||`0x${e.toString(16)}`}`));this._events.push(t=new Is(this,e))}return t}async sendPacketAsync(e,t){e.device=this.device,e.serviceIndex=this.serviceIndex,void 0!==t&&(e.requiresAck=!!t),e.requiresAck?await this.device.sendPktWithAck(e):await e.sendCmdAsync(this.device),this.emit("packetSend",e),!e.isCommand||e.isRegisterGet||e.isRegisterSet||this.invalidateRegisterValues(e)}sendCmdAsync(e,t,i){const n=t?hs.from(e,t):hs.onlyHeader(e);return this.sendPacketAsync(n,i)}sendCmdPackedAsync(e,t,i){const n=this.specification.packets.find((t=>"command"===t.kind&&t.identifier===e)),r=null==n?void 0:n.packFormat;if(!r)throw new Error("Unknown packing format");const s=t?qr(r,t):void 0;return this.sendCmdAsync(e,s,i)}sendCmdAwaitResponseAsync(e,t=500){const{bus:i}=this.device;return new Promise(((n,r)=>{const s=t=>{t.serviceCommand==e.serviceCommand&&(this.off("reportReceive",s),n&&n(t),n=null)};i.delay(t).then((()=>{n&&(n=null,this.off("reportReceive",s),r(new Error(`timeout (${t}ms) waiting for response to ${e}`)))})),this.sendPacketAsync(e).then((()=>{this.on("reportReceive",s)}))}))}processPacket(e){if(this.emit("packetReceive",e),e.isReport)if(this.emit("reportReceive",e),e.isRegisterGet){const t=e.registerIdentifier,i=this.register(t);i&&i.processPacket(e)}else if(e.isEvent){const t=this.event(e.eventCode);t&&t.processEvent(e)}else e.isCommand&&console.log("cmd report",{pkt:e});else if(e.isRegisterSet){const t=e.registerIdentifier,i=this.register(t);i&&i.processPacket(e)}else e.isCommand&&this.invalidateRegisterValues(e)}invalidateRegisterValues(e){this.registers().filter((e=>e.specification&&!Fr(e.specification))).forEach((e=>e.clearGetTimestamp()))}compareTo(e){return this.serviceClass-e.serviceClass||bn(this.device.deviceId,e.device.deviceId)||this.serviceIndex-e.serviceIndex}get clients(){var e;return(null===(e=this._clients)||void 0===e?void 0:e.slice(0))||[]}addClient(e){e&&this._clients.indexOf(e)<0&&(this._clients.push(e),this.emit("serviceClientAdded",e))}removeClient(e){const t=this._clients.indexOf(e);t>-1&&(this._clients.splice(t,1),this.emit("serviceClientRemoved",e))}async receiveWithInPipe(e,t,i){const n=new Ds(this.device.bus);await this.sendPacketAsync(n.openCommand(e),!0);const r=[];for(const e of await n.readData(i)){const i=Hr(e,t);r.push(i)}return r}}function Bs(e){return[e>>16&255,e>>8&255,255&e,e>>24&255]}class Vs extends bs{constructor(e,t){super(),this.service=e,this.command=t}async blink(e,t,i,n){const r=qr("u8 u8 u8 u8",Bs(e)),s=qr("u8 u8 u8 u8",Bs(t)),{bus:a}=this.service.device;for(let e=0;e<n;++e)await this.service.sendCmdAsync(this.command,r),await a.delay(i-1),await this.service.sendCmdAsync(this.command,s),await a.delay(i-1)}}class Os extends bs{constructor(){super(),this._receivedPackets=0,this._restarts=0,this._announce=0,this._data=Array(60).fill(0).map((()=>({received:0,total:0,restarts:0}))),this._dataIndex=0}get announce(){return this._announce}get dropped(){return this._data.filter((e=>!!e.total)).reduce(((e,t)=>e+(t.total-t.received)),0)/this._data.length||0}get restarts(){return this._data.reduce(((e,t)=>e+t.restarts),0)}get current(){const{dropped:e,restarts:t,announce:i}=this;return{dropped:e,restarts:t,announce:i}}processAnnouncement(e){this._announce++;const{current:t}=this,i=this._receivedPackets,n=e.data[2],r=this._restarts;this._data[this._dataIndex]={received:i,total:n,restarts:r},this._dataIndex=(this._dataIndex+1)%this._data.length,this._receivedPackets=0,this._restarts=0;const{current:s}=this;t.dropped===s.dropped&&t.restarts===s.restarts||this.emit("change")}processPacket(e){this._receivedPackets++}processRestart(){this._restarts++,this._announce=0}}class Us extends ws{constructor(e,t,i){super(),this._flashing=!1,this.stats=new Os,this.bus=e,this.deviceId=t,this.connected=!0,this._lost=!1,this._identifying=!1,this._source=null==i?void 0:i.sender,this._replay=!!(null==i?void 0:i.replay)}get anonymizedDeviceId(){return this._anonymizedId||(this._anonymizedId=xs()),this._anonymizedId}describe(){const e=[K,je];return this.toString()+(this.isPhysical?"":" (sim)")+": "+this.services().filter((t=>e.indexOf(t.serviceClass)<0)).map((e=>{var t;return e.instanceName||(null===(t=e.specification)||void 0===t?void 0:t.camelName)||e.serviceClass.toString(16)})).join(", ")}get id(){return`${this.nodeKind}:${this.deviceId}`}get name(){return this.shortId}get nodeKind(){return"device"}get isPhysical(){return"usb"===this._source||"bluetooth"===this._source||"serial"===this._source||"packetio"===this._source||"web"===this._source}get source(){return this._source}get replay(){return this._replay}get friendlyName(){return this.shortId}get qualifiedName(){return this.shortId}get announced(){var e;return!!(null===(e=this._servicesData)||void 0===e?void 0:e.length)}get announceFlags(){return this._servicesData?zn(this._servicesData,0):0}get restartCounter(){return this.announceFlags&s.ControlAnnounceFlags.RestartCounterSteady}get statusLightFlags(){return this.announceFlags&s.ControlAnnounceFlags.StatusLightRgbFade}get isClient(){return!!(this.announceFlags&s.ControlAnnounceFlags.IsClient)}get packetCount(){var e;return(null===(e=this._servicesData)||void 0===e?void 0:e[2])||0}get shortId(){return this._shortId||(this._shortId=Zr(this.deviceId)),this._shortId}get parent(){return this.bus}get firmwareInfo(){var e,t,i;const n=this.service(0),r=this.deviceId,a=null===(e=null==n?void 0:n.register(s.ControlReg.DeviceDescription))||void 0===e?void 0:e.stringValue,o=this.firmwareVersion,d=null===(t=null==n?void 0:n.register(s.ControlReg.ProductIdentifier))||void 0===t?void 0:t.uintValue,c=null===(i=null==n?void 0:n.register(s.ControlReg.BootloaderProductIdentifier))||void 0===i?void 0:i.uintValue;return o&&(void 0!==d||void 0!==c)?{deviceId:r,name:a,version:o,productIdentifier:d,bootloaderProductIdentifier:c}:void 0}refreshFirmwareInfo(){var e;const t=null===(e=this._services)||void 0===e?void 0:e[0];[(s.ControlReg.ProductIdentifier,s.ControlReg.FirmwareVersion,s.ControlReg.BootloaderProductIdentifier)].forEach((e=>t.register(e).once("reportUpdate",(()=>{this.emitPropagated("firmwareInfo"),this.emitPropagated("change")}))))}get lost(){return this._lost}set lost(e){!!e!==this._lost&&(this._lost=!!e,this.lost?(this.emit("lost"),this.bus.emit("deviceLost",this)):(this.emit("found"),this.bus.emit("deviceFound",this)),this.emit("change"),this.bus.emit("deviceChange",this),this.bus.emit("change"))}get flashing(){return this._flashing}set flashing(e){e!==this._flashing&&(this._flashing=e,this.emit("change"),this.bus.emit("deviceChange",this),this.bus.emit("change"),this._flashing&&this.bus.sendStopStreaming())}get eventCounter(){return this._eventCounter}set eventCounter(e){this._eventCounter=e}hasService(e){if(!this.announced)return!1;if(0===e)return!0;for(let t=4;t<this._servicesData.length;t+=4){if(_r(dr(this._servicesData,s.NumberFormat.UInt32LE,t),e))return!0}return!1}port(e){this._ports||(this._ports={});const t=e+"",i=this._ports[t];return i||(this._ports[t]={})}get serviceLength(){return this.announced?this._servicesData.length>>2:0}serviceClassAt(e){return 0==e?0:(e<<=2,!this.announced||e+4>this._servicesData.length?void 0:jn(this._servicesData,e))}get serviceClasses(){const e=[],t=this.serviceLength;for(let i=0;i<t;++i)e.push(this.serviceClassAt(i));return e}initServices(e){if(e&&(this._services=void 0),!this._services&&this._servicesData){this._statusLight=void 0;const e=this.serviceLength,t=[];for(let i=0;i<e;++i)t.push(new Ls(this,i));this._services=t,this.lastServiceUpdate=this.bus.timestamp,this.refreshFirmwareInfo()}}service(e){if(this.announced)return this.initServices(),e|=0,this._services&&this._services[e]}services(e){var t;if(!this.announced)return[];if((null==e?void 0:e.serviceIndex)>=0)return[this.service(null==e?void 0:e.serviceIndex)];if((null==e?void 0:e.serviceName)&&(null==e?void 0:e.serviceClass)>-1)throw Error("serviceClass and serviceName cannot be used together");let i=as(null==e?void 0:e.serviceName);(void 0===i||i<0)&&(i=null==e?void 0:e.serviceClass),void 0===i&&(i=-1),this.initServices();let n=(null===(t=this._services)||void 0===t?void 0:t.slice())||[];i>-1&&(n=n.filter((e=>e.serviceClass==i))),(null==e?void 0:e.specification)&&(n=n.filter((e=>!!e.specification)));const r=null==e?void 0:e.mixins;return void 0!==r&&(n=n.filter((e=>e.isMixin===r))),n}get children(){return this.services()}sendCtrlCommand(e,t=null){const i=t?hs.from(e,t):hs.onlyHeader(e);return i.serviceIndex=0,i.sendCmdAsync(this)}processAnnouncement(e){this.stats.processAnnouncement(e);let t=!1;const i=this._servicesData?dr(this._servicesData,s.NumberFormat.UInt32LE,0):0,n=dr(e.data,s.NumberFormat.UInt32LE,0),r=!kn(e.data,this._servicesData,4);this._servicesData=e.data,n&&(15&n)<(15&i)&&(this.stats.processRestart(),this.initServices(!0),this.bus.emit("deviceRestart",this),this.emit("restart"),t=!0),r&&(t||this.initServices(!0),this.bus.emit("deviceAnnounce",this),this.emit("announce"),t=!0),this.bus.emit("devicePacketAnnounce",this),this.emit("packetAnnounce"),t&&(this.bus.emit("deviceChange",this),this.bus.emit("change"),this.emit("change"))}processPacket(e){this.stats.processPacket(e),this.lost=!1,this.emit("packetReceive",e),e.isReport?this.emit("packetReport",e):e.isEvent&&this.emit("packetEvent",e);const t=this.service(e.serviceIndex);t&&t.processPacket(e)}disconnect(){this.connected=!1,this.emit("disconnect"),this.emit("change")}get statusLight(){return this._statusLight||this.statusLightFlags===s.ControlAnnounceFlags.StatusLightNone||(this._statusLight=new Vs(this.service(0),s.ControlCmd.SetStatusLight)),this._statusLight}async identify(){if(!this._identifying)try{this._identifying=!0,this.emit("change");const e=this.statusLight;if(e)await e.blink(255,0,262,4);else{const e=this.service(0);await e.sendCmdAsync(s.ControlCmd.Identify,void 0,!1),await this.bus.delay(2e3)}}catch(e){this.emit("error",e)}finally{this._identifying=!1,this.emit("change")}}get identifying(){return this._identifying}reset(){var e;return null===(e=this.service(0))||void 0===e?void 0:e.sendCmdAsync(s.ControlCmd.Reset)}async resolveProductIdentifier(e=0){var t;const i=null===(t=this.service(0))||void 0===t?void 0:t.register(s.ControlReg.ProductIdentifier);if(i){for(;e-- >=0&&void 0===i.data;)await i.refresh(!0);return i.uintValue}}get productIdentifier(){var e;const t=null===(e=this.service(0))||void 0===e?void 0:e.register(s.ControlReg.ProductIdentifier),i=null==t?void 0:t.uintValue;return t&&void 0===i&&(null==t||t.refresh(!0)),i}get uptime(){var e,t;const i=null===(e=this.service(0))||void 0===e?void 0:e.register(s.ControlReg.Uptime),n=null===(t=null==i?void 0:i.unpackedValue)||void 0===t?void 0:t[0];let r;return i&&void 0===n&&(null==i||i.refresh(!0)),void 0!==n&&(r=n/1e3+this.bus.timestamp-i.lastDataTimestamp),r}get firmwareVersion(){var e;const t=null===(e=this.service(0))||void 0===e?void 0:e.register(s.ControlReg.FirmwareVersion),i=null==t?void 0:t.stringValue;return t&&void 0===i&&(null==t||t.refresh(!0)),i}initAcks(){if(this._ackAwaiting)return;let e=0,t=0;this._ackAwaiting=[];const i=this.subscribe("packetReport",(e=>{if(63!=e.serviceIndex)return;let t=0;for(const i of this._ackAwaiting)i.pkt&&i.pkt.crc==e.serviceCommand&&(i.pkt=null,t++,i.okCb());t&&(this._ackAwaiting=this._ackAwaiting.filter((e=>!!e.pkt)))})),n=()=>{let r=0;for(const i of this._ackAwaiting)i.pkt&&(--i.retriesLeft<0?(e++,i.pkt.meta.ACK_FAILED=!0,i.pkt=null,i.errCb(),r++,fn.diagnostics&&console.debug(`ack: ${this.shortId} drop ${i.pkt} (${e} drops, ${t} resends)`)):(t++,i.pkt.sendCmdAsync(this),fn.diagnostics&&console.debug(`ack: ${this.shortId} resend ${i.pkt} (${e} drops, ${t} resends)`)));r&&(this._ackAwaiting=this._ackAwaiting.filter((e=>!!e.pkt))),fn.diagnostics&&console.debug(`ack: ${this.shortId} awaits ${this._ackAwaiting.length}`),this._ackAwaiting.length>0?this.bus.scheduler.setTimeout(n,30*Math.random()+90):(this._ackAwaiting=void 0,i())};this.bus.scheduler.setTimeout(n,40)}sendPktWithAck(e){return e.requiresAck=!this.bus.passive,this.initAcks(),new Promise(((t,i)=>{const n={pkt:e,retriesLeft:4,okCb:t,errCb:()=>{const t=new Error("No ACK for "+e.toString());vn(t),i(t)}};this._ackAwaiting.push(n),e.sendCmdAsync(this)}))}async floodPing(e=100,t=32){const i=hs.jdpacked(s.ControlCmd.FloodPing,"u32 u32 u8",[e,4096,t]);i.serviceIndex=0,await this.sendPktWithAck(i)}}class js{constructor(){this._now="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),this._startTime=this._now()}get timestamp(){return this._now()-this._startTime}resetTime(e=0){this._startTime=this._now()-e}setTimeout(e,t,...i){return setTimeout(e,t,i)}clearTimeout(e){clearTimeout(e)}setInterval(e,t,...i){return setInterval(e,t,i)}clearInterval(e){clearInterval(e)}}let zs=0;const $s={version:-10471356,name:-6622621,pageSize:780791,productIdentifier:13149993};function Ws(e){console.log(`BL [${zs||(zs=Date.now()),Date.now()-zs}ms]: ${e}`)}class Hs{constructor(e,t){this.bus=e;const i=pr(t.data,s.NumberFormat.UInt32LE);this.pageSize=i[1],this.flashSize=i[2],this.dev_class=i[3],this.device=t.device,this.handlePacket=this.handlePacket.bind(this)}handlePacket(e){e.serviceCommand==s.BootloaderCmd.PageData&&(this.lastStatus=e)}start(){this.device.on("packetReport",this.handlePacket)}stop(){this.device.off("packetReport",this.handlePacket)}async sendCommandAsync(e){e.serviceIndex=1,await e.sendCmdAsync(this.device)}async startFlashAsync(){this.sessionId=268435456*Math.random()|0;for(const e of this.classClients)e.start(),Ws(`flashing ${e.device.shortId}; available flash=${e.flashSize/1024}kb; page=${e.pageSize}b`);const e=hs.jdpacked(s.BootloaderCmd.SetSession,"u32",[this.sessionId]);this.allPending();for(let t=0;t<15;++t){for(const t of this.classClients)t.pending&&(t.lastStatus&&t.lastStatus.getNumber(s.NumberFormat.UInt32LE,0)==this.sessionId?t.pending=!1:(t.lastStatus=null,Ws(`set session ${this.sessionId} on ${t.device}`),await t.sendCommandAsync(e)),await this.bus.delay(5));if(0==this.numPending())break;await this.waitForStatusAsync()}if(this.numPending())throw new Error("Can't set session id")}async endFlashAsync(){for(const e of this.classClients)await this.bus.delay(10),await e.device.sendCtrlCommand(s.ControlCmd.Reset)}allPending(){for(const e of this.classClients)e.pending=!0,e.lastStatus=null}numPending(){let e=0;for(const t of this.classClients)t.pending&&e++;return e}async waitForStatusAsync(){for(let e=0;e<100&&!this.classClients.every((e=>null!=e.lastStatus));++e)await this.bus.delay(5)}async flashPage(e){const t=e.targetAddress,i=this.pageSize,n=(i+208-1)/208|0;if(Ws(`flash ${Xr(this.pageSize)} at ${(16777215&t).toString(16)}`),e.data.length!=this.pageSize)throw new Error("invalid page size");for(const e of this.classClients)e.lastStatus=null;this.allPending();for(let r=0;r<15;++r){Ws(`  attempt ${r}`);let a=0;for(let o=0;o<i;o+=208){let d=208;o+d>i&&(d=i-o),Ws(`send sub page ${a}/${n-1} at ${o.toString(16)}[${d}]`);const c=qr("u32 u16 u8 u8 u32 u32 u32 u32 u32",[t,o,a++,n-1,this.sessionId,0,0,0,0]);Kn(28==c.length);const l=hs.from(s.BootloaderCmd.PageData,qn(c,e.data.slice(o,o+d)));if(0==r||a<n)await l.sendAsMultiCommandAsync(this.bus,x);else for(const e of this.classClients)e.pending&&(e.lastStatus=null,await e.sendCommandAsync(l));await this.bus.delay(5)}await this.waitForStatusAsync();for(const e of this.classClients)if(e.pending){let i="";if(e.lastStatus){const[n,r,a]=Hr(e.lastStatus.data,"u32 u32 u32");n!=this.sessionId?i="invalid session_id":a!=t?i="invalid page address":r&&(i="err: "+(s.BootloaderError[r]||r))}else i="timeout";i?(e.lastStatus=null,Ws(`retry ${e.device}: ${i}`)):e.pending=!1}if(0==this.numPending())return void Ws(`page ${16777215&t} done, ${r}/15 retries`)}throw new Error("too many retries")}async flashFirmwareBlob(e,t){const i=e.pages.length+15+3;let n=0;const r=()=>{t&&t(100*n/i),n++};try{r(),await this.startFlashAsync(),r();for(const t of e.pages)await this.flashPage(t),r()}finally{try{await this.endFlashAsync(),r();for(let e=0;e<15;++e)await this.bus.delay(150),r()}finally{for(const e of this.classClients)e.stop()}}}}function Js(e,t){const i=[];let n;for(let i=0;i<e.length;i+=512){const o=e.slice(i,i+32),[d,c,l,u,p,m,h,f]=pr(o,s.NumberFormat.UInt32LE);if(171066965!=d||2656915799!=c||179400496!=dr(e,s.NumberFormat.UInt32LE,i+512-4))throw new Error("invalid UF2");0==m&&(r(),n={pages:[],productIdentifier:f,version:"",pageSize:1024,name:"FW "+f.toString(16),store:t}),32768&l&&a(e.slice(i+32+p,i+512));const g=n.pageSize||1024;let v=n.pages[n.pages.length-1];v&&v.targetAddress<=u&&u<v.targetAddress+g||(v={targetAddress:u&~(g-1),data:new Uint8Array(g)},v.data.fill(255),n.pages.push(v)),v.data.set(e.slice(i+32,i+32+p),u-v.targetAddress)}function r(){n&&i.push(n)}function a(e){let t=0;for(let i=0;i<e.length&&(t=e[i],0!=t);i+=t){const r=dr(e,s.NumberFormat.UInt32LE,i)>>>8;for(const a of Object.keys($s)){const o=$s[a];if(r==Math.abs(o)){let r;r=o<0?Hn(e.slice(i+4,i+t)):dr(e,s.NumberFormat.UInt32LE,i+4);n[a]=r;break}}t=t+3&-4}}return r(),i}async function qs(e){const t=hs.onlyHeader(s.BootloaderCmd.Info);await t.sendAsMultiCommandAsync(e,x)}function Gs(e){let t;switch(e.type){case"bool":t=0;break;case"i8":case"i16":case"i32":case"u8":case"u16":case"u32":{const i=rr(e.typicalMin,e.absoluteMin,void 0),n=rr(e.typicalMax,e.absoluteMax,void 0);t=void 0!==n&&void 0!==i?(n+i)/2:0;break}case"bytes":t=new Uint8Array(0);break;case"string":case"string0":t=""}return/^(u0|i1)\.\d+$/.test(e.type)&&(t=0),t}class Ks extends bs{constructor(e,t,i){var n,r;super(),this.service=e,this.identifier=t,this.skipBoundaryCheck=!1,this.skipErrorInjection=!1;const s=this.service.specification;this.specification=s.packets.find((e=>Tr(e)&&e.identifier===this.identifier));let a=i;a||this.specification.optional||(a=function(e){const{fields:t}=e;return t.map(Gs)}(this.specification)),void 0===a||a.some((e=>void 0===e))||(this.data=qr(this.packFormat,a)),this.resetData=null===(n=this.data)||void 0===n?void 0:n.slice(0),this.skipBoundaryCheck=!(null===(r=this.specification)||void 0===r?void 0:r.fields.some((e=>Ln(e.absoluteMin)||Ln(e.absoluteMax))))}get packFormat(){return this.specification.packFormat}values(){return Hr(this.data,this.packFormat)}normalize(e){var t;this.skipBoundaryCheck||null===(t=this.specification)||void 0===t||t.fields.forEach(((t,i)=>{if(t.isSimpleType){let n=e[i];const r=t.absoluteMin;void 0!==r&&(n=Math.max(r,n));const s=t.absoluteMax;void 0!==s&&(n=Math.min(s,n)),e[i]=n}})),this.emit("packetDataNormalize",e)}shouldNormalize(){return!this.skipBoundaryCheck||this.listenerCount("packetDataNormalize")}setValues(e,t){if(this.readOnly)return;this.shouldNormalize()&&this.normalize(e);const i=qr(this.packFormat,e);kn(this.data,i)||(this.data=i,t||this.emit("change"))}reset(){var e;this.data=null===(e=this.resetData)||void 0===e?void 0:e.slice(0)}async sendGetAsync(){var e;this.emit("registerPreGet");let t=this.data;if(!t)return;const i=!this.skipErrorInjection&&(null===(e=this.errorRegister)||void 0===e?void 0:e.values()[0]);if(i&&!isNaN(i)){const e=this.values();for(let t=0;t<e.length;++t)e[t]+=Math.random()*i;t=qr(this.packFormat,e)}await this.service.sendPacketAsync(hs.from(4096|this.identifier,t))}handlePacket(e){if(this.identifier!==e.registerIdentifier)return!1;if(e.isRegisterGet)this.sendGetAsync();else if(this.identifier>>8!=1){let t=!1,i=e.data;if(this.shouldNormalize())try{const e=Hr(i,this.packFormat);this.normalize(e),i=qr(this.packFormat,e)}catch(t){this.emit("packetInvalidData",e)}kn(this.data,i)||(this.data=i,t=!0),this.lastSetTime=this.service.timestamp,this.emit("reportReceive"),t&&this.emit("change")}return!0}}class Xs extends bs{constructor(e,t){super(),this.serviceClass=e,this.serviceIndex=-1,this._registers=[],this.commands={},this._locked=!1;const{instanceName:i,variant:n,valueValues:r,intensityValues:a,registerValues:o,isActive:d}=t||{};if(this.specification=wr(this.serviceClass),this.statusCode=this.addRegister(s.SystemReg.StatusCode,[s.SystemStatusCodes.Ready,0]),r&&this.addRegister(s.SystemReg.Value,r),a){const e=this.addRegister(s.SystemReg.Intensity,a);d&&e.on("change",(()=>{void 0!==d(e.values())&&this.sendEvent(d(e.values())?s.SystemEvent.Active:s.SystemEvent.Inactive)}))}n&&this.addRegister(s.SystemReg.Variant,[n]),this.instanceName=this.addRegister(s.SystemReg.InstanceName,[i||""]),null==o||o.forEach((({code:e,values:t})=>this.addRegister(e,t))),this.statusCode.on("change",(()=>this.sendEvent(s.BaseEvent.StatusCodeChanged,this.statusCode.data))),this.specification.packets.find((e=>"command"===e.kind&&e.identifier===s.SystemCmd.Calibrate))&&(this.addCommand(s.SystemCmd.Calibrate,this.handleCalibrate.bind(this)),this.statusCode.setValues([s.SystemStatusCodes.CalibrationNeeded,0],!0)),this.handleTwinPacket=this.handleTwinPacket.bind(this)}get device(){return this._device}set device(e){this._device!==e&&(this._device=e,this.emit("deviceChange"),this.emit("change"))}get twin(){return this._twin}set twin(e){e!==this._twin&&(this._twin&&(this._twin.off("packetReceive",this.handleTwinPacket),this._twin.off("packetSend",this.handleTwinPacket),this._twinCleanup.forEach((e=>e()))),this._twin=e,this._twinCleanup=e?[]:void 0,this._twin&&(this._twin.on("packetReceive",this.handleTwinPacket),this._twin.on("packetSend",this.handleTwinPacket),this._twin.registers().forEach((e=>{const t=this.register(e.code);t&&(null==t||t.setValues(e.unpackedValue),this._twinCleanup.push(e.subscribe("reportUpdate",(()=>t.setValues(e.unpackedValue)))))}))),this.emit("change"))}handleTwinPacket(e){this.handlePacket(e)}get registers(){return this._registers.slice(0)}get timestamp(){var e,t,i;const n=(null===(e=this.device)||void 0===e?void 0:e.bus)||(null===(i=null===(t=this._twin)||void 0===t?void 0:t.device)||void 0===i?void 0:i.bus);return null==n?void 0:n.timestamp}register(e){return this._registers.find((t=>t.identifier===e))}addExistingRegister(e){return this._registers.push(e),e}addRegister(e,t){let i=this._registers.find((t=>t.identifier===e));if(!i&&!this._locked){if(!this.specification.packets.find((t=>Tr(t)&&t.identifier===e)))return;i=new Ks(this,e,t),this._registers.push(i)}return i}reset(){this.registers.forEach((e=>e.reset()))}lock(){this._locked=!0}addCommand(e,t){this._locked&&console.error("adding command to locked service"),this.commands[e]=t}async handlePacket(e){if(e.isRegisterGet||e.isRegisterSet){const t=e.registerIdentifier;let i=this._registers.find((e=>e.identifier===t));i||(i=this.addRegister(t)),null==i||i.handlePacket(e)}else if(e.isCommand){const t=this.commands[e.serviceCommand];t?t(e):void 0===t&&console.log("ignored command",{pkt:e})}}async sendPacketAsync(e){this.twin||(e.serviceIndex=this.serviceIndex,await this.device.sendPacketAsync(e))}async sendEvent(e,t){if(this.twin)return;const{device:i}=this,{bus:n}=i;if(!n)return;const r=n.timestamp,s=i.createEventCmd(e),a=hs.from(s,t||new Uint8Array(0));await this.sendPacketAsync(a),i.delayedSend(a,r+20),i.delayedSend(a,r+100)}async handleCalibrate(){const[e]=this.statusCode.values();e===s.SystemStatusCodes.Ready&&this.calibrate()}async calibrate(){this.statusCode.setValues([s.SystemStatusCodes.Calibrating,0]),await this.device.bus.delay(5e3),this.statusCode.setValues([s.SystemStatusCodes.Ready,0])}}class Ys extends Xs{constructor(e,t){super(e,t),this.serviceClass=e,this.lastStream=0,this.lastErrorReadingChanged=!1;const{readingValues:i,streamingInterval:n,preferredStreamingInterval:r,readingError:a}=t||{};this.reading=this.addRegister(s.SystemReg.Reading,i),this.streamingSamples=this.addRegister(s.SensorReg.StreamingSamples),this.streamingInterval=this.addRegister(s.SensorReg.StreamingInterval,[n||r||this.reading.specification.preferredInterval||50]),void 0!==r&&(this.preferredStreamingInterval=this.addRegister(s.SensorReg.StreamingPreferredInterval,[r])),void 0!==a&&(this.readingError=this.addRegister(s.SystemReg.ReadingError,a),this.reading.errorRegister=this.readingError,this.readingError.on("change",(()=>this.lastErrorReadingChanged=!0))),this.on("refresh",this.refreshRegisters.bind(this))}refreshRegisters(){var e,t,i,n,r;const[s]=this.streamingSamples.values();if(s<=0||!this.reading.data)return;let a=null===(t=null===(e=this.streamingInterval)||void 0===e?void 0:e.values())||void 0===t?void 0:t[0];void 0===a&&(a=null===(n=null===(i=this.preferredStreamingInterval)||void 0===i?void 0:i.values())||void 0===n?void 0:n[0]),void 0===a&&(a=this.reading.specification.preferredInterval),void 0===a&&(a=50);const o=this.device.bus.timestamp;o-this.lastStream>a&&(this.lastStream=o,this.streamingSamples.setValues([s-1]),this.reading.sendGetAsync(),this.emit("readingSent"),this.lastErrorReadingChanged&&(null===(r=this.readingError)||void 0===r||r.sendGetAsync(),this.lastErrorReadingChanged=!1))}}function Qs(e){return[e.getFullYear(),e.getMonth()+1,e.getDate(),e.getDay(),e.getHours(),e.getMinutes(),e.getSeconds()]}class Zs extends Ys{constructor(){super(445323816,{readingValues:Qs(new Date),variant:s.RealTimeClockVariant.Computer,streamingInterval:1e3}),this.lastSecond=0,this.error=this.addRegister(s.RealTimeClockReg.Error,[0]),this.precision=this.addRegister(s.RealTimeClockReg.Precision,[0]),this.addCommand(s.RealTimeClockCmd.SetTime,this.handleSetTime.bind(this)),this.on("refresh",this.refreshTime.bind(this))}static async syncTime(e){const t=Qs(new Date),i=hs.jdpacked(s.RealTimeClockCmd.SetTime,"u16 u8 u8 u8 u8 u8 u8",t);await i.sendAsMultiCommandAsync(e,445323816)}handleSetTime(e){console.log("set time",{pkt:e})}refreshTime(){const e=new Date,t=e.getSeconds();if(t!==this.lastSecond){const i=Qs(e);this.reading.setValues(i),this.lastSecond=t}}}var ea;s.ConnectionState=void 0,(ea=s.ConnectionState||(s.ConnectionState={})).Connected="connected",ea.Connecting="connecting",ea.Disconnecting="disconnecting",ea.Disconnected="disconnected";class ta extends bs{constructor(e,t){var i,n,r,a;super(),this.type=e,this.disposed=!1,this._connectionState=s.ConnectionState.Disconnected,this._checkPulse=!!(null==t?void 0:t.checkPulse),this._cleanups=[null===(n=null===(i=null==t?void 0:t.connectObservable)||void 0===i?void 0:i.subscribe({next:async()=>{var e,t;(null===(e=this.bus)||void 0===e?void 0:e.disconnected)&&(await yn(500),(null===(t=this.bus)||void 0===t?void 0:t.disconnected)&&"undefined"!=typeof document&&"visible"===document.visibilityState&&this.connect(!0))}}))||void 0===n?void 0:n.unsubscribe,null===(a=null===(r=null==t?void 0:t.disconnectObservable)||void 0===r?void 0:r.subscribe({next:()=>{this.disconnect()}}))||void 0===a?void 0:a.unsubscribe].filter((e=>!!e))}get bus(){return this._bus}set bus(e){Kn(!this._bus&&!!e),this._bus=e,this._checkPulse&&this._bus.on("selfAnnounce",this.checkPulse.bind(this))}get connectionState(){return this._connectionState}setConnectionState(e){if(this._connectionState!==e){switch(this._connectionState=e,this._connectionTime=e===s.ConnectionState.Connected?this.bus.timestamp:void 0,this._lastReceivedTime=void 0,this.emit("connectionState",this._connectionState),this.bus.emit("connectionState",this),this._connectionState){case s.ConnectionState.Connected:this.emit("connect");break;case s.ConnectionState.Connecting:this.emit("connecting");break;case s.ConnectionState.Disconnecting:this.emit("disconnecting");break;case s.ConnectionState.Disconnected:this.emit("disconnect")}this.emit("change"),this.bus.emit("change")}}get connecting(){return this.connectionState==s.ConnectionState.Connecting}get disconnecting(){return this.connectionState==s.ConnectionState.Disconnecting}get connected(){return this._connectionState==s.ConnectionState.Connected}get disconnected(){return this._connectionState==s.ConnectionState.Disconnected}async checkPulse(){if(Kn(this._checkPulse),!this.connected)return;if(this.bus.safeBoot)return;if(this.bus.devices().some((e=>e.flashing)))return;this.bus.timestamp-(this._lastReceivedTime||this._connectionTime)>6e4&&(this.emit("lost"),console.debug(`${this.type}: lost connection with device`),void 0!==this._lastReceivedTime?await this.reconnect():await this.disconnect(!0))}async sendPacketAsync(e){this.connected?await this.transportSendPacketAsync(e):this.emit("packetSendDisconnect",e)}connect(e){if(console.debug(`${this.type}: connect ${e?"(background)":""}`),this.disposed)throw new Error("attempted to connect to a disposed transport");if(this.connectionState==s.ConnectionState.Connected)return console.debug(`${this.type}: already connected`),Promise.resolve();if(this._connectPromise)console.debug(`${this.type}: connect with existing promise`);else if(this._disconnectPromise){console.debug(`${this.type}: queuing connect after disconnecting`);const e=this._disconnectPromise;this._disconnectPromise=void 0,this._connectPromise=e.then((()=>this.connect()))}else{console.debug(`${this.type}: connecting`),this._connectPromise=Promise.resolve(),this.setConnectionState(s.ConnectionState.Connecting),this._connectPromise=this._connectPromise.then((()=>this.transportConnectAsync(e)));const t=this._connectPromise=this._connectPromise.then((()=>{t==this._connectPromise?(this._connectPromise=void 0,this.setConnectionState(s.ConnectionState.Connected)):console.debug(`${this.type}: connection aborted in flight`,{state:this._connectionState,old:this._connectPromise,new:t})})).catch((i=>{t==this._connectPromise?(this._connectPromise=void 0,this.setConnectionState(s.ConnectionState.Disconnected),e?console.debug(`${this.type}: background connect failed`):this.errorHandler("connect",i)):console.debug(`${this.type}: connection error aborted in flight`)}))}return this._connectPromise}disconnect(e){return this.connectionState==s.ConnectionState.Disconnected?Promise.resolve():(this._disconnectPromise?console.debug(`${this.type}: disconnect with existing promise`):(this._connectPromise&&(console.debug(`${this.type}: cancelling connection and disconnect`),this._connectPromise=void 0),console.debug(`${this.type}: disconnecting`),this._disconnectPromise=Promise.resolve(),this.setConnectionState(s.ConnectionState.Disconnecting),this._disconnectPromise=this._disconnectPromise.then((()=>this.transportDisconnectAsync(e))),this._disconnectPromise=this._disconnectPromise.catch((e=>{this._disconnectPromise=void 0,this.errorHandler("disconnect",e)})).finally((()=>{this._disconnectPromise=void 0,this.setConnectionState(s.ConnectionState.Disconnected)}))),this._disconnectPromise)}async reconnect(){console.debug(`${this.type}: reconnect`),await this.disconnect(!0),await this.connect(!0)}handlePacket(e){const{timestamp:t}=this.bus;this._lastReceivedTime=t;const i=hs.fromBinary(e,t);i.sender=this.type,this.bus.processPacket(i)}handleFrame(e){const{timestamp:t}=this.bus;this._lastReceivedTime=t;const i=hs.fromFrame(e,t);for(const e of i)e.sender=this.type,this.bus.processPacket(e)}errorHandler(e,t){this.emit("error",{context:e,exception:t}),this.bus.emit("error",{transport:this,context:e,exception:t}),this.emit("change"),this.disconnect(!0)}dispose(){this.disposed=!0,this._cleanups.forEach((e=>e())),this._cleanups=[]}}class ia extends bs{constructor(e){super(),this.bus=e,this._prev=Array(4).fill(0).map((()=>({packets:0,announce:0,acks:0,bytes:0}))),this._previ=0,this._temp={packets:0,announce:0,acks:0,bytes:0},e.on("packetSend",this.handlePacketSend.bind(this)),e.on("packetProcess",this.handlePacketProcess.bind(this)),e.on("selfAnnounce",this.handleSelfAnnounce.bind(this))}get current(){var e;const t={packets:0,announce:0,acks:0,bytes:0},i=this._prev.length;for(let e=0;e<this._prev.length;++e){const i=this._prev[e];t.packets+=i.packets,t.announce+=i.announce,t.acks+=i.acks,t.bytes+=i.bytes}const n=i/2;return t.packets/=n,t.announce/=n,t.acks/=n,t.bytes/=n,Object.assign({devices:this.bus.devices({ignoreInfrastructure:!0}).length,simulators:this.bus.serviceProviders().length,transport:null===(e=this.bus.transports.find((e=>e.connected)))||void 0===e?void 0:e.type},t)}accumulate(e){var t,i;this._temp.packets++,this._temp.bytes+=((null===(t=e.header)||void 0===t?void 0:t.length)||0)+((null===(i=e.data)||void 0===i?void 0:i.length)||0),e.isAnnounce&&this._temp.announce++,e.isCRCAck&&this._temp.acks++}handleSelfAnnounce(){const e=JSON.stringify(this._prev)!==JSON.stringify(this._temp);this._prev[this._previ]=this._temp,this._previ=(this._previ+1)%this._prev.length,this._temp={packets:0,announce:0,acks:0,bytes:0},e&&this.emit("change")}handlePacketSend(e){this.accumulate(e)}handlePacketProcess(e){this.accumulate(e)}}class na extends Xs{constructor(e){super(K),this.statusLightColor=void 0;const{resetIn:t}=e||{};this.startTime=Date.now(),this.deviceDescription=this.addRegister(s.ControlReg.DeviceDescription),this.mcuTemperature=this.addRegister(s.ControlReg.McuTemperature,[25]),this.uptime=this.addRegister(s.ControlReg.Uptime),t&&(this.resetIn=this.addRegister(s.ControlReg.ResetIn,[0])),this.addCommand(s.ControlCmd.Services,this.announce.bind(this)),this.addCommand(s.ControlCmd.Identify,this.identify.bind(this)),this.addCommand(s.ControlCmd.Reset,this.handleReset.bind(this)),this.addCommand(s.ControlCmd.Noop,null),this.addCommand(s.ControlCmd.SetStatusLight,this.handleSetStatusLight.bind(this))}async announce(){const e=hs.jdpacked(s.ControlCmd.Services,"u16 u8 x[1] u32[]",[this.device.restartCounter|s.ControlAnnounceFlags.StatusLightRgbNoFade|s.ControlAnnounceFlags.SupportsACK,this.device.packetCount+1,this.device.services().slice(1).map((e=>e.serviceClass))]);if(await this.sendPacketAsync(e),this.uptime.setValues([100*(Date.now()-this.startTime)],!0),this.resetIn){const[e]=this.resetIn.values();if(e){const t=e/1e3+this.resetIn.lastSetTime;t<this.device.bus.timestamp&&(console.debug(`${this} reset in expired`,{resetIn:e,lastSet:this.resetIn.lastSetTime,resetTimestamp:t}),this.device.reset())}}}async identify(){this.emit("identify")}handleReset(){this.startTime=Date.now(),this.device.reset()}handleSetStatusLight(e){const[t,i,n]=Hr(e.data,"u8 u8 u8 u8");this.statusLightColor=t<<16|i<<8|n,this.emit("change")}}class ra extends bs{constructor(e,t){super(),this.template=e,this.deviceId=t,this.deviceId||(this.deviceId=xs()),this.shortId=Zr(this.deviceId),this.handleSelfAnnounce=this.handleSelfAnnounce.bind(this),this.handlePacket=this.handlePacket.bind(this)}get bus(){return this._bus}set bus(e){e!==this._bus&&(this.stop(),this._bus=e,this._bus&&this.start())}start(){this._bus&&(this._bus.on("selfAnnounce",this.handleSelfAnnounce),this._bus.on(["packetProcess","packetSend"],this.handlePacket))}stop(){this._bus&&(this._bus.off("selfAnnounce",this.handleSelfAnnounce),this._bus.off(["packetProcess","packetSend"],this.handlePacket),this._bus=void 0)}handleSelfAnnounce(){}}class sa extends ra{constructor(e,t,i){super(e,null==i?void 0:i.deviceId),this._restartCounter=0,this._packetCount=0,this._eventCounter=void 0,this.controlService=new na(i),this._services=[],this.updateServices(t),this.on("refresh",this.refreshRegisters.bind(this))}updateServices(e){var t;null===(t=this._services)||void 0===t||t.slice(1).forEach((e=>e.device=void 0)),this._services=[this.controlService,...e],this._services.length>=59&&(this.emit("error",`too many services (${this._services.length}) > 59`),console.warn("jacdac: dropping services to 59"),this._services=this._services.slice(0,59)),this._services.forEach(((e,t)=>{e.device=this,e.serviceIndex=t})),this.emit("change")}removeService(e){if((null==e?void 0:e.device)!==this)return;const t=this._services.slice(1),i=t.indexOf(e);i>-1&&(t.splice(i,1),this.updateServices(t))}start(){super.start(),this._packetCount=0}stop(){this._delayedPackets=void 0,super.stop()}handleSelfAnnounce(){super.handleSelfAnnounce(),this._restartCounter<15&&this._restartCounter++,this.controlService.announce();this.services().filter((e=>!Wn(e.statusCode.data))).forEach((e=>e.statusCode.sendGetAsync())),this._packetCount=0}get restartCounter(){return this._restartCounter}get packetCount(){return this._packetCount}services(){return this._services.slice(0)}service(e){return void 0!==e&&this._services[e]}toString(){return`host ${this.shortId}`}get eventCounter(){return this._eventCounter}createEventCmd(e){if(this._eventCounter||(this._eventCounter=0),this._eventCounter=this._eventCounter+1&127,e>>8)throw new Error("invalid event code");return 32768|this._eventCounter<<8|e}async sendPacketAsync(e){if(!this.bus)return Promise.resolve();this._packetCount++,e.deviceIdentifier=this.deviceId;const t=e.sendCoreAsync(this.bus);return this.bus.processPacket(e),t}delayedSend(e,t){this._delayedPackets||(this._delayedPackets=[],setTimeout(this.processDelayedPackets.bind(this),10));const i={timestamp:t,pkt:e};this._delayedPackets.push(i),this._delayedPackets.sort(((e,t)=>-e.timestamp+t.timestamp))}processDelayedPackets(){for(var e,t;null===(e=this._delayedPackets)||void 0===e?void 0:e.length;){const{timestamp:e,pkt:t}=this._delayedPackets[0];if(e>this.bus.timestamp)break;this._delayedPackets.shift();try{this.sendPacketAsync(t)}catch(e){throw this._delayedPackets=void 0,e}}(null===(t=this._delayedPackets)||void 0===t?void 0:t.length)?setTimeout(this.processDelayedPackets.bind(this),10):this._delayedPackets=void 0}handlePacket(e){const t=e.deviceIdentifier==this.deviceId;if(e.requiresAck&&t){e.requiresAck=!1;const t=e.crc,i=hs.onlyHeader(t);i.serviceIndex=63,this.sendPacketAsync(i)}if(e.isMultiCommand){if(!e.isCommand)return;const t=e.serviceClass;for(const i of this._services)if(i.serviceClass==t){const t=e.cloneForDevice(this.deviceId,i.serviceIndex);i.handlePacket(t)}}else if(t){if(!e.isCommand)return;const t=this._services[e.serviceIndex];t&&t.handlePacket(e)}else if(e.isCommand)return}refreshRegisters(){this._services.forEach((e=>e.emit("refresh")))}reset(){var e;this._restartCounter=0,this._packetCount=0,null===(e=this._services)||void 0===e||e.forEach((e=>e.reset())),this.emit("reset")}}class aa extends Xs{constructor(){super(gt),this.init(s.ProtoTestReg.RwBool,s.ProtoTestReg.RoBool,s.ProtoTestCmd.CBool,s.ProtoTestEvent.EBool,!1),this.init(s.ProtoTestReg.RwI32,s.ProtoTestReg.RoI32,s.ProtoTestCmd.CI32,s.ProtoTestEvent.EI32,0),this.init(s.ProtoTestReg.RwU32,s.ProtoTestReg.RoU32,s.ProtoTestCmd.CU32,s.ProtoTestEvent.EU32,0),this.init(s.ProtoTestReg.RwString,s.ProtoTestReg.RoString,s.ProtoTestCmd.CString,s.ProtoTestEvent.EString,""),this.rwBytes=this.init(s.ProtoTestReg.RwBytes,s.ProtoTestReg.RoBytes,s.ProtoTestCmd.CBytes,s.ProtoTestEvent.EBytes,new Uint8Array(0)),this.init(s.ProtoTestReg.RwI8U8U16I32,s.ProtoTestReg.RoI8U8U16I32,s.ProtoTestCmd.CI8U8U16I32,s.ProtoTestEvent.EI8U8U16I32,0,0,0,0),this.init(s.ProtoTestReg.RwU8String,s.ProtoTestReg.RoU8String,s.ProtoTestCmd.CU8String,s.ProtoTestEvent.EU8String,0,""),this.addCommand(s.ProtoTestCmd.CReportPipe,this.handleReportPipe.bind(this))}init(e,t,i,n,...r){const s=this.addRegister(e,r),a=this.addRegister(t,s.values());return s.on("change",(()=>{a.setValues(s.values()),this.sendEvent(n,s.data)})),this.addCommand(i,(e=>s.setValues(Hr(e.data,s.specification.packFormat)))),s}async handleReportPipe(e){const t=Ps.from(this.device.bus,e,!0);await t.respondForEach(this.rwBytes.data,(e=>{const t=new Uint8Array(1);return t[0]=e,qr("b",[t])}))}}class oa extends Ys{constructor(e,t){super(343122531,{instanceName:e,readingValues:[oa.INACTIVE_VALUE],streamingInterval:50}),this.analog=this.addRegister(s.ButtonReg.Analog,[!!t]),this.on("refresh",this.handleRefresh.bind(this))}get threshold(){return this._threshold}set threshold(e){e!==this._threshold&&(this._threshold=e,this.analog.setValues([!!this._threshold]),this.emit("change"))}isActive(){var e,t;const[i]=this.reading.values();return i>((null===(t=null===(e=this.threshold)||void 0===e?void 0:e.values())||void 0===t?void 0:t[0])||.5)}async handleRefresh(){const e=this.device.bus.timestamp;if(this.isActive()){if(void 0===this._downTime)this._downTime=e,this._nextHold=this._downTime+oa.HOLD_TIME,await this.sendEvent(s.ButtonEvent.Down);else if(e>this._nextHold){const t=e-this._downTime;this._nextHold=this.device.bus.timestamp+oa.HOLD_TIME,await this.sendEvent(s.ButtonEvent.Hold,qr("u32",[t]))}}else if(void 0!==this._downTime){const t=e-this._downTime;this._downTime=void 0,this._nextHold=void 0,await this.sendEvent(s.ButtonEvent.Up,qr("u32",[t]))}}async down(){this.reading.setValues([oa.ACTIVE_VALUE])}async up(){this.reading.setValues([oa.INACTIVE_VALUE])}}oa.HOLD_TIME=500,oa.INACTIVE_VALUE=0,oa.ACTIVE_VALUE=1;class da extends Xs{constructor(e){super(458731991,e),this.volume=this.addRegister(s.BuzzerReg.Volume,[.2]),this.addCommand(s.BuzzerCmd.PlayTone,this.handlePlayTone.bind(this))}handlePlayTone(e){const[t,,i]=Hr(e.data,"u16 u16 u16"),n=1e6/t,[r]=this.volume.values();this.emit(da.PLAY_TONE,{frequency:n,duration:i,volume:r})}}da.PLAY_TONE="playTone";class ca extends Xs{constructor(e){super(523748714);const{message:t="",rows:i=2,columns:n=16,variant:r,textDirection:a,brightness:o=100}=e||{};this.message=this.addRegister(s.CharacterScreenReg.Message,[t]),this.brightness=this.addRegister(s.CharacterScreenReg.Brightness,[o]),this.rows=this.addRegister(s.CharacterScreenReg.Rows,[i]),this.columns=this.addRegister(s.CharacterScreenReg.Columns,[n]),this.variant=this.addRegister(s.CharacterScreenReg.Variant,[r||s.CharacterScreenVariant.LCD]),this.message=this.addRegister(s.CharacterScreenReg.Message,[""]),this.textDirection=this.addRegister(s.CharacterScreenReg.TextDirection,[a||s.CharacterScreenTextDirection.LeftToRight]),this.addCommand(s.CharacterScreenCmd.SetLine,this.handleSetLine.bind(this)),this.addCommand(s.CharacterScreenCmd.Clear,this.handleClear.bind(this))}handleClear(){this.message.setValues([""])}handleSetLine(e){const[t,i]=e.jdunpack("u16 s"),[n]=this.rows.values();if(t>=n)return;const[r]=this.columns.values(),[s=""]=this.message.values(),a=s.split("\n");a[t]=i.slice(0,r);const o=a.map((e=>e||"")).join("\n");this.message.setValues([o])}}const la=s.JoystickButtons.Left|s.JoystickButtons.Right|s.JoystickButtons.Up|s.JoystickButtons.Down,ua=la|s.JoystickButtons.A|s.JoystickButtons.B|s.JoystickButtons.Menu|s.JoystickButtons.Select|s.JoystickButtons.Exit,pa=la|s.JoystickButtons.A,ma=pa|s.JoystickButtons.B,ha=s.JoystickButtons.B|s.JoystickButtons.Select|s.JoystickButtons.Menu|s.JoystickButtons.Reset,fa=[[s.JoystickButtons.Left,14],[s.JoystickButtons.Right,15],[s.JoystickButtons.Up,12],[s.JoystickButtons.Down,13],[s.JoystickButtons.A,0],[s.JoystickButtons.B,1],[s.JoystickButtons.Select,8],[s.JoystickButtons.Menu,9]];class ga extends Ys{constructor(e){super(277836886,{instanceName:null==e?void 0:e.instanceName,readingValues:[0,0,0],streamingInterval:50});const{variant:t=s.JoystickVariant.Thumb,buttonsAvailable:i=0}=e||{};this.variant=this.addRegister(s.JoystickReg.Variant,[t]),this.buttonsAvailable=this.addRegister(s.JoystickReg.ButtonsAvailable,[i])}get isDigital(){const[e]=this.buttonsAvailable.values();return(e&la)===la}async down(e){const[t,i,n]=this.reading.values(),r=t|e;await this.updateReading(r,i,n)}async up(e){const[t,i,n]=this.reading.values(),r=t&~e;await this.updateReading(r,i,n)}async updateDirection(e,t){const[i]=this.reading.values();await this.updateReading(i,e,t)}async update(e){const{buttons:t,axes:i}=e,[n]=this.buttonsAvailable.values();let r=0;for(const[e,i]of fa)(e&n)==e&&t[i].pressed&&(r|=e);let s=0,a=0;if(!this.isDigital){const[e,t]=i;s=e,a=t}await this.updateReading(r,s,a)}async updateReading(e,t,i){const[n]=this.reading.values();if(this.isDigital)t=e&s.JoystickButtons.Left?-1:e&s.JoystickButtons.Right?1:0,i=e&s.JoystickButtons.Up?-1:e&s.JoystickButtons.Down?1:0;else{const n=-1;t<-n?e|=s.JoystickButtons.Left:t>n?e|=s.JoystickButtons.Right:e&=~(s.JoystickButtons.Left|s.JoystickButtons.Right),i<-n?e|=s.JoystickButtons.Up:i>n?e|=s.JoystickButtons.Down:e&=~(s.JoystickButtons.Up|s.JoystickButtons.Down)}this.reading.setValues([e,t,i]),e!==n&&await this.sendEvent(s.JoystickEvent.ButtonsChanged,qr("u32",[e]))}}class va extends Xs{constructor(e,t,i){super(286070091);const{brightness:n,variant:r}=i||{};this.dots=this.addRegister(s.DotMatrixReg.Dots,[new Uint8Array(0)]),this.rows=this.addRegister(s.DotMatrixReg.Rows,[t]),this.columns=this.addRegister(s.DotMatrixReg.Columns,[e]),void 0!==n&&(this.brightness=this.addRegister(s.DotMatrixReg.Brightness,[128])),void 0!==r&&(this.variant=this.addRegister(s.DotMatrixReg.Variant,[r])),this.rows.skipBoundaryCheck=!0,this.rows.skipErrorInjection=!0,r===s.DotMatrixVariant.LED&&this.addRegister(s.SensorReg.StreamingPreferredInterval,[50]),this.rows.on("change",this.updateDotsBuffer.bind(this)),this.columns.on("change",this.updateDotsBuffer.bind(this)),this.updateDotsBuffer()}updateDotsBuffer(){var e;const[t]=this.rows.values(),[i]=this.columns.values(),n=t*(i+(8-i%8));(null===(e=this.dots.data)||void 0===e?void 0:e.length)!==n&&(this.dots.data=new Uint8Array(n),this.dots.emit("change"))}}function ya(e,t,i){return{r:e,g:t,b:i}}function _a(e,t,i){const n=i*(255-t)>>8,r=i-n,s=(e=192*e>>8)/64>>0,a=e%64>>0,o=(a*r/64>>0)+n,d=((63-a)*r/64>>0)+n;let c=0,l=0,u=0;return s?1==s?(c=n,l=d,u=o):(c=o,l=n,u=d):(c=d,l=o,u=n),ya(c,l,u)}function ba(e,t){let i=e*t>>7;return t<128&&e==i?i--:t>128&&e==i&&i++,i}function ka(e){return e<0?0:e>255?255:e}function wa(e,t){return(255&e)*(1+(255&t))>>8}class Sa extends Xs{constructor(e){super(309264608,e),this.pxbuffer=new Uint8Array(0),this.prog_mode=0,this.prog_tmpmode=0,this.range_start=0,this.range_end=0,this.range_len=0,this.range_ptr=0,this.prog_ptr=0,this.prog_size=0,this.prog_data=new Uint8Array(0),this.dirty=!0,this.inited=!1,this.power_enable=!1;const{numColumns:t,maxPower:i=200,maxPixels:n=300,numPixels:r=15}=e||{};this.brightness=this.addRegister(s.LedPixelReg.Brightness,[15]),this.actualBrightness=this.addRegister(s.LedPixelReg.ActualBrightness,[15]),this.lightType=this.addRegister(s.LedPixelReg.LightType,[s.LedPixelLightType.WS2812B_GRB]),this.numPixels=this.addRegister(s.LedPixelReg.NumPixels,[r]),this.maxPower=this.addRegister(s.LedPixelReg.MaxPower,[i]),this.maxPixels=this.addRegister(s.LedPixelReg.MaxPixels,[n]),this.variant=this.addRegister(s.LedPixelReg.Variant,[s.LedPixelVariant.Strip]),this.numRepeats=this.addRegister(s.LedPixelReg.NumRepeats,[0]),void 0!==t&&(this.numColumns=this.addRegister(s.LedPixelReg.NumColumns,[t])),this.brightness.on("change",(()=>this.intensity=this.requested_intensity)),this.numPixels.on("change",this.allocRxBuffer.bind(this)),this.maxPixels.on("change",this.allocRxBuffer.bind(this)),this.addCommand(s.LedPixelCmd.Run,this.handleRun.bind(this)),this.allocRxBuffer()}get colors(){return this.pxbuffer}get maxpower(){const[e]=this.maxPower.values()||[200];return e}get maxpixels(){const[e]=this.maxPixels.values()||[];return e}get numpixels(){const[e]=this.numPixels.values()||[0];return e}get requested_intensity(){const[e]=this.brightness.values()||[0];return e}get intensity(){const[e]=this.actualBrightness.values()||[0];return e}set intensity(e){this.actualBrightness.setValues([e])}jd_power_enable(e){this.power_enable=e}is_enabled(){return this.numpixels>0&&this.requested_intensity>0}allocRxBuffer(){const{numpixels:e=0,maxpixels:t,pxbuffer:i}=this;void 0!==t&&e>t&&this.numPixels.setValues([this.maxpixels]);const n=3*e;(i||n!==i.length)&&(this.pxbuffer=new Uint8Array(n))}reset_range(){this.range_ptr=this.range_start}set_next(e){if(this.range_ptr>=this.range_end)return!1;const t=this.pxbuffer,i=3*this.range_ptr++;if(0==this.prog_tmpmode)return t[i+0]=e.r,t[i+1]=e.g,t[i+2]=e.b,!0;let n=t[i+0],r=t[i+1],s=t[i+2];switch(this.prog_tmpmode){case 1:n+=e.r,r+=e.g,s+=e.b;break;case 2:n-=e.r,r-=e.g,s-=e.b;break;case 3:n=ba(n,e.r),r=ba(r,e.g),s=ba(s,e.b)}return t[i+0]=ka(n),t[i+1]=ka(r),t[i+2]=ka(s),!0}limit_intensity(){const{numpixels:e,requested_intensity:t,maxpower:i,pxbuffer:n}=this;let r=3*e;const s=this.intensity;let a=this.intensity;a+=1+(a>>5),void 0!==t&&a>t&&(a=t);let o=0,d=0,c=0,l=0;for(;r--;){const e=n[l++];d+=wa(e,a),c+=wa(e,s),o+=e}d*=46,c*=46,o*=46;const u=1e3*i-(14e3+930*e);if(d<=u)return void(this.intensity=a);if(c<=u)return;let p=u/(o>>8)-1;p<0&&(p=0),this.intensity=p}prog_fetch_color(){const e=this.prog_ptr;if(e+3>this.prog_size)return ya(0,0,0);const t=this.prog_data;return this.prog_ptr=e+3,ya(t[e+0],t[e+1],t[e+2])}prog_fetch(){if(this.prog_ptr>=this.prog_size)return{prog:0};const e=this.prog_data,t=e[this.prog_ptr++];if(!(128&t))return{dst:t,prog:3};if(128==(192&t))return{dst:(63&t)<<8|e[this.prog_ptr++],prog:3};switch(t){case 193:return{dst:1,prog:4};case 194:return{dst:2,prog:4};case 195:return{dst:3,prog:4};case 192:return{dst:e[this.prog_ptr++],prog:4};default:return{dst:t,prog:1}}}prog_fetch_num(e){const t=this.prog_ptr,i=this.prog_fetch(),{dst:n,prog:r}=i;return 3==r?n:(this.prog_ptr=t,e)}prog_fetch_cmd(){let e;for(;;){const t=this.prog_fetch();switch(t.prog){case 1:return t.dst;case 4:for(;e--;)this.prog_fetch_color();break;case 0:return 0}}}prog_set(e){this.reset_range();const t=this.prog_ptr;for(;;){this.prog_ptr=t;let i=!1;for(let t=0;t<e;++t)i=this.set_next(this.prog_fetch_color());if(!i)break}}prog_fade(e,t){if(e<2)return void this.prog_set(e);let i=0;const n=this.prog_ptr+3*e;let r=this.prog_fetch_color(),s=this.prog_fetch_color();const a=(e-1<<16)/this.range_len;let o=0;for(this.reset_range();;){for(;i<o>>16;)i++,r=s,s=this.prog_fetch_color();const e=65535&o,n=65535-e,d=ya(r.r*n+s.r*e+32768>>16,r.g*n+s.g*e+32768>>16,r.b*n+s.b*e+32768>>16);if(!this.set_next(t?_a(d.r,d.g,d.b):d))break;o+=a}this.prog_ptr=n}prog_rot(e){if(e<=0||e>=this.range_len)return;const t=this.range_start,i=this.range_end,n=this.pxbuffer;let r=3*t,s=3*(t+e);const a=3*i;let o=s;for(;r!=o;){const e=n[r],t=n[r+1],i=n[r+2];n[r]=n[o],n[r+1]=n[o+1],n[r+2]=n[o+2],n[o]=e,n[o+1]=t,n[o+2]=i,r+=3,o+=3,o===a?o=s:r===s&&(s=o)}}fetch_mode(){const e=this.prog_fetch_num(0);return e>3?0:e}prog_process(){const e=this.prog_data;if(this.prog_ptr>=this.prog_size)return!1;for(;e===this.prog_data;){const t=this.prog_fetch_cmd();if(!t)break;if(213==t){const t=this.prog_fetch_num(50);return this.dirty=!0,setTimeout(this.animationFrame.bind(this),t),e===this.prog_data}switch(t){case 207:this.range_ptr=this.range_start+this.prog_fetch_num(0),this.set_next(this.prog_fetch_color());break;case 209:case 210:case 208:{const{dst:e,prog:i}=this.prog_fetch();if(4!=i||0==e)continue;208==t?this.prog_set(e):this.prog_fade(e,210==t);break}case 212:case 211:{let e=this.prog_fetch_num(1);const i=this.range_len;if(0==i)continue;for(;e>=i;)e-=i;211==t&&0!=e&&(e=i-e),this.prog_rot(e);break}case 216:this.prog_tmpmode=this.fetch_mode();break;case 215:this.prog_mode=this.fetch_mode();break;case 214:{let e=this.prog_fetch_num(0);const t=this.prog_fetch_num(this.numpixels),i=this.numpixels;e>i&&(e=i);let n=e+t;n>i&&(n=i),this.range_start=e,this.range_end=n,this.range_len=n-e;break}}216!=t&&(this.prog_tmpmode=this.prog_mode)}return!1}animationFrame(){if(this.prog_process()&&this.is_enabled()&&this.dirty){if(this.dirty=!1,Wn(this.pxbuffer))return void this.jd_power_enable(!1);this.jd_power_enable(!0),this.limit_intensity(),this.emit("render")}}sync_config(){this.is_enabled()?(this.inited||(this.inited=!0),this.jd_power_enable(!0)):this.jd_power_enable(!1)}handleRun(e){this.prog_data=e.data,this.prog_size=this.prog_data.length,this.prog_ptr=0,this.range_start=0,this.range_end=this.range_len=this.numpixels,this.prog_tmpmode=this.prog_mode=0,this.sync_config(),this.animationFrame()}}class Ta extends Ys{constructor(e,t,i){super(319172040,{readingValues:[[]]}),this.columns=this.addRegister(s.MatrixKeypadReg.Columns,[e]),this.rows=this.addRegister(s.MatrixKeypadReg.Rows,[t]),this.labels=this.addRegister(s.MatrixKeypadReg.Labels,i?[i.map((e=>[e]))]:void 0)}async down(e){const[t]=this.reading.values();t.findIndex((t=>t[0]===e))<0&&(t.push([e]),this.reading.setValues([t]))}async up(e){const[t]=this.reading.values(),i=t.findIndex((t=>t[0]===e));i>-1&&(t.splice(i,1),this.reading.setValues([t]))}}class Ra extends Xs{constructor(e){super(385895640,{instanceName:e}),this.duty=this.addRegister(s.MotorReg.Duty,[0]),this.enabled=this.addRegister(s.MotorReg.Enabled,[!1]),this.loadTorque=this.addRegister(s.MotorReg.LoadTorque),this.loadSpeed=this.addRegister(s.MotorReg.LoadSpeed)}}class Ca extends Es{constructor(e){super(),this.service=e,this.reset(),this.service.inactiveThreshold&&this.mount(this.service.inactiveThreshold.subscribe("change",this.reset.bind(this))),this.service.activeThreshold&&this.mount(this.service.activeThreshold.subscribe("change",this.reset.bind(this))),this.mount(this.service.reading.subscribe("change",this.update.bind(this)))}reset(){this._state=s.SystemReadingThreshold.Neutral}update(){var e,t;const[i]=this.service.reading.values();if(void 0===i)return void this.setState(s.SystemReadingThreshold.Neutral);const[n]=null===(e=this.service.activeThreshold)||void 0===e?void 0:e.values();if(void 0!==n&&i>=n)return void this.setState(s.SystemReadingThreshold.Active);const[r]=null===(t=this.service.inactiveThreshold)||void 0===t?void 0:t.values();void 0!==r&&i<=r?this.setState(s.SystemReadingThreshold.Inactive):this.setState(s.SystemReadingThreshold.Neutral)}setState(e){if(e!==this._state)switch(this._state=e,e){case s.SystemReadingThreshold.Active:this.service.sendEvent(s.SystemEvent.Active);break;case s.SystemReadingThreshold.Inactive:this.service.sendEvent(s.SystemEvent.Inactive);break;case s.SystemReadingThreshold.Neutral:this.service.sendEvent(s.SystemEvent.Neutral)}}}class Ia extends Ys{constructor(e,t){super(e,t);const{minReading:i,maxReading:n,inactiveThreshold:r,activeThreshold:a,readingResolution:o}=t||{};void 0!==i&&this.addRegister(s.SystemReg.MinReading,[i]),void 0!==n&&this.addRegister(s.SystemReg.MaxReading,[n]),void 0!==o&&this.addRegister(s.SystemReg.ReadingResolution,[o]),void 0===r&&void 0===this.activeThreshold||(void 0!==r&&(this.inactiveThreshold=this.addRegister(s.SystemReg.InactiveThreshold,[r])),void 0!==a&&(this.activeThreshold=this.addRegister(s.SystemReg.ActiveThreshold,[a])),this.levelDetector=new Ca(this))}}class Ea extends Ia{constructor(e){super(326323349,{readingValues:[0]}),this._tiltCount=0,this._level=0;const{bucketSize:t}=e||{};this.precipitationPrecision=this.addRegister(s.RainGaugeReg.PrecipitationPrecision,[t||.2794]),this._level=0}get tiltCount(){return this._tiltCount}get level(){return this._level}async rain(e){e&&(this._level+=e,this._level>=.7?await this.tilt():this.emit("change"))}async tilt(){this._tiltCount++,this._level=0;const[e]=this.precipitationPrecision.values(),[t]=this.reading.values();this.reading.setValues([t+(e||.2)]),this.emit("change")}}class Aa extends Ia{constructor(e){super(309087410,{readingValues:[0]});const{variant:t}=e||{};this.variant=this.addRegister(s.ReflectedLightReg.Variant,[t||s.ReflectedLightVariant.InfraredDigital])}}class Na extends Ys{constructor(){super(284830153,{readingValues:[0],streamingInterval:50}),this.clicksPerTurn=this.addRegister(s.RotaryEncoderReg.ClicksPerTurn,[12])}async rotate(e){const[t]=this.reading.values();this.reading.setValues([t+(e>>0)])}}class xa extends Xs{constructor(e){super(318542083,e);const{minAngle:t=-90,maxAngle:i=90,responseSpeed:n,stallTorque:r}=e||{};this.angle=this.addRegister(s.ServoReg.Angle,[0]),this.currentAngle=this.addRegister(s.ServoReg.CurrentAngle,[0]),this.enabled=this.addRegister(s.ServoReg.Enabled,[!1]),this.minAngle=this.addRegister(s.ServoReg.MinAngle,void 0!==t?[t]:void 0),this.maxAngle=this.addRegister(s.ServoReg.MaxAngle,void 0!==i?[i]:void 0),this.offset=this.addRegister(s.ServoReg.Offset,[0]),this.responseSpeed=this.addRegister(s.ServoReg.ResponseSpeed,void 0!==n?[n]:void 0),this.stallTorque=this.addRegister(s.ServoReg.StallTorque,void 0!==r?[r]:void 0),this.angle.on("packetDataNormalize",(e=>{let t=e[0];const[i]=this.minAngle.values(),[n]=this.maxAngle.values();void 0!==i&&(t=Math.max(i,t)),void 0!==n&&(t=Math.min(n,t)),e[0]=t})),this.angle.on("change",(()=>this.currentAngle.setValues(this.angle.values())))}}class Fa extends Xs{constructor(e){super(zt),this.storageKey=e,this.addCommand(s.SettingsCmd.Get,this.handleGet.bind(this)),this.addCommand(s.SettingsCmd.Set,this.handleSet.bind(this)),this.addCommand(s.SettingsCmd.Delete,this.handleDelete.bind(this)),this.addCommand(s.SettingsCmd.ListKeys,this.handleListKeys.bind(this)),this.addCommand(s.SettingsCmd.List,this.handleList.bind(this)),this.addCommand(s.SettingsCmd.Clear,this.handleClear.bind(this)),this.settings=this.read()}getPayload(e){const t=this.settings[e],i=/^$/.test(e);let n;if(void 0===t)n=new Uint8Array(0);else if(i){new Uint8Array(1)[0]=0}else n=Dn(t);return n}async handleGet(e){const[t]=e.jdunpack("s"),i=this.getPayload(t),n=hs.jdpacked(s.SettingsCmd.Get,"z b",[t,i]);await this.sendPacketAsync(n)}async handleSet(e){const[t,i]=e.jdunpack("z b");console.log({cmd:"set",key:t,value:i}),this.settings[t]=Mn(i),await this.save()}async handleDelete(e){const[t]=e.jdunpack("s");delete this.settings[t],await this.save()}async handleListKeys(e){const t=Ps.from(this.device.bus,e,!0);await t.respondForEach(Object.keys(this.settings),(e=>qr("s",[e])))}async handleList(e){const t=Ps.from(this.device.bus,e,!0);await t.respondForEach(Object.keys(this.settings),(e=>qr("z b",[e,this.getPayload(e)])))}handleClear(){this.settings={},this.save()}read(){if(!this.storageKey)return{};try{const e="undefined"!=typeof window&&window.localStorage.getItem(this.storageKey);return JSON.parse(e||"{}")}catch(e){return console.log(e),{}}}async save(){if(this.storageKey)try{"undefined"!=typeof window&&window.localStorage.setItem(this.storageKey,JSON.stringify(this.settings))}catch(e){console.log(e)}await this.sendEvent(s.SettingsEvent.Change)}}class Pa extends Xs{constructor(){var e;super(302307733),this.synthesis="undefined"!=typeof window&&window.speechSynthesis,this.enabled=this.addRegister(s.SpeechSynthesisReg.Enabled,[!(null===(e=this.synthesis)||void 0===e?void 0:e.paused)]),this.pitch=this.addRegister(s.SpeechSynthesisReg.Pitch,[1]),this.rate=this.addRegister(s.SpeechSynthesisReg.Rate,[1]),this.lang=this.addRegister(s.SpeechSynthesisReg.Lang,[""]),this.volume=this.addRegister(s.SpeechSynthesisReg.Volume,[.5]),this.addCommand(s.SpeechSynthesisCmd.Speak,this.handleSpeak.bind(this)),this.addCommand(s.SpeechSynthesisCmd.Cancel,this.handleCancel.bind(this))}handleSpeak(e){const[t]=e.jdunpack("s");if(!this.synthesis||!t)return;const[i]=this.pitch.values(),[n]=this.pitch.values(),[r]=this.lang.values(),[s]=this.volume.values(),a=new SpeechSynthesisUtterance(t);a.pitch=i,a.rate=n,a.lang=r,a.volume=s,this.synthesis.speak(a)}handleCancel(e){var t;null===(t=this.synthesis)||void 0===t||t.cancel()}}class Ma extends Ys{constructor(e){super(450008066,{readingValues:[!1],streamingInterval:50});const{autoOffDelay:t,variant:i}=e||{};this.variant=this.addRegister(s.SwitchReg.Variant,void 0!==i?[i]:void 0),this.autoOffDelay=this.addRegister(s.SwitchReg.AutoOffDelay,void 0!==t?[t]:void 0)}async toggle(){const[e]=this.reading.values();e?await this.switchOff():await this.switchOn()}async switchOn(){const[e]=this.reading.values();e||(this.reading.setValues([!0]),await this.sendEvent(s.SwitchEvent.On),this.startAutoOff())}async switchOff(){const[e]=this.reading.values();e&&(this.reading.setValues([!1]),await this.sendEvent(s.SwitchEvent.Off),this.stopAutoOff())}startAutoOff(){if(this.stopAutoOff(),void 0!==this.autoOffDelay.data){const[e]=this.autoOffDelay.values();this.autoOffInterval=setTimeout(this.switchOn.bind(this),e)}}stopAutoOff(){this.autoOffInterval&&(clearTimeout(this.autoOffInterval),this.autoOffInterval=void 0)}}class Da extends Xs{constructor(e){super(365137307,e),this.red=this.addRegister(s.TrafficLightReg.Red,[!0]),this.orange=this.addRegister(s.TrafficLightReg.Orange,[!1]),this.green=this.addRegister(s.TrafficLightReg.Green,[!1])}}class La extends Xs{constructor(e){super(506480888,e);const{ledCount:t=1,variant:i=s.LedVariant.ThroughHole,luminousIntensity:n,waveLength:r,color:a=[255,0,0],maxPower:o=200}=e||{};this.color=this.addRegister(s.LedReg.Color,a),this.color.on("registerPreGet",this.updateColor.bind(this)),this.maxPower=this.addRegister(s.LedReg.MaxPower,[o]),this.ledCount=this.addRegister(s.LedReg.LedCount,[t]),void 0!==n&&(this.luminousIntensity=this.addRegister(s.LedReg.LuminousIntensity,[n])),void 0!==r&&(this.waveLength=this.addRegister(s.LedReg.WaveLength,[r])),this.variant=this.addRegister(s.LedReg.Variant,[i]),this.addCommand(s.LedCmd.Animate,this.handleAnimate.bind(this)),this.on("refresh",this.updateColor.bind(this))}updateColor(){if(!this._animation)return;const{red:e,green:t,blue:i,toRed:n,toGreen:r,toBlue:s,speed:a,start:o}=this._animation,d=(this.device.bus.timestamp-o)/(512/a*100|0),c=Math.min(1,d),l=1-c,u=e*l+c*n|0,p=t*l+c*r|0,m=i*l+c*s|0;this.color.setValues([u,p,m]),d>1&&(this._animation=void 0)}handleAnimate(e){const[t,i,n,r]=e.jdunpack("u8 u8 u8 u8");if(0==r)this.color.setValues([t,i,n]),this._animation=void 0;else{const[e,s,a]=this.color.values();this._animation={red:e,green:s,blue:a,toRed:t,toGreen:i,toBlue:n,speed:r,start:this.device.bus.timestamp}}}}class Ba extends Xs{constructor(e){super(335795e3),this.sounds=e,this.volume=this.addRegister(s.SoundPlayerReg.Volume,[.5]),this.addCommand(s.SoundPlayerCmd.ListSounds,this.handleListSounds.bind(this)),this.addCommand(s.SoundPlayerCmd.Play,this.handlePlay.bind(this))}async handleListSounds(e){const t=Ps.from(this.device.bus,e,!0);await t.respondForEach(this.sounds,(e=>qr("u32 s",e)))}handlePlay(e){var t;const[i]=e.jdunpack("s");null===(t=this.onPlay)||void 0===t||t.call(this,i)}}class Va extends Xs{constructor(){super(394916002,{variant:s.RngVariant.WebCrypto}),this.reading=this.addRegister(s.RngReg.Random,[new Uint8Array(64)]),this.reading.on("registerPreGet",this.handleRefresh.bind(this))}handleRefresh(){const e=new Uint8Array(64);"undefined"!=typeof window&&window.crypto.getRandomValues(e),this.reading.setValues([e],!0)}}class Oa extends Ia{constructor(){super(364362175,{readingValues:[0],minReading:0,maxReading:360,readingError:[1]}),this.enabled=this.addRegister(s.CompassReg.Enabled,[!1]),this.enabled.on("change",(()=>{const[e]=this.statusCode.values();e===s.SystemStatusCodes.CalibrationNeeded&&(console.log("start calibration"),this.calibrate())}))}}class Ua extends Xs{constructor(){super(298814469,{intensityValues:[0]}),this.addCommand(s.DmxCmd.Send,this.handleSend.bind(this))}handleSend(e){console.log("dmx send",Mn(e.data))}}function ja(){try{return"undefined"!=typeof window&&window.self!==window.top}catch(e){return"undefined"!=typeof window}}function za(e){switch(e){case 2:return 9;case 1:return 13;case 5:return 17;default:return}}class $a{constructor(e){this.data=e,e||(this.data=new Uint8Array(36))}static getPacket(e){if(e)return new $a(e)}static mkPacket(e){const t=new $a;return t.data[0]=e,t}get signal(){return dr(this.data,s.NumberFormat.Int32LE,this.data.length-4)}get packetType(){return this.data[0]}get time(){return dr(this.data,s.NumberFormat.Int32LE,1)}set time(e){cr(this.data,s.NumberFormat.Int32LE,1,e)}get serial(){return dr(this.data,s.NumberFormat.Int32LE,5)}set serial(e){cr(this.data,s.NumberFormat.Int32LE,5,e)}get stringPayload(){const e=za(this.packetType);return e?this.data.slice(e+1,this.data[e]).toString():void 0}set stringPayload(e){const t=za(this.packetType);if(t){const i=Jn(e);this.data[t]=i.length,_n(this.data,t+1,i)}}get numberPayload(){switch(this.packetType){case 0:case 1:return dr(this.data,s.NumberFormat.Int32LE,9);case 4:case 5:return dr(this.data,s.NumberFormat.Float64LE,9)}}set numberPayload(e){switch(this.packetType){case 0:case 1:cr(this.data,s.NumberFormat.Int32LE,9,e);break;case 4:case 5:cr(this.data,s.NumberFormat.Float64LE,9,e)}}get bufferPayload(){const e=this.data[9];return this.data.slice(10,10+e)}set bufferPayload(e){const t=Math.min(e.length,19);this.data[9]=t,_n(this.data,10,e,0,t)}hasString(){return 2===this.packetType||1===this.packetType||5===this.packetType}hasNumber(){return 0===this.packetType||4===this.packetType||1===this.packetType||5===this.packetType}}class Wa extends Xs{constructor(){super(449414863),this.enabled=this.addRegister(s.BitRadioReg.Enabled,[!1]),this.group=this.addRegister(s.BitRadioReg.Group,[1]),this.transmissionPower=this.addRegister(s.BitRadioReg.TransmissionPower,[6]),this.frequencyBand=this.addRegister(s.BitRadioReg.FrequencyBand,[7]),this.addCommand(s.BitRadioCmd.SendString,this.handleSendString.bind(this)),this.addCommand(s.BitRadioCmd.SendNumber,this.handleSendNumber.bind(this)),this.addCommand(s.BitRadioCmd.SendValue,this.handleSendValue.bind(this)),this.addCommand(s.BitRadioCmd.SendBuffer,this.handleSendBuffer.bind(this))}handleSendString(e){const[t]=e.jdunpack("s"),i=$a.mkPacket(2);i.stringPayload=t,this.sendRadioPacket(i)}handleSendNumber(e){const[t]=e.jdunpack("f64"),i=$a.mkPacket(4);i.numberPayload=t,this.sendRadioPacket(i)}handleSendValue(e){const[t,i]=e.jdunpack("f64 s"),n=$a.mkPacket(5);n.stringPayload=i,n.numberPayload=t,this.sendRadioPacket(n)}handleSendBuffer(e){const{data:t}=e,i=$a.mkPacket(3);i.bufferPayload=t,this.sendRadioPacket(i)}sendRadioPacket(e){const[t]=this.enabled.values();if(!t)return;const{bus:i}=this.device,{timestamp:n}=i,[r]=this.group.values();e.time=n,e.serial=0;const s={type:"radiopacket",broadcast:!0,rssi:-75,serial:0,time:i.timestamp,payload:{groupId:r,type:0,bufferData:e.data}};console.log("bitradio: send",s),ja()&&window.parent.postMessage(s,"*")}}class Ha extends Xs{constructor(e){super(530893146,e),this.enabled=this.addRegister(s.PowerReg.Allowed,[!1]),this.maxPower=this.addRegister(s.PowerReg.MaxPower,[500]),this.overload=this.addRegister(s.PowerReg.PowerStatus,[!1])}}class Ja extends Xs{constructor(e){super(677752265,e);const{threshold:t=.5}=e||{};this.threshold=this.addRegister(s.CapacitiveButtonReg.Threshold,[t])}}class qa extends Xs{constructor(e){super(414210922,e),this.addCommand(s.HidKeyboardCmd.Clear,this.handleClear.bind(this)),this.addCommand(s.HidKeyboardCmd.Key,this.handleKey.bind(this))}get lastKey(){return this._lastKey}handleKey(e){const[t]=e.jdunpack("r: u16 u8 u8");this._lastKey=t,this.emit("change")}handleClear(){this._lastKey&&(this._lastKey=void 0,this.emit("change"))}}const Ga={a:4,b:5,c:6,d:7,e:8,f:9,g:10,h:11,i:12,j:13,k:14,l:15,m:16,n:17,o:18,p:19,q:20,r:21,s:22,t:23,u:24,v:25,w:26,x:27,y:28,z:29,1:30,2:31,3:32,4:33,5:34,6:35,7:36,8:37,9:38,0:39,"!":30,"@":31,"#":32,$:33,"%":34,"^":35,"&":36,"*":37,"(":38,")":39,enter:40,escape:41,backspace:42,tab:43,space:44," ":44,"-":45,_:45,"=":46,"+":46,"[":47,"{":47,"]":48,"}":48,"\\":49,"|":49,"~":50,";":51,":":51,"'":52,'"':52,"`":53,",":54,".":55,"/":56,"?":56,capslock:57,f1:58,f2:59,f3:60,f4:61,f5:62,f6:63,f7:64,f8:65,f9:66,f10:67,f11:68,f12:69,printscreen:70,scrolllock:71,pause:72,insert:73,home:74,pageup:75,delete:76,end:77,pagedown:78,arrowright:79,arrowleft:80,arrowdown:81,arrowup:82,numlock:83,numpaddivide:84,numpadmultiply:85,numpadsubstract:86,numpadadd:87,numpadenter:88,numpad1:89,numpad2:90,numpad3:91,numpad4:92,numpad5:93,numpad6:94,numpad7:95,numpad8:96,numpad9:97,numpad0:98,numpaddecimal:99,numpadequal:103,f13:104,f14:105,f15:106,f16:107,f17:108,f18:109,f19:110,f20:111,f21:112,f22:113,f23:114,f24:115,execute:116,help:117,contextmenu:118,select:119,stop:120,again:121,undo:122,cut:123,copy:124,paste:125,find:126,mute:127,volumeup:128,volumedown:129,numpadcomma:133},Ka=Object.keys(Ga).reduce(((e,t)=>(e[Ga[t]]||(e[Ga[t]]=t),e)),{}),Xa={controlleft:s.HidKeyboardModifiers.LeftControl,altleft:s.HidKeyboardModifiers.LeftAlt,shiftleft:s.HidKeyboardModifiers.LeftShift,metaleft:s.HidKeyboardModifiers.LeftGUI,controlright:s.HidKeyboardModifiers.RightControl,altright:s.HidKeyboardModifiers.RightAlt,shiftright:s.HidKeyboardModifiers.RightShift,metaright:s.HidKeyboardModifiers.RightGUI};function Ya(e){return[e&s.HidMouseButton.Left?"left":"",e&s.HidMouseButton.Right?"right":"",e&s.HidMouseButton.Middle?"middle":""].filter((e=>!!e)).join(", ")}class Qa extends Xs{constructor(e){super(411425820,e),this.addCommand(s.HidMouseCmd.Move,this.handleMove.bind(this)),this.addCommand(s.HidMouseCmd.SetButton,this.handleSetButton.bind(this)),this.addCommand(s.HidMouseCmd.Wheel,this.handleWheel.bind(this))}get lastCommand(){return this._lastCommand}setLastCommand(e){this._lastCommand!==e&&(this._lastCommand=e,this.emit("change"))}handleMove(e){const[t,i,n]=e.jdunpack("i16 i16 u16");this.setLastCommand(`move ${t} ${i} ${n}`)}handleSetButton(e){const[t,i]=e.jdunpack("u16 u8"),n=Ya(t);this.setLastCommand(`set buttons ${n||"?"} ${(s.HidMouseButtonEvent[i]||"?").toLocaleLowerCase()}`)}handleWheel(e){const[t,i]=e.jdunpack("i16 u16");this.setLastCommand(`wheel ${t} ${i}`)}}class Za extends Xs{constructor(e,t={}){super(531637829,{instanceName:e});const{variant:i=s.DimmerVariant.Light}=t;this.intensity=this.addRegister(s.DimmerReg.Intensity,[0]),this.variant=this.addRegister(s.DimmerReg.Variant,[i])}}class eo extends Xs{constructor(e){super(342028028,e),this.hubName=this.addRegister(s.AzureIotHubHealthReg.HubName,[""]),this.hubDeviceId=this.addRegister(s.AzureIotHubHealthReg.HubDeviceId,[""]),this.connectionStatus=this.addRegister(s.AzureIotHubHealthReg.ConnectionStatus,[s.AzureIotHubHealthConnectionStatus.Connected]),this.connectionStatus.on("change",(()=>this.sendEvent(s.AzureIotHubHealthEvent.ConnectionStatusChange))),this.connectionString="",this.addCommand(s.AzureIotHubHealthCmd.Connect,this.handleConnect.bind(this)),this.addCommand(s.AzureIotHubHealthCmd.Disconnect,this.handleDisconnect.bind(this)),this.addCommand(s.AzureIotHubHealthCmd.SetConnectionString,this.handleSetConnectionString.bind(this))}async handleConnect(){this.connectionStatus.setValues([s.AzureIotHubHealthConnectionStatus.Connecting]),await yn(500),this.connectionString?this.connectionStatus.setValues([s.AzureIotHubHealthConnectionStatus.Connected]):this.connectionStatus.setValues([401])}async handleDisconnect(){this.connectionStatus.setValues([s.AzureIotHubHealthConnectionStatus.Disconnecting]),await yn(500),this.connectionStatus.setValues([s.AzureIotHubHealthConnectionStatus.Disconnected])}async handleSetConnectionString(e){const t=e.stringData;if(t!==this.connectionString){await this.handleDisconnect(),this.connectionString=t;const e=function(e,t){const i={};return e.split(t||"&").map((e=>function(e){const t=e.indexOf("=");return t<0?[e,""]:[e.slice(0,t),e.slice(t+1)]}(e))).forEach((e=>i[decodeURIComponent(e[0])]=decodeURIComponent(e[1]))),i}(this.connectionString,";");this.hubName.setValues([e.HostName||""]),this.hubDeviceId.setValues([e.DeviceId||""]),this.sendEvent(s.AzureIotHubHealthEvent.ConnectionStatusChange)}}}class to extends Xs{constructor(){super(406832290),this._animationStep=-1,this.enabled=this.addRegister(s.VibrationMotorReg.Enabled,[!1]),this.addCommand(s.VibrationMotorCmd.Vibrate,this.handleVibrate.bind(this)),this.on("refresh",this.handleRefresh.bind(this))}handleRefresh(){if(!this._animation)return;const{start:e,pattern:t}=this._animation,i=this.device.bus.timestamp-e;let n=0;for(let e=0;e<t.length;++e){const[r,s]=t[e],a=r<<3;if(n+=a,n-a<=i&&n>i){this._animationStep!==e&&(this._animationStep=e,this.emit(to.VIBRATE_PATTERN,{duration:r,speed:s}));break}}i>n&&(this._animation=void 0,this._animationStep=-1,this.emit(to.VIBRATE_PATTERN,{duration:0,speed:0}),this.emit("change"))}handleVibrate(e){const[t]=e.jdunpack("r: u8 u0.8");if(this._animation={start:this.device.bus.timestamp,pattern:t},this._animationStep=-1,t.length){const[e,i]=t[0];this._animationStep=0,this.emit(to.VIBRATE_PATTERN,{duration:e,speed:i})}this.emit("change")}}to.VIBRATE_PATTERN="vibratePattern";class io extends Xs{constructor(){super(413852154,{intensityValues:[!0]}),this._lastScanResults=[{ssid:"HOME",bssid:new Uint8Array(0),rssi:-42,channel:10,flags:s.WifiAPFlags.WPS|s.WifiAPFlags.IEEE_802_11B}],this._knownNetworks=[{ssid:"HOME",password:"home",priority:0,flags:s.WifiAPFlags.WPS|s.WifiAPFlags.IEEE_802_11B}],this.enabled=this.addRegister(s.WifiReg.Enabled,[!0]),this.connected=this.addRegister(s.WifiReg.Connected,[!1]),this.ssid=this.addRegister(s.WifiReg.Ssid,[""]),this.ipAddress=this.addRegister(s.WifiReg.IpAddress,[new Uint8Array(0)]),this.eui48=this.addRegister(s.WifiReg.Eui48,[Ns(6)]),this.addCommand(s.WifiCmd.Scan,this.handleScan.bind(this)),this.addCommand(s.WifiCmd.Reconnect,this.handleReconnect.bind(this)),this.addCommand(s.WifiCmd.LastScanResults,this.handleLastScanResults.bind(this)),this.addCommand(s.WifiCmd.ListKnownNetworks,this.handleListKnownNetworks.bind(this)),this.addCommand(s.WifiCmd.AddNetwork,this.handleAddNetwork.bind(this)),this.addCommand(s.WifiCmd.ForgetAllNetworks,this.handleForgetAllNetworks.bind(this)),this.addCommand(s.WifiCmd.ForgetNetwork,this.handleForgetNetwork.bind(this)),this.addCommand(s.WifiCmd.SetNetworkPriority,this.handleSetNetworkPriority.bind(this)),this.ipAddress.on("change",this.handleIpChange.bind(this)),this.enabled.on("change",this.handleEnabledChange.bind(this))}handleEnabledChange(){const[e]=this.enabled.values();e?this.connect():this.disconnect()}handleIpChange(){const[e]=this.ipAddress.values();console.debug(`wifi: ip ${Mn(e)}`),(null==e?void 0:e.length)?this.sendEvent(s.WifiEvent.GotIp):this.sendEvent(s.WifiEvent.LostIp)}get scannedKnownNetworks(){return this._lastScanResults.filter((e=>this._knownNetworks.some((t=>t.ssid===e.ssid))))}handleReconnect(){console.debug("wifi: reconnect",{scan:this._lastScanResults,known:this._knownNetworks,networks:this.scannedKnownNetworks,enabled:this.enabled.values()[0],connected:this.connected.values()[0]}),this.disconnect(),this.scannedKnownNetworks.length&&(console.debug("wifi: reconnect, connect"),this.enabled.setValues([!0]))}connect(){console.debug("wifi: connect",{scan:this._lastScanResults,known:this._knownNetworks,networks:this.scannedKnownNetworks});const e=this.scannedKnownNetworks[0],{ssid:t}=e||{};this.ssid.setValues([t||""]),this.enabled.setValues([!!t]),this.connected.setValues([!!t]),this.ipAddress.setValues([Ns(4)])}disconnect(){console.debug("wifi: disconnect"),this.ssid.setValues([""]),this.connected.setValues([!1]),this.enabled.setValues([!1]),this.ipAddress.setValues([new Uint8Array(0)])}scan(){this._lastScanResults=[{ssid:"HOME",bssid:new Uint8Array(0),rssi:-42,channel:10,flags:s.WifiAPFlags.WPS|s.WifiAPFlags.IEEE_802_11B},Math.random()>.5&&{ssid:"OFFICE",bssid:new Uint8Array(0),rssi:-70,channel:11,flags:s.WifiAPFlags.IEEE_802_11N}].filter((e=>!!e)),this.sendEvent(s.WifiEvent.ScanComplete,qr("u16 u16",[this._lastScanResults.length,this.scannedKnownNetworks.length]))}handleScan(){this.scan()}async handleLastScanResults(e){const t=Ps.from(this.device.bus,e,!0);console.debug("list scan results",this._lastScanResults),await t.respondForEach(this._lastScanResults,(({flags:e,rssi:t,channel:i,bssid:n,ssid:r})=>qr("u32 x[4] i8 u8 b[6] s[33]",[e,t,i,n,r])))}async handleListKnownNetworks(e){const t=Ps.from(this.device.bus,e,!0);console.debug("list knowns",this._knownNetworks),await t.respondForEach(this._knownNetworks,(({priority:e,flags:t,ssid:i})=>qr("i16 i16 s",[e,t,i])))}handleAddNetwork(e){console.debug("wifi: add network");const[t,i]=e.jdunpack("z z");let n=this._knownNetworks.find((e=>e.ssid===t));if(!n){const e=this._lastScanResults.find((e=>e.ssid===t));this._knownNetworks.push(n={ssid:t,flags:null==e?void 0:e.flags,priority:0,password:""})}n.password=i,this.sendEvent(s.WifiEvent.NetworksChanged)}handleForgetAllNetworks(){this._knownNetworks=[],this.disconnect(),this.sendEvent(s.WifiEvent.NetworksChanged)}handleForgetNetwork(e){const[t]=e.jdunpack("s");this._knownNetworks=this._knownNetworks.filter((e=>e.ssid!==t));const[i]=this.ssid.values();t===i&&this.disconnect(),this.sendEvent(s.WifiEvent.NetworksChanged)}handleSetNetworkPriority(e){const[t,i]=e.jdunpack("i16 s"),n=this._knownNetworks.find((e=>e.ssid===i));n&&(n.priority=t),this.sendEvent(s.WifiEvent.NetworksChanged)}}const no={instanceName:"indoor",readingValues:[21.5],streamingInterval:1e3,minReading:-5,maxReading:50,readingError:[.25],variant:s.ThermometerVariant.Indoor},ro={instanceName:"temperature",readingValues:[21.5],streamingInterval:6e4,minReading:-40,maxReading:120,readingError:[.25],variant:s.ThermometerVariant.Outdoor},so={instanceName:"humidity",streamingInterval:6e4,readingValues:[40],readingError:[.1]},ao={instanceName:"medical",readingValues:[37.5],streamingInterval:1e3,minReading:35,maxReading:42,readingError:[.5],variant:s.ThermometerVariant.Body},oo={instanceName:"pressure",readingValues:[1013],readingError:[.4]},co={variant:s.DistanceVariant.Ultrasonic,minReading:.02,maxReading:4,readingValues:[1]},lo={stallTorque:1.8,responseSpeed:.12,minAngle:-90,maxAngle:90},uo={stallTorque:1.8,responseSpeed:.12,minAngle:-135,maxAngle:135},po={stallTorque:1.8,responseSpeed:.24,minAngle:-180,maxAngle:180},mo={readingValues:[0],readingError:[5],streamingInterval:1e3},ho={readingValues:[0],readingError:[.5],streamingInterval:1e3,registerValues:[{code:s.WindSpeedReg.MaxWindSpeed,values:[55]}]},fo={readingValues:[4e3],streamingInterval:1e3,variant:s.ECO2Variant.VOC},go={readingValues:[4e3],streamingInterval:1e3,variant:s.ECO2Variant.NDIR},vo={readingValues:[500],streamingInterval:1e3},yo=[[0,"giggle"],[0,"happy"],[0,"hello"],[0,"mysterious"],[0,"sad"],[0,"slide"],[0,"soaring"],[0,"spring"],[0,"twinkle"],[0,"yawn"]],_o={readingValues:[0],inactiveThreshold:10,activeThreshold:70,intensityValues:[!1],registerValues:[{code:s.SoundLevelReg.MinDecibels,values:[-100]},{code:s.SoundLevelReg.MaxDecibels,values:[-30]}]},bo={readingValues:[new Uint8Array(0)],intensityValues:[!1],registerValues:[{code:s.SoundSpectrumReg.FftPow2Size,values:[5]},{code:s.SoundSpectrumReg.MinDecibels,values:[-100]},{code:s.SoundSpectrumReg.MaxDecibels,values:[-30]},{code:s.SoundSpectrumReg.SmoothingTimeConstant,values:[.8]}]},ko=[{name:"7-segment (4 segments)",serviceClasses:[425810167],services:()=>[new Xs(425810167,{intensityValues:[65535],valueValues:[Dn("ff112233")],registerValues:[{code:s.SevenSegmentDisplayReg.DigitCount,values:[4]},{code:s.SevenSegmentDisplayReg.DecimalPoint,values:[!0]}]})]},{name:"7-segment (8 segments)",serviceClasses:[425810167],services:()=>[new Xs(425810167,{intensityValues:[65535],valueValues:[Dn("0102040810204080")],registerValues:[{code:s.SevenSegmentDisplayReg.DigitCount,values:[8]},{code:s.SevenSegmentDisplayReg.DecimalPoint,values:[!0]}]})]},{name:"accelerometer",serviceClasses:[521405449],services:()=>[new Ys(521405449,{readingValues:[.5,.5,-.5],preferredStreamingInterval:20})]},{name:"barometer",serviceClasses:[504462570],services:()=>[new Ia(504462570,oo)]},{name:"bitradio",serviceClasses:[449414863],services:()=>[new Wa]},{name:"button",serviceClasses:[343122531],services:()=>[new oa]},{name:"button (2x)",serviceClasses:[343122531],services:()=>[new oa("B0"),new oa("B1")]},{name:"button (4x)",serviceClasses:[343122531],services:()=>Array(4).fill(0).map(((e,t)=>new oa(`B${t}`)))},{name:"buzzer",serviceClasses:[458731991],services:()=>[new da]},{name:"capacitive button",serviceClasses:[343122531],services:()=>{const e=new oa,t=new Ja;return e.threshold=t.threshold,[e,t]}},{name:"capacitive button (6x)",serviceClasses:[343122531],services:()=>Array(6).fill(0).map(((e,t)=>new oa(`C${t}`,!0)))},{name:"capacitive button (12x)",serviceClasses:[343122531],services:()=>Array(12).fill(0).map(((e,t)=>new oa(`C${t}`,!0)))},{name:"character screen (LDC, 16x2)",serviceClasses:[523748714],services:()=>[new ca({message:"hello\nworld!"})]},{name:"character screen (OLED, 32x8, RTL)",serviceClasses:[523748714],services:()=>[new ca({message:"hello\nworld!",columns:32,rows:8,variant:s.CharacterScreenVariant.OLED,textDirection:s.CharacterScreenTextDirection.RightToLeft})]},{name:"character screen (Braille, 4x1)",serviceClasses:[523748714],services:()=>[new ca({message:"hi",columns:4,rows:1,variant:s.CharacterScreenVariant.Braille,textDirection:s.CharacterScreenTextDirection.LeftToRight})]},{name:"color",serviceClasses:[372299111],services:()=>[new Ys(372299111,{readingValues:[.5,0,.5],preferredStreamingInterval:1e3})]},{name:"compass",serviceClasses:[364362175],services:()=>[new Oa]},{name:"dimmer (fan)",serviceClasses:[531637829],services:()=>[new Za("fan",{variant:s.DimmerVariant.Fan})]},{name:"dimmer (light)",serviceClasses:[531637829],services:()=>[new Za("light",{variant:s.DimmerVariant.Light})]},{name:"distance (sonar)",serviceClasses:[337275786],services:()=>[new Ia(337275786,co)]},{name:"DMX",serviceClasses:[298814469],services:()=>[new Ua]},{name:"eCO₂",serviceClasses:[379362758],services:()=>[new Ia(379362758,fo)]},{name:"eCO₂ + TVOC",serviceClasses:[379362758,312849815],services:()=>[new Ia(379362758,fo),new Ia(312849815,vo)]},{name:"eCO₂ + humidity + thermometer",serviceClasses:[379362758,382210232,337754823],services:()=>[new Ia(379362758,go),new Ia(382210232,so),new Ia(337754823,no)]},{name:"flex sensor (2.2 inch)",serviceClasses:[524797638],services:()=>[new Ia(524797638,{variant:s.FlexVariant.Linear22Inch,readingValues:[.5]})]},{name:"gyroscope",serviceClasses:[505087730],services:()=>[new Ys(505087730,{readingValues:[0,0,0]})]},{name:"heart rate",serviceClasses:[376204740],services:()=>[new Ia(376204740,{readingValues:[80],streamingInterval:100,variant:s.HeartRateVariant.Finger})]},{name:"humidity",serviceClasses:[382210232],services:()=>[new Ia(382210232,so)]},{name:"humidity + temperature",serviceClasses:[382210232,337754823],services:()=>[new Ia(337754823,ro),new Ia(382210232,so)]},{name:"humidity + temperature + barometer",serviceClasses:[382210232,337754823,504462570],services:()=>[new Ia(337754823,ro),new Ia(382210232,so),new Ia(504462570,oo)]},{name:"illuminance",serviceClasses:[510577394],services:()=>[new Ia(510577394,{readingValues:[1]})]},{name:"joystick (stick + A + B)",serviceClasses:[277836886],services:()=>[new ga({variant:s.JoystickVariant.Thumb,buttonsAvailable:s.JoystickButtons.A|s.JoystickButtons.B})]},{name:"joystick (stick)",serviceClasses:[277836886],services:()=>[new ga({variant:s.JoystickVariant.Thumb})]},{name:"joystick (stick+A)",serviceClasses:[277836886],services:()=>[new ga({variant:s.JoystickVariant.Thumb,buttonsAvailable:s.JoystickButtons.A})]},{name:"joystick (Dpad + all buttons)",serviceClasses:[277836886],services:()=>[new ga({variant:s.JoystickVariant.Gamepad,buttonsAvailable:ua})]},{name:"joystick (only DPad+A/B)",serviceClasses:[277836886],services:()=>[new ga({variant:s.JoystickVariant.Gamepad,buttonsAvailable:ma})]},{name:"RGB LED (RGB through hole)",serviceClasses:[506480888],services:()=>[new La({variant:s.LedVariant.ThroughHole,ledCount:1,color:[255,0,0]})]},{name:"LED (5x blue through hole)",serviceClasses:[506480888],services:()=>[new La({variant:s.LedVariant.ThroughHole,waveLength:450,ledCount:5,color:[0,0,255]})]},{name:"LED matrix (5x5 micro:bit)",serviceClasses:[286070091],services:()=>[new va(5,5,{brightness:128,variant:s.DotMatrixVariant.LED})]},{name:"LED matrix (8x8)",serviceClasses:[286070091],services:()=>[new va(8,8,{brightness:128,variant:s.DotMatrixVariant.LED})]},{name:"LED matrix (11x7)",serviceClasses:[286070091],services:()=>[new va(11,7,{brightness:128,variant:s.DotMatrixVariant.LED})]},{name:"Braille matrix (8x4)",serviceClasses:[286070091],services:()=>[new va(8,4,{variant:s.DotMatrixVariant.Braille})]},{name:"LED pixel ring 10",serviceClasses:[309264608],services:()=>[new Sa({numPixels:10,variant:s.LedPixelVariant.Ring})]},{name:"LED pixel ring 12",serviceClasses:[309264608],services:()=>[new Sa({numPixels:12,variant:s.LedPixelVariant.Ring})]},{name:"LED pixel ring 16",serviceClasses:[309264608],services:()=>[new Sa({numPixels:16,variant:s.LedPixelVariant.Ring})]},{name:"LED pixel ring 24",serviceClasses:[309264608],services:()=>[new Sa({numPixels:24,variant:s.LedPixelVariant.Ring})]},{name:"LED pixel jewel 7",serviceClasses:[309264608],services:()=>[new Sa({numPixels:7,variant:s.LedPixelVariant.Jewel})]},{name:"LED pixel stick 8",serviceClasses:[309264608],services:()=>[new Sa({numPixels:8,variant:s.LedPixelVariant.Stick})]},{name:"LED pixel strip 30",serviceClasses:[309264608],services:()=>[new Sa({numPixels:60,maxPower:1e3,variant:s.LedPixelVariant.Strip})]},{name:"LED pixel strip 60",serviceClasses:[309264608],services:()=>[new Sa({numPixels:60,maxPower:2e3,variant:s.LedPixelVariant.Strip})]},{name:"LED pixel strip 150",serviceClasses:[309264608],services:()=>[new Sa({numPixels:150,maxPower:5e3,variant:s.LedPixelVariant.Strip})]},{name:"LED pixel strip 300",serviceClasses:[309264608],services:()=>[new Sa({numPixels:300,maxPower:5e3,variant:s.LedPixelVariant.Strip})]},{name:"LED pixel matrix (4x4)",serviceClasses:[309264608],services:()=>[new Sa({numPixels:16,variant:s.LedPixelVariant.Matrix})]},{name:"LED pixel matrix (8x8)",serviceClasses:[309264608],services:()=>[new Sa({numPixels:64,variant:s.LedPixelVariant.Matrix})]},{name:"LED pixel matrix (16x4)",serviceClasses:[309264608],services:()=>[new Sa({numPixels:64,numColumns:16,variant:s.LedPixelVariant.Matrix})]},{name:"light level (photo-resistor)",serviceClasses:[400333340],services:()=>[new Ys(400333340,{readingValues:[.5],variant:s.LightLevelVariant.PhotoResistor})]},{name:"line tracker (digital)",serviceClasses:[309087410],services:()=>[new Aa]},{name:"line tracker (2x digital)",serviceClasses:[309087410],services:()=>[new Aa,new Aa]},{name:"line tracker (analog)",serviceClasses:[309087410],services:()=>[new Aa({variant:s.ReflectedLightVariant.InfraredAnalog})]},{name:"matrix keypad (3x4)",serviceClasses:[319172040],services:()=>[new Ta(3,4,["0","1","2","3","4","5","6","7","8","*","0","#"])]},{name:"matrix keypad (4x4)",serviceClasses:[319172040],services:()=>[new Ta(4,4,["0","1","2","A","3","4","5","B","6","7","8","C","*","0","#","D"])]},{name:"matrix keypad (1x4)",serviceClasses:[319172040],services:()=>[new Ta(4,1,["1","2","3","4"])]},{name:"motion",serviceClasses:[293185353],services:()=>[new Ys(293185353,{readingValues:[!1],streamingInterval:1e3})]},{name:"motor",serviceClasses:[385895640],services:()=>[new Ra],resetIn:!0},{name:"protocol test",serviceClasses:[gt],services:()=>[new aa]},{name:"pulse oxymeter",serviceClasses:[280710838],services:()=>[new Ys(280710838,{readingValues:[98],streamingInterval:1e3})]},{name:"oxymeter + heart beat",serviceClasses:[280710838,376204740],services:()=>[new Ys(280710838,{readingValues:[98],streamingInterval:1e3}),new Ia(376204740,{readingValues:[80],streamingInterval:1e3,variant:s.HeartRateVariant.Finger})]},{name:"power",serviceClasses:[530893146],services:()=>[new Ha]},{name:"RNG (random number generator)",serviceClasses:[394916002],services:()=>[new Va]},{name:"rain gauge",serviceClasses:[326323349],services:()=>[new Ea]},{name:"real time clock",serviceClasses:[445323816],services:()=>[new Zs]},{name:"relay (EM/10A)",serviceClasses:[406840918],services:()=>[new Xs(406840918,{intensityValues:[!1],isActive:e=>!!(null==e?void 0:e[0]),variant:s.RelayVariant.Electromechanical,registerValues:[{code:s.RelayReg.MaxSwitchingCurrent,values:[10]}]})]},{name:"relay 4x (SSR/5A)",serviceClasses:[406840918],services:()=>Array(4).fill(0).map((()=>new Xs(406840918,{intensityValues:[!1],isActive:e=>!!(null==e?void 0:e[0]),variant:s.RelayVariant.SolidState,registerValues:[{code:s.RelayReg.MaxSwitchingCurrent,values:[5]}]})))},{name:"rotary encoder",serviceClasses:[284830153],services:()=>[new Na]},{name:"rotary encoder + button",serviceClasses:[284830153,343122531],services:()=>[new Na,new oa]},{name:"rotary potentiometer",serviceClasses:[522667846],services:()=>[new Ia(522667846,{variant:s.PotentiometerVariant.Rotary,readingValues:[.5]})]},{name:"servo",serviceClasses:[318542083],services:()=>[new xa(lo)],resetIn:!0},{name:"servo (270°)",serviceClasses:[318542083],services:()=>[new xa(uo)],resetIn:!0},{name:"servo (360°)",serviceClasses:[318542083],services:()=>[new xa(po)],resetIn:!0},{name:"servo x 2",serviceClasses:[318542083],resetIn:!0,services:()=>Array(2).fill(0).map(((e,t)=>new xa(Object.assign(Object.assign({},lo),{instanceName:`S${t}`}))))},{name:"servo x 4",serviceClasses:[318542083],resetIn:!0,services:()=>Array(4).fill(0).map(((e,t)=>new xa(Object.assign(Object.assign({},lo),{instanceName:`S${t}`}))))},{name:"servo x 6",serviceClasses:[318542083],resetIn:!0,services:()=>Array(6).fill(0).map(((e,t)=>new xa(Object.assign(Object.assign({},lo),{instanceName:`S${t}`}))))},{name:"servo x 16",serviceClasses:[318542083],resetIn:!0,services:()=>Array(16).fill(0).map(((e,t)=>new xa(Object.assign(Object.assign({},lo),{instanceName:`S${t}`}))))},{name:"settings",serviceClasses:[zt],services:()=>[new Fa]},{name:"slider (potentiometer)",serviceClasses:[522667846],services:()=>[new Ia(522667846,{variant:s.PotentiometerVariant.Slider})]},{name:"soil moisture",serviceClasses:[491430835],services:()=>[new Ia(491430835,{readingValues:[.5],streamingInterval:1e3})]},{name:"speech synthesis",serviceClasses:[302307733],services:()=>[new Pa]},{name:"solenoid",serviceClasses:[387392458],services:()=>[new Xs(387392458,{intensityValues:[0]})]},{name:"sound level",serviceClasses:[346888797],services:()=>[new Ia(346888797,_o)]},{name:"sound spectrum",serviceClasses:[360365086],services:()=>[new Ys(360365086,bo)]},{name:"sound player (micro:bit v2 sounds)",serviceClasses:[335795e3],services:()=>[new Ba(yo)]},{name:"switch (slide)",serviceClasses:[450008066],services:()=>[new Ma({variant:s.SwitchVariant.Slide})]},{name:"switch (push button)",serviceClasses:[450008066],services:()=>[new Ma({variant:s.SwitchVariant.PushButton})]},{name:"switch (toggle)",serviceClasses:[450008066],services:()=>[new Ma({variant:s.SwitchVariant.Toggle})]},{name:"switch (tilt)",serviceClasses:[450008066],services:()=>[new Ma({variant:s.SwitchVariant.Tilt})]},{name:"switch (proximity)",serviceClasses:[450008066],services:()=>[new Ma({variant:s.SwitchVariant.Proximity,autoOffDelay:30})]},{name:"thermometer (outdoor)",serviceClasses:[337754823],services:()=>[new Ia(337754823,ro)]},{name:"thermometer (medical)",serviceClasses:[337754823],services:()=>[new Ia(337754823,ao)]},{name:"traffic light",serviceClasses:[365137307],services:()=>[new Da]},{name:"traffic crossing (4 x lights)",serviceClasses:[365137307],services:()=>Array(4).fill(0).map((e=>new Da))},{name:"thermocouple",serviceClasses:[339394657],services:()=>[new Ia(339394657,{readingValues:[550],streamingInterval:1e3,minReading:0,maxReading:1100,readingError:[2.2],variant:s.ThermocoupleVariant.TypeB})]},{name:"TVOC",serviceClasses:[312849815],services:()=>[new Ia(312849815,vo)]},{name:"UV index",serviceClasses:[527306128],services:()=>[new Ia(527306128,{readingValues:[5],streamingInterval:1e3})]},{name:"vibration motor",serviceClasses:[406832290],services:()=>[new to]},{name:"water level",serviceClasses:[343630573],services:()=>[new Ia(343630573,{readingValues:[.5],streamingInterval:1e3})]},{name:"weight scale (jewelry)",serviceClasses:[525160512],services:()=>[new Ia(525160512,{readingValues:[.001],variant:s.WeightScaleVariant.Jewelry,maxReading:.2,minReading:5e-4,readingResolution:1e-5})]},{name:"weight scale (body)",serviceClasses:[525160512],services:()=>[new Ia(525160512,{readingValues:[60],variant:s.WeightScaleVariant.Body,maxReading:180,readingResolution:.1})]},{name:"weight scale (food)",serviceClasses:[525160512],services:()=>[new Ia(525160512,{readingValues:[.5],variant:s.WeightScaleVariant.Food,maxReading:6,readingResolution:.001})]},{name:"wind direction",serviceClasses:[409725227],services:()=>[new Ia(409725227,mo)]},{name:"wind speed",serviceClasses:[458824639],services:()=>[new Ia(458824639,ho)]},{name:"weather station (wind speed, direction, rain)",serviceClasses:[458824639,409725227,326323349],services:()=>[new Ia(458824639,ho),new Ia(409725227,mo),new Ea]},{name:"chassis (motor x 2 + sonar + light)",serviceClasses:[337275786,309264608,385895640],services:()=>[new Ra("L"),new Ra("R"),new Ia(337275786,co),new Sa({numPixels:5,variant:s.LedPixelVariant.Stick,instanceName:"lights"})]},{name:"railway crossing (2 x lights, 2 x servos, 1 x buffer)",serviceClasses:[365137307,318542083,458731991],services:()=>[new Da({instanceName:"left light"}),new xa({minAngle:0,maxAngle:90,instanceName:"left arm"}),new Da({instanceName:"right light"}),new xa({minAngle:0,maxAngle:90,instanceName:"right arm"}),new da({instanceName:"bell"})]},{name:"Arcade controller (6 x buttons)",serviceClasses:[343122531],services:()=>[new oa("Left"),new oa("Up"),new oa("Right"),new oa("Down"),new oa("A"),new oa("B")]},{name:"micro:bit v2",serviceClasses:[286070091,343122531,521405449,346888797,400333340,458731991,335795e3],services:()=>[new va(5,5),new oa("A"),new oa("B"),new Ys(521405449,{readingValues:[.5,.5,-.5]}),new Ia(346888797,_o),new Ys(400333340,{readingValues:[.5],variant:s.LightLevelVariant.LEDMatrix}),new da,new Ba(yo)]},{name:"power + humidity",serviceClasses:[530893146,382210232],services:()=>[new Ha,new Ia(382210232,so)],factory:e=>{const t=new sa("power+humidity",[e[0]]),i=t.service(1);return i.enabled.on("change",(()=>{const n=!!i.enabled.values()[0];console.log("power: "+(n?"on":"off")),n?t.updateServices(e):t.updateServices([e[0]])})),t}},{name:"HID keyboard",serviceClasses:[414210922],services:()=>[new qa]},{name:"HID mouse",serviceClasses:[411425820],services:()=>[new Qa]},{name:"WiFi (virtual)",serviceClasses:[413852154],services:()=>[new io]},{name:"Azure IoT Hub Health",serviceClasses:[342028028],services:()=>[new eo]}];function wo(e,t){var i;const n=t.services();n.forEach((e=>e.lock()));const r=function(e,t){const i=e.serviceProviders().filter((e=>e.template===t));return Pn([wn(In(t+i.length),32),wn(In(t+i.length+1),32)]).slice(2)}(e,t.name),s={resetIn:t.resetIn,deviceId:r},a=(null===(i=t.factory)||void 0===i?void 0:i.call(t,n))||new sa(t.name,n,s);return e.addServiceProvider(a),a}function So(e){return ko.find((t=>1===t.serviceClasses.length&&t.serviceClasses[0]===e))}class To extends Es{constructor(e){super(),this.service=e}get device(){return this.service.device}get bus(){return this.device.bus}toString(){return`client of ${this.service}`}}class Ro extends To{constructor(e){super(e),this._roles=[],this._needRefresh=!0,this._lastRefreshAttempt=0;const t=e.event(s.SystemEvent.Change);this.startRefreshRoles=er(this.refreshRoles.bind(this),200),this.mount(t.subscribe("event",this.handleChange.bind(this))),this.mount(this.bus.subscribe("deviceAnnounce",this.assignRoles.bind(this))),this.mount(e.device.subscribe("disconnect",(()=>{var e;(null===(e=this.bus.roleManager)||void 0===e?void 0:e.service)===this.service&&this.bus.setRoleManagerService(void 0)}))),this.mount(this.clearRoles.bind(this)),this.mount(this.bus.subscribe("selfAnnounce",this.handleSelfAnnounce.bind(this)))}handleSelfAnnounce(){this._needRefresh&&this.bus.timestamp-this._lastRefreshAttempt>1500&&this.startRefreshRoles()}get roles(){return this._roles}async handleChange(){this.startRefreshRoles()}async refreshRoles(){this.unmounted||(this._needRefresh=!1,await this.collectRoles(),this.unmounted||this.assignRoles())}async collectRoles(){this._lastRefreshAttempt=this.bus.timestamp;const e=JSON.stringify(this._roles);try{const t=new Ds(this.bus);await this.service.sendPacketAsync(t.openCommand(s.RoleManagerCmd.ListRequiredRoles),!0);const i=[];for(const e of await t.readData(1e3)){const[t,n,r,s]=Hr(e,"b[8] u32 u8 s"),a={deviceId:Mn(t),serviceClass:n,serviceIndex:r,name:s};i.push(a)}JSON.stringify(i)!==e&&(this._roles=i,this.emit("change"))}catch(e){this._needRefresh=!0,this.emit("error",e)}}assignRoles(){this.bus.services().filter((e=>Ro.unroledSrvs.indexOf(e.serviceClass)<0)).forEach((e=>this.assignRole(e)))}assignRole(e){const t=e.device.deviceId,i=e.serviceIndex,n=this._roles.find((e=>e.deviceId===t&&e.serviceIndex===i));e.role=null==n?void 0:n.name}clearRoles(){this.bus.services().forEach((e=>e.role=void 0))}hasRoleForService(e){var t;const{serviceClass:i}=e;return!!(null===(t=this._roles)||void 0===t?void 0:t.find((e=>e.serviceClass===i)))}compatibleRoles(e){var t;const{serviceClass:i}=e;return null===(t=this._roles)||void 0===t?void 0:t.filter((e=>e.serviceClass===i))}role(e){return this._roles.find((t=>t.serviceIndex>0&&t.name===e))}async setRole(e,t){const{device:i,serviceIndex:n}=e,{deviceId:r}=i,a=t&&this._roles.find((e=>e.name===t));if(a&&a.deviceId===r&&a.serviceIndex===n)console.debug("role unmodified, skipping");else{{const e=qr("b[8] u8 s",[Dn(r),n,t||""]);await this.service.sendPacketAsync(hs.from(s.RoleManagerCmd.SetRole,e),!0)}if(a){console.debug(`clear role ${a.deviceId}:${a.serviceIndex}`);const e=qr("b[8] u8 s",[Dn(a.deviceId),a.serviceIndex,""]);await this.service.sendPacketAsync(hs.from(s.RoleManagerCmd.SetRole,e),!0)}}}startSimulators(){var e;if(!(null===(e=this._roles)||void 0===e?void 0:e.length))return;const t=nr(this._roles.filter((e=>!this.bus.device(e.deviceId,!0))).map((e=>({role:e,hostDefinition:So(e.serviceClass)}))).filter((e=>!!e.hostDefinition)),(e=>e.role.name.split("/",1)[0]||""));Object.keys(t).forEach((e=>{const i=t[e];e?wo(this.bus,{name:"",serviceClasses:[],services:()=>Gn(i.map((e=>e.hostDefinition.services())))}):i.forEach((e=>wo(this.bus,e.hostDefinition)))}))}}Ro.unroledSrvs=[K,Pt,je];class Co extends ws{constructor(e,t){super(),this._transports=[],this._bridges=[],this._devices=[],this._lastPingLoggerTime=0,this._lastResetInTime=0,this._restartCounter=0,this._minLoggerPriority=s.LoggerPriority.Debug,this._gcDevicesFrozen=0,this._serviceProviders=[],this._streaming=!1,this._passive=!1,this.selfDeviceId=(null==t?void 0:t.deviceId)||xs(),this.scheduler=(null==t?void 0:t.scheduler)||new js,this.parentOrigin=(null==t?void 0:t.parentOrigin)||"*",this.stats=new ia(this),null==e||e.filter((e=>!!e)).map((e=>this.addTransport(e))),this.on("selfAnnounce",this.handleSelfAnnounce.bind(this)),this.on("deviceAnnounce",this.handleRealTimeClockSync.bind(this)),this.on("deviceChange",this.handleRoleManager.bind(this)),this.start()}configureBroadcastChannel(){if("undefined"==typeof BroadcastChannel)return;const e=new BroadcastChannel("jacdac"),t=this.subscribe("connectionState",(()=>{e.postMessage({id:this.selfDevice.shortId,event:"connectionState",transports:this._transports.map((e=>({type:e.type,connectionState:e.connectionState})))})})),i=()=>{e.postMessage({id:this.selfDevice.shortId,event:"visibilitychange",visibilityState:document.visibilityState})},n=async e=>{const{data:t}=e,{event:i,transports:n,visibilityState:r}=t;switch(i){case"visibilitychange":"visible"===r?await this.disconnect():(await this.delay(2e3),await this.connect(!0));break;case"connectionState":n.filter((e=>e.connectionState===s.ConnectionState.Connecting)).forEach((e=>{this.transports.filter((t=>t.type===e.type)).forEach((e=>e.disconnect()))}))}};e.addEventListener("message",n,!1),document.addEventListener("visibilitychange",i),this._unsubscribeBroadcastChannel=()=>{t(),document.removeEventListener("visibilitychange",i),e.removeEventListener("message",n),e.close()},i()}get transports(){return this._transports.slice(0)}addTransport(e){this._transports.indexOf(e)>-1||(this._transports.push(e),e.bus=this,e.bus.on("connecting",(()=>this.preConnect(e))))}get bridges(){return this._bridges.slice(0)}addBridge(e){return this._bridges.indexOf(e)<0&&(console.debug("add bridge",{bridge:e}),this._bridges.push(e),this.emit("change")),()=>this.removeBridge(e)}removeBridge(e){const t=this._bridges.indexOf(e);t>-1&&(console.debug("remove bridge",{bridge:e}),this._bridges.splice(t,1),this.emit("change"))}get passive(){return this._passive}set passive(e){e!==this._passive&&(this._passive=e,this.emit("change"))}preConnect(e){return Promise.all(this._transports.filter((t=>t!==e)).map((e=>e.disconnect())))}async connect(e){if(!this.connected){for(const t of this._transports)if(await t.connect(e),t.connected)break;this.emit("change")}}async disconnect(){for(const e of this._transports)await e.disconnect();this.emit("change")}start(){this.configureBroadcastChannel(),this._announceInterval||(this._announceInterval=this.scheduler.setInterval((()=>{this.passive||this.emit("selfAnnounce")}),499)),this.backgroundRefreshRegisters=!0,this._gcInterval||(this._gcInterval=this.scheduler.setInterval((()=>this.gcDevices()),5e3))}async stop(){await this.disconnect(),this._unsubscribeBroadcastChannel&&(this._unsubscribeBroadcastChannel(),this._unsubscribeBroadcastChannel=void 0),this._announceInterval&&(this.scheduler.clearInterval(this._announceInterval),this._announceInterval=void 0),this.safeBoot=!1,this.backgroundRefreshRegisters=!1,this._gcInterval&&(this.scheduler.clearInterval(this._gcInterval),this._gcInterval=void 0)}async dispose(){console.debug(`${this.id}: disposing.`),await this.stop(),this._transports.forEach((e=>e.dispose()))}get safeBoot(){return!!this._safeBootInterval}set safeBoot(e){e&&!this._safeBootInterval?(this._safeBootInterval=this.scheduler.setInterval((()=>{this._devices.some((e=>e.flashing))||qs(this)}),50),this.emit("change")):!e&&this._safeBootInterval&&(this.scheduler.clearInterval(this._safeBootInterval),this._safeBootInterval=void 0,this.emit("change"))}get connected(){return this._transports.some((e=>e.connected))}get disconnected(){return this._transports.every((e=>e.disconnected))}clear(e=0){var t;(null===(t=this._serviceProviders)||void 0===t?void 0:t.length)&&(this._serviceProviders.forEach((e=>e.bus=void 0)),this._serviceProviders=[]);const i=this._devices;(null==i?void 0:i.length)&&(this._devices=[],i.forEach((e=>{e.disconnect(),this.emit("deviceDisconnect",e),this.emit("deviceChange",e)}))),this.resetTime(e)}get id(){return this.nodeKind}get name(){return"bus"}get friendlyName(){return this.name}get qualifiedName(){return this.name}get nodeKind(){return"bus"}get roleManager(){return this._roleManagerClient}setRoleManagerService(e){var t;this._roleManagerClient&&this._roleManagerClient.service!==e&&(this._roleManagerClient.unmount(),this._roleManagerClient=void 0),e&&e!==(null===(t=this._roleManagerClient)||void 0===t?void 0:t.service)&&(this._roleManagerClient=new Ro(e),this.emit("roleManagerChange"),this.emit("change"),this._roleManagerClient.startRefreshRoles())}toString(){var e,t;return`bus: ${(null===(e=this._devices)||void 0===e?void 0:e.length)||0} devices, ${(null===(t=this._transports)||void 0===t?void 0:t.filter((e=>e.connected)).map((e=>e.type)).join(", "))||""}`}describe(){return`\ntransport:\n${this._transports.map((e=>`  ${e.type}: ${e.connectionState}`)).join("\n")}\n\n${this.devices({ignoreInfrastructure:!0}).map((e=>{var t,i;return`device: \n  id: ${e.shortId} (0x${e.deviceId})\n  product: ${e.productIdentifier?`${(null===(t=yr(e.productIdentifier))||void 0===t?void 0:t.id)||"?"} (0x${null===(i=e.productIdentifier)||void 0===i?void 0:i.toString(16)})`:""}\n  firmware_version: ${e.firmwareVersion||""}\n  services:\n${e.services().slice(1).map((e=>{var t;return[`    ${(null===(t=e.specification)||void 0===t?void 0:t.shortName)||e.name} (0x${e.serviceClass.toString(16)})`,...e.registers().filter((e=>!!e.data)).map((e=>{var t;return`        ${(null===(t=e.specification)||void 0===t?void 0:t.kind)||"reg"} ${e.name}: ${e.humanValue} (${Mn(e.data)})`})),...e.events.map((e=>`        event ${e.name}: ${e.count}`))].join("\n")})).join("\n")}\n`})).join("\n")}`}node(e){return(()=>{var t,i,n,r,s,a,o,d;const c=/^(?<type>bus|device|service|register|event|field)(:(?<dev>\w+)(:(?<srv>\w+)(:(?<reg>\w+(:(?<idx>\w+))?))?)?)?$/.exec(e);if(!c)return;const l=c.groups.type,u=c.groups.dev,p=parseInt(c.groups.srv,16),m=parseInt(c.groups.reg,16),h=parseInt(c.groups.idx,16);switch(l){case"bus":return this;case"device":return this.device(u,!0);case"service":return null===(t=this.device(u,!0))||void 0===t?void 0:t.service(p);case"register":return null===(n=null===(i=this.device(u,!0))||void 0===i?void 0:i.service(p))||void 0===n?void 0:n.register(m);case"event":return null===(s=null===(r=this.device(u,!0))||void 0===r?void 0:r.service(p))||void 0===s?void 0:s.event(m);case"field":return null===(d=null===(o=null===(a=this.device(u,!0))||void 0===a?void 0:a.service(p))||void 0===o?void 0:o.register(m))||void 0===d?void 0:d.fields[h]}console.info(`node ${e} not found`)})()}resetTime(e=0){this.scheduler.resetTime(e),this.emit("change")}get timestamp(){return this.scheduler.timestamp}get streaming(){return this._streaming}set streaming(e){this._streaming=e}delay(e,t){return new Promise((i=>this.scheduler.setTimeout((()=>i(t)),e)))}get minLoggerPriority(){return this._minLoggerPriority}set minLoggerPriority(e){e!==this._minLoggerPriority&&(this._minLoggerPriority=e,this.emit("change"))}get parent(){}async handleRealTimeClockSync(e){e.hasService(445323816)&&await Zs.syncTime(this)}handleRoleManager(){if(this.roleManager)return;const e=this.services({serviceClass:Pt})[0];this.setRoleManagerService(e)}async sendPacketAsync(e){e.timestamp=this.timestamp,fn.trace&&(e.meta.TRACE=fs()),this.passive||(this.emit("packetSend",e),await Promise.all(this._transports.map((t=>t.sendPacketAsync(e)))))}get firmwareBlobs(){return this._firmwareBlobs}set firmwareBlobs(e){this._firmwareBlobs=e,this.emit("firmwareBlobsChange"),this.emit("change")}devices(e){if((null==e?void 0:e.serviceName)&&(null==e?void 0:e.serviceClass)>-1)throw Error("serviceClass and serviceName cannot be used together");const t=(null==e?void 0:e.serviceClass)>-1?null==e?void 0:e.serviceClass:as(null==e?void 0:e.serviceName);let i=this._devices.slice(0);return t>-1&&(i=i.filter((e=>e.hasService(t)))),(null==e?void 0:e.ignoreInfrastructure)&&(i=i.filter((e=>e.deviceId!==this.selfDeviceId&&e.serviceClasses.indexOf(Ie)<0))),(null==e?void 0:e.announced)&&(i=i.filter((e=>e.announced))),(null==e?void 0:e.ignoreSimulators)&&(i=i.filter((e=>!this.findServiceProvider(e.deviceId)))),(null==e?void 0:e.productIdentifier)&&(i=i.filter((e=>!!e.productIdentifier))),(null==e?void 0:e.physical)&&(i=i.filter((e=>!!e.isPhysical))),i}serviceProviders(){return this._serviceProviders.slice(0)}findServiceProvider(e){return this._serviceProviders.find((t=>t.deviceId===e))}addServiceProvider(e){return e&&this._serviceProviders.indexOf(e)<0&&(this._serviceProviders.push(e),e.bus=this,this.emit("serviceProviderAdded",e),this.emit("change")),this.device(e.deviceId)}removeServiceProvider(e){if(!e)return;const t=this._serviceProviders.indexOf(e);t>-1&&(this.removeDevice(e.deviceId),this._serviceProviders.splice(t,1),e.bus=void 0,this.emit("serviceProviderRemoved",e),this.emit("change"))}removeDevice(e){const t=this._devices.findIndex((t=>t.deviceId===e));if(t>-1){const e=this._devices[t];this._devices.splice(t,1),e.disconnect(),this.emit("deviceDisconnect",e),this.emit("deviceChange",e)}}get children(){return this.devices()}services(e){return Gn(this.devices(e).map((t=>t.services(e))))}device(e,t,i){if("0000000000000000"===e&&!t)return void console.warn("jadac: trying to access device 0000000000000000");let n=this._devices.find((t=>t.deviceId==e));if(!n&&!t){if(this.devicesFrozen)return void console.debug("info",`devices frozen, dropping ${e}`);n=new Us(this,e,i),this._devices.push(n),console.debug(`${e===this.selfDeviceId?"self":"new"} device ${n.shortId} (${e})`),this._devices.sort(((e,t)=>bn(e.deviceId,t.deviceId))),this.emit("deviceConnect",n),this.emit("deviceChange",n),this.emit("change")}return n}pushDeviceFrozen(){this._gcDevicesFrozen++}popDeviceFrozen(){this._gcDevicesFrozen=Math.max(0,this._gcDevicesFrozen-1)}get devicesFrozen(){return this._gcDevicesFrozen>0}gcDevices(){if(this.emit("deviceClean"),this.devicesFrozen)return void console.debug("devices frozen");const e=this.timestamp-1500,t=this.timestamp-5e3;for(let i=0;i<this._devices.length;++i){const n=this._devices[i];n.lastSeen<t?(this._devices.splice(i,1),i--,this.disconnectDevice(n)):n.lastSeen<e&&(n.lost=!0)}}disconnectDevice(e){e.disconnect(),this.emit("deviceDisconnect",e),this.emit("deviceChange",e),this.emit("change")}processPacket(e){if(!e.isMultiCommand&&!e.device&&(e.device=this.device(e.deviceIdentifier,!1,e),!e.device))return void(fn.diagnostics&&console.debug(`unknown pkt device ${e.deviceIdentifier}`,{pkt:e}));this.emit("packetPreProcess",e);let t=!1;if(e.device)if(e.isCommand){if(e.deviceIdentifier==this.selfDeviceId&&e.requiresAck){const t=hs.onlyHeader(e.crc);t.serviceIndex=63,t.deviceIdentifier=this.selfDeviceId,t.sendReportAsync(this.selfDevice)}e.device.processPacket(e)}else e.device.lastSeen=e.timestamp,0==e.serviceIndex&&(0==e.serviceCommand?(t=!0,e.device.processAnnouncement(e)):e.isMultiCommand&&e.serviceCommand==(8192|s.ControlReg.ResetIn)&&(this._lastResetInTime=this.timestamp)),e.device.processPacket(e);else;this.emit("packetProcess",e),t?this.emit("packetReceiveAnnounce",e):(this.emit("packetReceive",e),e.isEvent?this.emit("packetEvent",e):e.isReport&&this.emit("packetReport",e))}get selfDevice(){return this.device(this.selfDeviceId)}handleSelfAnnounce(){return Promise.all([this.sendAnnounce(),this.sendResetIn(),this.sendPingLoggers()]).then((()=>{}))}async sendAnnounce(){this._restartCounter<15&&this._restartCounter++;const e=hs.jdpacked(0,"u32 r: u32",[256|this._restartCounter,[[Ie]]]);e.serviceIndex=0,e.deviceIdentifier=this.selfDeviceId,await e.sendReportAsync(this.selfDevice)}get lastResetInTime(){return this._lastResetInTime}async sendResetIn(){if(!this.devices({ignoreInfrastructure:!0}).length)return;this._lastResetInTime=this.timestamp;const e=hs.jdpacked(8192|s.ControlReg.ResetIn,"u32",[2e6]);await e.sendAsMultiCommandAsync(this,K)}async sendStopStreaming(){console.debug("bus: stop streaming");const e=this.services({announced:!0,ignoreInfrastructure:!0}).map((e=>e.readingRegister&&e.register(s.SensorReg.StreamingSamples))).filter((e=>!!e));await Promise.all(e.map((e=>e.sendSetPackedAsync([0]))))}async sendPingLoggers(){if(this._minLoggerPriority<s.LoggerPriority.Silent&&this.timestamp-this._lastPingLoggerTime>2400&&this.devices({ignoreInfrastructure:!0,serviceClass:je}).length>0){this._lastPingLoggerTime=this.timestamp;const e=hs.jdpacked(8192|s.LoggerReg.MinPriority,"u8",[this._minLoggerPriority]);await e.sendAsMultiCommandAsync(this,je)}}get backgroundRefreshRegisters(){return!!this._refreshRegistersInterval}set backgroundRefreshRegisters(e){!!e!==this.backgroundRefreshRegisters&&(e?this._refreshRegistersInterval=this.scheduler.setInterval(this.handleRefreshRegisters.bind(this),50):(this._refreshRegistersInterval&&this.scheduler.clearInterval(this._refreshRegistersInterval),this._refreshRegistersInterval=void 0))}handleRefreshRegisters(){const e=this._devices.filter((e=>e.announced&&!e.lost));if(!e.length||e.some((e=>e.flashing)))return;const t=Gn(e.map((e=>Gn(e.services({specification:!0}).map((e=>e.registers().filter((e=>this._streaming&&e.code===s.SystemReg.Reading||e.listenerCount("reportReceive")>0||e.listenerCount("reportUpdate")>0)).filter((e=>!e.data||!(Fr(e.specification)||e.code===s.SystemReg.StatusCode||e.code===s.SystemReg.ReadingError))).filter((e=>{var t;return!(null===(t=e.specification)||void 0===t?void 0:t.optional)||e.lastGetAttempts<3}))))))));for(const e of t){const{service:t,specification:i}=e,n=!e.data,r=this.timestamp-e.lastGetTimestamp,a=e.lastGetAttempts;if(Rr(i)&&Sr(t.specification)){const a=t.register(s.SensorReg.StreamingInterval);let o=null==a?void 0:a.uintValue;if(void 0===o){const e=t.register(s.SensorReg.StreamingPreferredInterval);o=null==e?void 0:e.uintValue,void 0===o&&(a&&!a.data&&this.timestamp-a.lastGetTimestamp>5e3&&a.sendGetAsync(),e&&!e.data&&this.timestamp-e.lastGetTimestamp>5e3&&e.sendGetAsync())}void 0===o&&(o=i.preferredInterval||50);const d=t.register(s.SensorReg.StreamingSamples);this.timestamp-d.lastSetTimestamp>255*o>>1&&d.sendSetPackedAsync([255]),n&&r>1e3&&e.sendGetAsync()}else{r>(!!(null==i?void 0:i.volatile)?Math.min(5e3,1e3*(1<<a)):Math.min(6e4,(n?400:5001)*(1<<a)))&&e.sendGetAsync()}}this._serviceProviders.map((e=>e.emit("refresh")))}withTimeout(e,t){return new Promise(((i,n)=>{let r=!1;const s=setTimeout((()=>{r||(r=!0,this._transports.some((e=>e.connected))?(this.emit("timeout"),this.emit("error","Timeout ("+e+"ms)"),i(void 0)):(this.emit("timeoutDisconnect"),i(void 0)))}),e);t.then((e=>{r?this.emit("late"):(r=!0,clearTimeout(s),i(e))}),(e=>{r||(r=!0,clearTimeout(s),n(e))}))}))}}class Io extends Es{constructor(e,t=1){super(),this.bus=e,this.speed=t,this._busStartTimestamp=0,this._index=0,this._lastProgressEmit=0,this.tick=this.tick.bind(this),this.mount((()=>this.stop()))}get running(){return!!this._interval}get trace(){return this._trace}set trace(e){e!==this._trace&&(this.stop(),this._trace=e,this.emit("change"))}get elapsed(){return(this.bus.timestamp-this._busStartTimestamp)*this.speed}get progress(){return this.trace?Math.max(0,Math.min(1,this.elapsed/this.trace.duration)):0}get length(){var e;return(null===(e=this.trace)||void 0===e?void 0:e.length)||0}start(){!this._interval&&this._trace&&(this._busStartTimestamp=this.bus.timestamp,this._index=0,this._interval=this.bus.scheduler.setInterval(this.tick,50),this.emit("change"),this.emitProgress(!0))}stop(){this._interval&&(this.bus.scheduler.clearInterval(this._interval),this._interval=void 0,this.emitProgress(!0),this.emit("change"))}tick(){var e;if(!this._trace)return;const t=this.elapsed,i=this.trace.packets,n=(null===(e=i[0])||void 0===e?void 0:e.timestamp)||0;for(;this._index<i.length;){const e=i[this._index],r=e.timestamp-n;if(r>t)break;const s=e.clone();s.replay=!0,s.timestamp=this._busStartTimestamp+r,this.bus.processPacket(s),this._index++}this.emitProgress(),this._index>=i.length&&this.stop()}emitProgress(e){(e||this.bus.timestamp-this._lastProgressEmit>250)&&(this.emit("progress",this.progress),this._lastProgressEmit=this.bus.timestamp)}}function Eo(e,t){if(!t)return{source:t,props:{grouping:!0},filter:()=>!0};const i=new Set,n=new Set,r=new Set,a=new Set;let o,d,c,l,u,p,m,h,f,g;const v={};let y,_,b,k,w=!0,S=!0,T=!0,R=!0;t.split(/\s+/g).forEach((t=>{var s;const[,C,,I]=/([a-z\-_]+)([:=]([^\s]+))?/.exec(t)||[];switch(C||""){case"kind":case"k":if(!I)break;i.add(I.toLowerCase());break;case"service":case"srv":{if(!I)break;const e=kr(I),t=(null==e?void 0:e.classIdentifier)||parseInt(I,16);void 0===t||isNaN(t)||n.add(t);break}case"announce":case"a":d=E(I);break;case"repeated-announce":case"ra":o=E(I);break;case"self":k=E(I);break;case"reset-in":case"ri":case"resetin":c=E(I);break;case"errors":b=E(I);break;case"min-priority":case"minpri":case"minpriority":case"mi":l=E(I);break;case"requires-ack":case"ack":m=E(I);break;case"collapse-ack":S=E(I);break;case"device":case"dev":case"to":case"from":{if(!I)break;const t=null===(s=e.devices().find((e=>e.shortId===I||e.name===I)))||void 0===s?void 0:s.deviceId;if(t){const e=v[t]||(v[t]={from:!1,to:!1});"from"===C?e.from=!0:"to"===C&&(e.to=!0)}break}case"pid":case"product-identifier":{if(!I)return;const e=parseInt(I.replace(/^0?x/,""),16);isNaN(e)||a.add(e);break}case"pkt":case"reg":case"register":case"cmd":case"command":case"ev":case"event":{if(!I)return;const e=parseInt(I.replace(/^0?x/,""),16);isNaN(e)||r.add(e.toString(16)),r.add(I);break}case"reg-get":case"get":u=E(I);break;case"reg-set":case"set":p=E(I);break;case"log":h=E(I);break;case"before":f=A(I);break;case"after":g=A(I);break;case"grouping":w=E(I);break;case"pipes":y=E(I);break;case"collapse-pipe":case"collapse-pipes":T=E(I);break;case"collapse-get":case"collapse-gets":R=E(I);break;case"port":_=parseInt(I)}}));const C={announce:d,repeatedAnnounce:o,resetIn:c,minPriority:l,requiresAck:m,collapseAck:S,log:h,productIdentifiers:!!a.size&&Array.from(a.keys()),flags:!!i.size&&Array.from(i.keys()),regGet:u,regSet:p,devices:v,selfDevice:k,serviceClasses:!!n.size&&Array.from(n.keys()),pkts:!!r.size&&Array.from(r.keys()),before:f,after:g,grouping:w,pipes:y,collapsePipes:T,collapseGets:R,port:_,errors:b},I=function(e){const{announce:t,repeatedAnnounce:i,resetIn:n,minPriority:r,requiresAck:a,log:o,productIdentifiers:d,flags:c,regGet:l,regSet:u,devices:p,selfDevice:m,serviceClasses:h,pkts:f,before:g,after:v,pipes:y,port:_,errors:b}=e,k=[];void 0!==g&&k.push((e=>e.timestamp<=g));void 0!==v&&k.push((e=>e.timestamp>=v));void 0!==t&&k.push((e=>e.isAnnounce===t));void 0!==i&&k.push((e=>(!e.isAnnounce||e.isRepeatedAnnounce)===i));void 0!==n&&k.push((e=>!(!e.isRegisterSet||e.serviceClass!==K||e.registerIdentifier!==s.ControlReg.ResetIn)===n));void 0!==r&&k.push((e=>(e.isRegisterSet&&e.serviceClass==je&&e.registerIdentifier===s.LoggerReg.MinPriority)===r));void 0!==a&&k.push((e=>e.requiresAck===a));c&&k.push((e=>w(e)));void 0!==y&&k.push((e=>e.isPipe));void 0!==_&&k.push((e=>e.pipePort===_));void 0!==l&&void 0!==u?k.push((e=>e.isRegisterGet===l&&e.isRegisterSet===u)):void 0!==l?k.push((e=>e.isRegisterGet===l)):void 0!==u&&k.push((e=>e.isRegisterSet===u));void 0!==o&&k.push((e=>(e.serviceClass===je&&e.isReport)===o));void 0!==m&&k.push((e=>{const{device:t}=e;return!t||t===t.bus.selfDevice===m}));Object.keys(p).length&&k.push((e=>{if(!e.device)return!1;const t=p[e.device.deviceId];return!!t&&(!t.from||!e.isCommand)&&(!t.to||e.isCommand)}));h&&k.push((e=>h.some((t=>_r(e.serviceClass,t)))));f&&k.push((e=>{var t,i;return f.indexOf(null===(t=e.decoded)||void 0===t?void 0:t.info.identifier.toString(16))>-1||f.indexOf(null===(i=e.decoded)||void 0===i?void 0:i.info.name)>-1}));d&&k.push((e=>{var t;const i=null===(t=e.device)||void 0===t?void 0:t.productIdentifier;return void 0===i||d.indexOf(i)>-1}));void 0!==b&&k.push((e=>{var t;return!!(null===(t=e.decoded)||void 0===t?void 0:t.error)===b}));function w(e){var t;const i=null===(t=e.decoded)||void 0===t?void 0:t.info.kind;return!!i&&c.indexOf(i)>-1}return e=>k.every((t=>t(e)))}(C);function E(e){return"false"!==e&&"no"!==e&&("true"===e||"yes"===e||!e||void 0)}function A(e){const t=parseInt(e);return isNaN(t)?void 0:t}return{source:t,props:C,filter:I}}function Ao(e){switch(e){case"setall":return 208;case"fade":return 209;case"fadehsv":return 210;case"rotfwd":return 211;case"rotback":return 212;case"show":case"wait":return 213;case"range":return 214;case"mode":return 215;case"tmpmode":return 216;case"setone":return 207;case"mult":return 256;default:return}}function No(e){return 32==e||13==e||10==e||9==e}class xo extends Es{constructor(){super(),this.bridgeId="bridge-"+xs(),this.packetSent=0,this.packetProcessed=0,this.handleSendPacket=this.handleSendPacket.bind(this)}get bus(){return this._bus}set bus(e){e!==this._bus&&(this._bus&&this.unmount(),this._bus=e,this._bus&&(this.mount(this._bus.subscribe("packetProcess",this.handleSendPacket)),this.mount(this._bus.subscribe("packetSend",this.handleSendPacket)),this.mount(this._bus.addBridge(this))),this.emit("change"))}receiveFrame(e){if(!this._bus)return;const t=hs.fromFrame(e,this.bus.timestamp);this.dispatchPackets(t)}receivePacket(e){if(!this._bus)return;const t=hs.fromBinary(e,this.bus.timestamp);t&&this.dispatchPackets([t])}dispatchPackets(e){if(null==e?void 0:e.length){this.packetProcessed+=e.length;for(const t of e)t.sender=this.bridgeId,this.bus.sendPacketAsync(t),this.bus.processPacket(t)}}handleSendPacket(e){this._bus&&e.sender!==this.bridgeId&&(this.packetSent++,this.sendPacket(e.toBuffer()))}}function Fo(){try{return"undefined"!=typeof navigator&&!!navigator.bluetooth&&!!navigator.bluetooth.requestDevice}catch(e){return!1}}class Po extends ta{constructor(){super("bluetooth",{checkPulse:!0}),this.handleDisconnected=this.handleDisconnected.bind(this),this.handleCharacteristicChanged=this.handleCharacteristicChanged.bind(this)}async transportConnectAsync(e){var t;if(e){const e=await function(){var e;if(!fn.webBluetooth)return Promise.resolve([]);try{return(null===(e=null===navigator||void 0===navigator?void 0:navigator.bluetooth)||void 0===e?void 0:e.getDevices())||Promise.resolve([])}catch(e){return fn.diagnostics&&console.warn(e),Promise.resolve([])}}();this._device=null==e?void 0:e[0]}else{const e=await function(e){var t,i;if(!fn.webBluetooth)return Promise.resolve(void 0);try{return console.debug("bluetooth request",{options:e}),null===(i=null===(t=null===navigator||void 0===navigator?void 0:navigator.bluetooth)||void 0===t?void 0:t.requestDevice)||void 0===i?void 0:i.call(t,e)}catch(e){return void(fn.diagnostics&&console.warn(e))}}({filters:[{namePrefix:"BBC micro:bit"}],optionalServices:["f8530001-a97f-49f5-a554-3e373fbea2d5"]});this._device=e}if(!(null===(t=this._device)||void 0===t?void 0:t.gatt))throw new Error("Device not found");this._device.addEventListener("gattserverdisconnected",this.handleDisconnected,!1),this._server=await this._device.gatt.connect(),this._service=await this._server.getPrimaryService("f8530001-a97f-49f5-a554-3e373fbea2d5"),this._rxCharacteristic=await this._service.getCharacteristic("f8530002-a97f-49f5-a554-3e373fbea2d5"),this._txCharacteristic=await this._service.getCharacteristic("f8530003-a97f-49f5-a554-3e373fbea2d5"),this._rxCharacteristic.addEventListener("characteristicvaluechanged",this.handleCharacteristicChanged,!1),await this._rxCharacteristic.startNotifications()}async transportSendPacketAsync(e){if(!this._txCharacteristic)return void console.debug("trying to send Bluetooth packet while disconnected");const t=e.toBuffer(),i=t.length,n=Math.ceil(t.length/18);let r=0==n?0:n-1,s=0;for(;s<i;){const e=Math.min(18,i-s),a=t.slice(s,s+e),o=new Uint8Array(2);o[0]=127&n,0==s&&(o[0]|=128),o[1]=r,this._txCharacteristic.writeValueWithoutResponse(qn(o,a)),s+=e,r=0==r?0:r-1,console.log(`chunk: ${a.toString()} [${r} chunks remaining]`)}}async transportDisconnectAsync(){var e,t;if(this._device){console.debug("ble: disconnecting");try{null===(e=this._rxCharacteristic)||void 0===e||e.removeEventListener("characteristicvaluechanged",this.handleCharacteristicChanged),null===(t=this._device)||void 0===t||t.removeEventListener("gattserverdisconnected",this.handleDisconnected),this._server.disconnect()}finally{this._rxCharacteristic=void 0,this._txCharacteristic=void 0,this._service=void 0,this._server=void 0,this._device=void 0,this._rxBuffer=void 0}}}handleDisconnected(){this.disconnect()}handleCharacteristicChanged(){const e=new Uint8Array(this._rxCharacteristic.value.buffer),t=e.slice(2);if(console.log(`received length ${e.length}`),128&e[0]&&(this._rxBuffer&&console.error(`Dropped buffer. Chunks remaining: ${this._rxChunkCounter}`),this._rxBuffer=new Uint8Array,this._rxChunkCounter=127&e[0],console.log(`Initial chunk counter: ${this._rxChunkCounter}`)),this._rxChunkCounter=0==this._rxChunkCounter?0:this._rxChunkCounter-1,console.log(`after modification chunk counter: ${this._rxChunkCounter}`),e[1]!==this._rxChunkCounter?console.error(`Data out of order. Expected chunk: ${this._rxChunkCounter} Got chunk: ${e[1]}`):this._rxBuffer=qn(this._rxBuffer,t),0==this._rxChunkCounter){const e=hs.fromBinary(this._rxBuffer,this.bus.timestamp);console.log(`processed packet ${e}`),e.sender="bluetooth",this.bus.processPacket(e),this._rxBuffer=void 0,this._rxChunkCounter=0}}}function Mo(){return Fo()&&new Po}class Do{constructor(e){this.io=e,this.eventHandlers={},this.msgs=new xn,this.cmdSeq=65535*Math.random()|0,this.lock=new Fn;let t=[];e.onData=e=>{const i=192&e[0],n=63&e[0],r=new Uint8Array(n);if(_n(r,0,e,1,n),128&i)this.onSerial(r,192==i);else if(t.push(r),0!=i){Kn(64==i);let e=0;for(const i of t)e+=i.length;const n=new Uint8Array(e);let r=0;for(const e of t)_n(n,r,e),r+=e.length;t=[],128&n[2]?this.handleEvent(n):this.msgs.push(n)}}}error(e){var t;return null===(t=this.io)||void 0===t?void 0:t.error(e)}talkAsync(e,t){this.io||console.error("rogue hf2 instance");let i=8;t&&(i+=t.length);const n=new Uint8Array(i),r=65535&++this.cmdSeq;On(n,0,e),Un(n,4,r),Un(n,6,0),t&&_n(n,8,t,0,t.length);let s=0;const a=()=>this.msgs.shiftAsync(1e3).then((e=>{if(zn(e,0)!=r){if(s<3)return s++,this.io.log(`message out of sync, (${r} vs ${zn(e,0)}); will re-try`),a();this.error("out of sync")}let t="";switch(e[3]&&(t="; info="+e[3]),e[2]){case 0:return e.slice(4);case 1:this.error("invalid command"+t);break;case 2:this.error("execution error"+t);break;default:this.error("error "+e[2]+t)}return null})).catch((t=>(console.debug(`HF2: ${t.message}; cmd=${e}`),this.error(t),null)));return this.lock.enqueue("talk",(()=>this.sendMsgAsync(n).then(a)))}sendMsgAsync(e,t=0){const i=new Uint8Array(64),n=r=>{let s=e.length-r;if(s<=0)return Promise.resolve();s>63?(s=63,i[0]=0):i[0]=64,t&&(i[0]=1==t?128:192),i[0]|=s;for(let t=0;t<s;++t)i[t+1]=e[r+t];return this.io?this.io.sendPacketAsync(i).then((()=>n(r+s))):Promise.resolve()};return n(0)}onEvent(e,t){Kn(!!(8388608&e)),this.eventHandlers[e+""]=t}onJDMessage(e){this.talkAsync(32,$n([1])),this.onEvent(8388640,e)}sendJDMessageAsync(e){return this.talkAsync(33,e).then((()=>{}))}handleEvent(e){const t=jn(e,0),i=this.eventHandlers[t+""];i?i(e.slice(4)):this.io.log("unhandled event: "+t.toString(16))}onSerial(e,t){const i=`hf2 serial: ${Hn(e)}`;t?console.warn(i):console.log(i)}async postConnectAsync(){await this.checkMode();const e=await this.talkAsync(2);this.io.log("Connected to: "+Hn(e))}async checkMode(){const e=jn(await this.talkAsync(1),0);this.io.log(`hf2 mode ${e}`),2==e?this.io.log("device in user-space mode"):1==e?(this.io.log("device in bootloader mode, reseting into user-space mode"),await this.talkAsync(3),gn("Device in bootloader mode")):gn("Unknown device operation mode")}async disconnectAsync(){if(this.io){const e=this.io;this.io=void 0,await e.disconnectAsync()}}}class Lo{constructor(e){this.io=e,this.q=new Fn,this.sendQ=[]}startRecvToLoop(){console.assert(!this._lastInterval);let e=this.recvTo;this._lastInterval=setInterval((()=>{this.io||this.stopRecvToLoop(),e&&e==this.recvTo&&e(),e=this.recvTo}),200)}stopRecvToLoop(){this._lastInterval&&(clearInterval(this._lastInterval),this._lastInterval=void 0)}error(e,t){var i;this.stopRecvToLoop(),null===(i=this.io)||void 0===i||i.error(e,t),this.xchgAddr=null}onJDMessage(e){this._onJDMsg=e}sendJDMessageAsync(e){if(3&e.length){const t=new Uint8Array(e.length+3&-4);t.set(e),e=t}return new Promise((t=>{this.sendQ.push({buf:e,cb:t})}))}async disconnectAsync(){if(this.io){console.debug("micro:bit: disconnect proto"),this.stopRecvToLoop(),this._onJDMsg=()=>console.warn("rogue jd callback");const e=this.io;this.io=void 0,e&&await e.disconnectAsync()}}recvAsync(){return new Promise(((e,t)=>{this.io?(this.io.recvPacketAsync().then((t=>{const i=e;e=null,i&&(this.recvTo=null,i(t))}),(i=>{e&&(e=null,this.recvTo=null,t(i))})),this.recvTo=()=>{e&&(e=null,t(new Error("CMSIS recv timeout")))}):t(new Error("USB disconnected"))}))}talkAsync(e){return this.q.enqueue("talk",(async()=>{if(!this.io)return void this.error("micro:bit disconnected");if(await this.io.sendPacketAsync(new Uint8Array(e)),!this.io)return void this.error("micro:bit disconnected");let t=await this.recvAsync();if(t[0]!==e[0]){const i=`Bad response for ${e[0]} -> ${t[0]}, try again`;console.debug(i,{cmds:e,response:t});try{t=await this.recvAsync()}catch(e){this.error(i)}t[0]!==e[0]&&this.error(i)}return t}))}talkHexAsync(e){return this.talkAsync(Dn(e.replace(/ /g,"")))}decodeString(e){const t=e[1];return En(e.slice(2,2+t))}dapDelay(e){const t=[9,0,0];return e>65535&&this.error("too large delay"),Un(t,1,e),this.talkAsync(t)}async setBaudRate(){const e=[130,0,0,0,0];On(e,1,115200),await this.talkAsync(e)}async xchgLoop(){let e;for(;this.io;){const t=Date.now();fn.diagnostics&&this.lastXchg&&t-this.lastXchg>50&&console.warn("slow xchg: "+(t-this.lastXchg)+"ms"),this.lastXchg=t;let i=0,n=await this.readBytes(this.xchgAddr+12,256,!0);n[2]&&(await this.writeWord(this.xchgAddr+12,0),await this.triggerIRQ(),n=n.slice(0,n[2]+12),this._onJDMsg(n),i++);let r=!1;if(e){(await this.readBytes(this.xchgAddr+12+256,4))[2]||(e.cb(),e=null,r=!0,i++)}if(!e&&this.sendQ.length){if(!r){(await this.readBytes(this.xchgAddr+12+256,4))[2]||(r=!0)}if(r){e=this.sendQ.shift();const t=e.buf.slice(4);await this.writeWords(this.xchgAddr+12+256+4,new Uint32Array(t.buffer));const n=e.buf.slice(0,4);await this.writeWords(this.xchgAddr+12+256,new Uint32Array(n.buffer)),await this.triggerIRQ(),this.lastSend=Date.now(),i++}else if(this.lastSend){Date.now()-this.lastSend>50&&(this.lastSend=0,console.warn("failed to send packet fast enough"))}}await this.readSerial()&&i++,0==i&&await this.dapDelay(1e3)}}async readSerial(){let e=await this.talkAsync([131]);const t=e[1];if(t){e=e.slice(2,2+t),this.pendingSerial&&(e=qn(this.pendingSerial,e));let i=0,n=0;for(;i<e.length;){if(10==e[i]||13==e[i]){const t=e.slice(n,i);t.length&&console.debug("microbit: "+An(En(t))),n=i+1}i++}e=e.slice(n),this.pendingSerial=e.length?e:null,this.pendingSerial&&(this.lastPendingSerial=Date.now())}else if(this.pendingSerial){if(Date.now()-this.lastPendingSerial>500){const e=An(En(this.pendingSerial));this.pendingSerial=null,console.log("SERIAL[TO]: "+e)}}return t}async talkStringAsync(...e){return this.talkAsync(e).then((e=>this.decodeString(e)))}async readDP(e){const t=[5,0,1,2|e,0,0,0,0];return jn(await this.talkAsync(t),3)}async setupTAR(e){const t=[5,0,2,1,82,0,0,35,5,0,0,0,0];On(t,9,e),await this.talkAsync(t)}async writeWords(e,t){await this.setupTAR(e);const i=14;let n=0;const r=[6,0,i,0,13];for(let e=0;e<56;++e)r.push(0);const s=new Uint8Array(r);let a=1,o=0;const d=t.length,c=new Uint8Array(t.buffer);let l=i;await this.q.enqueue("talk",(async()=>{for(;n<d;){const e=Math.min(d-o,i);if(e){if(s[2]=e,s.set(c.slice(4*o,4*(o+e)),5),!this.io)return void this.error("disconnected");await this.io.sendPacketAsync(e==i?s:s.slice(0,5+4*e)),o+=e,l=e}if(a-- >0)continue;const t=await this.recvAsync();t[0]!=s[0]&&this.error(`bad response, ${t[0]} != ${s[0]}`),t[1]!=i&&t[1]!=l&&this.error(`bad response, ${t[1]} != 14 && ${t[1]} != ${l}`),n+=t[1]}}))}async readBytes(e,t,i=!1){(3&e||3&t)&&this.error("unaligned");const n=await this.readWords(e,t>>2,i);return new Uint8Array(n.buffer)}async readWords(e,t,i=!1){await this.setupTAR(e);const n=new Uint32Array(t);let r=0;const s=new Uint8Array([6,0,14,0,15]);let a=1,o=0,d=0;return await this.q.enqueue("talk",(async()=>{for(;r<t||d;){const e=Math.min(t-o,14);if(e>0){if(s[2]=e,d++,!this.io)return void this.error("disconnected");await this.io.sendPacketAsync(s),o+=e}if(a-- >0)continue;const c=await this.recvAsync();if(d--,c[0]!=s[0])return void this.error("bad response");const l=c[1],u=new Uint32Array(c.slice(4,4*(1+l)).buffer);if(u.length!=l)return void this.error("bad response2");if(n.set(u,r),i&&0==r){const e=new Uint8Array(n.buffer)[2]+12+3>>2;t>e&&(t=e)}r+=u.length}})),n}async findExchange(){const e=536870912,t=1024;let i=536895488,n=536896512;const r=async i=>{if(i<e)return null;if(i+t>537001984)return null;const n=await this.readWords(i,256);for(let e=0;e<n.length;++e)if(2020426826==n[e]&&2963718377==n[e+1])return i+(e<<2);return 0};for(;;){const e=await r(i);if(e)return e;const s=await r(n);if(s)return s;if(null===e&&null===s)return null;i-=t,n+=t}}async triggerIRQ(){const e=3758154240+4*(this.irqn>>5),t=new Uint32Array([1<<(31&this.irqn)]);await this.writeWords(e,t)}writeWord(e,t){return this.writeWords(e,new Uint32Array([t]))}async reset(){await this.writeWord(3758157308,0),await this.writeWord(3758157068,100270084)}async postConnectAsync(){this.startRecvToLoop();const e=await this.talkStringAsync(128);if(/^9902/.test(e))return void this.error("micro:bit v1 is not supported. sorry.","microbit/v1-not-supported");if(!/^990[3456789]/.test(e))return void this.error("Invalid Vendor0 response: "+e,"microbit/unknown-hardware-revision");this.io.log("DAPLink v"+await this.talkStringAsync(0,4)),await this.setBaudRate();const t=[17,0,0,0,0];On(t,1,1e7),await this.talkAsync(t);const i=["02 00","04 00 64 00 00 00","12 38 FF FF FF FF FF FF FF","12 10 9E E7","12 38 FF FF FF FF FF FF FF","12 08 00","05 00 01 02 00 00 00 00","05 00 03 00 04 00 00 00 08 00 00 00 00 04 00 00 00 50"];for(const e of i)await this.talkHexAsync(e);for(let e=0;e<100;++e){const e=-1610612736;if((await this.readDP(4)&e)==e)break;await yn(20)}await this.reset(),await yn(1e3);const n=await this.findExchange();if(null===n)return void this.error("exchange address not found; add jacdac to your project","microbit/jacdac-missing");this.xchgAddr=n;const r=await this.readBytes(n,16);this.irqn=r[8],255==r[14]?(await this.writeWord(n+12,0),this.io.log(`exchange address: 0x${n.toString(16)}; irqn=${this.irqn}`),this.xchgLoop().catch((e=>{console.debug(e),this.error((null==e?void 0:e.message)||"an error occured")}))):this.error("invalid memory; try power-cycling the micro:bit","microbit/invalid-memory")}}class Bo extends Error{constructor(e,t){super(e),this.jacdacName=t,this.name="JacdacError"}}function Vo(e){var t;return"JacdacError"===e.name?null===(t=e)||void 0===t?void 0:t.jacdacName:void 0}const Oo={filters:[{classCode:255,subclassCode:42},{vendorId:3368,productId:516}]};class Uo{constructor(e){this.options=e,this.readLoopStarted=!1,this.ready=!1,this.rawMode=!1,this.onData=e=>{},this.onError=e=>{console.warn(`usb error: ${Vo(e)||""} ${e?e.stack:e}`)}}log(e,t){fn.diagnostics&&(null!=t?console.debug("usb: "+e,t):console.debug("usb: "+e))}mkProto(){return this.isMicrobit()?new Lo(this):new Do(this)}clearDev(){this.dev&&(this.dev=null,this.epIn=null,this.epOut=null,this.onData=()=>console.warn("rogue hf2 onData"))}disconnectAsync(){return this.ready=!1,this.dev?(console.debug("close device"),this.dev.close().catch((e=>{console.debug(e)})).then((()=>(this.clearDev(),yn(500))))):Promise.resolve()}recvPacketAsync(){return this.rawMode||this.error("rawMode required"),this.recvPacketCoreAsync()}recvPacketCoreAsync(){const e=e=>{"ok"!=e.status&&this.error("USB IN transfer failed");const t=new Uint8Array(e.data.buffer);return 0==t.length?this.recvPacketCoreAsync():t};return this.dev?this.epIn?this.dev.transferIn(this.epIn.endpointNumber,64).then(e):this.dev.controlTransferIn({requestType:"class",recipient:"interface",request:1,value:256,index:this.iface.interfaceNumber},64).then(e):Promise.reject(new Error("Disconnected"))}error(e,t){const i=new Bo(`device ${this.dev?this.dev.productName:"n/a"} (${e})`,t);this.onError(i)}async readLoop(){if(!this.rawMode&&!this.readLoopStarted)for(this.readLoopStarted=!0,console.debug("start read loop");this.ready;)try{const e=await this.recvPacketCoreAsync();e[0]?this.onData(e):await yn(5)}catch(e){this.dev&&(this.onError(e),await this.disconnectAsync()),await yn(300)}}sendPacketAsync(e){return this.dev?(Kn(e.length<=64),this.epOut?this.dev.transferOut(this.epOut.endpointNumber,e).then((e=>{"ok"!=e.status&&this.error("USB OUT transfer failed")})):this.dev.controlTransferOut({requestType:"class",recipient:"interface",request:9,value:512,index:this.iface.interfaceNumber},e).then((e=>{"ok"!=e.status&&this.error("USB CTRL OUT transfer failed")}))):Promise.reject(new Error("Disconnected"))}isMicrobit(){return this.dev&&516==this.dev.productId&&3368==this.dev.vendorId}checkDevice(){if(this.iface=void 0,this.altIface=void 0,!this.dev)return!1;console.debug("connect device: "+this.dev.manufacturerName+" "+this.dev.productName);const e=this.isMicrobit()?0:42;for(const t of this.dev.configuration.interfaces){const i=t.alternates[0];if(255==i.interfaceClass&&i.interfaceSubclass==e){this.iface=t,this.altIface=i;break}}return this.isMicrobit()&&(this.rawMode=!0),!!this.iface}async tryReconnectAsync(e){try{const t=await this.options.getDevices(Oo);this.dev=e?t.find((t=>t.serialNumber===e)):t[0]}catch(e){console.log(e),this.dev=void 0}}async requestDeviceAsync(){try{this.dev=await this.options.requestDevice(Oo)}catch(e){console.log(e),this.dev=void 0}}async connectAsync(e,t){await this.tryReconnectAsync(t),this.dev||e||await this.requestDeviceAsync(),!this.dev&&e&&gn("device not paired",!0),await this.openDeviceAsync();const i=this.mkProto();try{await i.postConnectAsync()}catch(e){throw console.debug(e),await i.disconnectAsync(),e}return i}async openDeviceAsync(){this.dev||gn("device not found"),this.checkDevice()||gn("device does not support HF2"),await this.dev.open(),await this.dev.selectConfiguration(1),this.altIface.endpoints.length&&(this.epIn=this.altIface.endpoints.filter((e=>"in"==e.direction))[0],this.epOut=this.altIface.endpoints.filter((e=>"out"==e.direction))[0],Kn(64==this.epIn.packetSize),Kn(64==this.epOut.packetSize)),console.debug("claim interface"),await this.dev.claimInterface(this.iface.interfaceNumber),console.debug("all connected"),this.ready=!0,this.readLoop()}}const jo={filters:[{usbVendorId:12346}]};class zo{constructor(){this.readLoopStarted=!1,this.ready=!1,this.onData=e=>{},this.onError=e=>{console.warn(`usb error: ${Vo(e)||""} ${e?e.stack:e}`)}}log(e,t){fn.diagnostics&&(null!=t?console.debug("usb: "+e,t):console.debug("usb: "+e))}mkProto(){return new Do(this)}clearDev(){this.dev&&(this.dev=null,this.onData=()=>console.warn("rogue webserial hf2 onData"))}disconnectAsync(){return this.ready=!1,this.dev?(console.debug("close device"),this.cancelStreams().catch((e=>{console.debug(e)})).then((()=>(this.clearDev(),yn(500))))):Promise.resolve()}devInfo(){if(!this.dev)return"n/a";const e=e=>("000"+e.toString(16)).slice(-4),t=this.dev.getInfo();return e(t.usbVendorId)+":"+e(t.usbProductId)}error(e,t){const i=new Bo(`serial device ${this.devInfo()} (${e})`,t);this.onError(i)}async cancelStreams(){if(this.reader)try{await this.reader.cancel(),this.reader.releaseLock()}catch(e){}try{this.writer.releaseLock()}catch(e){}await this.dev.close()}async readLoop(){var e,t;if(this.readLoopStarted)return;this.readLoopStarted=!0,console.debug("start read loop");const i=async e=>{let t=null;for(;;){const i=await e.read();if(i.done||!this.dev)return null;if(t=t?qn(t,i.value):i.value,t&&0==(63&t.length))return t}};for(;;){const n=null===(t=null===(e=this.dev)||void 0===e?void 0:e.readable)||void 0===t?void 0:t.getReader();if(n){this.reader=n,console.debug("start new read loop round");try{for(;;){const e=await i(n);if(!e)break;if(e.length>64)for(let t=0;t<e.length;t+=64)this.onData(e.slice(t,t+64));else this.onData(e)}}catch(e){this.dev&&this.onError(e),await yn(100)}finally{try{n.releaseLock()}catch(e){}await yn(100)}}else await yn(100)}}sendPacketAsync(e){if(!this.dev||!this.writer)return Promise.reject(new Error("Disconnected"));if(Kn(e.length<=64),e.length<64){const t=e;(e=new Uint8Array(64)).set(t)}return this.writer.write(e)}async tryReconnectAsync(){try{const e=await navigator.serial.getPorts();this.dev=e[0]}catch(e){console.log(e),this.dev=void 0}}async requestDeviceAsync(){try{this.dev=await navigator.serial.requestPort(jo)}catch(e){console.log(e),this.dev=void 0}}async connectAsync(e,t){await this.tryReconnectAsync(),this.dev||e||await this.requestDeviceAsync(),!this.dev&&e&&gn("device not paired",!0),await this.openDeviceAsync();const i=this.mkProto();try{await i.postConnectAsync()}catch(e){throw console.debug(e),await i.disconnectAsync(),e}return i}async openDeviceAsync(){var e;this.dev||gn("device not found"),await this.dev.open({baudRate:115200,bufferSize:32768}),this.writer=null===(e=this.dev.writable)||void 0===e?void 0:e.getWriter(),this.writer||gn("no writer"),this.ready=!0,this.readLoop()}}class $o{constructor(e,t){this.element=e,this.eventName=t}subscribe(e){const t=t=>!!e.next&&e.next(t);return this.element.addEventListener(this.eventName,t,!1),{unsubscribe:()=>this.element.removeEventListener(this.eventName,t)}}}function Wo(){return!!fn.webUSB}function Ho(){try{return"undefined"!=typeof navigator&&!!navigator.usb&&!!navigator.usb.getDevices}catch(e){return!1}}function Jo(e){var t,i;if(!fn.webUSB)return Promise.resolve(void 0);try{return null===(i=null===(t=null===navigator||void 0===navigator?void 0:navigator.usb)||void 0===t?void 0:t.requestDevice)||void 0===i?void 0:i.call(t,e)}catch(e){return void(fn.diagnostics&&console.warn(e))}}function qo(){var e;if(!fn.webUSB)return Promise.resolve([]);try{return(null===(e=null===navigator||void 0===navigator?void 0:navigator.usb)||void 0===e?void 0:e.getDevices())||Promise.resolve([])}catch(e){return fn.diagnostics&&console.warn(e),Promise.resolve([])}}class Go extends ta{constructor(e){super("usb",Object.assign(Object.assign({},e),{checkPulse:!0})),this.options=e}async transportConnectAsync(e){const t=new Uo(this.options);t.onError=e=>this.errorHandler("usb",e),this.hf2=await t.connectAsync(e),this.hf2.onJDMessage(this.handleFrame.bind(this))}async transportSendPacketAsync(e){if(!this.hf2)throw new Error("hf2 transport disconnected");const t=e.toBuffer();await this.hf2.sendJDMessageAsync(t)}async transportDisconnectAsync(e){const t=this.hf2;this.hf2=void 0,t&&await t.disconnectAsync()}}function Ko(e){return e||(e=Ho()&&{getDevices:qo,requestDevice:Jo,connectObservable:new $o(navigator.usb,"connect"),disconnectObservable:new $o(navigator.usb,"disconnect")}),e&&new Go(e)}class Xo extends ta{constructor(e,t,i){super(e,i),this.type=e,this.worker=t,this.options=i,this.pending={},this.worker.addEventListener("message",this.handleMessage.bind(this))}postMessageAsync(e){const t=e.id=""+Math.random();return new Promise(((i,n)=>{this.worker.postMessage(e),this.pending[t]={resolve:i,reject:n}}))}handleMessage(e){const t=e.data,{jacdac:i,type:n}=t||{};if(i)switch(n){case"packet":{const{payload:e}=t;this.handlePacket(e);break}case"frame":{const{payload:e}=t;this.handleFrame(e);break}case"connect":case"disconnect":{const{id:e,error:i}=t,{resolve:n,reject:r}=this.pending[e]||{};n&&(i?r(i):n(void 0));break}case"error":{const{error:e,background:i,type:n}=t;fn.diagnostics&&console.debug(t),i||this.errorHandler(n,e);break}}}async transportSendPacketAsync(e){const t=e.toBuffer();this.worker.postMessage({jacdac:!0,type:"packet",payload:t})}async transportConnectAsync(e){let t;e||(t=await this.options.requestDevice()),await this.postMessageAsync({jacdac:!0,type:"connect",deviceId:t,background:e})}transportDisconnectAsync(e){return this.postMessageAsync({jacdac:!0,type:"disconnect",background:e})}}function Yo(){try{return"undefined"!=typeof navigator&&!!navigator.serial&&!!navigator.serial.getPorts}catch(e){return!1}}class Qo extends ta{constructor(e){super("serial"),this.mkTransport=e}async transportConnectAsync(e){const t=this.mkTransport();t.onError=e=>this.errorHandler("usb",e),this.hf2=await t.connectAsync(e),this.hf2.onJDMessage(this.handleFrame.bind(this))}async transportSendPacketAsync(e){if(!this.hf2)throw new Error("hf2 transport disconnected");const t=e.toBuffer();await this.hf2.sendJDMessageAsync(t)}async transportDisconnectAsync(e){const t=this.hf2;this.hf2=void 0,t&&await t.disconnectAsync()}}function Zo(e=(()=>new zo)){return Yo()&&new Qo(e)}function ed(e){return new Promise(((t,i)=>e(((e,n)=>{e?i(e):t(n)}))))}r.register("1VG7F",(function(t,i){e(t.exports,"USB",(()=>M));var n=r("52AWy"),s=r("7I1Sw").Buffer;function a(){}function o(){o.init.call(this)}function d(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,i){if(t)e.call(i);else for(var n=e.length,r=v(e,n),s=0;s<n;++s)r[s].call(i)}function l(e,t,i,n){if(t)e.call(i,n);else for(var r=e.length,s=v(e,r),a=0;a<r;++a)s[a].call(i,n)}function u(e,t,i,n,r){if(t)e.call(i,n,r);else for(var s=e.length,a=v(e,s),o=0;o<s;++o)a[o].call(i,n,r)}function p(e,t,i,n,r,s){if(t)e.call(i,n,r,s);else for(var a=e.length,o=v(e,a),d=0;d<a;++d)o[d].call(i,n,r,s)}function m(e,t,i,n){if(t)e.apply(i,n);else for(var r=e.length,s=v(e,r),a=0;a<r;++a)s[a].apply(i,n)}function h(e,t,i,n){var r,s,o,c;if("function"!=typeof i)throw new TypeError('"listener" argument must be a function');if((s=e._events)?(s.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),s=e._events),o=s[t]):(s=e._events=new a,e._eventsCount=0),o){if("function"==typeof o?o=s[t]=n?[i,o]:[o,i]:n?o.unshift(i):o.push(i),!o.warned&&(r=d(e))&&r>0&&o.length>r){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,c=l,"function"==typeof console.warn?console.warn(c):console.log(c)}}else o=s[t]=i,++e._eventsCount;return e}function f(e,t,i){var n=!1;function r(){e.removeListener(t,r),n||(n=!0,i.apply(e,arguments))}return r.listener=i,r}function g(e){var t=this._events;if(t){var i=t[e];if("function"==typeof i)return 1;if(i)return i.length}return 0}function v(e,t){for(var i=new Array(t);t--;)i[t]=e[t];return i}a.prototype=Object.create(null),o.EventEmitter=o,o.usingDomains=!1,o.prototype.domain=void 0,o.prototype._events=void 0,o.prototype._maxListeners=void 0,o.defaultMaxListeners=10,o.init=function(){this.domain=null,o.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new a,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(e){var t,i,n,r,s,a,o,d="error"===e;if(a=this._events)d=d&&null==a.error;else if(!d)return!1;if(o=this.domain,d){if(t=arguments[1],!o){if(t instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=o,t.domainThrown=!1,o.emit("error",t),!1}if(!(i=a[e]))return!1;var f="function"==typeof i;switch(n=arguments.length){case 1:c(i,f,this);break;case 2:l(i,f,this,arguments[1]);break;case 3:u(i,f,this,arguments[1],arguments[2]);break;case 4:p(i,f,this,arguments[1],arguments[2],arguments[3]);break;default:for(r=new Array(n-1),s=1;s<n;s++)r[s-1]=arguments[s];m(i,f,this,r)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,n,r,s,o;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(i=n[e]))return this;if(i===t||i.listener&&i.listener===t)0==--this._eventsCount?this._events=new a:(delete n[e],n.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,s=i.length;s-- >0;)if(i[s]===t||i[s].listener&&i[s].listener===t){o=i[s].listener,r=s;break}if(r<0)return this;if(1===i.length){if(i[0]=void 0,0==--this._eventsCount)return this._events=new a,this;delete n[e]}else!function(e,t){for(var i=t,n=i+1,r=e.length;n<r;i+=1,n+=1)e[i]=e[n];e.pop()}(i,r);n.removeListener&&this.emit("removeListener",e,o||t)}return this},o.prototype.removeAllListeners=function(e){var t,i;if(!(i=this._events))return this;if(!i.removeListener)return 0===arguments.length?(this._events=new a,this._eventsCount=0):i[e]&&(0==--this._eventsCount?this._events=new a:delete i[e]),this;if(0===arguments.length){for(var n,r=Object.keys(i),s=0;s<r.length;++s)"removeListener"!==(n=r[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=new a,this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},o.prototype.listeners=function(e){var t,i=this._events;return i&&(t=i[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(t):[]},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},o.prototype.listenerCount=g,o.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};class y extends o{constructor(){super(...arguments),this.isEventListenerObject=e=>void 0!==e.handleEvent}addEventListener(e,t){if(t){const i=this.isEventListenerObject(t)?t.handleEvent:t;super.addListener(e,i)}}removeEventListener(e,t){if(t){const i=this.isEventListenerObject(t)?t.handleEvent:t;super.removeListener(e,i)}}dispatchEvent(e){return super.emit(e.type,e)}}class _{constructor(e){this.configurationValue=null,this.configurationName=null,this.interfaces=[],this.configurationValue=e.configurationValue,this.configurationName=e.configurationName,this.interfaces=e.interfaces}}class b{constructor(e){this.interfaceNumber=null,this.alternates=[],this._claimed=!1,this._currentAlternate=0,this._handle=null,this.interfaceNumber=e.interfaceNumber,this.alternates=e.alternates,this._handle=e._handle}get claimed(){return this._claimed}get alternate(){return this.alternates.find((e=>e.alternateSetting===this._currentAlternate))}selectAlternateInterface(e){return F.selectAlternateInterface(this._handle,this.interfaceNumber,e).then((()=>{this._currentAlternate=e}))}claimInterface(){return F.claimInterface(this._handle,this.interfaceNumber).then((()=>{this._claimed=!0}))}releaseInterface(){return F.releaseInterface(this._handle,this.interfaceNumber).then((()=>{this._claimed=!1}))}reset(){this._currentAlternate=0}}class k{constructor(e){this.alternateSetting=null,this.interfaceClass=null,this.interfaceSubclass=null,this.interfaceProtocol=null,this.interfaceName=null,this.endpoints=[],this.alternateSetting=e.alternateSetting,this.interfaceClass=e.interfaceClass,this.interfaceSubclass=e.interfaceSubclass,this.interfaceProtocol=e.interfaceProtocol,this.interfaceName=e.interfaceName,this.endpoints=e.endpoints}}class w{constructor(e){this.endpointNumber=null,this.direction=null,this.type=null,this.packetSize=null,this.endpointNumber=e.endpointNumber,this.direction=e.direction,this.type=e.type,this.packetSize=e.packetSize}}class S{constructor(e){this.manufacturerName=null,this.productName=null,this.serialNumber=null,this._configurations=[],this._currentConfiguration=null,this.url=null,this._maxPacketSize=0,this._handle=null,this.usbVersionMajor=e.usbVersionMajor,this.usbVersionMinor=e.usbVersionMinor,this.usbVersionSubminor=e.usbVersionSubminor,this.deviceClass=e.deviceClass,this.deviceSubclass=e.deviceSubclass,this.deviceProtocol=e.deviceProtocol,this.vendorId=e.vendorId,this.productId=e.productId,this.deviceVersionMajor=e.deviceVersionMajor,this.deviceVersionMinor=e.deviceVersionMinor,this.deviceVersionSubminor=e.deviceVersionSubminor,this.manufacturerName=e.manufacturerName,this.productName=e.productName,this.serialNumber=e.serialNumber,this._configurations=e.configurations,this.url=e.url,this._maxPacketSize=e._maxPacketSize,this._handle=e._handle,this._currentConfiguration=e._currentConfiguration}get configurations(){return this._configurations}get configuration(){return this.configurations.find((e=>e.configurationValue===this._currentConfiguration))}get connected(){return F.getConnected(this._handle)}get opened(){return F.getOpened(this._handle)}getEndpoint(e,t){let i=null,n=null;return this.configuration.interfaces.some((r=>(i=r.alternate.endpoints.find((i=>i.endpointNumber===t&&i.direction===e)),i&&(n=r),i))),{endpoint:i,iface:n}}setupInvalid(e){if("interface"===e.recipient){const t=255&e.index,i=this.configuration.interfaces.find((e=>e.interfaceNumber===t));if(!i)return"interface not found";if(!i.claimed)return"invalid state"}else if("endpoint"===e.recipient){const t=15&e.index,i=e.index&n.LIBUSB_ENDPOINT_IN?"in":"out",r=this.getEndpoint(i,t);if(!r.endpoint)return"endpoint not found";if(!r.iface.claimed)return"invalid state"}}open(){return new Promise(((e,t)=>this.connected?this.opened?e():void F.open(this._handle).then(e).catch((e=>{t(new Error(`open error: ${e}`))})):t(new Error("open error: device not found"))))}close(){return new Promise(((e,t)=>{if(!this.connected)return t(new Error("close error: device not found"));if(!this.opened)return e();const i=this.configuration.interfaces.map((e=>this.releaseInterface(e.interfaceNumber)));Promise.all(i).catch((e=>{})).then((()=>F.close(this._handle))).then(e).catch((e=>{t(new Error(`close error: ${e}`))}))}))}selectConfiguration(e){return new Promise(((t,i)=>e===this._currentConfiguration?t():this.connected?this.configurations.find((t=>t.configurationValue===e))?this.opened?void F.selectConfiguration(this._handle,e).then((()=>{this._currentConfiguration=e,this.configuration.interfaces.forEach((e=>e.reset())),t()})).catch((e=>{i(new Error(`selectConfiguration error: ${e}`))})):i(new Error("selectConfiguration error: invalid state")):i(new Error("selectConfiguration error: configuration not found")):i(new Error("selectConfiguration error: device not found"))))}claimInterface(e){return new Promise(((t,i)=>{if(!this.connected)return i(new Error("claimInterface error: device not found"));const n=this.configuration.interfaces.find((t=>t.interfaceNumber===e));return n?this.opened?n.claimed?t():void n.claimInterface().then(t).catch((e=>{i(new Error(`claimInterface error: ${e}`))})):i(new Error("claimInterface error: invalid state")):i(new Error("claimInterface error: interface not found"))}))}releaseInterface(e){return new Promise(((t,i)=>{if(!this.connected)return i(new Error("releaseInterface error: device not found"));const n=this.configuration.interfaces.find((t=>t.interfaceNumber===e));return n?this.opened?n.claimed?void n.releaseInterface().then(t).catch((e=>{i(new Error(`releaseInterface error: ${e}`))})):t():i(new Error("releaseInterface error: invalid state")):i(new Error("releaseInterface error: interface not found"))}))}selectAlternateInterface(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("selectAlternateInterface error: device not found"));const r=this.configuration.interfaces.find((t=>t.interfaceNumber===e));return r?this.opened&&r.claimed?void r.selectAlternateInterface(t).then(i).catch((e=>{n(new Error(`selectAlternateInterface error: ${e}`))})):n(new Error("selectAlternateInterface error: invalid state")):n(new Error("selectAlternateInterface error: interface not found"))}))}controlTransferIn(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("controlTransferIn error: device not found"));if(!this.opened)return n(new Error("controlTransferIn error: invalid state"));const r=this.setupInvalid(e);if(r)return n(new Error(`controlTransferIn error: ${r}`));F.controlTransferIn(this._handle,e,t).then(i).catch((e=>{n(new Error(`controlTransferIn error: ${e}`))}))}))}controlTransferOut(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("controlTransferOut error: device not found"));if(!this.opened)return n(new Error("controlTransferOut error: invalid state"));const r=this.setupInvalid(e);if(r)return n(new Error(`controlTransferOut error: ${r}`));F.controlTransferOut(this._handle,e,t).then(i).catch((e=>{n(new Error(`controlTransferOut error: ${e}`))}))}))}clearHalt(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("clearHalt error: device not found"));const r=this.getEndpoint(e,t);return r.endpoint?this.opened&&r.iface.claimed?void F.clearHalt(this._handle,e,t).then(i).catch((e=>{n(new Error(`clearHalt error: ${e}`))})):n(new Error("clearHalt error: invalid state")):n(new Error("clearHalt error: endpoint not found"))}))}transferIn(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("transferIn error: device not found"));const r=this.getEndpoint("in",e);return r.endpoint?"interrupt"!==r.endpoint.type&&"bulk"!==r.endpoint.type?n(new Error("transferIn error: invalid access")):this.opened&&r.iface.claimed?void F.transferIn(this._handle,e,t).then(i).catch((e=>{n(new Error(`transferIn error: ${e}`))})):n(new Error("transferIn error: invalid state")):n(new Error("transferIn error: endpoint not found"))}))}transferOut(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("transferOut error: device not found"));const r=this.getEndpoint("out",e);return r.endpoint?"interrupt"!==r.endpoint.type&&"bulk"!==r.endpoint.type?n(new Error("transferOut error: invalid access")):this.opened&&r.iface.claimed?void F.transferOut(this._handle,e,t).then(i).catch((e=>{n(new Error(`transferOut error: ${e}`))})):n(new Error("transferOut error: invalid state")):n(new Error("transferOut error: endpoint not found"))}))}isochronousTransferIn(e,t){return new Promise(((i,n)=>{if(!this.connected)return n(new Error("isochronousTransferIn error: device not found"));const r=this.getEndpoint("in",e);return r.endpoint?"isochronous"!==r.endpoint.type?n(new Error("isochronousTransferIn error: invalid access")):this.opened&&r.iface.claimed?void F.isochronousTransferIn(this._handle,e,t).then(i).catch((e=>{n(new Error(`isochronousTransferIn error: ${e}`))})):n(new Error("isochronousTransferIn error: invalid state")):n(new Error("isochronousTransferIn error: endpoint not found"))}))}isochronousTransferOut(e,t,i){return new Promise(((n,r)=>{if(!this.connected)return r(new Error("isochronousTransferOut error: device not found"));const s=this.getEndpoint("out",e);return s.endpoint?"isochronous"!==s.endpoint.type?r(new Error("isochronousTransferOut error: invalid access")):this.opened&&s.iface.claimed?void F.isochronousTransferOut(this._handle,e,t,i).then(n).catch((e=>{r(new Error(`isochronousTransferOut error: ${e}`))})):r(new Error("isochronousTransferOut error: invalid state")):r(new Error("isochronousTransferOut error: endpoint not found"))}))}reset(){return new Promise(((e,t)=>this.connected?this.opened?void F.reset(this._handle).then(e).catch((e=>{t(new Error(`reset error: ${e}`))})):t(new Error("reset error: invalid state")):t(new Error("reset error: device not found"))))}}const T="3408b638-09a9-47a0-8bfd-a0768815b665",R=3,C=256,I=192,E=2,A=1,N=0;class x extends o{constructor(){super(),this.devices={};const e=e=>{this.loadDevice(e,10).then((e=>{if(e){const t=this.getDeviceHandle(e);this.devicetoUSBDevice(t).then((e=>{e&&this.emit(x.EVENT_DEVICE_CONNECT,e)}))}}))},t=e=>{const t=this.getDeviceHandle(e);t&&this.devices[t]&&(delete this.devices[t],this.emit(x.EVENT_DEVICE_DISCONNECT,t))};this.on("newListener",(i=>{0===this.listenerCount(i)&&(i===x.EVENT_DEVICE_CONNECT?n.on("attach",e):i===x.EVENT_DEVICE_DISCONNECT&&n.on("detach",t))})),this.on("removeListener",(i=>{0===this.listenerCount(i)&&(i===x.EVENT_DEVICE_CONNECT?n.removeListener("attach",e):i===x.EVENT_DEVICE_DISCONNECT&&n.removeListener("detach",t))}))}getDeviceHandle(e){return null===e.busNumber||null===e.deviceAddress?null:`${e.busNumber}.${e.deviceAddress}`}serialPromises(e,t){return t.reduce(function(t,i){return t.then((t=>e.call(this,i).then((e=>(e&&t.push(e),t)))))}.bind(this),Promise.resolve([]))}serialDevicePromises(e,t,i){return i.reduce(function(i,n){return i.then((i=>e.call(this,t,n).then((e=>(i.push(e),i)))))}.bind(this),Promise.resolve([]))}delay(e=200){return new Promise(((t,i)=>{setTimeout(t,e)}))}retryPromise(e,t=0,i=200){return new Promise(((n,r)=>{e().then(n).catch((s=>0===t?r(s):this.delay(i).then((()=>this.retryPromise(e,--t,i))).then(n).catch((e=>r(e)))))}))}loadDevices(e){this.devices={};let t=n.getDeviceList();return e&&(t=this.preFilterDevices(t,e)),this.serialPromises(this.loadDevice,t)}preFilterDevices(e,t){return e.filter((e=>t.some((t=>!(t.vendorId&&t.vendorId!==e.deviceDescriptor.idVendor||t.productId&&t.productId!==e.deviceDescriptor.idProduct)))))}loadDevice(e,t=0){try{e.configDescriptor,e.allConfigDescriptors,e.deviceDescriptor}catch(e){return Promise.resolve(null)}return this.getCapabilities(e,t).then((e=>this.getWebCapability(e))).then((t=>this.getWebUrl(e,t).then((t=>{const i=this.getDeviceHandle(e);return this.devices[i]={device:e,url:t},e}))))}getCapabilities(e,t){return new Promise(((i,n)=>{this.openDevice(e,t).then((()=>{e.getCapabilities(((t,n)=>{try{e.close()}catch(e){}if(t)return i([]);i(n)}))})).catch((e=>{i([])}))}))}getWebCapability(e){return e.filter((e=>5===e.type)).find((e=>{const t=this.decodeUUID(e.data.slice(1,17)),i=e.data.readUInt16LE(17);return t===T&&i===C}))}decodeUUID(e){const t=`00000000${e.readUInt32LE(0).toString(16)}`.slice(-8),i=`0000${e.readUInt16LE(4).toString(16)}`.slice(-4),n=`0000${e.readUInt16LE(6).toString(16)}`.slice(-4),r=[];for(let t=8;t<10;t++)r.push(`00${e.readUInt8(t).toString(16)}`.slice(-2));const s=[];for(let t=10;t<16;t++)s.push(`00${e.readUInt8(t).toString(16)}`.slice(-2));return`${t}-${i}-${n}-${r.join("")}-${s.join("")}`}getWebUrl(e,t,i=!0){return new Promise(((n,r)=>{if(!t||!t.data||t.data.byteLength<20)return n(null);const s=t.data.readUInt8(19),a=t.data.readUInt8(20);this.openDevice(e).then((()=>{e.controlTransfer(I,s,a,E,64,((t,s)=>{if(e.close(),t)return i?n(null):r(t);let a=s.toString("utf8",3);const o=s.readUInt8(2);0===o&&(a="http://"+a),1===o&&(a="https://"+a),n(a)}))})).catch((e=>{n("")}))}))}devicetoUSBDevice(e){return new Promise(((t,i)=>{const n=this.devices[e].device,r=this.devices[e].url;let s=null,a=null,o=null;try{a=n.configDescriptor,s=n.allConfigDescriptors,o=n.deviceDescriptor}catch(e){return t(null)}return s?this.serialDevicePromises(this.configToUSBConfiguration,n,s).then((e=>{if(!o)return t(new S({_handle:this.getDeviceHandle(n),url:r,configurations:e}));const i=this.decodeVersion(o.bcdDevice),s=this.decodeVersion(o.bcdUSB);let d=null,c=null;return this.getStringDescriptor(n,o.iManufacturer).then((e=>(d=e,this.getStringDescriptor(n,o.iProduct)))).then((e=>(c=e,this.getStringDescriptor(n,o.iSerialNumber)))).then((l=>{const u={_handle:this.getDeviceHandle(n),_maxPacketSize:o.bMaxPacketSize0,url:r,deviceClass:o.bDeviceClass,deviceSubclass:o.bDeviceSubClass,deviceProtocol:o.bDeviceProtocol,productId:o.idProduct,vendorId:o.idVendor,deviceVersionMajor:i.major,deviceVersionMinor:i.minor,deviceVersionSubminor:i.sub,usbVersionMajor:s.major,usbVersionMinor:s.minor,usbVersionSubminor:s.sub,manufacturerName:d,productName:c,serialNumber:l,configurations:e,_currentConfiguration:a.bConfigurationValue};return t(new S(u))}))})).catch((e=>{t(null)})):t(null)}))}decodeVersion(e){const t=`0000${e.toString(16)}`.slice(-4);return{major:parseInt(t.substr(0,2),null),minor:parseInt(t.substr(2,1),null),sub:parseInt(t.substr(3,1),null)}}getStringDescriptor(e,t){return new Promise((i=>{this.openDevice(e).then((()=>{e.getStringDescriptor(t,((t,n)=>{e.close(),i(t?"":n.toString())}))})).catch((e=>{i("")}))}))}bufferToDataView(e){const t=new Uint8Array(e).buffer;return new DataView(t)}bufferSourceToBuffer(e){const t=ArrayBuffer.isView(e)?e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength):e;return s.from(t)}getEndpoint(e,t,i){let r=null;const s=i|("in"===t?n.LIBUSB_ENDPOINT_IN:n.LIBUSB_ENDPOINT_OUT);return e.interfaces.some((e=>{const t=e.endpoint(s);return!!t&&(r=t,!0)})),r}getInEndpoint(e,t){const i=this.getEndpoint(e,"in",t);if(i&&"in"===i.direction)return i}getOutEndpoint(e,t){const i=this.getEndpoint(e,"out",t);if(i&&"out"===i.direction)return i}endpointToUSBEndpoint(e){const t=e.bEndpointAddress&n.LIBUSB_ENDPOINT_IN?"in":"out";return new w({endpointNumber:e.bEndpointAddress^("in"===t?n.LIBUSB_ENDPOINT_IN:n.LIBUSB_ENDPOINT_OUT),direction:t,type:(e.bmAttributes&R)===n.LIBUSB_TRANSFER_TYPE_BULK?"bulk":(e.bmAttributes&R)===n.LIBUSB_TRANSFER_TYPE_INTERRUPT?"interrupt":"isochronous",packetSize:e.wMaxPacketSize})}interfaceToUSBAlternateInterface(e,t){return this.getStringDescriptor(e,t.iInterface).then((e=>new k({alternateSetting:t.bAlternateSetting,interfaceClass:t.bInterfaceClass,interfaceSubclass:t.bInterfaceSubClass,interfaceProtocol:t.bInterfaceProtocol,interfaceName:e,endpoints:t.endpoints.map(this.endpointToUSBEndpoint)})))}interfacesToUSBInterface(e,t){return this.serialDevicePromises(this.interfaceToUSBAlternateInterface,e,t).then((i=>new b({_handle:this.getDeviceHandle(e),interfaceNumber:t[0].bInterfaceNumber,alternates:i})))}configToUSBConfiguration(e,t){return this.getStringDescriptor(e,t.iConfiguration).then((i=>{const n=t.interfaces||[];return this.serialDevicePromises(this.interfacesToUSBInterface,e,n).then((e=>new _({configurationValue:t.bConfigurationValue,configurationName:i,interfaces:e})))}))}getDevice(e){return this.devices[e]?this.devices[e].device:null}controlTransferParamsToType(e,t){return("device"===e.recipient?n.LIBUSB_RECIPIENT_DEVICE:"interface"===e.recipient?n.LIBUSB_RECIPIENT_INTERFACE:"endpoint"===e.recipient?n.LIBUSB_RECIPIENT_ENDPOINT:n.LIBUSB_RECIPIENT_OTHER)|("standard"===e.requestType?n.LIBUSB_REQUEST_TYPE_STANDARD:"class"===e.requestType?n.LIBUSB_REQUEST_TYPE_CLASS:n.LIBUSB_REQUEST_TYPE_VENDOR)|t}openDevice(e,t=0){return this.retryPromise((()=>new Promise(((t,i)=>{try{e.open()}catch(e){return i(e)}t()}))),t)}getConnected(e){return null!==this.getDevice(e)}getOpened(e){const t=this.getDevice(e);return!!t&&null!==t.interfaces}listUSBDevices(e){return this.loadDevices(e).then((()=>this.serialPromises(this.devicetoUSBDevice,Object.keys(this.devices))))}open(e){const t=this.getDevice(e);return this.openDevice(t)}close(e){return new Promise(((t,i)=>{this.getDevice(e).close(),t()}))}selectConfiguration(e,t){return new Promise(((i,n)=>{this.getDevice(e).setConfiguration(t,(e=>{if(e)return n(e);i()}))}))}claimInterface(e,t){return new Promise(((i,n)=>{this.getDevice(e).interface(t).claim(),i()}))}releaseInterface(e,t){return new Promise(((i,n)=>{this.getDevice(e).interface(t).release(!0,(e=>{if(e)return n(e);i()}))}))}selectAlternateInterface(e,t,i){return new Promise(((n,r)=>{this.getDevice(e).interface(t).setAltSetting(i,(e=>{if(e)return r(e);n()}))}))}controlTransferIn(e,t,i){return new Promise(((r,s)=>{const a=this.getDevice(e),o=this.controlTransferParamsToType(t,n.LIBUSB_ENDPOINT_IN);a.controlTransfer(o,t.request,t.value,t.index,i,((e,t)=>{if(e)return e.errno===n.LIBUSB_TRANSFER_STALL?r({status:"stall"}):e.errno===n.LIBUSB_TRANSFER_OVERFLOW?r({status:"babble"}):s(e);r({data:this.bufferToDataView(t),status:"ok"})}))}))}controlTransferOut(e,t,i){return new Promise(((r,a)=>{const o=this.getDevice(e),d=this.controlTransferParamsToType(t,n.LIBUSB_ENDPOINT_OUT),c=i?this.bufferSourceToBuffer(i):new s(0);o.controlTransfer(d,t.request,t.value,t.index,c,(e=>{if(e)return e.errno===n.LIBUSB_TRANSFER_STALL?r({bytesWritten:0,status:"stall"}):a(e);r({bytesWritten:c.byteLength,status:"ok"})}))}))}clearHalt(e,t,i){return new Promise(((r,s)=>{const a=this.getDevice(e),o=i|("in"===t?n.LIBUSB_ENDPOINT_IN:n.LIBUSB_ENDPOINT_OUT);a.controlTransfer(n.LIBUSB_RECIPIENT_ENDPOINT,A,N,o,0,(e=>{if(e)return s(e);r()}))}))}transferIn(e,t,i){return new Promise(((r,s)=>{const a=this.getDevice(e);this.getInEndpoint(a,t).transfer(i,((e,t)=>{if(e)return e.errno===n.LIBUSB_TRANSFER_STALL?r({status:"stall"}):e.errno===n.LIBUSB_TRANSFER_OVERFLOW?r({status:"babble"}):s(e);r({data:this.bufferToDataView(t),status:"ok"})}))}))}transferOut(e,t,i){return new Promise(((r,s)=>{const a=this.getDevice(e),o=this.getOutEndpoint(a,t),d=this.bufferSourceToBuffer(i);o.transfer(d,(e=>{if(e)return e.errno===n.LIBUSB_TRANSFER_STALL?r({bytesWritten:0,status:"stall"}):s(e);r({bytesWritten:d.byteLength,status:"ok"})}))}))}isochronousTransferIn(e,t,i){return new Promise(((e,t)=>{t("isochronousTransferIn error: method not implemented")}))}isochronousTransferOut(e,t,i,n){return new Promise(((e,t)=>{t("isochronousTransferOut error: method not implemented")}))}reset(e){return new Promise(((t,i)=>{this.getDevice(e).reset((e=>{if(e)return i(e);t()}))}))}}x.EVENT_DEVICE_CONNECT="connect",x.EVENT_DEVICE_DISCONNECT="disconnect";const F=new x;class P extends class{constructor(){this.bubbles=!1,this.cancelable=!1,this.cancelBubble=!1,this.composed=!1,this.defaultPrevented=!1,this.eventPhase=0,this.isTrusted=!0,this.returnValue=!0}composedPath(){return[]}initEvent(e,t,i){this.type=e,this.bubbles=t,this.cancelable=i}preventDefault(){this.defaultPrevented=!0}stopImmediatePropagation(){}stopPropagation(){}}{constructor(e,t,i){super(),this.initEvent(t,i.bubbles,i.cancelable),this.target=e,this.device=i.device}}class M extends y{constructor(e){super(),this.allowedDevices=[],e=e||{},this.devicesFound=e.devicesFound;const t=e=>{if(this.replaceAllowedDevice(e)){const t=new P(this,"connect",{device:e});this.dispatchEvent(t),this.onconnect&&this.onconnect(t)}},i=e=>{const t=this.allowedDevices.find((t=>t._handle===e));if(t){const e=new P(this,"disconnect",{device:t});this.dispatchEvent(e),this.ondisconnect&&this.ondisconnect(e)}};this.on("newListener",(e=>{0===this.listenerCount(e)&&("connect"===e?F.addListener(x.EVENT_DEVICE_CONNECT,t):"disconnect"===e&&F.addListener(x.EVENT_DEVICE_DISCONNECT,i))})),this.on("removeListener",(e=>{0===this.listenerCount(e)&&("connect"===e?F.removeListener(x.EVENT_DEVICE_CONNECT,t):"disconnect"===e&&F.removeListener(x.EVENT_DEVICE_DISCONNECT,i))}))}set onconnect(e){this._onconnect&&this.removeEventListener("connect",this._onconnect),this._onconnect=e,this.addEventListener("connect",this._onconnect)}set ondisconnect(e){this._ondisconnect&&this.removeEventListener("disconnect",this._ondisconnect),this._ondisconnect=e,this.addEventListener("disconnect",this._ondisconnect)}replaceAllowedDevice(e){for(const t in this.allowedDevices)if(this.isSameDevice(e,this.allowedDevices[t]))return this.allowedDevices[t]=e,!0;return!1}isSameDevice(e,t){return e.productId===t.productId&&e.vendorId===t.vendorId&&e.serialNumber===t.serialNumber}filterDevice(e,t){return e.filters.some((e=>(!e.vendorId||e.vendorId===t.vendorId)&&((!e.productId||e.productId===t.productId)&&(!(!e.classCode||!t.configuration.interfaces.some((t=>!(e.classCode&&e.classCode!==t.alternate.interfaceClass||e.subclassCode&&e.subclassCode!==t.alternate.interfaceSubclass||e.protocolCode&&e.protocolCode!==t.alternate.interfaceProtocol))))||!(e.classCode&&e.classCode!==t.deviceClass||e.subclassCode&&e.subclassCode!==t.deviceSubclass||e.protocolCode&&e.protocolCode!==t.deviceProtocol||e.serialNumber&&e.serialNumber!==t.serialNumber)))))}getDevices(){const e=this.allowedDevices.map((e=>({vendorId:e.vendorId||void 0,productId:e.productId||void 0,classCode:e.deviceClass||void 0,subclassCode:e.deviceSubclass||void 0,protocolCode:e.deviceProtocol||void 0,serialNumber:e.serialNumber||void 0})));return F.listUSBDevices(e).then((e=>e.filter((e=>{if(!e.connected)return!1;for(const t in this.allowedDevices)if(this.isSameDevice(e,this.allowedDevices[t]))return!0;return!1}))))}requestDevice(e){return new Promise(((t,i)=>e?e.constructor!=={}.constructor?i(new TypeError("requestDevice error: parameter 1 (options) is not an object")):e.filters?e.filters.constructor!==[].constructor?i(new TypeError("requestDevice error: the provided value cannot be converted to a sequence")):e.filters.every((e=>e.protocolCode&&!e.subclassCode?(i(new TypeError("requestDevice error: subclass code is required")),!1):!(e.subclassCode&&!e.classCode&&(i(new TypeError("requestDevice error: class code is required")),1))))?F.listUSBDevices(e.filters).then((n=>{if(0===(n=n.filter((t=>this.filterDevice(e,t)))).length)return i(new Error("requestDevice error: no devices found"));function r(e){this.replaceAllowedDevice(e)||this.allowedDevices.push(e),t(e)}return this.devicesFound?this.devicesFound(n).then((e=>(e||i(new Error("selected device not found")),r.call(this,e)))):r.call(this,n[0])})).catch((e=>{i(new Error(`requestDevice error: ${e}`))})):void 0:i(new TypeError("requestDevice error: required member filters is undefined")):i(new TypeError("requestDevice error: 1 argument required, but only 0 present"))))}}new M})),r.register("52AWy",(function(e,t){var i=r("g47tY"),n=r("7I1Sw").Buffer,s=t=e.exports=r("358tP")("usb_bindings"),a=r("k8lWY"),o=r("h4Cg3"),d=function(e){return e&&e instanceof Uint8Array};s.INIT_ERROR&&(console.warn("Failed to initialize libusb."),s.Device=function(){throw new Error("Device cannot be instantiated directly.")},s.Transfer=function(){throw new Error("Transfer cannot be instantiated directly.")},s.setDebugLevel=function(){},s.getDeviceList=function(){return[]},s._enableHotplugEvents=function(){},s._disableHotplugEvents=function(){}),Object.keys(a.EventEmitter.prototype).forEach((function(e){t[e]=a.EventEmitter.prototype[e]})),t.findByIds=function(e,t){for(var i=s.getDeviceList(),n=0;n<i.length;n++){var r=i[n].deviceDescriptor;if(r.idVendor==e&&r.idProduct==t)return i[n]}},s.Device.prototype.timeout=1e3,s.Device.prototype.open=function(e){if(this.__open(),!1!==e){this.interfaces=[];for(var t=this.configDescriptor?this.configDescriptor.interfaces.length:0,i=0;i<t;i++)this.interfaces[i]=new l(this,i)}},s.Device.prototype.close=function(){this.__close(),this.interfaces=null},Object.defineProperty(s.Device.prototype,"configDescriptor",{get:function(){try{return this._configDescriptor||(this._configDescriptor=this.__getConfigDescriptor())}catch(e){if(e.errno==s.LIBUSB_ERROR_NOT_FOUND)return null;throw e}}}),Object.defineProperty(s.Device.prototype,"allConfigDescriptors",{get:function(){try{return this._allConfigDescriptors||(this._allConfigDescriptors=this.__getAllConfigDescriptors())}catch(e){if(e.errno==s.LIBUSB_ERROR_NOT_FOUND)return[];throw e}}}),Object.defineProperty(s.Device.prototype,"parent",{get:function(){return this._parent||(this._parent=this.__getParent())}}),s.Device.prototype.interface=function(e){if(!this.interfaces)throw new Error("Device must be open before searching for interfaces");e=e||0;for(var t=0;t<this.interfaces.length;t++)if(this.interfaces[t].interfaceNumber==e)return this.interfaces[t]};var c=s.LIBUSB_CONTROL_SETUP_SIZE;function l(e,t){this.device=e,this.id=t,this.altSetting=0,this.__refresh()}function u(e,t){this.device=e,this.id=t,this.descriptor=this.device._bosDescriptor.capabilities[this.id],this.type=this.descriptor.bDevCapabilityType,this.data=this.descriptor.dev_capability_data}function p(e,t){this.device=e,this.descriptor=t,this.address=t.bEndpointAddress,this.transferType=3&t.bmAttributes}function m(e,t){p.call(this,e,t)}function h(e,t){p.call(this,e,t)}s.Device.prototype.controlTransfer=function(e,t,r,a,o,l){var u,p=this,m=!!(e&s.LIBUSB_ENDPOINT_IN);if(m){if(!(o>=0))throw new TypeError("Expected size number for IN transfer (based on bmRequestType)");u=o}else{if(!d(o))throw new TypeError("Expected buffer for OUT transfer (based on bmRequestType)");u=o.length}var h=n.alloc(u+c);h.writeUInt8(e,0),h.writeUInt8(t,1),h.writeUInt16LE(r,2),h.writeUInt16LE(a,4),h.writeUInt16LE(u,6),m||h.set(o,c);var f=new s.Transfer(this,0,s.LIBUSB_TRANSFER_TYPE_CONTROL,this.timeout,(function(e,t,i){l&&(m?l.call(p,e,t.slice(c,c+i)):l.call(p,e))}));try{f.submit(h)}catch(e){l&&i.nextTick((function(){l.call(p,e)}))}return this},s.Device.prototype.getStringDescriptor=function(e,t){this.controlTransfer(s.LIBUSB_ENDPOINT_IN,s.LIBUSB_REQUEST_GET_DESCRIPTOR,s.LIBUSB_DT_STRING<<8|e,1033,255,(function(e,i){if(e)return t(e);t(void 0,i.toString("utf16le",2))}))},s.Device.prototype.getBosDescriptor=function(e){return this._bosDescriptor?e(void 0,this._bosDescriptor):this.deviceDescriptor.bcdUSB<513?e(void 0,null):void this.controlTransfer(s.LIBUSB_ENDPOINT_IN,s.LIBUSB_REQUEST_GET_DESCRIPTOR,s.LIBUSB_DT_BOS<<8,0,s.LIBUSB_DT_BOS_SIZE,(function(t,i){if(t)return t.errno==s.LIBUSB_TRANSFER_STALL?e(void 0,null):e(t,null);var n=i.readUInt16LE(2);this.controlTransfer(s.LIBUSB_ENDPOINT_IN,s.LIBUSB_REQUEST_GET_DESCRIPTOR,s.LIBUSB_DT_BOS<<8,0,n,(function(t,i){if(t)return t.errno==s.LIBUSB_TRANSFER_STALL?e(void 0,null):e(t,null);for(var n={bLength:i.readUInt8(0),bDescriptorType:i.readUInt8(1),wTotalLength:i.readUInt16LE(2),bNumDeviceCaps:i.readUInt8(4),capabilities:[]},r=s.LIBUSB_DT_BOS_SIZE;r<n.wTotalLength;){var a={bLength:i.readUInt8(r+0),bDescriptorType:i.readUInt8(r+1),bDevCapabilityType:i.readUInt8(r+2)};a.dev_capability_data=i.slice(r+3,r+a.bLength),n.capabilities.push(a),r+=a.bLength}this._bosDescriptor=n,e(void 0,this._bosDescriptor)}))}))},s.Device.prototype.getCapabilities=function(e){var t=[],i=this;this.getBosDescriptor((function(n,r){if(n)return e(n,null);for(var s=r?r.capabilities.length:0,a=0;a<s;a++)t.push(new u(i,a));e(void 0,t)}))},s.Device.prototype.setConfiguration=function(e,t){var i=this;this.__setConfiguration(e,(function(e){if(!e){this.interfaces=[];for(var n=this.configDescriptor?this.configDescriptor.interfaces.length:0,r=0;r<n;r++)this.interfaces[r]=new l(this,r)}t.call(i,e)}))},l.prototype.__refresh=function(){this.descriptor=this.device.configDescriptor.interfaces[this.id][this.altSetting],this.interfaceNumber=this.descriptor.bInterfaceNumber,this.endpoints=[];for(var e=this.descriptor.endpoints.length,t=0;t<e;t++){var i=this.descriptor.endpoints[t],n=i.bEndpointAddress&s.LIBUSB_ENDPOINT_IN?m:h;this.endpoints[t]=new n(this.device,i)}},l.prototype.claim=function(){this.device.__claimInterface(this.id)},l.prototype.release=function(e,t){var i=this;if("function"==typeof e&&(t=e,e=null),e&&0!=this.endpoints.length){var n=i.endpoints.length;i.endpoints.forEach((function(e,t){e.pollActive?(e.once("end",(function(){0==--n&&r()})),e.stopPoll()):0==--n&&r()}))}else r();function r(){i.device.__releaseInterface(i.id,(function(e){e||(i.altSetting=0,i.__refresh()),t.call(i,e)}))}},l.prototype.isKernelDriverActive=function(){return this.device.__isKernelDriverActive(this.id)},l.prototype.detachKernelDriver=function(){return this.device.__detachKernelDriver(this.id)},l.prototype.attachKernelDriver=function(){return this.device.__attachKernelDriver(this.id)},l.prototype.setAltSetting=function(e,t){var i=this;this.device.__setInterface(this.id,e,(function(n){n||(i.altSetting=e,i.__refresh()),t.call(i,n)}))},l.prototype.endpoint=function(e){for(var t=0;t<this.endpoints.length;t++)if(this.endpoints[t].address==e)return this.endpoints[t]},o.inherits(p,a.EventEmitter),p.prototype.timeout=0,p.prototype.clearHalt=function(e){return this.device.__clearHalt(this.address,e)},p.prototype.makeTransfer=function(e,t){return new s.Transfer(this.device,this.address,this.transferType,e,t)},p.prototype.startPoll=function(e,t,i){if(this.pollTransfers)throw new Error("Polling already active");e=e||3,this.pollTransferSize=t||this.descriptor.wMaxPacketSize,this.pollActive=!0,this.pollPending=0;for(var n=[],r=0;r<e;r++)n[r]=this.makeTransfer(0,i);return n},p.prototype.stopPoll=function(e){if(!this.pollTransfers)throw new Error("Polling is not active.");for(var t=0;t<this.pollTransfers.length;t++)try{this.pollTransfers[t].cancel()}catch(e){this.emit("error",e)}this.pollActive=!1,e&&this.once("end",e)},t.InEndpoint=m,o.inherits(m,p),m.prototype.direction="in",m.prototype.transfer=function(e,t){var r=this,s=n.alloc(e);try{this.makeTransfer(this.timeout,(function(e,i,n){t.call(r,e,s.slice(0,n))})).submit(s)}catch(e){i.nextTick((function(){t.call(r,e)}))}return this},m.prototype.startPoll=function(e,t){var i=this;function r(e,t,n){e?e.errno!=s.LIBUSB_TRANSFER_CANCELLED&&(i.emit("error",e),i.stopPoll()):i.emit("data",t.slice(0,n)),i.pollActive?a(this):(i.pollPending--,0==i.pollPending&&(delete i.pollTransfers,i.emit("end")))}function a(e){try{e.submit(n.alloc(i.pollTransferSize),r)}catch(e){i.emit("error",e),i.stopPoll()}}this.pollTransfers=m.super_.prototype.startPoll.call(this,e,t,r),this.pollTransfers.forEach(a),i.pollPending=this.pollTransfers.length},t.OutEndpoint=h,o.inherits(h,p),h.prototype.direction="out",h.prototype.transfer=function(e,t){var r=this;function s(e,i,n){t&&t.call(r,e)}e?d(e)||(e=n.from(e)):e=n.alloc(0);try{this.makeTransfer(this.timeout,s).submit(e)}catch(e){i.nextTick((function(){s(e)}))}return this},h.prototype.transferWithZLP=function(e,t){e.length%this.descriptor.wMaxPacketSize==0?(this.transfer(e),this.transfer(n.alloc(0),t)):this.transfer(e,t)};var f=0;t.on("newListener",(function(e){"attach"!==e&&"detach"!==e||1==++f&&s._enableHotplugEvents()})),t.on("removeListener",(function(e){"attach"!==e&&"detach"!==e||0==--f&&s._disableHotplugEvents()}))})),r.register("g47tY",(function(e,t){var i,n,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(i===setTimeout)return setTimeout(e,0);if((i===s||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:s}catch(e){i=s}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var d,c=[],l=!1,u=-1;function p(){l&&d&&(l=!1,d.length?c=d.concat(c):u=-1,c.length&&m())}function m(){if(!l){var e=o(p);l=!0;for(var t=c.length;t;){for(d=c,c=[];++u<t;)d&&d[u].run();u=-1,t=c.length}d=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];c.push(new h(e,t)),1!==c.length||l||o(m)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}})),r.register("7I1Sw",(function(t,i){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */var n,s;e(t.exports,"INSPECT_MAX_BYTES",(()=>s),(e=>s=e)),e(t.exports,"Buffer",(()=>n),(e=>n=e));var a=r("kdCfV"),o=r("h322F"),d="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;n=u,s=50;var c=2147483647;function l(e){if(e>c)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,i){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return p(e,t,i)}function p(e,t,i){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var i=0|y(e,t),n=l(i),r=n.write(e,t);r!==i&&(n=n.slice(0,r));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){var t=new Uint8Array(e);return g(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return g(e,t,i);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return g(e,t,i);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,i);var r=function(e){if(u.isBuffer(e)){var t=0|v(e.length),i=l(t);return 0===i.length||e.copy(i,0,0,t),i}if(void 0!==e.length)return"number"!=typeof e.length||H(e.length)?l(0):f(e);if("Buffer"===e.type&&Array.isArray(e.data))return f(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function m(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return m(e),l(e<0?0:0|v(e))}function f(e){for(var t=e.length<0?0:0|v(e.length),i=l(t),n=0;n<t;n+=1)i[n]=255&e[n];return i}function g(e,t,i){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(i||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===t&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,t):new Uint8Array(e,t,i),Object.setPrototypeOf(n,u.prototype),n}function v(e){if(e>=c)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+c.toString(16)+" bytes");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var i=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===i)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return z(e).length;default:if(r)return n?-1:j(e).length;t=(""+t).toLowerCase(),r=!0}}function _(e,t,i){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,i);case"utf8":case"utf-8":return A(this,t,i);case"ascii":return x(this,t,i);case"latin1":case"binary":return F(this,t,i);case"base64":return E(this,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,i);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function b(e,t,i){var n=e[t];e[t]=e[i],e[i]=n}function k(e,t,i,n,r){if(0===e.length)return-1;if("string"==typeof i?(n=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),H(i=+i)&&(i=r?0:e.length-1),i<0&&(i=e.length+i),i>=e.length){if(r)return-1;i=e.length-1}else if(i<0){if(!r)return-1;i=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:w(e,t,i,n,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,i):Uint8Array.prototype.lastIndexOf.call(e,t,i):w(e,[t],i,n,r);throw new TypeError("val must be string, number or Buffer")}function w(e,t,i,n,r){var s,a=1,o=e.length,d=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,o/=2,d/=2,i/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(r){var l=-1;for(s=i;s<o;s++)if(c(e,s)===c(t,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===d)return l*a}else-1!==l&&(s-=s-l),l=-1}else for(i+d>o&&(i=o-d),s=i;s>=0;s--){for(var u=!0,p=0;p<d;p++)if(c(e,s+p)!==c(t,p)){u=!1;break}if(u)return s}return-1}function S(e,t,i,n){i=Number(i)||0;var r=e.length-i;n?(n=Number(n))>r&&(n=r):n=r;var s=t.length;n>s/2&&(n=s/2);for(var a=0;a<n;++a){var o=parseInt(t.substr(2*a,2),16);if(H(o))return a;e[i+a]=o}return a}function T(e,t,i,n){return $(j(t,e.length-i),e,i,n)}function R(e,t,i,n){return $(function(e){for(var t=[],i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(t),e,i,n)}function C(e,t,i,n){return $(z(t),e,i,n)}function I(e,t,i,n){return $(function(e,t){for(var i,n,r,s=[],a=0;a<e.length&&!((t-=2)<0);++a)n=(i=e.charCodeAt(a))>>8,r=i%256,s.push(r),s.push(n);return s}(t,e.length-i),e,i,n)}function E(e,t,i){return 0===t&&i===e.length?a.fromByteArray(e):a.fromByteArray(e.slice(t,i))}function A(e,t,i){i=Math.min(e.length,i);for(var n=[],r=t;r<i;){var s,a,o,d,c=e[r],l=null,u=c>239?4:c>223?3:c>191?2:1;if(r+u<=i)switch(u){case 1:c<128&&(l=c);break;case 2:128==(192&(s=e[r+1]))&&(d=(31&c)<<6|63&s)>127&&(l=d);break;case 3:s=e[r+1],a=e[r+2],128==(192&s)&&128==(192&a)&&(d=(15&c)<<12|(63&s)<<6|63&a)>2047&&(d<55296||d>57343)&&(l=d);break;case 4:s=e[r+1],a=e[r+2],o=e[r+3],128==(192&s)&&128==(192&a)&&128==(192&o)&&(d=(15&c)<<18|(63&s)<<12|(63&a)<<6|63&o)>65535&&d<1114112&&(l=d)}null===l?(l=65533,u=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),r+=u}return function(e){var t=e.length;if(t<=N)return String.fromCharCode.apply(String,e);var i="",n=0;for(;n<t;)i+=String.fromCharCode.apply(String,e.slice(n,n+=N));return i}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,i){return p(e,t,i)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,i){return function(e,t,i){return m(e),e<=0?l(e):void 0!==t?"string"==typeof i?l(e).fill(t,i):l(e).fill(t):l(e)}(e,t,i)},u.allocUnsafe=function(e){return h(e)},u.allocUnsafeSlow=function(e){return h(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var i=e.length,n=t.length,r=0,s=Math.min(i,n);r<s;++r)if(e[r]!==t[r]){i=e[r],n=t[r];break}return i<n?-1:n<i?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var i;if(void 0===t)for(t=0,i=0;i<e.length;++i)t+=e[i].length;var n=u.allocUnsafe(t),r=0;for(i=0;i<e.length;++i){var s=e[i];if(W(s,Uint8Array))r+s.length>n.length?u.from(s).copy(n,r):Uint8Array.prototype.set.call(n,s,r);else{if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,r)}r+=s.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},u.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?A(this,0,e):_.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",t=s;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},d&&(u.prototype[d]=u.prototype.inspect),u.prototype.compare=function(e,t,i,n,r){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===i&&(i=e?e.length:0),void 0===n&&(n=0),void 0===r&&(r=this.length),t<0||i>e.length||n<0||r>this.length)throw new RangeError("out of range index");if(n>=r&&t>=i)return 0;if(n>=r)return-1;if(t>=i)return 1;if(this===e)return 0;for(var s=(r>>>=0)-(n>>>=0),a=(i>>>=0)-(t>>>=0),o=Math.min(s,a),d=this.slice(n,r),c=e.slice(t,i),l=0;l<o;++l)if(d[l]!==c[l]){s=d[l],a=c[l];break}return s<a?-1:a<s?1:0},u.prototype.includes=function(e,t,i){return-1!==this.indexOf(e,t,i)},u.prototype.indexOf=function(e,t,i){return k(this,e,t,i,!0)},u.prototype.lastIndexOf=function(e,t,i){return k(this,e,t,i,!1)},u.prototype.write=function(e,t,i,n){if(void 0===t)n="utf8",i=this.length,t=0;else if(void 0===i&&"string"==typeof t)n=t,i=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(i)?(i>>>=0,void 0===n&&(n="utf8")):(n=i,i=void 0)}var r=this.length-t;if((void 0===i||i>r)&&(i=r),e.length>0&&(i<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return S(this,e,t,i);case"utf8":case"utf-8":return T(this,e,t,i);case"ascii":case"latin1":case"binary":return R(this,e,t,i);case"base64":return C(this,e,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,t,i);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var N=4096;function x(e,t,i){var n="";i=Math.min(e.length,i);for(var r=t;r<i;++r)n+=String.fromCharCode(127&e[r]);return n}function F(e,t,i){var n="";i=Math.min(e.length,i);for(var r=t;r<i;++r)n+=String.fromCharCode(e[r]);return n}function P(e,t,i){var n=e.length;(!t||t<0)&&(t=0),(!i||i<0||i>n)&&(i=n);for(var r="",s=t;s<i;++s)r+=J[e[s]];return r}function M(e,t,i){for(var n=e.slice(t,i),r="",s=0;s<n.length-1;s+=2)r+=String.fromCharCode(n[s]+256*n[s+1]);return r}function D(e,t,i){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>i)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,i,n,r,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<s)throw new RangeError('"value" argument is out of bounds');if(i+n>e.length)throw new RangeError("Index out of range")}function B(e,t,i,n,r,s){if(i+n>e.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function V(e,t,i,n,r){return t=+t,i>>>=0,r||B(e,0,i,4),o.write(e,t,i,n,23,4),i+4}function O(e,t,i,n,r){return t=+t,i>>>=0,r||B(e,0,i,8),o.write(e,t,i,n,52,8),i+8}u.prototype.slice=function(e,t){var i=this.length;(e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e);var n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,i){e>>>=0,t>>>=0,i||D(e,t,this.length);for(var n=this[e],r=1,s=0;++s<t&&(r*=256);)n+=this[e+s]*r;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,i){e>>>=0,t>>>=0,i||D(e,t,this.length);for(var n=this[e+--t],r=1;t>0&&(r*=256);)n+=this[e+--t]*r;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,i){e>>>=0,t>>>=0,i||D(e,t,this.length);for(var n=this[e],r=1,s=0;++s<t&&(r*=256);)n+=this[e+s]*r;return n>=(r*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,i){e>>>=0,t>>>=0,i||D(e,t,this.length);for(var n=t,r=1,s=this[e+--n];n>0&&(r*=256);)s+=this[e+--n]*r;return s>=(r*=128)&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);var i=this[e]|this[e+1]<<8;return 32768&i?4294901760|i:i},u.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);var i=this[e+1]|this[e]<<8;return 32768&i?4294901760|i:i},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,i,n){(e=+e,t>>>=0,i>>>=0,n)||L(this,e,t,i,Math.pow(2,8*i)-1,0);var r=1,s=0;for(this[t]=255&e;++s<i&&(r*=256);)this[t+s]=e/r&255;return t+i},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,i,n){(e=+e,t>>>=0,i>>>=0,n)||L(this,e,t,i,Math.pow(2,8*i)-1,0);var r=i-1,s=1;for(this[t+r]=255&e;--r>=0&&(s*=256);)this[t+r]=e/s&255;return t+i},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeIntLE=function(e,t,i,n){if(e=+e,t>>>=0,!n){var r=Math.pow(2,8*i-1);L(this,e,t,i,r-1,-r)}var s=0,a=1,o=0;for(this[t]=255&e;++s<i&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+i},u.prototype.writeIntBE=function(e,t,i,n){if(e=+e,t>>>=0,!n){var r=Math.pow(2,8*i-1);L(this,e,t,i,r-1,-r)}var s=i-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+i},u.prototype.writeInt8=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,i){return e=+e,t>>>=0,i||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeFloatLE=function(e,t,i){return V(this,e,t,!0,i)},u.prototype.writeFloatBE=function(e,t,i){return V(this,e,t,!1,i)},u.prototype.writeDoubleLE=function(e,t,i){return O(this,e,t,!0,i)},u.prototype.writeDoubleBE=function(e,t,i){return O(this,e,t,!1,i)},u.prototype.copy=function(e,t,i,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(i||(i=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<i&&(n=i),n===i)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-i&&(n=e.length-t+i);var r=n-i;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,i,n):Uint8Array.prototype.set.call(e,this.subarray(i,n),t),r},u.prototype.fill=function(e,t,i,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,i=this.length):"string"==typeof i&&(n=i,i=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var r=e.charCodeAt(0);("utf8"===n&&r<128||"latin1"===n)&&(e=r)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<i)throw new RangeError("Out of range index");if(i<=t)return this;var s;if(t>>>=0,i=void 0===i?this.length:i>>>0,e||(e=0),"number"==typeof e)for(s=t;s<i;++s)this[s]=e;else{var a=u.isBuffer(e)?e:u.from(e,n),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<i-t;++s)this[s+t]=a[s%o]}return this};var U=/[^+/0-9A-Za-z-_]/g;function j(e,t){var i;t=t||1/0;for(var n=e.length,r=null,s=[],a=0;a<n;++a){if((i=e.charCodeAt(a))>55295&&i<57344){if(!r){if(i>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&s.push(239,191,189);continue}r=i;continue}if(i<56320){(t-=3)>-1&&s.push(239,191,189),r=i;continue}i=65536+(r-55296<<10|i-56320)}else r&&(t-=3)>-1&&s.push(239,191,189);if(r=null,i<128){if((t-=1)<0)break;s.push(i)}else if(i<2048){if((t-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((t-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function z(e){return a.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function $(e,t,i,n){for(var r=0;r<n&&!(r+i>=t.length||r>=e.length);++r)t[r+i]=e[r];return r}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function H(e){return e!=e}var J=function(){for(var e="0123456789abcdef",t=new Array(256),i=0;i<16;++i)for(var n=16*i,r=0;r<16;++r)t[n+r]=e[i]+e[r];return t}()})),r.register("kdCfV",(function(t,i){var n,r;e(t.exports,"fromByteArray",(()=>r),(e=>r=e)),e(t.exports,"toByteArray",(()=>n),(e=>n=e)),n=function(e){var t,i,n=u(e),r=n[0],s=n[1],d=new o(function(e,t,i){return 3*(t+i)/4-i}(0,r,s)),c=0,l=s>0?r-4:r;for(i=0;i<l;i+=4)t=a[e.charCodeAt(i)]<<18|a[e.charCodeAt(i+1)]<<12|a[e.charCodeAt(i+2)]<<6|a[e.charCodeAt(i+3)],d[c++]=t>>16&255,d[c++]=t>>8&255,d[c++]=255&t;2===s&&(t=a[e.charCodeAt(i)]<<2|a[e.charCodeAt(i+1)]>>4,d[c++]=255&t);1===s&&(t=a[e.charCodeAt(i)]<<10|a[e.charCodeAt(i+1)]<<4|a[e.charCodeAt(i+2)]>>2,d[c++]=t>>8&255,d[c++]=255&t);return d},r=function(e){for(var t,i=e.length,n=i%3,r=[],a=16383,o=0,d=i-n;o<d;o+=a)r.push(p(e,o,o+a>d?d:o+a));1===n?(t=e[i-1],r.push(s[t>>2]+s[t<<4&63]+"==")):2===n&&(t=(e[i-2]<<8)+e[i-1],r.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"="));return r.join("")};for(var s=[],a=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=0,l=d.length;c<l;++c)s[c]=d[c],a[d.charCodeAt(c)]=c;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=e.indexOf("=");return-1===i&&(i=t),[i,i===t?0:4-i%4]}function p(e,t,i){for(var n,r,a=[],o=t;o<i;o+=3)n=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(s[(r=n)>>18&63]+s[r>>12&63]+s[r>>6&63]+s[63&r]);return a.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63})),r.register("h322F",(function(t,i){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */var n,r;e(t.exports,"write",(()=>r),(e=>r=e)),e(t.exports,"read",(()=>n),(e=>n=e)),n=function(e,t,i,n,r){var s,a,o=8*r-n-1,d=(1<<o)-1,c=d>>1,l=-7,u=i?r-1:0,p=i?-1:1,m=e[t+u];for(u+=p,s=m&(1<<-l)-1,m>>=-l,l+=o;l>0;s=256*s+e[t+u],u+=p,l-=8);for(a=s&(1<<-l)-1,s>>=-l,l+=n;l>0;a=256*a+e[t+u],u+=p,l-=8);if(0===s)s=1-c;else{if(s===d)return a?NaN:1/0*(m?-1:1);a+=Math.pow(2,n),s-=c}return(m?-1:1)*a*Math.pow(2,s-n)},r=function(e,t,i,n,r,s){var a,o,d,c=8*s-r-1,l=(1<<c)-1,u=l>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,m=n?0:s-1,h=n?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(d=Math.pow(2,-a))<1&&(a--,d*=2),(t+=a+u>=1?p/d:p*Math.pow(2,1-u))*d>=2&&(a++,d/=2),a+u>=l?(o=0,a=l):a+u>=1?(o=(t*d-1)*Math.pow(2,r),a+=u):(o=t*Math.pow(2,u-1)*Math.pow(2,r),a=0));r>=8;e[i+m]=255&o,m+=h,o/=256,r-=8);for(a=a<<r|o,c+=r;c>0;e[i+m]=255&a,m+=h,a/=256,c-=8);e[i+m-h]|=128*f}})),r.register("358tP",(function(e,t){var i=r("g47tY"),n=r("4b1yn"),s=r("fye0Y"),a=r("dcE70"),o=s.join,d=s.dirname,c=n.accessSync&&function(e){try{n.accessSync(e)}catch(e){return!1}return!0}||n.existsSync||s.existsSync,l={arrow:" → ",compiled:"compiled",platform:i.platform,arch:i.arch,nodePreGyp:"node-v"+i.versions.modules+"-"+i.platform+"-"+i.arch,version:i.versions.node,bindings:"bindings.node",try:[["module_root","build","bindings"],["module_root","build","Debug","bindings"],["module_root","build","Release","bindings"],["module_root","out","Debug","bindings"],["module_root","Debug","bindings"],["module_root","out","Release","bindings"],["module_root","Release","bindings"],["module_root","build","default","bindings"],["module_root","compiled","version","platform","arch","bindings"],["module_root","addon-build","release","install-root","bindings"],["module_root","addon-build","debug","install-root","bindings"],["module_root","addon-build","default","install-root","bindings"],["module_root","lib","binding","nodePreGyp","bindings"]]};e.exports=t=function(e){"string"==typeof e?e={bindings:e}:e||(e={}),Object.keys(l).map((function(t){t in e||(e[t]=l[t])})),e.module_root||(e.module_root=t.getRoot(t.getFileName())),".node"!=s.extname(e.bindings)&&(e.bindings+=".node");for(var i,n,r,a="function"==typeof __webpack_require__?__non_webpack_require__:void 0,d=[],c=0,u=e.try.length;c<u;c++){i=o.apply(null,e.try[c].map((function(t){return e[t]||t}))),d.push(i);try{return n=e.path?a.resolve(i):a(i),e.path||(n.path=i),n}catch(e){if("MODULE_NOT_FOUND"!==e.code&&"QUALIFIED_PATH_RESOLUTION_FAILED"!==e.code&&!/not find/i.test(e.message))throw e}}throw(r=new Error("Could not locate the bindings file. Tried:\n"+d.map((function(t){return e.arrow+t})).join("\n"))).tries=d,r},t.getFileName=function(e){var t,i=Error.prepareStackTrace,n=Error.stackTraceLimit,r={};Error.stackTraceLimit=10,Error.prepareStackTrace=function(i,n){for(var r=0,s=n.length;r<s;r++)if("node_modules/bindings/bindings.js"!==(t=n[r].getFileName())){if(!e)return;if(t!==e)return}},Error.captureStackTrace(r),Error.prepareStackTrace=i,Error.stackTraceLimit=n;return 0===t.indexOf("file://")&&(t=a(t)),t},t.getRoot=function(e){for(var t,n=d(e);;){if("."===n&&(n=i.cwd()),c(o(n,"package.json"))||c(o(n,"node_modules")))return n;if(t===n)throw new Error('Could not find module root given file: "'+e+'". Do you have a `package.json` file? ');t=n,n=o(n,"..")}}})),r.register("4b1yn",(function(e,t){})),r.register("fye0Y",(function(e,t){var i=r("g47tY");function n(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function s(e,t){for(var i,n="",r=0,s=-1,a=0,o=0;o<=e.length;++o){if(o<e.length)i=e.charCodeAt(o);else{if(47===i)break;i=47}if(47===i){if(s===o-1||1===a);else if(s!==o-1&&2===a){if(n.length<2||2!==r||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var d=n.lastIndexOf("/");if(d!==n.length-1){-1===d?(n="",r=0):r=(n=n.slice(0,d)).length-1-n.lastIndexOf("/"),s=o,a=0;continue}}else if(2===n.length||1===n.length){n="",r=0,s=o,a=0;continue}t&&(n.length>0?n+="/..":n="..",r=2)}else n.length>0?n+="/"+e.slice(s+1,o):n=e.slice(s+1,o),r=o-s-1;s=o,a=0}else 46===i&&-1!==a?++a:a=-1}return n}var a={resolve:function(){for(var e,t="",r=!1,a=arguments.length-1;a>=-1&&!r;a--){var o;a>=0?o=arguments[a]:(void 0===e&&(e=i.cwd()),o=e),n(o),0!==o.length&&(t=o+"/"+t,r=47===o.charCodeAt(0))}return t=s(t,!r),r?t.length>0?"/"+t:"/":t.length>0?t:"."},normalize:function(e){if(n(e),0===e.length)return".";var t=47===e.charCodeAt(0),i=47===e.charCodeAt(e.length-1);return 0!==(e=s(e,!t)).length||t||(e="."),e.length>0&&i&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return n(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var i=arguments[t];n(i),i.length>0&&(void 0===e?e=i:e+="/"+i)}return void 0===e?".":a.normalize(e)},relative:function(e,t){if(n(e),n(t),e===t)return"";if((e=a.resolve(e))===(t=a.resolve(t)))return"";for(var i=1;i<e.length&&47===e.charCodeAt(i);++i);for(var r=e.length,s=r-i,o=1;o<t.length&&47===t.charCodeAt(o);++o);for(var d=t.length-o,c=s<d?s:d,l=-1,u=0;u<=c;++u){if(u===c){if(d>c){if(47===t.charCodeAt(o+u))return t.slice(o+u+1);if(0===u)return t.slice(o+u)}else s>c&&(47===e.charCodeAt(i+u)?l=u:0===u&&(l=0));break}var p=e.charCodeAt(i+u);if(p!==t.charCodeAt(o+u))break;47===p&&(l=u)}var m="";for(u=i+l+1;u<=r;++u)u!==r&&47!==e.charCodeAt(u)||(0===m.length?m+="..":m+="/..");return m.length>0?m+t.slice(o+l):(o+=l,47===t.charCodeAt(o)&&++o,t.slice(o))},_makeLong:function(e){return e},dirname:function(e){if(n(e),0===e.length)return".";for(var t=e.charCodeAt(0),i=47===t,r=-1,s=!0,a=e.length-1;a>=1;--a)if(47===(t=e.charCodeAt(a))){if(!s){r=a;break}}else s=!1;return-1===r?i?"/":".":i&&1===r?"//":e.slice(0,r)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');n(e);var i,r=0,s=-1,a=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var o=t.length-1,d=-1;for(i=e.length-1;i>=0;--i){var c=e.charCodeAt(i);if(47===c){if(!a){r=i+1;break}}else-1===d&&(a=!1,d=i+1),o>=0&&(c===t.charCodeAt(o)?-1==--o&&(s=i):(o=-1,s=d))}return r===s?s=d:-1===s&&(s=e.length),e.slice(r,s)}for(i=e.length-1;i>=0;--i)if(47===e.charCodeAt(i)){if(!a){r=i+1;break}}else-1===s&&(a=!1,s=i+1);return-1===s?"":e.slice(r,s)},extname:function(e){n(e);for(var t=-1,i=0,r=-1,s=!0,a=0,o=e.length-1;o>=0;--o){var d=e.charCodeAt(o);if(47!==d)-1===r&&(s=!1,r=o+1),46===d?-1===t?t=o:1!==a&&(a=1):-1!==t&&(a=-1);else if(!s){i=o+1;break}}return-1===t||-1===r||0===a||1===a&&t===r-1&&t===i+1?"":e.slice(t,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var i=t.dir||t.root,n=t.base||(t.name||"")+(t.ext||"");return i?i===t.root?i+n:i+e+n:n}("/",e)},parse:function(e){n(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var i,r=e.charCodeAt(0),s=47===r;s?(t.root="/",i=1):i=0;for(var a=-1,o=0,d=-1,c=!0,l=e.length-1,u=0;l>=i;--l)if(47!==(r=e.charCodeAt(l)))-1===d&&(c=!1,d=l+1),46===r?-1===a?a=l:1!==u&&(u=1):-1!==a&&(u=-1);else if(!c){o=l+1;break}return-1===a||-1===d||0===u||1===u&&a===d-1&&a===o+1?-1!==d&&(t.base=t.name=0===o&&s?e.slice(1,d):e.slice(o,d)):(0===o&&s?(t.name=e.slice(1,a),t.base=e.slice(1,d)):(t.name=e.slice(o,a),t.base=e.slice(o,d)),t.ext=e.slice(a,d)),o>0?t.dir=e.slice(0,o-1):s&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};a.posix=a,e.exports=a})),r.register("dcE70",(function(e,t){var i=r("fye0Y").sep||"/";e.exports=function(e){if("string"!=typeof e||e.length<=7||"file://"!=e.substring(0,7))throw new TypeError("must pass in a file:// URI to convert to a file path");var t=decodeURI(e.substring(7)),n=t.indexOf("/"),r=t.substring(0,n),s=t.substring(n+1);"localhost"==r&&(r="");r&&(r=i+i+r);s=s.replace(/^(.+)\|/,"$1:"),"\\"==i&&(s=s.replace(/\//g,"\\"));/^.+\:/.test(s)||(s=i+s);return r+s}})),r.register("k8lWY",(function(e,t){var i,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};i=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(i,n){function r(i){e.removeListener(t,s),n(i)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",r),i([].slice.call(arguments))}g(e,t,s,{once:!0}),"error"!==t&&function(e,t,i){"function"==typeof e.on&&g(e,"error",t,i)}(e,r,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var o=10;function d(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function l(e,t,i,n){var r,s,a,o;if(d(i),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),s=e._events),a=s[t]),void 0===a)a=s[t]=i,++e._eventsCount;else if("function"==typeof a?a=s[t]=n?[i,a]:[a,i]:n?a.unshift(i):a.push(i),(r=c(e))>0&&a.length>r&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,o=l,console&&console.warn&&console.warn(o)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,i){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(n);return r.listener=i,n.wrapFn=r,r}function m(e,t,i){var n=e._events;if(void 0===n)return[];var r=n[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):f(r,r.length)}function h(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function f(e,t){for(var i=new Array(t),n=0;n<t;++n)i[n]=e[n];return i}function g(e,t,i,n){if("function"==typeof e.on)n.once?e.once(t,i):e.on(t,i);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(s){n.once&&e.removeEventListener(t,r),i(s)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var n="error"===e,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var d=s[e];if(void 0===d)return!1;if("function"==typeof d)r(d,this,t);else{var c=d.length,l=f(d,c);for(i=0;i<c;++i)r(l[i],this,t)}return!0},a.prototype.addListener=function(e,t){return l(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return l(this,e,t,!0)},a.prototype.once=function(e,t){return d(t),this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return d(t),this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var i,n,r,s,a;if(d(t),void 0===(n=this._events))return this;if(void 0===(i=n[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,s=i.length-1;s>=0;s--)if(i[s]===t||i[s].listener===t){a=i[s].listener,r=s;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(n[e]=i[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,i,n;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,s=Object.keys(i);for(n=0;n<s.length;++n)"removeListener"!==(r=s[n])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return m(this,e,!0)},a.prototype.rawListeners=function(e){return m(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},a.prototype.listenerCount=h,a.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}})),r.register("h4Cg3",(function(e,t){var i=r("g47tY"),n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),i={},n=0;n<t.length;n++)i[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return i},s=/%[sdj%]/g;e.exports.format=function(e){if(!y(e)){for(var t=[],i=0;i<arguments.length;i++)t.push(d(arguments[i]));return t.join(" ")}i=1;for(var n=arguments,r=n.length,a=String(e).replace(s,(function(e){if("%%"===e)return"%";if(i>=r)return e;switch(e){case"%s":return String(n[i++]);case"%d":return Number(n[i++]);case"%j":try{return JSON.stringify(n[i++])}catch(e){return"[Circular]"}default:return e}})),o=n[i];i<r;o=n[++i])g(o)||!k(o)?a+=" "+o:a+=" "+d(o);return a},e.exports.deprecate=function(t,n){if(void 0!==i&&!0===i.noDeprecation)return t;if(void 0===i)return function(){return e.exports.deprecate(t,n).apply(this,arguments)};var r=!1;return function(){if(!r){if(i.throwDeprecation)throw new Error(n);i.traceDeprecation?console.trace(n):console.error(n),r=!0}return t.apply(this,arguments)}};var a={},o=/^$/;function d(t,i){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),f(i)?n.showHidden=i:i&&e.exports._extend(n,i),_(n.showHidden)&&(n.showHidden=!1),_(n.depth)&&(n.depth=2),_(n.colors)&&(n.colors=!1),_(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),u(n,t,n.depth)}function c(e,t){var i=d.styles[t];return i?"["+d.colors[i][0]+"m"+e+"["+d.colors[i][1]+"m":e}function l(e,t){return e}function u(t,i,n){if(t.customInspect&&i&&T(i.inspect)&&i.inspect!==e.exports.inspect&&(!i.constructor||i.constructor.prototype!==i)){var r=i.inspect(n,t);return y(r)||(r=u(t,r,n)),r}var s=function(e,t){if(_(t))return e.stylize("undefined","undefined");if(y(t)){var i="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(i,"string")}if(v(t))return e.stylize(""+t,"number");if(f(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(t,i);if(s)return s;var a=Object.keys(i),o=function(e){var t={};return e.forEach((function(e,i){t[e]=!0})),t}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(i)),S(i)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return p(i);if(0===a.length){if(T(i)){var d=i.name?": "+i.name:"";return t.stylize("[Function"+d+"]","special")}if(b(i))return t.stylize(RegExp.prototype.toString.call(i),"regexp");if(w(i))return t.stylize(Date.prototype.toString.call(i),"date");if(S(i))return p(i)}var c,l="",k=!1,R=["{","}"];(h(i)&&(k=!0,R=["[","]"]),T(i))&&(l=" [Function"+(i.name?": "+i.name:"")+"]");return b(i)&&(l=" "+RegExp.prototype.toString.call(i)),w(i)&&(l=" "+Date.prototype.toUTCString.call(i)),S(i)&&(l=" "+p(i)),0!==a.length||k&&0!=i.length?n<0?b(i)?t.stylize(RegExp.prototype.toString.call(i),"regexp"):t.stylize("[Object]","special"):(t.seen.push(i),c=k?function(e,t,i,n,r){for(var s=[],a=0,o=t.length;a<o;++a)A(t,String(a))?s.push(m(e,t,i,n,String(a),!0)):s.push("");return r.forEach((function(r){r.match(/^\d+$/)||s.push(m(e,t,i,n,r,!0))})),s}(t,i,n,o,a):a.map((function(e){return m(t,i,n,o,e,k)})),t.seen.pop(),function(e,t,i){var n=0;return e.reduce((function(e,t){n++;if(t.indexOf("\n")>=0)n++;return e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?i[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+i[1]:i[0]+t+" "+e.join(", ")+" "+i[1]}(c,l,R)):R[0]+l+R[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function m(e,t,i,n,r,s){var a,o,d;if((d=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?o=d.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):d.set&&(o=e.stylize("[Setter]","special")),A(n,r)||(a="["+r+"]"),o||(e.seen.indexOf(d.value)<0?(o=g(i)?u(e,d.value,null):u(e,d.value,i-1)).indexOf("\n")>-1&&(o=s?o.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+o.split("\n").map((function(e){return"   "+e})).join("\n")):o=e.stylize("[Circular]","special")),_(a)){if(s&&r.match(/^\d+$/))return o;(a=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+o}function h(e){return Array.isArray(e)}function f(e){return"boolean"==typeof e}function g(e){return null===e}function v(e){return"number"==typeof e}function y(e){return"string"==typeof e}function _(e){return void 0===e}function b(e){return k(e)&&"[object RegExp]"===R(e)}function k(e){return"object"==typeof e&&null!==e}function w(e){return k(e)&&"[object Date]"===R(e)}function S(e){return k(e)&&("[object Error]"===R(e)||e instanceof Error)}function T(e){return"function"==typeof e}function R(e){return Object.prototype.toString.call(e)}function C(e){return e<10?"0"+e.toString(10):e.toString(10)}e.exports.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(o.test(t)){var n=i.pid;a[t]=function(){var i=e.exports.format.apply(e.exports,arguments);console.error("%s %d: %s",t,n,i)}}else a[t]=function(){};return a[t]},e.exports.inspect=d,d.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},d.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.exports.types=r("hO8Mo"),e.exports.isArray=h,e.exports.isBoolean=f,e.exports.isNull=g,e.exports.isNullOrUndefined=function(e){return null==e},e.exports.isNumber=v,e.exports.isString=y,e.exports.isSymbol=function(e){return"symbol"==typeof e},e.exports.isUndefined=_,e.exports.isRegExp=b,e.exports.types.isRegExp=b,e.exports.isObject=k,e.exports.isDate=w,e.exports.types.isDate=w,e.exports.isError=S,e.exports.types.isNativeError=S,e.exports.isFunction=T,e.exports.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},e.exports.isBuffer=r("1uvHv");var I=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function E(){var e=new Date,t=[C(e.getHours()),C(e.getMinutes()),C(e.getSeconds())].join(":");return[e.getDate(),I[e.getMonth()],t].join(" ")}function A(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports.log=function(){console.log("%s - %s",E(),e.exports.format.apply(e.exports,arguments))},e.exports.inherits=r("eR4CL"),e.exports._extend=function(e,t){if(!t||!k(t))return e;for(var i=Object.keys(t),n=i.length;n--;)e[i[n]]=t[i[n]];return e};var N="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function x(e,t){if(!e){var i=new Error("Promise was rejected with a falsy value");i.reason=e,e=i}return t(e)}e.exports.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(N&&e[N]){var t;if("function"!=typeof(t=e[N]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,i,n=new Promise((function(e,n){t=e,i=n})),r=[],s=0;s<arguments.length;s++)r.push(arguments[s]);r.push((function(e,n){e?i(e):t(n)}));try{e.apply(this,r)}catch(e){i(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),N&&Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},e.exports.promisify.custom=N,e.exports.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],n=0;n<arguments.length;n++)t.push(arguments[n]);var r=t.pop();if("function"!=typeof r)throw new TypeError("The last argument must be of type Function");var s=this,a=function(){return r.apply(s,arguments)};e.apply(this,t).then((function(e){i.nextTick(a.bind(null,null,e))}),(function(e){i.nextTick(x.bind(null,e,a))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,n(e)),t}})),r.register("hO8Mo",(function(e,t){var i=r("biGXv"),n=r("bxBRr"),s=r("kGe6S"),a=r("3B9zg");function o(e){return e.call.bind(e)}var d="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,l=o(Object.prototype.toString),u=o(Number.prototype.valueOf),p=o(String.prototype.valueOf),m=o(Boolean.prototype.valueOf);if(d)var h=o(BigInt.prototype.valueOf);if(c)var f=o(Symbol.prototype.valueOf);function g(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function v(e){return"[object Map]"===l(e)}function y(e){return"[object Set]"===l(e)}function _(e){return"[object WeakMap]"===l(e)}function b(e){return"[object WeakSet]"===l(e)}function k(e){return"[object ArrayBuffer]"===l(e)}function w(e){return"undefined"!=typeof ArrayBuffer&&(k.working?k(e):e instanceof ArrayBuffer)}function S(e){return"[object DataView]"===l(e)}function T(e){return"undefined"!=typeof DataView&&(S.working?S(e):e instanceof DataView)}e.exports.isArgumentsObject=i,e.exports.isGeneratorFunction=n,e.exports.isTypedArray=a,e.exports.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},e.exports.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):a(e)||T(e)},e.exports.isUint8Array=function(e){return"Uint8Array"===s(e)},e.exports.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===s(e)},e.exports.isUint16Array=function(e){return"Uint16Array"===s(e)},e.exports.isUint32Array=function(e){return"Uint32Array"===s(e)},e.exports.isInt8Array=function(e){return"Int8Array"===s(e)},e.exports.isInt16Array=function(e){return"Int16Array"===s(e)},e.exports.isInt32Array=function(e){return"Int32Array"===s(e)},e.exports.isFloat32Array=function(e){return"Float32Array"===s(e)},e.exports.isFloat64Array=function(e){return"Float64Array"===s(e)},e.exports.isBigInt64Array=function(e){return"BigInt64Array"===s(e)},e.exports.isBigUint64Array=function(e){return"BigUint64Array"===s(e)},v.working="undefined"!=typeof Map&&v(new Map),e.exports.isMap=function(e){return"undefined"!=typeof Map&&(v.working?v(e):e instanceof Map)},y.working="undefined"!=typeof Set&&y(new Set),e.exports.isSet=function(e){return"undefined"!=typeof Set&&(y.working?y(e):e instanceof Set)},_.working="undefined"!=typeof WeakMap&&_(new WeakMap),e.exports.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(_.working?_(e):e instanceof WeakMap)},b.working="undefined"!=typeof WeakSet&&b(new WeakSet),e.exports.isWeakSet=function(e){return b(e)},k.working="undefined"!=typeof ArrayBuffer&&k(new ArrayBuffer),e.exports.isArrayBuffer=w,S.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&S(new DataView(new ArrayBuffer(1),0,1)),e.exports.isDataView=T;var R="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function C(e){return"[object SharedArrayBuffer]"===l(e)}function I(e){return void 0!==R&&(void 0===C.working&&(C.working=C(new R)),C.working?C(e):e instanceof R)}function E(e){return g(e,u)}function A(e){return g(e,p)}function N(e){return g(e,m)}function x(e){return d&&g(e,h)}function F(e){return c&&g(e,f)}e.exports.isSharedArrayBuffer=I,e.exports.isAsyncFunction=function(e){return"[object AsyncFunction]"===l(e)},e.exports.isMapIterator=function(e){return"[object Map Iterator]"===l(e)},e.exports.isSetIterator=function(e){return"[object Set Iterator]"===l(e)},e.exports.isGeneratorObject=function(e){return"[object Generator]"===l(e)},e.exports.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===l(e)},e.exports.isNumberObject=E,e.exports.isStringObject=A,e.exports.isBooleanObject=N,e.exports.isBigIntObject=x,e.exports.isSymbolObject=F,e.exports.isBoxedPrimitive=function(e){return E(e)||A(e)||N(e)||x(e)||F(e)},e.exports.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(w(e)||I(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e.exports,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))})),r.register("biGXv",(function(e,t){var i=r("7iXm4")(),n=r("3WJtC")("Object.prototype.toString"),s=function(e){return!(i&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===n(e)},a=function(e){return!!s(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==n(e)&&"[object Function]"===n(e.callee)},o=function(){return s(arguments)}();s.isLegacyArguments=a,e.exports=o?s:a})),r.register("7iXm4",(function(e,t){var i=r("8xLv7");e.exports=function(){return i()&&!!Symbol.toStringTag}})),r.register("8xLv7",(function(e,t){e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),i=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(i))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var r=Object.getOwnPropertyDescriptor(e,t);if(42!==r.value||!0!==r.enumerable)return!1}return!0}})),r.register("3WJtC",(function(e,t){var i=r("jx2Xf"),n=r("idPLz"),s=n(i("String.prototype.indexOf"));e.exports=function(e,t){var r=i(e,!!t);return"function"==typeof r&&s(e,".prototype.")>-1?n(r):r}})),r.register("jx2Xf",(function(e,t){var i,n=SyntaxError,s=Function,a=TypeError,o=function(e){try{return s('"use strict"; return ('+e+").constructor;")()}catch(e){}},d=Object.getOwnPropertyDescriptor;if(d)try{d({},"")}catch(e){d=null}var c=function(){throw new a},l=d?function(){try{return c}catch(e){try{return d(arguments,"callee").get}catch(e){return c}}}():c,u=r("9jGQd")(),p=Object.getPrototypeOf||function(e){return e.__proto__},m={},h="undefined"==typeof Uint8Array?i:p(Uint8Array),f={"%AggregateError%":"undefined"==typeof AggregateError?i:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?i:ArrayBuffer,"%ArrayIteratorPrototype%":u?p([][Symbol.iterator]()):i,"%AsyncFromSyncIteratorPrototype%":i,"%AsyncFunction%":m,"%AsyncGenerator%":m,"%AsyncGeneratorFunction%":m,"%AsyncIteratorPrototype%":m,"%Atomics%":"undefined"==typeof Atomics?i:Atomics,"%BigInt%":"undefined"==typeof BigInt?i:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?i:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?i:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?i:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?i:FinalizationRegistry,"%Function%":s,"%GeneratorFunction%":m,"%Int8Array%":"undefined"==typeof Int8Array?i:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?i:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?i:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?p(p([][Symbol.iterator]())):i,"%JSON%":"object"==typeof JSON?JSON:i,"%Map%":"undefined"==typeof Map?i:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?p((new Map)[Symbol.iterator]()):i,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?i:Promise,"%Proxy%":"undefined"==typeof Proxy?i:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?i:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?i:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?p((new Set)[Symbol.iterator]()):i,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?i:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":u?p(""[Symbol.iterator]()):i,"%Symbol%":u?Symbol:i,"%SyntaxError%":n,"%ThrowTypeError%":l,"%TypedArray%":h,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?i:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?i:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?i:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?i:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?i:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?i:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?i:WeakSet},g=function e(t){var i;if("%AsyncFunction%"===t)i=o("async function () {}");else if("%GeneratorFunction%"===t)i=o("function* () {}");else if("%AsyncGeneratorFunction%"===t)i=o("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(i=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var r=e("%AsyncGenerator%");r&&(i=p(r.prototype))}return f[t]=i,i},v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},y=r("b7Zhx"),_=r("3bZdX"),b=y.call(Function.call,Array.prototype.concat),k=y.call(Function.apply,Array.prototype.splice),w=y.call(Function.call,String.prototype.replace),S=y.call(Function.call,String.prototype.slice),T=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,R=/\\(\\)?/g,C=function(e){var t=S(e,0,1),i=S(e,-1);if("%"===t&&"%"!==i)throw new n("invalid intrinsic syntax, expected closing `%`");if("%"===i&&"%"!==t)throw new n("invalid intrinsic syntax, expected opening `%`");var r=[];return w(e,T,(function(e,t,i,n){r[r.length]=i?w(n,R,"$1"):t||e})),r},I=function(e,t){var i,r=e;if(_(v,r)&&(r="%"+(i=v[r])[0]+"%"),_(f,r)){var s=f[r];if(s===m&&(s=g(r)),void 0===s&&!t)throw new a("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:i,name:r,value:s}}throw new n("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new a('"allowMissing" argument must be a boolean');var i=C(e),r=i.length>0?i[0]:"",s=I("%"+r+"%",t),o=s.name,c=s.value,l=!1,u=s.alias;u&&(r=u[0],k(i,b([0,1],u)));for(var p=1,m=!0;p<i.length;p+=1){var h=i[p],g=S(h,0,1),v=S(h,-1);if(('"'===g||"'"===g||"`"===g||'"'===v||"'"===v||"`"===v)&&g!==v)throw new n("property names with quotes must have matching quotes");if("constructor"!==h&&m||(l=!0),_(f,o="%"+(r+="."+h)+"%"))c=f[o];else if(null!=c){if(!(h in c)){if(!t)throw new a("base intrinsic for "+e+" exists, but the property is not available.");return}if(d&&p+1>=i.length){var y=d(c,h);c=(m=!!y)&&"get"in y&&!("originalValue"in y.get)?y.get:c[h]}else m=_(c,h),c=c[h];m&&!l&&(f[o]=c)}}return c}})),r.register("9jGQd",(function(e,t){var i="undefined"!=typeof Symbol&&Symbol,n=r("8xLv7");e.exports=function(){return"function"==typeof i&&("function"==typeof Symbol&&("symbol"==typeof i("foo")&&("symbol"==typeof Symbol("bar")&&n())))}})),r.register("b7Zhx",(function(e,t){var i=r("aFmq8");e.exports=Function.prototype.bind||i})),r.register("aFmq8",(function(e,t){var i="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,s="[object Function]";e.exports=function(e){var t=this;if("function"!=typeof t||r.call(t)!==s)throw new TypeError(i+t);for(var a,o=n.call(arguments,1),d=function(){if(this instanceof a){var i=t.apply(this,o.concat(n.call(arguments)));return Object(i)===i?i:this}return t.apply(e,o.concat(n.call(arguments)))},c=Math.max(0,t.length-o.length),l=[],u=0;u<c;u++)l.push("$"+u);if(a=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(d),t.prototype){var p=function(){};p.prototype=t.prototype,a.prototype=new p,p.prototype=null}return a}})),r.register("3bZdX",(function(e,t){var i=r("b7Zhx");e.exports=i.call(Function.call,Object.prototype.hasOwnProperty)})),r.register("idPLz",(function(e,t){var i=r("b7Zhx"),n=r("jx2Xf"),s=n("%Function.prototype.apply%"),a=n("%Function.prototype.call%"),o=n("%Reflect.apply%",!0)||i.call(a,s),d=n("%Object.getOwnPropertyDescriptor%",!0),c=n("%Object.defineProperty%",!0),l=n("%Math.max%");if(c)try{c({},"a",{value:1})}catch(e){c=null}e.exports=function(e){var t=o(i,a,arguments);if(d&&c){var n=d(t,"length");n.configurable&&c(t,"length",{value:1+l(0,e.length-(arguments.length-1))})}return t};var u=function(){return o(i,s,arguments)};c?c(e.exports,"apply",{value:u}):e.exports.apply=u})),r.register("bxBRr",(function(e,t){var i,n=Object.prototype.toString,s=Function.prototype.toString,a=/^\s*(?:function)?\*/,o=r("7iXm4")(),d=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(a.test(s.call(e)))return!0;if(!o)return"[object GeneratorFunction]"===n.call(e);if(!d)return!1;if(void 0===i){var t=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}();i=!!t&&d(t)}return d(e)===i}})),r.register("kGe6S",(function(e,i){var n=r("aBw6S"),s=r("dknuK"),a=r("3WJtC"),o=a("Object.prototype.toString"),d=r("7iXm4")(),c="undefined"==typeof globalThis?t:globalThis,l=s(),u=a("String.prototype.slice"),p={},m=r("8A0yE"),h=Object.getPrototypeOf;d&&m&&h&&n(l,(function(e){if("function"==typeof c[e]){var t=new c[e];if(Symbol.toStringTag in t){var i=h(t),n=m(i,Symbol.toStringTag);if(!n){var r=h(i);n=m(r,Symbol.toStringTag)}p[e]=n.get}}}));var f=r("3B9zg");e.exports=function(e){return!!f(e)&&(d&&Symbol.toStringTag in e?function(e){var t=!1;return n(p,(function(i,n){if(!t)try{var r=i.call(e);r===n&&(t=r)}catch(e){}})),t}(e):u(o(e),8,-1))}})),r.register("aBw6S",(function(e,t){var i=Object.prototype.hasOwnProperty,n=Object.prototype.toString;e.exports=function(e,t,r){if("[object Function]"!==n.call(t))throw new TypeError("iterator must be a function");var s=e.length;if(s===+s)for(var a=0;a<s;a++)t.call(r,e[a],a,e);else for(var o in e)i.call(e,o)&&t.call(r,e[o],o,e)}})),r.register("dknuK",(function(e,i){var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],r="undefined"==typeof globalThis?t:globalThis;e.exports=function(){for(var e=[],t=0;t<n.length;t++)"function"==typeof r[n[t]]&&(e[e.length]=n[t]);return e}})),r.register("8A0yE",(function(e,t){var i=r("jx2Xf")("%Object.getOwnPropertyDescriptor%",!0);if(i)try{i([],"length")}catch(e){i=null}e.exports=i})),r.register("3B9zg",(function(e,i){var n=r("aBw6S"),s=r("dknuK"),a=r("3WJtC"),o=a("Object.prototype.toString"),d=r("7iXm4")(),c="undefined"==typeof globalThis?t:globalThis,l=s(),u=a("Array.prototype.indexOf",!0)||function(e,t){for(var i=0;i<e.length;i+=1)if(e[i]===t)return i;return-1},p=a("String.prototype.slice"),m={},h=r("8A0yE"),f=Object.getPrototypeOf;d&&h&&f&&n(l,(function(e){var t=new c[e];if(Symbol.toStringTag in t){var i=f(t),n=h(i,Symbol.toStringTag);if(!n){var r=f(i);n=h(r,Symbol.toStringTag)}m[e]=n.get}}));e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!d||!(Symbol.toStringTag in e)){var t=p(o(e),8,-1);return u(l,t)>-1}return!!h&&function(e){var t=!1;return n(m,(function(i,n){if(!t)try{t=i.call(e)===n}catch(e){}})),t}(e)}})),r.register("1uvHv",(function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}})),r.register("eR4CL",(function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}}}));class td extends xo{constructor(e){super(),this.targetOrigin=e,this.handleMessage=this.handleMessage.bind(this),window.addEventListener("message",this.handleMessage,!1),this.mount((()=>window.removeEventListener("message",this.handleMessage))),console.debug("jacdac: iframe bridge created")}handleMessage(e){const{data:t}=e;if("jacdac"===t.channel&&"messagepacket"===t.type){const e=t.data;this.receivePacket(e)}}sendPacket(e){const t={type:"messagepacket",channel:"jacdac",data:e,sender:this.bridgeId,broadcast:!0};window.parent.postMessage(t,this.targetOrigin)}}class id extends Es{constructor(e){super(),this._roles=[],this.bus=e,this.mount(this.bus.subscribe("deviceAnnounce",this.addServices.bind(this))),this.mount(this.bus.subscribe("deviceDisconnect",this.removeServices.bind(this))),this.bindServices()}get isBound(){return this._roles.every((({service:e})=>!!e))}roles(e){return void 0!==e?this._roles.filter((({service:t})=>!!t===e)):this._roles.slice(0)}updateRoles(e){const t=this.isBound;let i=!1;const n=e.filter((({serviceClass:e})=>wr(e)));let r=0;for(;r<this._roles.length;){const e=this._roles[r];n.find((t=>t.role===e.role))?r++:(i=!0,this._roles.splice(r,1),this.emit("roleUnbound",e.role))}for(const e of n){const t=this._roles.find((t=>t.role===e.role));t?t.serviceClass!==e.serviceClass&&(i=!0,t.serviceClass=e.serviceClass,t.service&&(t.service=void 0,this.emit("roleUnbound",t.role))):(i=!0,this._roles.push(Object.assign({},e)))}this.bindServices(i),this.emitBoundEvents(t)}service(e){var t;return null===(t=this._roles.find((t=>t.role===e)))||void 0===t?void 0:t.service}updateRole(e,t,i){if(!wr(t))return;let n=this._roles.find((t=>t.role===e));if(n&&t===n.serviceClass)return void(!n.service&&i&&(n.preferredDeviceId=i));const r=this.isBound;n={role:e,serviceClass:t,preferredDeviceId:i},this._roles.push(n),this.bindRole(n)||this.emit("roleUnbound",e),this.emit("change"),this.emitBoundEvents(r)}emitBoundEvents(e){const t=this.isBound;e!==t&&this.emit(t?"bound":"unbound")}bindRole(e){const t=this.bus.services({ignoreInfrastructure:!0,serviceClass:e.serviceClass}).filter((e=>!this.roles(!0).find((t=>t.service===e))));if(t.length){let i=t[0];if(e.preferredDeviceId){const n=t.find((t=>t.device.deviceId===e.preferredDeviceId));n&&(i=n)}return e.service=i,this.emit("roleBound",e.role),!0}return!1}bindServices(e){this.roles(!1).forEach((t=>{this.bindRole(t)&&(e=!0)})),e&&this.emit("change")}addServices(e){e!==this.bus.selfDevice&&this.bindServices()}removeServices(e){let t=!1;this._roles.filter((t=>{var i;return(null===(i=t.service)||void 0===i?void 0:i.device)===e})).forEach((e=>{e.service=void 0,this.emit("roleUnbound",e.role),t=!0})),this.bindServices(t)}toString(){return this._roles.map((({role:e,service:t})=>`${e}->${t||"?"}`)).join(",")}}let nd;function rd(){return nd||(nd=vr().filter((e=>!e.shortName.startsWith("_")&&Sr(e)))),nd}var sd;let ad;s.ServiceTwinRegisterFlag=void 0,(sd=s.ServiceTwinRegisterFlag||(s.ServiceTwinRegisterFlag={}))[sd.Const=1]="Const",sd[sd.Volatile=2]="Volatile",s.ACK_MAX_DELAY=120,s.ACK_MIN_DELAY=90,s.ALIGN=Cn,s.ANNOUNCE="announce",s.ANNOUNCE_INTERVAL=500,s.BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC="f8530004-a97f-49f5-a554-3e373fbea2d5",s.BLUETOOTH_JACDAC_RX_CHARACTERISTIC="f8530002-a97f-49f5-a554-3e373fbea2d5",s.BLUETOOTH_JACDAC_SERVICE="f8530001-a97f-49f5-a554-3e373fbea2d5",s.BLUETOOTH_JACDAC_TX_CHARACTERISTIC="f8530003-a97f-49f5-a554-3e373fbea2d5",s.BLUETOOTH_TRANSPORT="bluetooth",s.BOUND="bound",s.BUS_NODE_NAME="bus",s.CHANGE="change",s.CLOSE="close",s.CMD_ADVERTISEMENT_DATA=0,s.CMD_EVENT_CODE_MASK=255,s.CMD_EVENT_COUNTER_MASK=127,s.CMD_EVENT_COUNTER_POS=8,s.CMD_EVENT_MASK=32768,s.CMD_GET_REG=4096,s.CMD_REG_MASK=4095,s.CMD_SET_REG=8192,s.CMD_TOP_MASK=61440,s.CMSISProto=Lo,s.COMMAND_NODE_NAME="command",s.COMMAND_RECEIVE="commandReceive",s.CONNECT="connect",s.CONNECTING="connecting",s.CONNECTION_STATE="connectionState",s.CONST_NODE_NAME="const",s.CRC_ACK_NODE_NAME="crcAck",s.ControlServer=na,s.DATA="data",s.DEVICE_ANNOUNCE="deviceAnnounce",s.DEVICE_CHANGE="deviceChange",s.DEVICE_CLEAN="deviceClean",s.DEVICE_CONNECT="deviceConnect",s.DEVICE_DISCONNECT="deviceDisconnect",s.DEVICE_FIRMWARE_INFO="firmwareInfo",s.DEVICE_FOUND="deviceFound",s.DEVICE_IMAGE_HEIGHT=768,s.DEVICE_IMAGE_WIDTH=1024,s.DEVICE_LOST="deviceLost",s.DEVICE_NODE_NAME="device",s.DEVICE_PACKET_ANNOUNCE="devicePacketAnnounce",s.DEVICE_RESTART="deviceRestart",s.DISCONNECT="disconnect",s.DISCONNECTING="disconnecting",s.DeviceStatsMonitor=Os,s.EMBED_MIN_ASPECT_RATIO=1.22,s.ERROR="error",s.ERROR_MICROBIT_INVALID_MEMORY="microbit/invalid-memory",s.ERROR_MICROBIT_JACDAC_MISSING="microbit/jacdac-missing",s.ERROR_MICROBIT_UNKNOWN="microbit/unknown-hardware-revision",s.ERROR_MICROBIT_V1="microbit/v1-not-supported",s.EVENT="event",s.EVENT_NODE_NAME="event",s.FIELD_NODE_NAME="field",s.FIRMWARE_BLOBS_CHANGE="firmwareBlobsChange",s.FLASH_MAX_DEVICES=6,s.FOUND="found",s.Flags=fn,s.GET_ATTEMPT="getAttempt",s.HF2Proto=Do,s.HF2_CMD_BININFO=1,s.HF2_CMD_CHKSUM_PAGES=7,s.HF2_CMD_DMESG=16,s.HF2_CMD_INFO=2,s.HF2_CMD_JDS_CONFIG=32,s.HF2_CMD_JDS_SEND=33,s.HF2_CMD_READ_WORDS=8,s.HF2_CMD_RESET_INTO_APP=3,s.HF2_CMD_RESET_INTO_BOOTLOADER=4,s.HF2_CMD_START_FLASH=5,s.HF2_CMD_WRITE_FLASH_PAGE=6,s.HF2_CMD_WRITE_WORDS=9,s.HF2_DEVICE_MAJOR=42,s.HF2_EV_JDS_PACKET=8388640,s.HF2_EV_MASK=8388608,s.HF2_FLAG_CMDPKT_BODY=0,s.HF2_FLAG_CMDPKT_LAST=64,s.HF2_FLAG_MASK=192,s.HF2_FLAG_SERIAL_ERR=192,s.HF2_FLAG_SERIAL_OUT=128,s.HF2_MODE_BOOTLOADER=1,s.HF2_MODE_USERSPACE=2,s.HF2_SIZE_MASK=63,s.HF2_STATUS_EVENT=128,s.HF2_STATUS_EXEC_ERR=2,s.HF2_STATUS_INVALID_CMD=1,s.HF2_STATUS_OK=0,s.IDENTIFY="identify",s.IDENTIFY_DURATION=2e3,s.JACDAC_ERROR="JacdacError",s.JDBridge=xo,s.JDBus=Co,s.JDClient=Es,s.JDDevice=Us,s.JDError=Bo,s.JDEvent=Is,s.JDEventSource=bs,s.JDField=Ts,s.JDNode=ws,s.JDRegister=Cs,s.JDRegisterServer=Ks,s.JDServerServiceProvider=sa,s.JDService=Ls,s.JDServiceClient=To,s.JDServiceMemberNode=Ss,s.JDServiceProvider=ra,s.JDServiceServer=Xs,s.JD_ADVERTISEMENT_0_ACK_SUPPORTED=256,s.JD_ADVERTISEMENT_0_COUNTER_MASK=15,s.JD_DEVICE_DISCONNECTED_DELAY=5e3,s.JD_DEVICE_LOST_DELAY=1500,s.JD_FRAME_FLAG_ACK_REQUESTED=2,s.JD_FRAME_FLAG_COMMAND=1,s.JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS=4,s.JD_SERIAL_HEADER_SIZE=16,s.JD_SERIAL_MAX_PAYLOAD_SIZE=236,s.JD_SERVICE_INDEX_CRC_ACK=63,s.JD_SERVICE_INDEX_CTRL=0,s.JD_SERVICE_INDEX_INV_MASK=192,s.JD_SERVICE_INDEX_MASK=63,s.JD_SERVICE_INDEX_MAX_NORMAL=48,s.JD_SERVICE_INDEX_PIPE=62,s.JOYSTICK_ARCADE_BUTTONS=ua,s.JOYSTICK_DPAD_AB_BUTTONS=ma,s.JOYSTICK_DPAD_A_BUTTONS=pa,s.JOYSTICK_DPAD_BUTTONS=la,s.JOYSTICK_GAMEPAD_EXTRA_BUTTONS=ha,s.JSONTryParse=function(e){if(null==e)return e;try{return JSON.parse(e)}catch(e){return}},s.LATE="late",s.LOST="lost",s.MAX_SERVICES_LENGTH=59,s.MESSAGE="message",s.META_ACK="ACK",s.META_ACK_FAILED="ACK_FAILED",s.META_GET="GET",s.META_PIPE="PIPE",s.META_TRACE="TRACE",s.MICROBIT_V2_PRODUCT_ID=516,s.MICROBIT_V2_VENDOR_ID=3368,s.NEW_LISTENER="newListener",s.NodeWebSerialIO=class{constructor(e){this.SerialPort=e,this.ready=!1,this.onData=e=>{},this.onError=e=>{console.warn(`usb error: ${Vo(e)||""} ${e?e.stack:e}`)}}log(e,t){fn.diagnostics&&(null!=t?console.debug("usb: "+e,t):console.debug("usb: "+e))}mkProto(){return new Do(this)}clearDev(){this.dev&&(this.dev=null,this.onData=()=>console.warn("rogue webserial hf2 onData"))}disconnectAsync(){return this.ready=!1,this.dev?(console.debug("close device"),this.cancelStreams().catch((e=>{console.debug(e)})).then((()=>(this.clearDev(),yn(500))))):Promise.resolve()}devInfo(){return this.port?this.port.vendorId+":"+this.port.productId:"n/a"}error(e,t){const i=new Bo(`serial device ${this.devInfo()} (${e})`,t);this.onError(i)}async cancelStreams(){await ed((e=>this.dev.close(e)))}sendPacketAsync(e){if(!this.dev)return Promise.reject(new Error("Disconnected"));if(Kn(e.length<=64),e.length<64){const t=e;(e=new Uint8Array(64)).set(t)}return ed((t=>this.dev.write(e,void 0,t)))}async tryReconnectAsync(){try{this.dev=void 0,this.port=void 0;const e=await this.SerialPort.list();if(this.port=e.filter((e=>/^PX/.test(e.serialNumber)||jo.filters.some((t=>t.usbVendorId==parseInt(e.vendorId,16)))))[0],this.port){let e;await ed((e=>{this.dev=new this.SerialPort(this.port.path,{baudRate:115200},e)})),this.dev.on("data",(t=>{if(e&&(t=qn(e,t)),e=null,63&t.length)e=t;else if(t.length>64)for(let e=0;e<t.length;e+=64)this.onData(t.slice(e,e+64));else this.onData(t)})),this.dev.on("error",(e=>{this.error(e.messsage||e+"")}))}}catch(e){console.log(e),this.dev=void 0,this.port=void 0}}async connectAsync(e,t){await this.tryReconnectAsync(),!this.dev&&e&&gn("can't find suitable device",!0);const i=this.mkProto();try{await i.postConnectAsync()}catch(e){throw console.debug(e),await i.disconnectAsync(),e}return i}},s.PACKETIO_TRANSPORT="packetio",s.PACKET_ANNOUNCE="packetAnnounce",s.PACKET_DATA_NORMALIZE="packetDataNormalize",s.PACKET_EVENT="packetEvent",s.PACKET_INVALID_CRC="packetInvalidCrc",s.PACKET_INVALID_DATA="packetInvalidData",s.PACKET_KIND_ANNOUNCE="announce",s.PACKET_KIND_EVENT="event",s.PACKET_KIND_RO="ro",s.PACKET_KIND_RW="rw",s.PACKET_PRE_PROCESS="packetPreProcess",s.PACKET_PROCESS="packetProcess",s.PACKET_RECEIVE="packetReceive",s.PACKET_RECEIVE_ANNOUNCE="packetReceiveAnnounce",s.PACKET_REPORT="packetReport",s.PACKET_SEND="packetSend",s.PACKET_SEND_DISCONNECT="packetSendDisconnect",s.PING_LOGGERS_POLL=2400,s.PIPE_CLOSE_MASK=32,s.PIPE_COUNTER_MASK=31,s.PIPE_METADATA_MASK=64,s.PIPE_NODE_NAME="pipe",s.PIPE_PORT_SHIFT=7,s.PIPE_REPORT_NODE_NAME="pipe_report",s.PROGRESS="progress",s.Packet=hs,s.PromiseBuffer=xn,s.PromiseQueue=Fn,s.READING_SENT="readingSent",s.REFRESH="refresh",s.REFRESH_REGISTER_POLL=50,s.REGISTER_NODE_NAME="register",s.REGISTER_OPTIONAL_POLL_COUNT=3,s.REGISTER_POLL_FIRST_REPORT_INTERVAL=400,s.REGISTER_POLL_REPORT_INTERVAL=5001,s.REGISTER_POLL_REPORT_MAX_INTERVAL=6e4,s.REGISTER_POLL_REPORT_VOLATILE_INTERVAL=1e3,s.REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL=5e3,s.REGISTER_POLL_STREAMING_INTERVAL=5e3,s.REGISTER_PRE_GET="registerPreGet",s.REGISTER_REFRESH_RETRY_0=30,s.REGISTER_REFRESH_RETRY_1=80,s.REGISTER_REFRESH_TIMEOUT=150,s.REMOVE_LISTENER="removeListener",s.RENDER="render",s.REPORT_NODE_NAME="report",s.REPORT_RECEIVE="reportReceive",s.REPORT_UPDATE="reportUpdate",s.RESET="reset",s.RESET_IN_TIME_US=2e6,s.RESTART="restart",s.ROLE_BOUND="roleBound",s.ROLE_CHANGE="roleChange",s.ROLE_HAS_NO_SERVICE="roleHasNoService",s.ROLE_MANAGER_CHANGE="roleManagerChange",s.ROLE_MANAGER_POLL=1500,s.ROLE_UNBOUND="roleUnbound",s.RoleManager=id,s.RoleManagerClient=Ro,s.SELF_ANNOUNCE="selfAnnounce",s.SERIAL_TRANSPORT="serial",s.SERVICE_CLIENT_ADDED="serviceClientAdded",s.SERVICE_CLIENT_REMOVED="serviceClientRemoved",s.SERVICE_MIXIN_NODE_NAME="serviceMixin",s.SERVICE_NODE_NAME="service",s.SERVICE_PROVIDER_ADDED="serviceProviderAdded",s.SERVICE_PROVIDER_REMOVED="serviceProviderRemoved",s.SERVICE_TEST_NODE_NAME="serviceTest",s.SG90_RESPONSE_SPEED=.12,s.SRV_ACCELEROMETER=521405449,s.SRV_ARCADE_GAMEPAD=501915758,s.SRV_ARCADE_SOUND=533083654,s.SRV_AZURE_IOT_HUB_HEALTH=342028028,s.SRV_BARCODE_READER=477339244,s.SRV_BAROMETER=504462570,s.SRV_BIT_RADIO=449414863,s.SRV_BOOTLOADER=x,s.SRV_BUTTON=343122531,s.SRV_BUZZER=458731991,s.SRV_CAPACITIVE_BUTTON=677752265,s.SRV_CHARACTER_SCREEN=523748714,s.SRV_CODAL_MESSAGE_BUS=304085021,s.SRV_COLOR=372299111,s.SRV_COMPASS=364362175,s.SRV_CONTROL=K,s.SRV_DIMMER=531637829,s.SRV_DISTANCE=337275786,s.SRV_DMX=298814469,s.SRV_DOT_MATRIX=286070091,s.SRV_E_CO2=379362758,s.SRV_FLEX=524797638,s.SRV_GYROSCOPE=505087730,s.SRV_HEART_RATE=376204740,s.SRV_HID_ADAPTER=509040821,s.SRV_HID_KEYBOARD=414210922,s.SRV_HID_MOUSE=411425820,s.SRV_HUMIDITY=382210232,s.SRV_ILLUMINANCE=510577394,s.SRV_INDEXED_SCREEN=385496805,s.SRV_INFRASTRUCTURE=Ie,s.SRV_JOYSTICK=277836886,s.SRV_LED=506480888,s.SRV_LED_PIXEL=309264608,s.SRV_LIGHT_LEVEL=400333340,s.SRV_LOGGER=je,s.SRV_MAGNETOMETER=318935176,s.SRV_MATRIX_KEYPAD=319172040,s.SRV_MICROPHONE=289254534,s.SRV_MIDI_OUTPUT=444894423,s.SRV_MODEL_RUNNER=336566904,s.SRV_MOTION=293185353,s.SRV_MOTOR=385895640,s.SRV_MULTITOUCH=416636459,s.SRV_POTENTIOMETER=522667846,s.SRV_POWER=530893146,s.SRV_PRESSURE_BUTTON=672612547,s.SRV_PROTO_TEST=gt,s.SRV_PULSE_OXIMETER=280710838,s.SRV_RAIN_GAUGE=326323349,s.SRV_REAL_TIME_CLOCK=445323816,s.SRV_REFLECTED_LIGHT=309087410,s.SRV_RELAY=406840918,s.SRV_RNG=394916002,s.SRV_ROLE_MANAGER=Pt,s.SRV_ROTARY_ENCODER=284830153,s.SRV_ROVER=435474539,s.SRV_SENSOR_AGGREGATOR=496034245,s.SRV_SERVO=318542083,s.SRV_SETTINGS=zt,s.SRV_SEVEN_SEGMENT_DISPLAY=425810167,s.SRV_SOIL_MOISTURE=491430835,s.SRV_SOLENOID=387392458,s.SRV_SOUND_LEVEL=346888797,s.SRV_SOUND_PLAYER=335795e3,s.SRV_SOUND_SPECTRUM=360365086,s.SRV_SPEECH_SYNTHESIS=302307733,s.SRV_SWITCH=450008066,s.SRV_TCP=457422603,s.SRV_THERMOCOUPLE=339394657,s.SRV_THERMOMETER=337754823,s.SRV_TRAFFIC_LIGHT=365137307,s.SRV_TVOC=312849815,s.SRV_UV_INDEX=527306128,s.SRV_VERIFIED_TELEMETRY=563381279,s.SRV_VIBRATION_MOTOR=406832290,s.SRV_WATER_LEVEL=343630573,s.SRV_WEIGHT_SCALE=525160512,s.SRV_WIFI=413852154,s.SRV_WIND_DIRECTION=409725227,s.SRV_WIND_SPEED=458824639,s.START="start",s.STOP="stop",s.STREAMING_DEFAULT_INTERVAL=50,s.SettingsClient=class extends To{constructor(e){super(e),e.registersUseAcks=!0}async clear(){await this.service.sendCmdAsync(s.SettingsCmd.Clear)}async listKeys(){const e=new Ds(this.bus);await this.service.sendPacketAsync(e.openCommand(s.SettingsCmd.ListKeys),!0);const{output:t}=await e.readAll();return t.map((e=>e.stringData)).filter((e=>!!e))}async list(){const e=new Ds(this.bus);await this.service.sendPacketAsync(e.openCommand(s.SettingsCmd.List),!0);const{output:t}=await e.readAll();return t.map((e=>{const[t,i]=e.jdunpack("z b");return t&&{key:t,value:i}})).filter((e=>!!e))}async setValue(e,t){if(e=e.trim(),void 0===t)await this.deleteValue(e);else{const i=hs.from(s.SettingsCmd.Set,qr("z b",[e,t]));await this.service.sendPacketAsync(i),this.emit("change")}}async setStringValue(e,t){await this.setValue(e,t?Jn(t):void 0)}async getValue(e){if(!e)return;e=e.trim();const t=hs.from(s.SettingsCmd.Get,qr("s",[e])),i=await this.service.sendCmdAwaitResponseAsync(t),[n,r]=Hr(i.data,"z b");if(e===n)return r;console.error(`device returned different key, got "${n}", expected "${e}"`)}async getStringValue(e){const t=await this.getValue(e);return t&&Hn(t)}async deleteValue(e){if(!e)return;e=e.trim();const t=hs.from(s.SettingsCmd.Delete,qr("s",[e]));await this.service.sendPacketAsync(t),this.emit("change")}},s.TIMEOUT="timeout",s.TIMEOUT_DISCONNECT="timeoutDisconnect",s.TRACE="trace",s.TRACE_FILTER_HORIZON=100,s.TRANSPORT_CONNECT_RETRY_DELAY=500,s.TRANSPORT_PULSE_TIMEOUT=6e4,s.TYPESCRIPT_STATIC_NAMESPACE="jacdac",s.Trace=vs,s.TracePlayer=Io,s.TraceRecorder=class extends Es{constructor(e){super(),this.bus=e,this.maxRecordingLength=1e5,this.handlePacket=this.handlePacket.bind(this),this.mount((()=>{var e;return null===(e=this._subscription)||void 0===e?void 0:e.call(this)}))}start(){this.recording||(this._subscription=this.bus.subscribe(["packetProcess","packetSend"],this.handlePacket),this._trace=new vs([],{maxLength:this.maxRecordingLength}),this.emit("start"),this.emit("change"))}stop(){var e;if(!this.recording)return;null===(e=this._subscription)||void 0===e||e.call(this),this._subscription=void 0;const t=this._trace;return this._trace=void 0,this.emit("stop"),this.emit("change"),t}get recording(){return!!this._trace}get trace(){return this._trace}handlePacket(e){this._trace.addPacket(e),this.emit("packetProcess",e)}},s.TraceView=class extends Es{constructor(e,t,i=200){super(),this.bus=e,this.id="v"+Math.random(),this._maxFilteredLength=100,this._paused=!1,this._packetFilter=void 0,this._filteredPackets=[],this.silent=!1,this._trace=new vs([],{maxLength:1e3}),this.handlePacket=this.handlePacket.bind(this),this.handleFilterUpdate=this.handleFilterUpdate.bind(this),this.notifyPacketsChanged=Yn((()=>{this.silent||this.setFilteredPackets()}),i),this.mount(this.bus.subscribe(["packetProcess","packetSend"],this.handlePacket)),this.mount(this.bus.subscribe("deviceAnnounce",this.handleFilterUpdate)),this.filter=t}get paused(){return this._paused}set paused(e){e!==this._paused&&(this._paused=e,this._paused||(this.refreshFilter(),this.emit("change")))}get trace(){return this._trace}set trace(e){e!==this._trace&&(this._trace=e,this.refreshFilter(),this.emit("change"))}get filteredPackets(){return this._filteredPackets}get filter(){return this._filter}set filter(e){e!==this._filter&&(this._filter=e,this.refreshFilter(),this.emit("change"))}get maxFilteredLength(){return this._maxFilteredLength}set maxFilteredLength(e){this._maxFilteredLength!==e&&(this._maxFilteredLength=e,this.refreshFilter(),this.emit("change"))}setFilteredPackets(){this._filteredPackets=this._filteredPackets.slice(0,this._filteredPackets.length>1.1*this.maxFilteredLength?this.maxFilteredLength:this._filteredPackets.length),this.emit("change")}clear(){this.trace=new vs([],{maxLength:1e3}),this._filteredPackets=[],this.setFilteredPackets(),this.emit("change")}handleFilterUpdate(){this.refreshFilter()}refreshFilter(){var e,t;this.id="view"+Math.random(),this._packetFilter=Eo(this.bus,this._filter),this._filteredPackets=[];const i=this.trace.packets;for(let t=i.length-1;t>=0&&this._filteredPackets.length<this.maxFilteredLength;--t){const n=i[t];(null===(e=this._packetFilter)||void 0===e?void 0:e.filter(n))&&this.addFilteredPacket(n)}this._filteredPackets=this._filteredPackets.reverse(),null===(t=this.notifyPacketsChanged)||void 0===t||t.call(this)}handlePacket(e){var t,i;this._paused||(this.trace.addPacket(e),(null===(t=this._packetFilter)||void 0===t?void 0:t.filter(e))&&(this.addFilteredPacket(e),null===(i=this.notifyPacketsChanged)||void 0===i||i.call(this)))}addFilteredPacket(e){var t,i,n,r;if(e.meta[this.id])return;e.meta[this.id]=!0,e.isMultiCommand||e.device||(e.device=this.bus.device(e.deviceIdentifier,!1,e));let s=!0;const a=Mn(e.toBuffer());if(null===(t=this._packetFilter)||void 0===t?void 0:t.props.grouping){const t=this._filteredPackets.slice(0,10).find((t=>e.timestamp-t.packet.timestamp<5e3&&t.hash===a));t&&(t.count++,s=!1)}if(e.isCRCAck){const t=this.trace.packets,n=e.serviceCommand,r=e.deviceIdentifier,a=Math.max(0,t.length-100);for(let o=t.length-1;o>=a;o--){const a=t[o];if(a.requiresAck&&a.deviceIdentifier===r&&a.crc===n){a.meta.ACK=e,(null===(i=this._packetFilter)||void 0===i?void 0:i.props.collapseAck)&&(s=!1);break}}}if(e.isRegisterGet&&e.isReport&&!e.meta.GET){const t=this.trace.packets,i=e.deviceIdentifier,r=e.serviceIndex,s=e.registerIdentifier,a=Math.max(0,t.length-100);for(let o=t.length-1;o>=a;o--){const a=t[o];if(a.isRegisterGet&&a.isCommand&&a.deviceIdentifier===i&&a.serviceIndex===r&&a.registerIdentifier===s){e.meta.GET=a,(null===(n=this._packetFilter)||void 0===n?void 0:n.props.collapseGets)&&this._filteredPackets.splice(o,1);break}}}if((null===(r=this._packetFilter)||void 0===r?void 0:r.props.collapsePipes)&&e.isPipe&&e.isCommand){const t=this._filteredPackets,i=Math.min(t.length,100),n=e.pipePort,r=e.deviceIdentifier;for(let a=0;a<i;++a){const i=t[a].packet;if(i.deviceIdentifier===r&&i.pipePort===n){let t=i.meta.PIPE;t||(t=i.meta.PIPE=[]),t[e.pipeCount]=e,s=!1;break}}}if(s){const t=e.timestamp+a;this._filteredPackets.unshift({key:t,hash:a,packet:e,count:1})}}},s.Transport=ta,s.UNBOUND="unbound",s.USB_FILTERS=Oo,s.USB_TRANSPORT="usb",s.VIRTUAL_DEVICE_NODE_NAME="virtualdevice",s.WEBSOCKET_TRANSPORT="web",s.WEB_SERIAL_FILTERS=jo,s.WallClockScheduler=js,s.WifiServer=io,s.addCustomServiceSpecification=function(e){e&&e.classIdentifier&&(fr[e.classIdentifier]=e,mr=void 0)},s.addServiceProvider=wo,s.arrayConcatMany=Gn,s.arrayShuffle=function(e){for(let t=e.length-1;t>0;t--){const i=Math.floor(Math.random()*(t+1));[e[t],e[i]]=[e[i],e[t]]}return e},s.assert=Kn,s.bufferConcat=qn,s.bufferConcatMany=function(e){let t=0;for(const i of e)t+=i.length;const i=new Uint8Array(t);t=0;for(const n of e)i.set(n,t),t+=n.length;return i},s.bufferEq=kn,s.bufferToArray=pr,s.bufferToString=Hn,s.camelize=Qi,s.capitalize=Zi,s.clampToStorage=Ur,s.cleanStack=gs,s.clearCustomServiceSpecifications=function(){fr={},mr=void 0},s.clone=Xn,s.commandName=ds,s.concatBufferArray=function(e){let t=0;for(const i of e)t+=i.length;const i=new Uint8Array(t);t=0;for(const n of e)i.set(n,t),t+=n.length;return i},s.converters=function(){return{json:e=>JSON.stringify(e,null,2),c:Yi,ts:e=>un(e,"ts"),sts:e=>un(e,"sts"),cs:e=>un(e,"c#"),py:e=>function(e){const t=["# Autogenerated file for "+e.name,"# Add missing from ... import const"];let i="JD_"+zi(e.shortName)+"_";"_"==e.shortId[0]&&(i="JD_"),"_"!=e.shortId[0]&&t.push(`_JD_SERVICE_CLASS_${zi(e.shortName)} = const(${Gi(e.classIdentifier)})`);for(const i in e.constants){const{value:n,hex:r}=e.constants[i];t.push(`_JD_${zi(i)} = const(${r?n.toString():Gi(n)})\n`)}for(const n of ji(e.enums).filter((e=>!e.derived))){const e=i+zi(n.name);for(const i of Object.keys(n.members))t.push(`_${e}_${zi(i)} = const(${Gi(n.members[i])})`)}for(const n of e.packets)if(!n.derived&&!n.secondary&&"pipe_command"!=n.kind&&"pipe_report"!=n.kind){let e="CMD";qi(n.kind)?e="REG":"event"==n.kind?e="EV":"meta_pipe_command"!=n.kind&&"meta_pipe_report"!=n.kind||(e="PIPE");let r=Gi(n.identifier);n.identifierName&&(r="JD_"+e+"_"+zi(n.identifierName));const s=i+e+"_"+zi(n.name);s!=r&&t.push(`_${s} = const(${r})`)}return t.join("\n")}(e)}},s.crc=Rn,s.createBluetoothTransport=Mo,s.createNodeUSBOptions=function(){console.debug("jacdac: creating usb transport");const e=new(0,r("1VG7F").USB)({devicesFound:async function(e){for(const t of e){if(3368===t.vendorId&&516===t.productId)return t;if(42==t.deviceVersionMajor)for(const e of t.configuration.interfaces){const i=e.alternates[0];if(255==i.interfaceClass&&42==i.interfaceSubclass)return t}}}});async function t(t){console.debug("requesting device...");try{return await e.requestDevice(t)}catch(e){return void console.debug(e)}}return{getDevices:async function(e){const i=await t(e);return i?[i]:[]},requestDevice:t,connectObservable:new $o(e,"connect"),disconnectObservable:new $o(e,"disconnect")}},s.createUSBBus=function(e){return new Co([Ko(e)])},s.createUSBTransport=Ko,s.createUSBWorkerTransport=function(e){return Wo()&&new Xo("usb",e,{checkPulse:!0,requestDevice:()=>Jo(Oo).then((e=>null==e?void 0:e.serialNumber)),connectObservable:new $o(navigator.usb,"connect"),disconnectObservable:new $o(navigator.usb,"disconnect")})},s.createWebBus=function(e){const{usbOptions:t,iframeTargetOrigin:i}=e||{},n=new Co([null!==t&&Ko(t),Zo(),Mo()]),r=null!==i&&function(e="*"){return ja()&&new td(e)}(i);return r&&(r.bus=n),n},s.createWebSerialBus=function(){return new Co([Zo()])},s.createWebSerialTransport=Zo,s.dashify=function(e){return e?tn(e.replace(/^_+/,"")).replace(/(_|\s)+/g,"-").toLowerCase():e},s.dateToClock=Qs,s.debounce=function(e,t){let i;return function(){i&&clearTimeout(i),i=setTimeout((async()=>{e()}),t)}},s.debounceAsync=er,s.decodeMember=es,s.decodeMembers=ts,s.decodePacketData=ss,s.decodeU32LE=function(e){const t=[];for(let i=0;i<e.length;i+=4)t.push(jn(e,i));return t},s.delay=yn,s.dependencyId=function(e){return Array.isArray(e)?(null==e?void 0:e.map((e=>(null==e?void 0:e.nodeId)||"?")).join(","))||"":(null==e?void 0:e.nodeId)||""},s.deviceServiceName=function(e){var t,i;const n=os(null===(t=null==e?void 0:e.device)||void 0===t?void 0:t.serviceClassAt(e.serviceIndex));return`${(null===(i=null==e?void 0:e.device)||void 0===i?void 0:i.shortId)||"?"}/${n}:${e.serviceIndex}`},s.deviceSpecificationFromIdentifier=function(e){if(void 0===e)return;return gr.find((t=>t.id===e))},s.deviceSpecificationFromProductIdentifier=yr,s.deviceSpecifications=function(e){const{includeDeprecated:t,includeExperimental:i}=e||{};let n=gr.slice(0);return t||(n=n.filter((e=>"deprecated"!==e.status))),i||(n=n.filter((e=>"experimental"!==e.status))),n},s.deviceSpecificationsForService=function(e){if(!isNaN(e))return gr.filter((t=>{var i;return(null===(i=t.services)||void 0===i?void 0:i.indexOf(e))>-1}))},s.ellipseJoin=function(e,t,i="..."){let n="";for(let i=0;i<e.length&&n.length<t;++i)n&&(n+=", "),n+=e[i];return n.length>t?n.slice(0,t)+i:n},s.encodeU32LE=$n,s.encodings=Oi,s.errorCode=Vo,s.escapeDeviceIdentifier=mn,s.escapeDeviceNameIdentifier=hn,s.flagsToValue=function(e){return e.reduce(((e,t)=>e|t),0)},s.flashFirmwareBlob=async function(e,t,i,n,r){if(!(null==i?void 0:i.length))return;zs=Date.now(),Ws(`resetting ${i.length} device(s)`);for(const t of i){const i=e.device(t.deviceId);Ws(`resetting ${i}`),await i.sendCtrlCommand(s.ControlCmd.Reset)}const a=await async function(e){const t=[],i=i=>{1==i.serviceIndex&&0==i.serviceCommand&&i.getNumber(s.NumberFormat.UInt32LE,0)==x&&(t.find((e=>e.device.deviceId==i.deviceIdentifier))||(Ws("new flasher"),t.push(new Hs(e,i))))};try{e.on("packetReport",i);for(let t=0;t<10;++t){const t=hs.onlyHeader(0);await t.sendAsMultiCommandAsync(e,x),await e.delay(10)}}finally{e.off("packetReport",i)}return t}(e),o=a.filter((e=>!!n||e.dev_class==t.productIdentifier));o.length?(o.length!=i.length&&console.error(`expected ${i.length} flashers, got ${o.length}`),o[0].classClients=o,Ws(`flashing ${t.name}`),await o[0].flashFirmwareBlob(t,r)):Ws("no devices to flash")},s.flatClone=function(e){if(null==e)return null;const t={};return Object.keys(e).forEach((i=>{t[i]=e[i]})),t},s.fnv1=Tn,s.fromHex=Dn,s.fromUTF8=An,s.generateDeviceSpecificationId=pn,s.getNumber=dr,s.groupBy=nr,s.hash=wn,s.hexDump=us,s.hexNum=Vn,s.hsvToCss=function(e,t,i,n,r){const s=360*e/255,a=(r?255:t)/255,o=i/255,[d,c,l]=function(e,t,i){const n=(2-t)*i/2;0!=n&&(t=1==n?0:n<.5?t*i/(2*n):t*i/(2-2*n));return[e,t,n]}(s,a,o);return`hsla(${d}, ${100*c}%, ${100*l}%, ${(.3+.7*l)*n}`},s.humanify=nn,s.identifierToUrlPath=function(e){return null==e?void 0:e.replace(/-/g,"/").replace(/\./g,"").toLowerCase()},s.idiv=Sn,s.inIFrame=ja,s.intOfBuffer=ur,s.isAckError=function(e){var t;return!!(null===(t=e)||void 0===t?void 0:t.__ack)},s.isActuator=function(e){return e&&e.packets.some((e=>e.identifier===s.SystemReg.Value))&&e.packets.some((e=>e.identifier===s.SystemReg.Intensity))},s.isBufferEmpty=Wn,s.isCancelError=function(e){var t;return!!(null===(t=e)||void 0===t?void 0:t.__cancel)},s.isCommand=function(e){return"command"==e.kind},s.isConstRegister=Fr,s.isEvent=Pr,s.isHighLevelEvent=function(e){return Pr(e)&&!e.lowLevel&&!e.internal&&Er.indexOf(e.identifier)<0},s.isHighLevelRegister=Ir,s.isInfrastructure=br,s.isInstanceOf=_r,s.isIntegerType=Mr,s.isIntensity=Nr,s.isNumericType=function(e){const t=e.type;return!e.startRepeats&&/^[uif]\d+(\.\d+)?$/.test(t)&&"pipe_port"!=t&&"bool"!=t},s.isOptionalReadingRegisterCode=Ar,s.isPipeReport=function(e){return"pipe_report"==e.kind},s.isPipeReportOf=function(e,t){return"pipe_report"==t.kind&&"command"==e.kind&&e.pipeType&&e.pipeType===t.pipeType},s.isReading=Rr,s.isRegister=Tr,s.isReportOf=function(e,t){return t.secondary&&"report"==t.kind&&"command"==e.kind&&e.name==t.name},s.isSensor=Sr,s.isSet=Ln,s.isValue=xr,s.isValueOrIntensity=function(e){return e&&"rw"==e.kind&&(e.identifier==s.SystemReg.Value||e.identifier==s.SystemReg.Intensity)},s.isWebBluetoothEnabled=function(){return!!fn.webBluetooth},s.isWebBluetoothSupported=Fo,s.isWebSerialEnabled=function(){return!!fn.webSerial},s.isWebSerialSupported=Yo,s.isWebTransportSupported=function(){return Ho()||Yo()||Fo()},s.isWebUSBEnabled=Wo,s.isWebUSBSupported=Ho,s.jdpack=qr,s.jdpackEqual=function(e,t,i){return!t==!i&&(!t||kn(qr(e,t),qr(e,i)))},s.jdunpack=Hr,s.jsonCopyFrom=function(e,t){const i=Xn(t);for(const n of Object.keys(t))e[n]=i[n]},s.lightEncode=function(e,t){const i=[];let n=[],r=0,s=0;function a(e){if(null==e||(0|e)!=e||e<0||e>=16383)throw new Error("number out of range: "+e);e<128?i.push(e):(i.push(128|e>>8),i.push(255&e))}function o(){if(207==s){if(1!=n.length)throw new Error("setone requires 1 color")}else{if(0==n.length)return;n.length<=3?i.push(192|n.length):(i.push(192),i.push(n.length))}for(const e of n)i.push(e>>16&255),i.push(e>>8&255),i.push(e>>0&255);n=[]}function d(){for(;No(e.charCodeAt(r));)r++;const t=r;for(;r<e.length&&!No(e.charCodeAt(r));)r++;return e.slice(t,r)}for(;r<e.length;){const e=d(),r=e.charCodeAt(0);if(97<=r&&r<=122){if(o(),s=Ao(e),null==s)throw new Error("unknown light command: "+e);if(256==s){const e=parseFloat(d());if(isNaN(e)||e<0||e>2)throw new Error("expecting scale");i.push(216),i.push(3),i.push(208);const t=255&Math.round(128*e);i.push(193),i.push(t),i.push(t),i.push(t)}else i.push(s)}else if(48<=r&&r<=57)a(parseInt(e));else if(37==r){if(0==t.length)throw new Error("out of args, %");const e=t.shift();if("number"!=typeof e)throw new Error("expecting number");a(e)}else if(35==r)if(1==e.length){if(0==t.length)throw new Error("out of args, #");const e=t.shift();if("number"==typeof e)n.push(e);else{if(!Array.isArray(e))throw Error("invalid number "+e);for(const t of e)n.push(t)}}else{if(7!=e.length)throw new Error("invalid color: "+e);{const t=Dn(e.slice(1)),i=t[0]<<16|t[1]<<8|t[2];n.push(i)}}}return o(),new Uint8Array(i)},s.loadServiceSpecifications=function(e){hr=(null==e?void 0:e.slice(0))||[],mr=void 0},s.memberValueToString=function(e,t){if(null==e)return"";switch(t.type){case"bytes":return Mn(e);case"string":return e;default:return""+e}},s.memcpy=_n,s.modifierCodes=Xa,s.normalizeDeviceSpecification=function(e){var t;const i={id:pn(e),name:e.name,company:e.company,description:e.description,repo:e.repo,link:e.link,services:e.services,productIdentifiers:e.productIdentifiers,transport:null===(t=e.transport)||void 0===t?void 0:t.toLowerCase(),tags:e.tags,firmwares:e.firmwares,version:e.version?e.version.replace(/^v/,""):void 0,designIdentifier:e.designIdentifier};return void 0!==e.status&&(i.status=e.status),i},s.numberFormatFromStorageType=Dr,s.numberFormatToStorageType=Lr,s.objectToUnpacked=function(e,t){if(!t)return[];if("number"==typeof t||"string"==typeof t)return[t];if("boolean"==typeof t)return[t?1:0];if(Array.isArray(t))return t;{const{fields:i}=e,n=[];for(let r=0;r<i.length;++r){const s=i[r],a=t["_"===s.name?e.name:s.name];if(s.startRepeats){const e=i.slice(r);n.push(a.map((t=>{const i=[];for(let n=0;n<e.length;++n){const r=e[n].name;i.push(t[r])}return i})));break}n.push(a)}return n}},s.packArguments=function(e,t){let i=-1,n=0,r=0,s=0;const a=new Uint8Array(256);for(let o=0;o<e.fields.length&&!(r>=t.length&&n>0);++r,++o){const d=r<t.length?t[r]:0,c=e.fields[o];-1==i&&c.startRepeats&&(i=o);const l="string0"==c.type&&"string"==typeof d?d+"\0":d,u="boolean"==typeof l?l?1:0:"string"==typeof l?In(Nn(l)):l;if("number"==typeof u){const e=Vr(u,c);if(0==c.storage)throw new Error(`expecting ${c.type} got number`);const t=Dr(c.storage);cr(a,t,s,Ur(e,c.storage)),s+=or(t)}else{let e=Math.abs(c.storage);if("string"==typeof l){0==e&&(e=u.length);const t=u.slice(0,e);a.set(t,s),s+=e}else{if(0!=e&&e!=u.length)throw new Error(`expecting ${Math.abs(c.storage)} bytes; got ${u.length}`);a.set(u,s),s+=u.length}}if(s>=236)throw new Error(`jacdac packet length too large, ${s} > 236 bytes`);-1!=i&&o+1>=e.fields.length&&(o=i-1,n++)}const o=Tr(e)?8192|e.identifier:e.identifier,d=hs.from(o,a.slice(0,s));return"report"!=e.kind&&(d.isCommand=!0),d},s.packFormat=dn,s.packInfo=cn,s.packetSpeedTest=async function(e){const t=4096|s.ControlReg.ProductIdentifier;e.on("packetReport",p);const i=Date.now();let n=Date.now(),r=0,a=0,o=!1;for(await u();r<100;){await yn(50);const e=Date.now();if(e-i>3e3)break;e-n>100&&await u()}o=!0,await yn(250),e.off("packetReport",p);const d=Date.now()-i,c=r/(d/1e3),l=100*(r-a)/r;async function u(){n=Date.now(),r++,await e.sendCtrlCommand(t)}async function p(e){0==e.serviceIndex&&e.serviceCommand==t&&a++}return{msg:`${c.toFixed(1)} pkts/s; ${l.toFixed(2)}% dropped`,pktsPerSecond:c,dropRate:l}},s.parseDeviceId=function(e){if(e&&16==(e=e.replace(/\s/g,"")).length&&/^[a-f0-9]+$/i.test(e))return Dn(e)},s.parseFirmwareFile=async function(e,t){const i=await Zn(e);return Js(new Uint8Array(i),t)},s.parseLogicLog=function(e){if(!e)return;const t=[];let i=[],n=0;for(const r of e.split(/\r?\n/)){let e=/^JD (\d+) ([0-9a-f]+)/i.exec(r);if(e){t.push({timestamp:parseInt(e[1]),data:Dn(e[2])});continue}if(e=/^([\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(r),!e)continue;const s=parseFloat(e[1]);n&&s-n>.1&&(t.push({timestamp:1e3*n,data:new Uint8Array(i),info:"timeout"}),i=[],n=0),n=s,/(framing error|Error)/.test(r)?(i.length>0&&t.push({timestamp:1e3*n,data:new Uint8Array(i)}),i=[],n=0):i.push(parseInt(e[2]))}return t},s.parsePacketFilter=Eo,s.parseServiceSpecificationMarkdownToJSON=function(e,t,i=""){e=(e||"").replace(/\r/g,"");const n={name:"",status:"experimental",shortId:i.replace(/\.md$/,"").replace(/.*\//,""),camelName:"",shortName:"",extends:[],notes:{},classIdentifier:0,enums:{},constants:{},packets:[],tags:[]};let r,s,a="",o=null,d=null,c=null,l=[],u=0,p="short",m="";const h=null==t?void 0:t._system,f={};for(const e of ji(t||{}))e.classIdentifier&&(f[e.classIdentifier+""]=e.name);try{t._system&&t._base&&I("_base");for(const t of e.split(/\n/))u++,g(t)}catch(e){A("exception: "+e.message)}l.length&&(n.errors=l);for(const e of Object.keys(n.notes))n.notes[e]=y(n.notes[e]);for(const e of n.packets)e.description=y(e.description);function g(e){if(a){if("```"==e.trim()&&(a=null,"default"==a))return}else{const t=/^```(.*)/.exec(e);if(t&&(a=t[1]||"default","default"==a))return}if("default"==a||"    "==e.slice(0,4)){s&&s[0].description&&(s=null);const t=e.replace(/\/\/.*/,"").replace(/[?@:=,{};]/g,(e=>" "+e+" ")).trim();if(!t)return;const i=t.split(/\s+/);/^[;,]/.test(i[i.length-1])&&i.pop();let a=i[0];switch(":"!=i[1]&&"="!=i[1]||(a=":"),a){case"enum":case"flags":!function(e){_(null),(":"!=e[2]||"{"!=e[4])&&A("expecting: enum NAME : TYPE {");o={name:x(e[1]),storage:F(e[3])[0],isFlags:"flags"==e[0]||void 0,members:{}},n.enums[o.name]&&A("enum redefinition");n.enums[o.name]=o}(i);break;case"define":!function(e){if(3!=e.length)return void A(`define syntax is "define name value" (${e.join(" ")}}`);const t=e[1],i=e[2],r=/^0x/.test(i),s=r?parseInt(i,16):parseInt(i);if(isNaN(s))return void A("invalid numeric value for constant");n.constants[t]={value:s,hex:r}}(i);break;case"meta":case"pipe":case"report":case"command":case"const":case"ro":case"rw":case"event":case"client":case"volatile":case"lowlevel":case"restricted":!function(e){_(null);let t,i,a;"restricted"===e[0]?(a=!0,e.shift()):"client"===e[0]?(t=!0,e.shift()):"lowlevel"===e[0]&&(i=!0,e.shift());const o=e.shift();let l="command";if("meta"==o){b("commands");let t=e.shift();"pipe"==t&&(t=e.shift()),"report"==t||"command"==t?l="meta_pipe_"+t:A("invalid token after meta")}else if("pipe"==o){b("commands");const t=e.shift();"report"==t||"command"==t?l="pipe_"+t:A("invalid token after pipe")}else l=o;a&&"command"!==l&&A("restricted only applies to commands");let u;"internal"===e[0]&&(u=!0,e.shift());let p;"volatile"===e[0]&&("ro"!=l&&"rw"!=l&&A("volatile can only modify ro or rw"),p=!0,e.shift());let m=e.shift();const f="report"==l;f&&r&&!/^\w+$/.test(m)&&(e.unshift(m),m=r.name);d={kind:l,name:x(m),identifier:void 0,description:"",fields:[],internal:u,client:t,lowLevel:i,volatile:p,restricted:a},f&&r&&m==r.name&&(d.secondary=!0,r.hasReport=!0);s||(s=[]);s.push(d),"?"==e[0]&&(e.shift(),d.optional=!0);const g=n.packets.filter((e=>e.name==d.name));0==g.length||1==g.length&&"command"==g[0].kind&&"report"==d.kind||A(`packet redefinition ${g.map((e=>e.name)).join(", ")} `);/pipe/.test(l)&&(c?d.pipeType=c.pipeType:A("pipe definitions can only occur after the pipe-open packet"));const y=e.indexOf("@");if("pipe_command"==l||"pipe_report"==l)d.identifier=0;else if(y>=0){const t=e[y+1];let i=parseInt(t);if(isNaN(i))if(i=0,h){const e=h.packets.find((e=>e.name==t));e?(i=e.identifier,d.identifierName=t,e.kind!=l&&A(`kind mismatch on ${t}: ${e.kind} vs ${l}`)):A(`${t} not found in _system`)}else A(`${t} cannot be resolved, since _system is missing`);"ro"!==l||257!==i&&262!==i||(d.volatile=!0);let r=!1,s=!1,a=512<=i&&i<=3839;switch(l){case"const":case"ro":b("registers"),s=256<=i&&i<=383,r=384<=i&&i<=511;break;case"rw":b("registers"),s=0<=i&&i<=127,r=128<=i&&i<=255;break;case"report":case"command":b("commands"),s=0<=i&&i<=127,r=128<=i&&i<=255,a=256<=i&&i<=3839;break;case"event":b("events"),s=0<=i&&i<=127,r=128<=i&&i<=255}r||(s?d.identifierName||N(`${l} @ ${Gi(i)} should be expressed with a name from _system.md`):a&&(n.highCommands||N(`${l} @ ${Gi(i)} is from the extended range but 'high: 1' missing`))),d.identifier=i,e.splice(y,2)}else f&&r?d.identifier=r.identifier:A(`@ not found at ${d.name}`);n.packets.some((e=>k(e.kind)==k(d.kind)&&(!/pipe/.test(e.kind)||e.pipeType==d.pipeType)&&e.identifier==d.identifier))&&A("packet identifier already used");n.packets.push(d),r="command"==l?d:null;if("="==e[0]||":"==e[0])e.unshift("_"),T(e),v();else{const t=e.shift();"{"==t?("..."==e[0]&&e.shift(),"}"==e[0]&&(e.shift(),v()),e.length&&A(`excessive tokens: ${e[0]}...`)):void 0===t&&"event"==l?v():A("expecting '{'")}}(i);break;case"}":d?v():o?o=null:A("nothing to end here");break;default:d?T(i):o?function(e){"="==e[1]&&3==e.length||A("expecting: FIELD_NAME = INTEGER");o.members[x(e[0])]=w(Ji(o.storage),R(e[2]))}(i):function(e){("="!=e[1]&&":"!=e[1]||"tags"!=e[0]&&3!=e.length)&&A("expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE");switch(e[0]){case"extends":I(e[2]);break;case"class":case"identifier":{n.classIdentifier=R(e[2]),"Control"!=n.name&&0==n.classIdentifier&&(n.classIdentifier=1);const t=`how about ${Gi(function(){for(;;){const e=268435455*Math.random()|268435456;if(C(e))return e}}())}`;0==n.classIdentifier||268435457<=n.classIdentifier&&n.classIdentifier<=536870656||536870913<=n.classIdentifier&&n.classIdentifier<=12884901632||A(`class identifier out of range; ${t}`),C(n.classIdentifier)||A(`class identifier doesn't look random; ${t}`),f[n.classIdentifier+""]&&A(`class identifier ${Gi(n.classIdentifier)} already used in ${f[n.classIdentifier+""]}; ${t}`);break}case"camel":n.camelName=e[2];break;case"short":n.shortName=e[2];break;case"high":n.highCommands=!!R(e[2]);break;case"status":["stable","experimental","deprecated"].indexOf(e[2])>-1?n.status=e[2]:A("unknown status");break;case"group":n.group=Zi(e.slice(2).join(" "));break;case"tags":{const t=e.slice(2).filter((e=>","!=e&&";"!=e));n.tags=n.tags.concat(t);break}default:A("unknown metadata field: "+e[0])}}(i)}}else{const t=/^(#+)\s*(.*)/.exec(e);if(t){const[,i,r]=t;s=null;const a=r.trim().toLowerCase();"#"!=i||n.name?"registers"==a||"commands"==a||"events"==a||"examples"==a?(p=a,e=""):"short"==p&&(p="long"):(n.name=r.trim(),e="")}if(s)for(const t of s)t.description+=e+"\n";else(e||n.notes[p])&&(n.notes[p]||(n.notes[p]=""),n.notes[p]+=e+"\n")}}function v(){const e=function(e){let t=0;for(const i of e.fields){const e=ln(i);if(0==e)continue;const n=e>4?4:e;if(!/^u8\[/.test(i.type)&&t%n!=0)return`need padding of ${n-t%n} byte(s) before ${i.name}`;t+=e}return null}(d);e&&(d.packed=!0,A(`${e} in ${d.kind} ${d.name}`));let t=!1,i=!1;for(const e of d.fields){if(i){A(`field ${e.name} in ${d.kind} ${d.name} follows a variable-sized field`);break}if(e.startRepeats&&(t&&A(`repeats: can only be specified once; in ${d.kind} ${d.name}`),t=!0),0==e.storage&&"string0"!=e.type){if(t){A(`variable-sized field ${e.name} in ${d.kind} ${d.name} cannot repeat`);break}i=!0}}const r=d.identifier,s=Ui[d.kind];if("set_register"!=d.name&&"get_register"!=d.name&&s&&!s.some((e=>e[0]<=r&&r<=e[1]))&&A(`${d.name} identifier 0x${r.toString(16)} out of range, expected in ${s.map((e=>`[${e.map((e=>`0x${e.toString(16)}`)).join(", ")}]`)).join(", ")}`),["reading_error","min_reading","max_reading","reading_resolution"].indexOf(d.identifierName)>-1){const e=d.identifierName;d.fields.length>1&&A(`${e} must be a number`);const t=n.packets.find((e=>"ro"===e.kind&&"reading"===e.identifierName));t?d.fields[0].unit!==t.fields[0].unit&&A(`${e} unit (${d.fields[0].unit}) and reading unit (${t.fields[0].unit}) must match`):A(`${e} register without a reading register`)}d=null}function y(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function _(e){(o||d)&&A("already in braces"),e&&"{"!=e[2]&&A(`expecting: ${e[0]} NAME {`),o=null,d=null}function b(e){p!=e&&A(`this is only allowed in ## ${e} not in ## ${p}`)}function k(e){switch(e){case"const":case"ro":case"rw":return"rw";default:return e}}function w(e,t){const[i,n,r]=F(e);if(isNaN(t))return t;if(0==i)return A(`numeric values like ${t} not allowed for ${e}`),t;if(t<0&&i>0)return A(`negative values like ${t} not allowed for ${e}`),t;if(Math.floor(t)!=t&&0==r)return A(`only integer values allowed for ${e}; got ${t}`),t;let s=i<0?8*-i-1:8*i;s-=r||0;let a=1;for(;s--;)a*=2;if(-t==a);else if(1==a&&1==t);else if(Math.abs(t)>=a)return A(`value ${t} is out of range for ${e}`),t;return t}function S(e){const t=e.shift();"="!=t&&":"!=t&&A("expecting '='");return R(e.shift(),!0)}function T(e){var t;if(2==e.length&&("repeats"==e[0]||"segmented"==e[0]||"multi-segmented"==e[0]))return void(m=e[0]);const i=x(e.shift());let n,r,s=e.shift();"?"==s&&(r=!0,s=e.shift()),"="==s&&(n=R(e.shift(),!0),s=e.shift()),":"!=s&&A("expecting ':'");const a=e.shift(),[o,l,u]=F(a),p=null===u||void 0;let h,f,g=e.shift();"{"!=g&&("string"===l||"bytes"===l?f=function(e){return e&&Oi[e.toLowerCase()]||void 0}(g):h=function(e){return null==e?void 0:Bi[e]||Vi[e]?e:void A(`expecting unit, got '${e}'`)}(g),g=e.shift()),void 0!==n&&w(a,n);let v=u||void 0;"/"==h&&(/^(u0|i1)\.\d+$/.test(a)||A(`fraction unit must be used with u0.yyy or i1.yyy data types (got ${a})`),v=8*Math.abs(o),o<0&&(v-=1));const y={name:i,unit:h,encoding:f,shift:v,isFloat:p,type:l,storage:o,isSimpleType:Ji(o)==l||void 0,defaultValue:n,isOptional:r,multiSegmented:"multi-segmented"==m||void 0,segmented:"segmented"==m||"multi-segmented"==m||void 0,startRepeats:"repeats"==m||void 0};if(h||delete y.unit,f||delete y.encoding,"{"==g){for(;e.length&&(g=e.shift(),"}"!=g);){switch(g=Qi(g),g){case"maxBytes":y[g]=w("u8",S(e));break;case"typicalMin":case"typicalMax":case"absoluteMin":case"absoluteMax":y[g]=w(a,S(e));break;case"preferredInterval":void 0!==d[g]&&A(`field ${g} already set`),d[g]=w("u32",S(e));break;default:A("unknown constraint: "+g)}","==e[0]&&e.shift()}"}"==g&&(g=null)}g&&A(`excessive tokens at the end of member: ${g}...`),void 0===y.typicalMin&&void 0!==y.typicalMax&&o>0&&(y.typicalMin=0),void 0===y.absoluteMin&&void 0!==y.absoluteMax&&o>0&&(y.absoluteMin=0),!y.storage&&y.maxBytes&&(y.storage=y.maxBytes),/pipe/.test(l)&&(d.pipeType=d.name,c&&c.name==d.name&&"report"==d.kind||(c=d)),!y.isOptional&&(null===(t=d.fields[d.fields.length-1])||void 0===t?void 0:t.isOptional)&&A("all fields after an optional field have to optional"),d.fields.push(y),m=void 0}function R(e,t=!1){try{return function(e,t,i=!1){if(/^-?0x[a-f\d_]+$/i.test(t)||/^-?[\d_]+$/.test(t)){const e=parseInt(t.replace(/_/g,""));if(isNaN(e))throw new Error("can't parse int: "+t);return e}if(i&&/^-?\d*(\.\d*)?(e(-?)\d+)?$/.test(t)){const e=parseFloat(t);if(isNaN(e))throw new Error("can't parse float: "+t);return e}const n=t.split(/\./);if(2!=n.length)throw new Error("expecting int or enum member here");const r=e.enums[n[0]];if(!r)throw new Error(`${n[0]} is not an enum type`);if(!r.members.hasOwnProperty(n[1]))throw new Error(`${n[1]} is not a member of ${n[0]}`);return r.members[n[1]]||0}(n,e,t)}catch(e){return A(e.message),0}}function C(e){const t=e.toString(16),i="0123456789abcdef";for(let e=0;e<i.length;++e){const n=i[e];if(t.indexOf(n+n+n)>=0)return!1}return!/f00d|dead|deaf|beef/.test(t)}function I(e){if("_system"==e)return;const i=t[e];if(!i)return A("include file not found: "+e);(n.packets.some((e=>!e.derived))||ji(n.enums).some((e=>!e.derived)))&&A("extends: only allowed on top of the .md file"),i.errors&&(l=l.concat(i.errors));const r=E(i.enums);Object.keys(r).filter((e=>!n.enums[e])).forEach((t=>{const i=r[t];i.derived=e,n.enums[t]=i}));const s=E(i.packets.filter((e=>!n.packets.find((t=>t.kind===e.kind&&t.identifier===e.identifier)))));s.forEach((t=>t.derived=e)),n.packets=[...n.packets,...s],i.highCommands&&(n.highCommands=!0),n.extends=i.extends.concat([e])}function E(e){return JSON.parse(JSON.stringify(e))}function A(e){e||(e="syntax error"),l.some((t=>t.line==u&&t.message==e))||l.push({file:i,line:u,message:e})}function N(e){"system"!=n.camelName&&(l.some((t=>t.line==u&&t.message==e))||l.push({file:i,line:u,message:e}))}function x(e){return/^\w+$/.test(e)||A("expecting name here"),e.length>31&&A(`name '${e}' too long`),e}function F(e){if(n.enums[e])return[n.enums[e].storage,e,0];e||A("expecting type here");const t=e.replace(/_t$/,"").toLowerCase(),i=/^([ui])(\d+)\.(\d+)$/.exec(t);if(i){const n=R(i[2]),r=R(i[3]),s=n+r;return 8!=s&&16!=s&&32!=s&&64!=s&&A(`fixed point ${e} can't be ${s} bits`),0==n&&"i"==i[1]&&A(`fixed point ${e} can't be i0.X; has to be at least i1.X`),[("i"==i[1]?-1:1)*(s>>3),t,r]}switch(t){case"bool":return[1,t,0];case"i8":case"u8":case"i16":case"u16":case"i32":case"u32":case"i64":case"u64":{let e=R(t.replace(/^./,""))>>3;return"i"==t[0]&&(e=-e),[e,t,0]}case"f16":return[2,t,null];case"f32":return[4,t,null];case"f64":return[8,t,null];case"pipe":return[12,t,0];case"pipe_port":return[2,t,0];case"devid":return[8,t,0];case"bytes":case"string":case"string0":return[0,t,0];default:{const i=/^u8\[(\d+)\]$/.exec(t);return i?[R(i[1]),t,0]:(A("unknown type: "+e+" "+t),[4,t,0])}}}return n.camelName||(n.camelName=Qi(n.name.replace(/\s+/g," ").replace(/[ -](.)/g,((e,t)=>t.toUpperCase())).replace(/[^\w]+/g,"_"))),n.shortName||(n.shortName=n.camelName),"system"==n.camelName?n.classIdentifier=536870897:"base"==n.camelName?n.classIdentifier=536870899:"sensor"==n.camelName&&(n.classIdentifier=536870898),"control"==n.shortName||n.classIdentifier||A("identifier: not specified"),n.packets.forEach((e=>e.packFormat=dn(n,e))),n},s.parseTrace=function(e){const t=[],i=[];return null==e||e.split(/\r?\n/).forEach((e=>{const n=/^(\d+.?\d*)\s+([a-f0-9]{12,})/i.exec(e);if(!n){if(/^\s+at\s/.test(e)){const t=i[i.length-1];if(t){let i=t.meta.TRACE||"";i+=e+"\n",t.meta.TRACE=i}}else 0==i.length&&t.push(e);return}const r=parseInt(n[1]),s=Dn(n[2]);i.push(hs.fromBinary(s,r))})),i.length?new vs(i,{description:t.join("\n").trim()}):void 0},s.parseUF2Firmware=Js,s.pick=rr,s.prettyDuration=Yr,s.prettyMemberUnit=function(e,t){const i=[Kr(e.unit),Ln(e.typicalMin)&&`[${e.typicalMin}, ${e.typicalMax}]`,Ln(e.absoluteMin)&&`absolute [${e.absoluteMin}, ${e.absoluteMax}]`].filter((e=>Ln(e)&&e));return t&&i.unshift(e.type),i.join(", ")},s.prettyMicroDuration=Qr,s.prettySize=Xr,s.prettyUnit=Kr,s.printPacket=ps,s.randomRange=function(e,t){return Math.round(Math.random()*(t-e)+e)},s.range=function(e){return Array(e).fill(0).map(((e,t)=>t))},s.read16=zn,s.read32=jn,s.readBlobToText=function(e){return e.text?e.text():new Promise(((t,i)=>{const n=new FileReader;n.onload=()=>t(n.result),n.onerror=e=>{console.log(e),i(e)};try{n.readAsText(e)}catch(e){i(e)}}))},s.readBlobToUint8Array=Zn,s.renderHidMouseButtons=Ya,s.renderKeyboardKey=function(e,t,i){const n=i?" + ":" ",r=[];(i?["Ctrl","Shift","Alt","Cmd","Ctrl Right","Shift Right","AltRight","Cmd Right"]:["{controlleft}","{shiftleft}","{altleft}","{metaleft}","{controlright}","{shiftright}","{altright}","{metaright}"]).forEach(((e,i)=>{t&1<<i&&r.push(e)}));const s=Ka[e];return void 0!==s&&r.push(i?s.toUpperCase():!i&&s.length>1?`{${s}}`:s),r.filter((e=>!!e)).join(n)},s.replayLogicLog=function(e,t,i){const n=Gn(t.map((e=>hs.fromFrame(e.data,e.timestamp)))),r=new Io(e,i);r.trace=new vs(n),e.clear(n[0].timestamp),r.start()},s.resolveUnit=function(e){if(!e)return{name:"",scale:1,offset:1};const t=Vi[e];if(t)return t;const i=Bi[e];return i?{name:i,unit:e,scale:1,offset:0}:void 0},s.reverseSelectors=Ka,s.rgbToHtmlColor=function(e){return`#${("000000"+e.toString(16)).slice(-6)}`},s.roundWithPrecision=tr,s.scaleFloatToInt=Vr,s.scaleIntToFloat=Br,s.secondaryUnitConverters=Vi,s.selectors=Ga,s.sendStayInBootloaderCommand=qs,s.sensorSpecifications=rd,s.serviceClass=as,s.serviceMap=function(){const e={};return hr.forEach((t=>e[t.shortId]=t)),e},s.serviceName=os,s.serviceProviderDefinitionFromServiceClass=So,s.serviceShortIdOrClass=function(e){if(!Ln(e))return"?";const t=wr(e);return(null==t?void 0:t.shortId)||`0x${e.toString(16)}`},s.serviceSpecificationFromClassIdentifier=wr,s.serviceSpecificationFromName=kr,s.serviceSpecificationToServiceTwinSpecification=function(e){if(!e)return;const{classIdentifier:t,camelName:i,packets:n}=e;return{serviceClass:t,name:i,registers:n.filter(Ir).map((e=>{let t=0;"const"==e.kind&&(t|=s.ServiceTwinRegisterFlag.Const),e.volatile&&(t|=s.ServiceTwinRegisterFlag.Volatile);return{code:e.identifier,name:e.name,flags:t,packf:e.packFormat,fields:e.fields.length>1?e.fields.map((e=>e.name)):void 0}}))}},s.serviceSpecifications=vr,s.serviceSpecificationsWithServiceTwinSpecification=function(){return[wr(K),...vr().filter((e=>!br(e)))]},s.setAckError=vn,s.setNumber=cr,s.shortDeviceId=Zr,s.signal=Qn,s.sizeOfNumberFormat=or,s.snakify=tn,s.snapshotSensors=function(e){return ir(rd(),(e=>e.camelName),(t=>e.services({serviceClass:t.classIdentifier,ignoreInfrastructure:!0,announced:!0}).map((e=>{var t;const i=e.readingRegister;return 1===i.specification.fields.length?(null===(t=i.unpackedValue)||void 0===t?void 0:t[0])||0:i.objectValue||{}}))))},s.splitFilter=function(e,t){const i=[],n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];t(r)?i.push(r):n.push(r)}return[i,n]},s.stack=fs,s.startDevTools=function(){"undefined"==typeof window||/^https:\/\/microsoft.github.io\/jacdac-docs\//.test(window.location.href)||(window.location.href=`https://microsoft.github.io/jacdac-docs/clients/javascript/devtools.html#${window.location.href}`)},s.startRoles=function(e,t,i,n){const{incomplete:r}=n||{},s=new id(e);s.updateRoles(Object.keys(t).map((e=>({role:e,serviceClass:t[e].serviceClass,preferredDeviceId:t[e].preferredDeviceId}))));const a=()=>{(r||s.isBound)&&i((()=>{const e={};for(const i in t){const t=s.service(i);t&&(e[i]=t)}return e})())},o=s.subscribe("change",a);return a(),o},s.startServiceProviderFromServiceClass=function(e,t){return wo(e,So(t))},s.storageTypeRange=Or,s.strcmp=bn,s.stringToBuffer=Jn,s.stringToUint8Array=In,s.throttle=Yn,s.throwError=gn,s.toArray=Bn,s.toAscii=ls,s.toFullHex=Pn,s.toHex=Mn,s.toMap=ir,s.toUTF8=Nn,s.toggleBit=function(e,t){let i=e[t>>3];const n=t%8;1==(i>>n&1)?i&=~(1<<n):i|=1<<n,e[t>>3]=i},s.tonePayload=function(e,t,i){const n=Math.round(1e6/e);return qr("u16 u16 u16",[n,n*i>>11,t])},s.tryParseMemberValue=function(e,t){if(!e)return{};if("string"===t.type)return{value:e};if("pipe"===t.type)return{};if("bytes"!==t.type){const i=Mr(t.type)?parseInt(e):parseFloat(e);return isNaN(i)?{error:"invalid format"}:{value:i}}try{return{value:Dn(e)}}catch(e){return{error:"invalid hexadecimal format"}}},s.uint8ArrayToString=En,s.uintOfBuffer=lr,s.unique=function(e){return Array.from(new Set(e).keys())},s.uniqueMap=function(e,t,i){const n={};for(let i=0;i<e.length;++i){const r=e[i],s=t(r);n[s]||(n[s]=r)}return Object.values(n).map(i)},s.uniqueName=function(e,t,i=""){if(e.indexOf(t)<0)return t;let n=2;for(;e.indexOf(`${t}${i}${n}`)>-1;)n++;return`${t}${i}${n}`},s.unitDescription=Bi,s.units=function(){const e=[];return Object.keys(Bi).forEach((t=>{e.push({name:t,description:Bi[t]}),Object.keys(Vi).filter((e=>Vi[e].unit===t)).forEach((t=>e.push({name:t,description:Vi[t].name})))})),e.sort(((e,t)=>e.name.localeCompare(t.name))),e},s.unpackedToObject=Rs,s.updateApplicable=function(e,t){return e&&t&&e.bootloaderProductIdentifier==t.productIdentifier&&e.version!==t.version},s.usbRequestDevice=Jo,s.valueToFlags=function(e,t){const i=[],n=t;for(const t of Object.keys(e.members)){const r=e.members[t];n&r&&i.push(r)}return i},s.wrapDecodedMembers=is,s.write16=Un,s.write32=On;let od=()=>(od=()=>{throw"multiple initialization"},ad=s.createWebBus(),ad);const dd=document.getElementById("debugbtn"),cd=document.getElementById("connectbtn"),ld=document.getElementById("wsAddress"),ud=document.getElementById("wsConnect"),pd=document.getElementById("wsStatus"),md=od();let hd,fd=!1;window.location.ancestorOrigins.length?(dd.remove(),cd.remove()):(dd.onclick=e=>{e.preventDefault(),e.stopPropagation(),window.location.ancestorOrigins.length||s.startDevTools()},cd.onclick=e=>{e.preventDefault(),e.stopPropagation(),md.connected?md.disconnect():md.connect()}),ud.onclick=e=>{e.preventDefault(),e.stopPropagation(),function(e){if(hd)try{hd.close()}catch{}vd("Connecting..."),hd=new WebSocket(e),hd.onclose=e=>{vd("Disconnected"),fd=!1},hd.onerror=e=>{vd("Error"),fd=!1},hd.onopen=e=>{vd("Connected"),fd=!0}}(ld.value)};const gd={button:{down:!1,pressed:!1,released:!1},stick:{x:0,y:0}};function vd(e){pd.innerText=e}window.requestAnimationFrame((function e(){const t=s.snapshotSensors(md).joystick;if(t.length){const e=t[0],i=Number(e.buttons);if(gd.button.pressed=!1,gd.button.released=!1,i&s.JoystickButtons.A?(gd.button.pressed=!gd.button.down,gd.button.down=!0):(gd.button.released=gd.button.down,gd.button.down=!1),gd.stick.x=Number(e.x)||0,gd.stick.y=Number(e.y)||0,fd){const e={type:"input",state:gd};try{hd.send(JSON.stringify(e))}catch{hd.close(),hd=null}}}window.requestAnimationFrame(e)}));
//# sourceMappingURL=index.3835f06d.js.map
