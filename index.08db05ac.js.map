{"mappings":"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","sources":["node_modules/jacdac-ts/jacdac-spec/dist/specconstants.ts","node_modules/jacdac-ts/jacdac-spec/spectool/jdutils.ts","node_modules/jacdac-ts/jacdac-spec/spectool/jdspec.ts","node_modules/jacdac-ts/src/jdom/flags.ts","node_modules/jacdac-ts/src/jdom/utils.ts","node_modules/jacdac-ts/src/jdom/buffer.ts","node_modules/jacdac-ts/src/jdom/spec.ts","node_modules/jacdac-ts/src/jdom/pack.ts","node_modules/jacdac-ts/src/jdom/pretty.ts","node_modules/jacdac-ts/src/jdom/constants.ts","node_modules/jacdac-ts/src/jdom/packet.ts","node_modules/jacdac-ts/src/jdom/trace/trace.ts","node_modules/jacdac-ts/src/jdom/eventsource.ts","node_modules/jacdac-ts/src/jdom/node.ts","node_modules/jacdac-ts/src/jdom/servicemembernode.ts","node_modules/jacdac-ts/src/jdom/field.ts","node_modules/jacdac-ts/src/jdom/packobject.ts","node_modules/jacdac-ts/src/jdom/register.ts","node_modules/jacdac-ts/src/jdom/event.ts","node_modules/jacdac-ts/src/jdom/client.ts","node_modules/jacdac-ts/src/jdom/random.ts","node_modules/jacdac-ts/src/jdom/pipes.ts","node_modules/jacdac-ts/src/jdom/service.ts","node_modules/jacdac-ts/src/jdom/ledcontroller.ts","node_modules/jacdac-ts/src/jdom/device.ts","node_modules/jacdac-ts/src/jdom/scheduler.ts","node_modules/jacdac-ts/src/jdom/flashing.ts","node_modules/jacdac-ts/src/jdom/servers/registerserver.ts","node_modules/jacdac-ts/src/jdom/servers/serviceserver.ts","node_modules/jacdac-ts/src/servers/sensorserver.ts","node_modules/jacdac-ts/src/servers/realtimeclockserver.ts","node_modules/jacdac-ts/src/jdom/transport/transport.ts","node_modules/jacdac-ts/src/jdom/busstats.ts","node_modules/jacdac-ts/src/jdom/servers/controlserver.ts","node_modules/jacdac-ts/src/jdom/servers/serviceprovider.ts","node_modules/jacdac-ts/src/jdom/servers/serverserviceprovider.ts","node_modules/jacdac-ts/src/jdom/servers/protocoltestserver.ts","node_modules/jacdac-ts/src/servers/buttonserver.ts","node_modules/jacdac-ts/src/servers/buzzerserver.ts","node_modules/jacdac-ts/src/servers/characterscreenserver.ts","node_modules/jacdac-ts/src/servers/joystickserver.ts","node_modules/jacdac-ts/src/servers/dotmatrixserver.ts","node_modules/jacdac-ts/src/servers/ledpixelserver.ts","node_modules/jacdac-ts/src/jdom/lightconstants.ts","node_modules/jacdac-ts/src/servers/matrixkeypadserver.ts","node_modules/jacdac-ts/src/servers/motorserver.ts","node_modules/jacdac-ts/src/servers/leveldetector.ts","node_modules/jacdac-ts/src/servers/analogsensorserver.ts","node_modules/jacdac-ts/src/servers/raingaugeserver.ts","node_modules/jacdac-ts/src/servers/reflectedlightserver.ts","node_modules/jacdac-ts/src/servers/rotaryencoderserver.ts","node_modules/jacdac-ts/src/servers/servoserver.ts","node_modules/jacdac-ts/src/servers/settingsserver.ts","node_modules/jacdac-ts/src/servers/speechsynthesisserver.ts","node_modules/jacdac-ts/src/servers/switchserver.ts","node_modules/jacdac-ts/src/servers/trafficlightserver.ts","node_modules/jacdac-ts/src/servers/ledserver.ts","node_modules/jacdac-ts/src/servers/soundplayerserver.ts","node_modules/jacdac-ts/src/servers/randomnumbergeneratorserver.ts","node_modules/jacdac-ts/src/servers/compassserver.ts","node_modules/jacdac-ts/src/servers/dmxserver.ts","node_modules/jacdac-ts/src/jdom/iframeclient.ts","node_modules/jacdac-ts/src/servers/bitradioserver.ts","node_modules/jacdac-ts/src/servers/powerserver.ts","node_modules/jacdac-ts/src/servers/capacitivebuttonserver.ts","node_modules/jacdac-ts/src/servers/hidkeyboardserver.ts","node_modules/jacdac-ts/src/servers/hidmouseserver.ts","node_modules/jacdac-ts/src/servers/dimmerserver.ts","node_modules/jacdac-ts/src/servers/azureiothubhealthserver.ts","node_modules/jacdac-ts/src/servers/vibrationmotorserver.ts","node_modules/jacdac-ts/src/servers/wifiserver.ts","node_modules/jacdac-ts/src/servers/servers.ts","node_modules/jacdac-ts/src/jdom/serviceclient.ts","node_modules/jacdac-ts/src/jdom/clients/rolemanagerclient.ts","node_modules/jacdac-ts/src/jdom/bus.ts","node_modules/jacdac-ts/src/jdom/trace/traceplayer.ts","node_modules/jacdac-ts/src/jdom/packetfilter.ts","node_modules/jacdac-ts/src/jdom/light.ts","node_modules/jacdac-ts/src/jdom/bridge.ts","node_modules/jacdac-ts/src/jdom/transport/bluetooth.ts","node_modules/jacdac-ts/src/jdom/transport/hf2.ts","node_modules/jacdac-ts/src/jdom/transport/microbit.ts","node_modules/jacdac-ts/src/jdom/error.ts","node_modules/jacdac-ts/src/jdom/transport/usbio.ts","node_modules/jacdac-ts/src/jdom/transport/webserialio.ts","node_modules/jacdac-ts/src/jdom/transport/eventtargetobservable.ts","node_modules/jacdac-ts/src/jdom/transport/usb.ts","node_modules/jacdac-ts/src/jdom/transport/workertransport.ts","node_modules/jacdac-ts/src/jdom/transport/webserial.ts","node_modules/jacdac-ts/src/jdom/transport/nodewebserialio.ts","node_modules/webusb/node_modules/rollup-plugin-node-builtins/src/es6/events.js","node_modules/webusb/src/dispatcher.ts","node_modules/webusb/src/configuration.ts","node_modules/webusb/src/interface.ts","node_modules/webusb/src/alternate.ts","node_modules/webusb/src/endpoint.ts","node_modules/webusb/src/device.ts","node_modules/webusb/src/adapter.ts","node_modules/webusb/src/events.ts","node_modules/webusb/src/usb.ts","node_modules/webusb/src/index.ts","node_modules/usb/usb.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/process/browser.js","node_modules/bindings/bindings.js","node_modules/path-browserify/index.js","node_modules/file-uri-to-path/index.js","node_modules/events/events.js","node_modules/util/util.js","node_modules/util/support/types.js","node_modules/is-arguments/index.js","node_modules/has-tostringtag/shams.js","node_modules/has-symbols/shams.js","node_modules/call-bind/callBound.js","node_modules/get-intrinsic/index.js","node_modules/has-symbols/index.js","node_modules/function-bind/index.js","node_modules/function-bind/implementation.js","node_modules/has/src/index.js","node_modules/call-bind/index.js","node_modules/is-generator-function/index.js","node_modules/which-typed-array/index.js","node_modules/foreach/index.js","node_modules/available-typed-arrays/index.js","node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js","node_modules/is-typed-array/index.js","node_modules/util/support/isBufferBrowser.js","node_modules/inherits/inherits_browser.js","node_modules/jacdac-ts/src/jdom/bridges/iframebridge.ts","node_modules/jacdac-ts/src/jdom/rolemanager.ts","node_modules/jacdac-ts/src/jdom/sensors.ts","node_modules/jacdac-ts/src/azure-iot/devicetwin.ts","src/bus.ts","node_modules/jacdac-ts/src/jdom/clients/settingsclient.ts","node_modules/jacdac-ts/src/jdom/trace/tracerecorder.ts","node_modules/jacdac-ts/src/jdom/trace/traceview.ts","node_modules/jacdac-ts/src/jdom/transport/nodewebusb.ts","node_modules/jacdac-ts/src/jdom/transport/createbus.ts","node_modules/jacdac-ts/src/jdom/color.ts","node_modules/jacdac-ts/src/jdom/command.ts","node_modules/jacdac-ts/src/jdom/speedtest.ts","node_modules/jacdac-ts/src/jdom/logparser.ts","src/index.ts"],"sourcesContent":["// Service: Common registers and commands\nexport const ANNOUNCE_INTERVAL = 0x1f4\n\nexport enum SystemReadingThreshold { // uint8_t\n    Neutral = 0x1,\n    Inactive = 0x2,\n    Active = 0x3,\n}\n\n\nexport enum SystemStatusCodes { // uint16_t\n    Ready = 0x0,\n    Initializing = 0x1,\n    Calibrating = 0x2,\n    Sleeping = 0x3,\n    WaitingForInput = 0x4,\n    CalibrationNeeded = 0x64,\n}\n\nexport enum SystemCmd {\n    /**\n     * No args. Enumeration data for control service; service-specific advertisement data otherwise.\n     * Control broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\n     */\n    Announce = 0x0,\n\n    /**\n     * No args. Registers number `N` is fetched by issuing command `0x1000 | N`.\n     * The report format is the same as the format of the register.\n     */\n    GetRegister = 0x1000,\n\n    /**\n     * No args. Registers number `N` is set by issuing command `0x2000 | N`, with the format\n     * the same as the format of the register.\n     */\n    SetRegister = 0x2000,\n\n    /**\n     * Event from sensor or a broadcast service.\n     *\n     * ```\n     * const [eventId, eventArgument] = jdunpack<[number, number]>(buf, \"u32 u32\")\n     * ```\n     */\n    Event = 0x1,\n\n    /**\n     * No args. Request to calibrate a sensor. The report indicates the calibration is done.\n     */\n    Calibrate = 0x2,\n}\n\nexport enum SystemReg {\n    /**\n     * Read-write uint32_t. This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Intensity = 0x1,\n\n    /**\n     * Read-write int32_t. The primary value of actuator (eg. servo pulse length, or motor duty cycle).\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Value = 0x2,\n\n    /**\n     * Constant int32_t. The lowest value that can be reported for the value register.\n     *\n     * ```\n     * const [minValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MinValue = 0x110,\n\n    /**\n     * Constant int32_t. The highest value that can be reported for the value register.\n     *\n     * ```\n     * const [maxValue] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MaxValue = 0x111,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the service, in mA.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    StreamingSamples = 0x3,\n\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingInterval = 0x4,\n\n    /**\n     * Read-only int32_t. Read-only value of the sensor, also reported in streaming.\n     *\n     * ```\n     * const [reading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Reading = 0x101,\n\n    /**\n     * Constant int32_t. The lowest value that can be reported by the sensor.\n     *\n     * ```\n     * const [minReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MinReading = 0x104,\n\n    /**\n     * Constant int32_t. The highest value that can be reported by the sensor.\n     *\n     * ```\n     * const [maxReading] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    MaxReading = 0x105,\n\n    /**\n     * Read-only uint32_t. The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\n     * send a report in the same frame of the ``reading`` report.\n     *\n     * ```\n     * const [readingError] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ReadingError = 0x106,\n\n    /**\n     * Constant uint32_t. Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [readingResolution] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ReadingResolution = 0x108,\n\n    /**\n     * Read-write int32_t. Threshold when reading data gets inactive and triggers a ``inactive``.\n     *\n     * ```\n     * const [inactiveThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    InactiveThreshold = 0x5,\n\n    /**\n     * Read-write int32_t. Thresholds when reading data gets active and triggers a ``active`` event.\n     *\n     * ```\n     * const [activeThreshold] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ActiveThreshold = 0x6,\n\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingPreferredInterval = 0x102,\n\n    /**\n     * Constant uint32_t. The hardware variant of the service.\n     * For services which support this, there's an enum defining the meaning.\n     *\n     * ```\n     * const [variant] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCode = 0x103,\n\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    InstanceName = 0x109,\n}\n\nexport enum SystemEvent {\n    /**\n     * Notifies that the service has been activated (eg. button pressed, network connected, etc.)\n     */\n    Active = 0x1,\n\n    /**\n     * Notifies that the service has been dis-activated.\n     */\n    Inactive = 0x2,\n\n    /**\n     * Notifies that the some state of the service changed.\n     */\n    Change = 0x3,\n\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[SystemStatusCodes, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCodeChanged = 0x4,\n\n    /**\n     * Notifies that the threshold is back between ``low`` and ``high``.\n     */\n    Neutral = 0x7,\n}\n\n// Service: Base service\nexport enum BaseReg {\n    /**\n     * Constant string (bytes). A friendly name that describes the role of this service instance in the device.\n     * It often corresponds to what's printed on the device:\n     * for example, `A` for button A, or `S0` for servo channel 0.\n     * Words like `left` should be avoided because of localization issues (unless they are printed on the device).\n     *\n     * ```\n     * const [instanceName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    InstanceName = 0x109,\n\n    /**\n     * Reports the current state or error status of the device. ``code`` is a standardized value from\n     * the Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\n     * state. This report is typically not queried, when a device has an error, it will typically\n     * add this report in frame along with the announce packet. If a service implements this register,\n     * it should also support the ``status_code_changed`` event defined below.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCode = 0x103,\n}\n\nexport enum BaseEvent {\n    /**\n     * Notifies that the status code of the service changed.\n     *\n     * ```\n     * const [code, vendorCode] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    StatusCodeChanged = 0x4,\n}\n\n// Service: Sensor\nexport enum SensorReg {\n    /**\n     * Read-write # uint8_t. Asks device to stream a given number of samples\n     * (clients will typically write `255` to this register every second or so, while streaming is required).\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    StreamingSamples = 0x3,\n\n    /**\n     * Read-write ms uint32_t. Period between packets of data when streaming in milliseconds.\n     *\n     * ```\n     * const [streamingInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingInterval = 0x4,\n\n    /**\n     * Constant ms uint32_t. Preferred default streaming interval for sensor in milliseconds.\n     *\n     * ```\n     * const [streamingPreferredInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingPreferredInterval = 0x102,\n}\n\n// Service: Accelerometer\nexport const SRV_ACCELEROMETER = 0x1f140409\nexport enum AccelerometerReg {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    Forces = 0x101,\n\n    /**\n     * Read-only g i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    ForcesError = 0x106,\n\n    /**\n     * Read-write g i12.20 (int32_t). Configures the range forces detected.\n     * Read-back after setting to get current value.\n     *\n     * ```\n     * const [maxForce] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    MaxForce = 0x80,\n}\n\nexport enum AccelerometerEvent {\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltUp = 0x81,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltDown = 0x82,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltLeft = 0x83,\n\n    /**\n     * Emitted when accelerometer is tilted in the given direction.\n     */\n    TiltRight = 0x84,\n\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    FaceUp = 0x85,\n\n    /**\n     * Emitted when accelerometer is laying flat in the given direction.\n     */\n    FaceDown = 0x86,\n\n    /**\n     * Emitted when total force acting on accelerometer is much less than 1g.\n     */\n    Freefall = 0x87,\n\n    /**\n     * Emitted when forces change violently a few times.\n     */\n    Shake = 0x8b,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force2g = 0x8c,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force3g = 0x88,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force6g = 0x89,\n\n    /**\n     * Emitted when force in any direction exceeds given threshold.\n     */\n    Force8g = 0x8a,\n}\n\n// Service: Arcade Gamepad\nexport const SRV_ARCADE_GAMEPAD = 0x1deaa06e\n\nexport enum ArcadeGamepadButton { // uint8_t\n    Left = 0x1,\n    Up = 0x2,\n    Right = 0x3,\n    Down = 0x4,\n    A = 0x5,\n    B = 0x6,\n    Menu = 0x7,\n    Select = 0x8,\n    Reset = 0x9,\n    Exit = 0xa,\n}\n\nexport enum ArcadeGamepadReg {\n    /**\n     * Indicates which buttons are currently active (pressed).\n     * `pressure` should be `0xff` for digital buttons, and proportional for analog ones.\n     *\n     * ```\n     * const [rest] = jdunpack<[([ArcadeGamepadButton, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [button, pressure] = rest[0]\n     * ```\n     */\n    Buttons = 0x101,\n\n    /**\n     * Constant. Indicates number of players supported and which buttons are present on the controller.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton[]]>(buf, \"u8[]\")\n     * ```\n     */\n    AvailableButtons = 0x180,\n}\n\nexport enum ArcadeGamepadEvent {\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from inactive to active.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: button Button (uint8_t). Emitted when button goes from active to inactive.\n     *\n     * ```\n     * const [button] = jdunpack<[ArcadeGamepadButton]>(buf, \"u8\")\n     * ```\n     */\n    Up = 0x2,\n}\n\n// Service: Arcade sound\nexport const SRV_ARCADE_SOUND = 0x1fc63606\nexport enum ArcadeSoundCmd {\n    /**\n     * Argument: samples bytes. Play samples, which are single channel, signed 16-bit little endian values.\n     *\n     * ```\n     * const [samples] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Play = 0x80,\n}\n\nexport enum ArcadeSoundReg {\n    /**\n     * Read-write Hz u22.10 (uint32_t). Get or set playback sample rate (in samples per second).\n     * If you set it, read it back, as the value may be rounded up or down.\n     *\n     * ```\n     * const [sampleRate] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    SampleRate = 0x80,\n\n    /**\n     * Constant B uint32_t. The size of the internal audio buffer.\n     *\n     * ```\n     * const [bufferSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BufferSize = 0x180,\n\n    /**\n     * Read-only B uint32_t. How much data is still left in the buffer to play.\n     * Clients should not send more data than `buffer_size - buffer_pending`,\n     * but can keep the `buffer_pending` as low as they want to ensure low latency\n     * of audio playback.\n     *\n     * ```\n     * const [bufferPending] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BufferPending = 0x181,\n}\n\n// Service: Azure IoT Hub Health\nexport const SRV_AZURE_IOT_HUB_HEALTH = 0x1462eefc\n\nexport enum AzureIotHubHealthConnectionStatus { // uint16_t\n    Connected = 0x1,\n    Disconnected = 0x2,\n    Connecting = 0x3,\n    Disconnecting = 0x4,\n}\n\nexport enum AzureIotHubHealthReg {\n    /**\n     * Read-only string (bytes). Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured\n     *\n     * ```\n     * const [hubName] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    HubName = 0x180,\n\n    /**\n     * Read-only string (bytes). Device identifier in Azure Iot Hub\n     *\n     * ```\n     * const [hubDeviceId] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    HubDeviceId = 0x181,\n\n    /**\n     * Read-only ConnectionStatus (uint16_t). Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    ConnectionStatus = 0x182,\n}\n\nexport enum AzureIotHubHealthCmd {\n    /**\n     * No args. Starts a connection to the IoT hub service\n     */\n    Connect = 0x81,\n\n    /**\n     * No args. Starts disconnecting from the IoT hub service\n     */\n    Disconnect = 0x82,\n\n    /**\n     * Argument: connection_string string (bytes). Restricted command to override the existing connection string to the Azure IoT Hub.\n     *\n     * ```\n     * const [connectionString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SetConnectionString = 0x86,\n}\n\nexport enum AzureIotHubHealthEvent {\n    /**\n     * Argument: connection_status ConnectionStatus (uint16_t). Raised when the connection status changes\n     *\n     * ```\n     * const [connectionStatus] = jdunpack<[AzureIotHubHealthConnectionStatus]>(buf, \"u16\")\n     * ```\n     */\n    ConnectionStatusChange = 0x3,\n}\n\n// Service: Barcode reader\nexport const SRV_BARCODE_READER = 0x1c739e6c\n\nexport enum BarcodeReaderFormat { // uint8_t\n    Aztec = 0x1,\n    Code128 = 0x2,\n    Code39 = 0x3,\n    Code93 = 0x4,\n    Codabar = 0x5,\n    DataMatrix = 0x6,\n    Ean13 = 0x8,\n    Ean8 = 0x9,\n    ITF = 0xa,\n    Pdf417 = 0xb,\n    QrCode = 0xc,\n    UpcA = 0xd,\n    UpcE = 0xe,\n}\n\nexport enum BarcodeReaderReg {\n    /**\n     * Read-write bool (uint8_t). Turns on or off the detection of barcodes.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Constant. Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\n     *\n     * ```\n     * const [format] = jdunpack<[BarcodeReaderFormat[]]>(buf, \"u8[]\")\n     * ```\n     */\n    Formats = 0x180,\n}\n\nexport enum BarcodeReaderEvent {\n    /**\n     * Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\n     * In case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\n     *\n     * ```\n     * const [format, data] = jdunpack<[BarcodeReaderFormat, string]>(buf, \"u8 s\")\n     * ```\n     */\n    Detect = 0x1,\n}\n\n// Service: Barometer\nexport const SRV_BAROMETER = 0x1e117cea\nexport enum BarometerReg {\n    /**\n     * Read-only hPa u22.10 (uint32_t). The air pressure.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Pressure = 0x101,\n\n    /**\n     * Read-only hPa u22.10 (uint32_t). The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\n     *\n     * ```\n     * const [pressureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    PressureError = 0x106,\n}\n\n// Service: bit:radio\nexport const SRV_BIT_RADIO = 0x1ac986cf\nexport enum BitRadioReg {\n    /**\n     * Read-write bool (uint8_t). Turns on/off the radio antenna.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write uint8_t. Group used to filter packets\n     *\n     * ```\n     * const [group] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Group = 0x80,\n\n    /**\n     * Read-write uint8_t. Antenna power to increase or decrease range.\n     *\n     * ```\n     * const [transmissionPower] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    TransmissionPower = 0x81,\n\n    /**\n     * Read-write uint8_t. Change the transmission and reception band of the radio to the given channel.\n     *\n     * ```\n     * const [frequencyBand] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    FrequencyBand = 0x82,\n}\n\nexport enum BitRadioCmd {\n    /**\n     * Argument: message string (bytes). Sends a string payload as a radio message, maximum 18 characters.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    SendString = 0x80,\n\n    /**\n     * Argument: value f64 (uint64_t). Sends a double precision number payload as a radio message\n     *\n     * ```\n     * const [value] = jdunpack<[number]>(buf, \"f64\")\n     * ```\n     */\n    SendNumber = 0x81,\n\n    /**\n     * Sends a double precision number and a name payload as a radio message\n     *\n     * ```\n     * const [value, name] = jdunpack<[number, string]>(buf, \"f64 s\")\n     * ```\n     */\n    SendValue = 0x82,\n\n    /**\n     * Argument: data bytes. Sends a payload of bytes as a radio message\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SendBuffer = 0x83,\n\n    /**\n     * Raised when a string packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, message] = jdunpack<[number, number, number, string]>(buf, \"u32 u32 i8 x[1] s\")\n     * ```\n     */\n    StringReceived = 0x90,\n\n    /**\n     * Raised when a number packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, value, name] = jdunpack<[number, number, number, number, string]>(buf, \"u32 u32 i8 x[3] f64 s\")\n     * ```\n     */\n    NumberReceived = 0x91,\n\n    /**\n     * Raised when a buffer packet is received\n     *\n     * ```\n     * const [time, deviceSerialNumber, rssi, data] = jdunpack<[number, number, number, Uint8Array]>(buf, \"u32 u32 i8 x[1] b\")\n     * ```\n     */\n    BufferReceived = 0x92,\n}\n\n// Service: Bootloader\nexport const SRV_BOOTLOADER = 0x1ffa9948\n\nexport enum BootloaderError { // uint32_t\n    NoError = 0x0,\n    PacketTooSmall = 0x1,\n    OutOfFlashableRange = 0x2,\n    InvalidPageOffset = 0x3,\n    NotPageAligned = 0x4,\n}\n\nexport enum BootloaderCmd {\n    /**\n     * No args. The `service_class` is always `0x1ffa9948`. The `product_identifer` identifies the kind of firmware\n     * that \"fits\" this device.\n     */\n    Info = 0x0,\n\n    /**\n     * report Info\n     * ```\n     * const [serviceClass, pageSize, flashableSize, productIdentifer] = jdunpack<[number, number, number, number]>(buf, \"u32 u32 u32 u32\")\n     * ```\n     */\n\n    /**\n     * Argument: session_id uint32_t. The flashing server should generate a random id, and use this command to set it.\n     *\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SetSession = 0x81,\n\n    /**\n     * report SetSession\n     * ```\n     * const [sessionId] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n\n    /**\n     * Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\n     * Each chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\n     * and is included in response.\n     * Only the last chunk causes writing to flash and elicits response.\n     *\n     * ```\n     * const [pageAddress, pageOffset, chunkNo, chunkMax, sessionId, pageData] = jdunpack<[number, number, number, number, number, Uint8Array]>(buf, \"u32 u16 u8 u8 u32 x[4] x[4] x[4] x[4] b[208]\")\n     * ```\n     */\n    PageData = 0x80,\n\n    /**\n     * report PageData\n     * ```\n     * const [sessionId, pageError, pageAddress] = jdunpack<[number, BootloaderError, number]>(buf, \"u32 u32 u32\")\n     * ```\n     */\n}\n\n// Service: Button\nexport const SRV_BUTTON = 0x1473a263\nexport enum ButtonReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the pressure state of the button, where ``0`` is open.\n     *\n     * ```\n     * const [pressure] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Pressure = 0x101,\n\n    /**\n     * Constant bool (uint8_t). Indicates if the button provides analog ``pressure`` readings.\n     *\n     * ```\n     * const [analog] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Analog = 0x180,\n\n    /**\n     * Read-only bool (uint8_t). Determines if the button is pressed currently.\n     */\n    Pressed = 0x181,\n}\n\nexport enum ButtonEvent {\n    /**\n     * Emitted when button goes from inactive to active.\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: time ms uint32_t. Emitted when button goes from active to inactive. The 'time' parameter\n     * records the amount of time between the down and up events.\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Up = 0x2,\n\n    /**\n     * Argument: time ms uint32_t. Emitted when the press time is greater than 500ms, and then at least every 500ms\n     * as long as the button remains pressed. The 'time' parameter records the the amount of time\n     * that the button has been held (since the down event).\n     *\n     * ```\n     * const [time] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Hold = 0x81,\n}\n\n// Service: Buzzer\nexport const SRV_BUZZER = 0x1b57b1d7\nexport enum BuzzerReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). The volume (duty cycle) of the buzzer.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Volume = 0x1,\n}\n\nexport enum BuzzerCmd {\n    /**\n     * Play a PWM tone with given period and duty for given duration.\n     * The duty is scaled down with `volume` register.\n     * To play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\n     * to send `P = 1000000 / F` and `D = P * V / 2`.\n     *\n     * ```\n     * const [period, duty, duration] = jdunpack<[number, number, number]>(buf, \"u16 u16 u16\")\n     * ```\n     */\n    PlayTone = 0x80,\n\n    /**\n     * Play a note at the given frequency and volume.\n     */\n    PlayNote = 0x81,\n}\n\n// Service: Capacitive Button\nexport const SRV_CAPACITIVE_BUTTON = 0x2865adc9\nexport enum CapacitiveButtonReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Threshold = 0x6,\n}\n\nexport enum CapacitiveButtonCmd {\n    /**\n     * No args. Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button.\n     * The report indicates the calibration is done.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Character Screen\nexport const SRV_CHARACTER_SCREEN = 0x1f37c56a\n\nexport enum CharacterScreenVariant { // uint8_t\n    LCD = 0x1,\n    OLED = 0x2,\n    Braille = 0x3,\n}\n\n\nexport enum CharacterScreenTextDirection { // uint8_t\n    LeftToRight = 0x1,\n    RightToLeft = 0x2,\n}\n\nexport enum CharacterScreenReg {\n    /**\n     * Read-write string (bytes). Text to show. Use `\\n` to break lines.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Message = 0x2,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Brightness of the screen. `0` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of character LED screen.\n     *\n     * ```\n     * const [variant] = jdunpack<[CharacterScreenVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Read-write TextDirection (uint8_t). Specifies the RTL or LTR direction of the text.\n     *\n     * ```\n     * const [textDirection] = jdunpack<[CharacterScreenTextDirection]>(buf, \"u8\")\n     * ```\n     */\n    TextDirection = 0x82,\n\n    /**\n     * Constant # uint8_t. Gets the number of rows.\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Rows = 0x180,\n\n    /**\n     * Constant # uint8_t. Gets the number of columns.\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Columns = 0x181,\n}\n\nexport enum CharacterScreenCmd {\n    /**\n     * Overrides the content of a single line at a 0-based index.\n     *\n     * ```\n     * const [index, message] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    SetLine = 0x80,\n\n    /**\n     * No args. Clears all text from the display.\n     */\n    Clear = 0x81,\n}\n\n// Service: CODAL Message Bus\nexport const SRV_CODAL_MESSAGE_BUS = 0x121ff81d\nexport enum CodalMessageBusCmd {\n    /**\n     * Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    Send = 0x80,\n}\n\nexport enum CodalMessageBusEvent {\n    /**\n     * Raised by the server is triggered by the server. The filtering logic of which event to send over JACDAC is up to the server implementation.\n     *\n     * ```\n     * const [source, value] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    Message = 0x80,\n}\n\n// Service: Color\nexport const SRV_COLOR = 0x1630d567\nexport enum ColorReg {\n    /**\n     * Detected color in the RGB color space.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u0.16 u0.16 u0.16\")\n     * ```\n     */\n    Color = 0x101,\n}\n\n// Service: Compass\nexport const SRV_COMPASS = 0x15b7b9bf\nexport enum CompassReg {\n    /**\n     * Read-only ° u16.16 (uint32_t). The heading with respect to the magnetic north.\n     *\n     * ```\n     * const [heading] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Heading = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the sensor. Turning on the sensor may start a calibration sequence.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-only ° u16.16 (uint32_t). Error on the heading reading\n     *\n     * ```\n     * const [headingError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeadingError = 0x106,\n}\n\nexport enum CompassCmd {\n    /**\n     * No args. Starts a calibration sequence for the compass.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Control\nexport const SRV_CONTROL = 0x0\n\nexport enum ControlAnnounceFlags { // uint16_t\n    RestartCounterSteady = 0xf,\n    RestartCounter1 = 0x1,\n    RestartCounter2 = 0x2,\n    RestartCounter4 = 0x4,\n    RestartCounter8 = 0x8,\n    StatusLightNone = 0x0,\n    StatusLightMono = 0x10,\n    StatusLightRgbNoFade = 0x20,\n    StatusLightRgbFade = 0x30,\n    SupportsACK = 0x100,\n    SupportsBroadcast = 0x200,\n    SupportsFrames = 0x400,\n    IsClient = 0x800,\n}\n\nexport enum ControlCmd {\n    /**\n     * No args. The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\n     * If this number ever goes down, it indicates that the device restarted.\n     * `service_class` indicates class identifier for each service index (service index `0` is always control, so it's\n     * skipped in this enumeration).\n     * `packet_count` indicates the number of packets sent by the current device since last announce,\n     * including the current announce packet (it is always 0 if this feature is not supported).\n     * The command form can be used to induce report, which is otherwise broadcast every 500ms.\n     */\n    Services = 0x0,\n\n    /**\n     * report Services\n     * ```\n     * const [flags, packetCount, serviceClass] = jdunpack<[ControlAnnounceFlags, number, number[]]>(buf, \"u16 u8 x[1] u32[]\")\n     * ```\n     */\n\n    /**\n     * No args. Do nothing. Always ignored. Can be used to test ACKs.\n     */\n    Noop = 0x80,\n\n    /**\n     * No args. Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\n     * For devices with status light (this can be discovered in the announce flags), the client should\n     * send the sequence of status light command to generate the identify animation.\n     */\n    Identify = 0x81,\n\n    /**\n     * No args. Reset device. ACK may or may not be sent.\n     */\n    Reset = 0x82,\n\n    /**\n     * The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\n     * to `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\n     * The `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n     *\n     * ```\n     * const [numResponses, startCounter, size] = jdunpack<[number, number, number]>(buf, \"u32 u32 u8\")\n     * ```\n     */\n    FloodPing = 0x83,\n\n    /**\n     * report FloodPing\n     * ```\n     * const [counter, dummyPayload] = jdunpack<[number, Uint8Array]>(buf, \"u32 b\")\n     * ```\n     */\n\n    /**\n     * Initiates a color transition of the status light from its current color to the one specified.\n     * The transition will complete in about `512 / speed` frames\n     * (each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\n     * As a special case, if speed is `0` the transition is immediate.\n     * If MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\n     * If a monochrome LEDs is fitted, the average value of ``red``, ``green``, ``blue`` is used.\n     * If intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\n     * on, and `0` (for all three channels) should be considered off.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    SetStatusLight = 0x84,\n\n    /**\n     * No args. Force client device into proxy mode.\n     */\n    Proxy = 0x85,\n}\n\nexport enum ControlReg {\n    /**\n     * Read-write μs uint32_t. When set to value other than `0`, it asks the device to reset after specified number of microseconds.\n     * This is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\n     * say 1.6s every 0.5s.\n     *\n     * ```\n     * const [resetIn] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ResetIn = 0x80,\n\n    /**\n     * Constant string (bytes). Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n     *\n     * ```\n     * const [deviceDescription] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    DeviceDescription = 0x180,\n\n    /**\n     * Constant uint32_t. A numeric code for the string above; used to identify firmware images and devices.\n     *\n     * ```\n     * const [productIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ProductIdentifier = 0x181,\n\n    /**\n     * Constant uint32_t. Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n     *\n     * ```\n     * const [bootloaderProductIdentifier] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BootloaderProductIdentifier = 0x184,\n\n    /**\n     * Constant string (bytes). A string describing firmware version; typically semver.\n     *\n     * ```\n     * const [firmwareVersion] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    FirmwareVersion = 0x185,\n\n    /**\n     * Read-only °C int16_t. MCU temperature in degrees Celsius (approximate).\n     *\n     * ```\n     * const [mcuTemperature] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    McuTemperature = 0x182,\n\n    /**\n     * Read-only μs uint64_t. Number of microseconds since boot.\n     *\n     * ```\n     * const [uptime] = jdunpack<[number]>(buf, \"u64\")\n     * ```\n     */\n    Uptime = 0x186,\n}\n\n// Service: Dimmer\nexport const SRV_DIMMER = 0x1fb02645\n\nexport enum DimmerVariant { // uint8_t\n    Light = 0x1,\n    Fan = 0x2,\n    Pump = 0x3,\n}\n\nexport enum DimmerReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). The intensity of the current. Set to ``0`` to turn off completely the current.\n     *\n     * ```\n     * const [intensity] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Intensity = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical device\n     *\n     * ```\n     * const [variant] = jdunpack<[DimmerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Distance\nexport const SRV_DISTANCE = 0x141a6b8a\n\nexport enum DistanceVariant { // uint8_t\n    Ultrasonic = 0x1,\n    Infrared = 0x2,\n    LiDAR = 0x3,\n    Laser = 0x4,\n}\n\nexport enum DistanceReg {\n    /**\n     * Read-only m u16.16 (uint32_t). Current distance from the object\n     *\n     * ```\n     * const [distance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Distance = 0x101,\n\n    /**\n     * Constant m u16.16 (uint32_t). Minimum measurable distance\n     *\n     * ```\n     * const [minRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MinRange = 0x104,\n\n    /**\n     * Constant m u16.16 (uint32_t). Maximum measurable distance\n     *\n     * ```\n     * const [maxRange] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxRange = 0x105,\n\n    /**\n     * Constant Variant (uint8_t). Determines the type of sensor used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DistanceVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: DMX\nexport const SRV_DMX = 0x11cf8c05\nexport enum DmxReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the DMX bridge is active\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum DmxCmd {\n    /**\n     * Argument: channels bytes. Send a DMX packet, up to 236bytes long, including the start code.\n     *\n     * ```\n     * const [channels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Send = 0x80,\n}\n\n// Service: Dot Matrix\nexport const SRV_DOT_MATRIX = 0x110d154b\n\nexport enum DotMatrixVariant { // uint8_t\n    LED = 0x1,\n    Braille = 0x2,\n}\n\nexport enum DotMatrixReg {\n    /**\n     * Read-write bytes. The state of the screen where dot on/off state is\n     * stored as a bit, column by column. The column should be byte aligned.\n     *\n     * ```\n     * const [dots] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Dots = 0x2,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Constant # uint16_t. Number of rows on the screen\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Rows = 0x181,\n\n    /**\n     * Constant # uint16_t. Number of columns on the screen\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Columns = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of matrix used.\n     *\n     * ```\n     * const [variant] = jdunpack<[DotMatrixVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Equivalent CO₂\nexport const SRV_E_CO2 = 0x169c9dc6\n\nexport enum ECO2Variant { // uint8_t\n    VOC = 0x1,\n    NDIR = 0x2,\n}\n\nexport enum ECO2Reg {\n    /**\n     * Read-only ppm u22.10 (uint32_t). Equivalent CO₂ (eCO₂) readings.\n     *\n     * ```\n     * const [eCO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2 = 0x101,\n\n    /**\n     * Read-only ppm u22.10 (uint32_t). Error on the reading value.\n     *\n     * ```\n     * const [eCO2Error] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    ECO2Error = 0x106,\n\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinECO2 = 0x104,\n\n    /**\n     * Constant ppm u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxECO2] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxECO2 = 0x105,\n\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ConditioningPeriod = 0x180,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[ECO2Variant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Flex\nexport const SRV_FLEX = 0x1f47c6c6\n\nexport enum FlexVariant { // uint8_t\n    Linear22Inch = 0x1,\n    Linear45Inch = 0x2,\n}\n\nexport enum FlexReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [bending] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Bending = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the flex sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[FlexVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Gyroscope\nexport const SRV_GYROSCOPE = 0x1e1b06f2\nexport enum GyroscopeReg {\n    /**\n     * Indicates the current forces acting on accelerometer.\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i12.20 i12.20 i12.20\")\n     * ```\n     */\n    RotationRates = 0x101,\n\n    /**\n     * Read-only °/s i12.20 (int32_t). Error on the reading value.\n     *\n     * ```\n     * const [rotationRatesError] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    RotationRatesError = 0x106,\n\n    /**\n     * Read-write °/s i12.20 (int32_t). Configures the range of range of rotation rates.\n     *\n     * ```\n     * const [maxRate] = jdunpack<[number]>(buf, \"i12.20\")\n     * ```\n     */\n    MaxRate = 0x80,\n}\n\n// Service: Heart Rate\nexport const SRV_HEART_RATE = 0x166c6dc4\n\nexport enum HeartRateVariant { // uint8_t\n    Finger = 0x1,\n    Chest = 0x2,\n    Wrist = 0x3,\n    Pump = 0x4,\n    WebCam = 0x5,\n}\n\nexport enum HeartRateReg {\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated heart rate.\n     *\n     * ```\n     * const [heartRate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRate = 0x101,\n\n    /**\n     * Read-only bpm u16.16 (uint32_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [heartRateError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    HeartRateError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[HeartRateVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: HID Adapter\nexport const SRV_HID_ADAPTER = 0x1e5758b5\nexport enum HidAdapterReg {\n    /**\n     * Read-write uint8_t. The number of configurations stored on the server.\n     *\n     * ```\n     * const [numConfigurations] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    NumConfigurations = 0x80,\n\n    /**\n     * Read-write uint8_t. The current configuration the server is using.\n     *\n     * ```\n     * const [currentConfiguration] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CurrentConfiguration = 0x81,\n}\n\nexport enum HidAdapterCmd {\n    /**\n     * Retrieves a configuration stored on the server. If the configuration does not exist, an empty report will be returned\n     *\n     * ```\n     * const [results, configurationNumber] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u8\")\n     * ```\n     */\n    GetConfiguration = 0x80,\n\n    /**\n     * Stores the given binding on the server. If a binding exists at this index, the new binding will replace it.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n     * ```\n     */\n    SetBinding = 0x82,\n\n    /**\n     * Clears a specific binding stored on the device.\n     *\n     * ```\n     * const [configurationNumber, bindingIndex] = jdunpack<[number, number]>(buf, \"u8 u8\")\n     * ```\n     */\n    ClearBinding = 0x83,\n\n    /**\n     * Argument: configuration_number uint8_t. Clears a specific configuration stored on the device.\n     *\n     * ```\n     * const [configurationNumber] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    ClearConfiguration = 0x84,\n\n    /**\n     * No args. Clears all configurations and bindings stored on the device.\n     */\n    Clear = 0x85,\n}\n\n\n/**\n * pipe_report Configuration\n * ```\n * const [configurationNumber, bindingIndex, deviceId, serviceClass, triggerValue, triggerContext, serviceIndex, selector, modifiers] = jdunpack<[number, number, number, number, number, number, number, number, number]>(buf, \"u8 u8 x[2] u64 u32 u32 u8 u8 u16 u16\")\n * ```\n */\n\n\nexport enum HidAdapterEvent {\n    /**\n     * Event that notifies clients that the server has swapped to a new configuration or changed key bindings.\n     */\n    Changed = 0x3,\n}\n\n// Service: HID Keyboard\nexport const SRV_HID_KEYBOARD = 0x18b05b6a\n\nexport enum HidKeyboardModifiers { // uint8_t\n    None = 0x0,\n    LeftControl = 0x1,\n    LeftShift = 0x2,\n    LeftAlt = 0x4,\n    LeftGUI = 0x8,\n    RightControl = 0x10,\n    RightShift = 0x20,\n    RightAlt = 0x40,\n    RightGUI = 0x80,\n}\n\n\nexport enum HidKeyboardAction { // uint8_t\n    Press = 0x0,\n    Up = 0x1,\n    Down = 0x2,\n}\n\nexport enum HidKeyboardCmd {\n    /**\n     * Presses a key or a sequence of keys down.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, HidKeyboardModifiers, HidKeyboardAction])[]]>(buf, \"r: u16 u8 u8\")\n     * const [selector, modifiers, action] = rest[0]\n     * ```\n     */\n    Key = 0x80,\n\n    /**\n     * No args. Clears all pressed keys.\n     */\n    Clear = 0x81,\n}\n\n// Service: HID Mouse\nexport const SRV_HID_MOUSE = 0x1885dc1c\n\nexport enum HidMouseButton { // uint16_t\n    Left = 0x1,\n    Right = 0x2,\n    Middle = 0x4,\n}\n\n\nexport enum HidMouseButtonEvent { // uint8_t\n    Up = 0x1,\n    Down = 0x2,\n    Click = 0x3,\n    DoubleClick = 0x4,\n}\n\nexport enum HidMouseCmd {\n    /**\n     * Sets the up/down state of one or more buttons.\n     * A ``Click`` is the same as ``Down`` followed by ``Up`` after 100ms.\n     * A ``DoubleClick`` is two clicks with ``150ms`` gap between them (that is, ``100ms`` first click, ``150ms`` gap, ``100ms`` second click).\n     *\n     * ```\n     * const [buttons, event] = jdunpack<[HidMouseButton, HidMouseButtonEvent]>(buf, \"u16 u8\")\n     * ```\n     */\n    SetButton = 0x80,\n\n    /**\n     * Moves the mouse by the distance specified.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dx, dy, time] = jdunpack<[number, number, number]>(buf, \"i16 i16 u16\")\n     * ```\n     */\n    Move = 0x81,\n\n    /**\n     * Turns the wheel up or down. Positive if scrolling up.\n     * If the time is positive, it specifies how long to make the move.\n     *\n     * ```\n     * const [dy, time] = jdunpack<[number, number]>(buf, \"i16 u16\")\n     * ```\n     */\n    Wheel = 0x82,\n}\n\n// Service: Humidity\nexport const SRV_HUMIDITY = 0x16c810b8\nexport enum HumidityReg {\n    /**\n     * Read-only %RH u22.10 (uint32_t). The relative humidity in percentage of full water saturation.\n     *\n     * ```\n     * const [humidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Humidity = 0x101,\n\n    /**\n     * Read-only %RH u22.10 (uint32_t). The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\n     *\n     * ```\n     * const [humidityError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    HumidityError = 0x106,\n\n    /**\n     * Constant %RH u22.10 (uint32_t). Lowest humidity that can be reported.\n     *\n     * ```\n     * const [minHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinHumidity = 0x104,\n\n    /**\n     * Constant %RH u22.10 (uint32_t). Highest humidity that can be reported.\n     *\n     * ```\n     * const [maxHumidity] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxHumidity = 0x105,\n}\n\n// Service: Illuminance\nexport const SRV_ILLUMINANCE = 0x1e6ecaf2\nexport enum IlluminanceReg {\n    /**\n     * Read-only lux u22.10 (uint32_t). The amount of illuminance, as lumens per square metre.\n     *\n     * ```\n     * const [light] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    Light = 0x101,\n\n    /**\n     * Read-only lux u22.10 (uint32_t). Error on the reported sensor value.\n     *\n     * ```\n     * const [lightError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    LightError = 0x106,\n}\n\n// Service: Indexed screen\nexport const SRV_INDEXED_SCREEN = 0x16fa36e5\nexport enum IndexedScreenCmd {\n    /**\n     * Sets the update window for subsequent `set_pixels` commands.\n     *\n     * ```\n     * const [x, y, width, height] = jdunpack<[number, number, number, number]>(buf, \"u16 u16 u16 u16\")\n     * ```\n     */\n    StartUpdate = 0x81,\n\n    /**\n     * Argument: pixels bytes. Set pixels in current window, according to current palette.\n     * Each \"line\" of data is aligned to a byte.\n     *\n     * ```\n     * const [pixels] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    SetPixels = 0x83,\n}\n\nexport enum IndexedScreenReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set backlight brightness.\n     * If set to `0` the display may go to sleep.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * The current palette.\n     * The color entry repeats `1 << bits_per_pixel` times.\n     * This register may be write-only.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number, number])[]]>(buf, \"r: u8 u8 u8 x[1]\")\n     * const [blue, green, red] = rest[0]\n     * ```\n     */\n    Palette = 0x80,\n\n    /**\n     * Constant bit uint8_t. Determines the number of palette entries.\n     * Typical values are 1, 2, 4, or 8.\n     *\n     * ```\n     * const [bitsPerPixel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    BitsPerPixel = 0x180,\n\n    /**\n     * Constant px uint16_t. Screen width in \"natural\" orientation.\n     *\n     * ```\n     * const [width] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Width = 0x181,\n\n    /**\n     * Constant px uint16_t. Screen height in \"natural\" orientation.\n     *\n     * ```\n     * const [height] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Height = 0x182,\n\n    /**\n     * Read-write bool (uint8_t). If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\n     * If false, consecutive pixels in the \"height\" direction are sent next to each other.\n     * For embedded screen controllers, this is typically true iff `width < height`\n     * (in other words, it's only true for portrait orientation screens).\n     * Some controllers may allow the user to change this (though the refresh order may not be optimal then).\n     * This is independent of the `rotation` register.\n     *\n     * ```\n     * const [widthMajor] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    WidthMajor = 0x81,\n\n    /**\n     * Read-write px uint8_t. Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\n     * Some displays may allow changing this (which will also result in changes to `width` and `height`).\n     * Typical values are 1 and 2.\n     *\n     * ```\n     * const [upSampling] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    UpSampling = 0x82,\n\n    /**\n     * Read-write ° uint16_t. Possible values are 0, 90, 180 and 270 only.\n     * Write to this register do not affect `width` and `height` registers,\n     * and may be ignored by some screens.\n     *\n     * ```\n     * const [rotation] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Rotation = 0x83,\n}\n\n// Service: Infrastructure\nexport const SRV_INFRASTRUCTURE = 0x1e1589eb\n// Service: Joystick\nexport const SRV_JOYSTICK = 0x108f7456\n\nexport enum JoystickButtons { // uint32_t\n    Left = 0x1,\n    Up = 0x2,\n    Right = 0x4,\n    Down = 0x8,\n    A = 0x10,\n    B = 0x20,\n    Menu = 0x40,\n    Select = 0x80,\n    Reset = 0x100,\n    Exit = 0x200,\n    X = 0x400,\n    Y = 0x800,\n}\n\n\nexport enum JoystickVariant { // uint8_t\n    Thumb = 0x1,\n    ArcadeBall = 0x2,\n    ArcadeStick = 0x3,\n    Gamepad = 0x4,\n}\n\nexport enum JoystickReg {\n    /**\n     * If the joystick is analog, the directional buttons should be \"simulated\", based on joystick position\n     * (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\n     * If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\n     * The primary button on the joystick is `A`.\n     *\n     * ```\n     * const [buttons, x, y] = jdunpack<[JoystickButtons, number, number]>(buf, \"u32 i1.15 i1.15\")\n     * ```\n     */\n    Direction = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical joystick.\n     *\n     * ```\n     * const [variant] = jdunpack<[JoystickVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant Buttons (uint32_t). Indicates a bitmask of the buttons that are mounted on the joystick.\n     * If the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\n     * Even when marked as not available, they will still be simulated based on the analog joystick.\n     *\n     * ```\n     * const [buttonsAvailable] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    ButtonsAvailable = 0x180,\n}\n\nexport enum JoystickEvent {\n    /**\n     * Argument: buttons Buttons (uint32_t). Emitted whenever the state of buttons changes.\n     *\n     * ```\n     * const [buttons] = jdunpack<[JoystickButtons]>(buf, \"u32\")\n     * ```\n     */\n    ButtonsChanged = 0x3,\n}\n\n// Service: LED\nexport const SRV_LED = 0x1e3048f8\n\nexport enum LedVariant { // uint8_t\n    ThroughHole = 0x1,\n    SMD = 0x2,\n    Power = 0x3,\n    Bead = 0x4,\n}\n\nexport enum LedCmd {\n    /**\n     * This has the same semantics as `set_status_light` in the control service.\n     *\n     * ```\n     * const [toRed, toGreen, toBlue, speed] = jdunpack<[number, number, number, number]>(buf, \"u8 u8 u8 u8\")\n     * ```\n     */\n    Animate = 0x80,\n}\n\nexport enum LedReg {\n    /**\n     * The current color of the LED.\n     *\n     * ```\n     * const [red, green, blue] = jdunpack<[number, number, number]>(buf, \"u8 u8 u8\")\n     * ```\n     */\n    Color = 0x180,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Constant uint16_t. If known, specifies the number of LEDs in parallel on this device.\n     *\n     * ```\n     * const [ledCount] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LedCount = 0x183,\n\n    /**\n     * Constant nm uint16_t. If monochrome LED, specifies the wave length of the LED.\n     *\n     * ```\n     * const [waveLength] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WaveLength = 0x181,\n\n    /**\n     * Constant mcd uint16_t. The luminous intensity of the LED, at full value, in micro candella.\n     *\n     * ```\n     * const [luminousIntensity] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    LuminousIntensity = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). The physical type of LED.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: LED Pixel\nexport const SRV_LED_PIXEL = 0x126f00e0\n\nexport enum LedPixelLightType { // uint8_t\n    WS2812B_GRB = 0x0,\n    APA102 = 0x10,\n    SK9822 = 0x11,\n}\n\n\nexport enum LedPixelVariant { // uint8_t\n    Strip = 0x1,\n    Ring = 0x2,\n    Stick = 0x3,\n    Jewel = 0x4,\n    Matrix = 0x5,\n}\n\nexport enum LedPixelReg {\n    /**\n     * Read-write ratio u0.8 (uint8_t). Set the luminosity of the strip.\n     * At `0` the power to the strip is completely shut down.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Read-only ratio u0.8 (uint8_t). This is the luminosity actually applied to the strip.\n     * May be lower than `brightness` if power-limited by the `max_power` register.\n     * It will rise slowly (few seconds) back to `brightness` is limits are no longer required.\n     *\n     * ```\n     * const [actualBrightness] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    ActualBrightness = 0x180,\n\n    /**\n     * Read-write LightType (uint8_t). Specifies the type of light strip connected to controller.\n     * Controllers which are sold with lights should default to the correct type\n     * and could not allow change.\n     *\n     * ```\n     * const [lightType] = jdunpack<[LedPixelLightType]>(buf, \"u8\")\n     * ```\n     */\n    LightType = 0x80,\n\n    /**\n     * Read-write # uint16_t. Specifies the number of pixels in the strip.\n     * Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumPixels = 0x81,\n\n    /**\n     * Read-write # uint16_t. If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\n     * and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\n     *\n     * ```\n     * const [numColumns] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumColumns = 0x83,\n\n    /**\n     * Read-write mA uint16_t. Limit the power drawn by the light-strip (and controller).\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Constant # uint16_t. The maximum supported number of pixels.\n     * All writes to `num_pixels` are clamped to `max_pixels`.\n     *\n     * ```\n     * const [maxPixels] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPixels = 0x181,\n\n    /**\n     * Read-write # uint16_t. How many times to repeat the program passed in `run` command.\n     * Should be set before the `run` command.\n     * Setting to `0` means to repeat forever.\n     *\n     * ```\n     * const [numRepeats] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    NumRepeats = 0x82,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the shape of the light strip.\n     *\n     * ```\n     * const [variant] = jdunpack<[LedPixelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum LedPixelCmd {\n    /**\n     * Argument: program bytes. Run the given light \"program\". See service description for details.\n     *\n     * ```\n     * const [program] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Run = 0x81,\n}\n\n// Service: Light level\nexport const SRV_LIGHT_LEVEL = 0x17dc9a1c\n\nexport enum LightLevelVariant { // uint8_t\n    PhotoResistor = 0x1,\n    LEDMatrix = 0x2,\n    Ambient = 0x3,\n}\n\nexport enum LightLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Detect light level\n     *\n     * ```\n     * const [lightLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    LightLevel = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[LightLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Logger\nexport const SRV_LOGGER = 0x12dc1fca\n\nexport enum LoggerPriority { // uint8_t\n    Debug = 0x0,\n    Log = 0x1,\n    Warning = 0x2,\n    Error = 0x3,\n    Silent = 0x4,\n}\n\nexport enum LoggerReg {\n    /**\n     * Read-write Priority (uint8_t). Messages with level lower than this won't be emitted. The default setting may vary.\n     * Loggers should revert this to their default setting if the register has not been\n     * updated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\n     * Thus, clients should write this register every 1000ms and ignore messages which are\n     * too verbose for them.\n     *\n     * ```\n     * const [minPriority] = jdunpack<[LoggerPriority]>(buf, \"u8\")\n     * ```\n     */\n    MinPriority = 0x80,\n}\n\nexport enum LoggerCmd {\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Debug = 0x80,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Log = 0x81,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Warn = 0x82,\n\n    /**\n     * Argument: message string (bytes). Report a message.\n     *\n     * ```\n     * const [message] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Error = 0x83,\n}\n\n// Service: Magnetometer\nexport const SRV_MAGNETOMETER = 0x13029088\nexport enum MagnetometerReg {\n    /**\n     * Indicates the current magnetic field on magnetometer.\n     * For reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\n     *\n     * ```\n     * const [x, y, z] = jdunpack<[number, number, number]>(buf, \"i32 i32 i32\")\n     * ```\n     */\n    Forces = 0x101,\n\n    /**\n     * Read-only nT int32_t. Error on the readings.\n     *\n     * ```\n     * const [forcesError] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    ForcesError = 0x106,\n}\n\nexport enum MagnetometerCmd {\n    /**\n     * No args. Forces a calibration sequence where the user/device\n     * might have to rotate to be calibrated.\n     */\n    Calibrate = 0x2,\n}\n\n// Service: Matrix Keypad\nexport const SRV_MATRIX_KEYPAD = 0x13062dc8\n\nexport enum MatrixKeypadVariant { // uint8_t\n    Membrane = 0x1,\n    Keyboard = 0x2,\n    Elastomer = 0x3,\n    ElastomerLEDPixel = 0x4,\n}\n\nexport enum MatrixKeypadReg {\n    /**\n     * Read-only. The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\n     * ``row = index / columns``, ``column = index % columns``.\n     *\n     * ```\n     * const [index] = jdunpack<[number[]]>(buf, \"u8[]\")\n     * ```\n     */\n    Pressed = 0x101,\n\n    /**\n     * Constant # uint8_t. Number of rows in the matrix\n     *\n     * ```\n     * const [rows] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Rows = 0x180,\n\n    /**\n     * Constant # uint8_t. Number of columns in the matrix\n     *\n     * ```\n     * const [columns] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Columns = 0x181,\n\n    /**\n     * Constant. The characters printed on the keys if any, in indexing sequence.\n     *\n     * ```\n     * const [label] = jdunpack<[string[]]>(buf, \"z[]\")\n     * ```\n     */\n    Labels = 0x182,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical keypad. If the variant is ``ElastomerLEDPixel``\n     * and the next service on the device is a ``LEDPixel`` service, it is considered\n     * as the service controlling the LED pixel on the keypad.\n     *\n     * ```\n     * const [variant] = jdunpack<[MatrixKeypadVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum MatrixKeypadEvent {\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\n     *\n     * ```\n     * const [down] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Down = 0x1,\n\n    /**\n     * Argument: uint8_t. Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\n     *\n     * ```\n     * const [up] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Up = 0x2,\n\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was not longer than 500ms.\n     *\n     * ```\n     * const [click] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Click = 0x80,\n\n    /**\n     * Argument: uint8_t. Emitted together with `up` when the press time was more than 500ms.\n     *\n     * ```\n     * const [longClick] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    LongClick = 0x81,\n}\n\n// Service: Microphone\nexport const SRV_MICROPHONE = 0x113dac86\nexport enum MicrophoneCmd {\n    /**\n     * The samples will be streamed back over the `samples` pipe.\n     * If `num_samples` is `0`, streaming will only stop when the pipe is closed.\n     * Otherwise the specified number of samples is streamed.\n     * Samples are sent as `i16`.\n     *\n     * ```\n     * const [samples, numSamples] = jdunpack<[Uint8Array, number]>(buf, \"b[12] u32\")\n     * ```\n     */\n    Sample = 0x81,\n}\n\nexport enum MicrophoneReg {\n    /**\n     * Read-write μs uint32_t. Get or set microphone sampling period.\n     * Sampling rate is `1_000_000 / sampling_period Hz`.\n     *\n     * ```\n     * const [samplingPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SamplingPeriod = 0x80,\n}\n\n// Service: MIDI output\nexport const SRV_MIDI_OUTPUT = 0x1a848cd7\nexport enum MidiOutputReg {\n    /**\n     * Read-write bool (uint8_t). Opens or closes the port to the MIDI device\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum MidiOutputCmd {\n    /**\n     * No args. Clears any pending send data that has not yet been sent from the MIDIOutput's queue.\n     */\n    Clear = 0x80,\n\n    /**\n     * Argument: data bytes. Enqueues the message to be sent to the corresponding MIDI port\n     *\n     * ```\n     * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Send = 0x81,\n}\n\n// Service: Model Runner\nexport const SRV_MODEL_RUNNER = 0x140f9a78\n\nexport enum ModelRunnerModelFormat { // uint32_t\n    TFLite = 0x334c4654,\n    ML4F = 0x30470f62,\n    EdgeImpulseCompiled = 0x30564945,\n}\n\nexport enum ModelRunnerCmd {\n    /**\n     * Argument: model_size B uint32_t. Open pipe for streaming in the model. The size of the model has to be declared upfront.\n     * The model is streamed over regular pipe data packets.\n     * The format supported by this instance of the service is specified in `format` register.\n     * When the pipe is closed, the model is written all into flash, and the device running the service may reset.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    SetModel = 0x80,\n\n    /**\n     * report SetModel\n     * ```\n     * const [modelPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n\n    /**\n     * Argument: outputs pipe (bytes). Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\n     * and results are send over the `outputs` pipe.\n     *\n     * ```\n     * const [outputs] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    Predict = 0x81,\n\n    /**\n     * report Predict\n     * ```\n     * const [inputs] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n}\n\nexport enum ModelRunnerReg {\n    /**\n     * Read-write uint16_t. When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\n     * Model may be run less often if it takes longer to run than `N * sampling_interval`.\n     * The `outputs` register will stream its value after each run.\n     * This register is not stored in flash.\n     *\n     * ```\n     * const [autoInvokeEvery] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    AutoInvokeEvery = 0x80,\n\n    /**\n     * Read-only. Results of last model invocation as `float32` array.\n     *\n     * ```\n     * const [output] = jdunpack<[number[]]>(buf, \"f32[]\")\n     * ```\n     */\n    Outputs = 0x101,\n\n    /**\n     * Read-only. The shape of the input tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    InputShape = 0x180,\n\n    /**\n     * Read-only. The shape of the output tensor.\n     *\n     * ```\n     * const [dimension] = jdunpack<[number[]]>(buf, \"u16[]\")\n     * ```\n     */\n    OutputShape = 0x181,\n\n    /**\n     * Read-only μs uint32_t. The time consumed in last model execution.\n     *\n     * ```\n     * const [lastRunTime] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    LastRunTime = 0x182,\n\n    /**\n     * Read-only B uint32_t. Number of RAM bytes allocated for model execution.\n     *\n     * ```\n     * const [allocatedArenaSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    AllocatedArenaSize = 0x183,\n\n    /**\n     * Read-only B uint32_t. The size of the model in bytes.\n     *\n     * ```\n     * const [modelSize] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ModelSize = 0x184,\n\n    /**\n     * Read-only string (bytes). Textual description of last error when running or loading model (if any).\n     *\n     * ```\n     * const [lastError] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    LastError = 0x185,\n\n    /**\n     * Constant ModelFormat (uint32_t). The type of ML models supported by this service.\n     * `TFLite` is flatbuffer `.tflite` file.\n     * `ML4F` is compiled machine code model for Cortex-M4F.\n     * The format is typically present as first or second little endian word of model file.\n     *\n     * ```\n     * const [format] = jdunpack<[ModelRunnerModelFormat]>(buf, \"u32\")\n     * ```\n     */\n    Format = 0x186,\n\n    /**\n     * Constant uint32_t. A version number for the format.\n     *\n     * ```\n     * const [formatVersion] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    FormatVersion = 0x187,\n\n    /**\n     * Constant bool (uint8_t). If present and true this service can run models independently of other\n     * instances of this service on the device.\n     *\n     * ```\n     * const [parallel] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Parallel = 0x188,\n}\n\n// Service: Motion\nexport const SRV_MOTION = 0x1179a749\n\nexport enum MotionVariant { // uint8_t\n    PIR = 0x1,\n}\n\nexport enum MotionReg {\n    /**\n     * Read-only bool (uint8_t). Reports is movement is currently detected by the sensor.\n     *\n     * ```\n     * const [moving] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Moving = 0x101,\n\n    /**\n     * Constant m u16.16 (uint32_t). Maximum distance where objects can be detected.\n     *\n     * ```\n     * const [maxDistance] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxDistance = 0x180,\n\n    /**\n     * Constant ° uint16_t. Opening of the field of view\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    Angle = 0x181,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor\n     *\n     * ```\n     * const [variant] = jdunpack<[MotionVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum MotionEvent {\n    /**\n     * A movement was detected.\n     */\n    Movement = 0x1,\n}\n\n// Service: Motor\nexport const SRV_MOTOR = 0x17004cd8\nexport enum MotorReg {\n    /**\n     * Read-write ratio i1.15 (int16_t). PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\n     * Positive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0``\n     * while ``enabled`` acts as brake.\n     *\n     * ```\n     * const [duty] = jdunpack<[number]>(buf, \"i1.15\")\n     * ```\n     */\n    Duty = 0x2,\n\n    /**\n     * Read-write bool (uint8_t). Turn the power to the motor on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Constant kg/cm u16.16 (uint32_t). Torque required to produce the rated power of an electrical motor at load speed.\n     *\n     * ```\n     * const [loadTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    LoadTorque = 0x180,\n\n    /**\n     * Constant rpm u16.16 (uint32_t). Revolutions per minute of the motor under full load.\n     *\n     * ```\n     * const [loadSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    LoadSpeed = 0x181,\n}\n\n// Service: Multitouch\nexport const SRV_MULTITOUCH = 0x18d55e2b\nexport enum MultitouchReg {\n    /**\n     * Read-only. Capacitance of channels. The capacitance is continuously calibrated, and a value of `0` indicates\n     * no touch, wheres a value of around `100` or more indicates touch.\n     * It's best to ignore this (unless debugging), and use events.\n     *\n     * ```\n     * const [capacitance] = jdunpack<[number[]]>(buf, \"i32[]\")\n     * ```\n     */\n    Capacity = 0x101,\n}\n\nexport enum MultitouchEvent {\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Touch = 0x1,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is no longer touched.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Release = 0x2,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is briefly touched. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    Tap = 0x80,\n\n    /**\n     * Argument: channel uint32_t. Emitted when an input is touched for longer than 500ms. TODO Not implemented.\n     *\n     * ```\n     * const [channel] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    LongPress = 0x81,\n\n    /**\n     * Emitted when input channels are successively touched in order of increasing channel numbers.\n     */\n    SwipePos = 0x90,\n\n    /**\n     * Emitted when input channels are successively touched in order of decreasing channel numbers.\n     */\n    SwipeNeg = 0x91,\n}\n\n// Service: Potentiometer\nexport const SRV_POTENTIOMETER = 0x1f274746\n\nexport enum PotentiometerVariant { // uint8_t\n    Slider = 0x1,\n    Rotary = 0x2,\n}\n\nexport enum PotentiometerReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The relative position of the slider.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Position = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the physical layout of the potentiometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[PotentiometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Power\nexport const SRV_POWER = 0x1fa4c95a\n\nexport enum PowerPowerStatus { // uint8_t\n    Disallowed = 0x0,\n    Powering = 0x1,\n    Overload = 0x2,\n    Overprovision = 0x3,\n}\n\nexport enum PowerReg {\n    /**\n     * Read-write bool (uint8_t). Can be used to completely disable the service.\n     * When allowed, the service may still not be providing power, see\n     * `power_status` for the actual current state.\n     *\n     * ```\n     * const [allowed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Allowed = 0x1,\n\n    /**\n     * Read-write mA uint16_t. Limit the power provided by the service. The actual maximum limit will depend on hardware.\n     * This field may be read-only in some implementations - you should read it back after setting.\n     *\n     * ```\n     * const [maxPower] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPower = 0x7,\n\n    /**\n     * Read-only PowerStatus (uint8_t). Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\n     * `Overprovision` means there was another power provider, and we stopped not to overprovision the bus.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerStatus = 0x181,\n\n    /**\n     * Read-only mA uint16_t. Present current draw from the bus.\n     *\n     * ```\n     * const [currentDraw] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    CurrentDraw = 0x101,\n\n    /**\n     * Read-only mV uint16_t. Voltage on input.\n     *\n     * ```\n     * const [batteryVoltage] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    BatteryVoltage = 0x180,\n\n    /**\n     * Read-only ratio u0.16 (uint16_t). Fraction of charge in the battery.\n     *\n     * ```\n     * const [batteryCharge] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    BatteryCharge = 0x182,\n\n    /**\n     * Constant mWh uint32_t. Energy that can be delivered to the bus when battery is fully charged.\n     * This excludes conversion overheads if any.\n     *\n     * ```\n     * const [batteryCapacity] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    BatteryCapacity = 0x183,\n\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulseDuration] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    KeepOnPulseDuration = 0x80,\n\n    /**\n     * Read-write ms uint16_t. Many USB power packs need current to be drawn from time to time to prevent shutdown.\n     * This regulates how often and for how long such current is drawn.\n     * Typically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n     *\n     * ```\n     * const [keepOnPulsePeriod] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    KeepOnPulsePeriod = 0x81,\n}\n\nexport enum PowerCmd {\n    /**\n     * No args. Sent by the power service periodically, as broadcast.\n     */\n    Shutdown = 0x80,\n}\n\nexport enum PowerEvent {\n    /**\n     * Argument: power_status PowerStatus (uint8_t). Emitted whenever `power_status` changes.\n     *\n     * ```\n     * const [powerStatus] = jdunpack<[PowerPowerStatus]>(buf, \"u8\")\n     * ```\n     */\n    PowerStatusChanged = 0x3,\n}\n\n// Service: Pressure Button\nexport const SRV_PRESSURE_BUTTON = 0x281740c3\nexport enum PressureButtonReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Indicates the threshold for ``up`` events.\n     *\n     * ```\n     * const [threshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Threshold = 0x6,\n}\n\n// Service: Protocol Test\nexport const SRV_PROTO_TEST = 0x16c7466a\nexport enum ProtoTestReg {\n    /**\n     * Read-write bool (uint8_t). A read write bool register.\n     *\n     * ```\n     * const [rwBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RwBool = 0x81,\n\n    /**\n     * Read-only bool (uint8_t). A read only bool register. Mirrors rw_bool.\n     *\n     * ```\n     * const [roBool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    RoBool = 0x181,\n\n    /**\n     * Read-write uint32_t. A read write u32 register.\n     *\n     * ```\n     * const [rwU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    RwU32 = 0x82,\n\n    /**\n     * Read-only uint32_t. A read only u32 register.. Mirrors rw_u32.\n     *\n     * ```\n     * const [roU32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    RoU32 = 0x182,\n\n    /**\n     * Read-write int32_t. A read write i32 register.\n     *\n     * ```\n     * const [rwI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    RwI32 = 0x83,\n\n    /**\n     * Read-only int32_t. A read only i32 register.. Mirrors rw_i32.\n     *\n     * ```\n     * const [roI32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    RoI32 = 0x183,\n\n    /**\n     * Read-write string (bytes). A read write string register.\n     *\n     * ```\n     * const [rwString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    RwString = 0x84,\n\n    /**\n     * Read-only string (bytes). A read only string register. Mirrors rw_string.\n     *\n     * ```\n     * const [roString] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    RoString = 0x184,\n\n    /**\n     * Read-write bytes. A read write string register.\n     *\n     * ```\n     * const [rwBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    RwBytes = 0x85,\n\n    /**\n     * Read-only bytes. A read only string register. Mirrors ro_bytes.\n     *\n     * ```\n     * const [roBytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    RoBytes = 0x185,\n\n    /**\n     * A read write i8, u8, u16, i32 register.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    RwI8U8U16I32 = 0x86,\n\n    /**\n     * A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    RoI8U8U16I32 = 0x186,\n\n    /**\n     * A read write u8, string register.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    RwU8String = 0x87,\n\n    /**\n     * A read only u8, string register.. Mirrors rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    RoU8String = 0x187,\n}\n\nexport enum ProtoTestEvent {\n    /**\n     * Argument: bool bool (uint8_t). An event raised when rw_bool is modified\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    EBool = 0x81,\n\n    /**\n     * Argument: u32 uint32_t. An event raised when rw_u32 is modified\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    EU32 = 0x82,\n\n    /**\n     * Argument: i32 int32_t. An event raised when rw_i32 is modified\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    EI32 = 0x83,\n\n    /**\n     * Argument: string string (bytes). An event raised when rw_string is modified\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    EString = 0x84,\n\n    /**\n     * Argument: bytes bytes. An event raised when rw_bytes is modified\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    EBytes = 0x85,\n\n    /**\n     * An event raised when rw_i8_u8_u16_i32 is modified\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    EI8U8U16I32 = 0x86,\n\n    /**\n     * An event raised when rw_u8_string is modified\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    EU8String = 0x87,\n}\n\nexport enum ProtoTestCmd {\n    /**\n     * Argument: bool bool (uint8_t). A command to set rw_bool.\n     *\n     * ```\n     * const [bool] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    CBool = 0x81,\n\n    /**\n     * Argument: u32 uint32_t. A command to set rw_u32.\n     *\n     * ```\n     * const [u32] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    CU32 = 0x82,\n\n    /**\n     * Argument: i32 int32_t. A command to set rw_i32.\n     *\n     * ```\n     * const [i32] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    CI32 = 0x83,\n\n    /**\n     * Argument: string string (bytes). A command to set rw_string.\n     *\n     * ```\n     * const [string] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    CString = 0x84,\n\n    /**\n     * Argument: bytes bytes. A command to set rw_string.\n     *\n     * ```\n     * const [bytes] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    CBytes = 0x85,\n\n    /**\n     * A command to set rw_bytes.\n     *\n     * ```\n     * const [i8, u8, u16, i32] = jdunpack<[number, number, number, number]>(buf, \"i8 u8 u16 i32\")\n     * ```\n     */\n    CI8U8U16I32 = 0x86,\n\n    /**\n     * A command to set rw_u8_string.\n     *\n     * ```\n     * const [u8, string] = jdunpack<[number, string]>(buf, \"u8 s\")\n     * ```\n     */\n    CU8String = 0x87,\n\n    /**\n     * Argument: p_bytes pipe (bytes). A command to read the content of rw_bytes, byte per byte, as a pipe.\n     *\n     * ```\n     * const [pBytes] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    CReportPipe = 0x90,\n}\n\n\n/**\n * pipe_report PBytes\n * ```\n * const [byte] = jdunpack<[number]>(buf, \"u8\")\n * ```\n */\n\n\n// Service: Pulse Oximeter\nexport const SRV_PULSE_OXIMETER = 0x10bb4eb6\nexport enum PulseOximeterReg {\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated oxygen level in blood.\n     *\n     * ```\n     * const [oxygen] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    Oxygen = 0x101,\n\n    /**\n     * Read-only % u8.8 (uint16_t). The estimated error on the reported sensor data.\n     *\n     * ```\n     * const [oxygenError] = jdunpack<[number]>(buf, \"u8.8\")\n     * ```\n     */\n    OxygenError = 0x106,\n}\n\n// Service: Rain gauge\nexport const SRV_RAIN_GAUGE = 0x13734c95\nexport enum RainGaugeReg {\n    /**\n     * Read-only mm u16.16 (uint32_t). Total precipitation recorded so far.\n     *\n     * ```\n     * const [precipitation] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Precipitation = 0x101,\n\n    /**\n     * Constant mm u16.16 (uint32_t). Typically the amount of rain needed for tipping the bucket.\n     *\n     * ```\n     * const [precipitationPrecision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    PrecipitationPrecision = 0x108,\n}\n\n// Service: Real time clock\nexport const SRV_REAL_TIME_CLOCK = 0x1a8b1a28\n\nexport enum RealTimeClockVariant { // uint8_t\n    Computer = 0x1,\n    Crystal = 0x2,\n    Cuckoo = 0x3,\n}\n\nexport enum RealTimeClockReg {\n    /**\n     * Current time in 24h representation.\n     * * ``day_of_month`` is day of the month, starting at ``1``\n     * * ``day_of_week`` is day of the week, starting at ``1`` as monday\n     * Default streaming period is 1 second.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    LocalTime = 0x101,\n\n    /**\n     * Read-only s u16.16 (uint32_t). Time drift since the last call to the ``set_time`` command.\n     *\n     * ```\n     * const [error] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Error = 0x180,\n\n    /**\n     * Constant ppm u16.16 (uint32_t). Error on the clock, in parts per million of seconds.\n     *\n     * ```\n     * const [precision] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Precision = 0x181,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical clock used by the sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[RealTimeClockVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum RealTimeClockCmd {\n    /**\n     * Sets the current time and resets the error.\n     *\n     * ```\n     * const [year, month, dayOfMonth, dayOfWeek, hour, min, sec] = jdunpack<[number, number, number, number, number, number, number]>(buf, \"u16 u8 u8 u8 u8 u8 u8\")\n     * ```\n     */\n    SetTime = 0x80,\n}\n\n// Service: Reflected light\nexport const SRV_REFLECTED_LIGHT = 0x126c4cb2\n\nexport enum ReflectedLightVariant { // uint8_t\n    InfraredDigital = 0x1,\n    InfraredAnalog = 0x2,\n}\n\nexport enum ReflectedLightReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Brightness = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Type of physical sensor used\n     *\n     * ```\n     * const [variant] = jdunpack<[ReflectedLightVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum ReflectedLightEvent {\n    /**\n     * The sensor detected a transition from light to dark\n     */\n    Dark = 0x2,\n\n    /**\n     * The sensor detected a transition from dark to light\n     */\n    Light = 0x1,\n}\n\n// Service: Relay\nexport const SRV_RELAY = 0x183fe656\n\nexport enum RelayVariant { // uint8_t\n    Electromechanical = 0x1,\n    SolidState = 0x2,\n    Reed = 0x3,\n}\n\nexport enum RelayReg {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the relay circuit is currently energized (closed) or not.\n     *\n     * ```\n     * const [closed] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Closed = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of relay used.\n     *\n     * ```\n     * const [variant] = jdunpack<[RelayVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant mA uint32_t. Maximum switching current for a resistive load.\n     *\n     * ```\n     * const [maxSwitchingCurrent] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    MaxSwitchingCurrent = 0x180,\n}\n\nexport enum RelayEvent {\n    /**\n     * Emitted when relay goes from `inactive` to `active` state.\n     * Normally open (NO) relays close the circuit when activated.\n     */\n    Active = 0x1,\n\n    /**\n     * Emitted when relay goes from `active` to `inactive` state.\n     * Normally closed (NC) relays open the circuit when activated.\n     */\n    Inactive = 0x2,\n}\n\n// Service: Random Number Generator\nexport const SRV_RNG = 0x1789f0a2\n\nexport enum RngVariant { // uint8_t\n    Quantum = 0x1,\n    ADCNoise = 0x2,\n    WebCrypto = 0x3,\n}\n\nexport enum RngReg {\n    /**\n     * Read-only bytes. A register that returns a 64 bytes random buffer on every request.\n     * This never blocks for a long time. If you need additional random bytes, keep querying the register.\n     *\n     * ```\n     * const [random] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Random = 0x180,\n\n    /**\n     * Constant Variant (uint8_t). The type of algorithm/technique used to generate the number.\n     * `Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n     * `ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n     * `WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\n     *\n     * ```\n     * const [variant] = jdunpack<[RngVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Role Manager\nexport const SRV_ROLE_MANAGER = 0x1e4b7e66\nexport enum RoleManagerReg {\n    /**\n     * Read-write bool (uint8_t). Normally, if some roles are unfilled, and there are idle services that can fulfill them,\n     * the brain device will assign roles (bind) automatically.\n     * Such automatic assignment happens every second or so, and is trying to be smart about\n     * co-locating roles that share \"host\" (part before first slash),\n     * as well as reasonably stable assignments.\n     * Once user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.\n     *\n     * ```\n     * const [autoBind] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    AutoBind = 0x80,\n\n    /**\n     * Read-only bool (uint8_t). Indicates if all required roles have been allocated to devices.\n     *\n     * ```\n     * const [allRolesAllocated] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    AllRolesAllocated = 0x181,\n}\n\nexport enum RoleManagerCmd {\n    /**\n     * Get the role corresponding to given device identifer. Returns empty string if unset.\n     *\n     * ```\n     * const [deviceId, serviceIdx] = jdunpack<[Uint8Array, number]>(buf, \"b[8] u8\")\n     * ```\n     */\n    GetRole = 0x80,\n\n    /**\n     * report GetRole\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n\n    /**\n     * Set role. Can set to empty to remove role binding.\n     *\n     * ```\n     * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n     * ```\n     */\n    SetRole = 0x81,\n\n    /**\n     * No args. Remove all role bindings.\n     */\n    ClearAllRoles = 0x84,\n\n    /**\n     * Argument: stored_roles pipe (bytes). Return all roles stored internally.\n     *\n     * ```\n     * const [storedRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListStoredRoles = 0x82,\n\n    /**\n     * Argument: required_roles pipe (bytes). List all roles required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\n     *\n     * ```\n     * const [requiredRoles] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListRequiredRoles = 0x83,\n}\n\n\n/**\n * pipe_report StoredRoles\n * ```\n * const [deviceId, serviceIdx, role] = jdunpack<[Uint8Array, number, string]>(buf, \"b[8] u8 s\")\n * ```\n */\n\n/**\n * pipe_report RequiredRoles\n * ```\n * const [deviceId, serviceClass, serviceIdx, role] = jdunpack<[Uint8Array, number, number, string]>(buf, \"b[8] u32 u8 s\")\n * ```\n */\n\n\nexport enum RoleManagerEvent {\n    /**\n     * Notifies that role bindings have changed.\n     */\n    Change = 0x3,\n}\n\n// Service: Rotary encoder\nexport const SRV_ROTARY_ENCODER = 0x10fa29c9\nexport enum RotaryEncoderReg {\n    /**\n     * Read-only # int32_t. Upon device reset starts at `0` (regardless of the shaft position).\n     * Increases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.\n     *\n     * ```\n     * const [position] = jdunpack<[number]>(buf, \"i32\")\n     * ```\n     */\n    Position = 0x101,\n\n    /**\n     * Constant # uint16_t. This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.\n     *\n     * ```\n     * const [clicksPerTurn] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    ClicksPerTurn = 0x180,\n}\n\n// Service: Rover\nexport const SRV_ROVER = 0x19f4d06b\nexport enum RoverReg {\n    /**\n     * The current position and orientation of the robot.\n     *\n     * ```\n     * const [x, y, vx, vy, heading] = jdunpack<[number, number, number, number, number]>(buf, \"i16.16 i16.16 i16.16 i16.16 i16.16\")\n     * ```\n     */\n    Kinematics = 0x101,\n}\n\n// Service: Sensor Aggregator\nexport const SRV_SENSOR_AGGREGATOR = 0x1d90e1c5\n\nexport enum SensorAggregatorSampleType { // uint8_t\n    U8 = 0x8,\n    I8 = 0x88,\n    U16 = 0x10,\n    I16 = 0x90,\n    U32 = 0x20,\n    I32 = 0xa0,\n}\n\nexport enum SensorAggregatorReg {\n    /**\n     * Set automatic input collection.\n     * These settings are stored in flash.\n     *\n     * ```\n     * const [samplingInterval, samplesInWindow, rest] = jdunpack<[number, number, ([Uint8Array, number, number, number, SensorAggregatorSampleType, number])[]]>(buf, \"u16 u16 x[4] r: b[8] u32 u8 u8 u8 i8\")\n     * const [deviceId, serviceClass, serviceNum, sampleSize, sampleType, sampleShift] = rest[0]\n     * ```\n     */\n    Inputs = 0x80,\n\n    /**\n     * Read-only uint32_t. Number of input samples collected so far.\n     *\n     * ```\n     * const [numSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    NumSamples = 0x180,\n\n    /**\n     * Read-only B uint8_t. Size of a single sample.\n     *\n     * ```\n     * const [sampleSize] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    SampleSize = 0x181,\n\n    /**\n     * Read-write # uint32_t. When set to `N`, will stream `N` samples as `current_sample` reading.\n     *\n     * ```\n     * const [streamingSamples] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    StreamingSamples = 0x81,\n\n    /**\n     * Read-only bytes. Last collected sample.\n     *\n     * ```\n     * const [currentSample] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    CurrentSample = 0x101,\n}\n\n// Service: Servo\nexport const SRV_SERVO = 0x12fc9103\nexport enum ServoReg {\n    /**\n     * Read-write ° i16.16 (int32_t). Specifies the angle of the arm (request).\n     *\n     * ```\n     * const [angle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    Angle = 0x2,\n\n    /**\n     * Read-write bool (uint8_t). Turn the power to the servo on/off.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write ° i16.16 (int32_t). Correction applied to the angle to account for the servo arm drift.\n     *\n     * ```\n     * const [offset] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    Offset = 0x81,\n\n    /**\n     * Constant ° i16.16 (int32_t). Lowest angle that can be set.\n     *\n     * ```\n     * const [minAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    MinAngle = 0x110,\n\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to lowest angle.\n     *\n     * ```\n     * const [minPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MinPulse = 0x83,\n\n    /**\n     * Constant ° i16.16 (int32_t). Highest angle that can be set.\n     *\n     * ```\n     * const [maxAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    MaxAngle = 0x111,\n\n    /**\n     * Read-write μs uint16_t. The length of pulse corresponding to highest angle.\n     *\n     * ```\n     * const [maxPulse] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    MaxPulse = 0x85,\n\n    /**\n     * Constant kg/cm u16.16 (uint32_t). The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\n     *\n     * ```\n     * const [stallTorque] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    StallTorque = 0x180,\n\n    /**\n     * Constant s/60° u16.16 (uint32_t). Time to move 60°.\n     *\n     * ```\n     * const [responseSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ResponseSpeed = 0x181,\n\n    /**\n     * Read-only ° i16.16 (int32_t). The current physical position of the arm.\n     *\n     * ```\n     * const [currentAngle] = jdunpack<[number]>(buf, \"i16.16\")\n     * ```\n     */\n    CurrentAngle = 0x101,\n}\n\n// Service: Settings\nexport const SRV_SETTINGS = 0x1107dc4a\nexport enum SettingsCmd {\n    /**\n     * Argument: key string (bytes). Get the value of given setting. If no such entry exists, the value returned is empty.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Get = 0x80,\n\n    /**\n     * report Get\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n\n    /**\n     * Set the value of a given setting.\n     *\n     * ```\n     * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n     * ```\n     */\n    Set = 0x81,\n\n    /**\n     * Argument: key string (bytes). Delete a given setting.\n     *\n     * ```\n     * const [key] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Delete = 0x84,\n\n    /**\n     * Argument: results pipe (bytes). Return keys of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListKeys = 0x82,\n\n    /**\n     * Argument: results pipe (bytes). Return keys and values of all settings.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    List = 0x83,\n\n    /**\n     * No args. Clears all keys.\n     */\n    Clear = 0x85,\n}\n\n\n/**\n * pipe_report ListedKey\n * ```\n * const [key] = jdunpack<[string]>(buf, \"s\")\n * ```\n */\n\n/**\n * pipe_report ListedEntry\n * ```\n * const [key, value] = jdunpack<[string, Uint8Array]>(buf, \"z b\")\n * ```\n */\n\n\nexport enum SettingsEvent {\n    /**\n     * Notifies that some setting have been modified.\n     */\n    Change = 0x3,\n}\n\n// Service: 7-segment display\nexport const SRV_SEVEN_SEGMENT_DISPLAY = 0x196158f7\nexport enum SevenSegmentDisplayReg {\n    /**\n     * Read-write bytes. Each byte encodes the display status of a digit using,\n     * where bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\n     * If incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.\n     * Thus, sending an empty ``digits`` payload clears the screen.\n     *\n     * ```\n     * const [digits] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    Digits = 0x2,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). Controls the brightness of the LEDs. ``0`` means off.\n     *\n     * ```\n     * const [brightness] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Brightness = 0x1,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\n     * If the column LEDs is not supported, the value remains false.\n     *\n     * ```\n     * const [doubleDots] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DoubleDots = 0x80,\n\n    /**\n     * Constant uint8_t. The number of digits available on the display.\n     *\n     * ```\n     * const [digitCount] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DigitCount = 0x180,\n\n    /**\n     * Constant bool (uint8_t). True if decimal points are available (on all digits).\n     *\n     * ```\n     * const [decimalPoint] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    DecimalPoint = 0x181,\n}\n\nexport enum SevenSegmentDisplayCmd {\n    /**\n     * Argument: value f64 (uint64_t). Shows the number on the screen using the decimal dot if available.\n     */\n    SetNumber = 0x80,\n\n    /**\n     * Argument: text string (bytes). Shows the text on the screen. The client may decide to scroll the text if too long.\n     */\n    SetText = 0x81,\n}\n\n// Service: Soil moisture\nexport const SRV_SOIL_MOISTURE = 0x1d4aa3b3\n\nexport enum SoilMoistureVariant { // uint8_t\n    Resistive = 0x1,\n    Capacitive = 0x2,\n}\n\nexport enum SoilMoistureReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). Indicates the wetness of the soil, from ``dry`` to ``wet``.\n     *\n     * ```\n     * const [moisture] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Moisture = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Describe the type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[SoilMoistureVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Solenoid\nexport const SRV_SOLENOID = 0x171723ca\n\nexport enum SolenoidVariant { // uint8_t\n    PushPull = 0x1,\n    Valve = 0x2,\n    Latch = 0x3,\n}\n\nexport enum SolenoidReg {\n    /**\n     * Read-write bool (uint8_t). Indicates whether the solenoid is energized and pulled (on) or pushed (off).\n     *\n     * ```\n     * const [pulled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Pulled = 0x1,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of solenoid used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SolenoidVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Sound level\nexport const SRV_SOUND_LEVEL = 0x14ad1a5d\nexport enum SoundLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The sound level detected by the microphone\n     *\n     * ```\n     * const [soundLevel] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    SoundLevel = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turn on or off the microphone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write dB int16_t. The minimum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MinDecibels = 0x81,\n\n    /**\n     * Read-write dB int16_t. The maximum power value considered by the sensor.\n     * If both ``min_decibels`` and ``max_decibels`` are supported,\n     * the volume in deciment can be linearly interpolated between\n     * ``[min_decibels, max_decibels]``.\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MaxDecibels = 0x82,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a loud event.\n     *\n     * ```\n     * const [loudThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    LoudThreshold = 0x6,\n\n    /**\n     * Read-write ratio u0.16 (uint16_t). The sound level to trigger a quiet event.\n     *\n     * ```\n     * const [quietThreshold] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    QuietThreshold = 0x5,\n}\n\nexport enum SoundLevelEvent {\n    /**\n     * Raised when a loud sound is detected\n     */\n    Loud = 0x1,\n\n    /**\n     * Raised when a period of quietness is detected\n     */\n    Quiet = 0x2,\n}\n\n// Service: Sound player\nexport const SRV_SOUND_PLAYER = 0x1403d338\nexport enum SoundPlayerReg {\n    /**\n     * Read-write ratio u0.16 (uint16_t). Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Volume = 0x1,\n}\n\nexport enum SoundPlayerCmd {\n    /**\n     * Argument: name string (bytes). Starts playing a sound.\n     *\n     * ```\n     * const [name] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Play = 0x80,\n\n    /**\n     * Argument: sounds_port pipe (bytes). Returns the list of sounds available to play.\n     *\n     * ```\n     * const [soundsPort] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListSounds = 0x81,\n}\n\n\n/**\n * pipe_report ListSoundsPipe\n * ```\n * const [duration, name] = jdunpack<[number, string]>(buf, \"u32 s\")\n * ```\n */\n\n\n// Service: Sound Spectrum\nexport const SRV_SOUND_SPECTRUM = 0x157abc1e\nexport enum SoundSpectrumReg {\n    /**\n     * Read-only bytes. The computed frequency data.\n     *\n     * ```\n     * const [frequencyBins] = jdunpack<[Uint8Array]>(buf, \"b\")\n     * ```\n     */\n    FrequencyBins = 0x101,\n\n    /**\n     * Read-write bool (uint8_t). Turns on/off the micropohone.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write uint8_t. The power of 2 used as the size of the FFT to be used to determine the frequency domain.\n     *\n     * ```\n     * const [fftPow2Size] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    FftPow2Size = 0x80,\n\n    /**\n     * Read-write dB int16_t. The minimum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [minDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MinDecibels = 0x81,\n\n    /**\n     * Read-write dB int16_t. The maximum power value in the scaling range for the FFT analysis data\n     *\n     * ```\n     * const [maxDecibels] = jdunpack<[number]>(buf, \"i16\")\n     * ```\n     */\n    MaxDecibels = 0x82,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). The averaging constant with the last analysis frame.\n     * If ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".\n     *\n     * ```\n     * const [smoothingTimeConstant] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    SmoothingTimeConstant = 0x83,\n}\n\n// Service: Speech synthesis\nexport const SRV_SPEECH_SYNTHESIS = 0x1204d995\nexport enum SpeechSynthesisReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the speech engine is in a non-paused state.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-write string (bytes). Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\n     *\n     * ```\n     * const [lang] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Lang = 0x80,\n\n    /**\n     * Read-write ratio u0.8 (uint8_t). Volume for utterances.\n     *\n     * ```\n     * const [volume] = jdunpack<[number]>(buf, \"u0.8\")\n     * ```\n     */\n    Volume = 0x81,\n\n    /**\n     * Read-write u16.16 (uint32_t). Pitch for utterances\n     *\n     * ```\n     * const [pitch] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Pitch = 0x82,\n\n    /**\n     * Read-write u16.16 (uint32_t). Rate for utterances\n     *\n     * ```\n     * const [rate] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Rate = 0x83,\n}\n\nexport enum SpeechSynthesisCmd {\n    /**\n     * Argument: text string (bytes). Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n     *\n     * ```\n     * const [text] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    Speak = 0x80,\n\n    /**\n     * No args. Cancels current utterance and all utterances from the utterance queue.\n     */\n    Cancel = 0x81,\n}\n\n// Service: Switch\nexport const SRV_SWITCH = 0x1ad29402\n\nexport enum SwitchVariant { // uint8_t\n    Slide = 0x1,\n    Tilt = 0x2,\n    PushButton = 0x3,\n    Tactile = 0x4,\n    Toggle = 0x5,\n    Proximity = 0x6,\n    Magnetic = 0x7,\n    FootPedal = 0x8,\n}\n\nexport enum SwitchReg {\n    /**\n     * Read-only bool (uint8_t). Indicates whether the switch is currently active (on).\n     *\n     * ```\n     * const [active] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Active = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). Describes the type of switch used.\n     *\n     * ```\n     * const [variant] = jdunpack<[SwitchVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n\n    /**\n     * Constant s u16.16 (uint32_t). Specifies the delay without activity to automatically turn off after turning on.\n     * For example, some light switches in staircases have such a capability.\n     *\n     * ```\n     * const [autoOffDelay] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    AutoOffDelay = 0x180,\n}\n\nexport enum SwitchEvent {\n    /**\n     * Emitted when switch goes from ``off`` to ``on``.\n     */\n    On = 0x1,\n\n    /**\n     * Emitted when switch goes from ``on`` to ``off``.\n     */\n    Off = 0x2,\n}\n\n// Service: TCP\nexport const SRV_TCP = 0x1b43b70b\n\nexport enum TcpTcpError { // int32_t\n    InvalidCommand = 0x1,\n    InvalidCommandPayload = 0x2,\n}\n\nexport enum TcpCmd {\n    /**\n     * Argument: inbound pipe (bytes). Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\n     *\n     * ```\n     * const [inbound] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    Open = 0x80,\n\n    /**\n     * report Open\n     * ```\n     * const [outboundPort] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n}\n\nexport enum TcpPipeCmd {\n    /**\n     * Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\n     * After the connection is established, an empty data report is sent.\n     * Connection is closed by closing the pipe.\n     *\n     * ```\n     * const [tcpPort, hostname] = jdunpack<[number, string]>(buf, \"u16 s\")\n     * ```\n     */\n    OpenSsl = 0x1,\n\n    /**\n     * Argument: error TcpError (int32_t). Reported when an error is encountered. Negative error codes come directly from the SSL implementation.\n     *\n     * ```\n     * const [error] = jdunpack<[TcpTcpError]>(buf, \"i32\")\n     * ```\n     */\n    Error = 0x0,\n}\n\n\n/**\n * pipe_command Outdata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n\n/**\n * pipe_report Indata\n * ```\n * const [data] = jdunpack<[Uint8Array]>(buf, \"b\")\n * ```\n */\n\n\n// Service: Thermocouple\nexport const SRV_THERMOCOUPLE = 0x143ac061\n\nexport enum ThermocoupleVariant { // uint8_t\n    TypeK = 0x1,\n    TypeJ = 0x2,\n    TypeT = 0x3,\n    TypeE = 0x4,\n    TypeN = 0x5,\n    TypeS = 0x6,\n    TypeR = 0x7,\n    TypeB = 0x8,\n}\n\nexport enum ThermocoupleReg {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    Temperature = 0x101,\n\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MinTemperature = 0x104,\n\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MaxTemperature = 0x105,\n\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TemperatureError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermocoupleVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Thermometer\nexport const SRV_THERMOMETER = 0x1421bac7\n\nexport enum ThermometerVariant { // uint8_t\n    Outdoor = 0x1,\n    Indoor = 0x2,\n    Body = 0x3,\n}\n\nexport enum ThermometerReg {\n    /**\n     * Read-only °C i22.10 (int32_t). The temperature.\n     *\n     * ```\n     * const [temperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    Temperature = 0x101,\n\n    /**\n     * Constant °C i22.10 (int32_t). Lowest temperature that can be reported.\n     *\n     * ```\n     * const [minTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MinTemperature = 0x104,\n\n    /**\n     * Constant °C i22.10 (int32_t). Highest temperature that can be reported.\n     *\n     * ```\n     * const [maxTemperature] = jdunpack<[number]>(buf, \"i22.10\")\n     * ```\n     */\n    MaxTemperature = 0x105,\n\n    /**\n     * Read-only °C u22.10 (uint32_t). The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\n     *\n     * ```\n     * const [temperatureError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TemperatureError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). Specifies the type of thermometer.\n     *\n     * ```\n     * const [variant] = jdunpack<[ThermometerVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Traffic Light\nexport const SRV_TRAFFIC_LIGHT = 0x15c38d9b\nexport enum TrafficLightReg {\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [red] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Red = 0x80,\n\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [orange] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Orange = 0x81,\n\n    /**\n     * Read-write bool (uint8_t). The on/off state of the red light.\n     *\n     * ```\n     * const [green] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Green = 0x82,\n}\n\n// Service: Total Volatile organic compound\nexport const SRV_TVOC = 0x12a5b597\nexport enum TvocReg {\n    /**\n     * Read-only ppb u22.10 (uint32_t). Total volatile organic compound readings in parts per billion.\n     *\n     * ```\n     * const [tVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TVOC = 0x101,\n\n    /**\n     * Read-only ppb u22.10 (uint32_t). Error on the reading data\n     *\n     * ```\n     * const [tVOCError] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    TVOCError = 0x106,\n\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [minTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MinTVOC = 0x104,\n\n    /**\n     * Constant ppb u22.10 (uint32_t). Minimum measurable value\n     *\n     * ```\n     * const [maxTVOC] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    MaxTVOC = 0x105,\n\n    /**\n     * Constant s uint32_t. Time required to achieve good sensor stability before measuring after long idle period.\n     *\n     * ```\n     * const [conditioningPeriod] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    ConditioningPeriod = 0x180,\n}\n\n// Service: UV index\nexport const SRV_UV_INDEX = 0x1f6e0d90\n\nexport enum UvIndexVariant { // uint8_t\n    UVA_UVB = 0x1,\n    Visible_IR = 0x2,\n}\n\nexport enum UvIndexReg {\n    /**\n     * Read-only uv u16.16 (uint32_t). Ultraviolet index, typically refreshed every second.\n     *\n     * ```\n     * const [uvIndex] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndex = 0x101,\n\n    /**\n     * Read-only uv u16.16 (uint32_t). Error on the UV measure.\n     *\n     * ```\n     * const [uvIndexError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    UvIndexError = 0x106,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor and capabilities.\n     *\n     * ```\n     * const [variant] = jdunpack<[UvIndexVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Verified Telemetry\nexport const SRV_VERIFIED_TELEMETRY = 0x2194841f\n\nexport enum VerifiedTelemetryStatus { // uint8_t\n    Unknown = 0x0,\n    Working = 0x1,\n    Faulty = 0x2,\n}\n\n\nexport enum VerifiedTelemetryFingerprintType { // uint8_t\n    FallCurve = 0x1,\n    CurrentSense = 0x2,\n    Custom = 0x3,\n}\n\nexport enum VerifiedTelemetryReg {\n    /**\n     * Read-only Status (uint8_t). Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    TelemetryStatus = 0x180,\n\n    /**\n     * Read-write ms uint32_t. Specifies the interval between computing the fingerprint information.\n     *\n     * ```\n     * const [telemetryStatusInterval] = jdunpack<[number]>(buf, \"u32\")\n     * ```\n     */\n    TelemetryStatusInterval = 0x80,\n\n    /**\n     * Constant FingerprintType (uint8_t). Type of the fingerprint.\n     *\n     * ```\n     * const [fingerprintType] = jdunpack<[VerifiedTelemetryFingerprintType]>(buf, \"u8\")\n     * ```\n     */\n    FingerprintType = 0x181,\n\n    /**\n     * Template Fingerprint information of a working sensor.\n     *\n     * ```\n     * const [confidence, template] = jdunpack<[number, Uint8Array]>(buf, \"u16 b\")\n     * ```\n     */\n    FingerprintTemplate = 0x182,\n}\n\nexport enum VerifiedTelemetryCmd {\n    /**\n     * No args. This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.\n     */\n    ResetFingerprintTemplate = 0x80,\n\n    /**\n     * No args. This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.\n     */\n    RetrainFingerprintTemplate = 0x81,\n}\n\nexport enum VerifiedTelemetryEvent {\n    /**\n     * Argument: telemetry_status Status (uint8_t). The telemetry status of the device was updated.\n     *\n     * ```\n     * const [telemetryStatus] = jdunpack<[VerifiedTelemetryStatus]>(buf, \"u8\")\n     * ```\n     */\n    TelemetryStatusChange = 0x3,\n\n    /**\n     * The fingerprint template was updated\n     */\n    FingerprintTemplateChange = 0x80,\n}\n\n// Service: Vibration motor\nexport const SRV_VIBRATION_MOTOR = 0x183fc4a2\nexport enum VibrationMotorReg {\n    /**\n     * Read-write bool (uint8_t). Determines if the vibration motor responds to vibrate commands.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n}\n\nexport enum VibrationMotorCmd {\n    /**\n     * Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\n     *\n     * ```\n     * const [rest] = jdunpack<[([number, number])[]]>(buf, \"r: u8 u0.8\")\n     * const [duration, speed] = rest[0]\n     * ```\n     */\n    Vibrate = 0x80,\n}\n\n// Service: Water level\nexport const SRV_WATER_LEVEL = 0x147b62ed\n\nexport enum WaterLevelVariant { // uint8_t\n    Resistive = 0x1,\n    ContactPhotoElectric = 0x2,\n    NonContactPhotoElectric = 0x3,\n}\n\nexport enum WaterLevelReg {\n    /**\n     * Read-only ratio u0.16 (uint16_t). The reported water level.\n     *\n     * ```\n     * const [level] = jdunpack<[number]>(buf, \"u0.16\")\n     * ```\n     */\n    Level = 0x101,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical sensor.\n     *\n     * ```\n     * const [variant] = jdunpack<[WaterLevelVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\n// Service: Weight Scale\nexport const SRV_WEIGHT_SCALE = 0x1f4d5040\n\nexport enum WeightScaleVariant { // uint8_t\n    Body = 0x1,\n    Food = 0x2,\n    Jewelry = 0x3,\n}\n\nexport enum WeightScaleReg {\n    /**\n     * Read-only kg u16.16 (uint32_t). The reported weight.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Weight = 0x101,\n\n    /**\n     * Read-only kg u16.16 (uint32_t). The estimate error on the reported reading.\n     *\n     * ```\n     * const [weightError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightError = 0x106,\n\n    /**\n     * Read-write kg u16.16 (uint32_t). Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\n     * You do not need to subtract that from the reading, it has already been done.\n     *\n     * ```\n     * const [zeroOffset] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    ZeroOffset = 0x80,\n\n    /**\n     * Read-write u16.16 (uint32_t). Calibrated gain on the weight scale error.\n     *\n     * ```\n     * const [gain] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    Gain = 0x81,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Maximum supported weight on the scale.\n     *\n     * ```\n     * const [maxWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxWeight = 0x105,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Minimum recommend weight on the scale.\n     *\n     * ```\n     * const [minWeight] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MinWeight = 0x104,\n\n    /**\n     * Constant kg u16.16 (uint32_t). Smallest, yet distinguishable change in reading.\n     *\n     * ```\n     * const [weightResolution] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WeightResolution = 0x108,\n\n    /**\n     * Constant Variant (uint8_t). The type of physical scale\n     *\n     * ```\n     * const [variant] = jdunpack<[WeightScaleVariant]>(buf, \"u8\")\n     * ```\n     */\n    Variant = 0x107,\n}\n\nexport enum WeightScaleCmd {\n    /**\n     * No args. Call this command when there is nothing on the scale. If supported, the module should save the calibration data.\n     */\n    CalibrateZeroOffset = 0x80,\n\n    /**\n     * Argument: weight g u22.10 (uint32_t). Call this command with the weight of the thing on the scale.\n     *\n     * ```\n     * const [weight] = jdunpack<[number]>(buf, \"u22.10\")\n     * ```\n     */\n    CalibrateGain = 0x81,\n}\n\n// Service: WIFI\nexport const SRV_WIFI = 0x18aae1fa\n\nexport enum WifiAPFlags { // uint32_t\n    HasPassword = 0x1,\n    WPS = 0x2,\n    HasSecondaryChannelAbove = 0x4,\n    HasSecondaryChannelBelow = 0x8,\n    IEEE_802_11B = 0x100,\n    IEEE_802_11A = 0x200,\n    IEEE_802_11G = 0x400,\n    IEEE_802_11N = 0x800,\n    IEEE_802_11AC = 0x1000,\n    IEEE_802_11AX = 0x2000,\n    IEEE_802_LongRange = 0x8000,\n}\n\nexport enum WifiCmd {\n    /**\n     * Argument: results pipe (bytes). Return list of WiFi network from the last scan.\n     * Scans are performed periodically while not connected (in particular, on startup and after current connection drops),\n     * as well as upon `reconnect` and `scan` commands.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    LastScanResults = 0x80,\n\n    /**\n     * Automatically connect to named network if available. Also set password if network is not open.\n     *\n     * ```\n     * const [ssid, password] = jdunpack<[string, string]>(buf, \"z z\")\n     * ```\n     */\n    AddNetwork = 0x81,\n\n    /**\n     * No args. Initiate a scan, wait for results, disconnect from current WiFi network if any,\n     * and then reconnect (using regular algorithm, see `set_network_priority`).\n     */\n    Reconnect = 0x82,\n\n    /**\n     * Argument: ssid string (bytes). Prevent from automatically connecting to named network in future.\n     * Forgetting a network resets its priority to `0`.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s\")\n     * ```\n     */\n    ForgetNetwork = 0x83,\n\n    /**\n     * No args. Clear the list of known networks.\n     */\n    ForgetAllNetworks = 0x84,\n\n    /**\n     * Set connection priority for a network.\n     * By default, all known networks have priority of `0`.\n     *\n     * ```\n     * const [priority, ssid] = jdunpack<[number, string]>(buf, \"i16 s\")\n     * ```\n     */\n    SetNetworkPriority = 0x85,\n\n    /**\n     * No args. Initiate search for WiFi networks. Generates `scan_complete` event.\n     */\n    Scan = 0x86,\n\n    /**\n     * Argument: results pipe (bytes). Return list of known WiFi networks.\n     * `flags` is currently always 0.\n     *\n     * ```\n     * const [results] = jdunpack<[Uint8Array]>(buf, \"b[12]\")\n     * ```\n     */\n    ListKnownNetworks = 0x87,\n}\n\n\n/**\n * pipe_report Results\n * ```\n * const [flags, rssi, channel, bssid, ssid] = jdunpack<[WifiAPFlags, number, number, Uint8Array, string]>(buf, \"u32 x[4] i8 u8 b[6] s[33]\")\n * ```\n */\n\n/**\n * pipe_report NetworkResults\n * ```\n * const [priority, flags, ssid] = jdunpack<[number, number, string]>(buf, \"i16 i16 s\")\n * ```\n */\n\n\nexport enum WifiReg {\n    /**\n     * Read-write bool (uint8_t). Determines whether the WiFi radio is enabled. It starts enabled upon reset.\n     *\n     * ```\n     * const [enabled] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Enabled = 0x1,\n\n    /**\n     * Read-only bool (uint8_t). Indicates whether or not we currently have an IP address assigned.\n     *\n     * ```\n     * const [connected] = jdunpack<[number]>(buf, \"u8\")\n     * ```\n     */\n    Connected = 0x180,\n\n    /**\n     * Read-only bytes. 0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\n     *\n     * ```\n     * const [ipAddress] = jdunpack<[Uint8Array]>(buf, \"b[16]\")\n     * ```\n     */\n    IpAddress = 0x181,\n\n    /**\n     * Constant bytes. The 6-byte MAC address of the device. If a device does MAC address randomization it will have to \"restart\".\n     *\n     * ```\n     * const [eui48] = jdunpack<[Uint8Array]>(buf, \"b[6]\")\n     * ```\n     */\n    Eui48 = 0x182,\n\n    /**\n     * Read-only string (bytes). SSID of the access-point to which device is currently connected.\n     * Empty string if not connected.\n     *\n     * ```\n     * const [ssid] = jdunpack<[string]>(buf, \"s[32]\")\n     * ```\n     */\n    Ssid = 0x183,\n\n    /**\n     * Read-only dB int8_t. Current signal strength. Returns -128 when not connected.\n     *\n     * ```\n     * const [rssi] = jdunpack<[number]>(buf, \"i8\")\n     * ```\n     */\n    Rssi = 0x184,\n}\n\nexport enum WifiEvent {\n    /**\n     * Emitted upon successful join and IP address assignment.\n     */\n    GotIp = 0x1,\n\n    /**\n     * Emitted when disconnected from network.\n     */\n    LostIp = 0x2,\n\n    /**\n     * A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\n     * The event indicates how many networks where found, and how many are considered\n     * as candidates for connection.\n     *\n     * ```\n     * const [numNetworks, numKnownNetworks] = jdunpack<[number, number]>(buf, \"u16 u16\")\n     * ```\n     */\n    ScanComplete = 0x80,\n\n    /**\n     * Emitted whenever the list of known networks is updated.\n     */\n    NetworksChanged = 0x81,\n}\n\n// Service: Wind direction\nexport const SRV_WIND_DIRECTION = 0x186be92b\nexport enum WindDirectionReg {\n    /**\n     * Read-only ° uint16_t. The direction of the wind.\n     *\n     * ```\n     * const [windDirection] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirection = 0x101,\n\n    /**\n     * Read-only ° uint16_t. Error on the wind direction reading\n     *\n     * ```\n     * const [windDirectionError] = jdunpack<[number]>(buf, \"u16\")\n     * ```\n     */\n    WindDirectionError = 0x106,\n}\n\n// Service: Wind speed\nexport const SRV_WIND_SPEED = 0x1b591bbf\nexport enum WindSpeedReg {\n    /**\n     * Read-only m/s u16.16 (uint32_t). The velocity of the wind.\n     *\n     * ```\n     * const [windSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeed = 0x101,\n\n    /**\n     * Read-only m/s u16.16 (uint32_t). Error on the reading\n     *\n     * ```\n     * const [windSpeedError] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    WindSpeedError = 0x106,\n\n    /**\n     * Constant m/s u16.16 (uint32_t). Maximum speed that can be measured by the sensor.\n     *\n     * ```\n     * const [maxWindSpeed] = jdunpack<[number]>(buf, \"u16.16\")\n     * ```\n     */\n    MaxWindSpeed = 0x105,\n}\n\n","export function isMixinService(serviceClass: number) {\n    return (serviceClass & 0x2000_0000) === 0x2000_0000\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\nexport function packetsToRegisters(packets: jdspec.PacketInfo[]) {\n    return packets.filter(pkt => !pkt.derived && isRegister(pkt))\n}\n\nexport function parseIntFloat(\n    spec: jdspec.ServiceSpec,\n    w: string,\n    allowFloat = false\n): number {\n    if (/^-?0x[a-f\\d_]+$/i.test(w) || /^-?[\\d_]+$/.test(w)) {\n        const v = parseInt(w.replace(/_/g, \"\")) // allow for 0x3fff_ffff syntax\n        if (isNaN(v)) throw new Error(\"can't parse int: \" + w)\n        return v\n    }\n\n    if (allowFloat && /^-?\\d*(\\.\\d*)?(e(-?)\\d+)?$/.test(w)) {\n        const v = parseFloat(w)\n        if (isNaN(v)) throw new Error(\"can't parse float: \" + w)\n        return v\n    }\n\n    const ww = w.split(/\\./)\n    if (ww.length != 2) {\n        throw new Error(`expecting int or enum member here`)\n    }\n    const en = spec.enums[ww[0]]\n    if (!en) {\n        throw new Error(`${ww[0]} is not an enum type`)\n    }\n    // eslint-disable-next-line no-prototype-builtins\n    if (!en.members.hasOwnProperty(ww[1]))\n        throw new Error(`${ww[1]} is not a member of ${ww[0]}`)\n    return en.members[ww[1]] || 0\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"jdspec.d.ts\" />\nimport { parseIntFloat } from \"./jdutils\"\n\nexport const DEVICE_IMAGE_WIDTH = 1024\nexport const DEVICE_IMAGE_HEIGHT = 768\n\n// modified subset of SenML\nexport const unitDescription: jdspec.SMap<string> = {\n    \"°\": \"angle\",\n    \"°/s\": \"rotation rate\",\n    \"°/s2\": \"rotation acceleration\",\n    m: \"meter\",\n    kg: \"kilogram\",\n    s: \"second\",\n    A: \"ampere\",\n    K: \"kelvin\",\n    cd: \"candela\",\n    mol: \"mole\",\n    Hz: \"hertz\",\n    rad: \"radian\",\n    sr: \"steradian\",\n    N: \"newton\",\n    Pa: \"pascal\",\n    J: \"joule\",\n    W: \"watt\",\n    C: \"coulomb\",\n    V: \"volt\",\n    F: \"farad\",\n    Ohm: \"ohm\",\n    S: \"siemens\",\n    Wb: \"weber\",\n    T: \"tesla\",\n    H: \"henry\",\n    \"°C\": \"degrees Celsius\",\n    lm: \"lumen\",\n    lx: \"lux\",\n    Bq: \"becquerel\",\n    Gy: \"gray\",\n    Sv: \"sievert\",\n    kat: \"katal\",\n    m2: \"square meter (area)\",\n    m3: \"cubic meter (volume)\",\n    \"m/s\": \"meter per second (velocity)\",\n    \"m/s2\": \"meter per square second (acceleration)\",\n    \"m3/s\": \"cubic meter per second (flow rate)\",\n    \"W/m2\": \"watt per square meter (irradiance)\",\n    \"cd/m2\": \"candela per square meter (luminance)\",\n    bit: \"bit (information content)\",\n    \"bit/s\": \"bit per second (data rate)\",\n    lat: \"degrees latitude\",\n    lon: \"degrees longitude\",\n    pH: \"pH value (acidity; logarithmic quantity)\",\n    dB: \"decibel (logarithmic quantity)\",\n    dBW: \"decibel relative to 1 W (power level)\",\n    count: \"1 (counter value)\",\n    \"/\": \"1 (ratio e.g., value of a switch)\",\n    \"%RH\": \"Percentage (Relative Humidity)\",\n    \"%EL\": \"Percentage (remaining battery energy level)\",\n    EL: \"seconds (remaining battery energy level)\",\n    \"1/s\": \"1 per second (event rate)\",\n    \"S/m\": \"Siemens per meter (conductivity)\",\n    B: \"Byte (information content)\",\n    VA: \"volt-ampere (Apparent Power)\",\n    VAs: \"volt-ampere second (Apparent Energy)\",\n    var: \"volt-ampere reactive (Reactive Power)\",\n    vars: \"volt-ampere-reactive second (Reactive Energy)\",\n    \"J/m\": \"joule per meter (Energy per distance)\",\n    \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n    \"s/60°\": \"servo speed (time to travel 60°)\",\n    \"kg/cm\": \"torque\",\n    hsv: \"bit HSV color\",\n    rgb: \"RGB color\",\n    rpm: \"revolutions per minute\",\n    uv: \"UV index\",\n    lux: \"illuminance\",\n    bpm: \"beats per minute\",\n    mcd: \"micro candella\",\n    px: \"pixel\",\n}\n\nexport const secondaryUnitConverters: jdspec.SMap<{\n    name: string\n    unit: senml.Unit | \"#\"\n    scale: number\n    offset: number\n}> = {\n    ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1000, offset: 0 },\n    min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n    h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n    MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1000000, offset: 0 },\n    kW: { name: \"kilowatt\", unit: \"W\", scale: 1000, offset: 0 },\n    kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1000, offset: 0 },\n    kvar: { name: \"kilovar\", unit: \"var\", scale: 1000, offset: 0 },\n    Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n    Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n    kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 3600000, offset: 0 },\n    varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n    kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 3600000, offset: 0 },\n    kVAh: {\n        name: \"kilovolt-ampere-hour\",\n        unit: \"VAs\",\n        scale: 3600000,\n        offset: 0,\n    },\n    \"Wh/km\": {\n        name: \"watt-hour per kilometer\",\n        unit: \"J/m\",\n        scale: 3.6,\n        offset: 0,\n    },\n    KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n    GB: { name: \"gigabyte\", unit: \"B\", scale: 1.0e9, offset: 0 },\n    \"Mbit/s\": {\n        name: \"megabit per second\",\n        unit: \"bit/s\",\n        scale: 1000000,\n        offset: 0,\n    },\n    \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n    \"MB/s\": {\n        name: \"megabyte per second\",\n        unit: \"bit/s\",\n        scale: 8000000,\n        offset: 0,\n    },\n    mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1000, offset: 0 },\n    mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1000, offset: 0 },\n    dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n    \"ug/m3\": {\n        name: \"microgram per cubic meter\",\n        unit: \"kg/m3\",\n        scale: 1.0e-9,\n        offset: 0,\n    },\n    \"mm/h\": {\n        name: \"millimeter per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3600000,\n        offset: 0,\n    },\n    \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n    \"cm/s\": {\n        name: \"centimeter per seconds\",\n        unit: \"m/s\",\n        scale: 1 / 100,\n        offset: 0,\n    },\n    ppm: { name: \"parts per million\", unit: \"/\", scale: 1.0e-6, offset: 0 },\n    ppb: { name: \"parts per billion\", unit: \"/\", scale: 1.0e-9, offset: 0 },\n    \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1000, offset: 0 },\n    hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n    mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1000, offset: 0 },\n    cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n    km: { name: \"kilometer\", unit: \"m\", scale: 1000, offset: 0 },\n    \"km/h\": {\n        name: \"kilometer per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3.6,\n        offset: 0,\n    },\n    \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1000, offset: 0 },\n    nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n    nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n\n    // compat with previous Jacdac versions\n    frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n    us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n    mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 3.6e-3, offset: 0 },\n    g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n    \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 },\n}\n\nexport const encodings: jdspec.SMap<jdspec.Encoding> = {\n    json: \"JSON\",\n    bitset: \"bitset\",\n}\n\nexport function resolveUnit(unit: string) {\n    if (!unit) return { name: \"\", scale: 1, offset: 1 } // indentifier\n\n    // seconary unit?\n    const su = secondaryUnitConverters[unit]\n    if (su) return su\n\n    const name = unitDescription[unit]\n    if (name) return { name, unit, scale: 1, offset: 0 }\n\n    return undefined\n}\n\nexport function units(): { name: string; description: string }[] {\n    const r: { name: string; description: string }[] = []\n    Object.keys(unitDescription).forEach(k => {\n        r.push({ name: k, description: unitDescription[k] })\n        Object.keys(secondaryUnitConverters)\n            .filter(scd => secondaryUnitConverters[scd].unit === k)\n            .forEach(scd =>\n                r.push({\n                    name: scd,\n                    description: secondaryUnitConverters[scd].name,\n                })\n            )\n    })\n    r.sort((l, r) => l.name.localeCompare(r.name))\n    return r\n}\n\n/* check ranges, see system.md\nRegisters `0x001-0x07f` - r/w common to all services\nRegisters `0x080-0x0ff` - r/w defined per-service\nRegisters `0x100-0x17f` - r/o common to all services\nRegisters `0x180-0x1ff` - r/o defined per-service\nRegisters `0x200-0xeff` - custom, defined per-service\nRegisters `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n*/\nconst identifierRanges: { [index: string]: [number, number][] } = {\n    rw: [\n        [0x001, 0x07f],\n        [0x080, 0x0ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    ro: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    const: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    command: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    report: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    event: [\n        [0x00, 0x7f], // system\n        [0x80, 0xff],\n    ],\n}\n\nexport function parseServiceSpecificationMarkdownToJSON(\n    filecontent: string,\n    includes?: jdspec.SMap<jdspec.ServiceSpec>,\n    filename = \"\"\n): jdspec.ServiceSpec {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdspec.ServiceSpec = {\n        name: \"\",\n        status: \"experimental\",\n        shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n        camelName: \"\",\n        shortName: \"\",\n        extends: [],\n        notes: {},\n        classIdentifier: 0,\n        enums: {},\n        constants: {},\n        packets: [],\n        tags: [],\n    }\n\n    let backticksType = \"\"\n    let enumInfo: jdspec.EnumInfo = null\n    let packetInfo: jdspec.PacketInfo = null\n    let pipePacket: jdspec.PacketInfo = null\n    let errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let noteId = \"short\"\n    let lastCmd: jdspec.PacketInfo\n    let packetsToDescribe: jdspec.PacketInfo[]\n    let nextModifier: \"\" | \"segmented\" | \"multi-segmented\" | \"repeats\" = \"\"\n\n    const systemInfo = includes?.[\"_system\"]\n    const usedIds: jdspec.SMap<string> = {}\n    for (const prev of values(includes || {})) {\n        if (prev.classIdentifier) usedIds[prev.classIdentifier + \"\"] = prev.name\n    }\n\n    try {\n        if (includes[\"_system\"] && includes[\"_base\"]) processInclude(\"_base\")\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (errors.length) info.errors = errors\n\n    for (const k of Object.keys(info.notes))\n        info.notes[k] = normalizeMD(info.notes[k])\n    for (const v of info.packets) v.description = normalizeMD(v.description)\n\n    if (!info.camelName)\n        info.camelName = camelize(\n            info.name\n                .replace(/\\s+/g, \" \")\n                .replace(/[ -](.)/g, (f, l) => l.toUpperCase())\n                .replace(/[^\\w]+/g, \"_\")\n        )\n    if (!info.shortName) info.shortName = info.camelName\n\n    if (info.camelName == \"system\") info.classIdentifier = 0x1fff_fff1\n    else if (info.camelName == \"base\") info.classIdentifier = 0x1fff_fff3\n    else if (info.camelName == \"sensor\") info.classIdentifier = 0x1fff_fff2\n\n    if (info.shortName != \"control\" && !info.classIdentifier)\n        error(\"identifier: not specified\")\n\n    info.packets.forEach(pkt => (pkt.packFormat = packFormat(info, pkt)))\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || line.slice(0, 4) == \"    \"\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                const [, hd, cont] = m\n                packetsToDescribe = null\n                const newNoteId = cont.trim().toLowerCase()\n                if (hd == \"#\" && !info.name) {\n                    info.name = cont.trim()\n                    line = \"\"\n                } else if (\n                    newNoteId == \"registers\" ||\n                    newNoteId == \"commands\" ||\n                    newNoteId == \"events\" ||\n                    newNoteId == \"examples\"\n                ) {\n                    noteId = newNoteId\n                    line = \"\"\n                } else {\n                    if (noteId == \"short\") noteId = \"long\"\n                    // keep line\n                }\n            }\n\n            if (packetsToDescribe) {\n                for (const iface of packetsToDescribe)\n                    iface.description += line + \"\\n\"\n            } else {\n                if (line || info.notes[noteId]) {\n                    if (!info.notes[noteId]) info.notes[noteId] = \"\"\n                    info.notes[noteId] += line + \"\\n\"\n                }\n            }\n        } else {\n            if (packetsToDescribe && packetsToDescribe[0].description)\n                packetsToDescribe = null\n            const expanded = line\n                .replace(/\\/\\/.*/, \"\")\n                .replace(/[?@:=,{};]/g, s => \" \" + s + \" \")\n                .trim()\n            if (!expanded) return\n            const words = expanded.split(/\\s+/)\n            if (/^[;,]/.test(words[words.length - 1])) words.pop()\n            let cmd = words[0]\n            // allow for `command = Foo.Bar` etc (ie. command is not a keyword there)\n            if (words[1] == \":\" || words[1] == \"=\") cmd = \":\"\n            switch (cmd) {\n                case \"enum\":\n                case \"flags\":\n                    startEnum(words)\n                    break\n                case \"define\":\n                    constant(words)\n                    break\n                case \"meta\":\n                case \"pipe\":\n                case \"report\":\n                case \"command\":\n                case \"const\":\n                case \"ro\":\n                case \"rw\":\n                case \"event\":\n                case \"client\":\n                case \"volatile\":\n                case \"lowlevel\":\n                case \"restricted\":\n                    startPacket(words)\n                    break\n                case \"}\":\n                    if (packetInfo) {\n                        finishPacket()\n                    } else if (enumInfo) {\n                        enumInfo = null\n                    } else {\n                        error(\"nothing to end here\")\n                    }\n                    break\n                default:\n                    if (packetInfo) packetField(words)\n                    else if (enumInfo) enumMember(words)\n                    else metadataMember(words)\n            }\n        }\n    }\n\n    function finishPacket() {\n        const paderr = paddingError(packetInfo)\n\n        if (paderr) {\n            packetInfo.packed = true\n            error(`${paderr} in ${packetInfo.kind} ${packetInfo.name}`)\n        }\n\n        let repeats = false\n        let hadzero = false\n        for (const p of packetInfo.fields) {\n            if (hadzero) {\n                error(\n                    `field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`\n                )\n                break\n            }\n            if (p.startRepeats) {\n                if (repeats)\n                    error(\n                        `repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`\n                    )\n                repeats = true\n            }\n            if (p.storage == 0 && p.type != \"string0\") {\n                if (repeats) {\n                    error(\n                        `variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`\n                    )\n                    break\n                }\n                hadzero = true\n            }\n        }\n\n        const pid = packetInfo.identifier\n        const ranges = identifierRanges[packetInfo.kind]\n        if (\n            packetInfo.name != \"set_register\" &&\n            packetInfo.name != \"get_register\" &&\n            ranges &&\n            !ranges.some(range => range[0] <= pid && pid <= range[1])\n        )\n            error(\n                `${packetInfo.name} identifier 0x${pid.toString(\n                    16\n                )} out of range, expected in ${ranges\n                    .map(\n                        range =>\n                            `[${range\n                                .map(r => `0x${r.toString(16)}`)\n                                .join(\", \")}]`\n                    )\n                    .join(\", \")}`\n            )\n\n        // additional checks for specific packets\n        if (\n            [\n                \"reading_error\",\n                \"min_reading\",\n                \"max_reading\",\n                \"reading_resolution\",\n            ].indexOf(packetInfo.identifierName) > -1\n        ) {\n            const regid = packetInfo.identifierName\n            if (packetInfo.fields.length > 1) error(`${regid} must be a number`)\n            const reading = info.packets.find(\n                pkt => pkt.kind === \"ro\" && pkt.identifierName === \"reading\"\n            )\n            if (!reading) error(`${regid} register without a reading register`)\n            else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n                error(\n                    `${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`\n                )\n        }\n\n        packetInfo = null\n    }\n\n    function normalizeMD(md: string) {\n        return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n    }\n\n    function checkBraces(words: string[]) {\n        if (enumInfo || packetInfo) error(\"already in braces\")\n        if (words) {\n            if (words[2] != \"{\") error(`expecting: ${words[0]} NAME {`)\n        }\n\n        enumInfo = null\n        packetInfo = null\n    }\n\n    function forceSection(sectionId: string) {\n        if (noteId != sectionId) {\n            error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`)\n        }\n    }\n\n    function generalKind(k: jdspec.PacketKind): jdspec.PacketKind {\n        switch (k) {\n            case \"const\":\n            case \"ro\":\n            case \"rw\":\n                return \"rw\"\n            default:\n                return k\n        }\n    }\n\n    function startPacket(words: string[]) {\n        checkBraces(null)\n\n        let client: boolean = undefined\n        let lowLevel: boolean = undefined\n        let restricted: boolean = undefined\n        if (words[0] === \"restricted\") {\n            restricted = true\n            words.shift()\n        } else if (words[0] === \"client\") {\n            client = true\n            words.shift()\n        } else if (words[0] === \"lowlevel\") {\n            lowLevel = true\n            words.shift()\n        }\n\n        const kindSt = words.shift()\n        let kind: jdspec.PacketKind = \"command\"\n        if (kindSt == \"meta\") {\n            forceSection(\"commands\")\n            let w2 = words.shift()\n            if (w2 == \"pipe\") w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"meta_pipe_\" + w2) as any\n            else error(\"invalid token after meta\")\n        } else if (kindSt == \"pipe\") {\n            forceSection(\"commands\")\n            const w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\") kind = (\"pipe_\" + w2) as any\n            else error(\"invalid token after pipe\")\n        } else {\n            kind = kindSt as any\n        }\n\n        if (restricted && kind !== \"command\")\n            error(\"restricted only applies to commands\")\n\n        let internal: boolean = undefined\n        if (words[0] === \"internal\") {\n            internal = true\n            words.shift()\n        }\n\n        let volatile: boolean = undefined\n        if (words[0] === \"volatile\") {\n            if (kind != \"ro\" && kind != \"rw\")\n                error(\"volatile can only modify ro or rw\")\n            volatile = true\n            words.shift()\n        }\n\n        let name = words.shift()\n        const isReport = kind == \"report\"\n        if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n            words.unshift(name)\n            name = lastCmd.name\n        }\n\n        packetInfo = {\n            kind,\n            name: normalizeName(name),\n            identifier: undefined,\n            description: \"\",\n            fields: [],\n            internal,\n            client,\n            lowLevel,\n            volatile,\n            restricted,\n        }\n        if (isReport && lastCmd && name == lastCmd.name) {\n            packetInfo.secondary = true\n            lastCmd.hasReport = true\n        }\n        if (!packetsToDescribe) packetsToDescribe = []\n        packetsToDescribe.push(packetInfo)\n        if (words[0] == \"?\") {\n            words.shift()\n            packetInfo.optional = true\n        }\n\n        const prev = info.packets.filter(p => p.name == packetInfo.name)\n        if (prev.length == 0) {\n            // OK\n        } else if (\n            prev.length == 1 &&\n            prev[0].kind == \"command\" &&\n            packetInfo.kind == \"report\"\n        ) {\n            // OK\n        } else {\n            error(`packet redefinition ${prev.map(p => p.name).join(\", \")} `)\n        }\n\n        if (/pipe/.test(kind)) {\n            if (!pipePacket)\n                error(\n                    \"pipe definitions can only occur after the pipe-open packet\"\n                )\n            else packetInfo.pipeType = pipePacket.pipeType\n        }\n\n        const atat = words.indexOf(\"@\")\n        if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n            // no identifier\n            packetInfo.identifier = 0\n        } else if (atat >= 0) {\n            const w = words[atat + 1]\n            let v = parseInt(w)\n            let isSet = true\n            if (isNaN(v)) {\n                v = 0\n                isSet = false\n                if (systemInfo) {\n                    const systemPacket = systemInfo.packets.find(\n                        p => p.name == w\n                    )\n                    if (systemPacket) {\n                        v = systemPacket.identifier\n                        packetInfo.identifierName = w\n                        if (systemPacket.kind != kind)\n                            error(\n                                `kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`\n                            )\n                        else isSet = true\n                    } else error(`${w} not found in _system`)\n                } else {\n                    error(`${w} cannot be resolved, since _system is missing`)\n                }\n            }\n\n            // if we are accessing the reading or reading_error register, mark it volatile\n            if (kind === \"ro\" && (v === 0x101 || v === 0x106))\n                packetInfo.volatile = true\n\n            let isUser = false\n            let isSystem = false\n            let isHigh = 0x200 <= v && v <= 0xeff\n            switch (kind) {\n                case \"const\":\n                case \"ro\":\n                    forceSection(\"registers\")\n                    isSystem = 0x100 <= v && v <= 0x17f\n                    isUser = 0x180 <= v && v <= 0x1ff\n                    break\n                case \"rw\":\n                    forceSection(\"registers\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n                case \"report\":\n                case \"command\":\n                    forceSection(\"commands\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    isHigh = 0x100 <= v && v <= 0xeff\n                    break\n                case \"event\":\n                    forceSection(\"events\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n            }\n\n            if (isUser) {\n                // ok\n            } else if (isSystem) {\n                if (!packetInfo.identifierName)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} should be expressed with a name from _system.md`\n                    )\n            } else if (isHigh) {\n                if (!info.highCommands)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} is from the extended range but 'high: 1' missing`\n                    )\n            }\n\n            packetInfo.identifier = v\n            words.splice(atat, 2)\n        } else {\n            if (isReport && lastCmd) packetInfo.identifier = lastCmd.identifier\n            else error(`@ not found at ${packetInfo.name}`)\n        }\n\n        if (\n            info.packets.some(\n                p =>\n                    generalKind(p.kind) == generalKind(packetInfo.kind) &&\n                    (!/pipe/.test(p.kind) ||\n                        p.pipeType == packetInfo.pipeType) &&\n                    p.identifier == packetInfo.identifier\n            )\n        ) {\n            error(\"packet identifier already used\")\n        }\n\n        info.packets.push(packetInfo)\n\n        if (kind == \"command\") lastCmd = packetInfo\n        else lastCmd = null\n\n        if (words[0] == \"=\" || words[0] == \":\") {\n            words.unshift(\"_\")\n            packetField(words)\n            finishPacket()\n        } else {\n            const last = words.shift()\n            if (last == \"{\") {\n                if (words[0] == \"...\") words.shift()\n                if (words[0] == \"}\") {\n                    words.shift()\n                    finishPacket()\n                }\n                if (words.length) error(`excessive tokens: ${words[0]}...`)\n            } else {\n                if (last === undefined && kind == \"event\") {\n                    finishPacket()\n                } else {\n                    error(\"expecting '{'\")\n                }\n            }\n        }\n    }\n\n    function rangeCheck(tp: string, v: number) {\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n\n        if (isNaN(v)) return v // error already reported\n\n        if (storage == 0) {\n            error(`numeric values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (v < 0 && storage > 0) {\n            error(`negative values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (Math.floor(v) != v && typeShift == 0) {\n            error(`only integer values allowed for ${tp}; got ${v}`)\n            return v\n        }\n\n        let bits = storage < 0 ? -storage * 8 - 1 : storage * 8\n        bits -= typeShift || 0\n        // don't use bitshift to allow for more than 32 bits\n        let max = 1\n        while (bits--) max *= 2\n        if (-v == max) {\n            // OK - min_int\n        } else if (max == 1 && v == 1) {\n            // we make an exception for u0.8 being set to 1\n        } else {\n            if (Math.abs(v) >= max) {\n                error(`value ${v} is out of range for ${tp}`)\n                return v\n            }\n        }\n\n        return v\n    }\n\n    function parseVal(words: string[]) {\n        const eq = words.shift()\n        if (eq != \"=\" && eq != \":\") error(\"expecting '='\")\n        const val = words.shift()\n        return parseIntCheck(val, true)\n    }\n\n    function constant(words: string[]) {\n        if (words.length != 3) {\n            error(`define syntax is \"define name value\" (${words.join(\" \")}}`)\n            return\n        }\n\n        const name = words[1]\n        const svalue = words[2]\n\n        const hex = /^0x/.test(svalue)\n        const value = hex ? parseInt(svalue, 16) : parseInt(svalue)\n        if (isNaN(value)) {\n            error(\"invalid numeric value for constant\")\n            return\n        }\n        info.constants[name] = { value, hex }\n    }\n\n    function packetField(words: string[]) {\n        if (\n            words.length == 2 &&\n            (words[0] == \"repeats\" ||\n                words[0] == \"segmented\" ||\n                words[0] == \"multi-segmented\")\n        ) {\n            nextModifier = words[0]\n            return\n        }\n        const name = normalizeName(words.shift())\n        let defaultValue: number = undefined\n        let isOptional: boolean = undefined\n        let op = words.shift()\n        if (op == \"?\") {\n            isOptional = true\n            op = words.shift()\n        }\n        if (op == \"=\") {\n            defaultValue = parseIntCheck(words.shift(), true)\n            op = words.shift()\n        }\n\n        if (op != \":\") error(\"expecting ':'\")\n\n        const tp = words.shift()\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n        const isFloat = typeShift === null || undefined\n\n        let tok = words.shift()\n        let unit: jdspec.Unit\n        let encoding: jdspec.Encoding\n        if (tok != \"{\") {\n            if (type === \"string\" || type === \"bytes\")\n                encoding = normalizeEncoding(tok)\n            else unit = normalizeUnit(tok)\n            tok = words.shift()\n        }\n\n        if (defaultValue !== undefined) rangeCheck(tp, defaultValue)\n\n        let shift = typeShift || undefined\n        if (unit == \"/\") {\n            // / units should be used with ui0. data\n            if (!/^(u0|i1)\\.\\d+$/.test(tp))\n                error(\n                    `fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`\n                )\n\n            shift = Math.abs(storage) * 8\n            if (storage < 0) shift -= 1\n        }\n\n        const field: jdspec.PacketMember = {\n            name,\n            unit,\n            encoding,\n            shift,\n            isFloat,\n            type,\n            storage,\n            isSimpleType: canonicalType(storage) == type || undefined,\n            defaultValue,\n            isOptional,\n            multiSegmented: nextModifier == \"multi-segmented\" || undefined,\n            segmented:\n                nextModifier == \"segmented\" ||\n                nextModifier == \"multi-segmented\" ||\n                undefined,\n            startRepeats: nextModifier == \"repeats\" || undefined,\n        }\n\n        if (!unit) delete field.unit\n        if (!encoding) delete field.encoding\n\n        if (tok == \"{\") {\n            while (words.length) {\n                tok = words.shift()\n                if (tok == \"}\") break\n                tok = camelize(tok)\n                switch (tok) {\n                    case \"maxBytes\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(\"u8\", parseVal(words))\n                        break\n                    }\n                    case \"typicalMin\":\n                    case \"typicalMax\":\n                    case \"absoluteMin\":\n                    case \"absoluteMax\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(tp, parseVal(words))\n                        break\n                    }\n                    case \"preferredInterval\": {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if ((packetInfo as any)[tok] !== undefined)\n                            error(`field ${tok} already set`)\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ;(packetInfo as any)[tok] = rangeCheck(\n                            \"u32\",\n                            parseVal(words)\n                        )\n                        break\n                    }\n                    default:\n                        error(\"unknown constraint: \" + tok)\n                        break\n                }\n                if (words[0] == \",\") words.shift()\n            }\n            if (tok == \"}\") tok = null\n        }\n\n        if (tok) error(`excessive tokens at the end of member: ${tok}...`)\n\n        if (\n            field.typicalMin === undefined &&\n            field.typicalMax !== undefined &&\n            storage > 0\n        )\n            field.typicalMin = 0\n\n        if (\n            field.absoluteMin === undefined &&\n            field.absoluteMax !== undefined &&\n            storage > 0\n        )\n            field.absoluteMin = 0\n\n        if (!field.storage && field.maxBytes) field.storage = field.maxBytes\n\n        if (/pipe/.test(type)) {\n            packetInfo.pipeType = packetInfo.name\n            if (\n                pipePacket &&\n                pipePacket.name == packetInfo.name &&\n                packetInfo.kind == \"report\"\n            ) {\n                // keep old pipePacket\n            } else {\n                pipePacket = packetInfo\n            }\n        }\n\n        if (\n            !field.isOptional &&\n            packetInfo.fields[packetInfo.fields.length - 1]?.isOptional\n        ) {\n            error(`all fields after an optional field have to optional`)\n        }\n\n        packetInfo.fields.push(field)\n        nextModifier = undefined\n    }\n\n    function startEnum(words: string[]) {\n        checkBraces(null)\n        if (words[2] != \":\" || words[4] != \"{\")\n            error(\"expecting: enum NAME : TYPE {\")\n        enumInfo = {\n            name: normalizeName(words[1]),\n            storage: normalizeStorageType(words[3])[0],\n            isFlags: words[0] == \"flags\" || undefined,\n            members: {},\n        }\n        if (info.enums[enumInfo.name]) error(\"enum redefinition\")\n        info.enums[enumInfo.name] = enumInfo\n    }\n\n    function enumMember(words: string[]) {\n        if (words[1] != \"=\" || words.length != 3)\n            error(`expecting: FIELD_NAME = INTEGER`)\n        enumInfo.members[normalizeName(words[0])] = rangeCheck(\n            canonicalType(enumInfo.storage),\n            parseIntCheck(words[2])\n        )\n    }\n\n    function parseIntCheck(w: string, allowFloat = false) {\n        try {\n            return parseIntFloat(info, w, allowFloat)\n        } catch (e) {\n            error(e.message)\n            return 0\n        }\n    }\n\n    function looksRandom(n: number) {\n        const s = n.toString(16)\n        const h = \"0123456789abcdef\"\n        for (let i = 0; i < h.length; ++i) {\n            const hh = h[i]\n            if (s.indexOf(hh + hh + hh) >= 0) return false\n        }\n        if (/f00d|dead|deaf|beef/.test(s)) return false\n        return true\n    }\n\n    function genRandom() {\n        for (;;) {\n            const m = (Math.random() * 0xfff_ffff) | 0x1000_0000\n            if (looksRandom(m)) return m\n        }\n    }\n\n    function metadataMember(words: string[]) {\n        if (\n            !(\n                (words[1] == \"=\" || words[1] == \":\") &&\n                (words[0] == \"tags\" || words.length == 3)\n            )\n        )\n            error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`)\n        switch (words[0]) {\n            case \"extends\":\n                processInclude(words[2])\n                break\n            case \"class\":\n            case \"identifier\": {\n                info.classIdentifier = parseIntCheck(words[2])\n                if (info.name != \"Control\" && info.classIdentifier == 0)\n                    info.classIdentifier = 1\n                const gen = `how about ${toHex(genRandom())}`\n                if (\n                    !(\n                        info.classIdentifier == 0 ||\n                        (0x1000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x1fff_ff00) ||\n                        (0x2000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x2ffff_ff00)\n                    )\n                )\n                    error(`class identifier out of range; ${gen}`)\n                if (!looksRandom(info.classIdentifier))\n                    error(`class identifier doesn't look random; ${gen}`)\n                if (usedIds[info.classIdentifier + \"\"])\n                    error(\n                        `class identifier ${toHex(\n                            info.classIdentifier\n                        )} already used in ${\n                            usedIds[info.classIdentifier + \"\"]\n                        }; ${gen}`\n                    )\n                break\n            }\n            case \"camel\":\n                info.camelName = words[2]\n                break\n            case \"short\":\n                info.shortName = words[2]\n                break\n            case \"high\":\n                info.highCommands = !!parseIntCheck(words[2])\n                break\n            case \"status\":\n                if (\n                    [\"stable\", \"experimental\", \"deprecated\"].indexOf(words[2]) >\n                    -1\n                )\n                    info.status = <any>words[2]\n                else error(\"unknown status\")\n                break\n            case \"group\":\n                info.group = capitalize(words.slice(2).join(\" \"))\n                break\n            case \"tags\": {\n                const tags = words.slice(2).filter(w => w != \",\" && w != \";\")\n                info.tags = info.tags.concat(tags)\n                break\n            }\n            default:\n                error(\"unknown metadata field: \" + words[0])\n                break\n        }\n    }\n\n    function processInclude(name: string) {\n        if (name == \"_system\") return\n        const inner = includes[name]\n        if (!inner) return error(\"include file not found: \" + name)\n        if (\n            info.packets.some(pkt => !pkt.derived) ||\n            values(info.enums).some(e => !e.derived)\n        )\n            error(\"extends: only allowed on top of the .md file\")\n        if (inner.errors) errors = errors.concat(inner.errors)\n        const innerEnums = clone(inner.enums)\n        Object.keys(innerEnums)\n            .filter(k => !info.enums[k])\n            .forEach(k => {\n                const ie = innerEnums[k]\n                ie.derived = name\n                info.enums[k] = ie\n            })\n        const innerPackets = clone(\n            inner.packets.filter(\n                pkt =>\n                    !info.packets.find(\n                        ipkt =>\n                            ipkt.kind === pkt.kind &&\n                            ipkt.identifier === pkt.identifier\n                    )\n            )\n        )\n        innerPackets.forEach(pkt => (pkt.derived = name))\n        info.packets = [...info.packets, ...innerPackets]\n        if (inner.highCommands) info.highCommands = true\n        info.extends = inner.extends.concat([name])\n    }\n\n    function clone<T>(v: T): T {\n        return JSON.parse(JSON.stringify(v))\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function warn(msg: string) {\n        if (info.camelName == \"system\") return // no warnings in _system\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function normalizeName(n: string) {\n        if (!/^\\w+$/.test(n)) error(\"expecting name here\")\n        if (n.length > 31) error(`name '${n}' too long`)\n        return n\n    }\n\n    function normalizeStorageType(\n        tp: string\n    ): [jdspec.StorageType, string, number] {\n        if (info.enums[tp]) return [info.enums[tp].storage, tp, 0]\n        if (!tp) error(\"expecting type here\")\n        const tp2 = tp.replace(/_t$/, \"\").toLowerCase()\n        const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2)\n        if (m) {\n            const a = parseIntCheck(m[2])\n            const b = parseIntCheck(m[3])\n            const len = a + b\n            if (!(len == 8 || len == 16 || len == 32 || len == 64))\n                error(`fixed point ${tp} can't be ${len} bits`)\n            if (a == 0 && m[1] == \"i\")\n                error(\n                    `fixed point ${tp} can't be i0.X; has to be at least i1.X`\n                )\n            return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b]\n        }\n\n        switch (tp2) {\n            case \"bool\":\n                return [1, tp2, 0]\n            case \"i8\":\n            case \"u8\":\n            case \"i16\":\n            case \"u16\":\n            case \"i32\":\n            case \"u32\":\n            case \"i64\":\n            case \"u64\": {\n                let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3\n                if (tp2[0] == \"i\") sz = -sz\n                return [sz, tp2, 0]\n            }\n            case \"f16\":\n                return [2, tp2, null]\n            case \"f32\":\n                return [4, tp2, null]\n            case \"f64\":\n                return [8, tp2, null]\n            case \"pipe\":\n                return [12, tp2, 0]\n            case \"pipe_port\":\n                return [2, tp2, 0]\n            case \"devid\":\n                return [8, tp2, 0]\n            case \"bytes\":\n            case \"string\":\n            case \"string0\":\n                return [0, tp2, 0]\n            default: {\n                const m = /^u8\\[(\\d+)\\]$/.exec(tp2)\n                if (m) return [parseIntCheck(m[1]), tp2, 0]\n                error(\"unknown type: \" + tp + \" \" + tp2)\n                return [4, tp2, 0]\n            }\n        }\n    }\n\n    function normalizeEncoding(unit: string): jdspec.Encoding {\n        return (unit && encodings[unit.toLowerCase()]) || undefined\n    }\n\n    function normalizeUnit(unit: string): jdspec.Unit {\n        if (unit === undefined || unit === null) return undefined\n\n        if (unitDescription[unit] || secondaryUnitConverters[unit])\n            return unit as jdspec.Unit\n        error(`expecting unit, got '${unit}'`)\n        return undefined\n    }\n\n    function paddingError(iface: jdspec.PacketInfo): string {\n        let byteOffset = 0\n\n        for (const m of iface.fields) {\n            const sz = memberSize(m)\n            if (sz == 0) continue\n            const pad = sz > 4 ? 4 : sz\n            if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0)\n                return `need padding of ${\n                    pad - (byteOffset % pad)\n                } byte(s) before ${m.name}`\n            byteOffset += sz\n        }\n\n        return null\n    }\n}\n\nfunction values<T>(o: jdspec.SMap<T>): T[] {\n    const r: T[] = []\n    for (const k of Object.keys(o)) r.push(o[k])\n    return r\n}\n\nfunction fail(msg: string) {\n    throw new Error(msg)\n}\n\nfunction toUpper(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toUpperCase()\n}\n\nfunction toLower(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toLowerCase()\n}\n\nfunction packed(iface: jdspec.PacketInfo) {\n    if (!iface.packed) return \"\"\n    else return \" __attribute__((packed))\"\n}\n\nfunction cStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    if (tp < 0) return `int${-tp * 8}_t`\n    else return `uint${tp * 8}_t`\n}\n\nfunction cSharpStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    switch (tp) {\n        case -1:\n            return \"sbyte\"\n        case 1:\n            return \"byte\"\n        case -2:\n            return \"short\"\n        case 2:\n            return \"ushort\"\n        case -4:\n            return \"int\"\n        case 4:\n            return \"uint\"\n    }\n    return `unknown({${tp})`\n}\n\nfunction canonicalType(tp: jdspec.StorageType): string {\n    if (tp == 0) return \"bytes\"\n    if (tp < 0) return `i${-tp * 8}`\n    else return `u${tp * 8}`\n}\n\nfunction isRegister(k: jdspec.PacketKind) {\n    return k == \"ro\" || k == \"rw\" || k == \"const\"\n}\n\nfunction toHex(n: number): string {\n    if (n === undefined) return \"\"\n    if (n < 0) return \"-\" + toHex(n)\n    return \"0x\" + n.toString(16)\n}\n\nfunction unitPref(f: jdspec.PacketMember) {\n    if (!f.unit) return \"\"\n    else return prettyUnit(f.unit) + \" \"\n}\n\nfunction prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n            return \"°C\"\n        case \"/\":\n            return \"ratio\"\n        default:\n            return u\n    }\n}\n\nfunction toPython(info: jdspec.ServiceSpec) {\n    const r = [\n        \"# Autogenerated file for \" + info.name,\n        `# Add missing from ... import const`,\n    ]\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r.push(\n            `_JD_SERVICE_CLASS_${toUpper(info.shortName)} = const(${toHex(\n                info.classIdentifier\n            )})`\n        )\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r.push(\n            `_JD_${toUpper(cst)} = const(${\n                hex ? value.toString() : toHex(value)\n            })\\n`\n        )\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        for (const k of Object.keys(en.members))\n            r.push(`_${enPref}_${toUpper(k)} = const(${toHex(en.members[k])})`)\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName) {\n                // TODO find identifier and inline it\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            }\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r.push(`_${name} = const(${val})`)\n        }\n    }\n    return r.join(\"\\n\")\n}\n\nfunction toH(info: jdspec.ServiceSpec) {\n    let r = \"// Autogenerated C header file for \" + info.name + \"\\n\"\n    const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`\n    r += `#ifndef ${hdDef}\\n`\n    r += `#define ${hdDef} 1\\n`\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r += `\\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex(\n            info.classIdentifier\n        )}\\n`\n\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r += `#define ${pref}${toUpper(cst)} ${\n            hex ? toHex(value) : value.toString()\n        }\\n`\n    }\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        r += `\\n// enum ${en.name} (${cStorage(en.storage)})\\n`\n        for (const k of Object.keys(en.members))\n            r +=\n                \"#define \" +\n                enPref +\n                \"_\" +\n                toUpper(k) +\n                \" \" +\n                toHex(en.members[k]) +\n                \"\\n\"\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        r += wrapComment(cmt.comment)\n\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName)\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r += `#define ${name} ${val}\\n`\n        }\n\n        const isMetaPipe =\n            pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\"\n\n        if (cmt.needsStruct || isMetaPipe) {\n            let tname =\n                \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name)\n            if (pkt.kind == \"report\") tname += \"_report\"\n            r += `typedef struct ${tname} {\\n`\n            if (isMetaPipe) {\n                r += `    uint32_t identifier; // ${toHex(pkt.identifier)}\\n`\n            }\n            let unaligned = \"\"\n            for (let i = 0; i < pkt.fields.length; ++i) {\n                const f = pkt.fields[i]\n                let def = \"\"\n                const cst = cStorage(f.storage)\n                const sz = memberSize(f)\n                if (f.type == \"string\" || f.type == \"string0\")\n                    def = `char ${f.name}[${sz}]`\n                else if (cst == \"bytes\") def = `uint8_t ${f.name}[${sz}]`\n                else def = `${cst} ${f.name}`\n                // if it's the last field and it start repeats, treat it as an array\n                if (f.startRepeats && i == pkt.fields.length - 1) def += \"[0]\"\n                def += \";\"\n                if (!f.isSimpleType && f.type != \"devid\")\n                    def += \"  // \" + unitPref(f) + f.type\n                else if (f.unit) def += \" // \" + prettyUnit(f.unit)\n                r += \"    \" + unaligned + def + \"\\n\"\n                if (f.type == \"string0\") unaligned = \"// \"\n            }\n            r += `}${packed(pkt)} ${tname}_t;\\n\\n`\n        }\n    }\n    r += \"\\n#endif\\n\"\n    return r\n}\n\nexport function camelize(name: string) {\n    if (!name) return name\n    return (\n        name[0].toLowerCase() +\n        name.slice(1).replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase())\n    )\n}\n\nexport function capitalize(name: string) {\n    if (!name) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nfunction upperCamel(name: string) {\n    name = camelize(name)\n    if (!name?.length) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nexport function snakify(name: string) {\n    return name?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b)\n}\n\nexport function dashify(name: string) {\n    if (!name) return name\n    return snakify(name.replace(/^_+/, \"\"))\n        .replace(/(_|\\s)+/g, \"-\")\n        .toLowerCase()\n}\n\nexport function humanify(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b)\n        .replace(/(-|_)/g, \" \")\n}\n\nfunction addComment(pkt: jdspec.PacketInfo) {\n    let comment = \"\"\n\n    let typeInfo = \"\"\n    let needsStruct = false\n    if (pkt.fields.length == 0) {\n        if (pkt.kind != \"event\") typeInfo = \"No args\"\n    } else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n        const f0 = pkt.fields[0]\n        typeInfo = cStorage(f0.storage)\n        if (!f0.isSimpleType) typeInfo = f0.type + \" (\" + typeInfo + \")\"\n        typeInfo = unitPref(f0) + typeInfo\n        if (f0.name != \"_\") typeInfo = f0.name + \" \" + typeInfo\n    } else {\n        needsStruct = true\n    }\n\n    if (pkt.fields.length == 1) {\n        if (isRegister(pkt.kind)) {\n            let info = \"\"\n            if (pkt.kind == \"ro\") info = \"Read-only\"\n            else if (pkt.kind == \"const\") info = \"Constant\"\n            else info = \"Read-write\"\n            if (typeInfo) typeInfo = info + \" \" + typeInfo\n            else typeInfo = info\n        } else if (typeInfo) {\n            typeInfo = \"Argument: \" + typeInfo\n        }\n    }\n\n    if (pkt.kind == \"report\" && pkt.secondary) {\n        comment += \"Report: \" + typeInfo + \"\\n\"\n    } else {\n        if (pkt.description) {\n            let desc = pkt.description.replace(/\\n\\n[^]*/, \"\")\n            if (typeInfo) desc = typeInfo + \". \" + desc\n            comment = desc + \"\\n\" + comment\n        }\n    }\n\n    return {\n        comment,\n        needsStruct,\n    }\n}\n\nfunction wrapComment(comment: string) {\n    return (\n        \"\\n/**\\n * \" +\n        comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") +\n        \"\\n */\\n\"\n    )\n}\n\nfunction wrapSnippet(code: string) {\n    if (!code) return code\n    return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`\n}\n\nexport const TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\"\nfunction packFormatForField(\n    info: jdspec.ServiceSpec,\n    fld: jdspec.PacketMember,\n    isStatic?: boolean,\n    useBooleans?: boolean\n) {\n    const sz = memberSize(fld)\n    const szSuff = sz ? `[${sz}]` : ``\n    let tsType = \"number\"\n    let fmt = \"\"\n    if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n        fmt = fld.type\n    } else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n        fmt = \"b\" + szSuff\n    } else if (info.enums[fld.type]) {\n        fmt = canonicalType(info.enums[fld.type].storage)\n        tsType = upperCamel(info.camelName) + upperCamel(fld.type)\n        if (isStatic) tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType\n    } else {\n        switch (fld.type) {\n            case \"string\":\n                fmt = \"s\" + szSuff\n                tsType = \"string\"\n                break\n            case \"bytes\":\n                fmt = \"b\" + szSuff\n                break\n            case \"string0\":\n                fmt = \"z\"\n                tsType = \"string\"\n                break\n            case \"devid\":\n                fmt = \"b[8]\"\n                break\n            case \"pipe_port\":\n                fmt = \"u16\"\n                break\n            case \"pipe\":\n                fmt = \"b[12]\"\n                break\n            case \"bool\":\n                // TODO native bool support\n                fmt = \"u8\"\n                if (useBooleans) tsType = \"boolean\"\n                break\n            default:\n                return null\n        }\n    }\n\n    if (tsType == \"number\" && fmt && fmt[0] == \"b\") tsType = \"Buffer\"\n    return { fmt, tsType }\n}\n\n/**\n * Generates the format to pack/unpack a data payload for this packet\n * @param pkt\n * TODO fix this\n */\nexport function packFormat(\n    sinfo: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    useBooleans?: boolean\n): string {\n    if (pkt.packed || !pkt.fields?.length) return undefined\n\n    const fmt: string[] = []\n    for (const fld of pkt.fields) {\n        if (fld.startRepeats) fmt.push(\"r:\")\n        const ff = packFormatForField(sinfo, fld, false, useBooleans)\n        if (!ff) return undefined\n        fmt.push(ff.fmt)\n    }\n\n    return fmt.join(\" \")\n}\n\nexport function packInfo(\n    info: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    options?: {\n        isStatic?: boolean\n        useBooleans?: boolean\n        useJDOM?: boolean\n    }\n) {\n    const {\n        isStatic = false,\n        useBooleans = false,\n        useJDOM = false,\n    } = options || {}\n    const { kind } = pkt\n    const vars: string[] = []\n    const vartp: string[] = []\n    let fmt = \"\"\n    let repeats: string[]\n    let reptp: string[]\n\n    for (let i = 0; i < pkt.fields.length; ++i) {\n        const fld = pkt.fields[i]\n        let isArray = \"\"\n        if (fld.startRepeats) {\n            if (i == pkt.fields.length - 1) {\n                isArray = \"[]\"\n            } else {\n                fmt += \"r: \"\n                repeats = []\n                reptp = []\n                vars.push(\"rest\")\n            }\n        }\n        const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name)\n        const f0 = packFormatForField(info, fld, isStatic, useBooleans)\n        if (!f0 || /(reserved|padding)/.test(fld.name)) {\n            if (!f0)\n                console.log(\n                    `${pkt.name}/${fld.name} - can't get format for '${fld.type}'`\n                )\n            fmt += `x[${memberSize(fld)}] `\n        } else {\n            fmt += f0.fmt + isArray + \" \"\n            let tp = f0.tsType\n            if (tp == \"Buffer\" && !isStatic) tp = \"Uint8Array\"\n            tp += isArray\n            if (repeats) {\n                repeats.push(varname)\n                reptp.push(tp)\n            } else {\n                vars.push(varname)\n                vartp.push(tp)\n            }\n        }\n    }\n\n    fmt = fmt.replace(/ *$/, \"\")\n\n    if (reptp) vartp.push(\"([\" + reptp.join(\", \") + \"])[]\")\n\n    const pktName = camelize(pkt.name)\n    let buffers = \"\"\n    if (useJDOM) {\n        if (kind === \"command\") {\n            for (let i = 0; i < vars.length; ++i)\n                buffers += `const ${vars[i]}: ${vartp[i]} = ...\\n`\n            buffers += `await service.sendCmdPackedAsync(${capitalize(\n                info.camelName\n            )}Reg.${capitalize(pktName)}, [${vars.join(\", \")}])\\n`\n        } else if (isRegister(kind)) {\n            buffers +=\n                \"// get (register to REPORT_UPDATE event to enable background refresh)\\n\"\n            buffers += `const ${pktName}Reg = service.register(${capitalize(\n                info.camelName\n            )}Reg.${capitalize(pktName)})\\n`\n            buffers += `const [${vars.join(\", \")}] : [${vartp.join(\n                \", \"\n            )}] = ${pktName}Reg.unpackedValue\\n`\n            if (kind === \"rw\") {\n                buffers += \"// set\\n\"\n                buffers += `await ${pktName}Reg.sendSetPackedAsync([${vars.join(\n                    \", \"\n                )}])\\n`\n            }\n        }\n    } else {\n        buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\n            \", \"\n        )}]>(buf, \"${fmt}\")\\n`\n    }\n    if (repeats) buffers += `const [${repeats.join(\", \")}] = rest[0]\\n`\n\n    buffers = buffers.replace(/\\n*$/, \"\")\n\n    return {\n        buffers,\n        names: vars,\n        types: vartp,\n    }\n}\n\nfunction memberSize(fld: jdspec.PacketMember) {\n    return Math.abs(fld.storage)\n}\n\nfunction toTypescript(info: jdspec.ServiceSpec, language: \"ts\" | \"sts\" | \"c#\") {\n    const sts = language === \"sts\"\n    const csharp = language === \"c#\"\n    const useNamespace = sts || csharp\n\n    const indent = useNamespace ? \"    \" : \"\"\n    const indent2 = indent + \"    \"\n    const numberkw = csharp ? \"uint \" : \"\"\n    const hexkw = csharp ? \"byte[]\" : \"\"\n    const enumkw = csharp\n        ? indent + \"public enum\"\n        : sts\n        ? indent + \"export const enum\"\n        : \"export enum\"\n    const exportkw = csharp ? \"public\" : \"export\"\n    const cskw = csharp ? \";\" : \"\"\n    let r = useNamespace\n        ? `namespace ${\n              csharp\n                  ? capitalize(TYPESCRIPT_STATIC_NAMESPACE)\n                  : TYPESCRIPT_STATIC_NAMESPACE\n          } {\\n`\n        : \"\"\n\n    r += indent + \"// Service: \" + info.name + \"\\n\"\n    if (csharp) {\n        r += `${indent}public static class ${capitalize(\n            info.camelName\n        )}Constants\\n${indent}{\\n`\n    }\n    if (info.shortId[0] != \"_\") {\n        const name = csharp\n            ? \"ServiceClass\"\n            : `SRV_${snakify(info.camelName).toLocaleUpperCase()}`\n        r +=\n            indent +\n            (csharp ? indent : \"\") +\n            `${exportkw} const ${numberkw}${name} = ${toHex(\n                info.classIdentifier\n            )}${cskw}\\n`\n    }\n    const pref = upperCamel(info.camelName)\n    for (const cst in info.constants) {\n        const { value, hex } = info.constants[cst]\n        r +=\n            indent +\n            (csharp ? indent : \"\") +\n            `${exportkw} const ${hex ? hexkw : numberkw}${\n                csharp ? capitalize(camelize(cst)) : toUpper(cst)\n            } = ${hex ? value.toString() : toHex(value)}${cskw}\\n`\n    }\n\n    if (csharp) {\n        r += indent + `}\\n`\n    }\n\n    for (const en of values(info.enums)) {\n        const enPref = pref + upperCamel(en.name)\n        r += `\\n${enumkw} ${enPref}${\n            csharp ? `: ${cSharpStorage(en.storage)}` : \"\"\n        } { // ${cStorage(en.storage)}\\n`\n        for (const k of Object.keys(en.members)) {\n            if (sts) r += indent2 + `//% block=\"${humanify(k).toLowerCase()}\"\\n`\n            r += indent2 + k + \" = \" + toHex(en.members[k]) + \",\\n\"\n        }\n        r += indent + \"}\\n\\n\"\n    }\n    const tsEnums: jdspec.SMap<string> = {}\n\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        const pack = pkt.fields.length\n            ? packInfo(info, pkt, {\n                  isStatic: sts,\n                  useBooleans: false,\n              }).buffers\n            : \"\"\n\n        let inner = \"Cmd\"\n        if (isRegister(pkt.kind)) inner = \"Reg\"\n        else if (pkt.kind == \"event\") inner = \"Event\"\n        else if (\n            pkt.kind == \"meta_pipe_command\" ||\n            pkt.kind == \"meta_pipe_report\"\n        )\n            inner = \"PipeCmd\"\n        else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n            inner = \"info\"\n\n        let text = \"\"\n        let meta = \"\"\n        if (pkt.secondary || inner == \"info\") {\n            if (pack)\n                text = wrapComment(\n                    `${pkt.kind} ${upperCamel(pkt.name)}${\n                        pkt.client ? \"\" : wrapSnippet(pack)\n                    }`\n                )\n        } else {\n            const val = toHex(pkt.identifier)\n            if (sts && pkt.kind === \"event\") {\n                meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\\n`\n            }\n            text = `${\n                wrapComment(\n                    cmt.comment + (pkt.client ? \"\" : wrapSnippet(pack))\n                ) + meta\n            }${upperCamel(pkt.name)} = ${val},\\n`\n        }\n\n        if (text) tsEnums[inner] = (tsEnums[inner] || \"\") + text\n\n        // don't line const strings in makecode,\n        // they don't get dropped efficiently\n    }\n\n    for (const k of Object.keys(tsEnums)) {\n        if (k == \"info\") r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\"\n        else {\n            const inner = tsEnums[k]\n                .replace(/^\\n+/, \"\")\n                .replace(/\\n$/, \"\")\n                .replace(/\\n/g, \"\\n    \" + indent)\n            r += `${enumkw} ${pref}${k} {\\n    ${indent}${inner}\\n${indent}}\\n\\n`\n        }\n    }\n\n    if (useNamespace) r += \"}\\n\"\n\n    return r.replace(/ *$/gm, \"\")\n}\n\nexport function generateDeviceSpecificationId(dev: jdspec.DeviceSpec) {\n    return (\n        escapeDeviceIdentifier(dev.company) +\n        \"-\" +\n        escapeDeviceNameIdentifier(dev.name) +\n        (dev.designIdentifier || \"\") +\n        (dev.version\n            ? `v${dev.version\n                  .toLowerCase()\n                  .replace(/^v/, \"\")\n                  .replace(/\\./g, \"\")}`\n            : \"\"\n        ).toLowerCase()\n    )\n}\n\nexport function normalizeDeviceSpecification(dev: jdspec.DeviceSpec) {\n    // reorder fields\n    const clone: jdspec.DeviceSpec = {\n        id: generateDeviceSpecificationId(dev),\n        name: dev.name,\n        company: dev.company,\n        description: dev.description,\n        repo: dev.repo,\n        link: dev.link,\n        services: dev.services,\n        productIdentifiers: dev.productIdentifiers,\n        transport: dev.transport?.toLowerCase(),\n        tags: dev.tags,\n        firmwares: dev.firmwares,\n        version: dev.version ? dev.version.replace(/^v/, \"\") : undefined,\n        designIdentifier: dev.designIdentifier,\n    }\n    if (dev.status !== undefined) clone.status = dev.status\n    return clone\n}\n\nexport function escapeDeviceIdentifier(text: string) {\n    if (!text) text = \"\"\n    const escaped = text\n        .trim()\n        .toLowerCase()\n        .replace(/([^a-z0-9_-])+/gi, \"-\")\n        .replace(/\\./g, \"\") // routing does not like dots\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\")\n    const id = snakify(escaped)\n    return id\n}\n\nexport function escapeDeviceNameIdentifier(text: string) {\n    return escapeDeviceIdentifier(text).replace(/-/g, \"\")\n}\n\nexport function converters(): jdspec.SMap<(s: jdspec.ServiceSpec) => string> {\n    return {\n        json: (j: jdspec.ServiceSpec) => JSON.stringify(j, null, 2),\n        c: toH,\n        ts: j => toTypescript(j, \"ts\"),\n        sts: j => toTypescript(j, \"sts\"),\n        cs: j => toTypescript(j, \"c#\"),\n        py: j => toPython(j),\n        /*\n        \"cpp\": toHPP,\n        */\n    }\n}\n\nexport function isNumericType(field: jdspec.PacketMember) {\n    const tp = field.type\n    return (\n        !field.startRepeats &&\n        /^[uif]\\d+(\\.\\d+)?$/.test(tp) &&\n        tp != \"pipe_port\" &&\n        tp != \"bool\"\n    )\n}\n","/**\n * Various flags to control the runtime environment\n * @category Runtime\n */\nexport class Flags {\n    /**\n     * Enables additional logging and diagnostics\n     */\n    static diagnostics = false\n    /**\n     * Trace who and what generates packets\n     */\n    static trace = false\n    /**\n     * Enables/disabled WebUSB\n     */\n    static webUSB = true\n    /**\n     * Enables/disabled WebSerial\n     */\n    static webSerial = true\n\n    /**\n     * Enables/disables WebBLE\n     */\n    static webBluetooth = false\n}\nexport default Flags\n","import Flags from \"./flags\"\n\nexport function throwError(msg: string, cancel?: boolean) {\n    const e = new Error(msg)\n    if (cancel)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (e as any).__cancel = true\n    throw e\n}\n\nexport function isCancelError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!(e as any)?.__cancel\n}\n\nexport function setAckError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (e) (e as any).__ack = true\n}\n\nexport function isAckError(e: Error) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!(e as any)?.__ack\n}\n\nexport function delay<T>(millis: number, value?: T): Promise<T | undefined> {\n    return new Promise(resolve => setTimeout(() => resolve(value), millis))\n}\n\nexport function memcpy(\n    trg: Uint8Array,\n    trgOff: number,\n    src: ArrayLike<number>,\n    srcOff?: number,\n    len?: number\n) {\n    if (srcOff === void 0) srcOff = 0\n    if (len === void 0) len = src.length - srcOff\n    for (let i = 0; i < len; ++i) trg[trgOff + i] = src[srcOff + i]\n}\n\nexport function strcmp(a: string, b: string) {\n    if (a == b) return 0\n    if (a < b) return -1\n    else return 1\n}\n\nexport function bufferEq(a: Uint8Array, b: ArrayLike<number>, offset = 0) {\n    if (a == b) return true\n    if (!a || !b || a.length != b.length) return false\n    for (let i = offset; i < a.length; ++i) {\n        if (a[i] != b[i]) return false\n    }\n    return true\n}\n\nexport function hash(buf: Uint8Array, bits: number) {\n    bits |= 0\n    if (bits < 1) return 0\n    const h = fnv1(buf)\n    if (bits >= 32) return h >>> 0\n    else return ((h ^ (h >>> bits)) & ((1 << bits) - 1)) >>> 0\n}\n\nexport function idiv(a: number, b: number) {\n    return ((a | 0) / (b | 0)) | 0\n}\nexport function fnv1(data: Uint8Array) {\n    let h = 0x811c9dc5\n    for (let i = 0; i < data.length; ++i) {\n        h = Math.imul(h, 0x1000193) ^ data[i]\n    }\n    return h\n}\n\nexport function crc(p: Uint8Array) {\n    let crc = 0xffff\n    for (let i = 0; i < p.length; ++i) {\n        const data = p[i]\n        let x = (crc >> 8) ^ data\n        x ^= x >> 4\n        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ x\n        crc &= 0xffff\n    }\n    return crc\n}\n\nexport function ALIGN(n: number) {\n    return (n + 3) & ~3\n}\n\n// this will take lower 8 bits from each character\nexport function stringToUint8Array(input: string) {\n    const len = input.length\n    const res = new Uint8Array(len)\n    for (let i = 0; i < len; ++i) res[i] = input.charCodeAt(i) & 0xff\n    return res\n}\n\nexport function uint8ArrayToString(input: ArrayLike<number>) {\n    const len = input.length\n    let res = \"\"\n    for (let i = 0; i < len; ++i) res += String.fromCharCode(input[i])\n    return res\n}\n\nexport function fromUTF8(binstr: string) {\n    if (!binstr) return \"\"\n\n    // escape function is deprecated\n    let escaped = \"\"\n    for (let i = 0; i < binstr.length; ++i) {\n        const k = binstr.charCodeAt(i) & 0xff\n        if (k == 37 || k > 0x7f) {\n            escaped += \"%\" + k.toString(16)\n        } else {\n            escaped += binstr.charAt(i)\n        }\n    }\n\n    // decodeURIComponent does the actual UTF8 decoding\n    return decodeURIComponent(escaped)\n}\n\nexport function toUTF8(str: string, cesu8?: boolean) {\n    let res = \"\"\n    if (!str) return res\n    for (let i = 0; i < str.length; ++i) {\n        let code = str.charCodeAt(i)\n        if (code <= 0x7f) res += str.charAt(i)\n        else if (code <= 0x7ff) {\n            res += String.fromCharCode(0xc0 | (code >> 6), 0x80 | (code & 0x3f))\n        } else {\n            if (!cesu8 && 0xd800 <= code && code <= 0xdbff) {\n                const next = str.charCodeAt(++i)\n                if (!isNaN(next))\n                    code = 0x10000 + ((code - 0xd800) << 10) + (next - 0xdc00)\n            }\n\n            if (code <= 0xffff)\n                res += String.fromCharCode(\n                    0xe0 | (code >> 12),\n                    0x80 | ((code >> 6) & 0x3f),\n                    0x80 | (code & 0x3f)\n                )\n            else\n                res += String.fromCharCode(\n                    0xf0 | (code >> 18),\n                    0x80 | ((code >> 12) & 0x3f),\n                    0x80 | ((code >> 6) & 0x3f),\n                    0x80 | (code & 0x3f)\n                )\n        }\n    }\n    return res\n}\n\nexport interface SMap<T> {\n    [index: string]: T\n}\n\n/** @internal */\nexport class PromiseBuffer<T> {\n    private waiting: ((v: T | Error) => void)[] = []\n    private available: (T | Error)[] = []\n\n    drain() {\n        for (const f of this.waiting) {\n            f(new Error(\"Promise Buffer Reset\"))\n        }\n        this.waiting = []\n        this.available = []\n    }\n\n    pushError(v: Error) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.push(v as any)\n    }\n\n    push(v: T) {\n        const f = this.waiting.shift()\n        if (f) f(v)\n        else this.available.push(v)\n    }\n\n    shiftAsync(timeout = 0) {\n        if (this.available.length > 0) {\n            const v = this.available.shift()\n            if (v instanceof Error) return Promise.reject<T>(v)\n            else return Promise.resolve<T | undefined>(v)\n        } else\n            return new Promise<T>((resolve, reject) => {\n                const f = (v: T | Error) => {\n                    if (v instanceof Error) reject(v)\n                    else resolve(v)\n                }\n                this.waiting.push(f)\n                if (timeout > 0) {\n                    delay(timeout).then(() => {\n                        const idx = this.waiting.indexOf(f)\n                        if (idx >= 0) {\n                            this.waiting.splice(idx, 1)\n                            reject(new Error(\"Timeout\"))\n                        }\n                    })\n                }\n            })\n    }\n}\n\n/** @internal */\nexport class PromiseQueue {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private readonly promises: SMap<(() => Promise<any>)[]> = {}\n\n    enqueue<T>(id: string, f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            let arr = this.promises[id]\n            if (!arr) {\n                arr = this.promises[id] = []\n            }\n            const cleanup = () => {\n                arr.shift()\n                if (arr.length == 0) delete this.promises[id]\n                else arr[0]()\n            }\n            arr.push(() =>\n                f().then(\n                    v => {\n                        cleanup()\n                        resolve(v)\n                    },\n                    err => {\n                        cleanup()\n                        reject(err)\n                    }\n                )\n            )\n            if (arr.length == 1) arr[0]()\n        })\n    }\n}\n\nexport function rgbToHtmlColor(rgb: number) {\n    return `#${(\"000000\" + rgb.toString(16)).slice(-6)}`\n}\n\nexport function toFullHex(n: number[]) {\n    return (\n        \"0x\" + n.map(id => (\"000000000\" + id.toString(16)).slice(-8)).join(\"\")\n    )\n}\n\nexport function toHex(bytes: ArrayLike<number>) {\n    if (!bytes) return undefined\n    let r = \"\"\n    for (let i = 0; i < bytes.length; ++i)\n        r += (\"0\" + bytes[i].toString(16)).slice(-2)\n    return r\n}\n\nexport function fromHex(hex: string) {\n    const r = new Uint8Array(hex.length >> 1)\n    for (let i = 0; i < hex.length; i += 2)\n        r[i >> 1] = parseInt(hex.slice(i, i + 2), 16)\n    return r\n}\n\nexport function isSet(v: unknown) {\n    return v !== null && v !== undefined\n}\n\nexport function toArray<T>(a: ArrayLike<T>): T[] {\n    const r: T[] = new Array(a.length)\n    for (let i = 0; i < a.length; ++i) r[i] = a[i]\n    return r\n}\n\nexport interface MutableArrayLike<T> {\n    readonly length: number\n    [n: number]: T\n}\n\nexport function hexNum(n: number): string {\n    if (isNaN(n)) return undefined\n    if (n < 0) return \"-\" + hexNum(-n)\n    return \"0x\" + n.toString(16)\n}\n\nexport function write32(buf: MutableArrayLike<number>, pos: number, v: number) {\n    buf[pos + 0] = (v >> 0) & 0xff\n    buf[pos + 1] = (v >> 8) & 0xff\n    buf[pos + 2] = (v >> 16) & 0xff\n    buf[pos + 3] = (v >> 24) & 0xff\n}\n\nexport function write16(buf: MutableArrayLike<number>, pos: number, v: number) {\n    buf[pos + 0] = (v >> 0) & 0xff\n    buf[pos + 1] = (v >> 8) & 0xff\n}\n\nexport function read32(buf: ArrayLike<number>, pos: number) {\n    return (\n        (buf[pos] |\n            (buf[pos + 1] << 8) |\n            (buf[pos + 2] << 16) |\n            (buf[pos + 3] << 24)) >>>\n        0\n    )\n}\n\nexport function read16(buf: ArrayLike<number>, pos: number) {\n    return buf[pos] | (buf[pos + 1] << 8)\n}\n\nexport function encodeU32LE(words: number[]) {\n    const r = new Uint8Array(words.length * 4)\n    for (let i = 0; i < words.length; ++i) write32(r, i * 4, words[i])\n    return r\n}\n\nexport function decodeU32LE(buf: Uint8Array) {\n    const res: number[] = []\n    for (let i = 0; i < buf.length; i += 4) res.push(read32(buf, i))\n    return res\n}\n\nexport function isBufferEmpty(data: Uint8Array): boolean {\n    if (!data) return true\n    const n = data.length\n    for (let i = 0; i < n; ++i) {\n        if (data[i]) return false\n    }\n    return true\n}\n\nexport function bufferToString(buf: Uint8Array) {\n    return fromUTF8(uint8ArrayToString(buf))\n}\n\nexport function stringToBuffer(str: string) {\n    return stringToUint8Array(toUTF8(str))\n}\n\nexport function bufferConcat(a: Uint8Array, b: Uint8Array) {\n    const r = new Uint8Array(a.length + b.length)\n    r.set(a, 0)\n    r.set(b, a.length)\n    return r\n}\n\nexport function bufferConcatMany(bufs: Uint8Array[]) {\n    let sz = 0\n    for (const buf of bufs) sz += buf.length\n    const r = new Uint8Array(sz)\n    sz = 0\n    for (const buf of bufs) {\n        r.set(buf, sz)\n        sz += buf.length\n    }\n    return r\n}\n\nexport function arrayConcatMany<T>(arrs: T[][]): T[] {\n    if (!arrs) return undefined\n\n    // weed out empty array\n    arrs = arrs.filter(a => !!a?.length)\n\n    let sz = 0\n    for (const buf of arrs) sz += buf.length\n    const r: T[] = new Array(sz)\n    sz = 0\n    for (const arr of arrs) {\n        for (let i = 0; i < arr.length; ++i) r[i + sz] = arr[i]\n        sz += arr.length\n    }\n    return r\n}\n\nexport function jsonCopyFrom<T>(trg: T, src: T) {\n    const v = clone(src)\n    for (const k of Object.keys(src)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-extra-semi\n        ;(trg as any)[k] = (v as any)[k]\n    }\n}\nexport function assert(\n    cond: boolean,\n    msg = \"Assertion failed\",\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    debugData?: any\n) {\n    if (!cond) {\n        if (debugData) console.debug(`assertion filed ${msg}`, debugData)\n        if (Flags.diagnostics)\n            // eslint-disable-next-line no-debugger\n            debugger\n        throw new Error(msg)\n    }\n}\n\nexport function flatClone<T extends unknown>(obj: T | null): T {\n    if (obj == null) return null\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const r: any = {}\n    Object.keys(obj).forEach(k => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        r[k] = (obj as any)[k]\n    })\n    return r\n}\n\nexport function clone<T>(v: T): T {\n    if (v == null) return null\n    return JSON.parse(JSON.stringify(v))\n}\n\nexport function throttle(handler: () => void, delay: number): () => void {\n    let enableCall = true\n    return function () {\n        if (!enableCall) return\n        enableCall = false\n        handler()\n        setTimeout(() => (enableCall = true), delay)\n    }\n}\n\nexport interface Signal {\n    signalled: Promise<boolean>\n    signal: () => void\n}\nexport function signal(): Signal {\n    let resolve: (v: boolean) => void\n    return {\n        signalled: new Promise(r => {\n            resolve = r\n        }),\n        signal: () => resolve(true),\n    }\n}\n\nexport function readBlobToUint8Array(blob: Blob): Promise<Uint8Array> {\n    if (blob?.arrayBuffer) {\n        return blob.arrayBuffer().then(data => new Uint8Array(data))\n    }\n\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.onload = () => {\n            resolve(new Uint8Array(fileReader.result as ArrayBuffer))\n        }\n        fileReader.onerror = e => {\n            console.log(e)\n            reject(e)\n        }\n        try {\n            fileReader.readAsArrayBuffer(blob)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nexport function readBlobToText(blob: Blob): Promise<string> {\n    if (blob.text) {\n        return blob.text()\n    }\n\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.onload = () => resolve(fileReader.result as string)\n        fileReader.onerror = e => {\n            console.log(e)\n            reject(e)\n        }\n        try {\n            fileReader.readAsText(blob)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nexport function debounce(handler: () => void, delay: number): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId: any\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId)\n        }\n        timeOutId = setTimeout(async () => {\n            handler()\n        }, delay)\n    }\n}\n\nexport function debounceAsync(\n    handler: () => Promise<void>,\n    delay: number\n): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeOutId: any\n    return function () {\n        if (timeOutId) {\n            clearTimeout(timeOutId)\n        }\n        timeOutId = setTimeout(async () => {\n            await handler()\n        }, delay)\n    }\n}\n\nexport function JSONTryParse(src: string) {\n    if (src === undefined || src === null) return src\n\n    try {\n        return JSON.parse(src)\n    } catch (e) {\n        return undefined\n    }\n}\n\nexport function roundWithPrecision(x: number, digits: number): number {\n    digits = digits | 0\n    // invalid digits input\n    if (digits <= 0) return Math.round(x)\n    if (x == 0) return 0\n    let r = 0\n    while (r == 0 && digits < 21) {\n        const d = Math.pow(10, digits++)\n        r = Math.round(x * d + Number.EPSILON) / d\n    }\n    return r\n}\n\nexport function randomRange(min: number, max: number) {\n    return Math.round(Math.random() * (max - min) + min)\n}\n\nexport function unique(values: string[]): string[] {\n    return Array.from(new Set(values).keys())\n}\n\nexport function uniqueMap<T, U>(\n    values: T[],\n    id: (value: T) => string,\n    converter: (value: T) => U\n) {\n    const r: SMap<T> = {}\n    for (let i = 0; i < values.length; ++i) {\n        const value = values[i]\n        const idv = id(value)\n        if (!r[idv]) {\n            r[idv] = value\n        }\n    }\n    return Object.values(r).map(converter)\n}\n\nexport function toMap<T, V>(\n    a: T[],\n    keyConverter: (value: T, index: number) => string,\n    valueConverter: (value: T, index: number) => V\n): SMap<V> {\n    const m: SMap<V> = {}\n    if (a)\n        for (let i = 0; i < a.length; ++i) {\n            const key = keyConverter(a[i], i)\n            if (key === undefined || key === null) continue\n            m[key] = valueConverter(a[i], i)\n        }\n    return m\n}\n\nexport function ellipseJoin(\n    values: string[],\n    maxChars: number,\n    ellipse = \"...\"\n) {\n    let r = \"\"\n    for (let i = 0; i < values.length && r.length < maxChars; ++i) {\n        if (r) r += \", \"\n        r += values[i]\n    }\n    if (r.length > maxChars) return r.slice(0, maxChars) + ellipse\n    else return r\n}\n\nexport function arrayShuffle<T>(a: T[]): T[] {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[a[i], a[j]] = [a[j], a[i]]\n    }\n    return a\n}\n\nexport function uniqueName(\n    names: string[],\n    name: string,\n    separator = \"\"\n): string {\n    if (names.indexOf(name) < 0) return name\n    // allocate names\n    let count = 2\n    while (names.indexOf(`${name}${separator}${count}`) > -1) count++\n    return `${name}${separator}${count}`\n}\n\nexport function groupBy<T>(list: T[], key: (value: T) => string): SMap<T[]> {\n    if (!list) return {}\n\n    const r: SMap<T[]> = {}\n    list.forEach(item => {\n        const k = key(item)\n        const a = r[k] || (r[k] = [])\n        a.push(item)\n    })\n    return r\n}\n\nexport function pick(...values: number[]) {\n    return values?.find(x => x !== undefined)\n}\n\n/**\n * Applies filters and returns array of [yays, nays]\n * @param values\n * @param condition\n */\nexport function splitFilter<T>(\n    values: ArrayLike<T>,\n    condition: (t: T) => boolean\n): [T[], T[]] {\n    const yays: T[] = []\n    const nays: T[] = []\n    const n = values.length\n    for (let i = 0; i < n; ++i) {\n        const v = values[i]\n        if (condition(v)) yays.push(v)\n        else nays.push(v)\n    }\n    return [yays, nays]\n}\n\nexport function range(end: number): number[] {\n    return Array(end)\n        .fill(0)\n        .map((_, i) => i)\n}\n\nexport function toggleBit(data: Uint8Array, bitindex: number) {\n    // find bit to flip\n    let byte = data[bitindex >> 3]\n    const bit = bitindex % 8\n    const on = 1 === ((byte >> bit) & 1)\n    // flip bit\n    if (on) {\n        byte &= ~(1 << bit)\n    } else {\n        byte |= 1 << bit\n    }\n    // save\n    data[bitindex >> 3] = byte\n}\n","import { read16, read32 } from \"./utils\"\n\n/** @internal */\nexport enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    UInt64LE = 17,\n    UInt64BE = 18,\n    Int64LE = 19,\n    Int64BE = 20,\n}\n\nfunction fmtInfoCore(fmt: NumberFormat) {\n    switch (fmt) {\n        case NumberFormat.Int8LE:\n            return -1\n        case NumberFormat.UInt8LE:\n            return 1\n        case NumberFormat.Int16LE:\n            return -2\n        case NumberFormat.UInt16LE:\n            return 2\n        case NumberFormat.Int32LE:\n            return -4\n        case NumberFormat.UInt32LE:\n            return 4\n        case NumberFormat.Int64LE:\n            return -8\n        case NumberFormat.UInt64LE:\n            return 8\n        case NumberFormat.Int8BE:\n            return -10\n        case NumberFormat.UInt8BE:\n            return 10\n        case NumberFormat.Int16BE:\n            return -20\n        case NumberFormat.UInt16BE:\n            return 20\n        case NumberFormat.Int32BE:\n            return -40\n        case NumberFormat.UInt32BE:\n            return 40\n        case NumberFormat.Int64BE:\n            return -80\n        case NumberFormat.UInt64BE:\n            return 80\n\n        case NumberFormat.Float32LE:\n            return 4\n        case NumberFormat.Float32BE:\n            return 40\n        case NumberFormat.Float64LE:\n            return 8\n        case NumberFormat.Float64BE:\n            return 80\n        default:\n            throw new Error(\"unknown format\")\n    }\n}\n\nfunction fmtInfo(fmt: NumberFormat) {\n    let size = fmtInfoCore(fmt)\n    let signed = false\n    if (size < 0) {\n        signed = true\n        size = -size\n    }\n    let swap = false\n    if (size >= 10) {\n        swap = true\n        size /= 10\n    }\n    let isFloat = false\n    switch (fmt) {\n        case NumberFormat.Float32LE:\n        case NumberFormat.Float32BE:\n        case NumberFormat.Float64LE:\n        case NumberFormat.Float64BE:\n            isFloat = true\n            break\n    }\n    return { size, signed, swap, isFloat }\n}\n\n/**\n * Get the size in bytes of specified number format.\n */\nexport function sizeOfNumberFormat(format: NumberFormat) {\n    switch (format) {\n        case NumberFormat.Int8LE:\n        case NumberFormat.UInt8LE:\n        case NumberFormat.Int8BE:\n        case NumberFormat.UInt8BE:\n            return 1\n        case NumberFormat.Int16LE:\n        case NumberFormat.UInt16LE:\n        case NumberFormat.Int16BE:\n        case NumberFormat.UInt16BE:\n            return 2\n        case NumberFormat.Int32LE:\n        case NumberFormat.Int32BE:\n        case NumberFormat.UInt32BE:\n        case NumberFormat.UInt32LE:\n        case NumberFormat.Float32BE:\n        case NumberFormat.Float32LE:\n            return 4\n        case NumberFormat.UInt64BE:\n        case NumberFormat.Int64BE:\n        case NumberFormat.UInt64LE:\n        case NumberFormat.Int64LE:\n        case NumberFormat.Float64BE:\n        case NumberFormat.Float64LE:\n            return 8\n    }\n    return 0\n}\n\nexport function getNumber(\n    buf: ArrayLike<number>,\n    fmt: NumberFormat,\n    offset: number\n) {\n    switch (fmt) {\n        case NumberFormat.UInt8BE:\n        case NumberFormat.UInt8LE:\n            return buf[offset]\n        case NumberFormat.Int8BE:\n        case NumberFormat.Int8LE:\n            return (buf[offset] << 24) >> 24\n        case NumberFormat.UInt16LE:\n            return read16(buf, offset)\n        case NumberFormat.Int16LE:\n            return (read16(buf, offset) << 16) >> 16\n        case NumberFormat.UInt32LE:\n            return read32(buf, offset)\n        case NumberFormat.Int32LE:\n            return read32(buf, offset) >> 0\n        case NumberFormat.UInt64LE:\n            return read32(buf, offset) + read32(buf, offset + 4) * 0x100000000\n        case NumberFormat.Int64LE:\n            return (\n                read32(buf, offset) +\n                (read32(buf, offset + 4) >> 0) * 0x100000000\n            )\n        default: {\n            const inf = fmtInfo(fmt)\n            if (inf.isFloat) {\n                const arr = new Uint8Array(inf.size)\n                for (let i = 0; i < inf.size; ++i) {\n                    arr[i] = buf[offset + i]\n                }\n                if (inf.swap) arr.reverse()\n                if (inf.size == 4) return new Float32Array(arr.buffer)[0]\n                else return new Float64Array(arr.buffer)[0]\n            }\n            throw new Error(\"unsupported fmt:\" + fmt)\n        }\n    }\n}\n\nexport function setNumber(\n    buf: Uint8Array,\n    fmt: NumberFormat,\n    offset: number,\n    r: number\n) {\n    const inf = fmtInfo(fmt)\n    if (inf.isFloat) {\n        const arr = new Uint8Array(inf.size)\n        if (inf.size == 4) new Float32Array(arr.buffer)[0] = r\n        else new Float64Array(arr.buffer)[0] = r\n        if (inf.swap) arr.reverse()\n        for (let i = 0; i < inf.size; ++i) {\n            buf[offset + i] = arr[i]\n        }\n        return\n    }\n\n    for (let i = 0; i < inf.size; ++i) {\n        const off = !inf.swap ? offset + i : offset + inf.size - i - 1\n        buf[off] = r & 0xff\n        r >>= 8\n    }\n}\n\nexport function uintOfBuffer(data: Uint8Array) {\n    let fmt: NumberFormat\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = NumberFormat.UInt8LE\n            break\n        case 2:\n        case 3:\n            fmt = NumberFormat.UInt16LE\n            break\n        default:\n            fmt = NumberFormat.UInt32LE\n            break\n    }\n    return getNumber(data, fmt, 0)\n}\n\nexport function intOfBuffer(data: Uint8Array) {\n    let fmt: NumberFormat\n    switch (data.length) {\n        case 0:\n        case 1:\n            fmt = NumberFormat.Int8LE\n            break\n        case 2:\n        case 3:\n            fmt = NumberFormat.Int16LE\n            break\n        default:\n            fmt = NumberFormat.Int32LE\n            break\n    }\n    return getNumber(data, fmt, 0)\n}\n\nexport function bufferToArray(data: Uint8Array, fmt: NumberFormat) {\n    const res: number[] = []\n    const sz = sizeOfNumberFormat(fmt)\n    for (let off = 0; off <= data.length - sz; off += sz)\n        res.push(getNumber(data, fmt, off))\n    return res\n}\n\nexport function concatBufferArray(chunks: Uint8Array[]) {\n    let sz = 0\n    for (const ch of chunks) sz += ch.length\n    const r = new Uint8Array(sz)\n    sz = 0\n    for (const ch of chunks) {\n        r.set(ch, sz)\n        sz += ch.length\n    }\n    return r\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../jacdac-spec/spectool/jdspec.d.ts\" />\n\nimport { NumberFormat } from \"./buffer\"\nimport serviceSpecificationData from \"../../jacdac-spec/dist/services.json\"\nimport deviceRegistryData from \"../../jacdac-spec/dist/devices.json\"\nimport { fromHex, toHex } from \"./utils\"\nimport {\n    SystemEvent,\n    SystemReg,\n    SensorReg,\n    SRV_CONTROL,\n    SRV_ROLE_MANAGER,\n    SRV_SETTINGS,\n    SRV_BOOTLOADER,\n    SRV_LOGGER,\n    SRV_INFRASTRUCTURE,\n    SRV_PROTO_TEST,\n} from \"./constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet _serviceSpecifications: jdspec.ServiceSpec[] =\n    serviceSpecificationData as any\nlet _serviceSpecificationMap: Record<number, jdspec.ServiceSpec> = undefined\nlet _customServiceSpecifications: Record<string, jdspec.ServiceSpec> = {}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _deviceRegistry: jdspec.DeviceSpec[] = deviceRegistryData as any\n\n/**\n * Override built-in service specifications\n * @param specs\n * @category Specification\n */\nexport function loadServiceSpecifications(specs: jdspec.ServiceSpec[]) {\n    _serviceSpecifications = specs?.slice(0) || []\n    _serviceSpecificationMap = undefined\n}\n\n/**\n * Adds a custom service specification\n * @param service\n * @category Specification\n */\nexport function addCustomServiceSpecification(service: jdspec.ServiceSpec) {\n    if (service && service.classIdentifier) {\n        _customServiceSpecifications[service.classIdentifier] = service\n        _serviceSpecificationMap = undefined\n    }\n}\n\n/**\n * Clears any custom service specification\n * @category Specification\n */\nexport function clearCustomServiceSpecifications() {\n    _customServiceSpecifications = {}\n    _serviceSpecificationMap = undefined\n}\n\n/**\n * Returns a map from service short ids to service specifications\n * @category Specification\n */\nexport function serviceMap(): Record<string, jdspec.ServiceSpec> {\n    const m: Record<string, jdspec.ServiceSpec> = {}\n    _serviceSpecifications.forEach(spec => (m[spec.shortId] = spec))\n    return m\n}\n\n/**\n * Returns the list of service specifications\n * @category Specification\n */\nexport function serviceSpecifications() {\n    return _serviceSpecifications.slice(0)\n}\n\n/**\n * Resolve the device specification from the product identiier\n * @category Specification\n */\nexport function deviceSpecificationFromProductIdentifier(\n    productIdentifier: number\n): jdspec.DeviceSpec {\n    if (isNaN(productIdentifier)) return undefined\n\n    const spec = _deviceRegistry.find(\n        spec => spec.productIdentifiers?.indexOf(productIdentifier) > -1\n    )\n    return spec\n}\n\n/**\n * @internal\n */\nexport function deviceSpecificationFromIdentifier(\n    id: string\n): jdspec.DeviceSpec {\n    if (id === undefined) return undefined\n\n    const spec = _deviceRegistry.find(spec => spec.id === id)\n    return spec\n}\n\n/**\n * Gets the list of devices that use this service class\n * @param serviceClass\n * @category Specification\n */\nexport function deviceSpecificationsForService(\n    serviceClass: number\n): jdspec.DeviceSpec[] {\n    if (isNaN(serviceClass)) return undefined\n    return _deviceRegistry.filter(\n        spec => spec.services?.indexOf(serviceClass) > -1\n    )\n}\n\n/**\n * Gets the list of device specifications\n * @returns\n * @category Specification\n */\nexport function deviceSpecifications(options?: {\n    includeDeprecated?: boolean\n    includeExperimental?: boolean\n}): jdspec.DeviceSpec[] {\n    const { includeDeprecated, includeExperimental } = options || {}\n    let r = _deviceRegistry.slice(0)\n    if (!includeDeprecated) r = r.filter(d => d.status !== \"deprecated\")\n    if (!includeExperimental) r = r.filter(d => d.status !== \"experimental\")\n    return r\n}\n\n/**\n * @internal\n */\nexport function identifierToUrlPath(id: string) {\n    // compiled web site does not like . in path\n    return id?.replace(/-/g, \"/\").replace(/\\./g, \"\").toLowerCase()\n}\n\n/**\n * Checks if classIdentifier is compatible with requiredClassIdentifier\n * @category Specification\n */\nexport function isInstanceOf(\n    classIdentifier: number,\n    requiredClassIdentifier: number\n): boolean {\n    // garbage data\n    if (isNaN(classIdentifier)) return false\n\n    // direct hit\n    if (classIdentifier === requiredClassIdentifier) return true\n\n    // lookup inheritance chain\n    const classSpec = serviceSpecificationFromClassIdentifier(classIdentifier)\n    return !!classSpec?.extends?.some(extend => {\n        const extendSpec = serviceSpecificationFromName(extend)\n        return (\n            !!extendSpec &&\n            isInstanceOf(extendSpec.classIdentifier, requiredClassIdentifier)\n        )\n    })\n}\n\n/**\n * Checks if the service supports the Jacdac infrastructure\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isInfrastructure(spec: jdspec.ServiceSpec) {\n    return (\n        spec &&\n        ([\n            SRV_CONTROL,\n            SRV_ROLE_MANAGER,\n            SRV_LOGGER,\n            SRV_SETTINGS,\n            SRV_BOOTLOADER,\n            SRV_PROTO_TEST,\n            SRV_INFRASTRUCTURE,\n        ].indexOf(spec.classIdentifier) > -1 ||\n            spec.shortId[0] === \"_\")\n    )\n}\n\n/**\n * Looks up a service specification by name\n * @param shortId\n * @category Specification\n */\nexport function serviceSpecificationFromName(\n    shortId: string\n): jdspec.ServiceSpec {\n    if (!shortId) return undefined\n    return (\n        _serviceSpecifications.find(s => s.shortId === shortId) ||\n        Object.values(_customServiceSpecifications).find(\n            ser => ser.shortId === shortId\n        )\n    )\n}\n\n/**\n * Looks up a service specification by class\n * @param classIdentifier\n * @category Specification\n */\nexport function serviceSpecificationFromClassIdentifier(\n    classIdentifier: number\n): jdspec.ServiceSpec {\n    if (isNaN(classIdentifier)) return undefined\n    // try lookup cache\n    let srv = _serviceSpecificationMap?.[classIdentifier]\n    if (srv) return srv\n\n    // resolve\n    srv =\n        _serviceSpecifications.find(\n            s => s.classIdentifier === classIdentifier\n        ) || _customServiceSpecifications[classIdentifier]\n    if (srv) {\n        if (!_serviceSpecificationMap) _serviceSpecificationMap = {}\n        _serviceSpecificationMap[classIdentifier] = srv\n    }\n    return srv\n}\n\n/**\n * Indicates if the specified service is a sensor\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isSensor(spec: jdspec.ServiceSpec): boolean {\n    return (\n        spec &&\n        spec.packets.some(pkt => isReading(pkt)) &&\n        spec.packets.some(\n            pkt => pkt.identifier == SensorReg.StreamingSamples\n        ) &&\n        spec.packets.some(pkt => pkt.identifier == SensorReg.StreamingInterval)\n    )\n}\n\n/**\n * Indicates if the specified service is an actuator\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isActuator(spec: jdspec.ServiceSpec): boolean {\n    return (\n        spec &&\n        spec.packets.some(pkt => pkt.identifier === SystemReg.Value) &&\n        spec.packets.some(pkt => pkt.identifier === SystemReg.Intensity)\n    )\n}\n\n/**\n * Indicates if the packet information is a register\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isRegister(pkt: jdspec.PacketInfo) {\n    return pkt && (pkt.kind == \"const\" || pkt.kind == \"ro\" || pkt.kind == \"rw\")\n}\n\n/**\n * Indicates if the packet information is a ``reading`` register\n * @param spec\n * @returns\n * @category Specification\n */\nexport function isReading(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"ro\" && pkt.identifier == SystemReg.Reading\n}\n\nconst ignoredRegister = [\n    SystemReg.StatusCode,\n    SystemReg.InstanceName,\n    SystemReg.StreamingInterval,\n    SystemReg.StreamingPreferredInterval,\n    SystemReg.StreamingSamples,\n    SystemReg.ReadingError,\n    SystemReg.ReadingResolution,\n    SystemReg.MinReading,\n    SystemReg.MaxReading,\n    SystemReg.MinValue,\n    SystemReg.MaxValue,\n    SystemReg.MaxPower,\n]\n/**\n * Indicates if the register is usable from a high-level programming environment.\n * @category Specification\n */\nexport function isHighLevelRegister(pkt: jdspec.PacketInfo) {\n    return (\n        isRegister(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredRegister.indexOf(pkt.identifier) < 0\n    )\n}\n\nconst ignoredEvents = [SystemEvent.StatusCodeChanged]\n/**\n * Indicates if the event is usable from a high-level programming environment.\n * @category Specification\n */\nexport function isHighLevelEvent(pkt: jdspec.PacketInfo) {\n    return (\n        isEvent(pkt) &&\n        !pkt.lowLevel &&\n        !pkt.internal &&\n        ignoredEvents.indexOf(pkt.identifier) < 0\n    )\n}\n\n/**\n * Indicate if the register code is an auxilliary register to support streaming.\n * @param code\n * @returns\n * @category Specification\n */\nexport function isOptionalReadingRegisterCode(code: number) {\n    const regs = [\n        SystemReg.MinReading,\n        SystemReg.MaxReading,\n        SystemReg.ReadingError,\n        SystemReg.ReadingResolution,\n        SystemReg.StreamingPreferredInterval,\n    ]\n    return regs.indexOf(code) > -1\n}\n\n/**\n * Indicates if the packet info represents an ``intensity`` register\n * @category Specification\n */\nexport function isIntensity(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == SystemReg.Intensity\n}\n\n/**\n * Indicates if the packet info represents a ``value`` register\n * @category Specification\n */\nexport function isValue(pkt: jdspec.PacketInfo) {\n    return pkt && pkt.kind == \"rw\" && pkt.identifier == SystemReg.Value\n}\n\n/**\n * Indicates if the packet info represents a ``intensity`` or a ``value`` register\n * @category Specification\n */\nexport function isValueOrIntensity(pkt: jdspec.PacketInfo) {\n    return (\n        pkt &&\n        pkt.kind == \"rw\" &&\n        (pkt.identifier == SystemReg.Value ||\n            pkt.identifier == SystemReg.Intensity)\n    )\n}\n\n/**\n * Indicates if the packet info represents an ``const`` register\n * @category Specification\n */\nexport function isConstRegister(pkt: jdspec.PacketInfo) {\n    return pkt?.kind == \"const\"\n}\n\n/**\n * Indicates if the packet info represents an ``event``\n * @category Specification\n */\nexport function isEvent(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"event\"\n}\n\n/**\n * Indicates if the packet info represents a ``command``\n * @category Specification\n */\nexport function isCommand(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"command\"\n}\n\n/**\n * Indicates if the packet info represents a ``pipe_report``\n * @category Specification\n */\nexport function isPipeReport(pkt: jdspec.PacketInfo) {\n    return pkt.kind == \"pipe_report\"\n}\n\n/**\n * Indicates if the `report` packet is the report specication of the `cmd` command.\n * @category Specification\n */\nexport function isReportOf(cmd: jdspec.PacketInfo, report: jdspec.PacketInfo) {\n    return (\n        report.secondary &&\n        report.kind == \"report\" &&\n        cmd.kind == \"command\" &&\n        cmd.name == report.name\n    )\n}\n\n/**\n * Indicates if the `report` packet is the *pipe* report specication of the `cmd` command.\n * @category Specification\n */\nexport function isPipeReportOf(\n    cmd: jdspec.PacketInfo,\n    pipeReport: jdspec.PacketInfo\n) {\n    return (\n        pipeReport.kind == \"pipe_report\" &&\n        cmd.kind == \"command\" &&\n        cmd.pipeType &&\n        cmd.pipeType === pipeReport.pipeType\n    )\n}\n\n/**\n * @internal\n */\nexport function isIntegerType(tp: string) {\n    return /^[ui]\\d+(\\.|$)/.test(tp) || tp == \"pipe_port\" || tp == \"bool\"\n}\n\n/**\n * @internal\n */\nexport function numberFormatFromStorageType(tp: jdspec.StorageType) {\n    switch (tp) {\n        case -1:\n            return NumberFormat.Int8LE\n        case 1:\n            return NumberFormat.UInt8LE\n        case -2:\n            return NumberFormat.Int16LE\n        case 2:\n            return NumberFormat.UInt16LE\n        case -4:\n            return NumberFormat.Int32LE\n        case 4:\n            return NumberFormat.UInt32LE\n        case -8:\n            return NumberFormat.Int64LE\n        case 8:\n            return NumberFormat.UInt64LE\n        case 0:\n            return null\n        default:\n            return null\n    }\n}\n\n/**\n * @internal\n */\nexport function numberFormatToStorageType(nf: NumberFormat) {\n    switch (nf) {\n        case NumberFormat.Int8LE:\n            return -1\n        case NumberFormat.UInt8LE:\n            return 1\n        case NumberFormat.Int16LE:\n            return -2\n        case NumberFormat.UInt16LE:\n            return 2\n        case NumberFormat.Int32LE:\n            return -4\n        case NumberFormat.UInt32LE:\n            return 4\n        case NumberFormat.Int64LE:\n            return -8\n        case NumberFormat.UInt64LE:\n            return 8\n        default:\n            return null\n    }\n}\n\n/**\n * @internal\n */\nexport function scaleIntToFloat(v: number, info: jdspec.PacketMember) {\n    if (!info.shift) return v\n    if (info.shift < 0) return v * (1 << -info.shift)\n    else return v / (1 << info.shift)\n}\n\n/**\n * @internal\n */\nexport function scaleFloatToInt(v: number, info: jdspec.PacketMember) {\n    if (!info.shift) return v\n    if (info.shift < 0) return Math.round(v / (1 << -info.shift))\n    else return Math.round(v * (1 << info.shift))\n}\n\n/**\n * @internal\n */\nexport function storageTypeRange(tp: jdspec.StorageType): [number, number] {\n    if (tp == 0) throw new Error(\"no range for 0\")\n    if (tp < 0) {\n        const v = Math.pow(2, -tp * 8 - 1)\n        return [-v, v - 1]\n    } else {\n        const v = Math.pow(2, tp * 8)\n        return [0, v - 1]\n    }\n}\n\n/**\n * @internal\n */\nexport function clampToStorage(v: number, tp: jdspec.StorageType) {\n    const [min, max] = storageTypeRange(tp)\n    if (isNaN(v)) return 0\n    if (v < min) return min\n    if (v > max) return max\n    return v\n}\n\n/**\n * @internal\n */\nexport function memberValueToString(\n    value: any,\n    info: jdspec.PacketMember\n): string {\n    if (value === undefined || value === null) return \"\"\n    switch (info.type) {\n        case \"bytes\":\n            return toHex(value)\n        case \"string\":\n            return value\n        default:\n            return \"\" + value\n    }\n}\n\n/**\n * @internal\n */\nexport function tryParseMemberValue(\n    text: string,\n    info: jdspec.PacketMember\n): { value?: any; error?: string } {\n    if (!text) return {}\n\n    if (info.type === \"string\") return { value: text }\n    else if (info.type === \"pipe\") return {}\n    // not supported\n    else if (info.type === \"bytes\") {\n        try {\n            return { value: fromHex(text) }\n        } catch (e) {\n            return {\n                error: \"invalid hexadecimal format\",\n            }\n        }\n    } else {\n        const n = isIntegerType(info.type) ? parseInt(text) : parseFloat(text)\n        if (isNaN(n)) return { error: \"invalid format\" }\n        else return { value: n }\n    }\n}\n\n/**\n * Parses a device identifier into a buffer, returns undefined if invalid\n * @param id\n * @returns\n * @category Specification\n */\nexport function parseDeviceId(id: string): Uint8Array {\n    if (!id) return undefined\n    id = id.replace(/\\s/g, \"\")\n    if (id.length != 16 || !/^[a-f0-9]+$/i.test(id)) return undefined\n    return fromHex(id)\n}\n","import {\n    getNumber,\n    NumberFormat,\n    setNumber,\n    sizeOfNumberFormat,\n} from \"./buffer\"\nimport { clampToStorage, numberFormatToStorageType } from \"./spec\"\nimport { bufferEq, bufferToString, stringToBuffer } from \"./utils\"\n\n/**\n * @category Data Packing\n */\nexport type PackedSimpleValue = number | boolean | string | Uint8Array\n\n/**\n * @category Data Packing\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PackedValues = any[]\n\n// ASCII codes of characters\nconst ch_b = 98\nconst ch_i = 105\nconst ch_r = 114\nconst ch_s = 115\nconst ch_u = 117\nconst ch_x = 120\nconst ch_z = 122\n//const ch_0 = 48\n//const ch_9 = 57\nconst ch_colon = 58\nconst ch_sq_open = 91\nconst ch_sq_close = 93\n\nfunction numberFormatOfType(tp: string): NumberFormat {\n    switch (tp) {\n        case \"u8\":\n            return NumberFormat.UInt8LE\n        case \"u16\":\n            return NumberFormat.UInt16LE\n        case \"u32\":\n            return NumberFormat.UInt32LE\n        case \"i8\":\n            return NumberFormat.Int8LE\n        case \"i16\":\n            return NumberFormat.Int16LE\n        case \"i32\":\n            return NumberFormat.Int32LE\n        case \"f32\":\n            return NumberFormat.Float32LE\n        case \"f64\":\n            return NumberFormat.Float64LE\n        case \"i64\":\n            return NumberFormat.Int64LE\n        case \"u64\":\n            return NumberFormat.UInt64LE\n        default:\n            return null\n    }\n}\n\nfunction bufferSlice(buf: Uint8Array, start: number, end: number) {\n    return buf.slice(start, end)\n}\n\nclass TokenParser {\n    c0: number\n    size: number\n    div: number\n    fp = 0\n    nfmt: NumberFormat\n    word: string\n    isArray: boolean\n\n    constructor(public fmt: string) {}\n\n    parse() {\n        this.div = 1\n        this.isArray = false\n\n        const fmt = this.fmt\n        while (this.fp < fmt.length) {\n            let endp = this.fp\n            while (endp < fmt.length && fmt.charCodeAt(endp) != 32) endp++\n            let word = fmt.slice(this.fp, endp)\n            this.fp = endp + 1\n            if (!word) continue\n\n            const dotIdx = word.indexOf(\".\")\n            let c0 = word.charCodeAt(0)\n            // \"u10.6\" -> \"u16\", div = 1 << 6\n            if ((c0 == ch_i || c0 == ch_u) && dotIdx >= 0) {\n                const sz0 = parseInt(word.slice(1, dotIdx))\n                const sz1 = parseInt(word.slice(dotIdx + 1))\n                word = word[0] + (sz0 + sz1)\n                this.div = 1 << sz1\n            }\n\n            const c1 = word.charCodeAt(1)\n            if (c1 == ch_sq_open) {\n                this.size = parseInt(word.slice(2))\n            } else {\n                this.size = -1\n            }\n\n            if (\n                word.charCodeAt(word.length - 1) == ch_sq_close &&\n                word.charCodeAt(word.length - 2) == ch_sq_open\n            ) {\n                word = word.slice(0, -2)\n                this.isArray = true\n            }\n\n            this.nfmt = numberFormatOfType(word)\n            this.word = word\n\n            if (this.nfmt == null) {\n                if (c0 == ch_r) {\n                    if (c1 != ch_colon) c0 = 0\n                } else if (c0 == ch_s || c0 == ch_b || c0 == ch_x) {\n                    if (word.length != 1 && this.size == -1) c0 = 0\n                } else if (c0 == ch_z) {\n                    if (word.length != 1) c0 = 0\n                } else {\n                    c0 = 0\n                }\n                if (c0 == 0) throw new Error(`invalid format: ${word}`)\n                this.c0 = c0\n            } else {\n                this.size = sizeOfNumberFormat(this.nfmt)\n                this.c0 = -1\n            }\n\n            return true\n        }\n        return false\n    }\n}\n\nfunction jdunpackCore(buf: Uint8Array, fmt: string, repeat: number) {\n    const repeatRes: any[][] = repeat ? [] : null\n    let res: any[] = []\n    let off = 0\n    let fp0 = 0\n    const parser = new TokenParser(fmt)\n    if (repeat && buf.length == 0) return []\n    while (parser.parse()) {\n        if (parser.isArray && !repeat) {\n            res.push(\n                jdunpackCore(\n                    bufferSlice(buf, off, buf.length),\n                    fmt.slice(fp0),\n                    1\n                )\n            )\n            return res\n        }\n\n        fp0 = parser.fp\n        let sz = parser.size\n        const c0 = parser.c0\n        if (c0 == ch_z) {\n            let endoff = off\n            while (endoff < buf.length && buf[endoff] != 0) endoff++\n            sz = endoff - off\n        } else if (sz < 0) {\n            sz = buf.length - off\n        }\n\n        if (parser.nfmt !== null) {\n            let v = getNumber(buf, parser.nfmt, off)\n            if (parser.div != 1) v /= parser.div\n            res.push(v)\n            off += parser.size\n        } else {\n            const subbuf = bufferSlice(buf, off, off + sz)\n            if (c0 == ch_z || c0 == ch_s) {\n                let zerop = 0\n                while (zerop < subbuf.length && subbuf[zerop] != 0) zerop++\n                res.push(bufferToString(bufferSlice(subbuf, 0, zerop)))\n            } else if (c0 == ch_b) {\n                res.push(subbuf)\n            } else if (c0 == ch_x) {\n                // skip padding\n            } else if (c0 == ch_r) {\n                res.push(jdunpackCore(subbuf, fmt.slice(fp0), 2))\n                break\n            } else {\n                throw new Error(`whoops`)\n            }\n            off += subbuf.length\n            if (c0 == ch_z) off++\n        }\n\n        if (repeat && parser.fp >= fmt.length) {\n            parser.fp = 0\n            if (repeat == 2) {\n                repeatRes.push(res)\n                res = []\n            }\n            if (off >= buf.length) break\n        }\n    }\n\n    if (repeat == 2) {\n        if (res.length) repeatRes.push(res)\n        return repeatRes\n    } else {\n        return res\n    }\n}\n\n/**\n Unpacks a byte buffer into structured data as specified in the format string.\n See jdpack for format string reference.\n @category Data Packing\n*/\nexport function jdunpack<T extends PackedValues>(\n    buf: Uint8Array,\n    fmt: string\n): T {\n    if (!buf || !fmt) return undefined\n\n    // hot path for buffers\n    if (fmt === \"b\") return [buf.slice(0)] as T\n    // hot path\n    const nf = numberFormatOfType(fmt)\n    if (nf !== null) {\n        const sz = sizeOfNumberFormat(nf)\n        if (buf.length < sz)\n            throw new Error(\n                `size mistmatch, expected ${fmt} (${sz} bytes), got ${buf.length}`\n            )\n        return [getNumber(buf, nf, 0)] as T\n    }\n    // slow path\n    return jdunpackCore(buf, fmt, 0) as T\n}\n\nfunction jdpackCore(\n    trg: Uint8Array,\n    fmt: string,\n    data: PackedValues,\n    off: number\n) {\n    //console.log({ fmt, data })\n    let idx = 0\n    const parser = new TokenParser(fmt)\n    while (parser.parse()) {\n        const c0 = parser.c0\n\n        if (c0 == ch_x) {\n            // skip padding\n            off += parser.size\n            continue\n        }\n\n        const dataItem = data[idx++]\n\n        if (c0 == ch_r && dataItem) {\n            const fmt0 = fmt.slice(parser.fp)\n            for (const velt of dataItem as any[][]) {\n                off = jdpackCore(trg, fmt0, velt, off)\n            }\n            break\n        }\n\n        // use temporary variable to avoid a Gatsby build bug\n        let arr: any[]\n        if (parser.isArray) arr = dataItem\n        else arr = [dataItem]\n\n        for (const v of arr) {\n            if (parser.nfmt !== null) {\n                if (typeof v != \"number\")\n                    throw new Error(`expecting number, got ` + typeof v)\n                if (trg) {\n                    const st: jdspec.StorageType = numberFormatToStorageType(\n                        parser.nfmt\n                    )\n                    setNumber(\n                        trg,\n                        parser.nfmt,\n                        off,\n                        clampToStorage(Math.round(v * parser.div), st)\n                    )\n                }\n                off += parser.size\n            } else {\n                let buf: Uint8Array\n                if (typeof v === \"string\") {\n                    if (c0 == ch_z) buf = stringToBuffer(v + \"\\u0000\")\n                    else if (c0 == ch_s) buf = stringToBuffer(v)\n                    else throw new Error(`unexpected string`)\n                } else if (v && typeof v === \"object\" && v.length != null) {\n                    // assume buffer\n                    if (c0 == ch_b) buf = v\n                    else throw new Error(`unexpected buffer`)\n                } else {\n                    console.log({ parser, v })\n                    throw new Error(`expecting string or buffer`)\n                }\n\n                let sz = parser.size\n                if (sz >= 0) {\n                    if (buf.length > sz) buf = bufferSlice(buf, 0, sz)\n                } else {\n                    sz = buf.length\n                }\n\n                if (trg) trg.set(buf, off)\n                off += sz\n            }\n        }\n    }\n\n    if (data.length > idx) throw new Error(`format '${fmt}' too short`)\n\n    return off\n}\n\n/**\n\n* Format strings are space-separated sequences of type descriptions.\n* All numbers are understood to be little endian.\n* The following type descriptions are supported:\n* \n* - `u8`, `u16`, `u32` - unsigned, 1, 2, and 4 bytes long respectively\n* - `i8`, `i16`, `i32` - similar, but signed\n* - `b` - buffer until the end of input (has to be last)\n* - `s` - similar, but utf-8 encoded string\n* - `z` - NUL-terminated utf-8 string\n* - `b[10]` - 10 byte buffer (10 is just an example, here and below)\n* - `s[10]` - 10 byte utf-8 string; trailing NUL bytes (if any) are removed\n* - `x[10]` - 10 bytes of padding\n* \n* There is one more token, `r:`. The type descriptions following it are repeated in order\n* until the input buffer is exhausted.\n* When unpacking, fields after `r:` are repeated as an array of tuples.\n* \n* In case there's only a single field repeating,\n* it's also possible to append `[]` to its type, to get an array of values.\n* \n* @category Data Packing\n*/\nexport function jdpack<T extends PackedValues>(fmt: string, data: T) {\n    if (!fmt || !data) return undefined\n\n    // hot path for buffers\n    if (fmt === \"b\") return (data[0] as Uint8Array)?.slice(0)\n\n    // hot path\n    const nf = numberFormatOfType(fmt)\n    if (nf !== null) {\n        const buf = new Uint8Array(sizeOfNumberFormat(nf))\n        setNumber(buf, nf, 0, data[0])\n        return buf\n    }\n    // slow path\n    const len = jdpackCore(null, fmt, data, 0)\n    const res = new Uint8Array(len)\n    jdpackCore(res, fmt, data, 0)\n    return res\n}\n\n/**\n * Checks if two packed values serialize to the same buffer\n * @param fmt packing format string\n * @param left left data\n * @param right right data\n * @returns true if both data serialize to the same buffer\n * @category Data Packing\n */\nexport function jdpackEqual<T extends PackedValues>(\n    fmt: string,\n    left: T,\n    right: T\n) {\n    if (!left !== !right) return false\n    if (!left) return true\n\n    const leftBuffer = jdpack<T>(fmt, left)\n    const rightBuffer = jdpack<T>(fmt, right)\n    return bufferEq(leftBuffer, rightBuffer)\n}\n","import Packet from \"./packet\"\nimport { NumberFormat } from \"./buffer\"\nimport {\n    roundWithPrecision,\n    idiv,\n    fromHex,\n    hash,\n    fromUTF8,\n    uint8ArrayToString,\n    read16,\n    toHex,\n    toArray,\n    hexNum,\n    isSet,\n} from \"./utils\"\nimport {\n    isIntegerType,\n    numberFormatFromStorageType,\n    scaleIntToFloat,\n    isRegister,\n    serviceSpecificationFromName,\n    serviceSpecificationFromClassIdentifier,\n} from \"./spec\"\nimport {\n    CMD_SET_REG,\n    CMD_GET_REG,\n    CMD_REG_MASK,\n    PIPE_METADATA_MASK,\n    CMD_TOP_MASK,\n    PIPE_PORT_SHIFT,\n    JD_FRAME_FLAG_COMMAND,\n    JD_FRAME_FLAG_ACK_REQUESTED,\n    CMD_ADVERTISEMENT_DATA,\n    JD_SERVICE_INDEX_CTRL,\n} from \"./constants\"\nimport { SystemCmd, SystemReg } from \"../../jacdac-spec/dist/specconstants\"\nimport { jdpack, jdunpack } from \"./pack\"\nimport Flags from \"./flags\"\n\n/** @internal */\nexport enum RegisterType {\n    UInt, // default\n    UIntHex,\n    Int,\n    IntArray,\n    String,\n}\n\n/**\n * @internal\n */\nexport interface DecodedMember {\n    info: jdspec.PacketMember\n    value: any\n    numValue: number\n    scaledValue: number\n    humanValue: string\n    description: string\n    size: number\n}\n\n/**\n * @internal\n */\nexport interface DecodedPacket {\n    service: jdspec.ServiceSpec\n    info: jdspec.PacketInfo\n    decoded: DecodedMember[]\n    description: string\n    error?: string\n}\n\nexport function prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n        case \"Cel\":\n            return \"°C\"\n        case \"K\":\n            return \"°K\"\n        case \"/\":\n        case \"#\":\n            return \"\"\n        default:\n            return u\n    }\n}\n\nexport function prettyMemberUnit(\n    specification: jdspec.PacketMember,\n    showDataType?: boolean\n) {\n    const parts: string[] = [\n        prettyUnit(specification.unit),\n        isSet(specification.typicalMin) &&\n            `[${specification.typicalMin}, ${specification.typicalMax}]`,\n        isSet(specification.absoluteMin) &&\n            `absolute [${specification.absoluteMin}, ${specification.absoluteMax}]`,\n    ].filter(f => isSet(f) && f)\n    if (showDataType) parts.unshift(specification.type)\n    const helperText = parts.join(\", \")\n    return helperText\n}\n\nexport function prettySize(b: number) {\n    b = b | 0\n    if (b < 1000) return b + \"b\"\n    else if (b < 1000000) return roundWithPrecision(b / 1e3, 1) + \"kb\"\n    else return roundWithPrecision(b / 1e6, 1) + \"mb\"\n}\n\nexport function prettyDuration(ms: number) {\n    let s = ms / 1000\n    if (s < 1) return `${roundWithPrecision(s, 2)}s`\n    if (s < 10) return `${roundWithPrecision(s, 1)}s`\n    if (s < 60) return `${Math.floor(s)}s`\n\n    let r = \"\"\n    const d = Math.floor(s / (24 * 3600))\n    if (d > 0) {\n        r += d + \":\"\n        s -= d * (24 * 3600)\n    }\n    const h = Math.floor(s / 3600)\n    if (h > 0) {\n        r += h + \":\"\n        s -= h * 3600\n    }\n    const m = Math.floor(s / 60)\n    if (d > 0 || h > 0 || m > 0) {\n        r += m + \":\"\n        s -= m * 60\n    }\n    r += Math.floor(s)\n    return r\n}\n\nexport function prettyMicroDuration(us: number) {\n    if (us < 1000) return `${us}${prettyUnit(\"us\")}`\n    else return prettyDuration(us / 1000)\n}\n\n// 2 letter + 2 digit ID; 1.8%/0.3%/0.07%/0.015% collision probability among 50/20/10/5 devices\nexport function shortDeviceId(devid: string) {\n    const h = hash(fromHex(devid), 30)\n    return (\n        String.fromCharCode(0x41 + (h % 26)) +\n        String.fromCharCode(0x41 + (idiv(h, 26) % 26)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26) % 10)) +\n        String.fromCharCode(0x30 + (idiv(h, 26 * 26 * 10) % 10))\n    )\n}\n\nexport function decodeMember(\n    service: jdspec.ServiceSpec,\n    pktInfo: jdspec.PacketInfo,\n    member: jdspec.PacketMember,\n    pkt: Packet,\n    offset: number\n): DecodedMember {\n    if (!member) return null\n\n    if (pkt.data.length <= offset) return null\n\n    let numValue: number = undefined\n    let scaledValue: number = undefined\n    let value = undefined\n    let humanValue: string = undefined\n    let size = Math.abs(member.storage)\n\n    const enumInfo = service?.enums[member.type]\n    const isInt = isIntegerType(member.type) || !!enumInfo\n\n    if (member.isFloat && (size == 4 || size == 8)) {\n        if (size == 4) numValue = pkt.getNumber(NumberFormat.Float32LE, offset)\n        else numValue = pkt.getNumber(NumberFormat.Float64LE, offset)\n        value = scaledValue = numValue\n\n        if (Math.abs(value) < 10) humanValue = value.toFixed(5)\n        else if (Math.abs(value) < 1000) humanValue = value.toFixed(3)\n        else if (Math.abs(value) < 100000) humanValue = value.toFixed(2)\n        else humanValue = \"\" + value\n        if (member.unit) humanValue += prettyUnit(member.unit)\n    } else if (!isInt) {\n        const buf = size\n            ? pkt.data.slice(offset, offset + size)\n            : pkt.data.slice(offset)\n        if (member.type == \"string\") {\n            try {\n                value = fromUTF8(uint8ArrayToString(buf))\n            } catch {\n                // invalid UTF8\n                value = uint8ArrayToString(buf)\n            }\n            humanValue = JSON.stringify(value).replace(/\\\\u0000/g, \"\\\\0\")\n        } else if (member.type == \"pipe\") {\n            value = buf\n            const devid = toHex(buf.slice(0, 8))\n            const port = read16(buf, 8)\n            humanValue = \"pipe to \" + shortDeviceId(devid) + \" port:\" + port\n            // + \" [\" + toHex(buf.slice(10)) + \"]\"\n            if (pkt?.device?.bus) {\n                const trg = pkt.device.bus.device(devid, true)\n                if (trg)\n                    trg.port(port).pipeType =\n                        service?.shortId + \".\" + pktInfo.pipeType + \".report\"\n            }\n        } else {\n            value = buf\n            humanValue = hexDump(buf)\n        }\n        size = buf.length\n    } else {\n        const fmt = numberFormatFromStorageType(member.storage)\n        numValue = pkt.getNumber(fmt, offset)\n        value = scaledValue = scaleIntToFloat(numValue, member)\n        if (pkt.device && member.type == \"pipe_port\")\n            pkt.device.port(value).pipeType =\n                service?.shortId + \".\" + pktInfo.pipeType + \".command\"\n        if (enumInfo) {\n            if (enumInfo.isFlags) {\n                humanValue = \"\"\n                let curr = numValue\n                for (const key of Object.keys(enumInfo.members)) {\n                    const val = enumInfo.members[key]\n                    if ((curr & val) == val) {\n                        if (humanValue) humanValue += \" | \"\n                        humanValue += key\n                        curr &= ~val\n                    }\n                }\n                if (curr) {\n                    if (humanValue) humanValue += \" | \"\n                    humanValue += hexNum(curr)\n                }\n            } else {\n                humanValue = reverseLookup(enumInfo.members, numValue)\n            }\n        } else if (member.type == \"bool\") {\n            value = !!numValue\n            humanValue = value ? \"true\" : \"false\"\n        } else if (member.unit === \"ms\") humanValue = prettyDuration(value)\n        else if (member.unit === \"us\") humanValue = prettyMicroDuration(value)\n        else if (member.unit || scaledValue != numValue) {\n            // don't show so much digits\n            let v = scaledValue\n            if (member.unit) v = roundWithPrecision(v, 3)\n            humanValue = \"\" + v\n            if (member.unit) humanValue += prettyUnit(member.unit)\n        } else {\n            humanValue = scaledValue + \"\"\n            if (\n                (scaledValue | 0) == scaledValue &&\n                (!member.unit || scaledValue >= 15)\n            ) {\n                if (!member.unit) humanValue = hexNum(scaledValue)\n                else humanValue += \" (\" + hexNum(scaledValue) + \")\"\n            } else if (scaledValue && member.storage == 8) {\n                const did = toHex(pkt.data.slice(offset, offset + 8))\n                humanValue += ` (${did} / ${shortDeviceId(did)})`\n            }\n        }\n    }\n\n    return {\n        value,\n        numValue,\n        scaledValue,\n        humanValue,\n        description:\n            member.name +\n            \":\" +\n            (!humanValue\n                ? \"?\"\n                : humanValue.indexOf(\"\\n\") >= 0\n                ? \"\\n\" + humanValue.replace(/^/gm, \"      \")\n                : \" \" + humanValue),\n        info: member,\n        size,\n    }\n}\n\nexport function valueToFlags(enumInfo: jdspec.EnumInfo, value: number) {\n    const r = []\n    const curr = value\n    for (const key of Object.keys(enumInfo.members)) {\n        const val = enumInfo.members[key]\n        if (curr & val) {\n            r.push(val)\n        }\n    }\n    return r\n}\n\nexport function flagsToValue(values: number[]) {\n    return values.reduce((prev, cur) => prev | cur, 0)\n}\n\nexport function decodeMembers(\n    service: jdspec.ServiceSpec,\n    pktInfo: jdspec.PacketInfo,\n    pkt: Packet,\n    off = 0\n) {\n    const fields = pktInfo.fields.slice(0)\n    let idx = fields.findIndex(f => f.startRepeats)\n    if (idx >= 0) {\n        if (fields.some(f => !f.storage))\n            throw new Error(\"zero-sized field in repeats:\")\n        let sz = 0\n        for (const f of fields) sz += Math.abs(f.storage)\n        // make sure we have enough fields to decode all data\n        while (sz <= pkt.data.length) {\n            const f = fields[idx++]\n            sz += Math.abs(f.storage)\n            fields.push(f)\n        }\n    }\n    return fields\n        .map(mem => {\n            const decoded = decodeMember(service, pktInfo, mem, pkt, off)\n            if (decoded) off += decoded.size\n            return decoded\n        })\n        .filter(info => !!info)\n}\n\nexport function wrapDecodedMembers(decoded: DecodedMember[]) {\n    if (decoded.length == 0) return \" {}\"\n    else if (decoded.length == 1 && decoded[0].description.length < 60)\n        return \" { \" + decoded[0].description + \" }\"\n    else\n        return (\n            \" {\\n\" + decoded.map(d => \"    \" + d.description).join(\"\\n\") + \"\\n}\"\n        )\n}\n\nfunction syntheticPktInfo(\n    kind: jdspec.PacketKind,\n    addr: number\n): jdspec.PacketInfo {\n    return {\n        kind,\n        identifier: addr,\n        name: hexNum(addr),\n        description: \"\",\n        fields: [\n            {\n                name: \"_\",\n                type: \"bytes\",\n                storage: 0,\n            },\n        ],\n    }\n}\n\nfunction decodeRegister(\n    service: jdspec.ServiceSpec,\n    pkt: Packet\n): DecodedPacket {\n    const isSet = pkt.isRegisterSet\n    const isGet = pkt.isRegisterGet\n\n    if (isSet == isGet) return null\n\n    let error = \"\"\n    const addr = pkt.serviceCommand & CMD_REG_MASK\n    let regInfo = service?.packets.find(\n        p => isRegister(p) && p.identifier == addr\n    )\n    if (!regInfo) {\n        regInfo = syntheticPktInfo(\"rw\", addr)\n        error = `unable to decode register`\n    }\n\n    const decoded = decodeMembers(service, regInfo, pkt)\n\n    if (regInfo.packFormat && pkt.data.length) {\n        try {\n            const recoded: string = toHex(\n                jdpack(\n                    regInfo.packFormat,\n                    jdunpack(pkt.data, regInfo.packFormat)\n                )\n            )\n            if (recoded !== undefined && recoded !== toHex(pkt.data)) {\n                error = `invalid data packing, ${toHex(\n                    pkt.data\n                )} recoded to ${recoded}`\n            }\n        } catch (e) {\n            error = `invalid data packing, ${e.message}`\n        }\n    }\n\n    let description = \"\"\n    if (decoded.length == 0) description = regInfo.name\n    else if (decoded.length == 1)\n        description = regInfo.name + \": \" + decoded[0].humanValue\n    else description = wrapDecodedMembers(decoded)\n\n    if (isGet) description = \"GET \" + description\n    else description = \"SET \" + description\n\n    return {\n        service,\n        info: regInfo,\n        decoded,\n        description,\n        error,\n    }\n}\n\nfunction decodeEvent(service: jdspec.ServiceSpec, pkt: Packet): DecodedPacket {\n    if (pkt.isCommand || !pkt.isEvent) return null\n\n    const evCode = pkt.eventCode\n    const evInfo =\n        service?.packets.find(\n            p => p.kind == \"event\" && p.identifier == evCode\n        ) || syntheticPktInfo(\"event\", evCode)\n\n    const decoded = decodeMembers(service, evInfo, pkt)\n    const description =\n        `EVENT[${pkt.eventCounter}] ${evInfo.name}` +\n        wrapDecodedMembers(decoded)\n\n    return {\n        service,\n        info: evInfo,\n        decoded,\n        description,\n    }\n}\n\nfunction decodeCommand(\n    service: jdspec.ServiceSpec,\n    pkt: Packet\n): DecodedPacket {\n    const kind = pkt.isCommand ? \"command\" : \"report\"\n    const cmdInfo =\n        service?.packets.find(\n            p => p.kind == kind && p.identifier == pkt.serviceCommand\n        ) || syntheticPktInfo(kind, pkt.serviceCommand)\n\n    const decoded = decodeMembers(service, cmdInfo, pkt)\n    const description =\n        (pkt.isCommand ? \"CMD \" : \"REPORT \") +\n        cmdInfo.name +\n        wrapDecodedMembers(decoded)\n\n    return {\n        service,\n        info: cmdInfo,\n        decoded,\n        description,\n    }\n}\n\nfunction decodePacket(service: jdspec.ServiceSpec, pkt: Packet): DecodedPacket {\n    const decoded =\n        decodeRegister(service, pkt) ||\n        decodeEvent(service, pkt) ||\n        decodeCommand(service, pkt)\n    return decoded\n}\n\nfunction decodePipe(pkt: Packet): DecodedPacket {\n    const cmd = pkt.serviceCommand\n    const pinfo = pkt.device.port(cmd >> PIPE_PORT_SHIFT)\n    if (!pinfo.pipeType) return null\n\n    const [servId, pipeType, dir] = pinfo.pipeType.split(/\\./)\n    const service = serviceSpecificationFromName(servId)\n    if (!service) return null\n\n    const meta = !!(cmd & PIPE_METADATA_MASK)\n    const candidates = service.packets\n        .filter(\n            p =>\n                p.pipeType == pipeType &&\n                /pipe/.test(p.kind) &&\n                /meta/.test(p.kind) == meta &&\n                /command/.test(p.kind) == (dir == \"command\")\n        )\n        .filter(\n            p =>\n                !meta || pkt.getNumber(NumberFormat.UInt16LE, 0) == p.identifier\n        )\n\n    const cmdInfo = candidates[0]\n    if (cmdInfo) {\n        const decoded = decodeMembers(service, cmdInfo, pkt, meta ? 4 : 0)\n        const description =\n            cmdInfo.kind.toUpperCase() +\n            \" \" +\n            cmdInfo.name +\n            wrapDecodedMembers(decoded)\n        return {\n            service,\n            info: cmdInfo,\n            decoded,\n            description,\n        }\n    }\n\n    return null\n}\n\nexport function decodePacketData(pkt: Packet): DecodedPacket {\n    try {\n        if (pkt.device && pkt.isPipe) {\n            const info = decodePipe(pkt)\n            if (info) return info\n        }\n\n        const serviceClass = pkt.serviceClass\n        const service = serviceSpecificationFromClassIdentifier(serviceClass)\n        return decodePacket(service, pkt)\n    } catch (error) {\n        console.error(error, {\n            error,\n            pkt,\n            data: toHex(pkt.data),\n        })\n        throw error\n    }\n}\n\nfunction reverseLookup(map: Record<string, number>, n: number) {\n    for (const k of Object.keys(map)) {\n        if (map[k] == n) return k\n    }\n    return hexNum(n)\n}\n\nexport function serviceClass(name: string): number {\n    const serv = serviceSpecificationFromName(name)\n    return serv ? serv.classIdentifier : -1\n}\n\nexport function serviceName(serviceClass: number): string {\n    if (!isSet(serviceClass)) return \"?\"\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass)\n    return serv ? serv.name.toUpperCase() : \"?\"\n}\n\nexport function serviceShortIdOrClass(serviceClass: number) {\n    if (!isSet(serviceClass)) return \"?\"\n    const serv = serviceSpecificationFromClassIdentifier(serviceClass)\n    return serv?.shortId || `0x${serviceClass.toString(16)}`\n}\n\nexport function deviceServiceName(pkt: Packet): string {\n    const srv_class = pkt?.device?.serviceClassAt(pkt.serviceIndex)\n    const serv_id = serviceName(srv_class)\n    return `${pkt?.device?.shortId || \"?\"}/${serv_id}:${pkt.serviceIndex}`\n}\n\nexport function commandName(n: number, serviceClass?: number): string {\n    let pref = \"\"\n    if ((n & CMD_TOP_MASK) == CMD_SET_REG) pref = \"SET[\"\n    else if ((n & CMD_TOP_MASK) == CMD_GET_REG) pref = \"GET[\"\n    if (pref) {\n        const reg = n & CMD_REG_MASK\n        let regName = SystemReg[reg]?.toLowerCase() // try reserved registers first, fast path\n        if (regName === undefined) {\n            const serviceSpec =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            regName = serviceSpec?.packets.find(\n                pkt => isRegister(pkt) && pkt.identifier === reg\n            )?.name\n        }\n        return (\n            pref +\n            (regName !== undefined ? regName : `x${reg.toString(16)}`) +\n            \"]\"\n        )\n    }\n\n    let r = SystemCmd[n]?.toLowerCase()\n    if (r === undefined) {\n        const serviceSpec =\n            serviceSpecificationFromClassIdentifier(serviceClass)\n        r = serviceSpec?.packets.find(\n            pkt => pkt.kind === \"command\" && pkt.identifier === n\n        )?.name\n    }\n    return r\n}\n\nfunction num2str(n: number) {\n    return n + \" (0x\" + n.toString(16) + \")\"\n}\n\nexport interface PrintPacketOptions {\n    showTime?: boolean\n    skipRepeatedAnnounce?: boolean\n}\n\nexport function toAscii(d: ArrayLike<number>) {\n    let r = \"\"\n    for (let i = 0; i < d.length; ++i) {\n        const c = d[i]\n        if (c < 32 || c >= 128) r += \".\"\n        else r += String.fromCharCode(c)\n    }\n    return r\n}\n\nexport function hexDump(d: ArrayLike<number>): string {\n    const chunk = 32\n    if (d.length <= chunk) return toHex(d) + \"\\u00A0|\\u00A0\" + toAscii(d)\n\n    const a = toArray(d)\n    let r = \"\"\n    for (let i = 0; i < d.length; i += chunk) {\n        if (i + chunk >= d.length) {\n            let s = toHex(a.slice(i))\n            while (s.length < chunk * 2) s += \"  \"\n            r += s + \"\\u00A0|\\u00A0\" + toAscii(a.slice(i))\n        } else {\n            r += hexDump(a.slice(i, i + chunk)) + \"\\n\"\n        }\n    }\n    return r\n}\n\nexport function printPacket(\n    pkt: Packet,\n    opts: PrintPacketOptions = {}\n): string {\n    const frame_flags = pkt.frameFlags\n    const devname = pkt.friendlyDeviceName\n    const service_name = pkt.friendlyServiceName\n    const cmdname = pkt.friendlyCommandName\n    const sender = pkt.sender\n\n    let pdesc = `${devname}/${service_name}: ${cmdname}; sz=${pkt.size}`\n\n    if (frame_flags & JD_FRAME_FLAG_COMMAND) pdesc = \"to \" + pdesc\n    else pdesc = \"from \" + pdesc\n    if (frame_flags & JD_FRAME_FLAG_ACK_REQUESTED)\n        pdesc = `[ack:${hexNum(pkt.crc)}] ` + pdesc\n\n    const d = pkt.data\n    if (\n        pkt.device &&\n        pkt.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n        pkt.serviceCommand == CMD_ADVERTISEMENT_DATA\n    ) {\n        if (pkt.device.lastServiceUpdate < pkt.timestamp) {\n            if (opts.skipRepeatedAnnounce) return \"\"\n            else pdesc = \" ====== \" + pdesc\n        } else {\n            const services = []\n            for (const sc of pkt.device.serviceClasses)\n                services.push(serviceName(sc))\n            pdesc += \"; \" + \"Announce services: \" + services.join(\", \")\n        }\n    } else {\n        const decoded = pkt.decoded\n        if (decoded) {\n            pdesc += \"; \" + decoded.description\n        } else if (0 < d.length && d.length <= 4) {\n            const v0 = pkt.uintData,\n                v1 = pkt.intData\n            pdesc += \"; \" + num2str(v0)\n            if (v0 != v1) pdesc += \"; signed: \" + num2str(v1)\n        } else if (d.length) {\n            pdesc += \"; \" + hexDump(d)\n        }\n    }\n\n    if (sender) pdesc += `; ${sender}`\n\n    return (\n        (!isNaN(pkt.timestamp) && opts?.showTime\n            ? Math.round(pkt.timestamp) + \"ms: \"\n            : \"\") + pdesc\n    )\n}\n","// Registers 0x001-0x07f - r/w common to all services\n// Registers 0x080-0x0ff - r/w defined per-service\n// Registers 0x100-0x17f - r/o common to all services\n// Registers 0x180-0x1ff - r/o defined per-service\n// Registers 0x200-0xeff - custom, defined per-service\n// Registers 0xf00-0xfff - reserved for implementation, should not be on the wire\n\nexport const CMD_GET_REG = 0x1000\nexport const CMD_SET_REG = 0x2000\n\nexport const CMD_EVENT_MASK = 0x8000\nexport const CMD_EVENT_CODE_MASK = 0x00ff\nexport const CMD_EVENT_COUNTER_POS = 8\nexport const CMD_EVENT_COUNTER_MASK = 0x7f\n\nexport const CMD_TOP_MASK = 0xf000\nexport const CMD_REG_MASK = 0x0fff\n\nexport const ACK_MIN_DELAY = 90\nexport const ACK_MAX_DELAY = 120\n\n// Commands 0x000-0x07f - common to all services\n// Commands 0x080-0xeff - defined per-service\n// Commands 0xf00-0xfff - reserved for implementation\n// enumeration data for CTRL, ad-data for other services\nexport const CMD_ADVERTISEMENT_DATA = 0x00\n\nexport const PIPE_PORT_SHIFT = 7\nexport const PIPE_COUNTER_MASK = 0x001f\nexport const PIPE_CLOSE_MASK = 0x0020\nexport const PIPE_METADATA_MASK = 0x0040\n\nexport const JD_SERIAL_HEADER_SIZE = 16\nexport const JD_SERIAL_MAX_PAYLOAD_SIZE = 236\nexport const JD_SERVICE_INDEX_MASK = 0x3f\nexport const JD_SERVICE_INDEX_INV_MASK = 0xc0\nexport const JD_SERVICE_INDEX_CRC_ACK = 0x3f\nexport const JD_SERVICE_INDEX_PIPE = 0x3e\nexport const JD_SERVICE_INDEX_MAX_NORMAL = 0x30\nexport const JD_SERVICE_INDEX_CTRL = 0x00\n\n// the COMMAND flag signifies that the device_identifier is the recipent\n// (i.e., it's a command for the peripheral); the bit clear means device_identifier is the source\n// (i.e., it's a report from peripheral or a broadcast message)\nexport const JD_FRAME_FLAG_COMMAND = 0x01\n// an ACK should be issued with CRC of this package upon reception\nexport const JD_FRAME_FLAG_ACK_REQUESTED = 0x02\n// the device_identifier contains target service class number\nexport const JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = 0x04\n\nexport const JD_ADVERTISEMENT_0_COUNTER_MASK = 0x0000000f\nexport const JD_ADVERTISEMENT_0_ACK_SUPPORTED = 0x00000100\n\n// time withouth seeing a package to be considered \"lost\", 2x announce interval\nexport const JD_DEVICE_LOST_DELAY = 1500\n// time without seeing a packet to be considered \"disconnected\"\nexport const JD_DEVICE_DISCONNECTED_DELAY = 5000\n\nexport const RESET_IN_TIME_US = 2000000\n\nexport const MAX_SERVICES_LENGTH = 59\n\nexport const NEW_LISTENER = \"newListener\"\nexport const REMOVE_LISTENER = \"removeListener\"\n\nexport const CONNECTION_STATE = \"connectionState\"\nexport const CONNECT = \"connect\"\nexport const LOST = \"lost\"\nexport const FOUND = \"found\"\nexport const CONNECTING = \"connecting\"\nexport const DISCONNECT = \"disconnect\"\nexport const DISCONNECTING = \"disconnecting\"\nexport const ANNOUNCE = \"announce\"\nexport const START = \"start\"\nexport const RESTART = \"restart\"\nexport const STOP = \"stop\"\nexport const CHANGE = \"change\"\nexport const EVENT = \"event\"\nexport const RENDER = \"render\"\nexport const REFRESH = \"refresh\"\nexport const MESSAGE = \"message\"\nexport const FIRMWARE_BLOBS_CHANGE = \"firmwareBlobsChange\"\nexport const LATE = \"late\"\nexport const GET_ATTEMPT = \"getAttempt\"\nexport const SERVICE_CLIENT_ADDED = `serviceClientAdded`\nexport const SERVICE_CLIENT_REMOVED = `serviceClientRemoved`\nexport const READING_SENT = \"readingSent\"\nexport const ROLE_CHANGE = \"roleChange\"\nexport const ROLE_MANAGER_CHANGE = \"roleManagerChange\"\n\nexport const SERVICE_PROVIDER_ADDED = `serviceProviderAdded`\nexport const SERVICE_PROVIDER_REMOVED = `serviceProviderRemoved`\n\nexport const IDENTIFY = \"identify\"\nexport const IDENTIFY_DURATION = 2000\nexport const RESET = \"reset\"\n\nexport const DATA = \"data\"\nexport const CLOSE = \"close\"\n\nexport const DEVICE_CONNECT = \"deviceConnect\"\nexport const DEVICE_LOST = \"deviceLost\"\nexport const DEVICE_FOUND = \"deviceFound\"\nexport const DEVICE_DISCONNECT = \"deviceDisconnect\"\nexport const DEVICE_ANNOUNCE = \"deviceAnnounce\"\nexport const DEVICE_PACKET_ANNOUNCE = \"devicePacketAnnounce\"\nexport const DEVICE_RESTART = \"deviceRestart\"\nexport const DEVICE_CHANGE = \"deviceChange\"\nexport const DEVICE_FIRMWARE_INFO = \"firmwareInfo\"\nexport const DEVICE_CLEAN = \"deviceClean\"\nexport const SELF_ANNOUNCE = \"selfAnnounce\"\n\nexport const PACKET_SEND = \"packetSend\"\nexport const PACKET_SEND_DISCONNECT = \"packetSendDisconnect\"\n\nexport const PACKET_PRE_PROCESS = \"packetPreProcess\"\nexport const PACKET_PROCESS = \"packetProcess\"\nexport const PACKET_RECEIVE = \"packetReceive\"\nexport const PACKET_RECEIVE_ANNOUNCE = \"packetReceiveAnnounce\"\nexport const PACKET_EVENT = \"packetEvent\"\nexport const PACKET_REPORT = \"packetReport\"\nexport const PACKET_ANNOUNCE = \"packetAnnounce\"\nexport const PACKET_INVALID_CRC = \"packetInvalidCrc\"\nexport const PACKET_INVALID_DATA = \"packetInvalidData\"\nexport const PACKET_DATA_NORMALIZE = \"packetDataNormalize\"\n\nexport const REPORT_RECEIVE = \"reportReceive\"\nexport const REPORT_UPDATE = \"reportUpdate\"\nexport const COMMAND_RECEIVE = \"commandReceive\"\n\nexport const ERROR = \"error\"\nexport const TRACE = \"trace\"\nexport const TIMEOUT = \"timeout\"\nexport const TIMEOUT_DISCONNECT = \"timeoutDisconnect\"\n\nexport const PROGRESS = \"progress\"\n\nexport const PACKET_KIND_RW = \"rw\"\nexport const PACKET_KIND_RO = \"ro\"\nexport const PACKET_KIND_EVENT = \"event\"\nexport const PACKET_KIND_ANNOUNCE = \"announce\"\n\nexport const REGISTER_NODE_NAME = \"register\"\nexport const REPORT_NODE_NAME = \"report\"\nexport const CONST_NODE_NAME = \"const\"\nexport const EVENT_NODE_NAME = \"event\"\nexport const SERVICE_NODE_NAME = \"service\"\nexport const SERVICE_MIXIN_NODE_NAME = \"serviceMixin\"\nexport const DEVICE_NODE_NAME = \"device\"\nexport const VIRTUAL_DEVICE_NODE_NAME = \"virtualdevice\"\nexport const BUS_NODE_NAME = \"bus\"\nexport const COMMAND_NODE_NAME = \"command\"\nexport const FIELD_NODE_NAME = \"field\"\nexport const PIPE_NODE_NAME = \"pipe\"\nexport const PIPE_REPORT_NODE_NAME = \"pipe_report\"\nexport const CRC_ACK_NODE_NAME = \"crcAck\"\nexport const SERVICE_TEST_NODE_NAME = \"serviceTest\"\n\nexport const REGISTER_REFRESH_TIMEOUT = 150\nexport const REGISTER_REFRESH_RETRY_0 = 30\nexport const REGISTER_REFRESH_RETRY_1 = 80\nexport const REGISTER_POLL_STREAMING_INTERVAL = 5000\nexport const REGISTER_POLL_FIRST_REPORT_INTERVAL = 400\nexport const REGISTER_POLL_REPORT_INTERVAL = 5001\nexport const REGISTER_POLL_REPORT_MAX_INTERVAL = 60000\nexport const REGISTER_POLL_REPORT_VOLATILE_INTERVAL = 1000\nexport const REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL = 5000\nexport const REGISTER_OPTIONAL_POLL_COUNT = 3\nexport const STREAMING_DEFAULT_INTERVAL = 50\n\nexport const FLASH_MAX_DEVICES = 6\n\nexport const PING_LOGGERS_POLL = 2400\nexport const ROLE_MANAGER_POLL = 1500\nexport const REFRESH_REGISTER_POLL = 50\n\nexport const USB_TRANSPORT = \"usb\"\nexport const BLUETOOTH_TRANSPORT = \"bluetooth\"\nexport const SERIAL_TRANSPORT = \"serial\"\nexport const PACKETIO_TRANSPORT = \"packetio\"\nexport const WEBSOCKET_TRANSPORT = \"web\"\n\nexport const META_ACK = \"ACK\"\nexport const META_ACK_FAILED = \"ACK_FAILED\"\nexport const META_PIPE = \"PIPE\"\nexport const META_GET = \"GET\"\nexport const META_TRACE = \"TRACE\"\n\nexport const REGISTER_PRE_GET = \"registerPreGet\"\n\nexport const TRACE_FILTER_HORIZON = 100\nexport const EMBED_MIN_ASPECT_RATIO = 1.22\n\nexport const BLUETOOTH_JACDAC_SERVICE = \"f8530001-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_RX_CHARACTERISTIC =\n    \"f8530002-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_TX_CHARACTERISTIC =\n    \"f8530003-a97f-49f5-a554-3e373fbea2d5\"\nexport const BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC =\n    \"f8530004-a97f-49f5-a554-3e373fbea2d5\"\n\nexport const TRANSPORT_CONNECT_RETRY_DELAY = 500\nexport const TRANSPORT_PULSE_TIMEOUT = 60000 // don't interfere with manual flashing of devices\n\nexport const ERROR_MICROBIT_V1 = \"microbit/v1-not-supported\"\nexport const ERROR_MICROBIT_UNKNOWN = \"microbit/unknown-hardware-revision\"\nexport const ERROR_MICROBIT_JACDAC_MISSING = \"microbit/jacdac-missing\"\nexport const ERROR_MICROBIT_INVALID_MEMORY = \"microbit/invalid-memory\"\n\nexport const ROLE_BOUND = \"roleBound\"\nexport const ROLE_UNBOUND = \"roleUnbound\"\nexport const ROLE_HAS_NO_SERVICE = \"roleHasNoService\"\nexport const BOUND = \"bound\"\nexport const UNBOUND = \"unbound\"\n\nexport const JACDAC_ERROR = \"JacdacError\"\n\nexport * from \"../../jacdac-spec/dist/specconstants\"\n","import {\n    crc,\n    ALIGN,\n    write16,\n    bufferConcat,\n    toHex,\n    fromHex,\n    throwError,\n    read32,\n    read16,\n    write32,\n    hexNum,\n    bufferToString,\n} from \"./utils\"\nimport {\n    JD_FRAME_FLAG_COMMAND,\n    JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS,\n    CMD_SET_REG,\n    JD_SERIAL_HEADER_SIZE,\n    JD_FRAME_FLAG_ACK_REQUESTED,\n    JD_SERVICE_INDEX_MASK,\n    JD_SERVICE_INDEX_INV_MASK,\n    JD_SERIAL_MAX_PAYLOAD_SIZE,\n    JD_SERVICE_INDEX_CRC_ACK,\n    JD_SERVICE_INDEX_PIPE,\n    PIPE_PORT_SHIFT,\n    PIPE_COUNTER_MASK,\n    PIPE_METADATA_MASK,\n    PIPE_CLOSE_MASK,\n    CMD_GET_REG,\n    JD_SERVICE_INDEX_CTRL,\n    CMD_REG_MASK,\n    CMD_EVENT_CODE_MASK,\n    CMD_EVENT_COUNTER_MASK,\n    CMD_EVENT_MASK,\n    CMD_EVENT_COUNTER_POS,\n    JD_SERVICE_INDEX_MAX_NORMAL,\n} from \"./constants\"\nimport JDDevice from \"./device\"\nimport { NumberFormat, getNumber } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport {\n    commandName,\n    DecodedPacket,\n    decodePacketData,\n    serviceName,\n    shortDeviceId,\n} from \"./pretty\"\nimport { SystemCmd } from \"../../jacdac-spec/dist/specconstants\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\n\nconst { warn } = console\n\n/**\n * A Jacdac packet\n * @category JDOM\n */\nexport class Packet {\n    private _header: Uint8Array\n    private _data: Uint8Array\n    private _meta: Record<string, unknown> = undefined // accesory data used by clients\n    timestamp: number\n    device: JDDevice\n    private _decoded: DecodedPacket\n    readonly key: number\n    // An optional tracing identity to avoid\n    // resending own packets for bridges\n    public sender: string\n    // Replayed in a trace\n    public replay?: boolean\n\n    private static _nextKey = 1\n    private constructor() {\n        this.key = Packet._nextKey++\n    }\n\n    static fromBinary(data: Uint8Array, timestamp?: number) {\n        if (!data || data.length > 252) return undefined\n        const p = new Packet()\n        p._header = data.slice(0, JD_SERIAL_HEADER_SIZE)\n        p._data = data.slice(\n            JD_SERIAL_HEADER_SIZE,\n            JD_SERIAL_HEADER_SIZE + p.size\n        )\n        if (timestamp !== undefined) p.timestamp = timestamp\n        return p\n    }\n\n    static from(service_command: number, data: Uint8Array) {\n        const p = new Packet()\n        p._header = new Uint8Array(JD_SERIAL_HEADER_SIZE)\n        p.data = data\n        p.serviceCommand = service_command\n        return p\n    }\n\n    static onlyHeader(service_command: number) {\n        return Packet.from(service_command, new Uint8Array(0))\n    }\n\n    toBuffer() {\n        // compute correct framing and CRC\n        const res = bufferConcat(this._header, this._data)\n        res[2] = this._data.length + 4\n        write16(res, 0, crc(res.slice(2)))\n        return res\n    }\n\n    get header() {\n        return this._header.slice(0)\n    }\n\n    get deviceIdentifier() {\n        return toHex(this._header.slice(4, 4 + 8))\n    }\n    set deviceIdentifier(id: string) {\n        const idb = fromHex(id)\n        if (idb.length != 8) throwError(\"Invalid id\")\n        if (this.isMultiCommand) throwError(\"Invalid multicast\")\n        this._header.set(idb, 4)\n        this._decoded = undefined\n    }\n\n    get frameFlags() {\n        return this._header[3]\n    }\n\n    set frameFlags(v: number) {\n        this._header[3] = v\n    }\n\n    get isMultiCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS)\n    }\n\n    get size(): number {\n        return this._header[12]\n    }\n\n    get requiresAck(): boolean {\n        return this.frameFlags & JD_FRAME_FLAG_ACK_REQUESTED ? true : false\n    }\n    set requiresAck(ack: boolean) {\n        if (ack != this.requiresAck)\n            this._header[3] ^= JD_FRAME_FLAG_ACK_REQUESTED\n        this._decoded = undefined\n    }\n\n    get serviceIndex(): number {\n        return this._header[13] & JD_SERVICE_INDEX_MASK\n    }\n    set serviceIndex(value: number) {\n        if (value == null) throw new Error(\"service_index not set\")\n        this._header[13] =\n            (this._header[13] & JD_SERVICE_INDEX_INV_MASK) | value\n        this._decoded = undefined\n    }\n\n    get serviceClass(): number {\n        if (this.isMultiCommand) return read32(this._header, 4)\n        return this.device?.serviceClassAt(this.serviceIndex)\n    }\n\n    get crc(): number {\n        return read16(this._header, 0)\n    }\n\n    get serviceCommand(): number {\n        return read16(this._header, 14)\n    }\n    set serviceCommand(cmd: number) {\n        write16(this._header, 14, cmd)\n        this._decoded = undefined\n    }\n\n    get isRegisterSet() {\n        return this.serviceCommand >> 12 == CMD_SET_REG >> 12\n    }\n\n    get isRegisterGet() {\n        return this.serviceCommand >> 12 == CMD_GET_REG >> 12\n    }\n\n    // TODO rename to registerCode\n    get registerIdentifier() {\n        if (!this.isRegisterGet && !this.isRegisterSet) return undefined\n        return this.serviceCommand & CMD_REG_MASK\n    }\n\n    get isEvent() {\n        return (\n            this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL &&\n            (this.serviceCommand & CMD_EVENT_MASK) !== 0\n        )\n    }\n\n    get eventCode() {\n        return this.isEvent\n            ? this.serviceCommand & CMD_EVENT_CODE_MASK\n            : undefined\n    }\n\n    get eventCounter() {\n        return this.isEvent\n            ? (this.serviceCommand >> CMD_EVENT_COUNTER_POS) &\n                  CMD_EVENT_COUNTER_MASK\n            : undefined\n    }\n\n    get isCRCAck() {\n        return this.serviceIndex === JD_SERVICE_INDEX_CRC_ACK\n    }\n\n    get isPipe() {\n        return this.serviceIndex === JD_SERVICE_INDEX_PIPE\n    }\n\n    get pipePort() {\n        return this.isPipe && this.serviceCommand >> PIPE_PORT_SHIFT\n    }\n\n    get pipeCount() {\n        return this.isPipe && this.serviceCommand & PIPE_COUNTER_MASK\n    }\n\n    get data(): Uint8Array {\n        return this._data\n    }\n\n    set data(buf: Uint8Array) {\n        if (buf.length > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw Error(\n                `jacdac packet length too large, ${buf.length} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`\n            )\n        this._header[12] = buf.length\n        this._data = buf\n        this._decoded = undefined\n    }\n\n    jdunpack<T extends PackedValues>(fmt: string): T {\n        return (this._data && fmt && jdunpack<T>(this._data, fmt)) || ([] as T)\n    }\n\n    get uintData() {\n        let buf = this._data\n        if (buf.length == 0) return undefined\n        if (buf.length < 4) buf = bufferConcat(buf, new Uint8Array(4))\n        if (buf.length == 8)\n            return read32(buf, 0) + read32(buf, 4) * 0x100000000\n        return read32(buf, 0)\n    }\n\n    get stringData(): string {\n        return this._data && bufferToString(this._data)\n    }\n\n    get intData() {\n        let fmt: NumberFormat\n        switch (this._data.length) {\n            case 0:\n                return undefined\n            case 1:\n                fmt = NumberFormat.Int8LE\n                break\n            case 2:\n            case 3:\n                fmt = NumberFormat.Int16LE\n                break\n            default:\n                fmt = NumberFormat.Int32LE\n                break\n        }\n        return this.getNumber(fmt, 0)\n    }\n\n    get isAnnounce() {\n        return (\n            this.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            this.isReport &&\n            this.serviceCommand == SystemCmd.Announce\n        )\n    }\n\n    get isRepeatedAnnounce() {\n        return (\n            this.isAnnounce && this.device?.lastServiceUpdate < this.timestamp\n        )\n    }\n\n    get decoded() {\n        if (!this._decoded) this._decoded = decodePacketData(this)\n        return this._decoded\n    }\n\n    get meta() {\n        if (!this._meta) this._meta = {}\n        return this._meta\n    }\n\n    clone() {\n        const pkt = new Packet()\n        pkt._header = this._header.slice()\n        pkt._data = this._data.slice()\n        pkt.timestamp = this.timestamp\n        return pkt\n    }\n\n    cloneForDevice(deviceId: string, serviceIndex: number) {\n        const idb = fromHex(deviceId)\n        if (idb.length != 8) throwError(\"Invalid id\")\n        if (!this.isMultiCommand) throwError(\"Must be multi command\")\n\n        const pkt = Packet.fromBinary(this.toBuffer(), this.timestamp)\n        pkt.frameFlags &= ~JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS\n        pkt._header.set(idb, 4)\n        pkt._decoded = undefined\n        pkt.serviceIndex = serviceIndex\n        return pkt\n    }\n\n    compress(stripped: Uint8Array[]) {\n        if (stripped.length == 0) return\n        let sz = -4\n        for (const s of stripped) {\n            sz += s.length\n        }\n        const data = new Uint8Array(sz)\n        this._header.set(stripped[0], 12)\n        data.set(stripped[0].slice(4), 0)\n        sz = stripped[0].length - 4\n        for (const s of stripped.slice(1)) {\n            data.set(s, sz)\n            sz += s.length\n        }\n        this._data = data\n        this._decoded = undefined\n    }\n\n    withFrameStripped() {\n        return bufferConcat(this._header.slice(12, 12 + 4), this._data)\n    }\n\n    getNumber(fmt: NumberFormat, offset: number) {\n        return getNumber(this._data, fmt, offset)\n    }\n\n    get isCommand() {\n        return !!(this.frameFlags & JD_FRAME_FLAG_COMMAND)\n    }\n\n    set isCommand(value: boolean) {\n        if (value) this._header[3] |= JD_FRAME_FLAG_COMMAND\n        else this._header[3] &= ~JD_FRAME_FLAG_COMMAND\n        this._decoded = undefined\n    }\n\n    get isReport() {\n        return !this.isCommand\n    }\n\n    toString(): string {\n        let msg = `${shortDeviceId(this.deviceIdentifier)}/${\n            this.serviceIndex\n        }[${this.frameFlags}]: ${this.serviceCommand} sz=${this.size}`\n        if (this.size < 20) msg += \": \" + toHex(this.data)\n        else msg += \": \" + toHex(this.data.slice(0, 20)) + \"...\"\n        return msg\n    }\n\n    sendCoreAsync(bus: JDBus) {\n        const buf = this.toBuffer()\n        // Here we're sending this packet as the only one in a frame, therefore we need to compute CRC (which toBuffer() does)\n        // There's no crc computation function on Packet, since it should be typically only applied to full frames.\n        // The crc field reads the CRC from the frame (which is useful eg for acks).\n        this._header[0] = buf[0]\n        this._header[1] = buf[1]\n        this._header[2] = buf[2]\n        return bus.sendPacketAsync(this)\n    }\n\n    sendReportAsync(dev: JDDevice) {\n        if (!dev) return Promise.resolve()\n        this.deviceIdentifier = dev.deviceId\n        return this.sendCoreAsync(dev.bus)\n    }\n\n    sendCmdAsync(dev: JDDevice) {\n        if (!dev) return Promise.resolve()\n        this.deviceIdentifier = dev.deviceId\n        this.isCommand = true\n        return this.sendCoreAsync(dev.bus)\n    }\n\n    sendAsMultiCommandAsync(bus: JDBus, service_class: number) {\n        this._header[3] |=\n            JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS | JD_FRAME_FLAG_COMMAND\n        write32(this._header, 4, service_class)\n        write32(this._header, 8, 0)\n        return this.sendCoreAsync(bus)\n    }\n\n    static fromFrame(frame: Uint8Array, timestamp: number) {\n        return frameToPackets(frame, timestamp)\n    }\n\n    static jdpacked<T extends PackedValues>(\n        service_command: number,\n        fmt: string,\n        nums: T\n    ) {\n        return Packet.from(service_command, jdpack<T>(fmt, nums))\n    }\n\n    // helpers\n    get friendlyDeviceName(): string {\n        if (this.isMultiCommand) return \"*\"\n        return this.device?.friendlyName || this.deviceIdentifier\n    }\n    get friendlyServiceName(): string {\n        let service_name: string\n        if (this.isCRCAck) {\n            service_name = \"CRC-ACK\"\n        } else if (this.isPipe) {\n            service_name = \"PIPE\"\n        } else {\n            const serv_id = serviceName(this.serviceClass)\n            service_name = `${serv_id} (${this.serviceIndex})`\n        }\n        return service_name\n    }\n    get friendlyCommandName(): string {\n        const cmd = this.serviceCommand\n        let cmdname: string\n        if (this.isCRCAck) {\n            cmdname = hexNum(cmd)\n        } else if (this.isPipe) {\n            cmdname = `port:${cmd >> PIPE_PORT_SHIFT} cnt:${\n                cmd & PIPE_COUNTER_MASK\n            }`\n            if (cmd & PIPE_METADATA_MASK) cmdname += \" meta\"\n            if (cmd & PIPE_CLOSE_MASK) cmdname += \" close\"\n        } else if (this.isEvent) {\n            const spec = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n            const code = this.eventCode\n            const pkt = spec?.packets.find(\n                pkt => pkt.kind === \"event\" && pkt.identifier === code\n            )\n            cmdname = pkt?.name\n        } else if (this.isReport) {\n            const spec = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n            const code = this.serviceCommand & ~CMD_GET_REG\n            const pkt = spec?.packets.find(\n                pkt => pkt.kind === \"report\" && pkt.identifier === code\n            )\n            cmdname = pkt?.name\n        } else {\n            cmdname = commandName(cmd, this.serviceClass)\n        }\n        return cmdname\n    }\n}\n\nfunction frameToPackets(frame: Uint8Array, timestamp: number) {\n    const size = frame[2] || 0\n    if (frame.length < size + 12) {\n        warn(\n            `${timestamp}ms: got only ${frame.length} bytes; expecting ${\n                size + 12\n            }`\n        )\n    } else if (size < 4) {\n        warn(`${timestamp}ms: empty packet`)\n    } else {\n        const computed = crc(frame.slice(2, size + 12))\n        const actual = read16(frame, 0)\n        if (actual != computed)\n            console.error(\n                `crc mismatch; sz=${size} got:${actual}, exp:${computed}`\n            )\n\n        const res: Packet[] = []\n        if (frame.length != 12 + frame[2])\n            warn(`${timestamp}ms: unexpected packet len: ${frame.length}`)\n        for (let ptr = 12; ptr < 12 + frame[2]; ) {\n            const psz = frame[ptr] + 4\n            const sz = ALIGN(psz)\n            const pkt = bufferConcat(\n                frame.slice(0, 12),\n                frame.slice(ptr, ptr + psz)\n            )\n            if (ptr + psz > 12 + frame[2])\n                warn(\n                    `${timestamp}ms: invalid frame compression, res len=${res.length}`\n                )\n            const p = Packet.fromBinary(pkt)\n            p.timestamp = timestamp\n            res.push(p)\n            // only set req_ack flag on first packet - otherwise we would sent multiple acks\n            if (res.length > 1) p.requiresAck = false\n            ptr += sz\n        }\n\n        return res\n    }\n\n    return []\n}\n\nexport default Packet\n","import { META_TRACE } from \"../constants\"\nimport Packet from \"../packet\"\nimport { printPacket } from \"../pretty\"\nimport { roundWithPrecision, toHex } from \"../utils\"\n\nconst TRACE_OVERSHOOT = 1.1\n\n/**\n * Collect stack trace at the current execution position\n * @returns\n * @internal\n */\nexport function stack() {\n    return new Error().stack\n}\n\n/**\n * @internal\n */\nexport function cleanStack(text: string) {\n    return text\n        ?.split(/\\n/g)\n        .slice(2)\n        .join(\"\\n\") // drop first 2 lines\n        .replace(/webpack-internal:\\/\\/\\//g, \"\")\n        .replace(/https:\\/\\/microsoft\\.github\\.io\\/jacdac-docs/g, \"\")\n}\n\n/**\n * A sequence of packets.\n * @category Trace\n */\nexport class Trace {\n    readonly maxLength: number\n    readonly description: string\n    /**\n     * Constructs a new empty trace or from an existing list of packets\n     * @param packets list of packets\n     * @param description description of the trace\n     */\n    constructor(\n        public packets: Packet[] = [],\n        options?: {\n            description?: string\n            maxLength?: number\n        }\n    ) {\n        this.description = options?.description\n        this.maxLength = options?.maxLength\n    }\n\n    /**\n     * Number of packets in trace\n     */\n    get length() {\n        return this.packets.length\n    }\n\n    /**\n     * Duration in milliseconds between the first and last packet.\n     */\n    get duration() {\n        if (!this.packets.length) return 0\n        return (\n            this.packets[this.packets.length - 1].timestamp -\n            this.packets[0].timestamp\n        )\n    }\n\n    /**\n     * Timestamp of the first packet, defaults to 0 if trace is empty.\n     */\n    get startTimestamp() {\n        return this.packets[0]?.timestamp || 0\n    }\n\n    /**\n     * Timestamp of the last packet, defaults to 0 if trace is empty.\n     */\n    get endTimestamp() {\n        return this.packets[this.packets.length - 1]?.timestamp || 0\n    }\n\n    /**\n     * Appends a packet to the trace\n     * @param packet packet to add\n     * @param maxLength If positive, prunes older packets when the length reaches maxLength\n     */\n    addPacket(packet: Packet) {\n        this.packets.push(packet)\n        if (\n            this.maxLength > 0 &&\n            this.packets.length > this.maxLength * TRACE_OVERSHOOT\n        ) {\n            // 10% overshoot of max\n            this.packets = this.packets.slice(-this.maxLength)\n        }\n    }\n\n    /**\n     * Gets a text-rendered view of the trace\n     * @param length maximum number of elements\n     * @returns text where each line is a packet\n     */\n    serializeToText(length?: number) {\n        const start = this.packets[0]?.timestamp || 0\n        let pkts = this.packets\n        if (length > 0) pkts = pkts.slice(-length)\n        const text = pkts.map(pkt => {\n            let t = `${roundWithPrecision(pkt.timestamp - start, 3)}\\t${toHex(\n                pkt.toBuffer()\n            )}\\t${printPacket(pkt, {}).replace(/\\r?\\n/g, \" \")}`\n            const trace = pkt.meta[META_TRACE] as string\n            if (trace) t += \"\\n\" + cleanStack(trace)\n            return t\n        })\n        if (this.description) {\n            text.unshift(this.description)\n            text.unshift(\"\")\n        }\n        return text.join(\"\\n\")\n    }\n}\nexport default Trace\n","import { NEW_LISTENER, REMOVE_LISTENER, ERROR, CHANGE } from \"./constants\"\nimport { Observable, Observer } from \"./observable\"\nimport Flags from \"./flags\"\nimport { stack } from \"./trace/trace\"\n\n/**\n * @category JDOM\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type EventHandler = (...args: any[]) => void\n\ninterface Listener {\n    handler: EventHandler\n    once: boolean\n    stackTrace?: string\n}\n\nfunction normalizeEventNames(eventNames: string | string[]): string[] {\n    if (!eventNames) eventNames = []\n    if (typeof eventNames === \"string\") eventNames = [eventNames]\n    return eventNames\n}\n\n/**\n * Base interface for evented nodes in Jacdac\n * @category JDOM\n */\nexport interface IEventSource {\n    readonly nodeId: number\n    changeId: number\n\n    /**\n     * Subscribes to an event and returns the unsubscription handler\n     * @param eventName\n     * @param next\n     */\n    subscribe<T>(\n        eventName: string | string[],\n        next: (value: T) => void\n    ): () => void\n}\n\n/**\n * Given a node or set of nodes, generate a stable string that can be used to track dependencies in frameworks like React.\n * @param nodes\n * @returns\n * @category JDOM\n */\nexport function dependencyId(nodes: IEventSource | IEventSource[]) {\n    if (Array.isArray(nodes))\n        return nodes?.map(node => node?.nodeId || \"?\").join(\",\") || \"\"\n    else return nodes?.nodeId || \"\"\n}\n\nlet nextNodeId = 0\n\n/**\n * Base class for evented nodes in Jacdac\n * @category JDOM\n */\nexport class JDEventSource implements IEventSource {\n    /**\n     * Gets an internal unique node identifier, mostly used for debugging.\n     * @category JDOM\n     */\n    public readonly nodeId = nextNodeId++\n\n    private readonly listeners: Record<string, Listener[]> = {}\n\n    /**\n     * Gets a counter of event emit calls.\n     * @category JDOM\n     */\n    readonly eventStats: Record<string, number> = {}\n\n    /**\n     * Gets a counter map from events to new listener counts\n     * @category JDOM\n     */\n    newListenerStats: Record<string, number> = undefined\n\n    /**\n     * @internal\n     */\n    constructor() {}\n\n    /**\n     * Registers a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to register\n     * @returns current object instance\n     * @category JDOM\n     */\n    on(eventName: string | string[], handler: EventHandler) {\n        if (!handler) return this\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.addListenerInternal(eventName, handler, false)\n        )\n        return this\n    }\n\n    /**\n     * Unregisters a handler for one or more events\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to unregister\n     * @returns current object instance\n     * @category JDOM\n     */\n    off(eventName: string | string[], handler: EventHandler) {\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.removeListenerInternal(eventName, handler)\n        )\n        return this\n    }\n\n    /**\n     * Registers a handler for one or more events to run only once.\n     * @param eventName name or names of the events to subscribe\n     * @param handler handler to execute\n     * @returns current object instance\n     * @category JDOM\n     */\n    once(eventName: string | string[], handler: EventHandler) {\n        normalizeEventNames(eventName).forEach(eventName =>\n            this.addListenerInternal(eventName, handler, true)\n        )\n        return this\n    }\n\n    private addListenerInternal(\n        eventName: string,\n        handler: EventHandler,\n        once: boolean\n    ): void {\n        if (!eventName || !handler) {\n            return\n        }\n\n        const eventListeners =\n            this.listeners[eventName] || (this.listeners[eventName] = [])\n        const listener = eventListeners.find(\n            listener => listener.handler === handler\n        )\n        if (listener) {\n            listener.once = !!once\n            return\n        }\n\n        eventListeners.push({\n            handler,\n            once: !!once,\n            // debug only collection of trace for leak detection\n            stackTrace: Flags.diagnostics && stack(),\n        })\n        this.emit(NEW_LISTENER, eventName, handler)\n        // diagnostics\n        if (Flags.diagnostics) {\n            if (!this.newListenerStats) this.newListenerStats = {}\n            this.newListenerStats[eventName] =\n                (this.newListenerStats[eventName] || 0) + 1\n        }\n    }\n\n    private removeListenerInternal(\n        eventName: string,\n        handler: EventHandler\n    ): void {\n        if (!eventName || !handler) return\n\n        const eventListeners = this.listeners[eventName]\n        if (eventListeners) {\n            for (let i = 0; i < eventListeners.length; ++i) {\n                const listener = eventListeners[i]\n                if (handler === listener.handler) {\n                    eventListeners.splice(i, 1)\n                    this.emit(REMOVE_LISTENER, eventName, handler)\n                    return\n                }\n            }\n        }\n    }\n\n    /**\n     * Synchronously calls each of the listeners registered for the event named eventName,\n     * in the order they were registered, passing the supplied arguments to each.\n     * @param eventName\n     * @param args\n     * @category JDOM\n     */\n    emit(eventName: string, ...args: unknown[]): boolean {\n        if (!eventName) return false\n\n        // track event stats\n        this.eventStats[eventName] = (this.eventStats[eventName] || 0) + 1\n\n        const eventListeners = this.listeners[eventName]\n        if (!eventListeners || eventListeners.length == 0) {\n            // report unhandled errors\n            if (eventName == ERROR) console.error(args[0])\n            return false\n        }\n        for (let i = 0; i < eventListeners.length; ++i) {\n            const listener = eventListeners[i]\n            const handler = listener.handler\n            if (listener.once) {\n                eventListeners.splice(i, 1)\n                --i\n            }\n            try {\n                // eslint-disable-next-line prefer-spread\n                handler.apply(null, args)\n            } catch (e) {\n                // avoid recursive errors in error handler\n                if (eventName !== ERROR) this.emit(ERROR, e)\n            }\n        }\n        return true\n    }\n\n    /**\n     * Gets the number of listeners for a given event\n     * @param eventName name of the event\n     * @returns number of registered handlers\n     * @category JDOM\n     */\n    listenerCount(eventName: string): number {\n        if (!eventName) return 0\n        const listeners = this.listeners[eventName]\n        return listeners?.length || 0\n    }\n\n    /**\n     * Gets the list stack trace where an event was registered. Only enabled if ``Flags.debug`` is true.\n     * @param eventName name of the event\n     * @returns stack traces where a listener was added\n     * @category JDOM\n     */\n    listenerStackTraces(eventName: string): string[] {\n        const listeners = this.listeners[eventName]\n        return listeners?.map(listener => listener.stackTrace)\n    }\n\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * @category JDOM\n     */\n    eventNames(): string[] {\n        return Object.keys(this.listeners)\n    }\n\n    /**\n     * Creates an observable from the given event\n     * @param eventName\n     * @category JDOM\n     */\n    observe<T>(eventName: string | string[]): Observable<T> {\n        return new EventObservable<T>(this, normalizeEventNames(eventName))\n    }\n\n    /**\n     * Subscribes to an event and returns the unsubscription handler\n     * @param eventName\n     * @param next\n     * @category JDOM\n     */\n    subscribe<T>(\n        eventName: string | string[],\n        next: (value: T) => void\n    ): () => void {\n        const observer = this.observe<T>(eventName)\n        return observer.subscribe({ next }).unsubscribe\n    }\n\n    /**\n     * Gets a counter for the ``CHANGE`` event.\n     * @category JDOM\n     */\n    get changeId() {\n        return this.eventStats[CHANGE] || 0\n    }\n}\n\nclass EventObservable<T> implements Observable<T> {\n    constructor(\n        public readonly eventEmitter: JDEventSource,\n        public readonly eventNames: string[]\n    ) {\n        //console.log(`obs`, this.eventNames)\n    }\n\n    subscribe(observer: Observer<T>) {\n        //console.log(`on`, this.eventNames, observer)\n        if (observer.next) this.eventEmitter.on(this.eventNames, observer.next)\n        if (observer.error) this.eventEmitter.on(ERROR, observer.error)\n        // never completes\n        return {\n            unsubscribe: () => {\n                //console.log(`off`, this.eventNames, observer)\n                if (observer.next)\n                    this.eventEmitter.off(this.eventNames, observer.next)\n                if (observer.error) this.eventEmitter.off(ERROR, observer.error)\n            },\n        }\n    }\n}\nexport default JDEventSource\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport JDEventSource from \"./eventsource\"\n\n/**\n * Base class for JDOM Node classes.\n * @category JDOM\n */\nexport abstract class JDNode extends JDEventSource {\n    private _nodeData: Record<string, unknown>\n\n    constructor() {\n        super()\n    }\n\n    /**\n     * Globally unique identifier in the tree\n     * @category JDOM\n     */\n    abstract get id(): string\n\n    /**\n     * Gets a kind identifier useful for UI descriptions\n     * @category JDOM\n     */\n    abstract get nodeKind(): string\n\n    /**\n     * Gets the local name\n     * @category JDOM\n     */\n    abstract get name(): string\n\n    /**\n     * A human friendly name\n     * @category JDOM\n     */\n    get friendlyName(): string {\n        return this.name\n    }\n\n    /**\n     * Gets the name including parents\n     * @category JDOM\n     */\n    abstract get qualifiedName(): string\n\n    /**\n     * Gets the parent node in the Jacdac dom\n     * @category JDOM\n     */\n    abstract get parent(): JDNode\n\n    /**\n     * Gets the children of the current node\n     * @category JDOM\n     */\n    abstract get children(): JDNode[]\n\n    /**\n     * Gets a databag to store custom information\n     * @category JDOM\n     */\n    get nodeData() {\n        if (!this._nodeData) this._nodeData = {}\n        return this._nodeData\n    }\n\n    /**\n     * Emit event in current node and parent nodes\n     * @param event event to emit\n     * @param arg event arguments\n     * @category JDOM\n     */\n    emitPropagated(event: string, arg?: any) {\n        let current = this as JDNode\n        while (current) {\n            current.emit(event, arg || this)\n            current = current.parent\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    toString() {\n        return this.friendlyName\n    }\n}\n\nexport default JDNode\n","import JDNode from \"./node\"\nimport JDService from \"./service\"\nimport { DecodedPacket } from \"./pretty\"\n\n/**\n * Base class for JDOM service member classes.\n * @category JDOM\n */\nexport abstract class JDServiceMemberNode extends JDNode {\n    private _specification: jdspec.PacketInfo\n\n    /**\n     * Parent service\n     * @category JDOM\n     */\n    public readonly service: JDService\n    /**\n     * Identifier of the event.\n     * @category Specification\n     */\n    public readonly code: number\n\n    private readonly isPacket: (pkt: jdspec.PacketInfo) => boolean\n\n    /**\n     * @internal\n     */\n    constructor(\n        service: JDService,\n        code: number,\n        isPacket: (pkt: jdspec.PacketInfo) => boolean\n    ) {\n        super()\n        this._specification = null\n        this.service = service\n        this.code = code\n        this.isPacket = isPacket\n    }\n\n    /**\n     * Gets the node identifier in the JDOM tree\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${\n            this.service.device.deviceId\n        }:${this.service.serviceIndex.toString(16)}:${this.code.toString(16)}`\n    }\n\n    /**\n     * Gets the event name, if specified.\n     * @category JDOM\n     */\n    get name() {\n        return this.specification?.name || this.code.toString(16)\n    }\n\n    /**\n     * Gets the qualitified event name, if specified.\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.service.qualifiedName}.${this.name}`\n    }\n\n    /**\n     * Gets the event specification if known.\n     * @category Specification\n     */\n    get specification() {\n        if (this._specification === null)\n            // lookup once\n            this._specification = this.service.specification?.packets.find(\n                packet =>\n                    this.isPacket(packet) && packet.identifier === this.code\n            )\n        return this._specification\n    }\n\n    /**\n     * Gets the parent service client instance.\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.service\n    }\n\n    /**\n     * Gets the event friendly name.\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.service.friendlyName, this.name]\n        return parts.join(\".\")\n    }\n\n    /**\n     * @internal\n     */\n    abstract get decoded(): DecodedPacket\n}\n\nexport default JDServiceMemberNode\n","import { FIELD_NODE_NAME } from \"./constants\"\nimport JDNode from \"./node\"\nimport { DecodedMember } from \"./pretty\"\nimport JDServiceMemberNode from \"./servicemembernode\"\n\n/**\n * A Jacdac field.\n * @category JDOM\n */\nexport class JDField extends JDNode {\n    /**\n     * Gets the parent JDOM member\n     * @category JDOM\n     */\n    readonly member: JDServiceMemberNode\n    /**\n     * Gets the index in the unpacked data payload\n     * @category Specification\n     */\n    readonly index: number\n    /**\n     * Gets the field specification\n     * @category Specification\n     */\n    readonly specification: jdspec.PacketMember\n\n    /**\n     * @internal\n     */\n    constructor(\n        member: JDServiceMemberNode,\n        index: number,\n        specification: jdspec.PacketMember\n    ) {\n        super()\n        this.member = member\n        this.index = index\n        this.specification = specification\n    }\n\n    /**\n     * Gets the JDOM node identifier\n     * @category JDOM\n     */\n    get id(): string {\n        return `${this.nodeKind}:${\n            this.member.service.device.deviceId\n        }:${this.member.service.serviceIndex.toString(\n            16\n        )}:${this.member.code.toString(16)}:${this.index.toString(16)}`\n    }\n\n    /**\n     * Gets the JDOM name\n     * @category JDOM\n     */\n    get name(): string {\n        return this.specification.name === \"_\"\n            ? this.member.specification.name\n            : this.specification.name\n    }\n\n    /**\n     * @internal\n     */\n    get children(): JDNode[] {\n        return []\n    }\n\n    /**\n     * Gets the JDOM qualified name\n     * @category JDOM\n     */\n    get qualifiedName(): string {\n        return `${this.member.qualifiedName}.${this.name}`\n    }\n\n    /**\n     * Gets the JDOM parent\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.member\n    }\n\n    /**\n     * Gets the JDOM friendly name\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.member.friendlyName]\n        if (this.specification.name !== \"_\") parts.push(this.name)\n        return parts.join(\".\")\n    }\n\n    /**\n     * @internal\n     */\n    get dataTypeName(): string {\n        const parts = [this.member.service.specification.shortName, this.name]\n        return parts.join(\".\")\n    }\n\n    /**\n     * Gets the unit of the data stored in the field\n     * @category Data\n     */\n    get unit(): jdspec.Unit {\n        return this.specification.unit\n    }\n\n    /**\n     * Gets ``FIELD_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind(): string {\n        return FIELD_NODE_NAME\n    }\n\n    /**\n     * @internal\n     */\n    get decoded(): DecodedMember {\n        const decoded = this.member.decoded\n        return decoded?.decoded[this.index]\n    }\n\n    /**\n     * Gets the decoded field value\n     * @category Data\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get value(): any {\n        return this.decoded?.value\n    }\n}\n\nexport default JDField\n","import { PackedSimpleValue, PackedValues } from \"./pack\"\n\n/**\n * Unpacked data mapped as an object\n * @category Data Packing\n */\nexport interface PackedObject {\n    [index: string]: PackedSimpleValue | PackedObject | PackedObject[]\n}\n\n/**\n * Unrolls an array of packed values into a friendly object structure\n * @param data\n * @param fields\n * @returns\n * @category Data Packing\n */\nexport function unpackedToObject(\n    data: PackedValues,\n    fields: jdspec.PacketMember[],\n    defaultName?: string\n): PackedObject {\n    if (!data || !fields) return undefined\n    const r: PackedObject = {}\n    for (let i = 0; i < data.length; ++i) {\n        const field = fields[i]\n        const value = data[i]\n        const { name, startRepeats } = field\n        const prettyName = name === \"_\" && defaultName ? defaultName : name\n\n        if (startRepeats) {\n            const repeatFields = fields.slice(i)\n            console.log({ value, repeatFields, data })\n            r[\"repeat\"] = value.map((rdata: PackedValues) => {\n                const r: PackedObject = {}\n                for (let i = 0; i < repeatFields.length; ++i) {\n                    const field = fields[i]\n                    const value = rdata[i]\n                    const { name } = field\n                    const prettyName =\n                        name === \"_\" && defaultName ? defaultName : name\n                    r[prettyName] = value\n                }\n                return r\n            })\n            break\n        } else r[prettyName] = value\n    }\n    return r\n}\n\n/**\n * Converts an object structure into a flat packed data array\n * @param pkt\n * @param msg\n * @returns\n * @category Data Packing\n */\nexport function objectToUnpacked(\n    pkt: jdspec.PacketInfo,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    msg: any\n): PackedValues {\n    if (!msg) return []\n\n    if (typeof msg === \"number\" || typeof msg === \"string\")\n        return [msg as number]\n    else if (typeof msg === \"boolean\") return [msg ? 1 : 0]\n    else if (Array.isArray(msg)) {\n        // assume a packaged layout\n        return msg as PackedValues\n    } else {\n        const { fields } = pkt\n        const r: PackedValues = []\n        for (let i = 0; i < fields.length; ++i) {\n            const field = fields[i]\n            const name = field.name === \"_\" ? pkt.name : field.name\n            const value = msg[name]\n            if (field.startRepeats) {\n                const repeatFields = fields.slice(i)\n                r.push(\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    (value as any[]).map(vrow => {\n                        const arow: PackedSimpleValue[] = []\n                        for (let j = 0; j < repeatFields.length; ++j) {\n                            const rfield = repeatFields[j]\n                            const rname = rfield.name\n                            arow.push(vrow[rname])\n                        }\n                        return arow\n                    })\n                )\n                break\n            } else {\n                r.push(value)\n            }\n        }\n\n        return r\n    }\n}\n","import Packet from \"./packet\"\nimport {\n    CMD_SET_REG,\n    REPORT_RECEIVE,\n    REPORT_UPDATE,\n    CHANGE,\n    CMD_GET_REG,\n    REGISTER_NODE_NAME,\n    REGISTER_REFRESH_TIMEOUT,\n    REGISTER_REFRESH_RETRY_1,\n    REGISTER_REFRESH_RETRY_0,\n    GET_ATTEMPT,\n} from \"./constants\"\nimport JDService from \"./service\"\nimport { intOfBuffer, uintOfBuffer } from \"./buffer\"\nimport { bufferEq, toHex, fromUTF8, uint8ArrayToString } from \"./utils\"\nimport { DecodedPacket } from \"./pretty\"\nimport { isRegister } from \"./spec\"\nimport JDField from \"./field\"\nimport JDServiceMemberNode from \"./servicemembernode\"\nimport JDNode from \"./node\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport { PackedObject, unpackedToObject } from \"./packobject\"\n\n/**\n * A Jacdac register client.\n * @category JDOM\n */\nexport class JDRegister extends JDServiceMemberNode {\n    private _lastReportPkt: Packet\n    private _fields: JDField[]\n    private _lastSetTimestamp = -Infinity\n    private _lastGetTimestamp = -Infinity\n    private _lastGetAttempts = 0\n\n    /**\n     * @internal\n     */\n    constructor(service: JDService, code: number) {\n        super(service, code, isRegister)\n    }\n\n    /**\n     * Returns ``REGISTER_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind() {\n        return REGISTER_NODE_NAME\n    }\n\n    /**\n     * Gets the list of field, if the specification is known\n     * @category JDOM\n     */\n    get fields() {\n        if (!this._fields)\n            this._fields = this.specification?.fields.map(\n                (field, index) => new JDField(this, index, field)\n            )\n        return this._fields.slice()\n    }\n\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.fields\n    }\n\n    /**\n     * Timestamp of the last ``register set`` packet\n     * @category Packets\n     */\n    get lastSetTimestamp() {\n        return this._lastSetTimestamp\n    }\n\n    /**\n     * Timestamp of the last ``register get`` packet\n     * @category Packets\n     */\n    get lastGetTimestamp() {\n        return this._lastGetTimestamp\n    }\n\n    /**\n     * Clears the get timestamp\n     * @internal\n     * @category Packets\n     */\n    clearGetTimestamp() {\n        this._lastGetTimestamp = -Infinity\n    }\n\n    /**\n     * Number of attempts to send a ``get`` packet without response\n     * @category Packets\n     */\n    get lastGetAttempts() {\n        return this._lastGetAttempts\n    }\n\n    /**\n     * Send a message to set the register value\n     * @param data packed data\n     * @param autoRefresh immediately send a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendSetAsync(data: Uint8Array, autoRefresh?: boolean): Promise<void> {\n        const cmd = CMD_SET_REG | this.code\n        const pkt = Packet.from(cmd, data)\n        this._lastSetTimestamp = this.service.device.bus.timestamp\n        let p = this.service.sendPacketAsync(pkt, this.service.registersUseAcks)\n        if (autoRefresh)\n            p = this.service.device.bus\n                .delay(50)\n                .then(() => this.sendGetAsync())\n        return p\n    }\n\n    /**\n     * Requests the value of the register by sending a ``get`` packet\n     * @returns\n     * @category Packets\n     */\n    sendGetAsync(): Promise<void> {\n        if (this.specification?.kind === \"const\" && this.data !== undefined)\n            return Promise.resolve()\n\n        this._lastGetTimestamp = this.service.device.bus.timestamp\n        this._lastGetAttempts++\n        const cmd = CMD_GET_REG | this.code\n        return this.service\n            .sendCmdAsync(cmd, undefined, this.service.registersUseAcks)\n            .then(() => {\n                this.emit(GET_ATTEMPT)\n            })\n    }\n\n    /**\n     * Send a message to set the register value\n     * @param values message to pack and send\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetPackedAsync(\n        values: PackedValues,\n        autoRefresh?: boolean\n    ): Promise<void> {\n        const fmt = this.specification?.packFormat\n        if (!fmt) throw new Error(\"unknown register data format\")\n        return this.sendSetAsync(jdpack(fmt, values), autoRefresh)\n    }\n\n    /**\n     * Sends a message to set the register value as a bpolean\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetBoolAsync(value: boolean, autoRefresh?: boolean): Promise<void> {\n        return this.sendSetPackedAsync([value ? 1 : 0], autoRefresh)\n    }\n\n    /**\n     * Sends a message to set the register value as a string\n     * @param value\n     * @param autoRefresh\n     * @param autoRefresh immediately send a ``get`` packet\n     * @category Packets\n     */\n    sendSetStringAsync(value: string, autoRefresh?: boolean): Promise<void> {\n        return this.sendSetPackedAsync([value || \"\"], autoRefresh)\n    }\n\n    /**\n     * Gets the raw data from the last report packet\n     * @category Data\n     */\n    get data() {\n        return this._lastReportPkt?.data\n    }\n\n    /**\n     * Gets the timestamp when received the last report with data\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        return this._lastReportPkt?.timestamp\n    }\n\n    /**\n     * Get the data from the last report packet, unpacked according to the specification.\n     * @category Data\n     */\n    get unpackedValue(): PackedValues {\n        const d = this.data\n        const fmt = this.specification?.packFormat\n        return d && fmt && jdunpack(this.data, fmt)\n    }\n\n    /**\n     * Gets the data from the last report packet, unpacked and hydrated into an object.\n     * @category Data\n     */\n    get objectValue(): PackedObject {\n        const { specification } = this\n        return unpackedToObject(\n            this.unpackedValue,\n            specification?.fields,\n            specification.name\n        )\n    }\n\n    /**\n     * Gets the data as a signed integer\n     * @category Data\n     */\n    get intValue(): number {\n        const d = this.data\n        return d && intOfBuffer(d)\n    }\n\n    /**\n     * Gets the data as a unsigned integer\n     * @category Data\n     */\n    get uintValue(): number {\n        const d = this.data\n        return d && uintOfBuffer(d)\n    }\n\n    /**\n     * Gets the data as a boolean\n     * @category Data\n     */\n    get boolValue(): boolean {\n        if (this.data === undefined) return undefined\n        return !!this.intValue\n    }\n\n    /**\n     * Gets the data as a string\n     * @category Data\n     */\n    get stringValue(): string {\n        const buf = this.data\n        if (buf === undefined) return undefined\n\n        let value: string\n        try {\n            value = fromUTF8(uint8ArrayToString(buf))\n        } catch {\n            // invalid UTF8\n            value = uint8ArrayToString(buf)\n        }\n        return value\n    }\n\n    /**\n     * Gets a pretty printed represention of the data\n     * @category Data\n     */\n    get humanValue(): string {\n        return this.decoded?.decoded?.map(field => field.humanValue).join(\",\")\n    }\n\n    /**\n     * @internal\n     */\n    toString() {\n        const d = this.data\n        return `${this.id} ${d ? toHex(d) : \"\"}`\n    }\n\n    /**\n     * @internal\n     */\n    get decoded(): DecodedPacket {\n        return this._lastReportPkt?.decoded\n    }\n\n    /**\n     * Refresh the value of the register within a timeout\n     * @param skipIfValue don't refesh if any data if available\n     * @returns\n     * @category Data\n     */\n    refresh(skipIfValue?: boolean): Promise<void> {\n        // don't refetch consts\n        // don't refetch if already data\n        if (\n            !!this.data &&\n            (skipIfValue || this.specification?.kind === \"const\")\n        )\n            return\n\n        const bus = this.service.device.bus\n        return bus.withTimeout(\n            REGISTER_REFRESH_TIMEOUT,\n            new Promise<void>((resolve, reject) => {\n                this.once(REPORT_RECEIVE, () => {\n                    const f = resolve\n                    resolve = null\n                    f()\n                })\n                // re-send get if no answer within 40ms and 90ms\n                this.sendGetAsync()\n                    .then(() => bus.delay(REGISTER_REFRESH_RETRY_0))\n                    .then(() => {\n                        if (resolve)\n                            return this.sendGetAsync().then(() =>\n                                bus.delay(REGISTER_REFRESH_RETRY_1)\n                            )\n                    })\n                    .then(() => {\n                        if (resolve) return this.sendGetAsync()\n                    })\n                    .catch(e => reject(e))\n            })\n        )\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        if (pkt.isRegisterGet) this.processReport(pkt)\n        else if (pkt.isRegisterSet) {\n            // another device sent a set packet to this register\n            // so most likely it's value changed\n            // clear any data caching to force updating the value\n            this.clearGetTimestamp()\n        }\n    }\n\n    private processReport(pkt: Packet) {\n        const updated = !bufferEq(this.data, pkt.data)\n        this._lastReportPkt = pkt\n        this._lastGetAttempts = 0 // reset counter\n        this._lastGetTimestamp = this.service.device.bus.timestamp // reset time counter too\n        this.emit(REPORT_RECEIVE, this)\n        if (updated) {\n            this.emitPropagated(REPORT_UPDATE, this)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * @internal\n     */\n    compareTo(b: JDRegister) {\n        return this.code - b.code || this.service.compareTo(b.service)\n    }\n}\n\nexport default JDRegister\n","import JDNode from \"./node\"\nimport JDService from \"./service\"\nimport Packet from \"./packet\"\nimport {\n    CHANGE,\n    CMD_EVENT_COUNTER_MASK,\n    EVENT,\n    EVENT_NODE_NAME,\n} from \"./constants\"\nimport { isEvent } from \"./spec\"\nimport JDServiceMemberNode from \"./servicemembernode\"\nimport { DecodedPacket } from \"./pretty\"\nimport JDField from \"./field\"\n\n/**\n * A Jacdac event client.\n * @category JDOM\n */\nexport class JDEvent extends JDServiceMemberNode {\n    private _lastReportPkt: Packet\n    private _fields: JDField[]\n    private _count = 0\n\n    /**\n     * @internal\n     */\n    constructor(service: JDService, code: number) {\n        super(service, code, isEvent)\n    }\n\n    /**\n     * Returns the ``EVENT_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return EVENT_NODE_NAME\n    }\n\n    /**\n     * Gets the field node\n     * @category Service Clients\n     */\n    get fields() {\n        if (!this._fields)\n            this._fields = this.specification?.fields.map(\n                (field, index) => new JDField(this, index, field)\n            )\n        return this._fields.slice()\n    }\n\n    /**\n     * Gets the list of fields\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.fields\n    }\n\n    /**\n     * Gets the raw data attached to the last event packet\n     * @category Data\n     */\n    get data() {\n        return this._lastReportPkt?.data\n    }\n\n    /**\n     * Gets the unpacked data attached to the last event packet, if the event specification is known.\n     * @category Data\n     */\n    get unpacked() {\n        const { packFormat } = this.specification || {}\n        return packFormat && this._lastReportPkt?.jdunpack(packFormat)\n    }\n\n    /**\n     * Gets a counter of occurences for this event.\n     * @category Data\n     */\n    get count() {\n        return this._count\n    }\n\n    /**\n     * Gets the timestamp of the last packet with data received for this event.\n     * @category Data\n     */\n    get lastDataTimestamp() {\n        return this._lastReportPkt?.timestamp\n    }\n    /**\n     * @internal\n     */\n    get decoded(): DecodedPacket {\n        return this._lastReportPkt?.decoded\n    }\n\n    /**\n     * @internal\n     */\n    processEvent(pkt: Packet) {\n        const { device } = this.service\n        const ec = (device.eventCounter || 0) + 1\n        // how many packets ahead and behind current are we?\n        const ahead = (pkt.eventCounter - ec) & CMD_EVENT_COUNTER_MASK\n        const behind = (ec - pkt.eventCounter) & CMD_EVENT_COUNTER_MASK\n        // ahead == behind == 0 is the usual case, otherwise\n        // behind < 60 means this is an old event (or retransmission of something we already processed)\n        const old = behind < 60\n        const missed5 = ahead < 5\n        const isahead = ahead > 0\n\n        // ahead < 5 means we missed at most 5 events,\n        // so we ignore this one and rely on retransmission\n        // of the missed events, and then eventually the current event\n        if (isahead && (old || missed5)) return\n\n        this._lastReportPkt = pkt\n        this._count++\n        this.emitPropagated(EVENT, this)\n        this.emit(CHANGE)\n\n        // update device counter\n        device.eventCounter = pkt.eventCounter\n    }\n}\n\nexport default JDEvent\n","import JDEventSource from \"./eventsource\"\n\n/**\n * Base class for clients\n * @category Clients\n */\nexport class JDClient extends JDEventSource {\n    private unsubscribers: (() => void)[] = []\n    protected unmounted = false\n    constructor() {\n        super()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected log(msg: any) {\n        console.log(msg)\n    }\n\n    mount(unsubscribe: () => void): () => void {\n        this.unmounted = false\n        if (unsubscribe && this.unsubscribers.indexOf(unsubscribe) < 0)\n            this.unsubscribers.push(unsubscribe)\n        return unsubscribe\n    }\n\n    unmount() {\n        const us = this.unsubscribers\n        this.unsubscribers = []\n        us.forEach(u => u())\n        this.unmounted = true\n    }\n}\nexport default JDClient\n","import { toHex } from \"./utils\"\n\nexport function cryptoRandomUint32(length: number): Uint32Array {\n    if (typeof window === \"undefined\") return undefined // not supported\n    const vals = new Uint32Array(length)\n    window.crypto.getRandomValues(vals)\n    return vals\n}\n\nexport function anyRandomUint32(length: number): Uint32Array {\n    let r = cryptoRandomUint32(length)\n    if (!r) {\n        r = new Uint32Array(length)\n        for (let i = 0; i < r.length; ++i)\n            r[i] = (Math.random() * 0x1_0000_0000) >>> 0\n    }\n    return r\n}\n\nexport function randomUInt(max: number) {\n    const arr = anyRandomUint32(1)\n    return arr[0] % max\n}\n\nexport function randomBytes(n: number) {\n    const buf = anyRandomUint32(n)\n    const r = new Uint8Array(buf.length)\n    for (let i = 0; i < n; ++i) r[i] = buf[i] & 0xff\n    return r\n}\n\nexport function randomDeviceId() {\n    const devId = anyRandomUint32(8)\n    for (let i = 0; i < 8; ++i) devId[i] &= 0xff\n    return toHex(devId)\n}\n","import JDDevice from \"./device\"\nimport {\n    PIPE_PORT_SHIFT,\n    PIPE_COUNTER_MASK,\n    PIPE_CLOSE_MASK,\n    JD_SERVICE_INDEX_PIPE,\n    PIPE_METADATA_MASK,\n    PACKET_RECEIVE,\n    DATA,\n    CLOSE,\n} from \"./constants\"\nimport Packet from \"./packet\"\nimport JDBus from \"./bus\"\nimport { signal, fromHex, throwError, toHex } from \"./utils\"\nimport { JDClient } from \"./client\"\nimport { jdpack } from \"./pack\"\nimport { randomUInt } from \"./random\"\n\nconst { warn } = console\n\nexport class OutPipe {\n    private _count = 0\n\n    constructor(\n        private device: JDDevice,\n        private port: number,\n        readonly hosted?: boolean\n    ) {}\n\n    static from(bus: JDBus, pkt: Packet, hosted?: boolean) {\n        const [idbuf, port] = pkt.jdunpack<[Buffer, number]>(\"b[8] u16\")\n        const id = toHex(idbuf)\n        const dev = bus.device(id, false, pkt)\n        return new OutPipe(dev, port, hosted)\n    }\n\n    get count() {\n        return this._count\n    }\n\n    get isOpen() {\n        return this.device != null\n    }\n\n    send(buf: Uint8Array) {\n        return this.sendData(buf, 0)\n    }\n\n    sendMeta(buf: Uint8Array) {\n        return this.sendData(buf, PIPE_METADATA_MASK)\n    }\n\n    async respondForEach<T>(\n        items: ArrayLike<T>,\n        converter: (item: T) => Uint8Array\n    ) {\n        try {\n            const n = items.length\n            for (let i = 0; i < n; ++i) {\n                const item = items[i]\n                const data = converter(item)\n                await this.send(data)\n            }\n        } finally {\n            await this.close()\n        }\n    }\n\n    private async sendData(buf: Uint8Array, flags: number) {\n        if (!this.device) {\n            warn(\"sending data over closed pipe\")\n            return\n        }\n        const cmd =\n            (this.port << PIPE_PORT_SHIFT) |\n            flags |\n            (this._count & PIPE_COUNTER_MASK)\n        const pkt = Packet.from(cmd, buf)\n        pkt.serviceIndex = JD_SERVICE_INDEX_PIPE\n        this.device.sendPktWithAck(pkt).then(\n            () => {},\n            err => {\n                console.log(err)\n                this.free()\n            }\n        )\n        if (this.hosted) this.device.bus.processPacket(pkt)\n        this._count++\n    }\n\n    private free() {\n        this.device = null\n        this.port = null\n    }\n\n    async close() {\n        await this.sendData(new Uint8Array(0), PIPE_CLOSE_MASK)\n        this.free()\n    }\n}\n\nexport class InPipe extends JDClient {\n    private _port: number\n    private _count = 0\n\n    constructor(protected readonly bus: JDBus) {\n        super()\n\n        this._handlePacket = this._handlePacket.bind(this)\n        this.allocPort()\n        this.mount(\n            this.bus.selfDevice.subscribe(PACKET_RECEIVE, this._handlePacket)\n        )\n    }\n\n    get port() {\n        return this._port\n    }\n\n    get count() {\n        return this._count\n    }\n\n    get isOpen() {\n        return this._port != null\n    }\n\n    private allocPort() {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this._port = 1 + randomUInt(511)\n            const info = this.bus.selfDevice.port(this._port)\n            if (!info.localPipe && !info.pipeType) {\n                info.localPipe = this\n                break\n            }\n        }\n    }\n\n    openCommand(cmd: number) {\n        if (!this.isOpen) throwError(\"trying to access a closed pipe\")\n        const b = jdpack<[Uint8Array, number, number]>(\"b[8] u16 u16\", [\n            fromHex(this.bus.selfDeviceId),\n            this._port,\n            0,\n        ])\n        return Packet.from(cmd, b)\n    }\n\n    private _handlePacket(pkt: Packet) {\n        if (!pkt.isPipe) return\n        if (pkt.pipePort !== this._port) return\n        if (\n            (pkt.serviceCommand & PIPE_COUNTER_MASK) ==\n            (this._count & PIPE_COUNTER_MASK)\n        ) {\n            this._count++\n            this.emit(DATA, pkt)\n            if (pkt.serviceCommand & PIPE_CLOSE_MASK) {\n                this.close()\n            }\n        }\n    }\n\n    close() {\n        if (this._port == null) return\n        this.emit(CLOSE)\n        this._port = null\n        this.bus.selfDevice.port(this._port).localPipe = undefined\n        this.unmount()\n    }\n}\n\nexport class InPipeReader extends InPipe {\n    private done = signal()\n    private meta: Packet[] = []\n    private output: Packet[] = []\n\n    constructor(bus: JDBus) {\n        super(bus)\n        this.mount(\n            this.subscribe(DATA, (pkt: Packet) => {\n                if (pkt.serviceCommand & PIPE_METADATA_MASK) this.meta.push(pkt)\n                else this.output.push(pkt)\n            })\n        )\n        this.mount(this.subscribe(CLOSE, this.done.signal))\n    }\n\n    async readData(timeout = 500): Promise<Uint8Array[]> {\n        const r = await this.readAll(timeout)\n        return r.output.map(p => p.data).filter(b => !!b?.length)\n    }\n\n    async readAll(timeout = 500) {\n        const res = await this.bus.withTimeout(timeout, this.done.signalled)\n        if (!res) throw new Error(\"Timeout reading pipe: \" + timeout + \"ms\")\n        return {\n            meta: this.meta,\n            output: this.output,\n        }\n    }\n}\n","import JDDevice from \"./device\"\nimport Packet from \"./packet\"\nimport { serviceName } from \"./pretty\"\nimport JDRegister from \"./register\"\nimport {\n    PACKET_RECEIVE,\n    PACKET_SEND,\n    SERVICE_NODE_NAME,\n    REPORT_RECEIVE,\n    SERVICE_CLIENT_ADDED,\n    SERVICE_CLIENT_REMOVED,\n    CHANGE,\n    ROLE_CHANGE,\n} from \"./constants\"\nimport JDNode from \"./node\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    isRegister,\n    isReading,\n    isEvent,\n    isValue,\n    isIntensity,\n    isOptionalReadingRegisterCode,\n    isConstRegister,\n} from \"./spec\"\nimport JDEvent from \"./event\"\nimport { strcmp } from \"./utils\"\nimport {\n    BaseEvent,\n    BaseReg,\n    SystemEvent,\n    SystemReg,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { InPipeReader } from \"./pipes\"\nimport { jdpack, jdunpack, PackedValues } from \"./pack\"\nimport Flags from \"./flags\"\nimport { isMixinService } from \"../../jacdac-spec/spectool/jdutils\"\nimport JDServiceServer from \"./servers/serviceserver\"\n\n/**\n * A Jacdac service client hosting registers, events.\n * @category JDOM\n */\nexport class JDService extends JDNode {\n    /**\n     * Gets the service class\n     * @category Control\n     */\n    readonly serviceClass: number\n    private _role: string\n    private _registers: JDRegister[]\n    private _events: JDEvent[]\n    private _reports: Packet[] = []\n    private _specification: jdspec.ServiceSpec = null\n    // packets received since last announce\n    public registersUseAcks = false\n    private readonly _clients: JDServiceClient[] = []\n\n    private _twin: JDServiceServer\n\n    /**\n     * Gets the device this service belongs to\n     * @category JDOM\n     */\n    public readonly device: JDDevice\n    /**\n     * Gets the service index in the service list\n     * @category Control\n     */\n    public readonly serviceIndex: number\n\n    /**\n     * @internal\n     */\n    constructor(device: JDDevice, serviceIndex: number) {\n        super()\n        this.device = device\n        this.serviceIndex = serviceIndex\n        this.serviceClass = this.device.serviceClassAt(this.serviceIndex)\n\n        const statusCodeChanged = this.event(BaseEvent.StatusCodeChanged)\n        statusCodeChanged.on(CHANGE, () => {\n            // todo update status code with event payload\n            const { data } = statusCodeChanged\n            console.debug(`${this}: status code changed event`, { data })\n            // schedule data update\n            const statusCode = this.register(BaseReg.StatusCode)\n            statusCode?.clearGetTimestamp()\n        })\n    }\n\n    /**\n     * Gets the node identifier\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${\n            this.device.deviceId\n        }:${this.serviceIndex.toString(16)}`\n    }\n\n    /**\n     * Gets the ``SERVICE_NODE_NAME`` identifier\n     * @category JDOM\n     */\n    get nodeKind() {\n        return SERVICE_NODE_NAME\n    }\n\n    /**\n     * Gets the service name\n     * @category JDOM\n     */\n    get name() {\n        return serviceName(this.serviceClass)?.toLowerCase()\n    }\n\n    /**\n     * Gets the service name and parent names\n     * @category JDOM\n     */\n    get friendlyName() {\n        const parts = [this.device.friendlyName]\n        if (\n            this.device.services({ serviceClass: this.serviceClass }).length > 1\n        )\n            parts.push(`[${this.serviceIndex.toString(16)}]`)\n        return parts.join(\".\")\n    }\n\n    /**\n     * Gets the service qualified name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return `${this.device.qualifiedName}[${this.serviceIndex.toString(16)}]`\n    }\n\n    /**\n     * Gets the device holding the service\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.device\n    }\n\n    get role(): string {\n        return this._role\n    }\n\n    set role(value: string) {\n        if (value !== this._role) {\n            this._role = value\n            this.emit(ROLE_CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    report(identifier: number) {\n        return this._reports.find(r => r.registerIdentifier === identifier)\n    }\n\n    get reports() {\n        return this._reports.slice(0)\n    }\n\n    get mixins() {\n        // find all 0x2 services follow this service\n        const r = []\n        const { serviceClasses, serviceLength } = this.device\n        for (\n            let i = this.serviceIndex + 1;\n            i < serviceLength && isMixinService(serviceClasses[i]);\n            ++i\n        ) {\n            r.push(this.device.service(i))\n        }\n        return r\n    }\n\n    get isMixin() {\n        return isMixinService(this.serviceClass)\n    }\n\n    get twin(): JDServiceServer {\n        return this._twin\n    }\n\n    set twin(server: JDServiceServer) {\n        if (this._twin === server) return\n\n        if (this._twin) this._twin.twin = undefined\n        this._twin = server\n        server.twin = this\n        this.emit(CHANGE)\n    }\n\n    private _readingRegister: JDRegister\n    /**\n     * Gets the ``reading`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get readingRegister(): JDRegister {\n        if (!this._readingRegister) {\n            const pkt = this.specification?.packets.find(pkt => isReading(pkt))\n            this._readingRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._readingRegister\n    }\n\n    private _valueRegister: JDRegister\n    /**\n     * Gets the ``value`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get valueRegister(): JDRegister {\n        if (!this._valueRegister) {\n            const pkt = this.specification?.packets.find(pkt => isValue(pkt))\n            this._valueRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._valueRegister\n    }\n\n    private _intensityRegister: JDRegister\n    /**\n     * Gets the ``intensity`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get intensityRegister(): JDRegister {\n        if (!this._intensityRegister) {\n            const pkt = this.specification?.packets.find(pkt =>\n                isIntensity(pkt)\n            )\n            this._intensityRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._intensityRegister\n    }\n\n    private _statusCodeRegister: JDRegister\n    /**\n     * Gets the ``status_code`` register associated to this service, if the specification supports it.\n     * @category Registers\n     */\n    get statusCodeRegister(): JDRegister {\n        if (!this._statusCodeRegister) {\n            const pkt = this.specification?.packets.find(\n                pkt => pkt.identifier === SystemReg.StatusCode\n            )\n            this._statusCodeRegister = pkt && this.register(pkt.identifier)\n        }\n        return this._statusCodeRegister\n    }\n\n    /**\n     * Gets the service instance name, if resolved\n     * @category Control\n     */\n    get instanceName() {\n        const r = this.register(SystemReg.InstanceName)\n        return r?.stringValue\n    }\n\n    /**\n     * Resolves the service instance name, if resolved\n     * @category Control\n     */\n    async resolveInstanceName() {\n        const r = this.register(SystemReg.InstanceName)\n        await r?.refresh()\n        return r?.stringValue\n    }\n\n    /**\n     * Gets the specification of the service. Undefined if unknown\n     * @category Services\n     */\n    get specification() {\n        if (this._specification === null)\n            this._specification = serviceSpecificationFromClassIdentifier(\n                this.serviceClass\n            )\n        return this._specification\n    }\n\n    get events() {\n        return (\n            this.specification?.packets\n                .filter(isEvent)\n                .map(info => this.event(info.identifier)) || []\n        )\n    }\n\n    registers() {\n        if (!this._registers) {\n            const spec = this.specification\n            this._registers = (spec?.packets || [])\n                .filter(isRegister)\n                .map(pkt => new JDRegister(this, pkt.identifier))\n        }\n        return this._registers.slice(0)\n    }\n\n    /**\n     * Gets the registers and events\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return [...this.registers(), ...this.events]\n    }\n\n    /**\n     * Gets a register for the given code\n     * @param registerCode register identifier as found in the specification\n     * @returns a register instance (if found in specifiaction)\n     * @category Registers\n     */\n    register(registerCode: number): JDRegister {\n        if (isNaN(registerCode)) return undefined\n        // cache known registers\n        this.registers()\n        let register = this._registers.find(reg => reg.code === registerCode)\n        // we may not have a spec.\n        if (!register) {\n            const spec = this.specification\n            if (\n                spec &&\n                !spec.packets.some(\n                    pkt => isRegister(pkt) && pkt.identifier === registerCode\n                )\n            ) {\n                if (\n                    Flags.diagnostics &&\n                    !isOptionalReadingRegisterCode(registerCode)\n                )\n                    console.debug(\n                        `attempting to access register ${\n                            SystemReg[registerCode] ||\n                            `0x${registerCode.toString(16)}`\n                        }`\n                    )\n                return undefined\n            }\n            this._registers.push(\n                (register = new JDRegister(this, registerCode))\n            )\n        }\n        return register\n    }\n\n    /**\n     * Gets an event for the given code\n     * @param eventCode event identifier as found in the specification\n     * @returns a event instance (if found in specifiaction)\n     * @category Events\n     */\n    event(eventCode: number): JDEvent {\n        if (isNaN(eventCode)) return undefined\n\n        if (!this._events) this._events = []\n        let event = this._events.find(ev => ev.code === eventCode)\n        if (!event) {\n            const spec = this.specification\n            if (\n                spec &&\n                !spec.packets.some(\n                    pkt => isEvent(pkt) && pkt.identifier === eventCode\n                )\n            ) {\n                if (Flags.diagnostics)\n                    console.debug(\n                        `attempting to access event ${\n                            SystemEvent[eventCode] ||\n                            `0x${eventCode.toString(16)}`\n                        }`\n                    )\n                return undefined\n            }\n            this._events.push((event = new JDEvent(this, eventCode)))\n        }\n        return event\n    }\n\n    /**\n     * Send packet to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    async sendPacketAsync(pkt: Packet, ack?: boolean) {\n        pkt.device = this.device\n        pkt.serviceIndex = this.serviceIndex\n        if (ack !== undefined) pkt.requiresAck = !!ack\n        if (pkt.requiresAck) await this.device.sendPktWithAck(pkt)\n        else await pkt.sendCmdAsync(this.device)\n        this.emit(PACKET_SEND, pkt)\n\n        // invalid register after a command call to refresh their values asap\n        if (pkt.isCommand && !pkt.isRegisterGet && !pkt.isRegisterSet)\n            this.invalidateRegisterValues(pkt)\n    }\n\n    /**\n     * Send a command to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAsync(cmd: number, data?: Uint8Array, ack?: boolean) {\n        const pkt = data ? Packet.from(cmd, data) : Packet.onlyHeader(cmd)\n        return this.sendPacketAsync(pkt, ack)\n    }\n\n    /**\n     * Packs values and sends command to the service server\n     * @param cmd packet to send\n     * @param values unpacked values, layed as specified\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdPackedAsync<TValues extends PackedValues>(\n        cmd: number,\n        values?: TValues,\n        ack?: boolean\n    ) {\n        const spec = this.specification.packets.find(\n            pkt => pkt.kind === \"command\" && pkt.identifier === cmd\n        )\n        const packFormat = spec?.packFormat\n        if (!packFormat) throw new Error(\"Unknown packing format\")\n        const data = values ? jdpack(packFormat, values) : undefined\n        return this.sendCmdAsync(cmd, data, ack)\n    }\n\n    /**\n     * Send a command and await response to the service server\n     * @param pkt packet to send\n     * @param ack acknolegment required\n     * @category Packets\n     */\n    sendCmdAwaitResponseAsync(pkt: Packet, timeout = 500) {\n        const { bus } = this.device\n        return new Promise<Packet>((resolve, reject) => {\n            const handleRes = (resp: Packet) => {\n                if (resp.serviceCommand == pkt.serviceCommand) {\n                    this.off(REPORT_RECEIVE, handleRes)\n                    if (resolve) resolve(resp)\n                    resolve = null\n                }\n            }\n            bus.delay(timeout).then(() => {\n                if (!resolve) return\n                resolve = null\n                this.off(REPORT_RECEIVE, handleRes)\n                reject(\n                    new Error(\n                        `timeout (${timeout}ms) waiting for response to ${pkt}`\n                    )\n                )\n            })\n            this.sendPacketAsync(pkt).then(() => {\n                this.on(REPORT_RECEIVE, handleRes)\n            })\n            // the handler remove either upon timeout,\n            // or on first invocation of handleRes()\n        })\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        this.emit(PACKET_RECEIVE, pkt)\n        if (pkt.isReport) {\n            this.emit(REPORT_RECEIVE, pkt)\n            if (pkt.isRegisterGet) {\n                const id = pkt.registerIdentifier\n                const reg = this.register(id)\n                if (reg) reg.processPacket(pkt)\n            } else if (pkt.isEvent) {\n                const ev = this.event(pkt.eventCode)\n                if (ev) ev.processEvent(pkt)\n            } else if (pkt.isCommand) {\n                // this is a report...\n                console.log(\"cmd report\", { pkt })\n            }\n        } else if (pkt.isRegisterSet) {\n            const id = pkt.registerIdentifier\n            const reg = this.register(id)\n            if (reg) reg.processPacket(pkt)\n        } else if (pkt.isCommand) {\n            this.invalidateRegisterValues(pkt)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private invalidateRegisterValues(pkt: Packet) {\n        //console.log(`clearing register get timestamp`, pkt)\n        this.registers()\n            .filter(r => r.specification && !isConstRegister(r.specification))\n            .forEach(r => r.clearGetTimestamp())\n    }\n\n    /**\n     * @internal\n     */\n    compareTo(b: JDService): number {\n        return (\n            this.serviceClass - b.serviceClass ||\n            strcmp(this.device.deviceId, b.device.deviceId) ||\n            this.serviceIndex - b.serviceIndex\n        )\n    }\n\n    get clients(): JDServiceClient[] {\n        return this._clients?.slice(0) || []\n    }\n\n    addClient(client: JDServiceClient) {\n        if (client && this._clients.indexOf(client) < 0) {\n            this._clients.push(client)\n            this.emit(SERVICE_CLIENT_ADDED, client)\n        }\n    }\n\n    removeClient(client: JDServiceClient) {\n        const i = this._clients.indexOf(client)\n        if (i > -1) {\n            this._clients.splice(i, 1)\n            this.emit(SERVICE_CLIENT_REMOVED, client)\n        }\n    }\n\n    async receiveWithInPipe<TValues extends PackedValues>(\n        cmd: number,\n        packFormat: string,\n        timeout?: number\n    ) {\n        const inp = new InPipeReader(this.device.bus)\n        await this.sendPacketAsync(inp.openCommand(cmd), true)\n        const recv: TValues[] = []\n        for (const buf of await inp.readData(timeout)) {\n            const values = jdunpack<TValues>(buf, packFormat)\n            recv.push(values)\n        }\n        return recv\n    }\n}\n\nexport default JDService\n","import JDEventSource from \"./eventsource\"\nimport { jdpack } from \"./pack\"\nimport JDService from \"./service\"\n\nfunction trgbToValues(trgb: number) {\n    return [\n        (trgb >> 16) & 0xff,\n        (trgb >> 8) & 0xff,\n        trgb & 0xff,\n        (trgb >> 24) & 0xff,\n    ]\n}\n\nexport class LEDController extends JDEventSource {\n    constructor(\n        public readonly service: JDService,\n        public readonly command: number\n    ) {\n        super()\n    }\n\n    async blink(from: number, to: number, interval: number, repeat: number) {\n        const on = jdpack(\"u8 u8 u8 u8\", trgbToValues(from))\n        const off = jdpack(\"u8 u8 u8 u8\", trgbToValues(to))\n        const { bus } = this.service.device\n        for (let i = 0; i < repeat; ++i) {\n            await this.service.sendCmdAsync(this.command, on)\n            await bus.delay(interval - 1)\n            await this.service.sendCmdAsync(this.command, off)\n            await bus.delay(interval - 1)\n        }\n    }\n}\nexport default LEDController\n","import Packet from \"./packet\"\nimport {\n    JD_SERVICE_INDEX_CTRL,\n    DEVICE_ANNOUNCE,\n    DEVICE_CHANGE,\n    ANNOUNCE,\n    DISCONNECT,\n    JD_ADVERTISEMENT_0_COUNTER_MASK,\n    DEVICE_RESTART,\n    RESTART,\n    CHANGE,\n    PACKET_RECEIVE,\n    PACKET_REPORT,\n    PACKET_EVENT,\n    DEVICE_FIRMWARE_INFO,\n    ControlCmd,\n    DEVICE_NODE_NAME,\n    LOST,\n    DEVICE_LOST,\n    DEVICE_FOUND,\n    FOUND,\n    JD_SERVICE_INDEX_CRC_ACK,\n    ACK_MIN_DELAY,\n    ACK_MAX_DELAY,\n    ControlReg,\n    USB_TRANSPORT,\n    PACKETIO_TRANSPORT,\n    META_ACK_FAILED,\n    ControlAnnounceFlags,\n    IDENTIFY_DURATION,\n    PACKET_ANNOUNCE,\n    BLUETOOTH_TRANSPORT,\n    ERROR,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    REPORT_UPDATE,\n    SERIAL_TRANSPORT,\n    WEBSOCKET_TRANSPORT,\n    DEVICE_PACKET_ANNOUNCE,\n} from \"./constants\"\nimport { read32, bufferEq, setAckError, read16 } from \"./utils\"\nimport { getNumber, NumberFormat } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport JDService from \"./service\"\nimport { serviceClass, shortDeviceId } from \"./pretty\"\nimport JDNode from \"./node\"\nimport { isInstanceOf } from \"./spec\"\nimport { FirmwareInfo } from \"./flashing\"\nimport LEDController from \"./ledcontroller\"\nimport JDEventSource from \"./eventsource\"\nimport { ServiceFilter } from \"./filters/servicefilter\"\nimport { randomDeviceId } from \"./random\"\nimport Flags from \"./flags\"\n\n/**\n * Pipe information\n * @category Runtime\n */\nexport interface PipeInfo {\n    pipeType?: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    localPipe?: any\n}\n\ninterface AckAwaiter {\n    pkt: Packet\n    retriesLeft: number\n    okCb: () => void\n    errCb: () => void\n}\n\nexport interface DeviceStats {\n    dropped: number\n    restarts: number\n    announce: number\n}\n\n/**\n * Collects packet statistics about the device\n * @category JDOM\n */\nexport class DeviceStatsMonitor extends JDEventSource {\n    // counter\n    private _receivedPackets = 0\n    private _restarts = 0\n    private _announce = 0\n\n    // horizon\n    private readonly _data: {\n        received: number\n        total: number\n        restarts: number\n    }[] = Array(0xf << 2)\n        .fill(0)\n        .map(() => ({ received: 0, total: 0, restarts: 0 }))\n    private _dataIndex = 0\n\n    /**\n     * @internal\n     */\n    constructor() {\n        super()\n    }\n\n    /**\n     * Number of announce packets received by the device\n     **/\n    get announce() {\n        return this._announce\n    }\n\n    /**\n     * Average packet dropped per announce period\n     * @category Statistics\n     */\n    get dropped(): number {\n        const r =\n            this._data\n                .filter(e => !!e.total) // ignore total 0\n                .reduce((s, e) => s + (e.total - e.received), 0) /\n                this._data.length || 0\n        return r\n    }\n\n    /**\n     * Number of restarts within the last 64 announce packets\n     */\n    get restarts(): number {\n        const r = this._data.reduce((s, e) => s + e.restarts, 0)\n        return r\n    }\n\n    /**\n     * Gets the current stats\n     */\n    get current(): DeviceStats {\n        const { dropped, restarts, announce } = this\n        return { dropped, restarts, announce }\n    }\n\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt: Packet) {\n        this._announce++\n\n        const { current: oldCurrent } = this\n        // collect metrics\n        const received = this._receivedPackets\n        const total = pkt.data[2]\n        const restarts = this._restarts\n\n        this._data[this._dataIndex] = { received, total, restarts }\n        this._dataIndex = (this._dataIndex + 1) % this._data.length\n\n        // reset counter\n        this._receivedPackets = 0\n        this._restarts = 0\n\n        const { current } = this\n        if (\n            oldCurrent.dropped !== current.dropped ||\n            oldCurrent.restarts !== current.restarts\n        )\n            this.emit(CHANGE)\n    }\n\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    processPacket(pkt: Packet) {\n        this._receivedPackets++\n    }\n\n    /**\n     * @internal\n     */\n    processRestart() {\n        this._restarts++\n        this._announce = 0\n    }\n}\n\n/**\n * A Jacdac device hosting services.\n * @category JDOM\n */\nexport class JDDevice extends JDNode {\n    /**\n     * Indicates if the device is connected to a bus\n     * @category Lifecycle\n     */\n    connected: boolean\n    private _source: string\n    private _replay: boolean\n    private _lost: boolean\n    private _servicesData: Uint8Array\n    private _statusLight: LEDController\n    /**\n     * Timestamp of the last packet received from the device\n     * @category Lifecycle\n     */\n    lastSeen: number\n    /**\n     * Timestamp of the last service update packet received from the device\n     * @category Lifecycle\n     */\n    lastServiceUpdate: number\n    private _shortId: string\n    private _anonymizedId: string\n    private _services: JDService[]\n    private _ports: Record<string, PipeInfo>\n    private _ackAwaiting: AckAwaiter[]\n    private _flashing = false\n    private _identifying: boolean\n    private _eventCounter: number\n    /**\n     * Gets the bus this device belongs to\n     * @category JDOM\n     */\n    public readonly bus: JDBus\n    /**\n     * Gets the device identifier\n     * @category Control\n     */\n    public readonly deviceId: string\n\n    /**\n     * Gets a random device id for the lifetime of this object.\n     */\n    public get anonymizedDeviceId() {\n        if (!this._anonymizedId) this._anonymizedId = randomDeviceId()\n        return this._anonymizedId\n    }\n\n    /**\n     * @internal\n     */\n    constructor(bus: JDBus, deviceId: string, pkt?: Packet) {\n        super()\n        this.bus = bus\n        this.deviceId = deviceId\n        this.connected = true\n        this._lost = false\n        this._identifying = false\n\n        this._source = pkt?.sender\n        this._replay = !!pkt?.replay\n    }\n\n    /**\n     * Quality of service statistics for this device\n     * @category Diagnostics\n     */\n    readonly stats = new DeviceStatsMonitor()\n\n    /**\n     * Gets a description of the device.\n     * @returns a descriptive string for this device\n     * @category Diagnostics\n     */\n    describe() {\n        const ignoredServices = [SRV_CONTROL, SRV_LOGGER]\n        return (\n            this.toString() +\n            (this.isPhysical ? \"\" : \" (sim)\") +\n            \": \" +\n            this.services()\n                .filter(srv => ignoredServices.indexOf(srv.serviceClass) < 0)\n                .map(\n                    s =>\n                        s.instanceName ||\n                        s.specification?.camelName ||\n                        s.serviceClass.toString(16)\n                )\n                .join(\", \")\n        )\n    }\n\n    /**\n     * Gets a unique identifier for this device in the bus\n     * @category JDOM\n     */\n    get id() {\n        return `${this.nodeKind}:${this.deviceId}`\n    }\n\n    /**\n     * Gets the short id of the device\n     * @category JDOM\n     */\n    get name() {\n        return this.shortId\n    }\n\n    /**\n     * Identifies node as a device\n     * @category JDOM\n     */\n    get nodeKind() {\n        return DEVICE_NODE_NAME\n    }\n\n    /**\n     * Indicates if the devices is a physical device, not emulated.\n     * @category Transport\n     */\n    get isPhysical() {\n        return (\n            this._source === USB_TRANSPORT ||\n            this._source === BLUETOOTH_TRANSPORT ||\n            this._source === SERIAL_TRANSPORT ||\n            this._source === PACKETIO_TRANSPORT ||\n            this._source === WEBSOCKET_TRANSPORT\n        )\n    }\n\n    /**\n     * Indicates the source of packets\n     * @category Transport\n     */\n    get source() {\n        return this._source\n    }\n\n    /**\n     * Indicates if the device is part of a trace replay\n     * @category Transport\n     */\n    get replay() {\n        return this._replay\n    }\n\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get friendlyName() {\n        return this.shortId\n    }\n\n    /**\n     * Gets the device short name\n     * @category JDOM\n     */\n    get qualifiedName() {\n        return this.shortId\n    }\n\n    /**\n     * Indicates if service information is available.\n     * This happens after a announce packet has been received.\n     * @category Lifecycle\n     */\n    get announced(): boolean {\n        return !!this._servicesData?.length\n    }\n\n    /**\n     * Gets the control announce flag from the annouce packet.\n     * @category Control\n     */\n    get announceFlags(): ControlAnnounceFlags {\n        return this._servicesData ? read16(this._servicesData, 0) : 0\n    }\n\n    /**\n     * Gets the restart counter from the announce packet.\n     * @category Control\n     */\n    get restartCounter(): number {\n        return this.announceFlags & ControlAnnounceFlags.RestartCounterSteady\n    }\n\n    /**\n     * Gets the status light announce flags from the announce packet.\n     * @category Control\n     */\n    get statusLightFlags(): ControlAnnounceFlags {\n        return this.announceFlags & ControlAnnounceFlags.StatusLightRgbFade\n    }\n\n    /**\n     * Indicates if the device is announced as a client\n     * @category Control\n     */\n    get isClient() {\n        return !!(this.announceFlags & ControlAnnounceFlags.IsClient)\n    }\n\n    /**\n     * Gets the number of packets sent since the last announce packet,\n     * as read from the announce packet.\n     * @category Control\n     */\n    get packetCount(): number {\n        return this._servicesData?.[2] || 0\n    }\n\n    /**\n     * Gets the device short identifier\n     * @category JDOM\n     */\n    get shortId() {\n        // TODO measure if caching is worth it\n        if (!this._shortId) this._shortId = shortDeviceId(this.deviceId)\n        return this._shortId\n    }\n\n    /**\n     * Gets the bus instance hosting this device.\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return this.bus\n    }\n\n    /**\n     * Gets the firmware information if any.\n     * @category Firmware\n     */\n    get firmwareInfo(): FirmwareInfo {\n        const ctrl = this.service(0)\n\n        const deviceId = this.deviceId\n        const name = ctrl?.register(ControlReg.DeviceDescription)?.stringValue\n        const version = this.firmwareVersion\n        const productIdentifier = ctrl?.register(\n            ControlReg.ProductIdentifier\n        )?.uintValue\n        const bootloaderProductIdentifier = ctrl?.register(\n            ControlReg.BootloaderProductIdentifier\n        )?.uintValue\n        const ready =\n            version &&\n            (productIdentifier !== undefined ||\n                bootloaderProductIdentifier !== undefined)\n\n        return ready\n            ? {\n                  deviceId,\n                  name,\n                  version,\n                  productIdentifier,\n                  bootloaderProductIdentifier,\n              }\n            : undefined\n    }\n\n    refreshFirmwareInfo() {\n        // listen for specific registers\n        const ctrl = this._services?.[0]\n        const firmwareRegs = [\n            (ControlReg.ProductIdentifier,\n            ControlReg.FirmwareVersion,\n            ControlReg.BootloaderProductIdentifier),\n        ]\n        firmwareRegs.forEach(reg =>\n            ctrl.register(reg).once(REPORT_UPDATE, () => {\n                this.emitPropagated(DEVICE_FIRMWARE_INFO)\n                this.emitPropagated(CHANGE)\n            })\n        )\n    }\n\n    /**\n     * Indicates if no packet from this device has been observed in a while.\n     * @category Lifecycle\n     */\n    get lost() {\n        return this._lost\n    }\n\n    /**\n     * Sets the lost status\n     * @category Lifecycle\n     * @internal\n     */\n    set lost(v: boolean) {\n        if (!!v === this._lost) return\n\n        // something changed\n        this._lost = !!v\n        if (this.lost) {\n            this.emit(LOST)\n            this.bus.emit(DEVICE_LOST, this)\n        } else {\n            this.emit(FOUND)\n            this.bus.emit(DEVICE_FOUND, this)\n        }\n        this.emit(CHANGE)\n        this.bus.emit(DEVICE_CHANGE, this)\n        this.bus.emit(CHANGE)\n    }\n\n    /**\n     * A flashing sequence is in progress\n     * @category Firmware\n     */\n    get flashing() {\n        return this._flashing\n    }\n\n    /**\n     * Sets the flashing sequence state\n     * @category Firmware\n     */\n    set flashing(value: boolean) {\n        if (value !== this._flashing) {\n            this._flashing = value\n            this.emit(CHANGE)\n            this.bus.emit(DEVICE_CHANGE, this)\n            this.bus.emit(CHANGE)\n            if (this._flashing) this.bus.sendStopStreaming()\n        }\n    }\n\n    /**\n     * Gets the number of events received by the service clients in this device\n     * @category Lifecycle\n     */\n    get eventCounter() {\n        return this._eventCounter\n    }\n\n    /**\n     * @internal\n     */\n    set eventCounter(v: number) {\n        this._eventCounter = v\n    }\n\n    /**\n     * Indicates if the device contains at least one service matching the service class\n     * @param serviceClass service class to match\n     * @returns true if at least one service present\n     * @category Services\n     */\n    hasService(serviceClass: number): boolean {\n        if (!this.announced) return false\n        if (serviceClass === 0) return true\n\n        // skip first 4 bytes\n        for (let i = 4; i < this._servicesData.length; i += 4) {\n            const sc = getNumber(this._servicesData, NumberFormat.UInt32LE, i)\n            if (isInstanceOf(sc, serviceClass)) return true\n        }\n        return false\n    }\n\n    /**\n     * Gets or allocates a pipe port\n     * @param id identifier of the port\n     * @returns a pipe port\n     * @category Services\n     */\n    port(id: number) {\n        if (!this._ports) this._ports = {}\n        const key = id + \"\"\n        const ex = this._ports[key]\n        if (!ex) return (this._ports[key] = {})\n        return ex\n    }\n\n    /**\n     * Gets the number of services hosted by the device\n     * @category Services\n     */\n    get serviceLength() {\n        if (!this.announced) return 0\n        return this._servicesData.length >> 2\n    }\n\n    /**\n     * Gets the service class at a given index\n     * @param index index of the service\n     * @returns service class\n     * @category Services\n     */\n    serviceClassAt(index: number): number {\n        if (index == 0) return 0\n\n        index <<= 2\n        if (!this.announced || index + 4 > this._servicesData.length)\n            return undefined\n        return read32(this._servicesData, index)\n    }\n\n    /**\n     * Gets the list of service classes\n     * @category Services\n     */\n    get serviceClasses(): number[] {\n        const r = []\n        const n = this.serviceLength\n        for (let i = 0; i < n; ++i) r.push(this.serviceClassAt(i))\n        return r\n    }\n\n    private initServices(force?: boolean) {\n        if (force) this._services = undefined\n\n        if (!this._services && this._servicesData) {\n            this._statusLight = undefined\n            const n = this.serviceLength\n            const s = []\n            for (let i = 0; i < n; ++i) s.push(new JDService(this, i))\n            this._services = s\n            this.lastServiceUpdate = this.bus.timestamp\n            this.refreshFirmwareInfo()\n        }\n    }\n\n    /**\n     * Gets the service client at the given service index\n     * @param serviceIndex index of the service client\n     * @returns service client\n     * @category Services\n     */\n    service(serviceIndex: number): JDService {\n        if (!this.announced) return undefined\n        this.initServices()\n        serviceIndex = serviceIndex | 0\n        return this._services && this._services[serviceIndex]\n    }\n\n    /**\n     * Gets a filtered list of service clients.\n     * @param options filters for services\n     * @returns services matching the filter\n     * @category Services\n     */\n    services(options?: ServiceFilter): JDService[] {\n        if (!this.announced) return []\n\n        if (options?.serviceIndex >= 0)\n            return [this.service(options?.serviceIndex)]\n\n        if (options?.serviceName && options?.serviceClass > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\")\n        let sc = serviceClass(options?.serviceName)\n        if (sc === undefined || sc < 0) sc = options?.serviceClass\n        if (sc === undefined) sc = -1\n\n        this.initServices()\n        let r = this._services?.slice() || []\n        if (sc > -1) r = r.filter(s => s.serviceClass == sc)\n\n        if (options?.specification) r = r.filter(s => !!s.specification)\n\n        const mixins = options?.mixins\n        if (mixins !== undefined) r = r.filter(s => s.isMixin === mixins)\n\n        return r\n    }\n\n    /**\n     * Gets the list of child services.\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.services()\n    }\n\n    /**\n     * @internal\n     */\n    sendCtrlCommand(cmd: number, payload: Uint8Array = null) {\n        const pkt = !payload\n            ? Packet.onlyHeader(cmd)\n            : Packet.from(cmd, payload)\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        return pkt.sendCmdAsync(this)\n    }\n\n    /**\n     * @internal\n     */\n    processAnnouncement(pkt: Packet) {\n        this.stats.processAnnouncement(pkt)\n\n        let changed = false\n        const w0 = this._servicesData\n            ? getNumber(this._servicesData, NumberFormat.UInt32LE, 0)\n            : 0\n        const w1 = getNumber(pkt.data, NumberFormat.UInt32LE, 0)\n\n        // compare service data\n        const servicesChanged = !bufferEq(pkt.data, this._servicesData, 4)\n        this._servicesData = pkt.data\n\n        // check for restart\n        if (\n            w1 &&\n            (w1 & JD_ADVERTISEMENT_0_COUNTER_MASK) <\n                (w0 & JD_ADVERTISEMENT_0_COUNTER_MASK)\n        ) {\n            this.stats.processRestart()\n            this.initServices(true)\n            this.bus.emit(DEVICE_RESTART, this)\n            this.emit(RESTART)\n            changed = true\n        }\n\n        // notify that services got updated\n        if (servicesChanged) {\n            if (!changed) this.initServices(true)\n            this.bus.emit(DEVICE_ANNOUNCE, this)\n            this.emit(ANNOUNCE)\n            changed = true\n        }\n\n        // notify that we've received an announce packet\n        this.bus.emit(DEVICE_PACKET_ANNOUNCE, this)\n        this.emit(PACKET_ANNOUNCE)\n\n        // notify of any changes\n        if (changed) {\n            this.bus.emit(DEVICE_CHANGE, this)\n            this.bus.emit(CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        this.stats.processPacket(pkt)\n        this.lost = false\n        this.emit(PACKET_RECEIVE, pkt)\n        if (pkt.isReport) this.emit(PACKET_REPORT, pkt)\n        else if (pkt.isEvent) this.emit(PACKET_EVENT, pkt)\n\n        const service = this.service(pkt.serviceIndex)\n        if (service) service.processPacket(pkt)\n    }\n\n    /**\n     * @internal\n     */\n    disconnect() {\n        this.connected = false\n        this.emit(DISCONNECT)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets a controller for the status light. Returns undefined if the device does not support a status light.\n     * @category Control\n     */\n    get statusLight(): LEDController {\n        if (\n            !this._statusLight &&\n            this.statusLightFlags !== ControlAnnounceFlags.StatusLightNone\n        )\n            this._statusLight = new LEDController(\n                this.service(0),\n                ControlCmd.SetStatusLight\n            )\n        return this._statusLight\n    }\n\n    /**\n     * Sends an ``identify`` command to the device\n     * @category Lifecycle\n     */\n    async identify() {\n        if (this._identifying) return\n\n        try {\n            this._identifying = true\n            this.emit(CHANGE)\n            const statusLight = this.statusLight\n            if (statusLight) await statusLight.blink(0x0000ff, 0, 262, 4)\n            else {\n                const ctrl = this.service(0)\n                await ctrl.sendCmdAsync(ControlCmd.Identify, undefined, false)\n                await this.bus.delay(IDENTIFY_DURATION)\n            }\n        } catch (e) {\n            this.emit(ERROR, e)\n        } finally {\n            this._identifying = false\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Indicates the device should be identifying.\n     * @category Lifecycle\n     */\n    get identifying() {\n        return this._identifying\n    }\n\n    /**\n     * Sends a ``reset`` command to the device\n     * @category Lifecycle\n     */\n    reset() {\n        return this.service(0)?.sendCmdAsync(ControlCmd.Reset)\n    }\n\n    /**\n     * Tries to retrive the product identifier from the device\n     * @param retry number of devices\n     * @returns promise that returns product identifier if received\n     * @category Control\n     */\n    async resolveProductIdentifier(retry = 0): Promise<number> {\n        const fwIdRegister = this.service(0)?.register(\n            ControlReg.ProductIdentifier\n        )\n        if (!fwIdRegister) return undefined\n\n        while (retry-- >= 0 && fwIdRegister.data === undefined)\n            await fwIdRegister.refresh(true)\n        return fwIdRegister.uintValue\n    }\n\n    /**\n     * Returns the product identifier synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get productIdentifier(): number {\n        const reg = this.service(0)?.register(ControlReg.ProductIdentifier)\n        const v = reg?.uintValue\n        if (reg && v === undefined) reg?.refresh(true)\n        return v\n    }\n\n    /**\n     * Gets the elapsed time since boot in milli-seconds\n     * @category Control\n     */\n    get uptime(): number {\n        const reg = this.service(0)?.register(ControlReg.Uptime)\n        const v = reg?.unpackedValue?.[0]\n        if (reg && v === undefined) reg?.refresh(true)\n        let uptime: number = undefined\n        if (v !== undefined) {\n            // compute offset\n            uptime = v / 1000 + this.bus.timestamp - reg.lastDataTimestamp\n        }\n        return uptime\n    }\n\n    /**\n     * Returns the firmware version synchronously. If needed, tries to refresh the value in the background.\n     * @category Control\n     */\n    get firmwareVersion(): string {\n        const reg = this.service(0)?.register(ControlReg.FirmwareVersion)\n        const v = reg?.stringValue\n        if (reg && v === undefined) reg?.refresh(true)\n        return v\n    }\n\n    private initAcks() {\n        if (this._ackAwaiting) return\n\n        let drops = 0\n        let resends = 0\n        this._ackAwaiting = []\n        const cleanUp = this.subscribe(PACKET_REPORT, (rep: Packet) => {\n            if (rep.serviceIndex != JD_SERVICE_INDEX_CRC_ACK) return\n            let numdone = 0\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt && aa.pkt.crc == rep.serviceCommand) {\n                    //console.log(`ack`, aa.pkt)\n                    aa.pkt = null\n                    numdone++\n                    aa.okCb()\n                }\n            }\n            if (numdone)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt)\n        })\n\n        const resend = () => {\n            let numdrop = 0\n            for (const aa of this._ackAwaiting) {\n                if (aa.pkt) {\n                    if (--aa.retriesLeft < 0) {\n                        drops++\n                        aa.pkt.meta[META_ACK_FAILED] = true\n                        aa.pkt = null\n                        aa.errCb()\n                        numdrop++\n                        if (Flags.diagnostics)\n                            console.debug(\n                                `ack: ${this.shortId} drop ${aa.pkt} (${drops} drops, ${resends} resends)`\n                            )\n                    } else {\n                        resends++\n                        aa.pkt.sendCmdAsync(this)\n                        if (Flags.diagnostics)\n                            console.debug(\n                                `ack: ${this.shortId} resend ${aa.pkt} (${drops} drops, ${resends} resends)`\n                            )\n                    }\n                }\n            }\n            if (numdrop)\n                this._ackAwaiting = this._ackAwaiting.filter(aa => !!aa.pkt)\n\n            if (Flags.diagnostics)\n                console.debug(\n                    `ack: ${this.shortId} awaits ${this._ackAwaiting.length}`\n                )\n            if (this._ackAwaiting.length > 0) {\n                this.bus.scheduler.setTimeout(\n                    resend,\n                    Math.random() * (ACK_MAX_DELAY - ACK_MIN_DELAY) +\n                        ACK_MIN_DELAY\n                )\n            } else {\n                this._ackAwaiting = undefined\n                cleanUp()\n            }\n        }\n\n        // start loop\n        this.bus.scheduler.setTimeout(resend, 40)\n    }\n\n    /**\n     * @internal\n     */\n    sendPktWithAck(pkt: Packet) {\n        // no acks possible when bus is passive\n        pkt.requiresAck = !this.bus.passive\n        this.initAcks()\n        return new Promise<void>((resolve, reject) => {\n            const ack = {\n                pkt,\n                retriesLeft: 4,\n                okCb: resolve,\n                errCb: () => {\n                    const e = new Error(\"No ACK for \" + pkt.toString())\n                    setAckError(e)\n                    reject(e)\n                },\n            }\n            this._ackAwaiting.push(ack)\n            pkt.sendCmdAsync(this)\n        })\n    }\n\n    /**\n     * @internal\n     */\n    async floodPing(numPkts = 100, size = 32) {\n        const pkt = Packet.jdpacked(ControlCmd.FloodPing, \"u32 u32 u8\", [\n            numPkts,\n            0x1000,\n            size,\n        ])\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        await this.sendPktWithAck(pkt)\n    }\n}\n\nexport default JDDevice\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A time scheduler to orchestrate time in the bus.\n * @category JDOM\n */\nexport interface Scheduler {\n    /**\n     * Gets the current timestamp\n     */\n    get timestamp(): number\n    /**\n     * Reset time\n     * @param delta\n     */\n    resetTime(delta: number): void\n    /**\n     * Start a timeout timer\n     */\n    setTimeout(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any\n    /**\n     * Cancel an existing timeout timer\n     */\n    clearTimeout(handle: any): void\n    /**\n     * Start an interval timer\n     */\n    setInterval(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any\n    /**\n     * Clear an interval timer\n     */\n    clearInterval(handle: any): void\n}\nexport default Scheduler\n\n/** @internal */\nexport class WallClockScheduler implements Scheduler {\n    private _now: () => number\n    private _startTime: number\n\n    constructor() {\n        this._now =\n            typeof performance !== \"undefined\"\n                ? () => performance.now()\n                : () => Date.now()\n        this._startTime = this._now()\n    }\n\n    get timestamp(): number {\n        return this._now() - this._startTime\n    }\n    resetTime(delta = 0) {\n        this._startTime = this._now() - delta\n    }\n    setTimeout(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any {\n        return setTimeout(handler, delay, args)\n    }\n    clearTimeout(handle: any): void {\n        clearTimeout(handle)\n    }\n    setInterval(\n        handler: (...args: any[]) => void,\n        delay: number,\n        ...args: any[]\n    ): any {\n        return setInterval(handler, delay, args)\n    }\n    clearInterval(handle: any): void {\n        clearInterval(handle)\n    }\n}\n","import { bufferToArray, NumberFormat, getNumber } from \"./buffer\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport {\n    BootloaderCmd,\n    ControlCmd,\n    SRV_BOOTLOADER,\n    SRV_CONTROL,\n    CMD_ADVERTISEMENT_DATA,\n    CMD_GET_REG,\n    CMD_REG_MASK,\n    ControlReg,\n    PACKET_REPORT,\n} from \"./constants\"\nimport {\n    assert,\n    bufferConcat,\n    bufferToString,\n    strcmp,\n    readBlobToUint8Array,\n} from \"./utils\"\nimport { jdpack, jdunpack } from \"./pack\"\nimport { BootloaderError } from \"./constants\"\nimport { prettySize } from \"./pretty\"\nimport { deviceSpecificationFromProductIdentifier } from \"./spec\"\n\nconst BL_SUBPAGE_SIZE = 208\nconst BL_RETRIES = 15\nconst BL_SESSION_DELAY = 5\nconst BL_PAGE_DELAY = 5\n\nlet _startTime = 0\n\nconst uf2ExtTags: Record<string, number> = {\n    version: -0x9fc7bc,\n    name: -0x650d9d,\n    pageSize: 0x0be9f7,\n    productIdentifier: 0xc8a729,\n}\n\n/**\n * UF2 page data structure\n * @category Firmware\n * @internal\n */\nexport interface FirmwarePage {\n    data: Uint8Array\n    targetAddress: number\n}\n\n/**\n * Data structure representing a firmware binary\n * @category Firmware\n * @internal\n */\nexport interface FirmwareBlob {\n    pages: FirmwarePage[]\n    productIdentifier: number\n    pageSize: number\n    name: string\n    version: string\n    // name of the file or repo\n    store: string\n}\n\nfunction timestamp() {\n    if (!_startTime) _startTime = Date.now()\n    return Date.now() - _startTime\n}\n\nfunction log(msg: string) {\n    console.log(`BL [${timestamp()}ms]: ${msg}`)\n}\n\nclass FlashClient {\n    private pageSize: number\n    private flashSize: number\n    private sessionId: number\n    classClients: FlashClient[]\n    private lastStatus: Packet\n    private pending: boolean\n    public dev_class: number\n    public device: JDDevice\n\n    constructor(private bus: JDBus, adpkt: Packet) {\n        const d = bufferToArray(adpkt.data, NumberFormat.UInt32LE)\n        this.pageSize = d[1]\n        this.flashSize = d[2]\n        this.dev_class = d[3]\n        this.device = adpkt.device\n        this.handlePacket = this.handlePacket.bind(this)\n    }\n\n    private handlePacket(pkt: Packet) {\n        if (pkt.serviceCommand == BootloaderCmd.PageData) this.lastStatus = pkt\n    }\n\n    private start() {\n        this.device.on(PACKET_REPORT, this.handlePacket)\n    }\n\n    private stop() {\n        this.device.off(PACKET_REPORT, this.handlePacket)\n    }\n\n    private async sendCommandAsync(p: Packet) {\n        p.serviceIndex = 1\n        await p.sendCmdAsync(this.device)\n    }\n\n    private async startFlashAsync() {\n        this.sessionId = (Math.random() * 0x10000000) | 0\n        for (const d of this.classClients) {\n            d.start()\n            log(\n                `flashing ${d.device.shortId}; available flash=${\n                    d.flashSize / 1024\n                }kb; page=${d.pageSize}b`\n            )\n        }\n\n        const setsession = Packet.jdpacked<[number]>(\n            BootloaderCmd.SetSession,\n            \"u32\",\n            [this.sessionId]\n        )\n\n        this.allPending()\n\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            for (const d of this.classClients) {\n                if (d.pending) {\n                    if (\n                        d.lastStatus &&\n                        d.lastStatus.getNumber(NumberFormat.UInt32LE, 0) ==\n                            this.sessionId\n                    ) {\n                        d.pending = false\n                    } else {\n                        d.lastStatus = null\n                        log(`set session ${this.sessionId} on ${d.device}`)\n                        await d.sendCommandAsync(setsession)\n                    }\n                    await this.bus.delay(BL_SESSION_DELAY)\n                }\n            }\n            if (this.numPending() == 0) break\n            await this.waitForStatusAsync()\n        }\n\n        if (this.numPending()) throw new Error(\"Can't set session id\")\n    }\n\n    private async endFlashAsync() {\n        for (const f of this.classClients) {\n            await this.bus.delay(10)\n            await f.device.sendCtrlCommand(ControlCmd.Reset)\n        }\n    }\n\n    private allPending() {\n        for (const c of this.classClients) {\n            c.pending = true\n            c.lastStatus = null\n        }\n    }\n\n    private numPending() {\n        let num = 0\n        for (const c of this.classClients) if (c.pending) num++\n        return num\n    }\n\n    private async waitForStatusAsync() {\n        for (let i = 0; i < 100; ++i) {\n            if (this.classClients.every(c => c.lastStatus != null)) break\n            await this.bus.delay(5)\n        }\n    }\n\n    private async flashPage(page: FirmwarePage) {\n        const pageAddr = page.targetAddress\n        const pageSize = this.pageSize\n        const numSubpage =\n            ((pageSize + BL_SUBPAGE_SIZE - 1) / BL_SUBPAGE_SIZE) | 0\n\n        log(\n            `flash ${prettySize(this.pageSize)} at ${(\n                pageAddr & 0xffffff\n            ).toString(16)}`\n        )\n\n        if (page.data.length != this.pageSize)\n            throw new Error(\"invalid page size\")\n\n        for (const f of this.classClients) f.lastStatus = null\n\n        this.allPending()\n        for (let i = 0; i < BL_RETRIES; ++i) {\n            log(`  attempt ${i}`)\n            let currSubpage = 0\n            for (let suboff = 0; suboff < pageSize; suboff += BL_SUBPAGE_SIZE) {\n                let sz = BL_SUBPAGE_SIZE\n                if (suboff + sz > pageSize) sz = pageSize - suboff\n                log(\n                    `send sub page ${currSubpage}/${\n                        numSubpage - 1\n                    } at ${suboff.toString(16)}[${sz}]`\n                )\n                const hd = jdpack(\"u32 u16 u8 u8 u32 u32 u32 u32 u32\", [\n                    pageAddr,\n                    suboff,\n                    currSubpage++,\n                    numSubpage - 1,\n                    this.sessionId,\n                    0,\n                    0,\n                    0,\n                    0,\n                ])\n                assert(hd.length == 4 * 7)\n                const p = Packet.from(\n                    BootloaderCmd.PageData,\n                    bufferConcat(hd, page.data.slice(suboff, suboff + sz))\n                )\n                // in first round, just broadcast everything\n                // in other rounds, broadcast everything except for last packet\n                if (i == 0 || currSubpage < numSubpage)\n                    await p.sendAsMultiCommandAsync(this.bus, SRV_BOOTLOADER)\n                else {\n                    for (const f of this.classClients)\n                        if (f.pending) {\n                            f.lastStatus = null\n                            await f.sendCommandAsync(p)\n                        }\n                }\n                await this.bus.delay(BL_PAGE_DELAY)\n            }\n\n            await this.waitForStatusAsync()\n\n            for (const f of this.classClients) {\n                if (f.pending) {\n                    let err = \"\"\n                    if (f.lastStatus) {\n                        const [session_id, page_error, pageAddrR] = jdunpack<\n                            [number, BootloaderError, number]\n                        >(f.lastStatus.data, \"u32 u32 u32\")\n                        if (session_id != this.sessionId)\n                            err = \"invalid session_id\"\n                        else if (pageAddrR != pageAddr)\n                            err = \"invalid page address\"\n                        else if (page_error)\n                            err =\n                                \"err: \" +\n                                (BootloaderError[page_error] || page_error)\n                    } else {\n                        err = \"timeout\"\n                    }\n                    if (err) {\n                        f.lastStatus = null\n                        log(`retry ${f.device}: ${err}`)\n                    } else {\n                        f.pending = false\n                    }\n                }\n            }\n\n            if (this.numPending() == 0) {\n                log(\n                    `page ${\n                        pageAddr & 0xffffff\n                    } done, ${i}/${BL_RETRIES} retries`\n                )\n                return\n            }\n        }\n\n        throw new Error(\"too many retries\")\n    }\n\n    public async flashFirmwareBlob(\n        fw: FirmwareBlob,\n        progress?: (perc: number) => void\n    ) {\n        const waitCycles = 15\n        const total = fw.pages.length + waitCycles + 3\n        let idx = 0\n        const prog = () => {\n            if (progress) progress((100 * idx) / total)\n            idx++\n        }\n        try {\n            prog()\n            await this.startFlashAsync()\n            prog()\n            for (const page of fw.pages) {\n                await this.flashPage(page)\n                prog()\n            }\n        } finally {\n            try {\n                // even if something failed, try to reset everyone\n                await this.endFlashAsync()\n                prog()\n                // wait until we're out of bootloader mode; otherwise the subsequent scan will keep devices in BL mode\n                for (let i = 0; i < waitCycles; ++i) {\n                    await this.bus.delay(150)\n                    prog()\n                }\n            } finally {\n                // even if resetting failed, unregister event listeners\n                for (const d of this.classClients) {\n                    d.stop()\n                }\n            }\n        }\n    }\n}\n\nconst UF2_MAGIC_START0 = 0x0a324655\nconst UF2_MAGIC_START1 = 0x9e5d5157\nconst UF2_MAGIC_END = 0x0ab16f30\n\n/**\n * Parses a UF2 firmware binary into firmware blobs\n * @param uf2\n * @param store\n * @returns\n * @category Firmware\n */\nexport function parseUF2Firmware(\n    uf2: Uint8Array,\n    store: string\n): FirmwareBlob[] {\n    const blobs: FirmwareBlob[] = []\n    let currBlob: FirmwareBlob\n    for (let off = 0; off < uf2.length; off += 512) {\n        const header = uf2.slice(off, off + 32)\n        const [\n            magic0,\n            magic1,\n            flags,\n            trgaddr,\n            payloadSize,\n            blkNo,\n            numBlocks,\n            familyID,\n        ] = bufferToArray(header, NumberFormat.UInt32LE)\n        if (\n            magic0 != UF2_MAGIC_START0 ||\n            magic1 != UF2_MAGIC_START1 ||\n            getNumber(uf2, NumberFormat.UInt32LE, off + 512 - 4) !=\n                UF2_MAGIC_END\n        )\n            throw new Error(\"invalid UF2\")\n        if (blkNo == 0) {\n            flush()\n            currBlob = {\n                pages: [],\n                productIdentifier: familyID,\n                version: \"\",\n                pageSize: 1024,\n                name: \"FW \" + familyID.toString(16),\n                store,\n            }\n        }\n        if (flags & 0x8000)\n            parseExtTags(uf2.slice(off + 32 + payloadSize, off + 512))\n        const pageSize = currBlob.pageSize || 1024\n        let currPage = currBlob.pages[currBlob.pages.length - 1]\n        if (\n            !currPage ||\n            !(\n                currPage.targetAddress <= trgaddr &&\n                trgaddr < currPage.targetAddress + pageSize\n            )\n        ) {\n            currPage = {\n                targetAddress: trgaddr & ~(pageSize - 1),\n                data: new Uint8Array(pageSize),\n            }\n            currPage.data.fill(0xff)\n            currBlob.pages.push(currPage)\n        }\n        currPage.data.set(\n            uf2.slice(off + 32, off + 32 + payloadSize),\n            trgaddr - currPage.targetAddress\n        )\n    }\n    flush()\n    return blobs\n\n    function flush() {\n        if (currBlob) blobs.push(currBlob)\n    }\n\n    function parseExtTags(buf: Uint8Array) {\n        let sz = 0\n        for (let i = 0; i < buf.length; i += sz) {\n            sz = buf[i]\n            if (sz == 0) break\n            const desig = getNumber(buf, NumberFormat.UInt32LE, i) >>> 8\n            for (const key of Object.keys(uf2ExtTags)) {\n                const tg = uf2ExtTags[key]\n                if (desig == Math.abs(tg)) {\n                    let v: any\n                    if (tg < 0) {\n                        v = bufferToString(buf.slice(i + 4, i + sz))\n                    } else {\n                        v = getNumber(buf, NumberFormat.UInt32LE, i + 4)\n                    }\n                    const cbany = currBlob as any\n                    cbany[key] = v\n                    break\n                }\n            }\n            sz = (sz + 3) & ~3\n        }\n    }\n}\n\n/**\n * Firmware information\n * @internal\n */\nexport interface FirmwareInfo {\n    deviceId: string\n    version: string\n    name: string\n    productIdentifier: number\n    bootloaderProductIdentifier: number\n}\n\n/**\n * Parse a UF2 firmware file and extracts firmware blobs\n * @param blob\n * @param store\n * @returns\n * @category Firmware\n */\nexport async function parseFirmwareFile(\n    blob: Blob,\n    store?: string\n): Promise<FirmwareBlob[]> {\n    const data = await readBlobToUint8Array(blob)\n    const buf = new Uint8Array(data)\n    const uf2Blobs = parseUF2Firmware(buf, store)\n    return uf2Blobs\n}\n\nasync function createFlashers(bus: JDBus) {\n    const flashers: FlashClient[] = []\n    const numTries = 10\n    const tryDelay = 10\n\n    const handlePkt = (p: Packet) => {\n        // note that we may get this even if recovery==false due to someone else asking\n        // (eg when the user set the recovery mode toggle)\n        if (\n            p.serviceIndex == 1 &&\n            p.serviceCommand == CMD_ADVERTISEMENT_DATA &&\n            p.getNumber(NumberFormat.UInt32LE, 0) == SRV_BOOTLOADER\n        ) {\n            if (!flashers.find(f => f.device.deviceId == p.deviceIdentifier)) {\n                log(`new flasher`)\n                flashers.push(new FlashClient(bus, p))\n            }\n        }\n    }\n\n    try {\n        bus.on(PACKET_REPORT, handlePkt)\n        for (let i = 0; i < numTries; ++i) {\n            // also ask BL services if any\n            const bl_announce = Packet.onlyHeader(CMD_ADVERTISEMENT_DATA)\n            await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER)\n            await bus.delay(tryDelay)\n        }\n    } finally {\n        bus.off(PACKET_REPORT, handlePkt)\n    }\n    return flashers\n}\n\n/**\n * Indicates if a firmware blob is applicated to the device information\n * @param dev\n * @param blob\n * @returns\n * @category Firmware\n */\nexport function updateApplicable(dev: FirmwareInfo, blob: FirmwareBlob) {\n    return (\n        dev &&\n        blob &&\n        dev.bootloaderProductIdentifier == blob.productIdentifier &&\n        dev.version !== blob.version\n    )\n}\n\n/**\n * Flash firmware blob onto device\n * @param bus\n * @param blob\n * @param updateCandidates\n * @param ignoreFirmwareCheck\n * @param progress\n * @returns\n * @category Firmware\n */\nexport async function flashFirmwareBlob(\n    bus: JDBus,\n    blob: FirmwareBlob,\n    updateCandidates: FirmwareInfo[],\n    ignoreFirmwareCheck: boolean,\n    progress?: (perc: number) => void\n) {\n    if (!updateCandidates?.length) return\n    _startTime = Date.now()\n    log(`resetting ${updateCandidates.length} device(s)`)\n    for (const d of updateCandidates) {\n        const device = bus.device(d.deviceId)\n        log(`resetting ${device}`)\n        await device.sendCtrlCommand(ControlCmd.Reset)\n    }\n    const allFlashers = await createFlashers(bus)\n    const flashers = allFlashers.filter(\n        f => !!ignoreFirmwareCheck || f.dev_class == blob.productIdentifier\n    )\n    if (!flashers.length) {\n        log(`no devices to flash`)\n        return\n    }\n    if (flashers.length != updateCandidates.length)\n        console.error(\n            `expected ${updateCandidates.length} flashers, got ${flashers.length}`\n        )\n    flashers[0].classClients = flashers\n    log(`flashing ${blob.name}`)\n    await flashers[0].flashFirmwareBlob(blob, progress)\n}\n\n/**\n * This command can be sent every 50ms to keep devices in bootloader mode\n * @param bus\n * @category Firmware\n */\nexport async function sendStayInBootloaderCommand(bus: JDBus) {\n    const bl_announce = Packet.onlyHeader(BootloaderCmd.Info)\n    await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER)\n}\n","import JDServiceServer from \"./serviceserver\"\nimport { jdpack, jdunpack, PackedSimpleValue, PackedValues } from \"../pack\"\nimport Packet from \"../packet\"\nimport { bufferEq, isSet, pick } from \"../utils\"\nimport JDEventSource from \"../eventsource\"\nimport {\n    CHANGE,\n    CMD_GET_REG,\n    PACKET_DATA_NORMALIZE,\n    PACKET_INVALID_DATA,\n    REGISTER_PRE_GET,\n    REPORT_RECEIVE,\n} from \"../constants\"\nimport { isRegister } from \"../spec\"\n\nfunction defaultFieldPayload(\n    specification: jdspec.PacketMember\n): PackedSimpleValue {\n    let r: PackedSimpleValue = undefined\n    switch (specification.type) {\n        case \"bool\":\n            r = 0\n            break\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const min = pick(\n                specification.typicalMin,\n                specification.absoluteMin,\n                undefined\n            )\n            const max = pick(\n                specification.typicalMax,\n                specification.absoluteMax,\n                undefined\n            )\n            if (max !== undefined && min !== undefined) r = (max + min) / 2\n            else r = 0\n            break\n        }\n        case \"bytes\": {\n            r = new Uint8Array(0)\n            break\n        }\n        case \"string\":\n        case \"string0\": {\n            r = \"\"\n            break\n        }\n    }\n\n    if (/^(u0|i1)\\.\\d+$/.test(specification.type)) r = 0\n\n    return r\n}\n\nfunction defaultPayload<T extends PackedValues>(\n    specification: jdspec.PacketInfo\n): T {\n    const { fields } = specification\n    const rs = fields.map(defaultFieldPayload)\n    return rs as T\n}\n\n/**\n * A register \"server\" instance, used to assembly service servers.\n * @category Servers\n */\nexport class JDRegisterServer<\n    TValues extends PackedValues\n> extends JDEventSource {\n    data: Uint8Array\n    lastSetTime: number\n    private readonly resetData: Uint8Array\n    readonly specification: jdspec.PacketInfo\n    readOnly: boolean\n    errorRegister: JDRegisterServer<TValues>\n    skipBoundaryCheck = false\n    skipErrorInjection = false\n\n    constructor(\n        public readonly service: JDServiceServer,\n        public readonly identifier: number,\n        defaultValue?: TValues\n    ) {\n        super()\n        const serviceSpecification = this.service.specification\n        this.specification = serviceSpecification.packets.find(\n            pkt => isRegister(pkt) && pkt.identifier === this.identifier\n        )\n        let v: PackedValues = defaultValue\n        if (!v && !this.specification.optional)\n            v = defaultPayload(this.specification)\n        if (v !== undefined && !v.some(vi => vi === undefined)) {\n            this.data = jdpack(this.packFormat, v)\n        }\n\n        // keep a copy to handle reset\n        this.resetData = this.data?.slice(0)\n\n        // don't check boundaries if there are none\n        this.skipBoundaryCheck = !this.specification?.fields.some(\n            field => isSet(field.absoluteMin) || isSet(field.absoluteMax)\n        )\n    }\n\n    get packFormat() {\n        return this.specification.packFormat\n    }\n\n    values(): TValues {\n        return jdunpack(this.data, this.packFormat) as TValues\n    }\n\n    private normalize(values: TValues) {\n        // enforce boundaries from spec\n        if (!this.skipBoundaryCheck) {\n            this.specification?.fields.forEach((field, fieldi) => {\n                if (field.isSimpleType) {\n                    let value = values[fieldi] as number\n                    // clamp within bounds\n                    const min = field.absoluteMin\n                    if (min !== undefined) value = Math.max(min, value)\n                    const max = field.absoluteMax\n                    if (max !== undefined) value = Math.min(max, value)\n                    // update\n                    values[fieldi] = value\n                }\n            })\n        }\n\n        // enforce other boundaries\n        this.emit(PACKET_DATA_NORMALIZE, values)\n    }\n\n    private shouldNormalize() {\n        return (\n            !this.skipBoundaryCheck || this.listenerCount(PACKET_DATA_NORMALIZE)\n        )\n    }\n\n    setValues(values: TValues, skipChangeEvent?: boolean) {\n        if (this.readOnly) return\n\n        if (this.shouldNormalize()) this.normalize(values)\n        const d = jdpack(this.packFormat, values)\n        if (!bufferEq(this.data, d)) {\n            this.data = d\n            if (!skipChangeEvent) this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.data = this.resetData?.slice(0)\n    }\n\n    async sendGetAsync() {\n        this.emit(REGISTER_PRE_GET)\n\n        let d = this.data\n        if (!d) return\n\n        const error =\n            !this.skipErrorInjection && this.errorRegister?.values()[0]\n        if (error && !isNaN(error)) {\n            // apply error artifically\n            const vs = this.values() as number[]\n            for (let i = 0; i < vs.length; ++i) {\n                vs[i] += Math.random() * error\n            }\n            d = jdpack(this.packFormat, vs)\n        }\n        await this.service.sendPacketAsync(\n            Packet.from(this.identifier | CMD_GET_REG, d)\n        )\n    }\n\n    handlePacket(pkt: Packet): boolean {\n        if (this.identifier !== pkt.registerIdentifier) return false\n\n        if (pkt.isRegisterGet) {\n            this.sendGetAsync()\n        } else if (this.identifier >> 8 !== 0x1) {\n            // set, non-const\n            let changed = false\n            let d = pkt.data\n\n            // unpack and check boundaries\n            if (this.shouldNormalize()) {\n                try {\n                    // unpack, apply boundaries, repack\n                    const values = jdunpack<TValues>(d, this.packFormat)\n                    this.normalize(values)\n                    d = jdpack<TValues>(this.packFormat, values)\n                } catch (e) {\n                    // invalid format, refuse\n                    this.emit(PACKET_INVALID_DATA, pkt)\n                }\n            }\n\n            // test if anything changed\n            if (!bufferEq(this.data, d)) {\n                this.data = d\n                changed = true\n            }\n            this.lastSetTime = this.service.timestamp\n            this.emit(REPORT_RECEIVE)\n            if (changed) this.emit(CHANGE)\n        }\n        return true\n    }\n}\nexport default JDRegisterServer\n","import {\n    BaseEvent,\n    SystemCmd,\n    SystemEvent,\n    SystemReg,\n    SystemStatusCodes,\n} from \"../../../jacdac-spec/dist/specconstants\"\nimport {\n    CHANGE,\n    DEVICE_CHANGE,\n    PACKET_RECEIVE,\n    PACKET_SEND,\n    REPORT_UPDATE,\n} from \"../constants\"\nimport JDServerServiceProvider from \"./serverserviceprovider\"\nimport JDEventSource from \"../eventsource\"\nimport Packet from \"../packet\"\nimport JDRegisterServer from \"./registerserver\"\nimport { isRegister, serviceSpecificationFromClassIdentifier } from \"../spec\"\nimport { PackedValues } from \"../pack\"\nimport JDService from \"../service\"\n\nconst CALIBRATION_DELAY = 5000\n\n/**\n * Server instiation options\n * @category Servers\n */\nexport interface JDServerOptions {\n    /**\n     * Service instance name\n     */\n    instanceName?: string\n    /**\n     * This server instance is a twin of a physical device and should not emit any packet\n     */\n    twin?: JDService\n    /**\n     * Initial value for the ``value`` register\n     */\n    valueValues?: PackedValues\n    /**\n     * Initial value for the ``intensity`` register\n     */\n    intensityValues?: PackedValues\n    /**\n     * Emit active/inactive events based on the intensity register\n     */\n    isActive?: (intensity: PackedValues) => boolean\n    /**\n     * Initial value for the ``variant`` register\n     */\n    variant?: number\n    /**\n     * A map of custom register initial values\n     */\n    registerValues?: {\n        code: number\n        values: PackedValues\n    }[]\n}\n\n/**\n * Base class for service server implementations\n * @category Servers\n */\nexport class JDServiceServer extends JDEventSource {\n    public serviceIndex = -1 // set by device\n    private _device: JDServerServiceProvider\n    public readonly specification: jdspec.ServiceSpec\n    private readonly _registers: JDRegisterServer<PackedValues>[] = []\n    private readonly commands: {\n        [identifier: number]: (pkt: Packet) => void\n    } = {}\n    readonly statusCode: JDRegisterServer<[SystemStatusCodes, number]>\n    readonly instanceName: JDRegisterServer<[string]>\n    private _twin: JDService\n    private _twinCleanup: (() => void)[]\n    private _locked = false\n\n    constructor(\n        public readonly serviceClass: number,\n        options?: JDServerOptions\n    ) {\n        super()\n        const {\n            instanceName,\n            variant,\n            valueValues,\n            intensityValues,\n            registerValues,\n            isActive,\n        } = options || {}\n\n        this.specification = serviceSpecificationFromClassIdentifier(\n            this.serviceClass\n        )\n\n        this.statusCode = this.addRegister<[SystemStatusCodes, number]>(\n            SystemReg.StatusCode,\n            [SystemStatusCodes.Ready, 0]\n        )\n        if (valueValues) this.addRegister(SystemReg.Value, valueValues)\n        if (intensityValues) {\n            const intensity = this.addRegister(\n                SystemReg.Intensity,\n                intensityValues\n            )\n            if (isActive)\n                intensity.on(CHANGE, () => {\n                    const ev = isActive(intensity.values())\n                    if (ev !== undefined)\n                        this.sendEvent(\n                            isActive(intensity.values())\n                                ? SystemEvent.Active\n                                : SystemEvent.Inactive\n                        )\n                })\n        }\n        if (variant) this.addRegister<[number]>(SystemReg.Variant, [variant])\n        this.instanceName = this.addRegister<[string]>(SystemReg.InstanceName, [\n            instanceName || \"\",\n        ])\n\n        // any extra\n        registerValues?.forEach(({ code, values }) =>\n            this.addRegister<PackedValues>(code, values)\n        )\n\n        // emit event when status code changes\n        this.statusCode.on(CHANGE, () =>\n            this.sendEvent(BaseEvent.StatusCodeChanged, this.statusCode.data)\n        )\n\n        // if the device has a calibrate command, regiser handler\n        // and put device in calibrationneeded state\n        if (\n            this.specification.packets.find(\n                pkt =>\n                    pkt.kind === \"command\" &&\n                    pkt.identifier === SystemCmd.Calibrate\n            )\n        ) {\n            this.addCommand(\n                SystemCmd.Calibrate,\n                this.handleCalibrate.bind(this)\n            )\n            this.statusCode.setValues(\n                [SystemStatusCodes.CalibrationNeeded, 0],\n                true\n            )\n        }\n\n        this.handleTwinPacket = this.handleTwinPacket.bind(this)\n    }\n\n    get device() {\n        return this._device\n    }\n\n    set device(value: JDServerServiceProvider) {\n        if (this._device !== value) {\n            this._device = value\n            this.emit(DEVICE_CHANGE)\n            this.emit(CHANGE)\n        }\n    }\n\n    get twin() {\n        return this._twin\n    }\n\n    set twin(service: JDService) {\n        if (service === this._twin) return\n\n        if (this._twin) {\n            this._twin.off(PACKET_RECEIVE, this.handleTwinPacket)\n            this._twin.off(PACKET_SEND, this.handleTwinPacket)\n            this._twinCleanup.forEach(tw => tw())\n            // unsubscribe\n        }\n        this._twin = service\n        this._twinCleanup = service ? [] : undefined\n        if (this._twin) {\n            this._twin.on(PACKET_RECEIVE, this.handleTwinPacket)\n            this._twin.on(PACKET_SEND, this.handleTwinPacket)\n            this._twin.registers().forEach(twinReg => {\n                const reg = this.register(twinReg.code)\n                if (reg) {\n                    reg?.setValues(twinReg.unpackedValue)\n                    this._twinCleanup.push(\n                        twinReg.subscribe(REPORT_UPDATE, () =>\n                            reg.setValues(twinReg.unpackedValue)\n                        )\n                    )\n                }\n            })\n        }\n\n        this.emit(CHANGE)\n    }\n\n    private handleTwinPacket(pkt: Packet) {\n        this.handlePacket(pkt)\n    }\n\n    get registers() {\n        return this._registers.slice(0)\n    }\n\n    get timestamp() {\n        const bus = this.device?.bus || this._twin?.device?.bus\n        return bus?.timestamp\n    }\n\n    register<TValues extends PackedValues = PackedValues>(\n        code: number\n    ): JDRegisterServer<TValues> {\n        return this._registers.find(\n            reg => reg.identifier === code\n        ) as JDRegisterServer<TValues>\n    }\n\n    protected addExistingRegister<TValues extends PackedValues = PackedValues>(\n        reg: JDRegisterServer<TValues>\n    ) {\n        this._registers.push(reg)\n        return reg\n    }\n\n    protected addRegister<TValues extends PackedValues = PackedValues>(\n        identifier: number,\n        defaultValue?: TValues\n    ): JDRegisterServer<TValues> {\n        let reg = this._registers.find(\n            r => r.identifier === identifier\n        ) as JDRegisterServer<TValues>\n        if (!reg && !this._locked) {\n            // make sure this register is supported\n            if (\n                !this.specification.packets.find(\n                    pkt => isRegister(pkt) && pkt.identifier === identifier\n                )\n            )\n                return undefined\n            reg = new JDRegisterServer<TValues>(this, identifier, defaultValue)\n            this._registers.push(reg)\n        }\n        return reg\n    }\n\n    reset() {\n        this.registers.forEach(reg => reg.reset())\n    }\n\n    /**\n     * Locks the current set of registers\n     */\n    public lock() {\n        this._locked = true\n    }\n\n    protected addCommand(identifier: number, handler: (pkt: Packet) => void) {\n        if (this._locked) console.error(`adding command to locked service`)\n        this.commands[identifier] = handler\n    }\n\n    async handlePacket(pkt: Packet) {\n        if (pkt.isRegisterGet || pkt.isRegisterSet) {\n            // find register to handle\n            const rid = pkt.registerIdentifier\n            let reg = this._registers.find(r => r.identifier === rid)\n            if (!reg) {\n                // try adding\n                reg = this.addRegister(rid)\n            }\n            reg?.handlePacket(pkt)\n        } else if (pkt.isCommand) {\n            const cmd = this.commands[pkt.serviceCommand]\n            if (cmd) cmd(pkt)\n            else if (cmd === undefined) console.log(`ignored command`, { pkt })\n        }\n        // ignored?\n    }\n\n    async sendPacketAsync(pkt: Packet) {\n        if (this.twin) return\n\n        pkt.serviceIndex = this.serviceIndex\n        await this.device.sendPacketAsync(pkt)\n    }\n\n    async sendEvent(eventCode: number, data?: Uint8Array) {\n        if (this.twin) return\n\n        const { device } = this\n        const { bus } = device\n        if (!bus) return\n\n        const now = bus.timestamp\n        const cmd = device.createEventCmd(eventCode)\n        const pkt = Packet.from(cmd, data || new Uint8Array(0))\n        await this.sendPacketAsync(pkt)\n        device.delayedSend(pkt, now + 20)\n        device.delayedSend(pkt, now + 100)\n    }\n\n    private async handleCalibrate() {\n        const [status] = this.statusCode.values()\n        if (status !== SystemStatusCodes.Ready) return\n        this.calibrate()\n    }\n\n    async calibrate() {\n        // notify that calibration started\n        this.statusCode.setValues([SystemStatusCodes.Calibrating, 0])\n        // wait 5 seconds\n        await this.device.bus.delay(CALIBRATION_DELAY)\n        // finish calibraion\n        this.statusCode.setValues([SystemStatusCodes.Ready, 0])\n    }\n}\nexport default JDServiceServer\n","import { SystemReg } from \"../../jacdac-spec/dist/specconstants\"\nimport {\n    CHANGE,\n    READING_SENT,\n    REFRESH,\n    SensorReg,\n    STREAMING_DEFAULT_INTERVAL,\n} from \"../jdom/constants\"\nimport { PackedValues } from \"../jdom/pack\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * Creation options for sensor servers\n * @category Servers\n * @internal\n */\nexport interface SensorServiceOptions<TReading extends PackedValues>\n    extends JDServerOptions {\n    readingValues?: TReading\n    readingError?: TReading\n    streamingInterval?: number\n    preferredStreamingInterval?: number\n}\n\nexport default class SensorServer<\n    TReading extends PackedValues\n> extends JDServiceServer {\n    readonly reading: JDRegisterServer<TReading>\n    readonly readingError: JDRegisterServer<TReading>\n    readonly streamingSamples: JDRegisterServer<[number]>\n    readonly streamingInterval: JDRegisterServer<[number]>\n    readonly preferredStreamingInterval: JDRegisterServer<[number]>\n\n    private lastStream = 0\n    private lastErrorReadingChanged = false\n\n    constructor(\n        public readonly serviceClass: number,\n        options?: SensorServiceOptions<TReading>\n    ) {\n        super(serviceClass, options)\n        const {\n            readingValues,\n            streamingInterval,\n            preferredStreamingInterval,\n            readingError,\n        } = options || {}\n        this.reading = this.addRegister<TReading>(\n            SystemReg.Reading,\n            readingValues\n        )\n        this.streamingSamples = this.addRegister<[number]>(\n            SensorReg.StreamingSamples\n        )\n        this.streamingInterval = this.addRegister<[number]>(\n            SensorReg.StreamingInterval,\n            [\n                streamingInterval ||\n                    preferredStreamingInterval ||\n                    this.reading.specification.preferredInterval ||\n                    STREAMING_DEFAULT_INTERVAL,\n            ]\n        )\n        if (preferredStreamingInterval !== undefined)\n            this.preferredStreamingInterval = this.addRegister<[number]>(\n                SensorReg.StreamingPreferredInterval,\n                [preferredStreamingInterval]\n            )\n        if (readingError !== undefined) {\n            this.readingError = this.addRegister<TReading>(\n                SystemReg.ReadingError,\n                readingError\n            )\n            this.reading.errorRegister = this.readingError\n            this.readingError.on(\n                CHANGE,\n                () => (this.lastErrorReadingChanged = true)\n            )\n        }\n\n        this.on(REFRESH, this.refreshRegisters.bind(this))\n    }\n\n    private refreshRegisters() {\n        const [samples] = this.streamingSamples.values()\n        if (samples <= 0 || !this.reading.data) return\n        // is it time to stream?\n        let interval = this.streamingInterval?.values()?.[0]\n        if (interval === undefined)\n            interval = this.preferredStreamingInterval?.values()?.[0]\n        if (interval === undefined)\n            interval = this.reading.specification.preferredInterval\n        if (interval === undefined) interval = STREAMING_DEFAULT_INTERVAL\n\n        const now = this.device.bus.timestamp\n        if (now - this.lastStream > interval) {\n            // let's stream a value!\n            this.lastStream = now\n            this.streamingSamples.setValues([samples - 1])\n            this.reading.sendGetAsync()\n            this.emit(READING_SENT)\n\n            // if the error changed, send value as well.\n            if (this.lastErrorReadingChanged) {\n                this.readingError?.sendGetAsync()\n                this.lastErrorReadingChanged = false\n            }\n        }\n    }\n}\n","import SensorServer from \"./sensorserver\"\nimport {\n    RealTimeClockCmd,\n    RealTimeClockReg,\n    RealTimeClockVariant,\n    REFRESH,\n    SRV_REAL_TIME_CLOCK,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDBus from \"../jdom/bus\"\nimport Packet from \"../jdom/packet\"\n\n/**\n * @internal\n */\nexport type RealTimeClockReadingType = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n]\n\n/**\n * @internal\n */\nexport function dateToClock(n: Date): RealTimeClockReadingType {\n    const year = n.getFullYear()\n    const month = n.getMonth() + 1\n    const date = n.getDate()\n    const day = n.getDay()\n    const hour = n.getHours()\n    const min = n.getMinutes()\n    const sec = n.getSeconds()\n\n    return [year, month, date, day, hour, min, sec]\n}\n\nexport default class RealTimeClockServer extends SensorServer<RealTimeClockReadingType> {\n    readonly error: JDRegisterServer<[number]>\n    readonly precision: JDRegisterServer<[number]>\n    private lastSecond = 0\n\n    constructor() {\n        super(SRV_REAL_TIME_CLOCK, {\n            readingValues: dateToClock(new Date()),\n            variant: RealTimeClockVariant.Computer,\n            streamingInterval: 1000,\n        })\n\n        this.error = this.addRegister<[number]>(RealTimeClockReg.Error, [0])\n        this.precision = this.addRegister<[number]>(\n            RealTimeClockReg.Precision,\n            [0]\n        )\n\n        this.addCommand(RealTimeClockCmd.SetTime, this.handleSetTime.bind(this))\n        this.on(REFRESH, this.refreshTime.bind(this))\n    }\n\n    static async syncTime(bus: JDBus) {\n        const values = dateToClock(new Date())\n        const pkt = Packet.jdpacked<RealTimeClockReadingType>(\n            RealTimeClockCmd.SetTime,\n            \"u16 u8 u8 u8 u8 u8 u8\",\n            values\n        )\n        await pkt.sendAsMultiCommandAsync(bus, SRV_REAL_TIME_CLOCK)\n    }\n\n    private handleSetTime(pkt: Packet) {\n        console.log(`set time`, { pkt })\n    }\n\n    private refreshTime() {\n        const d = new Date()\n        const s = d.getSeconds()\n        if (s !== this.lastSecond) {\n            const r = dateToClock(d)\n            this.reading.setValues(r)\n            this.lastSecond = s\n        }\n    }\n}\n","import JDBus from \"../bus\"\nimport {\n    CHANGE,\n    CONNECT,\n    CONNECTING,\n    CONNECTION_STATE,\n    DISCONNECT,\n    DISCONNECTING,\n    ERROR,\n    LOST,\n    PACKET_SEND_DISCONNECT,\n    SELF_ANNOUNCE,\n    TRANSPORT_CONNECT_RETRY_DELAY,\n    TRANSPORT_PULSE_TIMEOUT,\n} from \"../constants\"\nimport JDEventSource from \"../eventsource\"\nimport { Observable } from \"../observable\"\nimport Packet from \"../packet\"\nimport { assert, delay } from \"../utils\"\n\n/**\n * Connection states for transports\n * @category Transport\n */\nexport enum ConnectionState {\n    Connected = \"connected\",\n    Connecting = \"connecting\",\n    Disconnecting = \"disconnecting\",\n    Disconnected = \"disconnected\",\n}\n\n/**\n * General options for the transports\n * @category Transport\n */\nexport interface TransportOptions {\n    // if no packets is received within the pulse interval, disconnect/reconnect\n    checkPulse?: boolean\n    connectObservable?: Observable<void>\n    disconnectObservable?: Observable<void>\n}\n\n/**\n * A transport marshalls Jacdac packets between a physical device on the TypeScript bus.\n * @category Transport\n */\nexport abstract class Transport extends JDEventSource {\n    private _bus: JDBus\n    private _checkPulse: boolean\n    private _connectionTime: number\n    private _lastReceivedTime: number\n    protected disposed = false\n    private _cleanups: (() => void)[]\n\n    constructor(readonly type: string, options?: TransportOptions) {\n        super()\n        this._checkPulse = !!options?.checkPulse\n        this._cleanups = [\n            options?.connectObservable?.subscribe({\n                next: async () => {\n                    if (this.bus?.disconnected) {\n                        await delay(TRANSPORT_CONNECT_RETRY_DELAY)\n                        if (this.bus?.disconnected) {\n                            if (\n                                typeof document !== \"undefined\" &&\n                                document.visibilityState === \"visible\"\n                            )\n                                this.connect(true)\n                        }\n                    }\n                },\n            })?.unsubscribe,\n            options?.disconnectObservable?.subscribe({\n                next: () => {\n                    this.disconnect()\n                },\n            })?.unsubscribe,\n        ].filter(c => !!c)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(bus: JDBus) {\n        assert(!this._bus && !!bus)\n        this._bus = bus\n        if (this._checkPulse) {\n            this._bus.on(SELF_ANNOUNCE, this.checkPulse.bind(this))\n        }\n    }\n\n    private _connectionState = ConnectionState.Disconnected\n    private _connectPromise: Promise<void>\n    private _disconnectPromise: Promise<void>\n\n    /**\n     * Gets the bus connection state.\n     */\n    get connectionState(): ConnectionState {\n        return this._connectionState\n    }\n\n    private setConnectionState(state: ConnectionState) {\n        if (this._connectionState !== state) {\n            //console.debug(`${this._connectionState} -> ${state}`)\n            this._connectionState = state\n            this._connectionTime =\n                state === ConnectionState.Connected\n                    ? this.bus.timestamp\n                    : undefined\n            this._lastReceivedTime = undefined\n            this.emit(CONNECTION_STATE, this._connectionState)\n            this.bus.emit(CONNECTION_STATE, this)\n            switch (this._connectionState) {\n                case ConnectionState.Connected:\n                    this.emit(CONNECT)\n                    break\n                case ConnectionState.Connecting:\n                    this.emit(CONNECTING)\n                    break\n                case ConnectionState.Disconnecting:\n                    this.emit(DISCONNECTING)\n                    break\n                case ConnectionState.Disconnected:\n                    this.emit(DISCONNECT)\n                    break\n            }\n            this.emit(CHANGE)\n            this.bus.emit(CHANGE)\n        }\n    }\n\n    get connecting() {\n        return this.connectionState == ConnectionState.Connecting\n    }\n\n    get disconnecting() {\n        return this.connectionState == ConnectionState.Disconnecting\n    }\n\n    get connected() {\n        return this._connectionState == ConnectionState.Connected\n    }\n\n    get disconnected() {\n        return this._connectionState == ConnectionState.Disconnected\n    }\n\n    protected abstract transportSendPacketAsync(p: Packet): Promise<void>\n    protected abstract transportConnectAsync(\n        background?: boolean\n    ): Promise<void>\n    protected abstract transportDisconnectAsync(\n        background?: boolean\n    ): Promise<void>\n\n    private async checkPulse() {\n        assert(this._checkPulse)\n        if (!this.connected) return // ignore while connected\n        if (this.bus.safeBoot) return // don't mess with flashing bootloaders\n        const devices = this.bus.devices()\n        if (devices.some(dev => dev.flashing))\n            // don't mess with flashing\n            return\n\n        // detect if the proxy device is lost\n        const t =\n            this.bus.timestamp -\n            (this._lastReceivedTime || this._connectionTime)\n        if (t > TRANSPORT_PULSE_TIMEOUT) {\n            this.emit(LOST)\n            console.debug(`${this.type}: lost connection with device`)\n            if (this._lastReceivedTime !== undefined) await this.reconnect()\n            else await this.disconnect(true)\n        }\n    }\n\n    async sendPacketAsync(p: Packet) {\n        if (!this.connected) {\n            this.emit(PACKET_SEND_DISCONNECT, p)\n        } else {\n            await this.transportSendPacketAsync(p)\n        }\n    }\n\n    connect(background?: boolean): Promise<void> {\n        console.debug(\n            `${this.type}: connect ${background ? `(background)` : \"\"}`\n        )\n        if (this.disposed)\n            throw new Error(\"attempted to connect to a disposed transport\")\n        // already connected\n        if (this.connectionState == ConnectionState.Connected) {\n            console.debug(`${this.type}: already connected`)\n            return Promise.resolve()\n        }\n\n        // connecting\n        if (!this._connectPromise) {\n            // already disconnecting, retry when disconnected\n            if (this._disconnectPromise) {\n                console.debug(\n                    `${this.type}: queuing connect after disconnecting`\n                )\n                const p = this._disconnectPromise\n                this._disconnectPromise = undefined\n                this._connectPromise = p.then(() => this.connect())\n            } else {\n                // starting a fresh connection\n                console.debug(`${this.type}: connecting`)\n                this._connectPromise = Promise.resolve()\n                this.setConnectionState(ConnectionState.Connecting)\n                this._connectPromise = this._connectPromise.then(() =>\n                    this.transportConnectAsync(background)\n                )\n                const p = (this._connectPromise = this._connectPromise\n                    .then(() => {\n                        if (p == this._connectPromise) {\n                            this._connectPromise = undefined\n                            this.setConnectionState(ConnectionState.Connected)\n                        } else {\n                            console.debug(\n                                `${this.type}: connection aborted in flight`,\n                                {\n                                    state: this._connectionState,\n                                    old: this._connectPromise,\n                                    new: p,\n                                }\n                            )\n                            // already reported\n                        }\n                    })\n                    .catch(e => {\n                        if (p == this._connectPromise) {\n                            this._connectPromise = undefined\n                            this.setConnectionState(\n                                ConnectionState.Disconnected\n                            )\n                            if (!background) this.errorHandler(CONNECT, e)\n                            else\n                                console.debug(\n                                    `${this.type}: background connect failed`\n                                )\n                        } else {\n                            console.debug(\n                                `${this.type}: connection error aborted in flight`\n                            )\n                        }\n                    }))\n            }\n        } else {\n            console.debug(`${this.type}: connect with existing promise`)\n        }\n        return this._connectPromise\n    }\n\n    disconnect(background?: boolean): Promise<void> {\n        // already disconnected\n        if (this.connectionState == ConnectionState.Disconnected)\n            return Promise.resolve()\n\n        if (!this._disconnectPromise) {\n            // connection in progress, wait and disconnect when done\n            if (this._connectPromise) {\n                console.debug(\n                    `${this.type}: cancelling connection and disconnect`\n                )\n                this._connectPromise = undefined\n            }\n            console.debug(`${this.type}: disconnecting`)\n            this._disconnectPromise = Promise.resolve()\n            this.setConnectionState(ConnectionState.Disconnecting)\n            this._disconnectPromise = this._disconnectPromise.then(() =>\n                this.transportDisconnectAsync(background)\n            )\n            this._disconnectPromise = this._disconnectPromise\n                .catch(e => {\n                    this._disconnectPromise = undefined\n                    this.errorHandler(DISCONNECT, e)\n                })\n                .finally(() => {\n                    this._disconnectPromise = undefined\n                    this.setConnectionState(ConnectionState.Disconnected)\n                })\n        } else {\n            console.debug(`${this.type}: disconnect with existing promise`)\n        }\n        return this._disconnectPromise\n    }\n\n    async reconnect() {\n        console.debug(`${this.type}: reconnect`)\n        await this.disconnect(true)\n        await this.connect(true)\n    }\n\n    protected handlePacket(payload: Uint8Array) {\n        const { timestamp } = this.bus\n        this._lastReceivedTime = timestamp\n        const pkt = Packet.fromBinary(payload, timestamp)\n        pkt.sender = this.type\n        this.bus.processPacket(pkt)\n    }\n\n    protected handleFrame(payload: Uint8Array) {\n        const { timestamp } = this.bus\n        this._lastReceivedTime = timestamp\n        const pkts = Packet.fromFrame(payload, timestamp)\n        for (const pkt of pkts) {\n            pkt.sender = this.type\n            this.bus.processPacket(pkt)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected errorHandler(context: string, exception: any) {\n        this.emit(ERROR, { context, exception })\n        this.bus.emit(ERROR, { transport: this, context, exception })\n        this.emit(CHANGE)\n\n        // when a microbit flash is initiated via file download, the device will\n        // stop responding. we should not try to reconnect while this is the case\n        this.disconnect(true)\n    }\n\n    dispose() {\n        this.disposed = true\n        this._cleanups.forEach(c => c())\n        this._cleanups = []\n    }\n}\n\nexport default Transport\n","import JDBus from \"./bus\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND, SELF_ANNOUNCE } from \"./constants\"\nimport JDEventSource from \"./eventsource\"\nimport Packet from \"./packet\"\n\nexport interface BusStats {\n    packets: number\n    announce: number\n    acks: number\n    bytes: number\n\n    devices: number\n    simulators: number\n    transport?: string\n}\n\ninterface Stats {\n    packets: number\n    announce: number\n    acks: number\n    bytes: number\n}\n\nexport class BusStatsMonitor extends JDEventSource {\n    private readonly _prev: Stats[] = Array(4)\n        .fill(0)\n        .map(() => ({\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }))\n    private _previ = 0\n    private _temp: Stats = {\n        packets: 0,\n        announce: 0,\n        acks: 0,\n        bytes: 0,\n    }\n\n    /**\n     * @internal\n     */\n    constructor(private readonly bus: JDBus) {\n        super()\n        bus.on(PACKET_SEND, this.handlePacketSend.bind(this))\n        bus.on(PACKET_PROCESS, this.handlePacketProcess.bind(this))\n        bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this))\n    }\n\n    /**\n     * Computes the current packet statistics of the bus\n     */\n    get current(): BusStats {\n        const r: Stats = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }\n        const n = this._prev.length\n        for (let i = 0; i < this._prev.length; ++i) {\n            const p = this._prev[i]\n            r.packets += p.packets\n            r.announce += p.announce\n            r.acks += p.acks\n            r.bytes += p.bytes\n        }\n        // announce every 500ms\n        const n2 = n / 2\n        r.packets /= n2\n        r.announce /= n2\n        r.acks /= n2\n        r.bytes /= n2\n        return {\n            devices: this.bus.devices({ ignoreInfrastructure: true }).length,\n            simulators: this.bus.serviceProviders().length,\n            transport: this.bus.transports.find(\n                transport => transport.connected\n            )?.type,\n            ...r,\n        }\n    }\n\n    private accumulate(pkt: Packet) {\n        this._temp.packets++\n        this._temp.bytes += (pkt.header?.length || 0) + (pkt.data?.length || 0)\n        if (pkt.isAnnounce) this._temp.announce++\n        if (pkt.isCRCAck) this._temp.acks++\n    }\n\n    private handleSelfAnnounce() {\n        const changed =\n            JSON.stringify(this._prev) !== JSON.stringify(this._temp)\n        this._prev[this._previ] = this._temp\n        this._previ = (this._previ + 1) % this._prev.length\n        this._temp = {\n            packets: 0,\n            announce: 0,\n            acks: 0,\n            bytes: 0,\n        }\n        if (changed) this.emit(CHANGE)\n    }\n\n    private handlePacketSend(pkt: Packet) {\n        this.accumulate(pkt)\n    }\n\n    private handlePacketProcess(pkt: Packet) {\n        this.accumulate(pkt)\n    }\n}\n","import {\n    CHANGE,\n    ControlAnnounceFlags,\n    ControlCmd,\n    ControlReg,\n    IDENTIFY,\n    SRV_CONTROL,\n} from \"../constants\"\nimport { jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport JDRegisterServer from \"./registerserver\"\nimport JDServiceServer from \"./serviceserver\"\n\n/**\n * A control service server\n * @category Servers\n */\nexport class ControlServer extends JDServiceServer {\n    readonly deviceDescription: JDRegisterServer<[string]>\n    readonly mcuTemperature: JDRegisterServer<[number]>\n    readonly resetIn: JDRegisterServer<[number]>\n    readonly uptime: JDRegisterServer<[number]>\n    private startTime: number\n\n    statusLightColor: number = undefined\n\n    constructor(options?: { resetIn?: boolean }) {\n        super(SRV_CONTROL)\n        const { resetIn } = options || {}\n        this.startTime = Date.now()\n        this.deviceDescription = this.addRegister<[string]>(\n            ControlReg.DeviceDescription\n        )\n        this.mcuTemperature = this.addRegister<[number]>(\n            ControlReg.McuTemperature,\n            [25]\n        )\n        this.uptime = this.addRegister<[number]>(ControlReg.Uptime)\n        if (resetIn)\n            this.resetIn = this.addRegister<[number]>(ControlReg.ResetIn, [0])\n\n        this.addCommand(ControlCmd.Services, this.announce.bind(this))\n        this.addCommand(ControlCmd.Identify, this.identify.bind(this))\n        this.addCommand(ControlCmd.Reset, this.handleReset.bind(this))\n        this.addCommand(ControlCmd.Noop, null)\n        this.addCommand(\n            ControlCmd.SetStatusLight,\n            this.handleSetStatusLight.bind(this)\n        )\n    }\n\n    async announce() {\n        // restartCounter, flags, packetCount, serviceClass\n        const pkt = Packet.jdpacked<[ControlAnnounceFlags, number, number[]]>(\n            ControlCmd.Services,\n            \"u16 u8 x[1] u32[]\",\n            [\n                this.device.restartCounter |\n                    ControlAnnounceFlags.StatusLightRgbNoFade |\n                    ControlAnnounceFlags.SupportsACK,\n                this.device.packetCount + 1,\n                this.device\n                    .services()\n                    .slice(1)\n                    .map(srv => srv.serviceClass),\n            ]\n        )\n\n        await this.sendPacketAsync(pkt)\n\n        // micros\n        this.uptime.setValues([(Date.now() - this.startTime) * 100], true)\n\n        // check if we need to reset\n        if (this.resetIn) {\n            const [resetIn] = this.resetIn.values()\n            if (resetIn) {\n                const resetTimestamp = resetIn / 1000 + this.resetIn.lastSetTime\n                if (resetTimestamp < this.device.bus.timestamp) {\n                    // reset in expired\n                    console.debug(`${this} reset in expired`, {\n                        resetIn,\n                        lastSet: this.resetIn.lastSetTime,\n                        resetTimestamp,\n                    })\n                    this.device.reset()\n                }\n            }\n        }\n    }\n\n    async identify() {\n        this.emit(IDENTIFY)\n    }\n\n    private handleReset() {\n        this.startTime = Date.now()\n        this.device.reset()\n    }\n\n    private handleSetStatusLight(pkt: Packet) {\n        const [toRed, toGreen, toBlue] = jdunpack<\n            [number, number, number, number]\n        >(pkt.data, \"u8 u8 u8 u8\")\n        this.statusLightColor = (toRed << 16) | (toGreen << 8) | toBlue\n        this.emit(CHANGE)\n    }\n}\n\nexport default ControlServer\n","import JDBus from \"../bus\"\nimport { PACKET_PROCESS, PACKET_SEND, SELF_ANNOUNCE } from \"../constants\"\nimport JDEventSource from \"../eventsource\"\nimport Packet from \"../packet\"\nimport { shortDeviceId } from \"../pretty\"\nimport { randomDeviceId } from \"../random\"\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nexport abstract class JDServiceProvider extends JDEventSource {\n    private _bus: JDBus\n    public readonly template: string\n    public readonly deviceId: string\n    public readonly shortId: string\n\n    constructor(template: string, deviceId?: string) {\n        super()\n        this.template = template\n        this.deviceId = deviceId\n        if (!this.deviceId) this.deviceId = randomDeviceId()\n        this.shortId = shortDeviceId(this.deviceId)\n        this.handleSelfAnnounce = this.handleSelfAnnounce.bind(this)\n        this.handlePacket = this.handlePacket.bind(this)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(value: JDBus) {\n        if (value !== this._bus) {\n            this.stop()\n            this._bus = value\n            if (this._bus) this.start()\n        }\n    }\n\n    protected start() {\n        if (this._bus) {\n            this._bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce)\n            this._bus.on([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n        }\n    }\n\n    protected stop() {\n        if (this._bus) {\n            this._bus.off(SELF_ANNOUNCE, this.handleSelfAnnounce)\n            this._bus.off([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n            this._bus = undefined\n        }\n    }\n\n    protected handleSelfAnnounce(): void {}\n    protected abstract handlePacket(pkt: Packet): void\n}\nexport default JDServiceProvider\n","import JDServiceServer from \"./serviceserver\"\nimport Packet from \"../packet\"\nimport { isBufferEmpty } from \"../utils\"\nimport ControlServer from \"./controlserver\"\nimport {\n    CHANGE,\n    CMD_EVENT_COUNTER_MASK,\n    CMD_EVENT_COUNTER_POS,\n    CMD_EVENT_MASK,\n    ERROR,\n    JD_SERVICE_INDEX_CRC_ACK,\n    MAX_SERVICES_LENGTH,\n    REFRESH,\n    RESET,\n} from \"../constants\"\nimport JDServiceProvider from \"./serviceprovider\"\n\n/**\n * Implements a device with service servers.\n * @category Servers\n */\nexport class JDServerServiceProvider extends JDServiceProvider {\n    private _services: JDServiceServer[]\n    public readonly controlService: ControlServer\n    private _restartCounter = 0\n    private _packetCount = 0\n    private _eventCounter: number = undefined\n    private _delayedPackets: {\n        timestamp: number\n        pkt: Packet\n    }[]\n\n    constructor(\n        template: string,\n        services: JDServiceServer[],\n        options?: {\n            deviceId?: string\n            resetIn?: boolean\n        }\n    ) {\n        super(template, options?.deviceId)\n        this.controlService = new ControlServer(options)\n        this._services = []\n        this.updateServices(services)\n\n        this.on(REFRESH, this.refreshRegisters.bind(this))\n    }\n\n    updateServices(services: JDServiceServer[]) {\n        // clear previous services\n        this._services?.slice(1).forEach(srv => (srv.device = undefined))\n        // store new services\n        this._services = [this.controlService, ...services]\n        if (this._services.length >= MAX_SERVICES_LENGTH) {\n            this.emit(\n                ERROR,\n                `too many services (${this._services.length}) > ${MAX_SERVICES_LENGTH}`\n            )\n            console.warn(`jacdac: dropping services to ${MAX_SERVICES_LENGTH}`)\n            this._services = this._services.slice(0, MAX_SERVICES_LENGTH)\n        }\n        this._services.forEach((srv, i) => {\n            srv.device = this\n            srv.serviceIndex = i\n        })\n        this.emit(CHANGE)\n    }\n\n    removeService(service: JDServiceServer) {\n        if (service?.device !== this) return // not in this device;\n        const newServices = this._services.slice(1)\n        const index = newServices.indexOf(service)\n        if (index > -1) {\n            newServices.splice(index, 1)\n            this.updateServices(newServices)\n        }\n    }\n\n    protected start() {\n        super.start()\n        this._packetCount = 0\n    }\n\n    protected stop() {\n        this._delayedPackets = undefined\n        super.stop()\n    }\n\n    protected handleSelfAnnounce() {\n        super.handleSelfAnnounce()\n        if (this._restartCounter < 0xf) this._restartCounter++\n        // async\n        this.controlService.announce()\n        // also send status codes, for non-zero codes\n        const activeServices = this.services().filter(\n            srv => !isBufferEmpty(srv.statusCode.data)\n        )\n        activeServices.forEach(srv => srv.statusCode.sendGetAsync())\n\n        // reset counter\n        this._packetCount = 0\n    }\n\n    get restartCounter() {\n        return this._restartCounter\n    }\n\n    get packetCount() {\n        return this._packetCount\n    }\n\n    services(): JDServiceServer[] {\n        return this._services.slice(0)\n    }\n\n    service(serviceIndex: number) {\n        return serviceIndex !== undefined && this._services[serviceIndex]\n    }\n\n    toString() {\n        return `host ${this.shortId}`\n    }\n\n    get eventCounter() {\n        return this._eventCounter\n    }\n\n    createEventCmd(evCode: number) {\n        if (!this._eventCounter) this._eventCounter = 0\n        this._eventCounter = (this._eventCounter + 1) & CMD_EVENT_COUNTER_MASK\n        if (evCode >> 8) throw new Error(\"invalid event code\")\n        return (\n            CMD_EVENT_MASK |\n            (this._eventCounter << CMD_EVENT_COUNTER_POS) |\n            evCode\n        )\n    }\n\n    async sendPacketAsync(pkt: Packet) {\n        if (!this.bus) return Promise.resolve()\n\n        // qos counter\n        this._packetCount++\n\n        pkt.deviceIdentifier = this.deviceId\n        // compute crc and send\n        const p = pkt.sendCoreAsync(this.bus)\n        // send to current bus\n        this.bus.processPacket(pkt)\n        // return priomise\n        return p\n    }\n\n    delayedSend(pkt: Packet, timestamp: number) {\n        if (!this._delayedPackets) {\n            this._delayedPackets = []\n            // start processing loop\n            setTimeout(this.processDelayedPackets.bind(this), 10)\n        }\n        const dp = { timestamp, pkt }\n        this._delayedPackets.push(dp)\n        this._delayedPackets.sort((l, r) => -l.timestamp + r.timestamp)\n    }\n\n    private processDelayedPackets() {\n        // consume packets that are ready\n        while (this._delayedPackets?.length) {\n            const { timestamp, pkt } = this._delayedPackets[0]\n            if (timestamp > this.bus.timestamp) break\n            this._delayedPackets.shift()\n            // do we wait?\n            try {\n                this.sendPacketAsync(pkt)\n            } catch (e) {\n                // something went wrong, clear queue\n                this._delayedPackets = undefined\n                throw e\n            }\n        }\n        // keep waiting or stop\n        if (!this._delayedPackets?.length) this._delayedPackets = undefined\n        // we're done\n        else setTimeout(this.processDelayedPackets.bind(this), 10)\n    }\n\n    protected handlePacket(pkt: Packet) {\n        const devIdMatch = pkt.deviceIdentifier == this.deviceId\n        if (pkt.requiresAck && devIdMatch) {\n            pkt.requiresAck = false // make sure we only do it once\n            const crc = pkt.crc\n            const ack = Packet.onlyHeader(crc)\n            ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK\n            this.sendPacketAsync(ack)\n        }\n\n        if (pkt.isMultiCommand) {\n            if (!pkt.isCommand) return // only commands supported\n            const multiCommandClass = pkt.serviceClass\n            for (const h of this._services) {\n                if (h.serviceClass == multiCommandClass) {\n                    // pretend it's directly addressed to us\n                    const npkt = pkt.cloneForDevice(this.deviceId, h.serviceIndex)\n                    h.handlePacket(npkt)\n                }\n            }\n        } else if (devIdMatch) {\n            if (!pkt.isCommand) return // huh? someone's pretending to be us?\n            const h = this._services[pkt.serviceIndex]\n            if (h) {\n                // log(`handle pkt at ${h.name} cmd=${pkt.service_command}`)\n                h.handlePacket(pkt)\n            }\n        } else {\n            if (pkt.isCommand) return // it's a command, and it's not for us\n            // reception of ACKs is handled by JDDevice class\n        }\n    }\n\n    private refreshRegisters() {\n        this._services.forEach(srv => srv.emit(REFRESH))\n    }\n\n    reset() {\n        this._restartCounter = 0\n        this._packetCount = 0\n        this._services?.forEach(srv => srv.reset())\n        this.emit(RESET)\n    }\n}\nexport default JDServerServiceProvider\n","import {\n    SRV_PROTO_TEST,\n    CHANGE,\n    ProtoTestReg,\n    ProtoTestCmd,\n    ProtoTestEvent,\n} from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { OutPipe } from \"../pipes\"\nimport JDRegisterServer from \"./registerserver\"\nimport JDServiceServer from \"./serviceserver\"\n\nexport class ProtocolTestServer extends JDServiceServer {\n    private rwBytes: JDRegisterServer<[Uint8Array]>\n\n    constructor() {\n        super(SRV_PROTO_TEST)\n\n        this.init<[boolean]>(\n            ProtoTestReg.RwBool,\n            ProtoTestReg.RoBool,\n            ProtoTestCmd.CBool,\n            ProtoTestEvent.EBool,\n            false\n        )\n        this.init<[number]>(\n            ProtoTestReg.RwI32,\n            ProtoTestReg.RoI32,\n            ProtoTestCmd.CI32,\n            ProtoTestEvent.EI32,\n            0\n        )\n        this.init<[number]>(\n            ProtoTestReg.RwU32,\n            ProtoTestReg.RoU32,\n            ProtoTestCmd.CU32,\n            ProtoTestEvent.EU32,\n            0\n        )\n        this.init<[string]>(\n            ProtoTestReg.RwString,\n            ProtoTestReg.RoString,\n            ProtoTestCmd.CString,\n            ProtoTestEvent.EString,\n            \"\"\n        )\n        this.rwBytes = this.init<[Uint8Array]>(\n            ProtoTestReg.RwBytes,\n            ProtoTestReg.RoBytes,\n            ProtoTestCmd.CBytes,\n            ProtoTestEvent.EBytes,\n            new Uint8Array(0)\n        )\n        this.init<[number, number, number, number]>(\n            ProtoTestReg.RwI8U8U16I32,\n            ProtoTestReg.RoI8U8U16I32,\n            ProtoTestCmd.CI8U8U16I32,\n            ProtoTestEvent.EI8U8U16I32,\n            0,\n            0,\n            0,\n            0\n        )\n        this.init<[number, string]>(\n            ProtoTestReg.RwU8String,\n            ProtoTestReg.RoU8String,\n            ProtoTestCmd.CU8String,\n            ProtoTestEvent.EU8String,\n            0,\n            \"\"\n        )\n\n        this.addCommand(\n            ProtoTestCmd.CReportPipe,\n            this.handleReportPipe.bind(this)\n        )\n    }\n\n    private init<TValues extends any[]>(\n        rwi: number,\n        roi: number,\n        ci: number,\n        ei: number,\n        ...values: TValues\n    ) {\n        const rw = this.addRegister(rwi, values)\n        const ro = this.addRegister(roi, rw.values())\n        rw.on(CHANGE, () => {\n            ro.setValues(rw.values())\n            this.sendEvent(ei, rw.data)\n        })\n        this.addCommand(ci, pkt =>\n            rw.setValues(jdunpack(pkt.data, rw.specification.packFormat))\n        )\n        return rw\n    }\n\n    private async handleReportPipe(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(this.rwBytes.data, (b: number) => {\n            const buf = new Uint8Array(1)\n            buf[0] = b\n            return jdpack<[Uint8Array]>(\"b\", [buf])\n        })\n    }\n}\nexport default ProtocolTestServer\n","import {\n    ButtonEvent,\n    ButtonReg,\n    CHANGE,\n    REFRESH,\n    SRV_BUTTON,\n} from \"../jdom/constants\"\nimport SensorServer from \"./sensorserver\"\nimport RegisterServer from \"../jdom/servers/registerserver\"\nimport { jdpack } from \"../jdom/pack\"\n\n/**\n * Server implementation for the button service\n * @category Servers\n */\nexport default class ButtonServer extends SensorServer<[number]> {\n    public static readonly HOLD_TIME = 500\n    public static readonly INACTIVE_VALUE = 0\n    public static readonly ACTIVE_VALUE = 1\n\n    private _downTime: number\n    private _nextHold: number\n\n    readonly analog: RegisterServer<[boolean]>\n    private _threshold: RegisterServer<[number]>\n\n    constructor(instanceName?: string, analog?: boolean) {\n        super(SRV_BUTTON, {\n            instanceName,\n            readingValues: [ButtonServer.INACTIVE_VALUE],\n            streamingInterval: 50,\n        })\n        this.analog = this.addRegister(ButtonReg.Analog, [!!analog])\n        this.on(REFRESH, this.handleRefresh.bind(this))\n    }\n\n    get threshold() {\n        return this._threshold\n    }\n\n    set threshold(value: RegisterServer<[number]>) {\n        if (value !== this._threshold) {\n            this._threshold = value\n            this.analog.setValues([!!this._threshold])\n            this.emit(CHANGE)\n        }\n    }\n\n    private isActive() {\n        // TODO: debouncing\n        const [v] = this.reading.values()\n        const t = this.threshold?.values()?.[0] || 0.5\n\n        return v > t\n    }\n\n    private async handleRefresh() {\n        const now = this.device.bus.timestamp\n        if (this.isActive()) {\n            // down event\n            if (this._downTime === undefined) {\n                this._downTime = now\n                this._nextHold = this._downTime + ButtonServer.HOLD_TIME\n                await this.sendEvent(ButtonEvent.Down)\n                // hold\n            } else if (now > this._nextHold) {\n                const time = now - this._downTime\n                this._nextHold =\n                    this.device.bus.timestamp + ButtonServer.HOLD_TIME\n                await this.sendEvent(\n                    ButtonEvent.Hold,\n                    jdpack<[number]>(\"u32\", [time])\n                )\n            }\n        } else {\n            // up event\n            if (this._downTime !== undefined) {\n                const time = now - this._downTime\n                this._downTime = undefined\n                this._nextHold = undefined\n                await this.sendEvent(\n                    ButtonEvent.Up,\n                    jdpack<[number]>(\"u32\", [time])\n                )\n            }\n        }\n    }\n\n    async down() {\n        this.reading.setValues([ButtonServer.ACTIVE_VALUE])\n    }\n\n    async up() {\n        this.reading.setValues([ButtonServer.INACTIVE_VALUE])\n    }\n}\n","import { BuzzerCmd, BuzzerReg, SRV_BUZZER } from \"../jdom/constants\"\nimport { jdpack, jdunpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport interface BuzzerTone {\n    frequency: number\n    duration: number\n    volume: number\n}\n\n/**\n * Encodes a buzzer tone information into a data payload\n * @param frequency sound frequency in Hz\n * @param ms sound duration in milliseconds\n * @param volume volume from [0..1]\n * @returns data payload\n * @category Data Packing\n */\nexport function tonePayload(frequency: number, ms: number, volume: number) {\n    const period = Math.round(1000000 / frequency)\n    const duty = (period * volume) >> 11\n    return jdpack(\"u16 u16 u16\", [period, duty, ms])\n}\n\n/**\n * Server implementation for the buzzer service\n * @category Servers\n */\nexport default class BuzzerServer extends JDServiceServer {\n    readonly volume: JDRegisterServer<[number]>\n\n    static PLAY_TONE = \"playTone\"\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_BUZZER, options)\n\n        this.volume = this.addRegister<[number]>(BuzzerReg.Volume, [0.2])\n        this.addCommand(BuzzerCmd.PlayTone, this.handlePlayTone.bind(this))\n    }\n\n    private handlePlayTone(pkt: Packet) {\n        const [period, , duration] = jdunpack<[number, number, number]>(\n            pkt.data,\n            \"u16 u16 u16\"\n        )\n        const frequency = 1000000 / period\n        const [volume] = this.volume.values()\n\n        this.emit(BuzzerServer.PLAY_TONE, <BuzzerTone>{\n            frequency,\n            duration,\n            volume,\n        })\n    }\n}\n","import {\n    CharacterScreenReg,\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n    CharacterScreenCmd,\n    SRV_CHARACTER_SCREEN,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class CharacterScreenServer extends JDServiceServer {\n    readonly message: JDRegisterServer<[string]>\n    readonly brightness: JDRegisterServer<[number]>\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[CharacterScreenVariant]>\n    readonly textDirection: JDRegisterServer<[CharacterScreenTextDirection]>\n\n    constructor(options?: {\n        message?: string\n        brightness?: number\n        rows?: number\n        columns?: number\n        variant?: CharacterScreenVariant\n        textDirection?: CharacterScreenTextDirection\n    }) {\n        super(SRV_CHARACTER_SCREEN)\n        const {\n            message = \"\",\n            rows = 2,\n            columns = 16,\n            variant,\n            textDirection,\n            brightness = 100,\n        } = options || {}\n\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [\n            message,\n        ])\n        this.brightness = this.addRegister<[number]>(\n            CharacterScreenReg.Brightness,\n            [brightness]\n        )\n        this.rows = this.addRegister<[number]>(CharacterScreenReg.Rows, [rows])\n        this.columns = this.addRegister<[number]>(CharacterScreenReg.Columns, [\n            columns,\n        ])\n        this.variant = this.addRegister<[CharacterScreenVariant]>(\n            CharacterScreenReg.Variant,\n            [variant || CharacterScreenVariant.LCD]\n        )\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [\n            \"\",\n        ])\n        this.textDirection = this.addRegister<[CharacterScreenTextDirection]>(\n            CharacterScreenReg.TextDirection,\n            [textDirection || CharacterScreenTextDirection.LeftToRight]\n        )\n\n        this.addCommand(\n            CharacterScreenCmd.SetLine,\n            this.handleSetLine.bind(this)\n        )\n        this.addCommand(CharacterScreenCmd.Clear, this.handleClear.bind(this))\n    }\n\n    handleClear() {\n        this.message.setValues([\"\"])\n    }\n\n    handleSetLine(pkt: Packet) {\n        const [line, lineMessage] = pkt.jdunpack<[number, string]>(\"u16 s\")\n        const [rows] = this.rows.values()\n        if (line >= rows) return\n        const [columns] = this.columns.values()\n\n        const [message = \"\"] = this.message.values()\n        const lines = message.split(\"\\n\")\n        lines[line] = lineMessage.slice(0, columns) // clip as needed\n        const newMessage = lines.map(l => l || \"\").join(\"\\n\")\n        this.message.setValues([newMessage])\n    }\n}\n","import {\n    JoystickButtons,\n    JoystickEvent,\n    JoystickReg,\n    JoystickVariant,\n    SRV_JOYSTICK,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_BUTTONS =\n    JoystickButtons.Left |\n    JoystickButtons.Right |\n    JoystickButtons.Up |\n    JoystickButtons.Down\n\n/**\n * @internal\n */\nexport const JOYSTICK_ARCADE_BUTTONS =\n    JOYSTICK_DPAD_BUTTONS |\n    JoystickButtons.A |\n    JoystickButtons.B |\n    JoystickButtons.Menu |\n    JoystickButtons.Select |\n    JoystickButtons.Exit\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_A_BUTTONS = JOYSTICK_DPAD_BUTTONS | JoystickButtons.A\n\n/**\n * @internal\n */\nexport const JOYSTICK_DPAD_AB_BUTTONS =\n    JOYSTICK_DPAD_A_BUTTONS | JoystickButtons.B\n\n/**\n * @internal\n */\nexport const JOYSTICK_GAMEPAD_EXTRA_BUTTONS =\n    JoystickButtons.B |\n    JoystickButtons.Select |\n    JoystickButtons.Menu |\n    JoystickButtons.Reset\n\n// https://w3c.github.io/gamepad/#remapping\nconst standardGamepadMapping = [\n    [JoystickButtons.Left, 14],\n    [JoystickButtons.Right, 15],\n    [JoystickButtons.Up, 12],\n    [JoystickButtons.Down, 13],\n    [JoystickButtons.A, 0],\n    [JoystickButtons.B, 1],\n    [JoystickButtons.Select, 8],\n    [JoystickButtons.Menu, 9],\n]\n\nexport default class JoystickServer extends SensorServer<\n    [JoystickButtons, number, number]\n> {\n    readonly variant: JDRegisterServer<[JoystickVariant]>\n    readonly buttonsAvailable: JDRegisterServer<[JoystickButtons]>\n\n    constructor(options?: {\n        instanceName?: string\n        variant?: JoystickVariant\n        buttonsAvailable?: JoystickButtons\n    }) {\n        super(SRV_JOYSTICK, {\n            instanceName: options?.instanceName,\n            readingValues: [0, 0, 0],\n            streamingInterval: 50,\n        })\n        const { variant = JoystickVariant.Thumb, buttonsAvailable = 0 } =\n            options || {}\n\n        this.variant = this.addRegister<[JoystickVariant]>(\n            JoystickReg.Variant,\n            [variant]\n        )\n        this.buttonsAvailable = this.addRegister<[JoystickButtons]>(\n            JoystickReg.ButtonsAvailable,\n            [buttonsAvailable]\n        )\n    }\n\n    get isDigital() {\n        const [value] = this.buttonsAvailable.values()\n        return (value & JOYSTICK_DPAD_BUTTONS) === JOYSTICK_DPAD_BUTTONS\n    }\n\n    async down(buttons: JoystickButtons) {\n        const [currentButtons, x, y] = this.reading.values()\n        const newButtons = currentButtons | buttons\n        await this.updateReading(newButtons, x, y)\n    }\n\n    async up(buttons: JoystickButtons) {\n        const [currentButtons, x, y] = this.reading.values()\n        const newButtons = currentButtons & ~buttons\n        await this.updateReading(newButtons, x, y)\n    }\n\n    async updateDirection(x: number, y: number) {\n        const [button] = this.reading.values()\n        await this.updateReading(button, x, y)\n    }\n\n    /**\n     * Read the state of a browser gamepad and apply it to the sensor\n     * @param gamepad\n     */\n    async update(gamepad: Gamepad) {\n        const { buttons, axes } = gamepad\n        const [buttonsAvailable] = this.buttonsAvailable.values()\n\n        let newButtons: JoystickButtons = 0\n        for (const [b, id] of standardGamepadMapping) {\n            if ((b & buttonsAvailable) == b && !!buttons[id].pressed) {\n                newButtons |= b\n            }\n        }\n\n        let newX = 0,\n            newY = 0\n        if (!this.isDigital) {\n            const [axeLeftRight, axeUpDown] = axes\n            newX = axeLeftRight\n            newY = axeUpDown\n        }\n\n        await this.updateReading(newButtons, newX, newY)\n    }\n\n    private async updateReading(\n        buttons: JoystickButtons,\n        x: number,\n        y: number\n    ) {\n        const [oldButtons] = this.reading.values()\n        if (this.isDigital) {\n            x =\n                buttons & JoystickButtons.Left\n                    ? -1\n                    : buttons & JoystickButtons.Right\n                    ? 1\n                    : 0\n            y =\n                buttons & JoystickButtons.Up\n                    ? -1\n                    : buttons & JoystickButtons.Down\n                    ? 1\n                    : 0\n        } else {\n            const threshold = -1\n            if (x < -threshold) buttons |= JoystickButtons.Left\n            else if (x > threshold) buttons |= JoystickButtons.Right\n            else buttons &= ~(JoystickButtons.Left | JoystickButtons.Right)\n            if (y < -threshold) buttons |= JoystickButtons.Up\n            else if (y > threshold) buttons |= JoystickButtons.Down\n            else buttons &= ~(JoystickButtons.Up | JoystickButtons.Down)\n        }\n        this.reading.setValues([buttons, x, y])\n\n        if (buttons !== oldButtons) {\n            await this.sendEvent(\n                JoystickEvent.ButtonsChanged,\n                jdpack<[number]>(\"u32\", [buttons])\n            )\n        }\n    }\n}\n","import {\n    CHANGE,\n    DotMatrixReg,\n    DotMatrixVariant,\n    SensorReg,\n    SRV_DOT_MATRIX,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class DotMatrixServer extends JDServiceServer {\n    readonly dots: JDRegisterServer<[Uint8Array]>\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly brightness: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[DotMatrixVariant]>\n\n    constructor(\n        columns: number,\n        rows: number,\n        options?: {\n            brightness?: number\n            variant?: DotMatrixVariant\n        }\n    ) {\n        super(SRV_DOT_MATRIX)\n        const { brightness, variant } = options || {}\n        this.dots = this.addRegister(DotMatrixReg.Dots, [new Uint8Array(0)])\n        this.rows = this.addRegister(DotMatrixReg.Rows, [rows])\n        this.columns = this.addRegister(DotMatrixReg.Columns, [columns])\n        if (brightness !== undefined)\n            this.brightness = this.addRegister(DotMatrixReg.Brightness, [128])\n        if (variant !== undefined)\n            this.variant = this.addRegister(DotMatrixReg.Variant, [variant])\n        this.rows.skipBoundaryCheck = true\n        this.rows.skipErrorInjection = true\n\n        if (variant === DotMatrixVariant.LED)\n            this.addRegister<[number]>(SensorReg.StreamingPreferredInterval, [\n                50,\n            ])\n\n        this.rows.on(CHANGE, this.updateDotsBuffer.bind(this))\n        this.columns.on(CHANGE, this.updateDotsBuffer.bind(this))\n\n        this.updateDotsBuffer()\n    }\n\n    private updateDotsBuffer() {\n        // columns must be byte aligned\n        const [rows] = this.rows.values()\n        const [columns] = this.columns.values()\n\n        // there's probably a much smarter way to do this\n        const columnspadded = columns + (8 - (columns % 8))\n        // total bits needed\n        const n = rows * columnspadded\n\n        if (this.dots.data?.length !== n) {\n            this.dots.data = new Uint8Array(n)\n            this.dots.emit(CHANGE)\n        }\n    }\n}\n","import {\n    CHANGE,\n    LedPixelCmd,\n    LedPixelLightType,\n    LedPixelReg,\n    LedPixelVariant,\n    RENDER,\n    SRV_LED_PIXEL,\n} from \"../jdom/constants\"\nimport {\n    LIGHT_MODE_ADD_RGB,\n    LIGHT_MODE_LAST,\n    LIGHT_MODE_MULTIPLY_RGB,\n    LIGHT_MODE_REPLACE,\n    LIGHT_MODE_SUBTRACT_RGB,\n    LIGHT_PROG_COL1,\n    LIGHT_PROG_COL1_SET,\n    LIGHT_PROG_COL2,\n    LIGHT_PROG_COL3,\n    LIGHT_PROG_COLN,\n    LIGHT_PROG_FADE,\n    LIGHT_PROG_FADE_HSV,\n    LIGHT_PROG_MODE,\n    LIGHT_PROG_MODE1,\n    LIGHT_PROG_RANGE,\n    LIGHT_PROG_ROTATE_BACK,\n    LIGHT_PROG_ROTATE_FWD,\n    LIGHT_PROG_SET_ALL,\n    LIGHT_PROG_SHOW,\n} from \"../jdom/lightconstants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { isBufferEmpty } from \"../jdom/utils\"\n\nconst PROG_EOF = 0\nconst PROG_CMD = 1\nconst PROG_NUMBER = 3\nconst PROG_COLOR_BLOCK = 4\n\ninterface RGB {\n    r: number\n    g: number\n    b: number\n}\n\nfunction rgb(r: number, g: number, b: number) {\n    return { r, g, b }\n}\n\nfunction hsv(hue: number, sat: number, val: number): RGB {\n    // scale down to 0..192\n    hue = (hue * 192) >> 8\n\n    // reference: based on FastLED's hsv2rgb rainbow algorithm\n    // [https://github.com/FastLED/FastLED](MIT)\n    const invsat = 255 - sat\n    const brightness_floor = (val * invsat) >> 8\n    const color_amplitude = val - brightness_floor\n    const section = (hue / 0x40) >> 0 // [0..2]\n    const offset = hue % 0x40 >> 0 // [0..63]\n\n    const rampup = offset\n    const rampdown = 0x40 - 1 - offset\n\n    const rampup_amp_adj = ((rampup * color_amplitude) / (256 / 4)) >> 0\n    const rampdown_amp_adj = ((rampdown * color_amplitude) / (256 / 4)) >> 0\n\n    const rampup_adj_with_floor = rampup_amp_adj + brightness_floor\n    const rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor\n\n    let r = 0,\n        g = 0,\n        b = 0\n    if (section) {\n        if (section == 1) {\n            // section 1: 0x40..0x7F\n            r = brightness_floor\n            g = rampdown_adj_with_floor\n            b = rampup_adj_with_floor\n        } else {\n            // section 2; 0x80..0xBF\n            r = rampup_adj_with_floor\n            g = brightness_floor\n            b = rampdown_adj_with_floor\n        }\n    } else {\n        // section 0: 0x00..0x3F\n        r = rampdown_adj_with_floor\n        g = rampup_adj_with_floor\n        b = brightness_floor\n    }\n    return rgb(r, g, b)\n}\n\nfunction mulcol(c: number, m: number): number {\n    let c2 = (c * m) >> 7\n    if (m < 128 && c == c2) c2--\n    else if (m > 128 && c == c2) c2++\n    return c2\n}\n\nfunction clamp(c: number): number {\n    if (c < 0) return 0\n    if (c > 255) return 255\n    return c\n}\n\nfunction SCALE0(c: number, i: number) {\n    return ((c & 0xff) * (1 + (i & 0xff))) >> 8\n}\n\nexport default class LedPixelServer extends JDServiceServer {\n    readonly brightness: JDRegisterServer<[number]>\n    readonly actualBrightness: JDRegisterServer<[number]>\n    readonly lightType: JDRegisterServer<[LedPixelLightType]>\n    readonly numPixels: JDRegisterServer<[number]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[LedPixelVariant]>\n    readonly maxPixels: JDRegisterServer<[number]>\n    readonly numRepeats: JDRegisterServer<[number]>\n    readonly numColumns: JDRegisterServer<[number]>\n\n    private pxbuffer: Uint8Array = new Uint8Array(0)\n\n    private prog_mode = 0\n    private prog_tmpmode = 0\n\n    private range_start = 0\n    private range_end = 0\n    private range_len = 0\n    private range_ptr = 0\n\n    private prog_ptr = 0\n    private prog_size = 0\n    private prog_data = new Uint8Array(0)\n\n    private dirty = true\n    private inited = false\n\n    power_enable = false\n\n    constructor(\n        options?: {\n            numPixels?: number\n            numColumns?: number\n            maxPixels?: number\n            maxPower?: number\n        } & JDServerOptions\n    ) {\n        super(SRV_LED_PIXEL, options)\n\n        const {\n            numColumns,\n            maxPower = 200,\n            maxPixels = 300,\n            numPixels = 15,\n        } = options || {}\n\n        this.brightness = this.addRegister<[number]>(LedPixelReg.Brightness, [\n            15,\n        ])\n        this.actualBrightness = this.addRegister<[number]>(\n            LedPixelReg.ActualBrightness,\n            [15]\n        )\n        this.lightType = this.addRegister<[LedPixelLightType]>(\n            LedPixelReg.LightType,\n            [LedPixelLightType.WS2812B_GRB]\n        )\n        this.numPixels = this.addRegister<[number]>(LedPixelReg.NumPixels, [\n            numPixels,\n        ])\n        this.maxPower = this.addRegister<[number]>(LedPixelReg.MaxPower, [\n            maxPower,\n        ])\n        this.maxPixels = this.addRegister<[number]>(LedPixelReg.MaxPixels, [\n            maxPixels,\n        ])\n        this.variant = this.addRegister<[LedPixelVariant]>(\n            LedPixelReg.Variant,\n            [LedPixelVariant.Strip]\n        )\n        this.numRepeats = this.addRegister<[number]>(LedPixelReg.NumRepeats, [\n            0,\n        ])\n        if (numColumns !== undefined)\n            this.numColumns = this.addRegister<[number]>(\n                LedPixelReg.NumColumns,\n                [numColumns]\n            )\n\n        this.brightness.on(\n            CHANGE,\n            () => (this.intensity = this.requested_intensity)\n        )\n        this.numPixels.on(CHANGE, this.allocRxBuffer.bind(this))\n        this.maxPixels.on(CHANGE, this.allocRxBuffer.bind(this))\n\n        this.addCommand(LedPixelCmd.Run, this.handleRun.bind(this))\n\n        this.allocRxBuffer()\n    }\n\n    /**\n     * Gets an array of RGB color numbers\n     */\n    get colors() {\n        return this.pxbuffer\n    }\n\n    private get maxpower(): number {\n        const [r] = this.maxPower.values() || [200]\n        return r\n    }\n\n    private get maxpixels(): number {\n        const [r] = this.maxPixels.values() || []\n        return r\n    }\n\n    private get numpixels(): number {\n        const [r] = this.numPixels.values() || [0]\n        return r\n    }\n\n    private get requested_intensity(): number {\n        const [r] = this.brightness.values() || [0]\n        return r\n    }\n\n    private get intensity(): number {\n        const [r] = this.actualBrightness.values() || [0]\n        return r\n    }\n\n    private set intensity(v: number) {\n        this.actualBrightness.setValues([v])\n    }\n\n    private jd_power_enable(value: boolean) {\n        this.power_enable = value\n    }\n\n    is_enabled() {\n        return this.numpixels > 0 && this.requested_intensity > 0\n    }\n\n    private allocRxBuffer() {\n        const { numpixels = 0, maxpixels, pxbuffer } = this\n        if (maxpixels !== undefined && numpixels > maxpixels)\n            this.numPixels.setValues([this.maxpixels])\n        const n = numpixels * 3 // don't need to prealloc here\n        if (pxbuffer || n !== pxbuffer.length) this.pxbuffer = new Uint8Array(n)\n    }\n\n    private reset_range() {\n        this.range_ptr = this.range_start\n    }\n\n    private set_next(c: RGB) {\n        if (this.range_ptr >= this.range_end) return false\n\n        const p = this.pxbuffer\n        const pi = this.range_ptr++ * 3\n        // fast path\n        if (this.prog_tmpmode == LIGHT_MODE_REPLACE) {\n            p[pi + 0] = c.r\n            p[pi + 1] = c.g\n            p[pi + 2] = c.b\n            return true\n        }\n\n        let r = p[pi + 0],\n            g = p[pi + 1],\n            b = p[pi + 2]\n        switch (this.prog_tmpmode) {\n            case LIGHT_MODE_ADD_RGB:\n                r += c.r\n                g += c.g\n                b += c.b\n                break\n            case LIGHT_MODE_SUBTRACT_RGB:\n                r -= c.r\n                g -= c.g\n                b -= c.b\n                break\n            case LIGHT_MODE_MULTIPLY_RGB:\n                r = mulcol(r, c.r)\n                g = mulcol(g, c.g)\n                b = mulcol(b, c.b)\n                break\n        }\n        p[pi + 0] = clamp(r)\n        p[pi + 1] = clamp(g)\n        p[pi + 2] = clamp(b)\n        return true\n    }\n\n    private limit_intensity() {\n        const { numpixels, requested_intensity, maxpower, pxbuffer } = this\n\n        let n = numpixels * 3\n        const prev_intensity = this.intensity\n        let intensity = this.intensity\n\n        intensity += 1 + (intensity >> 5)\n        if (\n            requested_intensity !== undefined &&\n            intensity > requested_intensity\n        )\n            intensity = requested_intensity\n\n        let current_full = 0\n        let current = 0\n        let current_prev = 0\n        let di = 0\n        while (n--) {\n            const v = pxbuffer[di++]\n            current += SCALE0(v, intensity)\n            current_prev += SCALE0(v, prev_intensity)\n            current_full += v\n        }\n\n        // 46uA per step of LED\n        current *= 46\n        current_prev *= 46\n        current_full *= 46\n\n        // 14mA is the chip at 48MHz, 930uA per LED is static\n        const base_current = 14000 + 930 * numpixels\n        const current_limit = maxpower * 1000 - base_current\n\n        if (current <= current_limit) {\n            this.intensity = intensity\n            // LOG(\"curr: %dmA; not limiting %d\", (base_current + current) / 1000, state->intensity);\n            return\n        }\n\n        if (current_prev <= current_limit) {\n            return // no change needed\n        }\n\n        let inten = current_limit / (current_full >> 8) - 1\n        if (inten < 0) inten = 0\n        this.intensity = inten\n    }\n\n    private prog_fetch_color(): RGB {\n        const ptr = this.prog_ptr\n        if (ptr + 3 > this.prog_size) return rgb(0, 0, 0)\n        const d = this.prog_data\n        this.prog_ptr = ptr + 3\n        return rgb(d[ptr + 0], d[ptr + 1], d[ptr + 2])\n    }\n\n    private prog_fetch(): {\n        dst?: number\n        prog: number\n    } {\n        if (this.prog_ptr >= this.prog_size) return { prog: PROG_EOF }\n        const d = this.prog_data\n        const c = d[this.prog_ptr++]\n        if (!(c & 0x80)) {\n            return { dst: c, prog: PROG_NUMBER }\n        } else if ((c & 0xc0) == 0x80) {\n            return {\n                dst: ((c & 0x3f) << 8) | d[this.prog_ptr++],\n                prog: PROG_NUMBER,\n            }\n        } else\n            switch (c) {\n                case LIGHT_PROG_COL1:\n                    return {\n                        dst: 1,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COL2:\n                    return {\n                        dst: 2,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COL3:\n                    return {\n                        dst: 3,\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                case LIGHT_PROG_COLN:\n                    return {\n                        dst: d[this.prog_ptr++],\n                        prog: PROG_COLOR_BLOCK,\n                    }\n                default:\n                    return {\n                        dst: c,\n                        prog: PROG_CMD,\n                    }\n            }\n    }\n\n    private prog_fetch_num(defl: number): number {\n        const prev = this.prog_ptr\n        const fr = this.prog_fetch()\n        const { dst: res, prog: r } = fr\n        if (r == PROG_NUMBER) return res\n        else {\n            this.prog_ptr = prev // rollback\n            return defl\n        }\n    }\n\n    private prog_fetch_cmd(): number {\n        let cmd: number\n        // skip until there's a command\n        for (;;) {\n            const c = this.prog_fetch()\n            switch (c.prog) {\n                case PROG_CMD:\n                    return c.dst\n                case PROG_COLOR_BLOCK:\n                    while (cmd--) this.prog_fetch_color()\n                    break\n                case PROG_EOF:\n                    return 0\n            }\n        }\n    }\n\n    private prog_set(len: number) {\n        this.reset_range()\n        const start = this.prog_ptr\n        for (;;) {\n            this.prog_ptr = start\n            let ok = false\n            for (let i = 0; i < len; ++i) {\n                // don't break the loop immediately if !ok - make sure the prog counter advances\n                ok = this.set_next(this.prog_fetch_color())\n            }\n            if (!ok) break\n        }\n    }\n\n    private prog_fade(len: number, usehsv: boolean) {\n        if (len < 2) {\n            this.prog_set(len)\n            return\n        }\n        let colidx = 0\n        const endp = this.prog_ptr + 3 * len\n        let col0 = this.prog_fetch_color()\n        let col1 = this.prog_fetch_color()\n\n        const colstep = ((len - 1) << 16) / this.range_len\n        let colpos = 0\n\n        this.reset_range()\n\n        for (;;) {\n            while (colidx < colpos >> 16) {\n                colidx++\n                col0 = col1\n                col1 = this.prog_fetch_color()\n            }\n            const fade1 = colpos & 0xffff\n            const fade0 = 0xffff - fade1\n            const col = rgb(\n                (col0.r * fade0 + col1.r * fade1 + 0x8000) >> 16,\n                (col0.g * fade0 + col1.g * fade1 + 0x8000) >> 16,\n                (col0.b * fade0 + col1.b * fade1 + 0x8000) >> 16\n            )\n            if (!this.set_next(usehsv ? hsv(col.r, col.g, col.b) : col)) break\n            colpos += colstep\n        }\n\n        this.prog_ptr = endp\n    }\n\n    private prog_rot(shift: number) {\n        if (shift <= 0 || shift >= this.range_len) return\n\n        const range_start = this.range_start\n        const range_end = this.range_end\n        const buf = this.pxbuffer\n\n        let first = range_start * 3\n        let middle = (range_start + shift) * 3\n        const last = range_end * 3\n        let next = middle\n\n        while (first != next) {\n            const tmp = buf[first]\n            const tmp1 = buf[first + 1]\n            const tmp2 = buf[first + 2]\n\n            buf[first] = buf[next]\n            buf[first + 1] = buf[next + 1]\n            buf[first + 2] = buf[next + 2]\n\n            buf[next] = tmp\n            buf[next + 1] = tmp1\n            buf[next + 2] = tmp2\n\n            first += 3\n            next += 3\n\n            if (next === last) next = middle\n            else if (first === middle) middle = next\n        }\n    }\n\n    private fetch_mode(): number {\n        const m = this.prog_fetch_num(0)\n        if (m > LIGHT_MODE_LAST) return 0\n        return m\n    }\n\n    private prog_process() {\n        const data = this.prog_data\n\n        if (this.prog_ptr >= this.prog_size) return false\n\n        // check that the program wasn't restarted\n        // concurrently\n        while (data === this.prog_data) {\n            const cmd = this.prog_fetch_cmd()\n            if (!cmd) break\n\n            if (cmd == LIGHT_PROG_SHOW) {\n                const k = this.prog_fetch_num(50)\n                this.dirty = true\n                setTimeout(this.animationFrame.bind(this), k)\n                // check data is still current;\n                return data === this.prog_data\n            }\n\n            switch (cmd) {\n                case LIGHT_PROG_COL1_SET:\n                    this.range_ptr = this.range_start + this.prog_fetch_num(0)\n                    this.set_next(this.prog_fetch_color())\n                    break\n                case LIGHT_PROG_FADE:\n                case LIGHT_PROG_FADE_HSV:\n                case LIGHT_PROG_SET_ALL: {\n                    const { dst: len, prog: pcmd } = this.prog_fetch()\n                    if (pcmd != PROG_COLOR_BLOCK || len == 0) continue // bailout\n                    if (cmd == LIGHT_PROG_SET_ALL) this.prog_set(len)\n                    else this.prog_fade(len, cmd == LIGHT_PROG_FADE_HSV)\n                    break\n                }\n\n                case LIGHT_PROG_ROTATE_BACK:\n                case LIGHT_PROG_ROTATE_FWD: {\n                    let k = this.prog_fetch_num(1)\n                    const len = this.range_len\n                    if (len == 0) continue\n                    while (k >= len) k -= len\n                    if (cmd == LIGHT_PROG_ROTATE_FWD && k != 0) k = len - k\n                    this.prog_rot(k)\n                    break\n                }\n\n                case LIGHT_PROG_MODE1:\n                    this.prog_tmpmode = this.fetch_mode()\n                    break\n\n                case LIGHT_PROG_MODE:\n                    this.prog_mode = this.fetch_mode()\n                    break\n\n                case LIGHT_PROG_RANGE: {\n                    let start = this.prog_fetch_num(0)\n                    const len = this.prog_fetch_num(this.numpixels)\n                    const numpixels = this.numpixels\n                    if (start > numpixels) start = numpixels\n                    let end = start + len\n                    if (end > numpixels) end = numpixels\n                    this.range_start = start\n                    this.range_end = end\n                    this.range_len = end - start\n                    break\n                }\n            }\n\n            if (cmd != LIGHT_PROG_MODE1) this.prog_tmpmode = this.prog_mode\n        }\n\n        return false\n    }\n\n    /**\n     * Perform an animation step\n     */\n    animationFrame() {\n        if (!this.prog_process()) return // concurrently udpated\n\n        if (!this.is_enabled()) return\n        if (this.dirty) {\n            this.dirty = false\n            if (isBufferEmpty(this.pxbuffer)) {\n                this.jd_power_enable(false)\n                return\n            } else {\n                this.jd_power_enable(true)\n            }\n            this.limit_intensity()\n            // we're ready to render...\n            this.emit(RENDER)\n        }\n    }\n\n    private sync_config() {\n        if (!this.is_enabled()) {\n            this.jd_power_enable(false)\n            return\n        }\n\n        if (!this.inited) {\n            this.inited = true\n            // initialize?\n            // px_init(this.lighttype);\n        }\n\n        this.jd_power_enable(true)\n    }\n\n    private handleRun(pkt: Packet) {\n        this.prog_data = pkt.data\n        this.prog_size = this.prog_data.length\n        this.prog_ptr = 0\n\n        this.range_start = 0\n        this.range_end = this.range_len = this.numpixels\n        this.prog_tmpmode = this.prog_mode = 0\n\n        this.sync_config()\n        this.animationFrame()\n    }\n}\n","/*\n * `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n * `0xD1: fade(C+)` - set `N` pixels to color between colors in sequence\n * `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n * `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n * `0xD4: rotate_back(K)` - same, but towards the connector\n * `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n * `0xD6: range(P=0, N=length)` - range from pixel `P`, `N` pixels long\n * `0xD7: mode(K=0)` - set update mode\n * `0xD8: mode1(K=0)` - set update mode for next command only\n */\n\nexport const LIGHT_PROG_SET_ALL = 0xd0\nexport const LIGHT_PROG_FADE = 0xd1\nexport const LIGHT_PROG_FADE_HSV = 0xd2\nexport const LIGHT_PROG_ROTATE_FWD = 0xd3\nexport const LIGHT_PROG_ROTATE_BACK = 0xd4\nexport const LIGHT_PROG_SHOW = 0xd5\nexport const LIGHT_PROG_RANGE = 0xd6\nexport const LIGHT_PROG_MODE = 0xd7\nexport const LIGHT_PROG_MODE1 = 0xd8\n\nexport const LIGHT_MODE_REPLACE = 0x00\nexport const LIGHT_MODE_ADD_RGB = 0x01\nexport const LIGHT_MODE_SUBTRACT_RGB = 0x02\nexport const LIGHT_MODE_MULTIPLY_RGB = 0x03\nexport const LIGHT_MODE_LAST = 0x03\n\nexport const LIGHT_PROG_COLN = 0xc0\nexport const LIGHT_PROG_COL1 = 0xc1\nexport const LIGHT_PROG_COL2 = 0xc2\nexport const LIGHT_PROG_COL3 = 0xc3\n\nexport const LIGHT_PROG_COL1_SET = 0xcf\n","import { MatrixKeypadReg, SRV_MATRIX_KEYPAD } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\nexport default class MatrixKeypadServer extends SensorServer<[[number][]]> {\n    readonly rows: JDRegisterServer<[number]>\n    readonly columns: JDRegisterServer<[number]>\n    readonly labels: JDRegisterServer<[[string][]]>\n\n    constructor(columns: number, rows: number, labels?: string[]) {\n        super(SRV_MATRIX_KEYPAD, {\n            readingValues: [[]],\n        })\n\n        this.columns = this.addRegister(MatrixKeypadReg.Columns, [columns])\n        this.rows = this.addRegister(MatrixKeypadReg.Rows, [rows])\n        this.labels = this.addRegister(\n            MatrixKeypadReg.Labels,\n            labels ? [labels.map(l => [l])] : undefined\n        )\n    }\n\n    async down(button: number) {\n        const [values] = this.reading.values()\n        const valuei = values.findIndex(v => v[0] === button)\n        if (valuei < 0) {\n            values.push([button])\n            this.reading.setValues([values])\n        }\n    }\n\n    async up(button: number) {\n        const [values] = this.reading.values()\n        const valuei = values.findIndex(v => v[0] === button)\n        if (valuei > -1) {\n            values.splice(valuei, 1)\n            this.reading.setValues([values])\n        }\n    }\n}\n","import { MotorReg, SRV_MOTOR } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class MotorServer extends JDServiceServer {\n    readonly duty: JDRegisterServer<[number]>\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly loadTorque: JDRegisterServer<[number]>\n    readonly loadSpeed: JDRegisterServer<[number]>\n\n    constructor(instanceName?: string) {\n        super(SRV_MOTOR, { instanceName })\n\n        this.duty = this.addRegister<[number]>(MotorReg.Duty, [0])\n        this.enabled = this.addRegister<[boolean]>(MotorReg.Enabled, [false])\n        this.loadTorque = this.addRegister<[number]>(MotorReg.LoadTorque)\n        this.loadSpeed = this.addRegister<[number]>(MotorReg.LoadSpeed)\n    }\n}\n","import { JDClient } from \"../jdom/client\"\nimport { CHANGE, SystemEvent, SystemReadingThreshold } from \"../jdom/constants\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class LevelDetector extends JDClient {\n    private _state: number\n\n    constructor(readonly service: AnalogSensorServer) {\n        super()\n        this.reset()\n        if (this.service.inactiveThreshold)\n            this.mount(\n                this.service.inactiveThreshold.subscribe(\n                    CHANGE,\n                    this.reset.bind(this)\n                )\n            )\n        if (this.service.activeThreshold)\n            this.mount(\n                this.service.activeThreshold.subscribe(\n                    CHANGE,\n                    this.reset.bind(this)\n                )\n            )\n        this.mount(\n            this.service.reading.subscribe(CHANGE, this.update.bind(this))\n        )\n    }\n\n    reset() {\n        this._state = SystemReadingThreshold.Neutral\n    }\n\n    update() {\n        const [level] = this.service.reading.values()\n        if (level === undefined) {\n            this.setState(SystemReadingThreshold.Neutral)\n            return\n        }\n\n        const [active] = this.service.activeThreshold?.values()\n        if (active !== undefined && level >= active) {\n            this.setState(SystemReadingThreshold.Active)\n            return\n        }\n\n        const [inactive] = this.service.inactiveThreshold?.values()\n        if (inactive !== undefined && level <= inactive) {\n            this.setState(SystemReadingThreshold.Inactive)\n            return\n        }\n\n        // neutral\n        this.setState(SystemReadingThreshold.Neutral)\n    }\n\n    private setState(state: number) {\n        if (state === this._state) return\n\n        this._state = state\n        switch (state) {\n            case SystemReadingThreshold.Active:\n                this.service.sendEvent(SystemEvent.Active)\n                break\n            case SystemReadingThreshold.Inactive:\n                this.service.sendEvent(SystemEvent.Inactive)\n                break\n            case SystemReadingThreshold.Neutral:\n                this.service.sendEvent(SystemEvent.Neutral)\n                break\n        }\n    }\n}\n","import { SystemReg } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport LevelDetector from \"./leveldetector\"\nimport SensorServer, { SensorServiceOptions } from \"./sensorserver\"\n\n/**\n * Creation options for AnalogSensorServer\n * @category Servers\n * @internal\n */\nexport interface AnalogSensorServerOptions\n    extends SensorServiceOptions<[number]> {\n    minReading?: number\n    maxReading?: number\n    inactiveThreshold?: number\n    activeThreshold?: number\n    readingResolution?: number\n}\n\n/**\n * Base class for analog sensor servers\n * @category Servers\n */\nexport default class AnalogSensorServer extends SensorServer<[number]> {\n    readonly inactiveThreshold: JDRegisterServer<[number]>\n    readonly activeThreshold: JDRegisterServer<[number]>\n    readonly levelDetector: LevelDetector\n\n    constructor(serviceClass: number, options?: AnalogSensorServerOptions) {\n        super(serviceClass, options)\n        const {\n            minReading,\n            maxReading,\n            inactiveThreshold,\n            activeThreshold,\n            readingResolution,\n        } = options || {}\n        if (minReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MinReading, [minReading])\n        if (maxReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MaxReading, [maxReading])\n        if (readingResolution !== undefined)\n            this.addRegister<[number]>(SystemReg.ReadingResolution, [\n                readingResolution,\n            ])\n        if (\n            inactiveThreshold !== undefined ||\n            this.activeThreshold !== undefined\n        ) {\n            if (inactiveThreshold !== undefined)\n                this.inactiveThreshold = this.addRegister<[number]>(\n                    SystemReg.InactiveThreshold,\n                    [inactiveThreshold]\n                )\n            if (activeThreshold !== undefined)\n                this.activeThreshold = this.addRegister<[number]>(\n                    SystemReg.ActiveThreshold,\n                    [activeThreshold]\n                )\n            this.levelDetector = new LevelDetector(this)\n        }\n    }\n}\n","import { CHANGE, RainGaugeReg, SRV_RAIN_GAUGE } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class RainGaugeServer extends AnalogSensorServer {\n    readonly precipitationPrecision: JDRegisterServer<[number]>\n    private _tiltCount = 0\n    private _level = 0\n\n    constructor(options?: { bucketSize?: number }) {\n        super(SRV_RAIN_GAUGE, {\n            readingValues: [0],\n        })\n        const { bucketSize } = options || {}\n\n        this.precipitationPrecision = this.addRegister<[number]>(\n            RainGaugeReg.PrecipitationPrecision,\n            [bucketSize || 0.2794]\n        )\n        this._level = 0\n    }\n\n    get tiltCount() {\n        return this._tiltCount\n    }\n\n    get level() {\n        return this._level\n    }\n\n    async rain(fraction: number) {\n        if (!fraction) return\n\n        this._level += fraction\n        if (this._level >= 0.7) await this.tilt()\n        else this.emit(CHANGE)\n    }\n\n    async tilt() {\n        this._tiltCount++\n        this._level = 0\n\n        const [bucket] = this.precipitationPrecision.values()\n        const [current] = this.reading.values()\n        this.reading.setValues([current + (bucket || 0.2)])\n\n        this.emit(CHANGE)\n    }\n}\n","import {\n    ReflectedLightReg,\n    ReflectedLightVariant,\n    SRV_REFLECTED_LIGHT,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class ReflectedLightServer extends AnalogSensorServer {\n    readonly variant: JDRegisterServer<[ReflectedLightVariant]>\n\n    constructor(options?: { variant?: ReflectedLightVariant }) {\n        super(SRV_REFLECTED_LIGHT, { readingValues: [0] })\n        const { variant } = options || {}\n\n        this.variant = this.addRegister<[ReflectedLightVariant]>(\n            ReflectedLightReg.Variant,\n            [variant || ReflectedLightVariant.InfraredDigital]\n        )\n    }\n}\n","import { RotaryEncoderReg, SRV_ROTARY_ENCODER } from \"../jdom/constants\"\nimport SensorServer from \"./sensorserver\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\n\nexport default class RotaryEncoderServer extends SensorServer<[number]> {\n    readonly clicksPerTurn: JDRegisterServer<[number]>\n\n    constructor() {\n        super(SRV_ROTARY_ENCODER, { readingValues: [0], streamingInterval: 50 })\n\n        this.clicksPerTurn = this.addRegister<[number]>(\n            RotaryEncoderReg.ClicksPerTurn,\n            [12]\n        )\n    }\n\n    async rotate(clicks: number) {\n        const [position] = this.reading.values()\n        this.reading.setValues([position + (clicks >> 0)])\n    }\n}\n","import {\n    CHANGE,\n    PACKET_DATA_NORMALIZE,\n    ServoReg,\n    SRV_SERVO,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class ServoServer extends JDServiceServer {\n    readonly angle: JDRegisterServer<[number]>\n    readonly currentAngle: JDRegisterServer<[number]>\n    readonly offset: JDRegisterServer<[number]>\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly minAngle: JDRegisterServer<[number]>\n    readonly maxAngle: JDRegisterServer<[number]>\n    readonly responseSpeed: JDRegisterServer<[number]>\n    readonly stallTorque: JDRegisterServer<[number]>\n\n    constructor(\n        options?: {\n            minAngle?: number\n            maxAngle?: number\n            responseSpeed?: number\n            stallTorque?: number\n        } & JDServerOptions\n    ) {\n        super(SRV_SERVO, options)\n        const {\n            minAngle = -90,\n            maxAngle = 90,\n            responseSpeed,\n            stallTorque,\n        } = options || {}\n\n        this.angle = this.addRegister<[number]>(ServoReg.Angle, [0])\n        this.currentAngle = this.addRegister<[number]>(ServoReg.CurrentAngle, [\n            0,\n        ])\n        this.enabled = this.addRegister<[boolean]>(ServoReg.Enabled, [false])\n        this.minAngle = this.addRegister<[number]>(\n            ServoReg.MinAngle,\n            minAngle !== undefined ? [minAngle] : undefined\n        )\n        this.maxAngle = this.addRegister<[number]>(\n            ServoReg.MaxAngle,\n            maxAngle !== undefined ? [maxAngle] : undefined\n        )\n        this.offset = this.addRegister<[number]>(ServoReg.Offset, [0])\n        this.responseSpeed = this.addRegister<[number]>(\n            ServoReg.ResponseSpeed,\n            responseSpeed !== undefined ? [responseSpeed] : undefined\n        )\n        this.stallTorque = this.addRegister<[number]>(\n            ServoReg.StallTorque,\n            stallTorque !== undefined ? [stallTorque] : undefined\n        )\n\n        this.angle.on(PACKET_DATA_NORMALIZE, (values: [number]) => {\n            let angle = values[0]\n            const [minAngle] = this.minAngle.values()\n            const [maxAngle] = this.maxAngle.values()\n            if (minAngle !== undefined) angle = Math.max(minAngle, angle)\n            if (maxAngle !== undefined) angle = Math.min(maxAngle, angle)\n            values[0] = angle\n        })\n        this.angle.on(CHANGE, () =>\n            this.currentAngle.setValues(this.angle.values())\n        )\n    }\n}\n","import { SettingsCmd, SettingsEvent, SRV_SETTINGS } from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { fromHex, toHex } from \"../jdom/utils\"\n\nexport default class SettingsServer extends JDServiceServer {\n    private settings: Record<string, string>\n\n    constructor(readonly storageKey?: string) {\n        super(SRV_SETTINGS)\n\n        this.addCommand(SettingsCmd.Get, this.handleGet.bind(this))\n        this.addCommand(SettingsCmd.Set, this.handleSet.bind(this))\n        this.addCommand(SettingsCmd.Delete, this.handleDelete.bind(this))\n        this.addCommand(SettingsCmd.ListKeys, this.handleListKeys.bind(this))\n        this.addCommand(SettingsCmd.List, this.handleList.bind(this))\n        this.addCommand(SettingsCmd.Clear, this.handleClear.bind(this))\n\n        this.settings = this.read()\n    }\n\n    private getPayload(key: string) {\n        const value = this.settings[key]\n        const secret = /^$/.test(key)\n\n        let payload: Uint8Array\n        if (value === undefined) {\n            payload = new Uint8Array(0)\n        } else if (secret) {\n            const payload = new Uint8Array(1)\n            payload[0] = 0\n        } else {\n            payload = fromHex(value)\n        }\n\n        return payload\n    }\n\n    private async handleGet(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\")\n        const payload = this.getPayload(key)\n        const resp = Packet.jdpacked<[string, Uint8Array]>(\n            SettingsCmd.Get,\n            \"z b\",\n            [key, payload]\n        )\n        await this.sendPacketAsync(resp)\n    }\n\n    private async handleSet(pkt: Packet) {\n        const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\")\n        console.log({ cmd: \"set\", key, value })\n        this.settings[key] = toHex(value)\n        await this.save()\n    }\n\n    private async handleDelete(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\")\n        delete this.settings[key]\n        await this.save()\n    }\n\n    private async handleListKeys(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(Object.keys(this.settings), k =>\n            jdpack<[string]>(\"s\", [k])\n        )\n    }\n\n    private async handleList(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(Object.keys(this.settings), k => {\n            const payload = this.getPayload(k)\n            return jdpack<[string, Uint8Array]>(\"z b\", [k, payload])\n        })\n    }\n\n    private handleClear() {\n        this.settings = {}\n        this.save()\n    }\n\n    private read(): Record<string, string> {\n        if (!this.storageKey) return {}\n\n        try {\n            const payload =\n                typeof window !== \"undefined\" &&\n                window.localStorage.getItem(this.storageKey)\n            return JSON.parse(payload || \"{}\")\n        } catch (e) {\n            console.log(e)\n            return {}\n        }\n    }\n\n    private async save() {\n        if (this.storageKey) {\n            try {\n                if (typeof window !== \"undefined\")\n                    window.localStorage.setItem(\n                        this.storageKey,\n                        JSON.stringify(this.settings)\n                    )\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        await this.sendEvent(SettingsEvent.Change)\n    }\n}\n","import {\n    SpeechSynthesisCmd,\n    SpeechSynthesisReg,\n    SRV_SPEECH_SYNTHESIS,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class SpeechSynthesisServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly pitch: JDRegisterServer<[number]>\n    readonly rate: JDRegisterServer<[number]>\n    readonly lang: JDRegisterServer<[string]>\n    readonly volume: JDRegisterServer<[number]>\n\n    readonly synthesis: SpeechSynthesis\n\n    constructor() {\n        super(SRV_SPEECH_SYNTHESIS)\n\n        this.synthesis = typeof window !== \"undefined\" && window.speechSynthesis\n\n        this.enabled = this.addRegister<[boolean]>(SpeechSynthesisReg.Enabled, [\n            !this.synthesis?.paused,\n        ])\n        this.pitch = this.addRegister<[number]>(SpeechSynthesisReg.Pitch, [1])\n        this.rate = this.addRegister<[number]>(SpeechSynthesisReg.Rate, [1])\n        this.lang = this.addRegister<[string]>(SpeechSynthesisReg.Lang, [\"\"])\n        this.volume = this.addRegister<[number]>(SpeechSynthesisReg.Volume, [\n            0.5,\n        ])\n\n        this.addCommand(SpeechSynthesisCmd.Speak, this.handleSpeak.bind(this))\n        this.addCommand(SpeechSynthesisCmd.Cancel, this.handleCancel.bind(this))\n    }\n\n    private handleSpeak(pkt: Packet) {\n        const [text] = pkt.jdunpack(\"s\")\n        if (!this.synthesis || !text) return\n\n        const [pitch] = this.pitch.values()\n        const [rate] = this.pitch.values()\n        const [lang] = this.lang.values()\n        const [volume] = this.volume.values()\n\n        const utterance = new SpeechSynthesisUtterance(text)\n        utterance.pitch = pitch\n        utterance.rate = rate\n        utterance.lang = lang\n        utterance.volume = volume\n\n        this.synthesis.speak(utterance)\n    }\n\n    private handleCancel(pkt: Packet) {\n        this.synthesis?.cancel()\n    }\n}\n","import {\n    SRV_SWITCH,\n    SwitchEvent,\n    SwitchReg,\n    SwitchVariant,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport SensorServer from \"./sensorserver\"\n\nexport default class SwitchServer extends SensorServer<[boolean]> {\n    readonly variant: JDRegisterServer<[SwitchVariant]>\n    readonly autoOffDelay: JDRegisterServer<[number]>\n    private autoOffInterval: any\n\n    constructor(options?: { autoOffDelay?: number; variant?: SwitchVariant }) {\n        super(SRV_SWITCH, { readingValues: [false], streamingInterval: 50 })\n        const { autoOffDelay, variant } = options || {}\n\n        this.variant = this.addRegister(\n            SwitchReg.Variant,\n            variant !== undefined ? [variant] : undefined\n        )\n        this.autoOffDelay = this.addRegister(\n            SwitchReg.AutoOffDelay,\n            autoOffDelay !== undefined ? [autoOffDelay] : undefined\n        )\n    }\n\n    async toggle() {\n        const [v] = this.reading.values()\n        if (!v) await this.switchOn()\n        else await this.switchOff()\n    }\n\n    async switchOn() {\n        const [v] = this.reading.values()\n        if (!v) {\n            this.reading.setValues([true])\n            await this.sendEvent(SwitchEvent.On)\n            this.startAutoOff()\n        }\n    }\n\n    async switchOff() {\n        const [v] = this.reading.values()\n        if (v) {\n            this.reading.setValues([false])\n            await this.sendEvent(SwitchEvent.Off)\n            this.stopAutoOff()\n        }\n    }\n\n    private startAutoOff() {\n        this.stopAutoOff()\n        if (this.autoOffDelay.data !== undefined) {\n            const [delay] = this.autoOffDelay.values()\n            this.autoOffInterval = setTimeout(this.switchOn.bind(this), delay)\n        }\n    }\n\n    private stopAutoOff() {\n        if (this.autoOffInterval) {\n            clearTimeout(this.autoOffInterval)\n            this.autoOffInterval = undefined\n        }\n    }\n}\n","import { SRV_TRAFFIC_LIGHT, TrafficLightReg } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class TrafficLightServer extends JDServiceServer {\n    readonly red: JDRegisterServer<[boolean]>\n    readonly orange: JDRegisterServer<[boolean]>\n    readonly green: JDRegisterServer<[boolean]>\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_TRAFFIC_LIGHT, options)\n\n        this.red = this.addRegister(TrafficLightReg.Red, [true])\n        this.orange = this.addRegister(TrafficLightReg.Orange, [false])\n        this.green = this.addRegister(TrafficLightReg.Green, [false])\n    }\n}\n","import {\n    LedCmd,\n    LedReg,\n    LedVariant,\n    REFRESH,\n    REGISTER_PRE_GET,\n    SRV_LED,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport interface LEDServiceOptions extends JDServerOptions {\n    ledCount?: number\n    variant?: LedVariant\n    luminousIntensity?: number\n    waveLength?: number\n    maxPower?: number\n    color?: [number, number, number]\n}\n\nexport default class LEDServer extends JDServiceServer {\n    readonly color: JDRegisterServer<[number, number, number]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly ledCount: JDRegisterServer<[number]>\n    readonly luminousIntensity: JDRegisterServer<[number]>\n    readonly waveLength: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[LedVariant]>\n\n    private _animation: {\n        red: number\n        green: number\n        blue: number\n        toRed: number\n        toGreen: number\n        toBlue: number\n        speed: number\n        start: number\n    }\n\n    constructor(options?: LEDServiceOptions) {\n        super(SRV_LED, options)\n        const {\n            ledCount = 1,\n            variant = LedVariant.ThroughHole,\n            luminousIntensity,\n            waveLength,\n            color = [255, 0, 0],\n            maxPower = 200,\n        } = options || {}\n\n        this.color = this.addRegister<[number, number, number]>(\n            LedReg.Color,\n            color\n        )\n        this.color.on(REGISTER_PRE_GET, this.updateColor.bind(this))\n        this.maxPower = this.addRegister(LedReg.MaxPower, [maxPower])\n        this.ledCount = this.addRegister(LedReg.LedCount, [ledCount])\n        if (luminousIntensity !== undefined)\n            this.luminousIntensity = this.addRegister(\n                LedReg.LuminousIntensity,\n                [luminousIntensity]\n            )\n        if (waveLength !== undefined)\n            this.waveLength = this.addRegister(LedReg.WaveLength, [waveLength])\n        this.variant = this.addRegister(LedReg.Variant, [variant])\n\n        this.addCommand(LedCmd.Animate, this.handleAnimate.bind(this))\n        // animation\n        this.on(REFRESH, this.updateColor.bind(this))\n    }\n\n    private updateColor() {\n        if (!this._animation) return // nothing to do\n\n        // compute new color\n        const { red, green, blue, toRed, toGreen, toBlue, speed, start } =\n            this._animation\n        const now = this.device.bus.timestamp\n        const elapsed = now - start\n        // see control.md\n        const total = ((512 / speed) * 100) | 0\n        const progress = elapsed / total // may overshoot\n        const alpha = Math.min(1, progress)\n        const oneAlpha = 1 - alpha\n\n        const newRed = (red * oneAlpha + alpha * toRed) | 0\n        const newGreen = (green * oneAlpha + alpha * toGreen) | 0\n        const newBlue = (blue * oneAlpha + alpha * toBlue) | 0\n\n        this.color.setValues([newRed, newGreen, newBlue])\n        // clear animation when done\n        if (progress > 1) this._animation = undefined\n    }\n\n    private handleAnimate(pkt: Packet) {\n        const [toRed, toGreen, toBlue, speed] =\n            pkt.jdunpack<[number, number, number, number]>(\"u8 u8 u8 u8\")\n\n        if (speed == 0) {\n            this.color.setValues([toRed, toGreen, toBlue])\n            this._animation = undefined\n        } else {\n            const [red, green, blue] = this.color.values()\n            this._animation = {\n                red,\n                green,\n                blue,\n                toRed,\n                toGreen,\n                toBlue,\n                speed,\n                start: this.device.bus.timestamp,\n            }\n        }\n    }\n}\n","import {\n    SoundPlayerCmd,\n    SoundPlayerReg,\n    SRV_SOUND_PLAYER,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport type SoundPlayerSound = [number, string]\n\nexport default class SoundPlayerServer extends JDServiceServer {\n    readonly volume: JDRegisterServer<[number]>\n    onPlay?: (name: string) => void\n    constructor(private readonly sounds: SoundPlayerSound[]) {\n        super(SRV_SOUND_PLAYER)\n\n        this.volume = this.addRegister(SoundPlayerReg.Volume, [0.5])\n        this.addCommand(\n            SoundPlayerCmd.ListSounds,\n            this.handleListSounds.bind(this)\n        )\n        this.addCommand(SoundPlayerCmd.Play, this.handlePlay.bind(this))\n    }\n\n    private async handleListSounds(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        await pipe.respondForEach(this.sounds, sound =>\n            jdpack<[number, string]>(\"u32 s\", sound)\n        )\n    }\n\n    private handlePlay(pkt: Packet) {\n        const [name] = pkt.jdunpack(\"s\")\n        this.onPlay?.(name)\n    }\n}\n","import {\n    REGISTER_PRE_GET,\n    RngReg,\n    RngVariant,\n    SRV_RNG,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class RandomNumberGeneratorServer extends JDServiceServer {\n    readonly reading: JDRegisterServer<[Uint8Array]>\n    constructor() {\n        super(SRV_RNG, {\n            variant: RngVariant.WebCrypto,\n        })\n\n        this.reading = this.addRegister(RngReg.Random, [new Uint8Array(64)])\n        this.reading.on(REGISTER_PRE_GET, this.handleRefresh.bind(this))\n    }\n\n    private handleRefresh() {\n        // generate new data\n        const data = new Uint8Array(64)\n        if (typeof window !== \"undefined\") window.crypto.getRandomValues(data)\n        this.reading.setValues([data], true)\n    }\n}\n","import {\n    CHANGE,\n    CompassReg,\n    SRV_COMPASS,\n    SystemStatusCodes,\n} from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport AnalogSensorServer from \"./analogsensorserver\"\n\nexport default class CompassServer extends AnalogSensorServer {\n    private enabled: JDRegisterServer<[boolean]>\n    constructor() {\n        super(SRV_COMPASS, {\n            readingValues: [0],\n            minReading: 0,\n            maxReading: 360,\n            readingError: [1],\n        })\n\n        this.enabled = this.addRegister(CompassReg.Enabled, [false])\n        this.enabled.on(CHANGE, () => {\n            const [status] = this.statusCode.values()\n            if (status === SystemStatusCodes.CalibrationNeeded) {\n                console.log(\"start calibration\")\n                this.calibrate()\n            }\n        })\n    }\n}\n","import { DmxCmd, SRV_DMX } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { toHex } from \"../jdom/utils\"\n\nexport default class DMXServer extends JDServiceServer {\n    constructor() {\n        super(SRV_DMX, {\n            intensityValues: [0],\n        })\n\n        this.addCommand(DmxCmd.Send, this.handleSend.bind(this))\n    }\n\n    private handleSend(pkt: Packet) {\n        // ignore\n        console.log(`dmx send`, toHex(pkt.data))\n    }\n}\n","/**\n * @internal\n */\nexport function inIFrame() {\n    try {\n        return typeof window !== \"undefined\" && window.self !== window.top\n    } catch (e) {\n        return typeof window !== \"undefined\"\n    }\n}\n","import { getNumber, NumberFormat, setNumber } from \"../jdom/buffer\"\nimport { BitRadioCmd, BitRadioReg, SRV_BIT_RADIO } from \"../jdom/constants\"\nimport { inIFrame } from \"../jdom/iframeclient\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { memcpy, stringToBuffer } from \"../jdom/utils\"\n\n// keep in sync with CODAL\nconst RADIO_MAX_PACKET_SIZE = 32\n//const MAX_FIELD_DOUBLE_NAME_LENGTH = 8;\nconst MAX_PAYLOAD_LENGTH = 20\nconst PACKET_PREFIX_LENGTH = 9\nconst VALUE_PACKET_NAME_LEN_OFFSET = 13\nconst DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET = 17\n\n// Packet Spec:\n// | 0              | 1 ... 4       | 5 ... 8           | 9 ... 28\n// ----------------------------------------------------------------\n// | packet type    | system time   | serial number     | payload\n//\n// Serial number defaults to 0 unless enabled by user\n\n// payload: number (9 ... 12)\nconst PACKET_TYPE_NUMBER = 0\n// payload: number (9 ... 12), name length (13), name (14 ... 26)\nconst PACKET_TYPE_VALUE = 1\n// payload: string length (9), string (10 ... 28)\nconst PACKET_TYPE_STRING = 2\n// payload: buffer length (9), buffer (10 ... 28)\nconst PACKET_TYPE_BUFFER = 3\n// payload: number (9 ... 16)\nconst PACKET_TYPE_DOUBLE = 4\n// payload: number (9 ... 16), name length (17), name (18 ... 26)\nconst PACKET_TYPE_DOUBLE_VALUE = 5\n\nfunction getStringOffset(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return PACKET_PREFIX_LENGTH\n        case PACKET_TYPE_VALUE:\n            return VALUE_PACKET_NAME_LEN_OFFSET\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET\n        default:\n            return undefined\n    }\n}\n\n/*\nfunction getMaxStringLength(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return MAX_PAYLOAD_LENGTH - 2;\n        case PACKET_TYPE_VALUE:\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return MAX_FIELD_DOUBLE_NAME_LENGTH;\n        default:\n            return undefined;\n    }\n}\n*/\n\nfunction truncateString(str: string) {\n    // TODO\n    return str\n}\n\nclass RadioPacket {\n    public static getPacket(data: Uint8Array) {\n        if (!data) return undefined\n        // last 4 bytes is RSSi\n        return new RadioPacket(data)\n    }\n\n    public static mkPacket(packetType: number) {\n        const res = new RadioPacket()\n        res.data[0] = packetType\n        return res\n    }\n\n    private constructor(public readonly data?: Uint8Array) {\n        if (!data) this.data = new Uint8Array(RADIO_MAX_PACKET_SIZE + 4)\n    }\n\n    get signal() {\n        return getNumber(this.data, NumberFormat.Int32LE, this.data.length - 4)\n    }\n\n    get packetType() {\n        return this.data[0]\n    }\n\n    get time() {\n        return getNumber(this.data, NumberFormat.Int32LE, 1)\n    }\n\n    set time(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 1, val)\n    }\n\n    get serial() {\n        return getNumber(this.data, NumberFormat.Int32LE, 5)\n    }\n\n    set serial(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 5, val)\n    }\n\n    get stringPayload() {\n        const offset = getStringOffset(this.packetType) as number\n        return offset\n            ? this.data.slice(offset + 1, this.data[offset]).toString()\n            : undefined\n    }\n\n    set stringPayload(val: string) {\n        const offset = getStringOffset(this.packetType) as number\n        if (offset) {\n            const buf = stringToBuffer(truncateString(val))\n            this.data[offset] = buf.length\n            memcpy(this.data, offset + 1, buf)\n        }\n    }\n\n    get numberPayload() {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                return getNumber(\n                    this.data,\n                    NumberFormat.Int32LE,\n                    PACKET_PREFIX_LENGTH\n                )\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                return getNumber(\n                    this.data,\n                    NumberFormat.Float64LE,\n                    PACKET_PREFIX_LENGTH\n                )\n        }\n        return undefined\n    }\n\n    set numberPayload(val: number) {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                setNumber(\n                    this.data,\n                    NumberFormat.Int32LE,\n                    PACKET_PREFIX_LENGTH,\n                    val\n                )\n                break\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                setNumber(\n                    this.data,\n                    NumberFormat.Float64LE,\n                    PACKET_PREFIX_LENGTH,\n                    val\n                )\n                break\n        }\n    }\n\n    get bufferPayload() {\n        const len = this.data[PACKET_PREFIX_LENGTH]\n        return this.data.slice(\n            PACKET_PREFIX_LENGTH + 1,\n            PACKET_PREFIX_LENGTH + 1 + len\n        )\n    }\n\n    set bufferPayload(b: Uint8Array) {\n        const len = Math.min(b.length, MAX_PAYLOAD_LENGTH - 1)\n        this.data[PACKET_PREFIX_LENGTH] = len\n        memcpy(this.data, PACKET_PREFIX_LENGTH + 1, b, 0, len)\n    }\n\n    hasString() {\n        return (\n            this.packetType === PACKET_TYPE_STRING ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE\n        )\n    }\n\n    hasNumber() {\n        return (\n            this.packetType === PACKET_TYPE_NUMBER ||\n            this.packetType === PACKET_TYPE_DOUBLE ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE\n        )\n    }\n}\n\n/**\n * A server implementation of the bit:radio service\n * @category Servers\n */\nexport default class BitRadioServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly group: JDRegisterServer<[number]>\n    readonly transmissionPower: JDRegisterServer<[number]>\n    readonly frequencyBand: JDRegisterServer<[number]>\n\n    constructor() {\n        super(SRV_BIT_RADIO)\n\n        this.enabled = this.addRegister<[boolean]>(BitRadioReg.Enabled, [false])\n        this.group = this.addRegister<[number]>(BitRadioReg.Group, [1])\n        this.transmissionPower = this.addRegister<[number]>(\n            BitRadioReg.TransmissionPower,\n            [6]\n        )\n        this.frequencyBand = this.addRegister<[number]>(\n            BitRadioReg.FrequencyBand,\n            [7]\n        )\n\n        this.addCommand(\n            BitRadioCmd.SendString,\n            this.handleSendString.bind(this)\n        )\n        this.addCommand(\n            BitRadioCmd.SendNumber,\n            this.handleSendNumber.bind(this)\n        )\n        this.addCommand(BitRadioCmd.SendValue, this.handleSendValue.bind(this))\n        this.addCommand(\n            BitRadioCmd.SendBuffer,\n            this.handleSendBuffer.bind(this)\n        )\n    }\n\n    private handleSendString(pkt: Packet) {\n        const [message] = pkt.jdunpack<[string]>(\"s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_STRING)\n        rpkt.stringPayload = message\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendNumber(pkt: Packet) {\n        const [value] = pkt.jdunpack<[number, string]>(\"f64\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE)\n        rpkt.numberPayload = value\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendValue(pkt: Packet) {\n        const [value, name] = pkt.jdunpack<[number, string]>(\"f64 s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE_VALUE)\n        rpkt.stringPayload = name\n        rpkt.numberPayload = value\n        this.sendRadioPacket(rpkt)\n    }\n\n    private handleSendBuffer(pkt: Packet) {\n        const { data } = pkt\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_BUFFER)\n        rpkt.bufferPayload = data\n        this.sendRadioPacket(rpkt)\n    }\n\n    private sendRadioPacket(rpkt: RadioPacket) {\n        const [on] = this.enabled.values()\n        if (!on) return // radio is off\n\n        const { bus } = this.device\n        const { timestamp } = bus\n        const [group] = this.group.values()\n        rpkt.time = timestamp\n        rpkt.serial = 0 // todo\n        const msg = {\n            type: \"radiopacket\",\n            broadcast: true,\n            // TODO\n            rssi: -75,\n            // TODO\n            serial: 0,\n            time: bus.timestamp,\n            payload: {\n                groupId: group,\n                type: 0, // buffer\n                bufferData: rpkt.data,\n            },\n        }\n        // send message to parent\n        console.log(`bitradio: send`, msg)\n        if (inIFrame()) {\n            window.parent.postMessage(msg, \"*\")\n        }\n    }\n}\n","import { PowerReg, SRV_POWER } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\nexport default class PowerServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly maxPower: JDRegisterServer<[number]>\n    readonly overload: JDRegisterServer<[boolean]>\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_POWER, options)\n        this.enabled = this.addRegister<[boolean]>(PowerReg.Allowed, [false])\n        this.maxPower = this.addRegister<[number]>(PowerReg.MaxPower, [500])\n        this.overload = this.addRegister<[boolean]>(PowerReg.PowerStatus, [\n            false,\n        ])\n    }\n}\n","import { CapacitiveButtonReg, SRV_CAPACITIVE_BUTTON } from \"../jdom/constants\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport RegisterServer from \"../jdom/servers/registerserver\"\n\nexport default class CapacitiveButtonServer extends JDServiceServer {\n    readonly threshold: RegisterServer<[number]>\n\n    constructor(options?: { threshold?: number } & JDServerOptions) {\n        super(SRV_CAPACITIVE_BUTTON, options)\n        const { threshold = 0.5 } = options || {}\n\n        this.threshold = this.addRegister(CapacitiveButtonReg.Threshold, [\n            threshold,\n        ])\n    }\n}\n","import {\n    CHANGE,\n    HidKeyboardAction,\n    HidKeyboardCmd,\n    HidKeyboardModifiers,\n    SRV_HID_KEYBOARD,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { SMap } from \"../jdom/utils\"\n\nexport default class HIDKeyboardServer extends JDServiceServer {\n    private _lastKey: [number, HidKeyboardModifiers, HidKeyboardAction][]\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_HID_KEYBOARD, options)\n\n        this.addCommand(HidKeyboardCmd.Clear, this.handleClear.bind(this))\n        this.addCommand(HidKeyboardCmd.Key, this.handleKey.bind(this))\n    }\n\n    get lastKey() {\n        return this._lastKey\n    }\n\n    private handleKey(pkt: Packet) {\n        const [rest] =\n            pkt.jdunpack<[[number, HidKeyboardModifiers, HidKeyboardAction][]]>(\n                \"r: u16 u8 u8\"\n            )\n        this._lastKey = rest\n        this.emit(CHANGE)\n    }\n\n    private handleClear() {\n        if (this._lastKey) {\n            this._lastKey = undefined\n            this.emit(CHANGE)\n        }\n    }\n}\n/**\n * @internal\n */\nexport const selectors: SMap<number> = {\n    a: 0x04,\n    b: 0x05,\n    c: 0x06,\n    d: 0x07,\n    e: 0x08,\n    f: 0x09,\n    g: 0x0a,\n    h: 0x0b,\n    i: 0x0c,\n    j: 0x0d,\n    k: 0x0e,\n    l: 0x0f,\n    m: 0x10,\n    n: 0x11,\n    o: 0x12,\n    p: 0x13,\n    q: 0x14,\n    r: 0x15,\n    s: 0x16,\n    t: 0x17,\n    u: 0x18,\n    v: 0x19,\n    w: 0x1a,\n    x: 0x1b,\n    y: 0x1c,\n    z: 0x1d,\n\n    \"1\": 0x1e,\n    \"2\": 0x1f,\n    \"3\": 0x20,\n    \"4\": 0x21,\n    \"5\": 0x22,\n    \"6\": 0x23,\n    \"7\": 0x24,\n    \"8\": 0x25,\n    \"9\": 0x26,\n    \"0\": 0x27,\n\n    \"!\": 0x1e,\n    \"@\": 0x1f,\n    \"#\": 0x20,\n    $: 0x21,\n    \"%\": 0x22,\n    \"^\": 0x23,\n    \"&\": 0x24,\n    \"*\": 0x25,\n    \"(\": 0x26,\n    \")\": 0x27,\n\n    enter: 0x28,\n    escape: 0x29,\n    backspace: 0x2a,\n    tab: 0x2b,\n    space: 0x2c,\n    \" \": 0x2c,\n    \"-\": 0x2d,\n    _: 0x2d,\n    \"=\": 0x2e,\n    \"+\": 0x2e,\n    \"[\": 0x2f,\n    \"{\": 0x2f,\n    \"]\": 0x30,\n    \"}\": 0x30,\n    \"\\\\\": 0x31,\n    \"|\": 0x31,\n    // non-US #\n    \"~\": 0x32,\n    \";\": 0x33,\n    \":\": 0x33,\n    \"'\": 0x34,\n    '\"': 0x34,\n    \"`\": 0x35,\n    \",\": 0x36,\n    //\"<\": 0x37,\n    \".\": 0x37,\n    //\">\": 0x37,\n    \"/\": 0x38,\n    \"?\": 0x38,\n    capslock: 0x39,\n    f1: 0x3a,\n    f2: 0x3b,\n    f3: 0x3c,\n    f4: 0x3d,\n    f5: 0x3e,\n    f6: 0x3f,\n    f7: 0x40,\n    f8: 0x41,\n    f9: 0x42,\n    f10: 0x43,\n    f11: 0x44,\n    f12: 0x45,\n    printscreen: 0x46,\n    scrolllock: 0x47,\n    pause: 0x48,\n    insert: 0x49,\n    home: 0x4a,\n    pageup: 0x4b,\n    delete: 0x4c,\n    end: 0x4d,\n    pagedown: 0x4e,\n    arrowright: 0x4f,\n    arrowleft: 0x50,\n    arrowdown: 0x51,\n    arrowup: 0x52,\n    numlock: 0x53,\n    numpaddivide: 0x54,\n    numpadmultiply: 0x55,\n    numpadsubstract: 0x56,\n    numpadadd: 0x57,\n    numpadenter: 0x58,\n    numpad1: 0x59,\n    numpad2: 0x5a,\n    numpad3: 0x5b,\n    numpad4: 0x5c,\n    numpad5: 0x5d,\n    numpad6: 0x5e,\n    numpad7: 0x5f,\n    numpad8: 0x60,\n    numpad9: 0x61,\n    numpad0: 0x62,\n    numpaddecimal: 0x63,\n    numpadequal: 0x67,\n    f13: 0x68,\n    f14: 0x69,\n    f15: 0x6a,\n    f16: 0x6b,\n    f17: 0x6c,\n    f18: 0x6d,\n    f19: 0x6e,\n    f20: 0x6f,\n    f21: 0x70,\n    f22: 0x71,\n    f23: 0x72,\n    f24: 0x73,\n    execute: 0x74,\n    help: 0x75,\n    contextmenu: 0x76,\n    select: 0x77,\n    stop: 0x78,\n    again: 0x79,\n    undo: 0x7a,\n    cut: 0x7b,\n    copy: 0x7c,\n    paste: 0x7d,\n    find: 0x7e,\n    mute: 0x7f,\n    volumeup: 0x80,\n    volumedown: 0x81,\n\n    numpadcomma: 0x85,\n}\n/**\n * @internal\n */\nexport const reverseSelectors: { [index: number]: string } = Object.keys(\n    selectors\n).reduce((r, key) => {\n    if (!r[selectors[key]]) r[selectors[key]] = key\n    return r\n}, {} as { [index: number]: string })\n\n/**\n * @internal\n */\nexport const modifierCodes = {\n    controlleft: HidKeyboardModifiers.LeftControl,\n    altleft: HidKeyboardModifiers.LeftAlt,\n    shiftleft: HidKeyboardModifiers.LeftShift,\n    metaleft: HidKeyboardModifiers.LeftGUI,\n\n    controlright: HidKeyboardModifiers.RightControl,\n    altright: HidKeyboardModifiers.RightAlt,\n    shiftright: HidKeyboardModifiers.RightShift,\n    metaright: HidKeyboardModifiers.RightGUI,\n}\n\n/**\n * @internal\n */\nexport function renderKeyboardKey(\n    selector: number,\n    modifiers: HidKeyboardModifiers,\n    pretty: boolean\n) {\n    const flags = pretty\n        ? [\n              \"Ctrl\",\n              \"Shift\",\n              \"Alt\",\n              \"Cmd\",\n              \"Ctrl Right\",\n              \"Shift Right\",\n              \"AltRight\",\n              \"Cmd Right\",\n          ]\n        : [\n              \"{controlleft}\",\n              \"{shiftleft}\",\n              \"{altleft}\",\n              \"{metaleft}\",\n              \"{controlright}\",\n              \"{shiftright}\",\n              \"{altright}\",\n              \"{metaright}\",\n          ]\n    const sep = pretty ? \" + \" : \" \"\n    const values = []\n    flags.forEach((flag, i) => {\n        if (modifiers & (1 << i)) {\n            values.push(flag)\n        }\n    })\n    const sel = reverseSelectors[selector]\n    if (sel !== undefined)\n        values.push(\n            pretty\n                ? sel.toUpperCase()\n                : !pretty && sel.length > 1\n                ? `{${sel}}`\n                : sel\n        )\n    const value = values.filter(v => !!v).join(sep)\n    return value\n}\n","import {\n    CHANGE,\n    HidMouseButton,\n    HidMouseButtonEvent,\n    HidMouseCmd,\n    SRV_HID_MOUSE,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\n\n/**\n * @internal\n */\nexport function renderHidMouseButtons(buttons: HidMouseButton) {\n    const btns = [\n        buttons & HidMouseButton.Left ? \"left\" : \"\",\n        buttons & HidMouseButton.Right ? \"right\" : \"\",\n        buttons & HidMouseButton.Middle ? \"middle\" : \"\",\n    ]\n        .filter(b => !!b)\n        .join(\", \")\n    return btns\n}\n\nexport default class HIDMouseServer extends JDServiceServer {\n    private _lastCommand: string\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_HID_MOUSE, options)\n\n        this.addCommand(HidMouseCmd.Move, this.handleMove.bind(this))\n        this.addCommand(HidMouseCmd.SetButton, this.handleSetButton.bind(this))\n        this.addCommand(HidMouseCmd.Wheel, this.handleWheel.bind(this))\n    }\n\n    get lastCommand() {\n        return this._lastCommand\n    }\n\n    setLastCommand(s: string) {\n        if (this._lastCommand !== s) {\n            this._lastCommand = s\n            this.emit(CHANGE)\n        }\n    }\n\n    private handleMove(pkt: Packet) {\n        const [dx, dy, time] =\n            pkt.jdunpack<[number, number, number]>(\"i16 i16 u16\")\n        this.setLastCommand(`move ${dx} ${dy} ${time}`)\n    }\n\n    private handleSetButton(pkt: Packet) {\n        const [buttons, event] =\n            pkt.jdunpack<[HidMouseButton, HidMouseButtonEvent]>(\"u16 u8\")\n        const btns = renderHidMouseButtons(buttons)\n        this.setLastCommand(\n            `set buttons ${btns || \"?\"} ${(\n                HidMouseButtonEvent[event] || \"?\"\n            ).toLocaleLowerCase()}`\n        )\n    }\n\n    private handleWheel(pkt: Packet) {\n        const [dy, time] = pkt.jdunpack<[number, number]>(\"i16 u16\")\n        this.setLastCommand(`wheel ${dy} ${time}`)\n    }\n}\n","import { DimmerReg, DimmerVariant, SRV_DIMMER } from \"../jdom/constants\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class DimmerServer extends JDServiceServer {\n    readonly intensity: JDRegisterServer<[number]>\n    readonly variant: JDRegisterServer<[DimmerVariant]>\n\n    constructor(\n        instanceName?: string,\n        options: { variant?: DimmerVariant } = {}\n    ) {\n        super(SRV_DIMMER, { instanceName })\n\n        const { variant = DimmerVariant.Light } = options\n\n        this.intensity = this.addRegister<[number]>(DimmerReg.Intensity, [0])\n        this.variant = this.addRegister<[number]>(DimmerReg.Variant, [variant])\n    }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n    CHANGE,\n    SRV_AZURE_IOT_HUB_HEALTH,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer, { JDServerOptions } from \"../jdom/servers/serviceserver\"\nimport { delay } from \"../jdom/utils\"\n\nfunction splitPair(kv: string): string[] {\n    const i = kv.indexOf(\"=\")\n    if (i < 0) return [kv, \"\"]\n    else return [kv.slice(0, i), kv.slice(i + 1)]\n}\n\nfunction parsePropertyBag(\n    msg: string,\n    separator?: string\n): Record<string, string> {\n    const r: Record<string, string> = {}\n    msg.split(separator || \"&\")\n        .map(kv => splitPair(kv))\n        .forEach(\n            parts =>\n                (r[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]))\n        )\n    return r\n}\n\nexport default class AzureIoTHubHealthServer extends JDServiceServer {\n    readonly hubName: JDRegisterServer<[string]>\n    readonly hubDeviceId: JDRegisterServer<[string]>\n    readonly connectionStatus: JDRegisterServer<\n        [AzureIotHubHealthConnectionStatus]\n    >\n    connectionString: string\n\n    constructor(options?: JDServerOptions) {\n        super(SRV_AZURE_IOT_HUB_HEALTH, options)\n\n        this.hubName = this.addRegister(AzureIotHubHealthReg.HubName, [\"\"])\n        this.hubDeviceId = this.addRegister(AzureIotHubHealthReg.HubDeviceId, [\n            \"\",\n        ])\n        this.connectionStatus = this.addRegister(\n            AzureIotHubHealthReg.ConnectionStatus,\n            [AzureIotHubHealthConnectionStatus.Connected]\n        )\n        this.connectionStatus.on(CHANGE, () =>\n            this.sendEvent(AzureIotHubHealthEvent.ConnectionStatusChange)\n        )\n        this.connectionString = \"\"\n\n        this.addCommand(\n            AzureIotHubHealthCmd.Connect,\n            this.handleConnect.bind(this)\n        )\n        this.addCommand(\n            AzureIotHubHealthCmd.Disconnect,\n            this.handleDisconnect.bind(this)\n        )\n        this.addCommand(\n            AzureIotHubHealthCmd.SetConnectionString,\n            this.handleSetConnectionString.bind(this)\n        )\n    }\n\n    private async handleConnect() {\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Connecting,\n        ])\n        await delay(500)\n        if (!this.connectionString) this.connectionStatus.setValues([401])\n        else\n            this.connectionStatus.setValues([\n                AzureIotHubHealthConnectionStatus.Connected,\n            ])\n    }\n\n    private async handleDisconnect() {\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Disconnecting,\n        ])\n        await delay(500)\n        this.connectionStatus.setValues([\n            AzureIotHubHealthConnectionStatus.Disconnected,\n        ])\n    }\n\n    private async handleSetConnectionString(pkt: Packet) {\n        const newConnectionString = pkt.stringData\n        if (newConnectionString !== this.connectionString) {\n            await this.handleDisconnect()\n            this.connectionString = newConnectionString\n            const connStringParts = parsePropertyBag(this.connectionString, \";\")\n            this.hubName.setValues([connStringParts[\"HostName\"] || \"\"])\n            this.hubDeviceId.setValues([connStringParts[\"DeviceId\"] || \"\"])\n            // notify connection string changed\n            this.sendEvent(AzureIotHubHealthEvent.ConnectionStatusChange)\n        }\n    }\n}\n","import {\n    CHANGE,\n    REFRESH,\n    SRV_VIBRATION_MOTOR,\n    VibrationMotorCmd,\n    VibrationMotorReg,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\n\nexport default class VibrationMotorServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n\n    static VIBRATE_PATTERN = \"vibratePattern\"\n\n    private _animation: {\n        start: number\n        pattern: [number, number][]\n    }\n    private _animationStep = -1\n\n    constructor() {\n        super(SRV_VIBRATION_MOTOR)\n        this.enabled = this.addRegister<[boolean]>(VibrationMotorReg.Enabled, [\n            false,\n        ])\n        this.addCommand(\n            VibrationMotorCmd.Vibrate,\n            this.handleVibrate.bind(this)\n        )\n        this.on(REFRESH, this.handleRefresh.bind(this))\n    }\n\n    private handleRefresh() {\n        if (!this._animation) return // nothing to do\n\n        const { start, pattern } = this._animation\n        const now = this.device.bus.timestamp\n        const elapsed = now - start\n        let t = 0\n        for (let i = 0; i < pattern.length; ++i) {\n            const [duration, speed] = pattern[i]\n            const dt = duration << 3\n            t += dt\n            if (t - dt <= elapsed && t > elapsed) {\n                // we're playing this note\n                if (this._animationStep !== i) {\n                    this._animationStep = i\n                    this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                        duration,\n                        speed,\n                    })\n                }\n                break\n            }\n        }\n        if (elapsed > t) {\n            // animation finished\n            this._animation = undefined\n            this._animationStep = -1\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration: 0,\n                speed: 0,\n            })\n            this.emit(CHANGE)\n        }\n    }\n\n    private handleVibrate(pkt: Packet) {\n        const [pattern] = pkt.jdunpack<[[number, number][]]>(\"r: u8 u0.8\")\n        this._animation = {\n            start: this.device.bus.timestamp,\n            pattern,\n        }\n        this._animationStep = -1\n        if (pattern.length) {\n            const [duration, speed] = pattern[0]\n            this._animationStep = 0\n            this.emit(VibrationMotorServer.VIBRATE_PATTERN, {\n                duration,\n                speed,\n            })\n        }\n        this.emit(CHANGE)\n    }\n}\n","import {\n    CHANGE,\n    SRV_WIFI,\n    WifiAPFlags,\n    WifiCmd,\n    WifiEvent,\n    WifiReg,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport { Packet } from \"../jdom/packet\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport { randomBytes } from \"../jdom/random\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport { toHex } from \"../jdom/utils\"\n\ninterface ScanResult {\n    flags: WifiAPFlags\n    rssi: number\n    channel: number\n    bssid: Uint8Array\n    ssid: string\n}\n\nexport class WifiServer extends JDServiceServer {\n    readonly enabled: JDRegisterServer<[boolean]>\n    readonly connected: JDRegisterServer<[boolean]>\n    readonly ssid: JDRegisterServer<[string]>\n    readonly ipAddress: JDRegisterServer<[Uint8Array]>\n    readonly eui48: JDRegisterServer<[Uint8Array]>\n\n    private _lastScanResults: ScanResult[] = [\n        {\n            ssid: \"HOME\",\n            bssid: new Uint8Array(0),\n            rssi: -42,\n            channel: 10,\n            flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n        },\n    ]\n    private _knownNetworks: {\n        ssid: string\n        flags: WifiAPFlags\n        priority: number\n        password: string\n    }[] = [\n        {\n            ssid: \"HOME\",\n            password: \"home\",\n            priority: 0,\n            flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n        },\n    ]\n\n    constructor() {\n        super(SRV_WIFI, { intensityValues: [true] })\n\n        this.enabled = this.addRegister(WifiReg.Enabled, [true])\n        this.connected = this.addRegister(WifiReg.Connected, [false])\n        this.ssid = this.addRegister(WifiReg.Ssid, [\"\"])\n        this.ipAddress = this.addRegister<[Uint8Array]>(WifiReg.IpAddress, [\n            new Uint8Array(0),\n        ])\n        this.eui48 = this.addRegister<[Uint8Array]>(WifiReg.Eui48, [\n            randomBytes(6),\n        ])\n\n        this.addCommand(WifiCmd.Scan, this.handleScan.bind(this))\n        this.addCommand(WifiCmd.Reconnect, this.handleReconnect.bind(this))\n        this.addCommand(\n            WifiCmd.LastScanResults,\n            this.handleLastScanResults.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.ListKnownNetworks,\n            this.handleListKnownNetworks.bind(this)\n        )\n        this.addCommand(WifiCmd.AddNetwork, this.handleAddNetwork.bind(this))\n        this.addCommand(\n            WifiCmd.ForgetAllNetworks,\n            this.handleForgetAllNetworks.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.ForgetNetwork,\n            this.handleForgetNetwork.bind(this)\n        )\n        this.addCommand(\n            WifiCmd.SetNetworkPriority,\n            this.handleSetNetworkPriority.bind(this)\n        )\n\n        this.ipAddress.on(CHANGE, this.handleIpChange.bind(this))\n        this.enabled.on(CHANGE, this.handleEnabledChange.bind(this))\n    }\n\n    private handleEnabledChange() {\n        const [enabled] = this.enabled.values()\n        if (!enabled) this.disconnect()\n        else this.connect()\n    }\n\n    private handleIpChange() {\n        const [ip] = this.ipAddress.values()\n        console.debug(`wifi: ip ${toHex(ip)}`)\n        if (ip?.length) this.sendEvent(WifiEvent.GotIp)\n        else this.sendEvent(WifiEvent.LostIp)\n    }\n\n    private get scannedKnownNetworks() {\n        return this._lastScanResults.filter(n =>\n            this._knownNetworks.some(kn => kn.ssid === n.ssid)\n        )\n    }\n\n    private handleReconnect() {\n        console.debug(`wifi: reconnect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n            enabled: this.enabled.values()[0],\n            connected: this.connected.values()[0],\n        })\n        this.disconnect()\n        if (this.scannedKnownNetworks.length) {\n            console.debug(`wifi: reconnect, connect`)\n            this.enabled.setValues([true])\n        }\n    }\n\n    private connect() {\n        console.debug(`wifi: connect`, {\n            scan: this._lastScanResults,\n            known: this._knownNetworks,\n            networks: this.scannedKnownNetworks,\n        })\n        const network = this.scannedKnownNetworks[0]\n        const { ssid } = network || {}\n        this.ssid.setValues([ssid || \"\"])\n        this.enabled.setValues([!!ssid])\n        this.connected.setValues([!!ssid])\n        this.ipAddress.setValues([randomBytes(4)])\n    }\n\n    private disconnect() {\n        console.debug(`wifi: disconnect`)\n        this.ssid.setValues([\"\"])\n        this.connected.setValues([false])\n        this.enabled.setValues([false])\n        this.ipAddress.setValues([new Uint8Array(0)])\n    }\n\n    private scan() {\n        this._lastScanResults = [\n            {\n                ssid: \"HOME\",\n                bssid: new Uint8Array(0),\n                rssi: -42,\n                channel: 10,\n                flags: WifiAPFlags.WPS | WifiAPFlags.IEEE_802_11B,\n            },\n            Math.random() > 0.5 && {\n                ssid: \"OFFICE\",\n                bssid: new Uint8Array(0),\n                rssi: -70,\n                channel: 11,\n                flags: WifiAPFlags.IEEE_802_11N,\n            },\n        ].filter(res => !!res)\n\n        this.sendEvent(\n            WifiEvent.ScanComplete,\n            jdpack<[number, number]>(\"u16 u16\", [\n                this._lastScanResults.length,\n                this.scannedKnownNetworks.length,\n            ])\n        )\n    }\n\n    private handleScan() {\n        this.scan()\n    }\n\n    private async handleLastScanResults(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        console.debug(`list scan results`, this._lastScanResults)\n        await pipe.respondForEach(\n            this._lastScanResults,\n            ({ flags, rssi, channel, bssid, ssid }) =>\n                jdpack<[WifiAPFlags, number, number, Uint8Array, string]>(\n                    \"u32 x[4] i8 u8 b[6] s[33]\",\n                    [flags, rssi, channel, bssid, ssid]\n                )\n        )\n    }\n\n    private async handleListKnownNetworks(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true)\n        console.debug(`list knowns`, this._knownNetworks)\n        await pipe.respondForEach(\n            this._knownNetworks,\n            ({ priority, flags, ssid }) =>\n                jdpack<[number, number, string]>(\"i16 i16 s\", [\n                    priority,\n                    flags,\n                    ssid,\n                ])\n        )\n    }\n\n    private handleAddNetwork(pkt: Packet) {\n        console.debug(`wifi: add network`)\n        const [ssid, password] = pkt.jdunpack<[string, string]>(\"z z\")\n        let network = this._knownNetworks.find(n => n.ssid === ssid)\n        if (!network) {\n            const scanned = this._lastScanResults.find(s => s.ssid === ssid)\n            this._knownNetworks.push(\n                (network = {\n                    ssid,\n                    flags: scanned?.flags,\n                    priority: 0,\n                    password: \"\",\n                })\n            )\n        }\n        network.password = password\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleForgetAllNetworks() {\n        this._knownNetworks = []\n        this.disconnect()\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleForgetNetwork(pkt: Packet) {\n        const [ssid] = pkt.jdunpack<[string]>(\"s\")\n        this._knownNetworks = this._knownNetworks.filter(\n            network => network.ssid !== ssid\n        )\n        const [currentSsid] = this.ssid.values()\n        if (ssid === currentSsid) this.disconnect()\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n\n    private handleSetNetworkPriority(pkt: Packet) {\n        const [priority, ssid] = pkt.jdunpack<[number, string]>(\"i16 s\")\n        const network = this._knownNetworks.find(\n            network => network.ssid === ssid\n        )\n        if (network) network.priority = priority\n        this.sendEvent(WifiEvent.NetworksChanged)\n    }\n}\nexport default WifiServer\n","import JDBus from \"../jdom/bus\"\nimport {\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n    DistanceVariant,\n    LedPixelVariant,\n    PotentiometerVariant,\n    RelayReg,\n    RelayVariant,\n    SRV_ACCELEROMETER,\n    SRV_BAROMETER,\n    SRV_BUTTON,\n    SRV_BUZZER,\n    SRV_CHARACTER_SCREEN,\n    SRV_DISTANCE,\n    SRV_E_CO2,\n    SRV_HUMIDITY,\n    SRV_LED_PIXEL,\n    SRV_MATRIX_KEYPAD,\n    SRV_MOTOR,\n    SRV_POTENTIOMETER,\n    SRV_PROTO_TEST,\n    SRV_RAIN_GAUGE,\n    SRV_RELAY,\n    SRV_JOYSTICK,\n    SRV_ROTARY_ENCODER,\n    SRV_SERVO,\n    SRV_SETTINGS,\n    SRV_SWITCH,\n    SRV_THERMOMETER,\n    SRV_TRAFFIC_LIGHT,\n    SRV_VIBRATION_MOTOR,\n    SRV_TVOC,\n    SRV_WIND_DIRECTION,\n    SRV_WIND_SPEED,\n    SwitchVariant,\n    ThermometerVariant,\n    WindSpeedReg,\n    ECO2Variant,\n    SRV_SPEECH_SYNTHESIS,\n    SRV_SOIL_MOISTURE,\n    JoystickVariant,\n    SRV_REAL_TIME_CLOCK,\n    SRV_ILLUMINANCE,\n    SRV_LIGHT_LEVEL,\n    LightLevelVariant,\n    SRV_UV_INDEX,\n    SRV_REFLECTED_LIGHT,\n    ReflectedLightVariant,\n    SRV_MOTION,\n    SRV_LED,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n    SevenSegmentDisplayReg,\n    SRV_HEART_RATE,\n    HeartRateVariant,\n    LedVariant,\n    SRV_WATER_LEVEL,\n    SRV_SOUND_LEVEL,\n    SRV_COLOR,\n    SRV_SOUND_PLAYER,\n    SRV_PULSE_OXIMETER,\n    SRV_WEIGHT_SCALE,\n    WeightScaleVariant,\n    SRV_DOT_MATRIX,\n    SRV_RNG,\n    SRV_COMPASS,\n    SRV_THERMOCOUPLE,\n    ThermocoupleVariant,\n    SRV_GYROSCOPE,\n    SoundLevelReg,\n    SRV_SOUND_SPECTRUM,\n    SoundSpectrumReg,\n    SRV_SOLENOID,\n    SRV_DMX,\n    SRV_BIT_RADIO,\n    SRV_POWER,\n    CHANGE,\n    JoystickButtons,\n    SRV_HID_KEYBOARD,\n    SRV_HID_MOUSE,\n    //    SRV_AZURE_IOT_HUB,\n    SRV_DIMMER,\n    DimmerVariant,\n    SRV_AZURE_IOT_HUB_HEALTH,\n    DotMatrixVariant,\n    FlexVariant,\n    SRV_FLEX,\n    SRV_WIFI,\n} from \"../jdom/constants\"\nimport JDServerServiceProvider from \"../jdom/servers/serverserviceprovider\"\nimport ProtocolTestServer from \"../jdom/servers/protocoltestserver\"\nimport JDServiceServer from \"../jdom/servers/serviceserver\"\nimport ButtonServer from \"./buttonserver\"\nimport BuzzerServer from \"./buzzerserver\"\nimport CharacterScreenServer from \"./characterscreenserver\"\nimport JoystickServer, {\n    JOYSTICK_ARCADE_BUTTONS,\n    JOYSTICK_DPAD_AB_BUTTONS,\n} from \"./joystickserver\"\nimport DotMatrixServer from \"./dotmatrixserver\"\nimport LedPixelServer from \"./ledpixelserver\"\nimport MatrixKeypadServer from \"./matrixkeypadserver\"\nimport MotorServer from \"./motorserver\"\nimport RainGaugeServer from \"./raingaugeserver\"\nimport RealTimeClockServer from \"./realtimeclockserver\"\nimport ReflectedLightServer from \"./reflectedlightserver\"\nimport RotaryEncoderServer from \"./rotaryencoderserver\"\nimport SensorServer, { SensorServiceOptions } from \"./sensorserver\"\nimport ServoServer from \"./servoserver\"\nimport SettingsServer from \"./settingsserver\"\nimport SpeechSynthesisServer from \"./speechsynthesisserver\"\nimport SwitchServer from \"./switchserver\"\nimport TrafficLightServer from \"./trafficlightserver\"\nimport LEDServer from \"./ledserver\"\nimport { fromHex, hash, stringToUint8Array, toFullHex } from \"../jdom/utils\"\nimport SoundPlayerServer, { SoundPlayerSound } from \"./soundplayerserver\"\nimport AnalogSensorServer, {\n    AnalogSensorServerOptions,\n} from \"./analogsensorserver\"\nimport RandomNumberGeneratorServer from \"./randomnumbergeneratorserver\"\nimport CompassServer from \"./compassserver\"\nimport DMXServer from \"./dmxserver\"\nimport BitRadioServer from \"./bitradioserver\"\nimport PowerServer from \"./powerserver\"\nimport CapacitiveButtonServer from \"./capacitivebuttonserver\"\nimport HIDKeyboardServer from \"./hidkeyboardserver\"\nimport HIDMouseServer from \"./hidmouseserver\"\n//import AzureIoTHubServer from \"./azureiothubserver\"\nimport DimmerServer from \"./dimmerserver\"\nimport AzureIoTHubHealthServer from \"./azureiothubhealthserver\"\nimport JDServiceProvider from \"../jdom/servers/serviceprovider\"\nimport VibrationMotor from \"./vibrationmotorserver\"\nimport WifiServer from \"./wifiserver\"\n\nconst indoorThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"indoor\",\n    readingValues: [21.5],\n    streamingInterval: 1000,\n    minReading: -5,\n    maxReading: 50,\n    readingError: [0.25],\n    variant: ThermometerVariant.Indoor,\n}\nconst outdoorThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"temperature\",\n    readingValues: [21.5],\n    streamingInterval: 60000,\n    minReading: -40,\n    maxReading: 120,\n    readingError: [0.25],\n    variant: ThermometerVariant.Outdoor,\n}\nconst outdoorHumidityOptions: AnalogSensorServerOptions = {\n    instanceName: \"humidity\",\n    streamingInterval: 60000,\n    readingValues: [40],\n    readingError: [0.1],\n}\nconst medicalThermometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"medical\",\n    readingValues: [37.5],\n    streamingInterval: 1000,\n    minReading: 35,\n    maxReading: 42,\n    readingError: [0.5],\n    variant: ThermometerVariant.Body,\n}\nconst barometerOptions: AnalogSensorServerOptions = {\n    instanceName: \"pressure\",\n    readingValues: [1013],\n    readingError: [0.4],\n}\nconst sonarOptions: AnalogSensorServerOptions = {\n    variant: DistanceVariant.Ultrasonic,\n    minReading: 0.02,\n    maxReading: 4,\n    readingValues: [1],\n}\n\nconst SG90_STALL_TORQUE = 1.8\n/**\n * @internal\n */\nexport const SG90_RESPONSE_SPEED = 0.12 // deg/60deg\n\nconst microServoOptions = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n    minAngle: -90,\n    maxAngle: 90,\n}\nconst microServo270Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n    minAngle: -135,\n    maxAngle: 135,\n}\nconst microServo360Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED * 2, // s/60deg\n    minAngle: -180,\n    maxAngle: 180,\n}\nconst windDirectionOptions: AnalogSensorServerOptions = {\n    readingValues: [0],\n    readingError: [5],\n    streamingInterval: 1000,\n}\nconst windSpeedOptions: AnalogSensorServerOptions = {\n    readingValues: [0],\n    readingError: [0.5],\n    streamingInterval: 1000,\n    registerValues: [{ code: WindSpeedReg.MaxWindSpeed, values: [55] }],\n}\nconst eCO2Options: AnalogSensorServerOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.VOC,\n}\nconst CO2Options: AnalogSensorServerOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.NDIR,\n}\nconst tvocOptions: AnalogSensorServerOptions = {\n    readingValues: [500],\n    streamingInterval: 1000,\n}\n\nconst microbitSounds: SoundPlayerSound[] = [\n    [0, \"giggle\"],\n    [0, \"happy\"],\n    [0, \"hello\"],\n    [0, \"mysterious\"],\n    [0, \"sad\"],\n    [0, \"slide\"],\n    [0, \"soaring\"],\n    [0, \"spring\"],\n    [0, \"twinkle\"],\n    [0, \"yawn\"],\n]\nconst soundLevel: AnalogSensorServerOptions = {\n    readingValues: [0],\n    inactiveThreshold: 10,\n    activeThreshold: 70,\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundLevelReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundLevelReg.MaxDecibels,\n            values: [-30],\n        },\n    ],\n}\nconst soundSpectrum: SensorServiceOptions<[Uint8Array]> = {\n    readingValues: [new Uint8Array(0)],\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundSpectrumReg.FftPow2Size,\n            values: [5],\n        },\n        {\n            code: SoundSpectrumReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundSpectrumReg.MaxDecibels,\n            values: [-30],\n        },\n        {\n            code: SoundSpectrumReg.SmoothingTimeConstant,\n            values: [0.8],\n        },\n    ],\n}\n\n/**\n * A factory for instantiation a simulated service server\n * @category Servers\n */\nexport interface ServiceProviderDefinition {\n    /**\n     * Name of the simulated device\n     */\n    name: string\n    /**\n     * List of service classes hosted by the provider\n     */\n    serviceClasses: number[]\n    /**\n     * Factory handler to instantiate simulated servers\n     */\n    services: () => JDServiceServer[]\n    /**\n     * Indicates if the simulated device should support resetId\n     */\n    resetIn?: boolean\n    /**\n     * Custom factory to wrap the services into a service provider\n     */\n    factory?: (services: JDServiceServer[]) => JDServiceProvider\n}\n\nconst _providerDefinitions: ServiceProviderDefinition[] = [\n    {\n        name: \"7-segment (4 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"ff112233\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [4],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"7-segment (8 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"0102040810204080\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [8],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"accelerometer\",\n        serviceClasses: [SRV_ACCELEROMETER],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n                preferredStreamingInterval: 20,\n            }),\n        ],\n    },\n    {\n        name: \"barometer\",\n        serviceClasses: [SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"bitradio\",\n        serviceClasses: [SRV_BIT_RADIO],\n        services: () => [new BitRadioServer()],\n    },\n    {\n        name: \"button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer()],\n    },\n    {\n        name: \"button (2x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServer(\"B0\"), new ButtonServer(\"B1\")],\n    },\n    {\n        name: \"button (4x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`B${i}`)),\n    },\n    {\n        name: \"buzzer\",\n        serviceClasses: [SRV_BUZZER],\n        services: () => [new BuzzerServer()],\n    },\n    {\n        name: \"capacitive button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => {\n            const button = new ButtonServer()\n            const config = new CapacitiveButtonServer()\n            button.threshold = config.threshold\n            return [button, config]\n        },\n    },\n    {\n        name: \"capacitive button (6x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"capacitive button (12x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(12)\n                .fill(0)\n                .map((_, i) => new ButtonServer(`C${i}`, true)),\n    },\n    {\n        name: \"character screen (LDC, 16x2)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({ message: \"hello\\nworld!\" }),\n        ],\n    },\n    {\n        name: \"character screen (OLED, 32x8, RTL)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hello\\nworld!\",\n                columns: 32,\n                rows: 8,\n                variant: CharacterScreenVariant.OLED,\n                textDirection: CharacterScreenTextDirection.RightToLeft,\n            }),\n        ],\n    },\n    {\n        name: \"character screen (Braille, 4x1)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServer({\n                message: \"hi\",\n                columns: 4,\n                rows: 1,\n                variant: CharacterScreenVariant.Braille,\n                textDirection: CharacterScreenTextDirection.LeftToRight,\n            }),\n        ],\n    },\n    {\n        name: \"color\",\n        serviceClasses: [SRV_COLOR],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_COLOR, {\n                readingValues: [0.5, 0, 0.5],\n                preferredStreamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"compass\",\n        serviceClasses: [SRV_COMPASS],\n        services: () => [new CompassServer()],\n    },\n    {\n        name: \"dimmer (fan)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"fan\", { variant: DimmerVariant.Fan }),\n        ],\n    },\n    {\n        name: \"dimmer (light)\",\n        serviceClasses: [SRV_DIMMER],\n        services: () => [\n            new DimmerServer(\"light\", { variant: DimmerVariant.Light }),\n        ],\n    },\n    {\n        name: \"distance (sonar)\",\n        serviceClasses: [SRV_DISTANCE],\n        services: () => [new AnalogSensorServer(SRV_DISTANCE, sonarOptions)],\n    },\n    {\n        name: \"DMX\",\n        serviceClasses: [SRV_DMX],\n        services: () => [new DMXServer()],\n    },\n    {\n        name: \"eCO₂\",\n        serviceClasses: [SRV_E_CO2],\n        services: () => [new AnalogSensorServer(SRV_E_CO2, eCO2Options)],\n    },\n    {\n        name: \"eCO₂ + TVOC\",\n        serviceClasses: [SRV_E_CO2, SRV_TVOC],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, eCO2Options),\n            new AnalogSensorServer(SRV_TVOC, tvocOptions),\n        ],\n    },\n    {\n        name: \"eCO₂ + humidity + thermometer\",\n        serviceClasses: [SRV_E_CO2, SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_E_CO2, CO2Options),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_THERMOMETER, indoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"flex sensor (2.2 inch)\",\n        serviceClasses: [SRV_FLEX],\n        services: () => [\n            new AnalogSensorServer(SRV_FLEX, {\n                variant: FlexVariant.Linear22Inch,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"gyroscope\",\n        serviceClasses: [SRV_GYROSCOPE],\n        services: () => [\n            new SensorServer<[number, number, number]>(SRV_GYROSCOPE, {\n                readingValues: [0, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"heart rate\",\n        serviceClasses: [SRV_HEART_RATE],\n        services: () => [\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 100,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"humidity\",\n        serviceClasses: [SRV_HUMIDITY],\n        services: () => [\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n    },\n    {\n        name: \"humidity + temperature + barometer\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER, SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n            new AnalogSensorServer(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"illuminance\",\n        serviceClasses: [SRV_ILLUMINANCE],\n        services: () => [\n            new AnalogSensorServer(SRV_ILLUMINANCE, {\n                readingValues: [1],\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick + A + B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n                buttonsAvailable: JoystickButtons.A | JoystickButtons.B,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (stick+A)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Thumb,\n                buttonsAvailable: JoystickButtons.A,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (Dpad + all buttons)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_ARCADE_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"joystick (only DPad+A/B)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickServer({\n                variant: JoystickVariant.Gamepad,\n                buttonsAvailable: JOYSTICK_DPAD_AB_BUTTONS,\n            }),\n        ],\n    },\n    {\n        name: \"RGB LED (RGB through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: LedVariant.ThroughHole,\n                ledCount: 1,\n                color: [255, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"LED (5x blue through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServer({\n                variant: LedVariant.ThroughHole,\n                waveLength: 450,\n                ledCount: 5,\n                color: [0, 0, 255],\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (5x5 micro:bit)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(5, 5, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (8x8)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 8, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (11x7)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(11, 7, {\n                brightness: 128,\n                variant: DotMatrixVariant.LED,\n            }),\n        ],\n    },\n    {\n        name: \"Braille matrix (8x4)\",\n        serviceClasses: [SRV_DOT_MATRIX],\n        services: () => [\n            new DotMatrixServer(8, 4, {\n                variant: DotMatrixVariant.Braille,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 10\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 10,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 12\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 12,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 16\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 24\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 24,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel jewel 7\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 7,\n                variant: LedPixelVariant.Jewel,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel stick 8\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 8,\n                variant: LedPixelVariant.Stick,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 30\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 1000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 60\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 60,\n                maxPower: 2000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 150\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 150,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 300\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 300,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (4x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (8x8)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (16x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServer({\n                numPixels: 64,\n                numColumns: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"light level (photo-resistor)\",\n        serviceClasses: [SRV_LIGHT_LEVEL],\n        services: () => [\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.PhotoResistor,\n            }),\n        ],\n    },\n    {\n        name: \"line tracker (digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [new ReflectedLightServer()],\n    },\n    {\n        name: \"line tracker (2x digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer(),\n            new ReflectedLightServer(),\n        ],\n    },\n    {\n        name: \"line tracker (analog)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServer({\n                variant: ReflectedLightVariant.InfraredAnalog,\n            }),\n        ],\n    },\n    {\n        name: \"matrix keypad (3x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(3, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"*\",\n                \"0\",\n                \"#\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (4x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServer(4, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"A\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"B\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"C\",\n                \"*\",\n                \"0\",\n                \"#\",\n                \"D\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (1x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [new MatrixKeypadServer(4, 1, [\"1\", \"2\", \"3\", \"4\"])],\n    },\n    {\n        name: \"motion\",\n        serviceClasses: [SRV_MOTION],\n        services: () => [\n            new SensorServer(SRV_MOTION, {\n                readingValues: [false],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"motor\",\n        serviceClasses: [SRV_MOTOR],\n        services: () => [new MotorServer()],\n        resetIn: true,\n    },\n    {\n        name: \"protocol test\",\n        serviceClasses: [SRV_PROTO_TEST],\n        services: () => [new ProtocolTestServer()],\n    },\n    {\n        name: \"pulse oxymeter\",\n        serviceClasses: [SRV_PULSE_OXIMETER],\n        services: () => [\n            new SensorServer<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"oxymeter + heart beat\",\n        serviceClasses: [SRV_PULSE_OXIMETER, SRV_HEART_RATE],\n        services: () => [\n            new SensorServer<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n            new AnalogSensorServer(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 1000,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"power\",\n        serviceClasses: [SRV_POWER],\n        services: () => [new PowerServer()],\n    },\n    {\n        name: \"RNG (random number generator)\",\n        serviceClasses: [SRV_RNG],\n        services: () => [new RandomNumberGeneratorServer()],\n    },\n    {\n        name: \"rain gauge\",\n        serviceClasses: [SRV_RAIN_GAUGE],\n        services: () => [new RainGaugeServer()],\n    },\n    {\n        name: \"real time clock\",\n        serviceClasses: [SRV_REAL_TIME_CLOCK],\n        services: () => [new RealTimeClockServer()],\n    },\n    {\n        name: \"relay (EM/10A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () => [\n            new JDServiceServer(SRV_RELAY, {\n                intensityValues: [false],\n                isActive: values => !!values?.[0],\n                variant: RelayVariant.Electromechanical,\n                registerValues: [\n                    {\n                        code: RelayReg.MaxSwitchingCurrent,\n                        values: [10],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"relay 4x (SSR/5A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(\n                    () =>\n                        new JDServiceServer(SRV_RELAY, {\n                            intensityValues: [false],\n                            isActive: values => !!values?.[0],\n                            variant: RelayVariant.SolidState,\n                            registerValues: [\n                                {\n                                    code: RelayReg.MaxSwitchingCurrent,\n                                    values: [5],\n                                },\n                            ],\n                        })\n                ),\n    },\n    {\n        name: \"rotary encoder\",\n        serviceClasses: [SRV_ROTARY_ENCODER],\n        services: () => [new RotaryEncoderServer()],\n    },\n    {\n        name: \"rotary encoder + button\",\n        serviceClasses: [SRV_ROTARY_ENCODER, SRV_BUTTON],\n        services: () => [new RotaryEncoderServer(), new ButtonServer()],\n    },\n    {\n        name: \"rotary potentiometer\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Rotary,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"servo\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServoOptions)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (270°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo270Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo (360°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServer(microServo360Options)],\n        resetIn: true,\n    },\n    {\n        name: \"servo x 2\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(2)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 4\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 6\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"servo x 16\",\n        serviceClasses: [SRV_SERVO],\n        resetIn: true,\n        services: () =>\n            Array(16)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new ServoServer({\n                            ...microServoOptions,\n                            instanceName: `S${i}`,\n                        })\n                ),\n    },\n    {\n        name: \"settings\",\n        serviceClasses: [SRV_SETTINGS],\n        services: () => [new SettingsServer()],\n    },\n    {\n        name: \"slider (potentiometer)\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Slider,\n            }),\n        ],\n    },\n    {\n        name: \"soil moisture\",\n        serviceClasses: [SRV_SOIL_MOISTURE],\n        services: () => [\n            new AnalogSensorServer(SRV_SOIL_MOISTURE, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"speech synthesis\",\n        serviceClasses: [SRV_SPEECH_SYNTHESIS],\n        services: () => [new SpeechSynthesisServer()],\n    },\n    {\n        name: \"solenoid\",\n        serviceClasses: [SRV_SOLENOID],\n        services: () => [\n            new JDServiceServer(SRV_SOLENOID, {\n                intensityValues: [0],\n            }),\n        ],\n    },\n    {\n        name: \"sound level\",\n        serviceClasses: [SRV_SOUND_LEVEL],\n        services: () => [new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel)],\n    },\n    {\n        name: \"sound spectrum\",\n        serviceClasses: [SRV_SOUND_SPECTRUM],\n        services: () => [\n            new SensorServer<[Uint8Array]>(SRV_SOUND_SPECTRUM, soundSpectrum),\n        ],\n    },\n    {\n        name: \"sound player (micro:bit v2 sounds)\",\n        serviceClasses: [SRV_SOUND_PLAYER],\n        services: () => [new SoundPlayerServer(microbitSounds)],\n    },\n    {\n        name: \"switch (slide)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Slide })],\n    },\n    {\n        name: \"switch (push button)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({ variant: SwitchVariant.PushButton }),\n        ],\n    },\n    {\n        name: \"switch (toggle)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Toggle })],\n    },\n    {\n        name: \"switch (tilt)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [new SwitchServer({ variant: SwitchVariant.Tilt })],\n    },\n    {\n        name: \"switch (proximity)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServer({\n                variant: SwitchVariant.Proximity,\n                autoOffDelay: 30,\n            }),\n        ],\n    },\n    {\n        name: \"thermometer (outdoor)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, outdoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"thermometer (medical)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOMETER, medicalThermometerOptions),\n        ],\n    },\n    {\n        name: \"traffic light\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () => [new TrafficLightServer()],\n    },\n    {\n        name: \"traffic crossing (4 x lights)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(_ => new TrafficLightServer()),\n    },\n    {\n        name: \"thermocouple\",\n        serviceClasses: [SRV_THERMOCOUPLE],\n        services: () => [\n            new AnalogSensorServer(SRV_THERMOCOUPLE, {\n                readingValues: [550],\n                streamingInterval: 1000,\n                minReading: 0,\n                maxReading: 1100,\n                readingError: [2.2],\n                variant: ThermocoupleVariant.TypeB,\n            }),\n        ],\n    },\n    {\n        name: \"TVOC\",\n        serviceClasses: [SRV_TVOC],\n        services: () => [new AnalogSensorServer(SRV_TVOC, tvocOptions)],\n    },\n    {\n        name: \"UV index\",\n        serviceClasses: [SRV_UV_INDEX],\n        services: () => [\n            new AnalogSensorServer(SRV_UV_INDEX, {\n                readingValues: [5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"vibration motor\",\n        serviceClasses: [SRV_VIBRATION_MOTOR],\n        services: () => [new VibrationMotor()],\n    },\n    {\n        name: \"water level\",\n        serviceClasses: [SRV_WATER_LEVEL],\n        services: () => [\n            new AnalogSensorServer(SRV_WATER_LEVEL, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (jewelry)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.001],\n                variant: WeightScaleVariant.Jewelry,\n                maxReading: 0.2,\n                minReading: 0.0005,\n                readingResolution: 0.00001,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (body)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [60],\n                variant: WeightScaleVariant.Body,\n                maxReading: 180,\n                readingResolution: 0.1,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (food)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n                readingValues: [0.5],\n                variant: WeightScaleVariant.Food,\n                maxReading: 6,\n                readingResolution: 0.001,\n            }),\n        ],\n    },\n    {\n        name: \"wind direction\",\n        serviceClasses: [SRV_WIND_DIRECTION],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n        ],\n    },\n    {\n        name: \"wind speed\",\n        serviceClasses: [SRV_WIND_SPEED],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n        ],\n    },\n    {\n        name: \"weather station (wind speed, direction, rain)\",\n        serviceClasses: [SRV_WIND_SPEED, SRV_WIND_DIRECTION, SRV_RAIN_GAUGE],\n        services: () => [\n            new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n            new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n            new RainGaugeServer(),\n        ],\n    },\n    {\n        name: \"chassis (motor x 2 + sonar + light)\",\n        serviceClasses: [SRV_DISTANCE, SRV_LED_PIXEL, SRV_MOTOR],\n        services: () => [\n            new MotorServer(\"L\"),\n            new MotorServer(\"R\"),\n            new AnalogSensorServer(SRV_DISTANCE, sonarOptions),\n            new LedPixelServer({\n                numPixels: 5,\n                variant: LedPixelVariant.Stick,\n                instanceName: \"lights\",\n            }),\n        ],\n    },\n    {\n        name: \"railway crossing (2 x lights, 2 x servos, 1 x buffer)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT, SRV_SERVO, SRV_BUZZER],\n        services: () => [\n            new TrafficLightServer({ instanceName: \"left light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"left arm\",\n            }),\n            new TrafficLightServer({ instanceName: \"right light\" }),\n            new ServoServer({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"right arm\",\n            }),\n            new BuzzerServer({ instanceName: \"bell\" }),\n        ],\n    },\n    {\n        name: \"Arcade controller (6 x buttons)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [\n            new ButtonServer(\"Left\"),\n            new ButtonServer(\"Up\"),\n            new ButtonServer(\"Right\"),\n            new ButtonServer(\"Down\"),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n        ],\n    },\n    {\n        name: \"micro:bit v2\",\n        serviceClasses: [\n            SRV_DOT_MATRIX,\n            SRV_BUTTON,\n            SRV_ACCELEROMETER,\n            SRV_SOUND_LEVEL,\n            SRV_LIGHT_LEVEL,\n            SRV_BUZZER,\n            SRV_SOUND_PLAYER,\n        ],\n        services: () => [\n            new DotMatrixServer(5, 5),\n            new ButtonServer(\"A\"),\n            new ButtonServer(\"B\"),\n            new SensorServer<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n            }),\n            new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel),\n            new SensorServer(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.LEDMatrix,\n            }),\n            new BuzzerServer(),\n            new SoundPlayerServer(microbitSounds),\n        ],\n    },\n    {\n        name: \"power + humidity\",\n        serviceClasses: [SRV_POWER, SRV_HUMIDITY],\n        services: () => [\n            new PowerServer(),\n            new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        ],\n        factory: services => {\n            const dev = new JDServerServiceProvider(\"power+humidity\", [\n                services[0],\n            ])\n            const pwr = dev.service(1) as PowerServer\n            pwr.enabled.on(CHANGE, () => {\n                const enabled = !!pwr.enabled.values()[0]\n                console.log(`power: ${enabled ? \"on\" : \"off\"}`)\n                if (enabled)\n                    // power + rest\n                    dev.updateServices(services)\n                // power only\n                else dev.updateServices([services[0]])\n            })\n            return dev\n        },\n    },\n    {\n        name: \"HID keyboard\",\n        serviceClasses: [SRV_HID_KEYBOARD],\n        services: () => [new HIDKeyboardServer()],\n    },\n    {\n        name: \"HID mouse\",\n        serviceClasses: [SRV_HID_MOUSE],\n        services: () => [new HIDMouseServer()],\n    },\n    /*    \n    {\n        name: \"Azure IoT Hub\",\n        serviceClasses: [SRV_AZURE_IOT_HUB],\n        services: () => [new AzureIoTHubServer()],\n    },\n    */\n    {\n        name: \"WiFi (virtual)\",\n        serviceClasses: [SRV_WIFI],\n        services: () => [new WifiServer()],\n    },\n    {\n        name: \"Azure IoT Hub Health\",\n        serviceClasses: [SRV_AZURE_IOT_HUB_HEALTH],\n        services: () => [new AzureIoTHubHealthServer()],\n    },\n]\n\n/**\n * Gets the list of simulated service providers\n * @category Servers\n */\nexport default function serviceProviderDefinitions() {\n    return _providerDefinitions.slice(0)\n}\n\nfunction stableSimulatorDeviceId(bus: JDBus, template: string): string {\n    const others = bus.serviceProviders().filter(sp => sp.template === template)\n    const word0 = hash(stringToUint8Array(template + others.length), 32)\n    const word1 = hash(stringToUint8Array(template + others.length + 1), 32)\n    const id = toFullHex([word0, word1])\n    return id.slice(2)\n}\n\n/**\n * Instantiates a new service provider instance and adds it to the bus\n * @category Servers\n */\nexport function addServiceProvider(\n    bus: JDBus,\n    definition: ServiceProviderDefinition\n) {\n    const services = definition.services()\n    services.forEach(srv => srv.lock())\n    const deviceId = stableSimulatorDeviceId(bus, definition.name)\n    const options = {\n        resetIn: definition.resetIn,\n        deviceId,\n    }\n    const d =\n        definition.factory?.(services) ||\n        new JDServerServiceProvider(definition.name, services, options)\n    bus.addServiceProvider(d)\n    return d\n}\n\n/**\n * Finds the first service provider that supports the given service class\n * @category Servers\n */\nexport function serviceProviderDefinitionFromServiceClass(\n    serviceClass: number\n) {\n    return _providerDefinitions.find(\n        provider =>\n            provider.serviceClasses.length === 1 &&\n            provider.serviceClasses[0] === serviceClass\n    )\n}\n\n/**\n * Starts a service provider that hosts the given service class.\n * @category Servers\n */\nexport function startServiceProviderFromServiceClass(\n    bus: JDBus,\n    serviceClass: number\n) {\n    const provider = serviceProviderDefinitionFromServiceClass(serviceClass)\n    return addServiceProvider(bus, provider)\n}\n","import JDService from \"./service\"\nimport JDDevice from \"./device\"\nimport JDBus from \"./bus\"\nimport { JDClient } from \"./client\"\n\n/**\n * Base class for service clients\n * @category Clients\n */\nexport class JDServiceClient extends JDClient {\n    constructor(public readonly service: JDService) {\n        super()\n    }\n\n    protected get device(): JDDevice {\n        return this.service.device\n    }\n\n    protected get bus(): JDBus {\n        return this.device.bus\n    }\n\n    toString(): string {\n        return `client of ${this.service}`\n    }\n}\n","import {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../servers/servers\"\nimport {\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    DISCONNECT,\n    ERROR,\n    EVENT,\n    RoleManagerCmd,\n    ROLE_MANAGER_POLL,\n    SELF_ANNOUNCE,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SystemEvent,\n} from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { InPipeReader } from \"../pipes\"\nimport JDService from \"../service\"\nimport { JDServiceClient } from \"../serviceclient\"\nimport {\n    arrayConcatMany,\n    debounceAsync,\n    fromHex,\n    groupBy,\n    toHex,\n} from \"../utils\"\n\n/**\n * A service role assigment\n * @category Clients\n */\nexport interface Role {\n    /**\n     * Identifier of the bound device\n     */\n    deviceId: string\n    /**\n     * Service class bound, for sanity check\n     */\n    serviceClass: number\n    /**\n     * Service index bound\n     */\n    serviceIndex: number\n    /**\n     * Role name\n     */\n    name: string\n}\n\n/**\n * A client for the role manager service\n * @category Clients\n */\nexport class RoleManagerClient extends JDServiceClient {\n    private _roles: Role[] = []\n    private _needRefresh = true\n    private _lastRefreshAttempt = 0\n\n    public readonly startRefreshRoles: () => void\n\n    constructor(service: JDService) {\n        super(service)\n        const changeEvent = service.event(SystemEvent.Change)\n\n        // always debounce refresh roles\n        this.startRefreshRoles = debounceAsync(\n            this.refreshRoles.bind(this),\n            200\n        )\n\n        // role manager emits change events\n        this.mount(changeEvent.subscribe(EVENT, this.handleChange.bind(this)))\n        // assign roles when need device enter the bus\n        this.mount(\n            this.bus.subscribe(DEVICE_ANNOUNCE, this.assignRoles.bind(this))\n        )\n        // unmount when device is removed\n        this.mount(\n            service.device.subscribe(DISCONNECT, () => {\n                if (this.bus.roleManager?.service === this.service)\n                    this.bus.setRoleManagerService(undefined)\n            })\n        )\n        // clear on unmount\n        this.mount(this.clearRoles.bind(this))\n        // retry to get roles on every self-announce\n        this.mount(\n            this.bus.subscribe(\n                SELF_ANNOUNCE,\n                this.handleSelfAnnounce.bind(this)\n            )\n        )\n    }\n\n    private handleSelfAnnounce() {\n        if (\n            this._needRefresh &&\n            this.bus.timestamp - this._lastRefreshAttempt > ROLE_MANAGER_POLL\n        )\n            this.startRefreshRoles()\n    }\n\n    get roles() {\n        return this._roles\n    }\n\n    private async handleChange() {\n        this.startRefreshRoles()\n    }\n\n    private async refreshRoles() {\n        if (this.unmounted) return\n\n        this._needRefresh = false\n        await this.collectRoles()\n\n        if (this.unmounted) return\n        this.assignRoles()\n    }\n\n    private async collectRoles() {\n        this._lastRefreshAttempt = this.bus.timestamp\n        const previousRolesHash = JSON.stringify(this._roles)\n        try {\n            const inp = new InPipeReader(this.bus)\n            await this.service.sendPacketAsync(\n                inp.openCommand(RoleManagerCmd.ListRequiredRoles),\n                true\n            )\n            // collect all roles\n            const roles: Role[] = []\n            for (const buf of await inp.readData(1000)) {\n                const [devidbuf, serviceClass, serviceIndex, name] = jdunpack<\n                    [Uint8Array, number, number, string]\n                >(buf, \"b[8] u32 u8 s\")\n                const deviceId = toHex(devidbuf)\n                const role: Role = {\n                    deviceId,\n                    serviceClass,\n                    serviceIndex,\n                    name,\n                }\n                roles.push(role)\n            }\n            // store result if changed\n            if (JSON.stringify(roles) !== previousRolesHash) {\n                this._roles = roles\n                this.emit(CHANGE)\n            }\n        } catch (e) {\n            this._needRefresh = true\n            this.emit(ERROR, e)\n        }\n    }\n\n    static unroledSrvs = [SRV_CONTROL, SRV_ROLE_MANAGER, SRV_LOGGER]\n\n    private assignRoles() {\n        this.bus\n            .services()\n            .filter(\n                srv =>\n                    RoleManagerClient.unroledSrvs.indexOf(srv.serviceClass) < 0\n            )\n            .forEach(srv => this.assignRole(srv))\n    }\n\n    private assignRole(service: JDService) {\n        const deviceId = service.device.deviceId\n        const serviceIndex = service.serviceIndex\n        const role = this._roles.find(\n            r => r.deviceId === deviceId && r.serviceIndex === serviceIndex\n        )\n        //console.debug(`role ${service.id} -> ${role?.role}`, { service })\n        service.role = role?.name\n    }\n\n    private clearRoles() {\n        this.bus.services().forEach(srv => (srv.role = undefined))\n    }\n\n    hasRoleForService(service: JDService) {\n        const { serviceClass } = service\n        return !!this._roles?.find(r => r.serviceClass === serviceClass)\n    }\n\n    compatibleRoles(service: JDService): Role[] {\n        const { serviceClass } = service\n        return this._roles?.filter(r => r.serviceClass === serviceClass)\n    }\n\n    role(name: string): Role {\n        return this._roles.find(r => r.serviceIndex > 0 && r.name === name)\n    }\n\n    async setRole(service: JDService, name: string) {\n        const { device, serviceIndex } = service\n        const { deviceId } = device\n        //console.debug(`set role ${deviceId}:${serviceIndex} to ${role}`)\n\n        const previous = name && this._roles.find(r => r.name === name)\n        if (\n            previous &&\n            previous.deviceId === deviceId &&\n            previous.serviceIndex === serviceIndex\n        ) {\n            // nothing todo\n            console.debug(`role unmodified, skipping`)\n            return\n        }\n\n        // set new role assignment\n        {\n            const data = jdpack<[Uint8Array, number, string]>(\"b[8] u8 s\", [\n                fromHex(deviceId),\n                serviceIndex,\n                name || \"\",\n            ])\n            await this.service.sendPacketAsync(\n                Packet.from(RoleManagerCmd.SetRole, data),\n                true\n            )\n        }\n\n        // clear previous role assignment\n        if (previous) {\n            console.debug(\n                `clear role ${previous.deviceId}:${previous.serviceIndex}`\n            )\n            const data = jdpack<[Uint8Array, number, string]>(\"b[8] u8 s\", [\n                fromHex(previous.deviceId),\n                previous.serviceIndex,\n                \"\",\n            ])\n            await this.service.sendPacketAsync(\n                Packet.from(RoleManagerCmd.SetRole, data),\n                true\n            )\n        }\n    }\n\n    startSimulators() {\n        if (!this._roles?.length) return\n\n        // collect roles that need to be bound\n        const todos = groupBy(\n            this._roles\n                .filter(role => !this.bus.device(role.deviceId, true))\n                .map(role => ({\n                    role,\n                    hostDefinition: serviceProviderDefinitionFromServiceClass(\n                        role.serviceClass\n                    ),\n                }))\n                .filter(todo => !!todo.hostDefinition),\n            todo => parentName(todo.role.name) || \"\"\n        )\n\n        // spawn devices with group of devices\n        Object.keys(todos).forEach(parent => {\n            const todo = todos[parent]\n            // no parent, spawn individual services\n            if (!parent) {\n                todo.forEach(t =>\n                    addServiceProvider(this.bus, t.hostDefinition)\n                )\n            } else {\n                // spawn all services into 1\n                addServiceProvider(this.bus, {\n                    name: \"\",\n                    serviceClasses: [],\n                    services: () =>\n                        arrayConcatMany(\n                            todo.map(t => t.hostDefinition.services())\n                        ),\n                })\n            }\n        })\n\n        function parentName(role: string) {\n            return role.split(\"/\", 1)[0]\n        }\n    }\n}\nexport default RoleManagerClient\n","import Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport { strcmp, arrayConcatMany, toHex } from \"./utils\"\nimport {\n    JD_SERVICE_INDEX_CTRL,\n    CMD_ADVERTISEMENT_DATA,\n    DEVICE_ANNOUNCE,\n    PACKET_SEND,\n    ERROR,\n    CONNECTING,\n    DEVICE_CONNECT,\n    DEVICE_DISCONNECT,\n    PACKET_RECEIVE,\n    PACKET_RECEIVE_ANNOUNCE,\n    PACKET_EVENT,\n    PACKET_REPORT,\n    PACKET_PROCESS,\n    DEVICE_CHANGE,\n    CHANGE,\n    FIRMWARE_BLOBS_CHANGE,\n    BUS_NODE_NAME,\n    DEVICE_NODE_NAME,\n    SERVICE_NODE_NAME,\n    EVENT_NODE_NAME,\n    REGISTER_NODE_NAME,\n    FIELD_NODE_NAME,\n    JD_DEVICE_DISCONNECTED_DELAY,\n    JD_DEVICE_LOST_DELAY,\n    JD_SERVICE_INDEX_CRC_ACK,\n    SELF_ANNOUNCE,\n    TIMEOUT,\n    LATE,\n    REPORT_UPDATE,\n    REGISTER_POLL_REPORT_INTERVAL,\n    REGISTER_POLL_REPORT_MAX_INTERVAL,\n    REGISTER_OPTIONAL_POLL_COUNT,\n    PACKET_PRE_PROCESS,\n    STREAMING_DEFAULT_INTERVAL,\n    REGISTER_POLL_FIRST_REPORT_INTERVAL,\n    SERVICE_PROVIDER_ADDED,\n    SERVICE_PROVIDER_REMOVED,\n    REFRESH,\n    ROLE_MANAGER_CHANGE,\n    TIMEOUT_DISCONNECT,\n    REGISTER_POLL_STREAMING_INTERVAL,\n    REPORT_RECEIVE,\n    CMD_SET_REG,\n    PING_LOGGERS_POLL,\n    RESET_IN_TIME_US,\n    REFRESH_REGISTER_POLL,\n    META_TRACE,\n    DEVICE_CLEAN,\n    REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL,\n    REGISTER_POLL_REPORT_VOLATILE_INTERVAL,\n    SRV_INFRASTRUCTURE,\n    CONNECTION_STATE,\n} from \"./constants\"\nimport { serviceClass } from \"./pretty\"\nimport JDNode from \"./node\"\nimport { FirmwareBlob, sendStayInBootloaderCommand } from \"./flashing\"\nimport JDService from \"./service\"\nimport {\n    deviceSpecificationFromProductIdentifier,\n    isConstRegister,\n    isReading,\n    isSensor,\n} from \"./spec\"\nimport {\n    LoggerPriority,\n    LoggerReg,\n    SensorReg,\n    SRV_LOGGER,\n    SRV_REAL_TIME_CLOCK,\n    SystemReg,\n} from \"../../src/jdom/constants\"\nimport JDServiceProvider from \"./servers/serviceprovider\"\nimport RealTimeClockServer from \"../servers/realtimeclockserver\"\nimport { SRV_ROLE_MANAGER } from \"../../src/jdom/constants\"\nimport Transport, { ConnectionState } from \"./transport/transport\"\nimport { BusStatsMonitor } from \"./busstats\"\nimport RoleManagerClient from \"./clients/rolemanagerclient\"\nimport JDBridge from \"./bridge\"\nimport { randomDeviceId } from \"./random\"\nimport { ControlReg, SRV_CONTROL } from \"../../jacdac-spec/dist/specconstants\"\nimport Scheduler, { WallClockScheduler } from \"./scheduler\"\nimport ServiceFilter from \"./filters/servicefilter\"\nimport DeviceFilter from \"./filters/devicefilter\"\nimport Flags from \"./flags\"\nimport { stack } from \"./trace/trace\"\n\n/**\n * Creation options for a bus\n * @category JDOM\n */\nexport interface BusOptions {\n    /**\n     * The self-device device id\n     */\n    deviceId?: string\n    /**\n     * A custom scheduler to control time\n     */\n    scheduler?: Scheduler\n    /**\n     * Parent domain origin to handle iframe messages\n     */\n    parentOrigin?: string\n}\n\n/**\n * A Jacdac bus manager. This instance maintains the list of devices on the bus.\n * @category JDOM\n */\nexport class JDBus extends JDNode {\n    /**\n     * @internal\n     */\n    readonly selfDeviceId: string\n    /**\n     * A timer and interval schedular to orchastrate bus timestamps\n     * @category Scheduling\n     */\n    readonly scheduler: Scheduler\n    /**\n     * @internal\n     */\n    readonly parentOrigin: string\n    private readonly _transports: Transport[] = []\n    private _bridges: JDBridge[] = []\n    private _devices: JDDevice[] = []\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _gcInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _announceInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _safeBootInterval: any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _refreshRegistersInterval: any\n    private _lastPingLoggerTime = 0\n    private _lastResetInTime = 0\n    private _restartCounter = 0\n    private _roleManagerClient: RoleManagerClient\n    private _minLoggerPriority = LoggerPriority.Debug\n    private _firmwareBlobs: FirmwareBlob[]\n    private _gcDevicesFrozen = 0\n    private _serviceProviders: JDServiceProvider[] = []\n    private _streaming = false\n    private _unsubscribeBroadcastChannel: () => void\n    private _passive = false\n\n    /**\n     * Gets an instance that tracks packet statistics\n     * @category Diagnostics\n     **/\n    public readonly stats: BusStatsMonitor\n\n    /**\n     * Creates the bus with the given transport\n     * @param sendPacket\n     * @category Lifecycle\n     */\n    constructor(transports?: Transport[], options?: BusOptions) {\n        super()\n\n        this.selfDeviceId = options?.deviceId || randomDeviceId()\n        this.scheduler = options?.scheduler || new WallClockScheduler()\n        this.parentOrigin = options?.parentOrigin || \"*\"\n        this.stats = new BusStatsMonitor(this)\n\n        // some transport may be undefined\n        transports?.filter(tr => !!tr).map(tr => this.addTransport(tr))\n\n        // tell loggers to send data, every now and then\n        // send resetin packets\n        this.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this))\n        // tell RTC clock the computer time\n        this.on(DEVICE_ANNOUNCE, this.handleRealTimeClockSync.bind(this))\n        // grab the default role manager\n        this.on(DEVICE_CHANGE, this.handleRoleManager.bind(this))\n\n        // start all timers\n        this.start()\n    }\n\n    private configureBroadcastChannel() {\n        if (typeof BroadcastChannel === \"undefined\") return\n\n        // the purpose of this code is to orchestrate\n        // interactions with multiple tabs and windows\n        const channel = new BroadcastChannel(\"jacdac\")\n        const postConnectionState = () => {\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: CONNECTION_STATE,\n                transports: this._transports.map(tr => ({\n                    type: tr.type,\n                    connectionState: tr.connectionState,\n                })),\n            })\n        }\n        // update other windows with connection status\n        const unsubConnectionState = this.subscribe(\n            CONNECTION_STATE,\n            postConnectionState\n        )\n        const handleVisibilityChange = () => {\n            // tell other windows, we are visible or not\n            channel.postMessage({\n                id: this.selfDevice.shortId,\n                event: \"visibilitychange\",\n                visibilityState: document.visibilityState,\n            })\n        }\n        const handleBroadcastMessage = async (\n            msg: MessageEvent<{\n                id: string\n                event: string\n                visibilityState?: VisibilityState\n                transports: { type: string; connectionState: string }[]\n            }>\n        ) => {\n            const { data } = msg\n            const { event, transports, visibilityState } = data\n            switch (event) {\n                case \"visibilitychange\": {\n                    // automatically disconnect if another pane becomes live\n                    //console.debug(\n                    //   `broadcast ${id}: ${event} ${visibilityState}`\n                    //)\n                    if (visibilityState === \"visible\") await this.disconnect()\n                    else {\n                        // let other window disconnect\n                        await this.delay(2000)\n                        await this.connect(true)\n                    }\n                    break\n                }\n                case CONNECTION_STATE: {\n                    //console.debug(`broadcast ${id}: ${event}`, transports)\n                    // if any other window is trying to connect, disconnect\n                    transports\n                        .filter(\n                            tr =>\n                                tr.connectionState ===\n                                ConnectionState.Connecting\n                        )\n                        .forEach(ctr => {\n                            this.transports\n                                .filter(tr => tr.type === ctr.type)\n                                .forEach(tr => tr.disconnect())\n                        })\n                }\n            }\n        }\n\n        channel.addEventListener(\"message\", handleBroadcastMessage, false)\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n        this._unsubscribeBroadcastChannel = () => {\n            unsubConnectionState()\n            document.removeEventListener(\n                \"visibilitychange\",\n                handleVisibilityChange\n            )\n            channel.removeEventListener(\"message\", handleBroadcastMessage)\n            channel.close()\n        }\n\n        // notify other pages\n        handleVisibilityChange()\n    }\n\n    /**\n     * Gets the list of transports registers with the bus\n     * @category Transports and Bridges\n     */\n    get transports() {\n        return this._transports.slice(0)\n    }\n\n    /**\n     * Adds a transport to the bus\n     * @category Transports and Bridges\n     */\n    addTransport(transport: Transport) {\n        if (this._transports.indexOf(transport) > -1) return // already added\n\n        this._transports.push(transport)\n        transport.bus = this\n        transport.bus.on(CONNECTING, () => this.preConnect(transport))\n    }\n\n    /**\n     * Gets the list of bridges registered with the bus\n     * @category Transports and Bridges\n     */\n    get bridges() {\n        return this._bridges.slice(0)\n    }\n\n    /**\n     * Add a bridge to the bus and returns a callback to remove it.\n     * @param bridge\n     * @returns callback to remove bridge\n     * @category Transports and Bridges\n     * @internal\n     */\n    addBridge(bridge: JDBridge): () => void {\n        if (this._bridges.indexOf(bridge) < 0) {\n            console.debug(`add bridge`, { bridge })\n            this._bridges.push(bridge)\n            this.emit(CHANGE)\n        }\n        return () => this.removeBridge(bridge)\n    }\n\n    private removeBridge(bridge: JDBridge) {\n        const i = this._bridges.indexOf(bridge)\n        if (i > -1) {\n            console.debug(`remove bridge`, { bridge })\n            this._bridges.splice(i, 1)\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Do not send any packet on the bus\n     */\n    get passive(): boolean {\n        return this._passive\n    }\n\n    set passive(value: boolean) {\n        if (value !== this._passive) {\n            this._passive = value\n            this.emit(CHANGE)\n        }\n    }\n\n    private preConnect(transport: Transport) {\n        //console.debug(`preconnect ${transport.type}`, { transport })\n        return Promise.all(\n            this._transports\n                .filter(t => t !== transport)\n                .map(t => t.disconnect())\n        )\n    }\n\n    /**\n     * Connects the bus going through the transports chronologically. Does nothing if already connected.\n     * @param background connection was triggered automatically\n     * @category Lifecycle\n     */\n    async connect(background?: boolean) {\n        if (this.connected) return\n\n        for (const transport of this._transports) {\n            // start connection\n            await transport.connect(background)\n            // keep going if not connected\n            if (transport.connected) break\n        }\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Disconnects the bus and any connected transport.\n     * @category Lifecycle\n     */\n    async disconnect() {\n        for (const transport of this._transports) {\n            await transport.disconnect()\n        }\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Starts to process packets and updates the JDOM nodes\n     * @category Lifecycle\n     */\n    start() {\n        this.configureBroadcastChannel()\n        if (!this._announceInterval)\n            this._announceInterval = this.scheduler.setInterval(() => {\n                if (!this.passive) this.emit(SELF_ANNOUNCE)\n            }, 499)\n        this.backgroundRefreshRegisters = true\n        if (!this._gcInterval)\n            this._gcInterval = this.scheduler.setInterval(\n                () => this.gcDevices(),\n                JD_DEVICE_DISCONNECTED_DELAY\n            )\n    }\n\n    /**\n     * Stops processing packets\n     * @category Lifecycle\n     */\n    async stop() {\n        await this.disconnect()\n        if (this._unsubscribeBroadcastChannel) {\n            this._unsubscribeBroadcastChannel()\n            this._unsubscribeBroadcastChannel = undefined\n        }\n        if (this._announceInterval) {\n            this.scheduler.clearInterval(this._announceInterval)\n            this._announceInterval = undefined\n        }\n        this.safeBoot = false\n        this.backgroundRefreshRegisters = false\n        if (this._gcInterval) {\n            this.scheduler.clearInterval(this._gcInterval)\n            this._gcInterval = undefined\n        }\n    }\n\n    /**\n     * Stops the bus and all transport connections.\n     * @category Lifecycle\n     */\n    async dispose() {\n        console.debug(`${this.id}: disposing.`)\n        await this.stop()\n        this._transports.forEach(transport => transport.dispose())\n    }\n\n    /**\n     * Indicates that the bus is sending commands keep devices in bootloader mode.\n     * This property is signaled by CHANGE.\n     * @category Lifecycle\n     */\n    get safeBoot() {\n        return !!this._safeBootInterval\n    }\n\n    /**\n     * Turn on or off the safe boot mode where the bus keeps devices in bootloader mode.\n     * Triggers a CHANGE event.\n     * @category Lifecycle\n     */\n    set safeBoot(enabled: boolean) {\n        if (enabled && !this._safeBootInterval) {\n            this._safeBootInterval = this.scheduler.setInterval(() => {\n                // don't send message if any device is flashing\n                if (this._devices.some(d => d.flashing)) return\n                sendStayInBootloaderCommand(this)\n            }, 50)\n            this.emit(CHANGE)\n        } else if (!enabled && this._safeBootInterval) {\n            this.scheduler.clearInterval(this._safeBootInterval)\n            this._safeBootInterval = undefined\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Indicates if any of the transports is connected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get connected() {\n        return this._transports.some(t => t.connected)\n    }\n\n    /**\n     * Indicates if any of the transports is disconnected.\n     * Some transports might be in the process of connecting or disconnecting.\n     * @category Lifecycle\n     */\n    get disconnected() {\n        return this._transports.every(t => t.disconnected)\n    }\n\n    /**\n     * Clears known devices and service providers (simulators). Optionally reset bus timestamp.\n     * @param timestamp\n     * @category Services\n     */\n    clear(timestamp = 0) {\n        // clear hosts\n        if (this._serviceProviders?.length) {\n            this._serviceProviders.forEach(host => (host.bus = undefined))\n            this._serviceProviders = []\n        }\n\n        // clear devices\n        const devs = this._devices\n        if (devs?.length) {\n            this._devices = []\n            devs.forEach(dev => {\n                dev.disconnect()\n                this.emit(DEVICE_DISCONNECT, dev)\n                this.emit(DEVICE_CHANGE, dev)\n            })\n        }\n        this.resetTime(timestamp)\n    }\n\n    /**\n     * Gets a unique identifier for this node in the Jacdac DOM.\n     * @category JDOM\n     */\n    get id(): string {\n        return this.nodeKind\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get name(): string {\n        return \"bus\"\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get friendlyName(): string {\n        return this.name\n    }\n\n    /**\n     * Gets the bus name\n     * @category JDOM\n     */\n    get qualifiedName(): string {\n        return this.name\n    }\n\n    /**\n     * Returns the ``BUS_NODE_NAME``\n     * @category JDOM\n     */\n    get nodeKind(): string {\n        return BUS_NODE_NAME\n    }\n\n    /**\n     * Gets the default role manager service client, if any\n     * @category Services\n     */\n    get roleManager(): RoleManagerClient {\n        return this._roleManagerClient\n    }\n\n    /**\n     * Sets the default role manager service client\n     * @category Services\n     */\n    setRoleManagerService(service: JDService) {\n        //console.log(`set role manager`, { service })\n        // clean if needed\n        if (\n            this._roleManagerClient &&\n            this._roleManagerClient.service !== service\n        ) {\n            //console.debug(\"unmount role manager\")\n            this._roleManagerClient.unmount()\n            this._roleManagerClient = undefined\n        }\n\n        // allocate new manager\n        if (service && service !== this._roleManagerClient?.service) {\n            //console.debug(\"mount role manager\")\n            this._roleManagerClient = new RoleManagerClient(service)\n            this.emit(ROLE_MANAGER_CHANGE)\n            this.emit(CHANGE)\n            this._roleManagerClient.startRefreshRoles()\n        }\n    }\n\n    /**\n     * @internal\n     */\n    toString(): string {\n        return `bus: ${this._devices?.length || 0} devices, ${\n            this._transports\n                ?.filter(tr => tr.connected)\n                .map(tr => tr.type)\n                .join(\", \") || \"\"\n        }`\n    }\n\n    /**\n     * Gets a detailled description of the devices and services connected to the bus\n     * @returns\n     */\n    describe() {\n        return `\ntransport:\n${this._transports.map(tr => `  ${tr.type}: ${tr.connectionState}`).join(\"\\n\")}\n\n${this.devices({ ignoreInfrastructure: true })\n    .map(\n        dev => `device: \n  id: ${dev.shortId} (0x${dev.deviceId})\n  product: ${\n      dev.productIdentifier\n          ? `${\n                deviceSpecificationFromProductIdentifier(dev.productIdentifier)\n                    ?.id || \"?\"\n            } (0x${dev.productIdentifier?.toString(16)})`\n          : \"\"\n  }\n  firmware_version: ${dev.firmwareVersion || \"\"}\n  services:\n${dev\n    .services()\n    .slice(1)\n    .map(srv =>\n        [\n            `    ${\n                srv.specification?.shortName || srv.name\n            } (0x${srv.serviceClass.toString(16)})`,\n            ...srv\n                .registers()\n                .filter(reg => !!reg.data)\n                .map(\n                    reg =>\n                        `        ${reg.specification?.kind || \"reg\"} ${\n                            reg.name\n                        }: ${reg.humanValue} (${toHex(reg.data)})`\n                ),\n            ...srv.events.map(ev => `        event ${ev.name}: ${ev.count}`),\n        ].join(\"\\n\")\n    )\n    .join(\"\\n\")}\n`\n    )\n    .join(\"\\n\")}`\n    }\n\n    /**\n     * Resolves a JDOM node from an identifier\n     * @param id node identifier\n     * @returns node if found, undefined otherwise\n     * @category JDOM\n     */\n    node(id: string): JDNode {\n        const resolve = (): JDNode => {\n            const m =\n                /^(?<type>bus|device|service|register|event|field)(:(?<dev>\\w+)(:(?<srv>\\w+)(:(?<reg>\\w+(:(?<idx>\\w+))?))?)?)?$/.exec(\n                    id\n                )\n            if (!m) return undefined\n            const type = m.groups[\"type\"]\n            const dev = m.groups[\"dev\"]\n            const srv = parseInt(m.groups[\"srv\"], 16)\n            const reg = parseInt(m.groups[\"reg\"], 16)\n            const idx = parseInt(m.groups[\"idx\"], 16)\n            //console.log(type, this.device(dev), this.device(dev)?.service(srv), this.device(dev)?.service(srv)?.register(reg), idx)\n            switch (type) {\n                case BUS_NODE_NAME:\n                    return this\n                case DEVICE_NODE_NAME:\n                    return this.device(dev, true)\n                case SERVICE_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)\n                case REGISTER_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.register(reg)\n                case EVENT_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.event(reg)\n                case FIELD_NODE_NAME:\n                    return this.device(dev, true)?.service(srv)?.register(reg)\n                        ?.fields[idx]\n            }\n            console.info(`node ${id} not found`)\n            return undefined\n        }\n        const node = resolve()\n        return node\n    }\n\n    private resetTime(delta = 0) {\n        this.scheduler.resetTime(delta)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets the current bus-relavite time in milliseconds\n     * @category Scheduling\n     */\n    get timestamp(): number {\n        return this.scheduler.timestamp\n    }\n\n    /**\n     * Indicates if the bus should force all sensors to stream\n     */\n    get streaming(): boolean {\n        return this._streaming\n    }\n\n    /**\n     * Sets automatic streaming on and off\n     */\n    set streaming(value: boolean) {\n        this._streaming = value\n    }\n\n    /**\n     * Creates a promise that awaits for the given duration using the bus scheduler\n     * @category Scheduling\n     */\n    delay<T>(millis: number, value?: T): Promise<T | undefined> {\n        return new Promise(resolve =>\n            this.scheduler.setTimeout(() => resolve(value), millis)\n        )\n    }\n\n    /**\n     * Gets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    get minLoggerPriority(): LoggerPriority {\n        return this._minLoggerPriority\n    }\n\n    /**\n     * Sets the current desired minimum logger verbosity on the bus\n     * @category Diagnostics\n     */\n    set minLoggerPriority(priority: LoggerPriority) {\n        if (priority !== this._minLoggerPriority) {\n            this._minLoggerPriority = priority\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Returns undefined\n     * @category JDOM\n     */\n    get parent(): JDNode {\n        return undefined\n    }\n\n    private async handleRealTimeClockSync(device: JDDevice) {\n        // tell time to the RTC clocks\n        if (device.hasService(SRV_REAL_TIME_CLOCK))\n            await RealTimeClockServer.syncTime(this)\n    }\n\n    private handleRoleManager() {\n        if (this.roleManager) return\n\n        const service = this.services({ serviceClass: SRV_ROLE_MANAGER })[0]\n        this.setRoleManagerService(service)\n    }\n\n    /**\n     * Sends a packet to the bus\n     * @param packet packet to send\n     * @internal\n     */\n    async sendPacketAsync(packet: Packet) {\n        packet.timestamp = this.timestamp\n        if (Flags.trace) packet.meta[META_TRACE] = stack()\n\n        // special debug mode to avoid dashboard interfere with packets\n        // will generate fails for acks\n        if (this.passive) return\n\n        this.emit(PACKET_SEND, packet)\n\n        await Promise.all(\n            this._transports.map(transport => transport.sendPacketAsync(packet))\n        )\n    }\n\n    /**\n     * Gets the list of known firmware blobs\n     * @category Firmware\n     */\n    get firmwareBlobs() {\n        return this._firmwareBlobs\n    }\n\n    /**\n     * Sets the list of known firmware blobs\n     * @category Firmware\n     */\n    set firmwareBlobs(blobs: FirmwareBlob[]) {\n        this._firmwareBlobs = blobs\n        this.emit(FIRMWARE_BLOBS_CHANGE)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Gets the current list of known devices on the bus\n     * @category Services\n     */\n    devices(options?: DeviceFilter) {\n        if (options?.serviceName && options?.serviceClass > -1)\n            throw Error(\"serviceClass and serviceName cannot be used together\")\n        const sc =\n            options?.serviceClass > -1\n                ? options?.serviceClass\n                : serviceClass(options?.serviceName)\n\n        let r = this._devices.slice(0)\n        if (sc > -1) r = r.filter(s => s.hasService(sc))\n        if (options?.ignoreInfrastructure)\n            r = r.filter(\n                s =>\n                    s.deviceId !== this.selfDeviceId &&\n                    s.serviceClasses.indexOf(SRV_INFRASTRUCTURE) < 0\n            )\n        if (options?.announced) r = r.filter(s => s.announced)\n        if (options?.ignoreSimulators)\n            r = r.filter(r => !this.findServiceProvider(r.deviceId))\n        if (options?.productIdentifier) r = r.filter(r => !!r.productIdentifier)\n        if (options?.physical) r = r.filter(r => !!r.isPhysical)\n        return r\n    }\n\n    /**\n     * Gets the current list of service providers on the bus\n     * @category Services\n     */\n    serviceProviders(): JDServiceProvider[] {\n        return this._serviceProviders.slice(0)\n    }\n\n    /**\n     * Get a service providers for a given device\n     * @param deviceId\n     * @category Services\n     */\n    findServiceProvider(deviceId: string) {\n        return this._serviceProviders.find(d => d.deviceId === deviceId)\n    }\n\n    /**\n     * Adds the service provider to the bus and returns the associated devoce\n     * @param provider instance to add\n     * @category Services\n     */\n    addServiceProvider(provider: JDServiceProvider) {\n        if (provider && this._serviceProviders.indexOf(provider) < 0) {\n            this._serviceProviders.push(provider)\n            provider.bus = this\n\n            this.emit(SERVICE_PROVIDER_ADDED, provider)\n            this.emit(CHANGE)\n        }\n\n        return this.device(provider.deviceId)\n    }\n\n    /**\n     * Removes the service provider from the bus\n     * @param provider instance to remove\n     * @category Services\n     */\n    removeServiceProvider(provider: JDServiceProvider) {\n        if (!provider) return\n\n        const i = this._serviceProviders.indexOf(provider)\n        if (i > -1) {\n            this.removeDevice(provider.deviceId)\n            // remove host\n            this._serviceProviders.splice(i, 1)\n            provider.bus = undefined\n            this.emit(SERVICE_PROVIDER_REMOVED, provider)\n\n            // removed host\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Remove a device client by identifier\n     * @param deviceId\n     * @category Devices\n     */\n    removeDevice(deviceId: string) {\n        // remove device as well\n        const devi = this._devices.findIndex(d => d.deviceId === deviceId)\n        if (devi > -1) {\n            const dev = this._devices[devi]\n            this._devices.splice(devi, 1)\n            dev.disconnect()\n            this.emit(DEVICE_DISCONNECT, dev)\n            this.emit(DEVICE_CHANGE, dev)\n        }\n    }\n\n    /**\n     * Gets the list of devices\n     * @category JDOM\n     */\n    get children(): JDNode[] {\n        return this.devices()\n    }\n\n    /**\n     * Gets the current list of services from all the known devices on the bus\n     * @category Services\n     */\n    services(options?: ServiceFilter & DeviceFilter): JDService[] {\n        return arrayConcatMany(\n            this.devices(options).map(d => d.services(options))\n        )\n    }\n\n    /**\n     * Gets a device on the bus\n     * @param id device identifier to query\n     * @param skipCreate do not create new device if missing\n     * @param pkt packet that generated this device query\n     * @category Services\n     */\n    device(id: string, skipCreate?: boolean, pkt?: Packet) {\n        if (id === \"0000000000000000\" && !skipCreate) {\n            console.warn(\"jadac: trying to access device 0000000000000000\")\n            return undefined\n        }\n        let d = this._devices.find(d => d.deviceId == id)\n        if (!d && !skipCreate) {\n            if (this.devicesFrozen) {\n                console.debug(`info`, `devices frozen, dropping ${id}`)\n                return undefined\n            }\n            d = new JDDevice(this, id, pkt)\n            this._devices.push(d)\n            console.debug(\n                `${id === this.selfDeviceId ? \"self\" : \"new\"} device ${\n                    d.shortId\n                } (${id})`\n            )\n            // stable sort\n            this._devices.sort((l, r) => strcmp(l.deviceId, r.deviceId))\n            this.emit(DEVICE_CONNECT, d)\n            this.emit(DEVICE_CHANGE, d)\n            this.emit(CHANGE)\n        }\n        return d\n    }\n\n    /**\n     * Push a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    pushDeviceFrozen() {\n        this._gcDevicesFrozen++\n    }\n\n    /**\n     * Pop a context to disable cleaning device that haven't issued packets recently.\n     * @category Lifecycle\n     */\n    popDeviceFrozen() {\n        this._gcDevicesFrozen = Math.max(0, this._gcDevicesFrozen - 1)\n    }\n\n    /**\n     * Indicates if the device list if currently frozen.\n     * @category Lifecycle\n     */\n    get devicesFrozen() {\n        return this._gcDevicesFrozen > 0\n    }\n\n    private gcDevices() {\n        this.emit(DEVICE_CLEAN)\n        if (this.devicesFrozen) {\n            console.debug(\"devices frozen\")\n            return\n        }\n\n        const LOST_DELAY = JD_DEVICE_LOST_DELAY\n        const DISCONNECTED_DELAY = JD_DEVICE_DISCONNECTED_DELAY\n        const lostCutoff = this.timestamp - LOST_DELAY\n        const disconnectedCutoff = this.timestamp - DISCONNECTED_DELAY\n\n        // cycle through events and disconnect devices that are long gone\n        for (let i = 0; i < this._devices.length; ++i) {\n            const dev = this._devices[i]\n\n            if (dev.lastSeen < disconnectedCutoff) {\n                this._devices.splice(i, 1)\n                i--\n                this.disconnectDevice(dev)\n            } else if (dev.lastSeen < lostCutoff) {\n                dev.lost = true\n            }\n        }\n    }\n\n    private disconnectDevice(dev: JDDevice) {\n        dev.disconnect()\n        this.emit(DEVICE_DISCONNECT, dev)\n        this.emit(DEVICE_CHANGE, dev)\n        this.emit(CHANGE)\n    }\n\n    /**\n     * Ingests and process a packet received from the bus.\n     * @param pkt a jacdac packet\n     * @internal\n     */\n    processPacket(pkt: Packet) {\n        if (!pkt.isMultiCommand && !pkt.device) {\n            pkt.device = this.device(pkt.deviceIdentifier, false, pkt)\n            // the device id is unknown dropping\n            if (!pkt.device) {\n                if (Flags.diagnostics)\n                    console.debug(\n                        `unknown pkt device ${pkt.deviceIdentifier}`,\n                        {\n                            pkt,\n                        }\n                    )\n                return\n            }\n        }\n        this.emit(PACKET_PRE_PROCESS, pkt)\n        let isAnnounce = false\n        if (!pkt.device) {\n            // skip\n        } else if (pkt.isCommand) {\n            if (pkt.deviceIdentifier == this.selfDeviceId) {\n                if (pkt.requiresAck) {\n                    const ack = Packet.onlyHeader(pkt.crc)\n                    ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK\n                    ack.deviceIdentifier = this.selfDeviceId\n                    ack.sendReportAsync(this.selfDevice)\n                }\n            }\n            pkt.device.processPacket(pkt)\n        } else {\n            pkt.device.lastSeen = pkt.timestamp\n            if (pkt.serviceIndex == JD_SERVICE_INDEX_CTRL) {\n                if (pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n                    isAnnounce = true\n                    pkt.device.processAnnouncement(pkt)\n                } else if (\n                    pkt.isMultiCommand &&\n                    pkt.serviceCommand == (CMD_SET_REG | ControlReg.ResetIn)\n                ) {\n                    // someone else is doing reset in\n                    this._lastResetInTime = this.timestamp\n                }\n            }\n            pkt.device.processPacket(pkt)\n        }\n        this.emit(PACKET_PROCESS, pkt)\n        // don't spam with duplicate advertisement events\n        if (isAnnounce) {\n            this.emit(PACKET_RECEIVE_ANNOUNCE, pkt)\n        } else {\n            this.emit(PACKET_RECEIVE, pkt)\n            if (pkt.isEvent) this.emit(PACKET_EVENT, pkt)\n            else if (pkt.isReport) this.emit(PACKET_REPORT, pkt)\n        }\n    }\n\n    /**\n     * Gets the virtual device created by this bus to handle pipes.\n     * @category Services\n     */\n    get selfDevice() {\n        return this.device(this.selfDeviceId)\n    }\n\n    private handleSelfAnnounce(): Promise<void> {\n        return Promise.all([\n            this.sendAnnounce(),\n            this.sendResetIn(),\n            this.sendPingLoggers(),\n        ]).then(() => {})\n    }\n\n    private async sendAnnounce() {\n        // we do not support any services (at least yet)\n        if (this._restartCounter < 0xf) this._restartCounter++\n        const pkt = Packet.jdpacked<[number, number[][]]>(\n            CMD_ADVERTISEMENT_DATA,\n            \"u32 r: u32\",\n            [this._restartCounter | 0x100, [[SRV_INFRASTRUCTURE]]]\n        )\n        pkt.serviceIndex = JD_SERVICE_INDEX_CTRL\n        pkt.deviceIdentifier = this.selfDeviceId\n        await pkt.sendReportAsync(this.selfDevice)\n    }\n\n    get lastResetInTime() {\n        return this._lastResetInTime\n    }\n\n    private async sendResetIn() {\n        // don't send reset if already received\n        // or no devices\n        if (!this.devices({ ignoreInfrastructure: true }).length) return\n        this._lastResetInTime = this.timestamp\n        const rst = Packet.jdpacked<[number]>(\n            CMD_SET_REG | ControlReg.ResetIn,\n            \"u32\",\n            [RESET_IN_TIME_US]\n        )\n        await rst.sendAsMultiCommandAsync(this, SRV_CONTROL)\n    }\n\n    public async sendStopStreaming(): Promise<void> {\n        console.debug(`bus: stop streaming`)\n        const readingRegisters = this.services({\n            announced: true,\n            ignoreInfrastructure: true,\n        })\n            .map(\n                srv =>\n                    srv.readingRegister &&\n                    srv.register(SensorReg.StreamingSamples)\n            )\n            .filter(reg => !!reg)\n\n        await Promise.all(\n            readingRegisters.map(reg => reg.sendSetPackedAsync([0]))\n        )\n    }\n\n    private async sendPingLoggers() {\n        if (\n            this._minLoggerPriority < LoggerPriority.Silent &&\n            this.timestamp - this._lastPingLoggerTime > PING_LOGGERS_POLL &&\n            this.devices({\n                ignoreInfrastructure: true,\n                serviceClass: SRV_LOGGER,\n            }).length > 0\n        ) {\n            this._lastPingLoggerTime = this.timestamp\n            const pkt = Packet.jdpacked<[LoggerPriority]>(\n                CMD_SET_REG | LoggerReg.MinPriority,\n                \"u8\",\n                [this._minLoggerPriority]\n            )\n            await pkt.sendAsMultiCommandAsync(this, SRV_LOGGER)\n        }\n    }\n\n    /**\n     * Indicates if registers are automatically refreshed in the background.\n     * @category Services\n     */\n    get backgroundRefreshRegisters() {\n        return !!this._refreshRegistersInterval\n    }\n\n    /**\n     * Enables or disables automatically refreshing registers in the background.\n     * @param enabled true to automatically refresh registers\n     * @category Services\n     */\n    set backgroundRefreshRegisters(enabled: boolean) {\n        if (!!enabled !== this.backgroundRefreshRegisters) {\n            if (!enabled) {\n                if (this._refreshRegistersInterval)\n                    this.scheduler.clearInterval(this._refreshRegistersInterval)\n                this._refreshRegistersInterval = undefined\n            } else {\n                this._refreshRegistersInterval = this.scheduler.setInterval(\n                    this.handleRefreshRegisters.bind(this),\n                    REFRESH_REGISTER_POLL\n                )\n            }\n        }\n    }\n\n    /**\n     * Cycles through all known registers and refreshes the once that have REPORT_UPDATE registered\n     */\n    private handleRefreshRegisters() {\n        const devices = this._devices.filter(\n            device => device.announced && !device.lost\n        ) // don't try lost devices or devices flashing\n\n        // skip if no devices or any device is currently flashing\n        if (!devices.length || devices.some(dev => dev.flashing)) return // no devices, we're done\n\n        // collect registers\n        const registers = arrayConcatMany(\n            devices.map(device =>\n                arrayConcatMany(\n                    device.services({ specification: true }).map(service =>\n                        service\n                            .registers()\n                            // someone is listening for reports\n                            .filter(\n                                reg =>\n                                    // automatic streaming\n                                    (this._streaming &&\n                                        reg.code === SystemReg.Reading) ||\n                                    // listening for updates\n                                    reg.listenerCount(REPORT_RECEIVE) > 0 ||\n                                    reg.listenerCount(REPORT_UPDATE) > 0\n                            )\n                            // ask if data is missing or non-const/status code\n                            .filter(\n                                reg =>\n                                    !reg.data ||\n                                    !(\n                                        isConstRegister(reg.specification) ||\n                                        reg.code === SystemReg.StatusCode ||\n                                        reg.code === SystemReg.ReadingError\n                                    )\n                            )\n                            // stop asking optional registers\n                            .filter(\n                                reg =>\n                                    !reg.specification?.optional ||\n                                    reg.lastGetAttempts <\n                                        REGISTER_OPTIONAL_POLL_COUNT\n                            )\n                    )\n                )\n            )\n        )\n\n        // refresh values\n        for (const register of registers) {\n            const { service, specification } = register\n            const noDataYet = !register.data\n            const age = this.timestamp - register.lastGetTimestamp\n            const backoff = register.lastGetAttempts\n\n            // streaming register? use streaming sample\n            if (isReading(specification) && isSensor(service.specification)) {\n                // compute refresh interval\n                const intervalRegister = service.register(\n                    SensorReg.StreamingInterval\n                )\n                let interval = intervalRegister?.uintValue\n                // no interval data\n                if (interval === undefined) {\n                    // use preferred interval data or default to 50\n                    const preferredIntervalRegister = service.register(\n                        SensorReg.StreamingPreferredInterval\n                    )\n                    const preferredInterval =\n                        preferredIntervalRegister?.uintValue\n                    interval = preferredInterval\n                    // if no interval, poll interval value\n                    if (interval === undefined) {\n                        // all async\n                        if (\n                            intervalRegister &&\n                            !intervalRegister.data &&\n                            this.timestamp - intervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL\n                        )\n                            intervalRegister.sendGetAsync()\n\n                        if (\n                            preferredIntervalRegister &&\n                            !preferredIntervalRegister.data &&\n                            this.timestamp -\n                                preferredIntervalRegister.lastGetTimestamp >\n                                REGISTER_POLL_STREAMING_INTERVAL\n                        )\n                            preferredIntervalRegister.sendGetAsync()\n                    }\n                }\n                // still no interval data use from spec or default\n                if (interval === undefined)\n                    interval =\n                        specification.preferredInterval ||\n                        STREAMING_DEFAULT_INTERVAL\n                const streamingSamplesRegister = service.register(\n                    SensorReg.StreamingSamples\n                )\n                const streamingSamplesAge =\n                    this.timestamp - streamingSamplesRegister.lastSetTimestamp\n                // need to figure out when we asked for streaming\n                const midSamplesAge = (interval * 0xff) >> 1\n                // compute if half aged\n                if (streamingSamplesAge > midSamplesAge) {\n                    //console.debug({ samplesAge, midSamplesAge, interval })\n                    streamingSamplesRegister.sendSetPackedAsync([0xff])\n                }\n\n                // first query, get data asap once per second\n                if (noDataYet && age > 1000) register.sendGetAsync()\n            } // regular register, ping if data is old\n            else {\n                const volatile = !!specification?.volatile\n                const expiration = volatile\n                    ? Math.min(\n                          REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL,\n                          REGISTER_POLL_REPORT_VOLATILE_INTERVAL *\n                              (1 << backoff)\n                      )\n                    : Math.min(\n                          REGISTER_POLL_REPORT_MAX_INTERVAL,\n                          (noDataYet\n                              ? REGISTER_POLL_FIRST_REPORT_INTERVAL\n                              : REGISTER_POLL_REPORT_INTERVAL) *\n                              (1 << backoff)\n                      )\n                if (age > expiration) {\n                    //console.log(`bus: poll ${register.id}`, register, age, backoff, expiration)\n                    register.sendGetAsync()\n                }\n            }\n        }\n\n        // apply streaming samples to service provider\n        this._serviceProviders.map(host => host.emit(REFRESH))\n    }\n\n    /**\n     * Runs a promise with a timeout. Returns undefined if timeout happens before of disconnection.\n     * @param timeout duration to wait before declaring timeout\n     * @param promise promise to wrap\n     * @category Lifecycle\n     */\n    withTimeout<T>(timeout: number, promise: Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            let done = false\n            const tid = setTimeout(() => {\n                if (!done) {\n                    done = true\n                    if (!this._transports.some(tr => tr.connected)) {\n                        // the bus got disconnected so all operation will\n                        // time out going further\n                        this.emit(TIMEOUT_DISCONNECT)\n                        resolve(undefined)\n                    } else {\n                        // the command timed out\n                        this.emit(TIMEOUT)\n                        this.emit(ERROR, \"Timeout (\" + timeout + \"ms)\")\n                        resolve(undefined)\n                    }\n                }\n            }, timeout)\n            promise.then(\n                v => {\n                    if (!done) {\n                        done = true\n                        clearTimeout(tid)\n                        resolve(v)\n                    } else {\n                        // we already gave up\n                        this.emit(LATE)\n                    }\n                },\n                e => {\n                    if (!done) {\n                        done = true\n                        clearTimeout(tid)\n                        reject(e)\n                    }\n                }\n            )\n        })\n    }\n}\n\nexport default JDBus\n","import JDBus from \"../bus\"\nimport JDClient from \"../client\"\nimport { CHANGE, PROGRESS } from \"../constants\"\nimport Trace from \"./trace\"\n\n/**\n * A player for packet traces.\n * @category Trace\n */\nexport class TracePlayer extends JDClient {\n    private _trace: Trace\n    private _busStartTimestamp = 0\n    private _index = 0\n    private _interval: any\n    private _lastProgressEmit = 0\n\n    constructor(public readonly bus: JDBus, public speed: number = 1) {\n        super()\n        this.tick = this.tick.bind(this)\n\n        // always stop when unmounting\n        this.mount(() => this.stop())\n    }\n\n    get running() {\n        return !!this._interval\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    set trace(t: Trace) {\n        if (t !== this._trace) {\n            this.stop()\n            this._trace = t\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Gets the adjusted timestamp\n     */\n    get elapsed() {\n        return (this.bus.timestamp - this._busStartTimestamp) * this.speed\n    }\n\n    get progress() {\n        if (!this.trace) return 0\n        return Math.max(0, Math.min(1, this.elapsed / this.trace.duration))\n    }\n\n    get length() {\n        return this.trace?.length || 0\n    }\n\n    start() {\n        if (this._interval || !this._trace) return // already running\n\n        // this is the reference start time of this run\n        this._busStartTimestamp = this.bus.timestamp\n        this._index = 0\n        this._interval = this.bus.scheduler.setInterval(this.tick, 50)\n        this.emit(CHANGE)\n        this.emitProgress(true)\n    }\n\n    stop() {\n        if (this._interval) {\n            this.bus.scheduler.clearInterval(this._interval)\n            this._interval = undefined\n            this.emitProgress(true)\n            this.emit(CHANGE)\n        }\n    }\n\n    private tick() {\n        if (!this._trace) return\n\n        const busElapsed = this.elapsed\n        const packets = this.trace.packets\n        const packetStart = packets[0]?.timestamp || 0\n\n        while (this._index < packets.length) {\n            const packet = packets[this._index]\n            const packetElapsed = packet.timestamp - packetStart\n            if (packetElapsed > busElapsed) break // wait to catch up\n            // clone packet and send\n            const pkt = packet.clone()\n            pkt.replay = true\n            pkt.timestamp = this._busStartTimestamp + packetElapsed\n            this.bus.processPacket(pkt)\n            this._index++\n        }\n\n        //console.log(`replay ${this._index} ${nframes} frames, ${npackets} packets`)\n        this.emitProgress()\n        if (this._index >= packets.length) this.stop()\n    }\n\n    private emitProgress(force?: boolean) {\n        if (force || this.bus.timestamp - this._lastProgressEmit > 250) {\n            this.emit(PROGRESS, this.progress)\n            this._lastProgressEmit = this.bus.timestamp\n        }\n    }\n}\nexport default TracePlayer\n","import {\n    ControlReg,\n    LoggerReg,\n    SRV_CONTROL,\n    SRV_LOGGER,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport { isInstanceOf, serviceSpecificationFromName } from \"./spec\"\n\n/**\n * @category Trace\n * @internal\n */\nexport type CompiledPacketFilter = (pkt: Packet) => boolean\n\n/**\n * @category Trace\n * @internal\n */\nexport interface PacketFilterProps {\n    announce?: boolean\n    repeatedAnnounce?: boolean\n    resetIn?: boolean\n    minPriority?: boolean\n    requiresAck?: boolean\n    log?: boolean\n    productIdentifiers?: number[]\n    flags?: string[]\n    regGet?: boolean\n    regSet?: boolean\n    devices?: Record<string, { from?: boolean; to?: boolean }>\n    selfDevice?: boolean\n    serviceClasses?: number[]\n    pkts?: string[]\n    before?: number\n    after?: number\n    grouping?: boolean\n    pipes?: boolean\n    port?: number\n    collapseAck?: boolean\n    collapsePipes?: boolean\n    collapseGets?: boolean\n    errors?: boolean\n}\n\n/**\n * @internal\n */\nexport interface PacketFilter {\n    source: string\n    props: PacketFilterProps\n    filter: CompiledPacketFilter\n}\n\n/**\n * Given a filter text, compiles packet filter\n * @param bus\n * @param text\n * @returns\n * @category Trace\n */\nexport function parsePacketFilter(bus: JDBus, text: string): PacketFilter {\n    if (!text) {\n        return {\n            source: text,\n            props: {\n                grouping: true,\n            },\n            filter: () => true,\n        }\n    }\n\n    const flags = new Set<string>()\n    const serviceClasses = new Set<number>()\n    const pkts = new Set<string>()\n    const productIdentifiers = new Set<number>()\n    let repeatedAnnounce: boolean = undefined\n    let announce: boolean = undefined\n    let resetIn: boolean = undefined\n    let minPriority: boolean = undefined\n    let regGet: boolean = undefined\n    let regSet: boolean = undefined\n    let requiresAck: boolean = undefined\n    let log: boolean = undefined\n    let before: number = undefined\n    let after: number = undefined\n    const devices: Record<string, { from: boolean; to: boolean }> = {}\n    let grouping = true\n    let pipes: boolean = undefined\n    let port: number = undefined\n    let collapseAck = true\n    let collapsePipes = true\n    let collapseGets = true\n    let errors: boolean = undefined\n    let selfDevice: boolean = undefined\n    text.split(/\\s+/g).forEach(part => {\n        const [, prefix, , value] =\n            /([a-z\\-_]+)([:=]([^\\s]+))?/.exec(part) || []\n        switch (prefix || \"\") {\n            case \"kind\":\n            case \"k\":\n                if (!value) break\n                flags.add(value.toLowerCase())\n                break\n            case \"service\":\n            case \"srv\": {\n                if (!value) break\n                const service = serviceSpecificationFromName(value)\n                const serviceClass =\n                    service?.classIdentifier || parseInt(value, 16)\n                if (serviceClass !== undefined && !isNaN(serviceClass))\n                    serviceClasses.add(serviceClass)\n                break\n            }\n            case \"announce\":\n            case \"a\":\n                announce = parseBoolean(value)\n                break\n            case \"repeated-announce\":\n            case \"ra\":\n                repeatedAnnounce = parseBoolean(value)\n                break\n            case \"self\":\n                selfDevice = parseBoolean(value)\n                break\n            case \"reset-in\":\n            case \"ri\":\n            case \"resetin\":\n                resetIn = parseBoolean(value)\n                break\n            case \"errors\":\n                errors = parseBoolean(value)\n                break\n            case \"min-priority\":\n            case \"minpri\":\n            case \"minpriority\":\n            case \"mi\":\n                minPriority = parseBoolean(value)\n                break\n            case \"requires-ack\":\n            case \"ack\":\n                requiresAck = parseBoolean(value)\n                break\n            case \"collapse-ack\":\n                collapseAck = parseBoolean(value)\n                break\n            case \"device\":\n            case \"dev\":\n            case \"to\":\n            case \"from\": {\n                if (!value) break\n                // resolve device by name\n                const deviceId = bus\n                    .devices()\n                    .find(\n                        d => d.shortId === value || d.name === value\n                    )?.deviceId\n                if (deviceId) {\n                    const data =\n                        devices[deviceId] ||\n                        (devices[deviceId] = { from: false, to: false })\n                    if (prefix === \"from\") data.from = true\n                    else if (prefix === \"to\") data.to = true\n                }\n                break\n            }\n            case \"pid\":\n            case \"product-identifier\": {\n                if (!value) return\n                // find register\n                const pid = parseInt(value.replace(/^0?x/, \"\"), 16)\n                if (!isNaN(pid)) productIdentifiers.add(pid)\n                break\n            }\n            case \"pkt\":\n            case \"reg\":\n            case \"register\":\n            case \"cmd\":\n            case \"command\":\n            case \"ev\":\n            case \"event\": {\n                if (!value) return\n                // find register\n                const id = parseInt(value.replace(/^0?x/, \"\"), 16)\n                if (!isNaN(id)) pkts.add(id.toString(16))\n                // support name\n                pkts.add(value)\n                break\n            }\n            case \"reg-get\":\n            case \"get\":\n                regGet = parseBoolean(value)\n                break\n            case \"reg-set\":\n            case \"set\":\n                regSet = parseBoolean(value)\n                break\n            case \"log\":\n                log = parseBoolean(value)\n                break\n            case \"before\":\n                before = parseTimestamp(value)\n                break\n            case \"after\":\n                after = parseTimestamp(value)\n                break\n            case \"grouping\":\n                grouping = parseBoolean(value)\n                break\n            case \"pipes\":\n                pipes = parseBoolean(value)\n                break\n            case \"collapse-pipe\":\n            case \"collapse-pipes\":\n                collapsePipes = parseBoolean(value)\n                break\n            case \"collapse-get\":\n            case \"collapse-gets\":\n                collapseGets = parseBoolean(value)\n                break\n            case \"port\":\n                port = parseInt(value)\n                break\n        }\n    })\n\n    const props = {\n        announce,\n        repeatedAnnounce,\n        resetIn,\n        minPriority,\n        requiresAck,\n        collapseAck,\n        log,\n        productIdentifiers:\n            !!productIdentifiers.size && Array.from(productIdentifiers.keys()),\n        flags: !!flags.size && Array.from(flags.keys()),\n        regGet,\n        regSet,\n        devices,\n        selfDevice,\n        serviceClasses:\n            !!serviceClasses.size && Array.from(serviceClasses.keys()),\n        pkts: !!pkts.size && Array.from(pkts.keys()),\n        before,\n        after,\n        grouping,\n        pipes,\n        collapsePipes,\n        collapseGets,\n        port,\n        errors,\n    }\n    const filter = compileFilter(props)\n    return {\n        source: text,\n        props,\n        filter,\n    }\n    function parseBoolean(value: string) {\n        if (value === \"false\" || value === \"no\") return false\n        else if (value === \"true\" || value === \"yes\" || !value) return true\n        else return undefined\n    }\n    function parseTimestamp(value: string) {\n        const t = parseInt(value)\n        return isNaN(t) ? undefined : t\n    }\n}\n\nfunction compileFilter(props: PacketFilterProps) {\n    const {\n        announce,\n        repeatedAnnounce,\n        resetIn,\n        minPriority,\n        requiresAck,\n        log,\n        productIdentifiers,\n        flags,\n        regGet,\n        regSet,\n        devices,\n        selfDevice,\n        serviceClasses,\n        pkts,\n        before,\n        after,\n        pipes,\n        port,\n        errors,\n    } = props\n\n    const filters: CompiledPacketFilter[] = []\n    if (before !== undefined) filters.push(pkt => pkt.timestamp <= before)\n    if (after !== undefined) filters.push(pkt => pkt.timestamp >= after)\n    if (announce !== undefined) filters.push(pkt => pkt.isAnnounce === announce)\n    if (repeatedAnnounce !== undefined)\n        filters.push(\n            pkt =>\n                (!pkt.isAnnounce || pkt.isRepeatedAnnounce) === repeatedAnnounce\n        )\n    if (resetIn !== undefined)\n        filters.push(\n            pkt =>\n                !!(\n                    pkt.isRegisterSet &&\n                    pkt.serviceClass === SRV_CONTROL &&\n                    pkt.registerIdentifier === ControlReg.ResetIn\n                ) === resetIn\n        )\n    if (minPriority !== undefined)\n        filters.push(\n            pkt =>\n                (pkt.isRegisterSet &&\n                    pkt.serviceClass == SRV_LOGGER &&\n                    pkt.registerIdentifier === LoggerReg.MinPriority) ===\n                minPriority\n        )\n    if (requiresAck !== undefined)\n        filters.push(pkt => pkt.requiresAck === requiresAck)\n    if (flags) filters.push(pkt => hasAnyFlag(pkt))\n    if (pipes !== undefined) filters.push(pkt => pkt.isPipe)\n    if (port !== undefined) filters.push(pkt => pkt.pipePort === port)\n\n    if (regGet !== undefined && regSet !== undefined)\n        filters.push(\n            pkt => pkt.isRegisterGet === regGet && pkt.isRegisterSet === regSet\n        )\n    else if (regGet !== undefined)\n        filters.push(pkt => pkt.isRegisterGet === regGet)\n    else if (regSet !== undefined)\n        filters.push(pkt => pkt.isRegisterSet === regSet)\n\n    if (log !== undefined)\n        filters.push(\n            pkt => (pkt.serviceClass === SRV_LOGGER && pkt.isReport) === log\n        )\n    if (selfDevice !== undefined) {\n        filters.push(pkt => {\n            const { device } = pkt\n            if (!device) return true\n            return (device === device.bus.selfDevice) === selfDevice\n        })\n    }\n    if (Object.keys(devices).length)\n        filters.push(pkt => {\n            if (!pkt.device) return false\n            const f = devices[pkt.device.deviceId]\n            return (\n                !!f && (!f.from || !pkt.isCommand) && (!f.to || pkt.isCommand)\n            )\n        })\n    if (serviceClasses) {\n        filters.push(pkt =>\n            serviceClasses.some(serviceClass =>\n                isInstanceOf(pkt.serviceClass, serviceClass)\n            )\n        )\n    }\n    if (pkts) {\n        filters.push(\n            pkt =>\n                pkts.indexOf(pkt.decoded?.info.identifier.toString(16)) > -1 ||\n                pkts.indexOf(pkt.decoded?.info.name) > -1\n        )\n    }\n    if (productIdentifiers)\n        filters.push(pkt => {\n            const fwid = pkt.device?.productIdentifier\n            return fwid === undefined || productIdentifiers.indexOf(fwid) > -1\n        })\n\n    if (errors !== undefined)\n        filters.push(pkt => !!pkt.decoded?.error === errors)\n\n    const filter: CompiledPacketFilter = (pkt: Packet) =>\n        filters.every(filter => filter(pkt))\n    return filter\n\n    function hasAnyFlag(pkt: Packet) {\n        const k = pkt.decoded?.info.kind\n        return !!k && flags.indexOf(k) > -1\n    }\n}\n","import {\n    LIGHT_PROG_COL1_SET,\n    LIGHT_PROG_FADE,\n    LIGHT_PROG_FADE_HSV,\n    LIGHT_PROG_MODE,\n    LIGHT_PROG_MODE1,\n    LIGHT_PROG_RANGE,\n    LIGHT_PROG_ROTATE_BACK,\n    LIGHT_PROG_ROTATE_FWD,\n    LIGHT_PROG_SET_ALL,\n    LIGHT_PROG_SHOW,\n} from \"./lightconstants\"\nimport { fromHex } from \"./utils\"\n\nfunction cmdCode(cmd: string) {\n    switch (cmd) {\n        case \"setall\":\n            return LIGHT_PROG_SET_ALL\n        case \"fade\":\n            return LIGHT_PROG_FADE\n        case \"fadehsv\":\n            return LIGHT_PROG_FADE_HSV\n        case \"rotfwd\":\n            return LIGHT_PROG_ROTATE_FWD\n        case \"rotback\":\n            return LIGHT_PROG_ROTATE_BACK\n        case \"show\":\n        case \"wait\":\n            return LIGHT_PROG_SHOW\n        case \"range\":\n            return LIGHT_PROG_RANGE\n        case \"mode\":\n            return LIGHT_PROG_MODE\n        case \"tmpmode\":\n            return LIGHT_PROG_MODE1\n        case \"setone\":\n            return LIGHT_PROG_COL1_SET\n        case \"mult\":\n            return 0x100\n        default:\n            return undefined\n    }\n}\n\nfunction isWhiteSpace(code: number) {\n    return code == 32 || code == 13 || code == 10 || code == 9\n}\n\n/**\n * Encodes a light command into a buffer\n * @param format\n * @param args\n * @returns\n * @category Data Packing\n */\nexport function lightEncode(format: string, args: (number | number[])[]) {\n    // tokens are white-space separated\n    // % - number from args[]\n    // # - color from args[]\n    // #0123ff - color\n    // 123 - number\n    // commands: set, fade, fadehsv, rotfwd, rotback, pause\n    // fadehsv 0 12 #00ffff #ffffff\n\n    const outarr: number[] = []\n    let colors: number[] = []\n    let pos = 0\n    let currcmd = 0\n\n    function pushNumber(n: number) {\n        if (n == null || (n | 0) != n || n < 0 || n >= 16383)\n            throw new Error(\"number out of range: \" + n)\n        if (n < 128) outarr.push(n)\n        else {\n            outarr.push(0x80 | (n >> 8))\n            outarr.push(n & 0xff)\n        }\n    }\n\n    function flush() {\n        if (currcmd == 0xcf) {\n            if (colors.length != 1) throw new Error(\"setone requires 1 color\")\n        } else {\n            if (colors.length == 0) return\n            if (colors.length <= 3) outarr.push(0xc0 | colors.length)\n            else {\n                outarr.push(0xc0)\n                outarr.push(colors.length)\n            }\n        }\n        for (const c of colors) {\n            outarr.push((c >> 16) & 0xff)\n            outarr.push((c >> 8) & 0xff)\n            outarr.push((c >> 0) & 0xff)\n        }\n        colors = []\n    }\n\n    function nextToken() {\n        while (isWhiteSpace(format.charCodeAt(pos))) pos++\n        const beg = pos\n        while (pos < format.length && !isWhiteSpace(format.charCodeAt(pos)))\n            pos++\n        return format.slice(beg, pos)\n    }\n\n    while (pos < format.length) {\n        const token = nextToken()\n        const t0 = token.charCodeAt(0)\n        if (97 <= t0 && t0 <= 122) {\n            // a-z\n            flush()\n            currcmd = cmdCode(token)\n            if (currcmd == undefined)\n                throw new Error(\"unknown light command: \" + token)\n            if (currcmd == 0x100) {\n                const f = parseFloat(nextToken())\n                if (isNaN(f) || f < 0 || f > 2)\n                    throw new Error(\"expecting scale\")\n                outarr.push(0xd8) // tmpmode\n                outarr.push(3) // mult\n                outarr.push(0xd0) // setall\n                const mm = Math.round(128 * f) & 0xff\n                outarr.push(0xc1)\n                outarr.push(mm)\n                outarr.push(mm)\n                outarr.push(mm)\n            } else {\n                outarr.push(currcmd)\n            }\n        } else if (48 <= t0 && t0 <= 57) {\n            // 0-9\n            pushNumber(parseInt(token))\n        } else if (t0 == 37) {\n            // %\n            if (args.length == 0) throw new Error(\"out of args, %\")\n            const v = args.shift()\n            if (typeof v != \"number\") throw new Error(\"expecting number\")\n            pushNumber(v)\n        } else if (t0 == 35) {\n            // #\n            if (token.length == 1) {\n                if (args.length == 0) throw new Error(\"out of args, #\")\n                const v = args.shift()\n                if (typeof v === \"number\") colors.push(v)\n                else if (Array.isArray(v)) for (const vv of v) colors.push(vv)\n                else throw Error(\"invalid number \" + v)\n            } else {\n                if (token.length == 7) {\n                    const b = fromHex(token.slice(1))\n                    const c = (b[0] << 16) | (b[1] << 8) | b[2]\n                    colors.push(c)\n                } else {\n                    throw new Error(\"invalid color: \" + token)\n                }\n            }\n        }\n    }\n    flush()\n\n    return new Uint8Array(outarr)\n}\n","import JDBus from \"./bus\"\nimport { JDClient } from \"./client\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND } from \"./constants\"\nimport Packet from \"./packet\"\nimport { randomDeviceId } from \"./random\"\n\n/**\n * A client that bridges received and sent packets to a parent iframe.\n * @category JDOM\n */\nexport abstract class JDBridge extends JDClient {\n    private _bus: JDBus\n    readonly bridgeId = `bridge-` + randomDeviceId()\n    packetSent = 0\n    packetProcessed = 0\n\n    constructor() {\n        super()\n        this.handleSendPacket = this.handleSendPacket.bind(this)\n    }\n\n    get bus() {\n        return this._bus\n    }\n\n    set bus(newBus: JDBus) {\n        if (newBus !== this._bus) {\n            if (this._bus) this.unmount()\n            this._bus = newBus\n            if (this._bus) {\n                this.mount(\n                    this._bus.subscribe(PACKET_PROCESS, this.handleSendPacket)\n                )\n                this.mount(\n                    this._bus.subscribe(PACKET_SEND, this.handleSendPacket)\n                )\n                this.mount(this._bus.addBridge(this))\n            }\n            this.emit(CHANGE)\n        }\n    }\n\n    /**\n     * Receives frame data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    protected receiveFrame(data: Uint8Array) {\n        if (!this._bus) return // disconnected\n\n        // try frame format (sent by hardware, hosts)\n        const pkts = Packet.fromFrame(data, this.bus.timestamp)\n        this.dispatchPackets(pkts)\n    }\n\n    /**\n     * Receives packet data payload and injects it into the bus\n     * @param data\n     * @returns\n     */\n    protected receivePacket(data: Uint8Array) {\n        if (!this._bus) return // disconnected\n\n        // try as a single packet (send by the MakeCode simulator)\n        const pkt = Packet.fromBinary(data, this.bus.timestamp)\n        if (pkt) this.dispatchPackets([pkt])\n    }\n\n    private dispatchPackets(pkts: Packet[]) {\n        // bail out if no packets\n        if (!pkts?.length) return\n\n        this.packetProcessed += pkts.length\n\n        for (const pkt of pkts) {\n            // tracing the source of packets to avoid self-resending\n            pkt.sender = this.bridgeId\n            // send to native bus\n            this.bus.sendPacketAsync(pkt)\n            // send to javascript bus\n            this.bus.processPacket(pkt)\n        }\n    }\n\n    private handleSendPacket(pkt: Packet) {\n        if (!this._bus || pkt.sender === this.bridgeId) return\n        this.packetSent++\n        this.sendPacket(pkt.toBuffer())\n    }\n\n    /**\n     * Sends packet data over the bridge\n     * @param pkt\n     */\n    protected abstract sendPacket(data: Uint8Array): void\n}\nexport default JDBridge\n","import Packet from \"../packet\"\nimport Flags from \"../flags\"\nimport { bufferConcat } from \"../utils\"\nimport {\n    BLUETOOTH_JACDAC_TX_CHARACTERISTIC,\n    BLUETOOTH_JACDAC_RX_CHARACTERISTIC,\n    BLUETOOTH_JACDAC_SERVICE,\n    BLUETOOTH_TRANSPORT,\n} from \"../constants\"\nimport Transport from \"./transport\"\n\nconst JD_BLE_FIRST_CHUNK_FLAG = 0x80\n\n/**\n * Indicates with Web Bluetooth transport are enabled\n * @category Transport\n */\nexport function isWebBluetoothEnabled(): boolean {\n    return !!Flags.webBluetooth\n}\n\n/**\n * Indicates with Web Bluetooth is supported in this environment\n * @category Transport\n */\nexport function isWebBluetoothSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.bluetooth &&\n            !!navigator.bluetooth.requestDevice\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nfunction bleRequestDevice(\n    options?: RequestDeviceOptions\n): Promise<BluetoothDevice> {\n    // disabled\n    if (!Flags.webBluetooth) return Promise.resolve(undefined)\n\n    try {\n        console.debug(`bluetooth request`, { options })\n        return navigator?.bluetooth?.requestDevice?.(options)\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return undefined\n    }\n}\n\nfunction bleGetDevices(): Promise<BluetoothDevice[]> {\n    // disabled\n    if (!Flags.webBluetooth) return Promise.resolve([])\n\n    try {\n        return navigator?.bluetooth?.getDevices() || Promise.resolve([])\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return Promise.resolve([])\n    }\n}\n\nclass BluetoothTransport extends Transport {\n    private _device: BluetoothDevice\n    private _server: BluetoothRemoteGATTServer\n    private _service: BluetoothRemoteGATTService\n    private _rxCharacteristic: BluetoothRemoteGATTCharacteristic\n    private _txCharacteristic: BluetoothRemoteGATTCharacteristic\n    private _rxBuffer: Uint8Array\n    private _rxChunkCounter: number\n\n    constructor() {\n        super(BLUETOOTH_TRANSPORT, { checkPulse: true })\n\n        this.handleDisconnected = this.handleDisconnected.bind(this)\n        this.handleCharacteristicChanged =\n            this.handleCharacteristicChanged.bind(this)\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        // get a device\n        if (background) {\n            const devices = await bleGetDevices()\n            this._device = devices?.[0]\n        } else {\n            const device = await bleRequestDevice({\n                filters: [{ namePrefix: \"BBC micro:bit\" }],\n                optionalServices: [BLUETOOTH_JACDAC_SERVICE],\n            })\n            this._device = device\n        }\n\n        if (!this._device?.gatt) throw new Error(\"Device not found\")\n\n        // listen for disconnection\n        this._device.addEventListener(\n            \"gattserverdisconnected\",\n            this.handleDisconnected,\n            false\n        )\n\n        // connect to gatt\n        this._server = await this._device.gatt.connect()\n        // connect to service\n        this._service = await this._server.getPrimaryService(\n            BLUETOOTH_JACDAC_SERVICE\n        )\n        // connect to characteristic\n        this._rxCharacteristic = await this._service.getCharacteristic(\n            BLUETOOTH_JACDAC_RX_CHARACTERISTIC\n        )\n\n        this._txCharacteristic = await this._service.getCharacteristic(\n            BLUETOOTH_JACDAC_TX_CHARACTERISTIC\n        )\n        // listen for incoming packet\n        this._rxCharacteristic.addEventListener(\n            \"characteristicvaluechanged\",\n            this.handleCharacteristicChanged,\n            false\n        )\n        // start listening\n        await this._rxCharacteristic.startNotifications()\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this._txCharacteristic) {\n            console.debug(`trying to send Bluetooth packet while disconnected`)\n            return\n        }\n\n        const data = p.toBuffer()\n        const length = data.length\n\n        const totalChunks = Math.ceil(data.length / 18)\n        let remainingChunks = totalChunks == 0 ? 0 : totalChunks - 1\n        let sent = 0\n        while (sent < length) {\n            const n = Math.min(18, length - sent)\n            const chunk = data.slice(sent, sent + n)\n            const header = new Uint8Array(2)\n            header[0] = totalChunks & 0x7f\n\n            if (sent == 0) header[0] |= JD_BLE_FIRST_CHUNK_FLAG\n\n            header[1] = remainingChunks\n            this._txCharacteristic.writeValueWithoutResponse(\n                bufferConcat(header, chunk)\n            )\n            sent += n\n            remainingChunks = remainingChunks == 0 ? 0 : remainingChunks - 1\n            console.log(\n                `chunk: ${chunk.toString()} [${remainingChunks} chunks remaining]`\n            )\n        }\n    }\n\n    protected async transportDisconnectAsync() {\n        if (!this._device) return\n\n        console.debug(`ble: disconnecting`)\n        try {\n            this._rxCharacteristic?.removeEventListener(\n                \"characteristicvaluechanged\",\n                this.handleCharacteristicChanged\n            )\n            this._device?.removeEventListener(\n                \"gattserverdisconnected\",\n                this.handleDisconnected\n            )\n            this._server.disconnect()\n        } finally {\n            this._rxCharacteristic = undefined\n            this._txCharacteristic = undefined\n            this._service = undefined\n            this._server = undefined\n            this._device = undefined\n            this._rxBuffer = undefined\n        }\n    }\n\n    private handleDisconnected() {\n        // start disconnecting\n        this.disconnect()\n    }\n\n    private handleCharacteristicChanged() {\n        const data = new Uint8Array(this._rxCharacteristic.value.buffer)\n        const packetData = data.slice(2)\n        console.log(`received length ${data.length}`)\n\n        if (data[0] & JD_BLE_FIRST_CHUNK_FLAG) {\n            if (this._rxBuffer)\n                console.error(\n                    `Dropped buffer. Chunks remaining: ${this._rxChunkCounter}`\n                )\n            this._rxBuffer = new Uint8Array()\n            this._rxChunkCounter = data[0] & 0x7f\n            console.log(`Initial chunk counter: ${this._rxChunkCounter}`)\n        }\n\n        this._rxChunkCounter =\n            this._rxChunkCounter == 0 ? 0 : this._rxChunkCounter - 1\n        console.log(`after modification chunk counter: ${this._rxChunkCounter}`)\n\n        if (data[1] !== this._rxChunkCounter)\n            console.error(\n                `Data out of order. Expected chunk: ${this._rxChunkCounter} Got chunk: ${data[1]}`\n            )\n        else this._rxBuffer = bufferConcat(this._rxBuffer, packetData)\n\n        if (this._rxChunkCounter == 0) {\n            const pkt = Packet.fromBinary(this._rxBuffer, this.bus.timestamp)\n            console.log(`processed packet ${pkt}`)\n            pkt.sender = BLUETOOTH_TRANSPORT\n            this.bus.processPacket(pkt)\n            this._rxBuffer = undefined\n            this._rxChunkCounter = 0\n        }\n    }\n}\n\n/**\n * Creates a transport that uses Web Bluetooth\n * @category Transport\n */\nexport function createBluetoothTransport(): Transport {\n    return isWebBluetoothSupported() && new BluetoothTransport()\n}\n","import Proto from \"./proto\"\nimport {\n    throwError,\n    assert,\n    PromiseBuffer,\n    PromiseQueue,\n    memcpy,\n    write32,\n    write16,\n    read16,\n    encodeU32LE,\n    read32,\n    bufferToString,\n} from \"../utils\"\n\n// see https://github.com/microsoft/uf2/blob/main/hf2.md for full spec\nexport const HF2_DEVICE_MAJOR = 42\nexport const HF2_CMD_BININFO = 0x0001 // no arguments\nexport const HF2_MODE_BOOTLOADER = 0x01\nexport const HF2_MODE_USERSPACE = 0x02\n/*\nstruct HF2_BININFO_Result {\n    uint32_t mode;\n    uint32_t flash_page_size;\n    uint32_t flash_num_pages;\n    uint32_t max_message_size;\n};\n*/\n\nexport const HF2_CMD_INFO = 0x0002\n// no arguments\n// results is utf8 character array\n\nexport const HF2_CMD_RESET_INTO_APP = 0x0003 // no arguments, no result\n\nexport const HF2_CMD_RESET_INTO_BOOTLOADER = 0x0004 // no arguments, no result\n\nexport const HF2_CMD_START_FLASH = 0x0005 // no arguments, no result\n\nexport const HF2_CMD_WRITE_FLASH_PAGE = 0x0006\n/*\nstruct HF2_WRITE_FLASH_PAGE_Command {\n    uint32_t target_addr;\n    uint32_t data[flash_page_size];\n};\n*/\n// no result\n\nexport const HF2_CMD_CHKSUM_PAGES = 0x0007\n/*\nstruct HF2_CHKSUM_PAGES_Command {\n    uint32_t target_addr;\n    uint32_t num_pages;\n};\nstruct HF2_CHKSUM_PAGES_Result {\n    uint16_t chksums[num_pages];\n};\n*/\n\nexport const HF2_CMD_READ_WORDS = 0x0008\n/*\nstruct HF2_READ_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n};\nstruct HF2_READ_WORDS_Result {\n    uint32_t words[num_words];\n};\n*/\n\nexport const HF2_CMD_WRITE_WORDS = 0x0009\n/*\nstruct HF2_WRITE_WORDS_Command {\n    uint32_t target_addr;\n    uint32_t num_words;\n    uint32_t words[num_words];\n};\n*/\n// no result\n\nexport const HF2_CMD_DMESG = 0x0010\n// no arguments\n// results is utf8 character array\n\nexport const HF2_FLAG_SERIAL_OUT = 0x80\nexport const HF2_FLAG_SERIAL_ERR = 0xc0\nexport const HF2_FLAG_CMDPKT_LAST = 0x40\nexport const HF2_FLAG_CMDPKT_BODY = 0x00\nexport const HF2_FLAG_MASK = 0xc0\nexport const HF2_SIZE_MASK = 63\n\nexport const HF2_STATUS_OK = 0x00\nexport const HF2_STATUS_INVALID_CMD = 0x01\nexport const HF2_STATUS_EXEC_ERR = 0x02\nexport const HF2_STATUS_EVENT = 0x80\n\n// the eventId is overlayed on the tag+status; the mask corresponds\n// to the HF2_STATUS_EVENT above\nexport const HF2_EV_MASK = 0x800000\n\nexport const HF2_CMD_JDS_CONFIG = 0x0020\nexport const HF2_CMD_JDS_SEND = 0x0021\nexport const HF2_EV_JDS_PACKET = 0x800020\n\nexport interface HF2_IO {\n    onData: (v: Uint8Array) => void\n    onError: (e: Error) => void\n    connectAsync(background: boolean): Promise<Proto>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any): void\n    disconnectAsync(): Promise<void>\n    error(msg: string, code?: string): void\n    sendPacketAsync(pkt: Uint8Array): Promise<void>\n}\n\nexport class HF2Proto implements Proto {\n    eventHandlers: Record<string, (buf: Uint8Array) => void> = {}\n    msgs = new PromiseBuffer<Uint8Array>()\n    cmdSeq = (Math.random() * 0xffff) | 0\n    private lock = new PromiseQueue()\n\n    constructor(private io: HF2_IO) {\n        let frames: Uint8Array[] = []\n\n        io.onData = buf => {\n            const tp = buf[0] & HF2_FLAG_MASK\n            const len = buf[0] & 63\n            //console.log(`msg tp=${tp} len=${len}`)\n            const frame = new Uint8Array(len)\n            memcpy(frame, 0, buf, 1, len)\n            if (tp & HF2_FLAG_SERIAL_OUT) {\n                this.onSerial(frame, tp == HF2_FLAG_SERIAL_ERR)\n                return\n            }\n            frames.push(frame)\n            if (tp == HF2_FLAG_CMDPKT_BODY) {\n                return\n            } else {\n                assert(tp == HF2_FLAG_CMDPKT_LAST)\n                let total = 0\n                for (const f of frames) total += f.length\n                const r = new Uint8Array(total)\n                let ptr = 0\n                for (const f of frames) {\n                    memcpy(r, ptr, f)\n                    ptr += f.length\n                }\n                frames = []\n                if (r[2] & HF2_STATUS_EVENT) {\n                    // asynchronous event\n                    this.handleEvent(r)\n                } else {\n                    this.msgs.push(r)\n                }\n            }\n        }\n    }\n\n    error(m: string) {\n        return this.io?.error(m)\n    }\n\n    talkAsync(cmd: number, data?: Uint8Array) {\n        if (!this.io) console.error(\"rogue hf2 instance\")\n\n        let len = 8\n        if (data) len += data.length\n        const pkt = new Uint8Array(len)\n        const seq = ++this.cmdSeq & 0xffff\n        write32(pkt, 0, cmd)\n        write16(pkt, 4, seq)\n        write16(pkt, 6, 0)\n        if (data) memcpy(pkt, 8, data, 0, data.length)\n        let numSkipped = 0\n        const handleReturnAsync = (): Promise<Uint8Array> =>\n            this.msgs\n                .shiftAsync(1000) // we wait up to a second\n                .then(res => {\n                    if (read16(res, 0) != seq) {\n                        if (numSkipped < 3) {\n                            numSkipped++\n                            this.io.log(\n                                `message out of sync, (${seq} vs ${read16(\n                                    res,\n                                    0\n                                )}); will re-try`\n                            )\n                            return handleReturnAsync()\n                        }\n                        this.error(\"out of sync\")\n                    }\n                    let info = \"\"\n                    if (res[3]) info = \"; info=\" + res[3]\n                    switch (res[2]) {\n                        case HF2_STATUS_OK:\n                            return res.slice(4)\n                        case HF2_STATUS_INVALID_CMD:\n                            this.error(\"invalid command\" + info)\n                            break\n                        case HF2_STATUS_EXEC_ERR:\n                            this.error(\"execution error\" + info)\n                            break\n                        default:\n                            this.error(\"error \" + res[2] + info)\n                            break\n                    }\n                    return null\n                })\n                .catch(e => {\n                    console.debug(`HF2: ${e.message}; cmd=${cmd}`)\n                    this.error(e)\n                    return null\n                })\n\n        return this.lock.enqueue(\"talk\", () =>\n            this.sendMsgAsync(pkt).then(handleReturnAsync)\n        )\n    }\n\n    private sendMsgAsync(buf: Uint8Array, serial = 0) {\n        // Util.assert(buf.length <= this.maxMsgSize)\n        const frame = new Uint8Array(64)\n        const loop = (pos: number): Promise<void> => {\n            let len = buf.length - pos\n            if (len <= 0) return Promise.resolve()\n            if (len > 63) {\n                len = 63\n                frame[0] = HF2_FLAG_CMDPKT_BODY\n            } else {\n                frame[0] = HF2_FLAG_CMDPKT_LAST\n            }\n            if (serial)\n                frame[0] =\n                    serial == 1 ? HF2_FLAG_SERIAL_OUT : HF2_FLAG_SERIAL_ERR\n            frame[0] |= len\n            for (let i = 0; i < len; ++i) frame[i + 1] = buf[pos + i]\n            if (!this.io) return Promise.resolve()\n            return this.io.sendPacketAsync(frame).then(() => loop(pos + len))\n        }\n        return loop(0)\n    }\n\n    onEvent(id: number, f: (buf: Uint8Array) => void) {\n        assert(!!(id & HF2_EV_MASK))\n        this.eventHandlers[id + \"\"] = f\n    }\n\n    onJDMessage(f: (buf: Uint8Array) => void) {\n        this.talkAsync(HF2_CMD_JDS_CONFIG, encodeU32LE([1]))\n        this.onEvent(HF2_EV_JDS_PACKET, f)\n    }\n\n    sendJDMessageAsync(buf: Uint8Array) {\n        return this.talkAsync(HF2_CMD_JDS_SEND, buf).then(() => {})\n    }\n\n    handleEvent(buf: Uint8Array) {\n        const evid = read32(buf, 0)\n        const f = this.eventHandlers[evid + \"\"]\n        if (f) {\n            f(buf.slice(4))\n        } else {\n            this.io.log(\"unhandled event: \" + evid.toString(16))\n            // We can get these before we're ready to recv; this is fine.\n            //if (evid === 0x800020) {\n            //    this.io.onError(new Error(\"hf2 corrupted\"))\n            //}\n        }\n    }\n    onSerial(data: Uint8Array, iserr: boolean) {\n        const msg = `hf2 serial: ${bufferToString(data)}`\n        if (iserr) console.warn(msg)\n        else console.log(msg)\n    }\n\n    async postConnectAsync() {\n        await this.checkMode()\n        const buf = await this.talkAsync(HF2_CMD_INFO)\n        this.io.log(\"Connected to: \" + bufferToString(buf))\n    }\n\n    private async checkMode() {\n        // first check that we are not talking to a bootloader\n        const info = await this.talkAsync(HF2_CMD_BININFO)\n        const mode = read32(info, 0)\n        this.io.log(`hf2 mode ${mode}`)\n        if (mode == HF2_MODE_USERSPACE) {\n            // all good\n            this.io.log(`device in user-space mode`)\n        } else if (mode == HF2_MODE_BOOTLOADER) {\n            this.io.log(\n                `device in bootloader mode, reseting into user-space mode`\n            )\n            await this.talkAsync(HF2_CMD_RESET_INTO_APP)\n            // and fail\n            throwError(\"Device in bootloader mode\")\n        } else {\n            // unknown mdoe\n            throwError(\"Unknown device operation mode\")\n        }\n    }\n\n    async disconnectAsync() {\n        if (this.io) {\n            const io = this.io\n            this.io = undefined\n            await io.disconnectAsync()\n        }\n    }\n}\n","import Proto from \"./proto\"\nimport USBIO from \"./usbio\"\nimport {\n    delay,\n    PromiseQueue,\n    write32,\n    write16,\n    read32,\n    uint8ArrayToString,\n    fromHex,\n    bufferConcat,\n    fromUTF8,\n} from \"../utils\"\nimport Flags from \"../flags\"\nimport {\n    ERROR_MICROBIT_INVALID_MEMORY,\n    ERROR_MICROBIT_JACDAC_MISSING,\n    ERROR_MICROBIT_UNKNOWN,\n    ERROR_MICROBIT_V1,\n} from \"../constants\"\n\nexport const MICROBIT_V2_VENDOR_ID = 3368\nexport const MICROBIT_V2_PRODUCT_ID = 516\n\ninterface SendItem {\n    buf: Uint8Array\n    cb: () => void\n}\nexport class CMSISProto implements Proto {\n    private readonly q = new PromiseQueue()\n    private sendQ: SendItem[] = []\n    private irqn: number\n    private xchgAddr: number\n    private _onJDMsg: (buf: Uint8Array) => void\n    private pendingSerial: Uint8Array\n    private lastPendingSerial: number\n    private lastSend: number\n    private lastXchg: number\n    private recvTo: () => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _lastInterval: any\n\n    constructor(private io: USBIO) {}\n\n    private startRecvToLoop() {\n        console.assert(!this._lastInterval)\n\n        let last = this.recvTo\n        // do not use bus schedulere here\n        this._lastInterval = setInterval(() => {\n            if (!this.io) this.stopRecvToLoop()\n            if (last && last == this.recvTo) {\n                last()\n            }\n            last = this.recvTo\n        }, 200)\n    }\n\n    private stopRecvToLoop() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval)\n            this._lastInterval = undefined\n        }\n    }\n\n    private error(msg: string, code?: string) {\n        this.stopRecvToLoop()\n        this.io?.error(msg, code)\n        // clear state\n        this.xchgAddr = null\n    }\n\n    onJDMessage(f: (buf: Uint8Array) => void): void {\n        this._onJDMsg = f\n    }\n\n    sendJDMessageAsync(buf: Uint8Array): Promise<void> {\n        if (buf.length & 3) {\n            const tmp = new Uint8Array((buf.length + 3) & ~3)\n            tmp.set(buf)\n            buf = tmp\n        }\n        return new Promise<void>(resolve => {\n            this.sendQ.push({\n                buf,\n                cb: resolve,\n            })\n        })\n    }\n\n    async disconnectAsync() {\n        if (this.io) {\n            console.debug(`micro:bit: disconnect proto`)\n            this.stopRecvToLoop()\n            this._onJDMsg = () => console.warn(\"rogue jd callback\")\n            const io = this.io\n            this.io = undefined\n            if (io) await io.disconnectAsync()\n        }\n    }\n\n    private recvAsync() {\n        return new Promise<Uint8Array>((resolve, reject) => {\n            // io may have been cleared\n            if (!this.io) {\n                reject(new Error(\"USB disconnected\"))\n                return\n            }\n            this.io.recvPacketAsync().then(\n                v => {\n                    const f = resolve\n                    resolve = null\n                    if (f) {\n                        this.recvTo = null\n                        f(v)\n                    }\n                },\n                err => {\n                    if (resolve) {\n                        resolve = null\n                        this.recvTo = null\n                        reject(err)\n                    }\n                }\n            )\n            this.recvTo = () => {\n                if (resolve) {\n                    resolve = null\n                    reject(new Error(\"CMSIS recv timeout\"))\n                }\n            }\n        })\n    }\n\n    private talkAsync(cmds: ArrayLike<number>) {\n        return this.q.enqueue(\"talk\", async () => {\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\")\n                return // disconnected\n            }\n            //console.log(\"TALK\", cmds)\n            await this.io.sendPacketAsync(new Uint8Array(cmds))\n            if (!this.io) {\n                this.error(\"micro:bit disconnected\")\n                return // disconnected\n            }\n            let response = await this.recvAsync()\n            if (response[0] !== cmds[0]) {\n                const msg = `Bad response for ${cmds[0]} -> ${response[0]}, try again`\n                console.debug(msg, { cmds, response })\n                try {\n                    response = await this.recvAsync()\n                } catch (e) {\n                    // throw the original error in case of timeout\n                    this.error(msg)\n                }\n                if (response[0] !== cmds[0]) this.error(msg)\n            }\n            return response\n        })\n    }\n\n    private talkHexAsync(str: string) {\n        return this.talkAsync(fromHex(str.replace(/ /g, \"\")))\n    }\n\n    private decodeString(buf: Uint8Array) {\n        const len = buf[1]\n        const ss = buf.slice(2, 2 + len)\n        return uint8ArrayToString(ss)\n    }\n\n    private dapDelay(micros: number) {\n        const cmd = [0x09, 0, 0]\n        if (micros > 0xffff) this.error(\"too large delay\")\n        write16(cmd, 1, micros)\n        return this.talkAsync(cmd)\n    }\n\n    private async setBaudRate() {\n        const setBaud = [0x82, 0, 0, 0, 0]\n        write32(setBaud, 1, 115200)\n        await this.talkAsync(setBaud) // this reset the board on 0255\n    }\n\n    private async xchgLoop() {\n        let currSend: SendItem\n        while (this.io) {\n            const now = Date.now()\n            if (\n                Flags.diagnostics &&\n                this.lastXchg &&\n                now - this.lastXchg > 50\n            ) {\n                console.warn(\"slow xchg: \" + (now - this.lastXchg) + \"ms\")\n            }\n            this.lastXchg = now\n\n            let numev = 0\n            let inp = await this.readBytes(this.xchgAddr + 12, 256, true)\n            if (inp[2]) {\n                await this.writeWord(this.xchgAddr + 12, 0)\n                await this.triggerIRQ()\n                inp = inp.slice(0, inp[2] + 12)\n                this._onJDMsg(inp)\n                numev++\n            }\n\n            let sendFree = false\n            if (currSend) {\n                const send = await this.readBytes(this.xchgAddr + 12 + 256, 4)\n                if (!send[2]) {\n                    currSend.cb()\n                    currSend = null\n                    sendFree = true\n                    numev++\n                }\n            }\n\n            if (!currSend && this.sendQ.length) {\n                if (!sendFree) {\n                    const send = await this.readBytes(\n                        this.xchgAddr + 12 + 256,\n                        4\n                    )\n                    if (!send[2]) sendFree = true\n                }\n                if (sendFree) {\n                    currSend = this.sendQ.shift()\n                    const bbody = currSend.buf.slice(4)\n                    await this.writeWords(\n                        this.xchgAddr + 12 + 256 + 4,\n                        new Uint32Array(bbody.buffer)\n                    )\n                    const bhead = currSend.buf.slice(0, 4)\n                    await this.writeWords(\n                        this.xchgAddr + 12 + 256,\n                        new Uint32Array(bhead.buffer)\n                    )\n                    await this.triggerIRQ()\n                    this.lastSend = Date.now()\n                    numev++\n                } else {\n                    if (this.lastSend) {\n                        const d = Date.now() - this.lastSend\n                        if (d > 50) {\n                            this.lastSend = 0\n                            console.warn(\"failed to send packet fast enough\")\n                        }\n                    }\n                }\n            }\n\n            if (await this.readSerial()) numev++\n\n            if (numev == 0) await this.dapDelay(1000)\n        }\n    }\n\n    private async readSerial() {\n        let buf = await this.talkAsync([0x83])\n        const len = buf[1]\n        if (len) {\n            buf = buf.slice(2, 2 + len)\n            if (this.pendingSerial) buf = bufferConcat(this.pendingSerial, buf)\n            let ptr = 0\n            let beg = 0\n            while (ptr < buf.length) {\n                if (buf[ptr] == 10 || buf[ptr] == 13) {\n                    const line = buf.slice(beg, ptr)\n                    if (line.length)\n                        console.debug(\n                            \"microbit: \" + fromUTF8(uint8ArrayToString(line))\n                        )\n                    beg = ptr + 1\n                }\n                ptr++\n            }\n            buf = buf.slice(beg)\n            this.pendingSerial = buf.length ? buf : null\n            if (this.pendingSerial) this.lastPendingSerial = Date.now()\n        } else if (this.pendingSerial) {\n            const d = Date.now() - this.lastPendingSerial\n            if (d > 500) {\n                const s = fromUTF8(uint8ArrayToString(this.pendingSerial))\n                this.pendingSerial = null\n                console.log(\"SERIAL[TO]: \" + s)\n            }\n        }\n\n        return len\n    }\n\n    private async talkStringAsync(...cmds: number[]) {\n        return this.talkAsync(cmds).then(buf => this.decodeString(buf))\n    }\n\n    private async readDP(reg: number) {\n        const nums = [0x05, 0, 1, 2 | reg, 0, 0, 0, 0]\n        const buf = await this.talkAsync(nums)\n        return read32(buf, 3)\n    }\n\n    private async setupTAR(addr: number) {\n        const nums = [5, 0, 2, 1, 0x52, 0, 0, 0x23, 5, 0, 0, 0, 0]\n        write32(nums, 9, addr)\n        await this.talkAsync(nums)\n    }\n\n    private async writeWords(addr: number, data: Uint32Array) {\n        await this.setupTAR(addr)\n\n        const MAX = 0xe\n        let ptr = 0\n        const reqHd = [6, 0, MAX, 0, 0xd]\n        for (let i = 0; i < MAX * 4; ++i) reqHd.push(0)\n        const req = new Uint8Array(reqHd)\n        let overhang = 1\n        let ptrTX = 0\n        const count = data.length\n        const dataBytes = new Uint8Array(data.buffer)\n        let lastCh = MAX\n\n        //console.log(\"WRITE\", addr.toString(16), data)\n\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count) {\n                const ch = Math.min(count - ptrTX, MAX)\n                if (ch) {\n                    req[2] = ch\n                    req.set(dataBytes.slice(ptrTX * 4, (ptrTX + ch) * 4), 5)\n                    if (!this.io) {\n                        this.error(\"disconnected\")\n                        return\n                    }\n                    await this.io.sendPacketAsync(\n                        ch == MAX ? req : req.slice(0, 5 + 4 * ch)\n                    )\n                    ptrTX += ch\n                    lastCh = ch\n                }\n                if (overhang-- > 0) continue\n                const buf = await this.recvAsync()\n                if (buf[0] != req[0])\n                    this.error(`bad response, ${buf[0]} != ${req[0]}`)\n                if (buf[1] != MAX && buf[1] != lastCh)\n                    this.error(\n                        `bad response, ${buf[1]} != ${MAX} && ${buf[1]} != ${lastCh}`\n                    )\n                ptr += buf[1]\n            }\n        })\n    }\n\n    private async readBytes(addr: number, count: number, jdmode = false) {\n        if (addr & 3 || count & 3) this.error(\"unaligned\")\n        const b = await this.readWords(addr, count >> 2, jdmode)\n        return new Uint8Array(b.buffer)\n    }\n\n    private async readWords(addr: number, count: number, jdmode = false) {\n        await this.setupTAR(addr)\n        const MAX = 0xe\n        const res = new Uint32Array(count)\n        let ptr = 0\n        const req = new Uint8Array([6, 0, MAX, 0, 0xf])\n        let overhang = 1\n        let ptrTX = 0\n\n        // console.log(\"READ\", addr.toString(16), count)\n        let numPending = 0\n        await this.q.enqueue(\"talk\", async () => {\n            while (ptr < count || numPending) {\n                const ch = Math.min(count - ptrTX, MAX)\n                if (ch > 0) {\n                    req[2] = ch\n                    numPending++\n                    if (!this.io) {\n                        this.error(\"disconnected\")\n                        return\n                    }\n                    await this.io.sendPacketAsync(req)\n                    ptrTX += ch\n                }\n                if (overhang-- > 0) continue\n                const buf = await this.recvAsync()\n                numPending--\n                if (buf[0] != req[0]) {\n                    this.error(\"bad response\")\n                    return\n                }\n                const len = buf[1]\n                const words = new Uint32Array(\n                    buf.slice(4, (1 + len) * 4).buffer\n                )\n                if (words.length != len) {\n                    this.error(\"bad response2\")\n                    return\n                }\n                res.set(words, ptr)\n                // limit transfer, according to JD frame size\n                if (jdmode && ptr == 0) {\n                    const frmsz = new Uint8Array(res.buffer)[2]\n                    const words = (frmsz + 12 + 3) >> 2\n                    if (count > words) count = words\n                }\n                ptr += words.length\n            }\n        })\n\n        return res\n    }\n\n    private async findExchange() {\n        const memStart = 0x2000_0000\n        const memStop = memStart + 128 * 1024\n        const checkSize = 1024\n\n        let p0 = 0x20006000\n        let p1 = 0x20006000 + checkSize\n\n        const check = async (addr: number) => {\n            if (addr < memStart) return null\n            if (addr + checkSize > memStop) return null\n            const buf = await this.readWords(addr, checkSize >> 2)\n            for (let i = 0; i < buf.length; ++i) {\n                if (buf[i] == 0x786d444a && buf[i + 1] == 0xb0a6c0e9)\n                    return addr + (i << 2)\n            }\n            return 0\n        }\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const a0 = await check(p0)\n            if (a0) return a0\n            const a1 = await check(p1)\n            if (a1) return a1\n            if (a0 === null && a1 === null) return null\n            p0 -= checkSize\n            p1 += checkSize\n        }\n    }\n\n    private async triggerIRQ() {\n        const addr = 0xe000e200 + (this.irqn >> 5) * 4\n        const data = new Uint32Array([1 << (this.irqn & 31)])\n        await this.writeWords(addr, data)\n    }\n\n    private writeWord(addr: number, val: number) {\n        return this.writeWords(addr, new Uint32Array([val]))\n    }\n\n    private async reset() {\n        await this.writeWord(0xe000edfc, 0) // DEMCR\n        await this.writeWord(0xe000ed0c, 0x05fa0000 | (1 << 2)) // AIRCR\n    }\n\n    async postConnectAsync() {\n        this.startRecvToLoop()\n        const devid = await this.talkStringAsync(0x80)\n        if (/^9902/.test(devid)) {\n            this.error(\n                `micro:bit v1 is not supported. sorry.`,\n                ERROR_MICROBIT_V1\n            )\n            return\n        }\n        if (!/^990[3456789]/.test(devid)) {\n            this.error(\n                `Invalid Vendor0 response: ` + devid,\n                ERROR_MICROBIT_UNKNOWN\n            )\n            return\n        }\n\n        this.io.log(\"DAPLink v\" + (await this.talkStringAsync(0x00, 0x04)))\n\n        await this.setBaudRate() // this may reset the board\n\n        const freq = [0x11, 0, 0, 0, 0]\n        write32(freq, 1, 10_000_000)\n        await this.talkAsync(freq)\n\n        const inits = [\n            \"02 00\", // connect\n            \"04 00 64 00 00 00\", // configure delays\n            // SWD switch\n            \"12 38 FF FF FF FF FF FF FF\", // ones\n            \"12 10 9E E7\", // SWD\n            \"12 38 FF FF FF FF FF FF FF\", // ones\n            \"12 08 00\", // zero\n            // read DPIDR\n            \"05 00 01 02 00 00 00 00\",\n            // clear errors\n            \"05 00 03 00 04 00 00 00 08 00 00 00 00 04 00 00 00 50\",\n        ]\n\n        for (const ini of inits) await this.talkHexAsync(ini)\n\n        for (let i = 0; i < 100; ++i) {\n            const st = await this.readDP(4)\n            const mask = (1 << 29) | (1 << 31)\n            if ((st & mask) == mask) break\n            await delay(20)\n        }\n\n        await this.reset()\n        await delay(1000) // the actual minimum until mbbridge starts seems to be 700ms; give it some more time just in case\n\n        const xchg = await this.findExchange()\n        if (xchg === null) {\n            this.error(\n                `exchange address not found; add jacdac to your project`,\n                ERROR_MICROBIT_JACDAC_MISSING\n            )\n            return\n        }\n        this.xchgAddr = xchg\n        const info = await this.readBytes(xchg, 16)\n        this.irqn = info[8]\n        if (info[12 + 2] != 0xff) {\n            this.error(\n                \"invalid memory; try power-cycling the micro:bit\",\n                ERROR_MICROBIT_INVALID_MEMORY\n            )\n            return\n        }\n        // clear initial lock\n        await this.writeWord(xchg + 12, 0)\n        this.io.log(\n            `exchange address: 0x${xchg.toString(16)}; irqn=${this.irqn}`\n        )\n\n        /* async */ this.xchgLoop().catch(e => {\n            console.debug(e)\n            this.error(e?.message || \"an error occured\")\n        })\n    }\n}\n","import { JACDAC_ERROR } from \"./constants\"\n\n/**\n * Common Jacdac error type\n * @category Runtime\n */\nexport class JDError extends Error {\n    constructor(message: string, readonly jacdacName?: string) {\n        super(message)\n        this.name = JACDAC_ERROR\n    }\n}\nexport default JDError\n\n/**\n * Extract the Jacdac error code if any\n * @param e\n * @returns\n * @category Runtime\n */\nexport function errorCode(e: JDError): string {\n    return e.name === JACDAC_ERROR ? (e as JDError)?.jacdacName : undefined\n}\n","import { HF2Proto, HF2_DEVICE_MAJOR, HF2_IO } from \"./hf2\"\nimport {\n    CMSISProto,\n    MICROBIT_V2_PRODUCT_ID,\n    MICROBIT_V2_VENDOR_ID,\n} from \"./microbit\"\nimport { Observable } from \"../observable\"\nimport Proto from \"./proto\"\nimport { assert, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\n\nexport const USB_FILTERS = {\n    filters: [\n        {\n            // hf2 devices (incl. arcade)\n            classCode: 255,\n            subclassCode: HF2_DEVICE_MAJOR,\n        },\n        {\n            // micro:bit v2\n            vendorId: MICROBIT_V2_VENDOR_ID,\n            productId: MICROBIT_V2_PRODUCT_ID,\n        },\n    ],\n}\n\nconst controlTransferGetReport = 0x01\nconst controlTransferSetReport = 0x09\nconst controlTransferOutReport = 0x200\nconst controlTransferInReport = 0x100\n\nexport interface USBOptions {\n    requestDevice?: (options: USBDeviceRequestOptions) => Promise<USBDevice>\n    getDevices: (options: USBDeviceRequestOptions) => Promise<USBDevice[]>\n    connectObservable?: Observable<void>\n    disconnectObservable?: Observable<void>\n}\n\nexport default class USBIO implements HF2_IO {\n    private dev: USBDevice\n    private iface: USBInterface\n    private altIface: USBAlternateInterface\n    private epIn: USBEndpoint\n    private epOut: USBEndpoint\n    private readLoopStarted = false\n    private ready = false\n    private rawMode = false\n\n    constructor(public readonly options: USBOptions) {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return this.isMicrobit() ? new CMSISProto(this) : new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.epIn = null\n            this.epOut = null\n            this.onData = () => console.warn(\"rogue hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.dev\n            .close()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    recvPacketAsync(): Promise<Uint8Array> {\n        if (!this.rawMode) this.error(\"rawMode required\")\n        return this.recvPacketCoreAsync()\n    }\n\n    private recvPacketCoreAsync(): Promise<Uint8Array> {\n        const final = (res: USBInTransferResult) => {\n            if (res.status != \"ok\") this.error(\"USB IN transfer failed\")\n            const arr = new Uint8Array(res.data.buffer)\n            if (arr.length == 0) return this.recvPacketCoreAsync()\n            return arr\n        }\n\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n\n        if (!this.epIn) {\n            return this.dev\n                .controlTransferIn(\n                    {\n                        requestType: \"class\",\n                        recipient: \"interface\",\n                        request: controlTransferGetReport,\n                        value: controlTransferInReport,\n                        index: this.iface.interfaceNumber,\n                    },\n                    64\n                )\n                .then(final)\n        }\n\n        return this.dev.transferIn(this.epIn.endpointNumber, 64).then(final)\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(\n            `device ${this.dev ? this.dev.productName : \"n/a\"} (${msg})`,\n            code\n        )\n        this.onError(e)\n    }\n\n    private async readLoop() {\n        if (this.rawMode || this.readLoopStarted) return\n        this.readLoopStarted = true\n        console.debug(\"start read loop\")\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (!this.ready) {\n                break\n                //await delay(300)\n                //continue\n            }\n\n            try {\n                const buf = await this.recvPacketCoreAsync()\n\n                if (buf[0]) {\n                    // we've got data; retry reading immedietly after processing it\n                    this.onData(buf)\n                } else {\n                    // throttle down if no data coming\n                    await delay(5)\n                }\n            } catch (err) {\n                if (this.dev) {\n                    this.onError(err)\n                    await this.disconnectAsync()\n                }\n                await delay(300)\n            }\n        }\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        if (!this.epOut) {\n            return this.dev\n                .controlTransferOut(\n                    {\n                        requestType: \"class\",\n                        recipient: \"interface\",\n                        request: controlTransferSetReport,\n                        value: controlTransferOutReport,\n                        index: this.iface.interfaceNumber,\n                    },\n                    pkt\n                )\n                .then(res => {\n                    if (res.status != \"ok\")\n                        this.error(\"USB CTRL OUT transfer failed\")\n                })\n        }\n        return this.dev\n            .transferOut(this.epOut.endpointNumber, pkt)\n            .then(res => {\n                if (res.status != \"ok\") this.error(\"USB OUT transfer failed\")\n            })\n    }\n\n    private isMicrobit() {\n        return (\n            this.dev && this.dev.productId == 516 && this.dev.vendorId == 3368\n        )\n    }\n\n    private checkDevice() {\n        this.iface = undefined\n        this.altIface = undefined\n        if (!this.dev) return false\n        console.debug(\n            \"connect device: \" +\n                this.dev.manufacturerName +\n                \" \" +\n                this.dev.productName\n        )\n        // resolve interfaces\n        const subcl = this.isMicrobit() ? 0 : HF2_DEVICE_MAJOR\n        for (const iface of this.dev.configuration.interfaces) {\n            const alt = iface.alternates[0]\n            if (alt.interfaceClass == 0xff && alt.interfaceSubclass == subcl) {\n                this.iface = iface\n                this.altIface = alt\n                break\n            }\n        }\n        if (this.isMicrobit()) this.rawMode = true\n        return !!this.iface\n    }\n\n    private async tryReconnectAsync(deviceId?: string) {\n        try {\n            const devices = await this.options.getDevices(USB_FILTERS)\n            this.dev = deviceId\n                ? devices.find(dev => dev.serialNumber === deviceId)\n                : devices[0]\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    private async requestDeviceAsync() {\n        try {\n            this.dev = await this.options.requestDevice(USB_FILTERS)\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync(deviceId)\n        if (!this.dev && !background) await this.requestDeviceAsync()\n        // background call and no device, just give up for now\n        if (!this.dev && background) throwError(\"device not paired\", true)\n\n        // let's connect\n        await this.openDeviceAsync()\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n\n    private async openDeviceAsync() {\n        if (!this.dev) throwError(\"device not found\")\n        if (!this.checkDevice()) throwError(\"device does not support HF2\")\n\n        await this.dev.open()\n        await this.dev.selectConfiguration(1)\n        if (this.altIface.endpoints.length) {\n            this.epIn = this.altIface.endpoints.filter(\n                e => e.direction == \"in\"\n            )[0]\n            this.epOut = this.altIface.endpoints.filter(\n                e => e.direction == \"out\"\n            )[0]\n            assert(this.epIn.packetSize == 64)\n            assert(this.epOut.packetSize == 64)\n        }\n        console.debug(\"claim interface\")\n        await this.dev.claimInterface(this.iface.interfaceNumber)\n        console.debug(\"all connected\")\n        this.ready = true\n        /* no await */ this.readLoop()\n    }\n}\n","import { HF2Proto, HF2_IO } from \"./hf2\"\nimport Proto from \"./proto\"\nimport { assert, bufferConcat, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\n\nexport const WEB_SERIAL_FILTERS = {\n    filters: [\n        {\n            usbVendorId: 0x303a, // espressif\n        },\n    ],\n}\n\nexport default class WebSerialIO implements HF2_IO {\n    private dev: SerialPort\n    private readLoopStarted = false\n    ready = false\n    private writer: WritableStreamDefaultWriter<Uint8Array>\n    private reader: ReadableStreamDefaultReader<Uint8Array>\n\n    constructor() {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.cancelStreams()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    private devInfo() {\n        if (!this.dev) return \"n/a\"\n        const h = (n: number) => (\"000\" + n.toString(16)).slice(-4)\n        const info = this.dev.getInfo()\n        return h(info.usbVendorId) + \":\" + h(info.usbProductId)\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code)\n        this.onError(e)\n    }\n\n    private async cancelStreams() {\n        if (this.reader)\n            try {\n                await this.reader.cancel()\n                this.reader.releaseLock()\n                // eslint-disable-next-line no-empty\n            } catch {}\n        try {\n            this.writer.releaseLock()\n            // eslint-disable-next-line no-empty\n        } catch {}\n        await this.dev.close()\n    }\n\n    private async readLoop() {\n        if (this.readLoopStarted) return\n\n        this.readLoopStarted = true\n        console.debug(\"start read loop\")\n\n        const readpkt = async (\n            reader: ReadableStreamDefaultReader<Uint8Array>\n        ) => {\n            let value: Uint8Array = null\n            for (;;) {\n                const tmp = await reader.read()\n                if (tmp.done || !this.dev) return null // reader cancelled\n                if (!value) value = tmp.value\n                else value = bufferConcat(value, tmp.value)\n                // Despite the fact that the device always sends full 64 bytes USB packets\n                // the Windows serial driver will sometimes give only one character, and then the remaining\n                // 63 in the second read - this must be going through some UART abstraction layers I guess... ¯\\_(ツ)_/¯\n                if (value && (value.length & 63) == 0) return value\n            }\n        }\n\n        for (;;) {\n            const reader = this.dev?.readable?.getReader()\n            if (!reader) {\n                await delay(100)\n                continue\n            }\n            this.reader = reader\n            console.debug(\"start new read loop round\")\n            try {\n                // eslint-disable-next-line no-constant-condition\n                for (;;) {\n                    const value = await readpkt(reader)\n                    if (!value) break\n                    // console.log(\"Recv\", toHex(value))\n                    if (value.length > 64)\n                        for (let i = 0; i < value.length; i += 64) {\n                            this.onData(value.slice(i, i + 64))\n                        }\n                    else this.onData(value)\n                }\n            } catch (e) {\n                if (this.dev) this.onError(e)\n                await delay(100)\n            } finally {\n                try {\n                    reader.releaseLock()\n                } catch {}\n                await delay(100)\n            }\n        }\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev || !this.writer)\n            return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt\n            pkt = new Uint8Array(64)\n            pkt.set(p)\n        }\n        return this.writer.write(pkt)\n    }\n\n    private async tryReconnectAsync() {\n        try {\n            const ports = await navigator.serial.getPorts()\n            this.dev = ports[0]\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    private async requestDeviceAsync() {\n        try {\n            this.dev = await navigator.serial.requestPort(WEB_SERIAL_FILTERS)\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync()\n        if (!this.dev && !background) await this.requestDeviceAsync()\n        // background call and no device, just give up for now\n        if (!this.dev && background) throwError(\"device not paired\", true)\n\n        // let's connect\n        await this.openDeviceAsync()\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n\n    private async openDeviceAsync() {\n        if (!this.dev) throwError(\"device not found\")\n\n        await this.dev.open({\n            baudRate: 115200, // not really\n            bufferSize: 32 * 1024,\n        })\n\n        this.writer = this.dev.writable?.getWriter()\n        if (!this.writer) throwError(\"no writer\")\n        this.ready = true\n        /* no await */ this.readLoop()\n    }\n}\n","import { Observable, Observer } from \"../observable\"\n\n/**\n * @internal\n */\nexport class EventTargetObservable<TEvent> implements Observable<TEvent> {\n    constructor(\n        public readonly element: EventTarget,\n        public readonly eventName: string\n    ) {}\n\n    subscribe(observer: Observer<TEvent>): { unsubscribe: () => void } {\n        const handler: EventListener = (ev: Event) =>\n            !!observer.next && observer.next(<TEvent>(<any>ev))\n        this.element.addEventListener(this.eventName, handler, false)\n        return {\n            unsubscribe: () =>\n                this.element.removeEventListener(this.eventName, handler),\n        }\n    }\n}\nexport default EventTargetObservable\n","import Packet from \"../packet\"\nimport EventTargetObservable from \"./eventtargetobservable\"\nimport Flags from \"../flags\"\nimport { USB_TRANSPORT } from \"../constants\"\nimport Transport from \"./transport\"\nimport JDBus from \"../bus\"\nimport Proto from \"./proto\"\nimport USBIO, { USBOptions } from \"./usbio\"\n\nexport function isWebUSBEnabled(): boolean {\n    return !!Flags.webUSB\n}\n\nexport function isWebUSBSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.usb &&\n            !!navigator.usb.getDevices\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nexport function usbRequestDevice(\n    options?: USBDeviceRequestOptions\n): Promise<USBDevice> {\n    // disabled\n    if (!Flags.webUSB) return Promise.resolve(undefined)\n\n    try {\n        return navigator?.usb?.requestDevice?.(options)\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return undefined\n    }\n}\n\nfunction usbGetDevices(): Promise<USBDevice[]> {\n    // disabled\n    if (!Flags.webUSB) return Promise.resolve([])\n\n    try {\n        return navigator?.usb?.getDevices() || Promise.resolve([])\n    } catch (e) {\n        if (Flags.diagnostics) console.warn(e)\n        return Promise.resolve([])\n    }\n}\n\nclass WebUSBTransport extends Transport {\n    private hf2: Proto\n    constructor(public readonly options: USBOptions) {\n        super(USB_TRANSPORT, { ...options, checkPulse: true })\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        const transport = new USBIO(this.options)\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e)\n        this.hf2 = await transport.connectAsync(background)\n        this.hf2.onJDMessage(this.handleFrame.bind(this))\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this.hf2) throw new Error(\"hf2 transport disconnected\")\n\n        const buf = p.toBuffer()\n        await this.hf2.sendJDMessageAsync(buf)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async transportDisconnectAsync(background?: boolean) {\n        const h = this.hf2\n        this.hf2 = undefined\n        if (h) await h.disconnectAsync()\n    }\n}\n\nfunction defaultOptions(): USBOptions {\n    return (\n        isWebUSBSupported() && {\n            getDevices: usbGetDevices,\n            requestDevice: usbRequestDevice,\n            connectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"connect\"\n            ),\n            disconnectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"disconnect\"\n            ),\n        }\n    )\n}\n\nexport function createUSBTransport(options?: USBOptions): Transport {\n    if (!options) options = defaultOptions()\n    return options && new WebUSBTransport(options)\n}\n\nexport function createUSBBus(options?: USBOptions) {\n    return new JDBus([createUSBTransport(options)])\n}\n","import { USB_TRANSPORT } from \"../constants\"\nimport EventTargetObservable from \"./eventtargetobservable\"\nimport Flags from \"../flags\"\nimport Packet from \"../packet\"\nimport { Transport, TransportOptions } from \"./transport\"\nimport {\n    TransportConnectMessage,\n    TransportMessage,\n    TransportPacketMessage,\n} from \"./transportmessages\"\nimport { isWebUSBEnabled, usbRequestDevice } from \"./usb\"\nimport { USB_FILTERS } from \"./usbio\"\n\nclass WorkerTransport extends Transport {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private pending: {\n        [id: string]: {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            resolve: (t: any) => void\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            reject: (e: any) => void\n        }\n    } = {}\n\n    constructor(\n        public readonly type: string,\n        public readonly worker: Worker,\n        public readonly options: {\n            requestDevice: () => Promise<string>\n        } & TransportOptions\n    ) {\n        super(type, options)\n        this.worker.addEventListener(\"message\", this.handleMessage.bind(this))\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private postMessageAsync<T>(msg: TransportMessage) {\n        const id = (msg.id = \"\" + Math.random())\n        const p = new Promise<T>((resolve, reject) => {\n            this.worker.postMessage(msg)\n            this.pending[id] = { resolve, reject }\n        })\n        return p\n    }\n\n    private handleMessage(ev: MessageEvent) {\n        const data: TransportMessage = ev.data\n        const { jacdac, type } = data || {}\n        if (!jacdac) return // not our message\n        switch (type) {\n            case \"packet\": {\n                const { payload } = data as TransportPacketMessage\n                //debug(`wt: packet`, payload)\n                this.handlePacket(payload)\n                break\n            }\n            case \"frame\": {\n                const { payload } = data as TransportPacketMessage\n                //debug(`wt: frame`, payload)\n                this.handleFrame(payload)\n                break\n            }\n            case \"connect\":\n            case \"disconnect\": {\n                const { id, error } = data\n                const { resolve, reject } = this.pending[id] || {}\n                if (resolve) {\n                    if (error) reject(error)\n                    else resolve(undefined)\n                }\n                break\n            }\n            case \"error\": {\n                const { error, background, type } = data as TransportMessage\n                if (Flags.diagnostics) console.debug(data)\n                if (!background) this.errorHandler(type, error)\n                break\n            }\n        }\n    }\n\n    protected async transportSendPacketAsync(p: Packet): Promise<void> {\n        // don't wait\n        const buf = p.toBuffer()\n        this.worker.postMessage(<TransportPacketMessage>{\n            jacdac: true,\n            type: \"packet\",\n            payload: buf,\n        })\n    }\n\n    protected async transportConnectAsync(background?: boolean) {\n        let deviceId: string\n        if (!background) {\n            // request permission first\n            deviceId = await this.options.requestDevice()\n        }\n\n        // try connect\n        await this.postMessageAsync<void>(<TransportConnectMessage>{\n            jacdac: true,\n            type: \"connect\",\n            deviceId,\n            background,\n        })\n    }\n\n    protected transportDisconnectAsync(background?: boolean): Promise<void> {\n        return this.postMessageAsync<void>(<TransportMessage>{\n            jacdac: true,\n            type: \"disconnect\",\n            background,\n        })\n    }\n}\n\nexport function createUSBWorkerTransport(worker: Worker) {\n    return (\n        isWebUSBEnabled() &&\n        new WorkerTransport(USB_TRANSPORT, worker, {\n            checkPulse: true,\n            requestDevice: () =>\n                usbRequestDevice(USB_FILTERS).then(dev => dev?.serialNumber),\n            connectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"connect\"\n            ),\n            disconnectObservable: new EventTargetObservable(\n                navigator.usb,\n                \"disconnect\"\n            ),\n        })\n    )\n}\n","import Packet from \"../packet\"\nimport Flags from \"../flags\"\nimport { SERIAL_TRANSPORT, USB_TRANSPORT } from \"../constants\"\nimport Transport from \"./transport\"\nimport JDBus from \"../bus\"\nimport Proto from \"./proto\"\nimport WebSerialIO from \"./webserialio\"\nimport { HF2_IO } from \"./hf2\"\n\nexport function isWebSerialEnabled(): boolean {\n    return !!Flags.webSerial\n}\n\nexport function isWebSerialSupported(): boolean {\n    try {\n        return (\n            typeof navigator !== \"undefined\" &&\n            !!navigator.serial &&\n            !!navigator.serial.getPorts\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nclass WebSerialTransport extends Transport {\n    private hf2: Proto\n    constructor(private mkTransport: () => HF2_IO) {\n        super(SERIAL_TRANSPORT)\n    }\n\n    protected async transportConnectAsync(background: boolean) {\n        const transport = this.mkTransport()\n        transport.onError = e => this.errorHandler(USB_TRANSPORT, e)\n        this.hf2 = await transport.connectAsync(background)\n        this.hf2.onJDMessage(this.handleFrame.bind(this))\n    }\n\n    protected async transportSendPacketAsync(p: Packet) {\n        if (!this.hf2) throw new Error(\"hf2 transport disconnected\")\n\n        const buf = p.toBuffer()\n        await this.hf2.sendJDMessageAsync(buf)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected async transportDisconnectAsync(background?: boolean) {\n        const h = this.hf2\n        this.hf2 = undefined\n        if (h) await h.disconnectAsync()\n    }\n}\n\n/**\n * Creates a transport over a Web Serial connection\n * @category\n */\nexport function createWebSerialTransport(\n    mkTransport: () => HF2_IO = () => new WebSerialIO()\n): Transport {\n    return isWebSerialSupported() && new WebSerialTransport(mkTransport)\n}\n\n/**\n * Creates a bus with a Web Serial connection\n * @category\n */\nexport function createWebSerialBus() {\n    return new JDBus([createWebSerialTransport()])\n}\n","import { HF2Proto, HF2_IO } from \"./hf2\"\nimport Proto from \"./proto\"\nimport { assert, bufferConcat, delay, throwError } from \"../utils\"\nimport Flags from \"../flags\"\nimport JDError, { errorCode } from \"../error\"\nimport { WEB_SERIAL_FILTERS } from \"./webserialio\"\n\ninterface Port {\n    path: string\n    manufacturer: string\n    serialNumber: string\n    pnpId: string\n    locationId: string\n    vendorId: string\n    productId: string\n}\n\nfunction toPromise<T>(f: (cb: (err: Error, res: T) => void) => void) {\n    return new Promise<T>((resolve, reject) =>\n        f((err, result) => {\n            if (err) reject(err)\n            else resolve(result)\n        })\n    )\n}\n\n/**\n * @internal\n */\nexport class NodeWebSerialIO implements HF2_IO {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private dev: any\n    private port: Port\n    ready = false\n\n    /**\n     * \n     * @param SerialPort ``require(\"serialport\")``\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private SerialPort: any) {}\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onData = (v: Uint8Array) => {}\n    onError = (e: Error) => {\n        console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    log(msg: string, v?: any) {\n        if (Flags.diagnostics) {\n            if (v != undefined) console.debug(\"usb: \" + msg, v)\n            else console.debug(\"usb: \" + msg)\n        }\n    }\n\n    private mkProto(): Proto {\n        return new HF2Proto(this)\n    }\n\n    private clearDev() {\n        if (this.dev) {\n            this.dev = null\n            this.onData = () => console.warn(\"rogue webserial hf2 onData\")\n        }\n    }\n\n    disconnectAsync(): Promise<void> {\n        this.ready = false\n        if (!this.dev) return Promise.resolve()\n        console.debug(\"close device\")\n        return this.cancelStreams()\n            .catch(e => {\n                // just ignore errors closing, most likely device just disconnected\n                console.debug(e)\n            })\n            .then(() => {\n                this.clearDev()\n                return delay(500)\n            })\n    }\n\n    private devInfo() {\n        if (!this.port) return \"n/a\"\n        return this.port.vendorId + \":\" + this.port.productId\n    }\n\n    error(msg: string, code?: string) {\n        const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code)\n        this.onError(e)\n    }\n\n    private async cancelStreams() {\n        await toPromise(cb => this.dev.close(cb))\n    }\n\n    sendPacketAsync(pkt: Uint8Array) {\n        if (!this.dev) return Promise.reject(new Error(\"Disconnected\"))\n        assert(pkt.length <= 64)\n        // console.log(\"Send\", toHex(pkt))\n        if (pkt.length < 64) {\n            const p = pkt\n            pkt = new Uint8Array(64)\n            pkt.set(p)\n        }\n        return toPromise<void>(cb => this.dev.write(pkt, undefined, cb))\n    }\n\n    private async tryReconnectAsync() {\n        try {\n            this.dev = undefined\n            this.port = undefined\n\n            const ports: Port[] = await this.SerialPort.list()\n            this.port = ports.filter(\n                p =>\n                    /^PX/.test(p.serialNumber) ||\n                    WEB_SERIAL_FILTERS.filters.some(\n                        f => f.usbVendorId == parseInt(p.vendorId, 16)\n                    )\n            )[0]\n\n            if (this.port) {\n                await toPromise(cb => {\n                    this.dev = new this.SerialPort(\n                        this.port.path,\n                        { baudRate: 115200 },\n                        cb\n                    )\n                })\n                let tmpdata: Uint8Array\n                this.dev.on(\"data\", (buf: Uint8Array) => {\n                    if (tmpdata) buf = bufferConcat(tmpdata, buf)\n                    tmpdata = null\n\n                    // This was only observed with WebSerial, but better safe than sorry\n                    if (buf.length & 63) {\n                        tmpdata = buf\n                        return\n                    }\n\n                    if (buf.length > 64)\n                        for (let i = 0; i < buf.length; i += 64) {\n                            this.onData(buf.slice(i, i + 64))\n                        }\n                    else this.onData(buf)\n                })\n                this.dev.on(\"error\", (err: any) => {\n                    this.error(err.messsage || err + \"\")\n                })\n            }\n        } catch (e) {\n            console.log(e)\n            this.dev = undefined\n            this.port = undefined\n        }\n    }\n\n    async connectAsync(background: boolean, deviceId?: string) {\n        await this.tryReconnectAsync()\n        if (!this.dev && background)\n            throwError(\"can't find suitable device\", true)\n\n        const proto = this.mkProto()\n        try {\n            await proto.postConnectAsync()\n        } catch (e) {\n            console.debug(e)\n            await proto.disconnectAsync()\n            throw e\n        }\n        return proto\n    }\n}\nexport default NodeWebSerialIO","'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n// tslint:disable:ban-types\n\n/**\n * @hidden\n */\nexport interface EventListeners<T> {\n    newListener: keyof T;\n    removeListener: keyof T;\n}\n\n/**\n * @hidden\n */\nexport interface TypedDispatcher<T> {\n    addEventListener<K extends keyof T>(type: K, listener: (this: this, event: T[K]) => void): void;\n    addEventListener<E extends keyof EventListeners<T>>(type: E, listener: (this: this, event: EventListeners<T>[E]) => void): void;\n    removeEventListener<K extends keyof T>(type: K, callback: (this: this, event: T[K]) => void): void;\n    removeEventListener<E extends keyof EventListeners<T>>(type: E, callback: (this: this, event: EventListeners<T>[E]) => void): void;\n    dispatchEvent<K extends keyof T>(event: T[K]): boolean;\n    addListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    addListener<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    on<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    on<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    once<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    once<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    prependListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependOnceListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<E extends keyof EventListeners<T>>(event: E, listener: (data: EventListeners<T>[E]) => void): this;\n    removeAllListeners<K extends keyof T>(event?: K): this;\n    removeAllListeners<E extends keyof EventListeners<T>>(event?: E): this;\n    listeners<K extends keyof T>(event: K): Array<Function>;\n    listeners<E extends keyof EventListeners<T>>(event: EventListeners<T>[E]): Array<Function>;\n    emit<K extends keyof T>(event: K, data: T[K]): boolean;\n    eventNames<K extends keyof T, E extends keyof EventListeners<T>>(): Array<K | E>;\n    listenerCount<K extends keyof T>(type: K): number;\n    listenerCount<E extends keyof EventListeners<T>>(type: EventListeners<T>[E]): number;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n}\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter implements EventTarget {\n\n    private isEventListenerObject = (listener: EventListenerOrEventListenerObject): listener is EventListenerObject => (listener as EventListenerObject).handleEvent !== undefined;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject | null) {\n        if (listener) {\n            const handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;\n            super.addListener(type, handler);\n        }\n    }\n\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null) {\n        if (callback) {\n            const handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;\n            super.removeListener(type, handler);\n        }\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return super.emit(event.type, event);\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBInterface } from \"./interface\";\nimport { W3CUSBConfiguration } from \"./interfaces\";\n\n/**\n * USB Configuration\n */\nexport class USBConfiguration implements W3CUSBConfiguration {\n\n    /**\n     * The value of this configuration\n     */\n    public readonly configurationValue: number = null;\n\n    /**\n     * The name of this configuration\n     */\n    public readonly configurationName?: string = null;\n\n    /**\n     * The array of interfaces on this configuration\n     */\n    public readonly interfaces: Array<USBInterface> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBConfiguration>) {\n        this.configurationValue = init.configurationValue;\n        this.configurationName = init.configurationName;\n        this.interfaces = init.interfaces;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { adapter } from \"./adapter\";\nimport { W3CUSBInterface } from \"./interfaces\";\nimport { USBAlternateInterface } from \"./alternate\";\n\n/**\n * USB Interface\n */\nexport class USBInterface implements W3CUSBInterface {\n\n    /**\n     * Number of this interface\n     */\n    public readonly interfaceNumber: number = null;\n\n    /**\n     * Array of alternate interfaces\n     */\n    public readonly alternates: Array<USBAlternateInterface> = [];\n\n    private _claimed: boolean = false;\n    /**\n     * Whether this interface is claimed\n     */\n    public get claimed(): boolean {\n        return this._claimed;\n    }\n\n    private _currentAlternate: number = 0;\n    /**\n     * Return the current alternate interface\n     */\n    public get alternate(): USBAlternateInterface {\n        return this.alternates.find(alternate => alternate.alternateSetting === this._currentAlternate);\n    }\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBInterface>) {\n        this.interfaceNumber = init.interfaceNumber;\n        this.alternates = init.alternates;\n\n        this._handle = init._handle;\n    }\n\n    /**\n     * @hidden\n     */\n    public selectAlternateInterface(alternateSetting: number): Promise<void> {\n        return adapter.selectAlternateInterface(this._handle, this.interfaceNumber, alternateSetting)\n        .then(() => {\n            this._currentAlternate = alternateSetting;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public claimInterface(): Promise<void> {\n        return adapter.claimInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = true;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public releaseInterface(): Promise<void> {\n        return adapter.releaseInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = false;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public reset() {\n        this._currentAlternate = 0;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBEndpoint } from \"./endpoint\";\nimport { W3CUSBAlternateInterface } from \"./interfaces\";\n\n/**\n * USB Alternate Interface\n */\nexport class USBAlternateInterface implements W3CUSBAlternateInterface {\n\n    /**\n     * The alternate setting for this interface\n     */\n    public readonly alternateSetting: number = null;\n\n    /**\n     * The class of this interface\n     */\n    public readonly interfaceClass: number = null;\n\n    /**\n     * The sub class of this interface\n     */\n    public readonly interfaceSubclass: number = null;\n\n    /**\n     * The protocol of this interface\n     */\n    public readonly interfaceProtocol: number = null;\n\n    /**\n     * The name of this interface\n     */\n    public readonly interfaceName?: string = null;\n\n    /**\n     * The array of endpoints on this interface\n     */\n    public readonly endpoints: Array<USBEndpoint> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBAlternateInterface>) {\n        this.alternateSetting = init.alternateSetting;\n        this.interfaceClass = init.interfaceClass;\n        this.interfaceSubclass = init.interfaceSubclass;\n        this.interfaceProtocol = init.interfaceProtocol;\n        this.interfaceName = init.interfaceName;\n        this.endpoints = init.endpoints;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { W3CUSBEndpoint } from \"./interfaces\";\n\n/**\n * USB Endpoint\n */\nexport class USBEndpoint implements W3CUSBEndpoint {\n\n    /**\n     * The number of this endpoint\n     */\n    public readonly endpointNumber: number = null;\n\n    /**\n     * The direction of this endpoint\n     */\n    public readonly direction: USBDirection = null;\n\n    /**\n     * The type of this endpoint\n     */\n    public readonly type: USBEndpointType = null;\n\n    /**\n     * The packet size of this endpoint\n     */\n    public readonly packetSize: number = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBEndpoint>) {\n        this.endpointNumber = init.endpointNumber;\n        this.direction = init.direction;\n        this.type = init.type;\n        this.packetSize = init.packetSize;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { LIBUSB_ENDPOINT_IN } from \"usb\";\nimport { USBConfiguration } from \"./configuration\";\nimport { adapter } from \"./adapter\";\nimport { W3CUSBDevice } from \"./interfaces\";\n\n/**\n * @hidden\n */\ninterface EndpointResult {\n    endpoint: USBEndpoint;\n    iface: USBInterface;\n}\n\n/**\n * USB Device\n */\nexport class USBDevice implements W3CUSBDevice {\n\n    /**\n     * Major USB protocol version supported by the device\n     */\n    public readonly usbVersionMajor: number;\n\n    /**\n     * Minor USB protocol version supported by the device\n     */\n    public readonly usbVersionMinor: number;\n\n    /**\n     * Sub minor USB protocol version supported by the device\n     */\n    public readonly usbVersionSubminor: number;\n\n    /**\n     * Communication interface class of the device\n     */\n    public readonly deviceClass: number;\n\n    /**\n     * Communication interface sub class of the device\n     */\n    public readonly deviceSubclass: number;\n\n    /**\n     * Communication interface protocol of the device\n     */\n    public readonly deviceProtocol: number;\n\n    /**\n     * Vendor Identifier of the device\n     */\n    public readonly vendorId: number;\n\n    /**\n     * Product Identifier of the device\n     */\n    public readonly productId: number;\n\n    /**\n     * Major version of the device\n     */\n    public readonly deviceVersionMajor: number;\n\n    /**\n     * Minor version of the device\n     */\n    public readonly deviceVersionMinor: number;\n\n    /**\n     * Sub minor version of the device\n     */\n    public readonly deviceVersionSubminor: number;\n\n    /**\n     * Manufacturer name of the device\n     */\n    public readonly manufacturerName: string = null;\n\n    /**\n     * Product name of the device\n     */\n    public readonly productName: string = null;\n\n    /**\n     * Serial number of the device\n     */\n    public readonly serialNumber: string = null;\n\n    private _configurations: Array<USBConfiguration> = [];\n    /**\n     * List of configurations supported by the device\n     */\n    public get configurations(): Array<USBConfiguration> {\n        return this._configurations;\n    }\n\n    /**\n     * @hidden\n     */\n    public _currentConfiguration: number = null;\n    /**\n     * The currently selected configuration\n     */\n    public get configuration(): USBConfiguration {\n        return this.configurations.find(configuration => configuration.configurationValue === this._currentConfiguration);\n    }\n\n    /**\n     * @hidden\n     */\n    public get connected(): boolean {\n        return adapter.getConnected(this._handle);\n    }\n\n    /**\n     * A flag indicating whether the device is open\n     */\n    public get opened(): boolean {\n        return adapter.getOpened(this._handle);\n    }\n\n    /**\n     * URL advertised by the device (not part of Web USB specification)\n     */\n    public readonly url: string = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _maxPacketSize: number = 0;\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBDevice>) {\n        this.usbVersionMajor = init.usbVersionMajor;\n        this.usbVersionMinor = init.usbVersionMinor;\n        this.usbVersionSubminor = init.usbVersionSubminor;\n        this.deviceClass = init.deviceClass;\n        this.deviceSubclass = init.deviceSubclass;\n        this.deviceProtocol = init.deviceProtocol;\n        this.vendorId = init.vendorId;\n        this.productId = init.productId;\n        this.deviceVersionMajor = init.deviceVersionMajor;\n        this.deviceVersionMinor = init.deviceVersionMinor;\n        this.deviceVersionSubminor = init.deviceVersionSubminor;\n\n        this.manufacturerName = init.manufacturerName;\n        this.productName = init.productName;\n        this.serialNumber = init.serialNumber;\n\n        this._configurations = init.configurations;\n\n        this.url = init.url;\n        this._maxPacketSize = init._maxPacketSize;\n        this._handle = init._handle;\n        this._currentConfiguration = init._currentConfiguration;\n    }\n\n    private getEndpoint(direction: USBDirection, endpointNumber: number): EndpointResult {\n        let endpoint = null;\n        let iface = null;\n\n        this.configuration.interfaces.some(usbInterface => {\n            endpoint = usbInterface.alternate.endpoints.find(usbEndpoint => {\n                return (usbEndpoint.endpointNumber === endpointNumber && usbEndpoint.direction === direction);\n            });\n\n            if (endpoint) iface = usbInterface;\n            return endpoint;\n        });\n\n        return {\n            endpoint: endpoint,\n            iface: iface\n        };\n    }\n\n    private setupInvalid(setup: USBControlTransferParameters): string {\n        if (setup.recipient === \"interface\") {\n            const interfaceNumber = setup.index & 0xff; // lower 8 bits\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return \"interface not found\";\n            if (!iface.claimed) return \"invalid state\";\n\n        } else if (setup.recipient === \"endpoint\") {\n            const endpointNumber = setup.index & 0x0f; // lower 4 bits\n            const direction = setup.index & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return \"endpoint not found\";\n            if (!result.iface.claimed) return \"invalid state\";\n        }\n    }\n\n    /**\n     * Opens the device\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"open error: device not found\"));\n            if (this.opened) return resolve();\n\n            adapter.open(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`open error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Closes the device\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"close error: device not found\"));\n            if (!this.opened) return resolve();\n\n            const releaseInterfacePromises = this.configuration.interfaces.map(\n                iface => this.releaseInterface(iface.interfaceNumber));\n\n            Promise.all(releaseInterfacePromises)\n            .catch(_error => { /* Ignore */ })\n            .then(() => adapter.close(this._handle))\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`close error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select a configuration for the device\n     * @param configurationValue The configuration value to select\n     * @returns Promise containing any error\n     */\n    public selectConfiguration(configurationValue: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            // Don't change the configuration if it's already set correctly\n            if (configurationValue === this._currentConfiguration) return resolve();\n\n            if (!this.connected) return reject(new Error(\"selectConfiguration error: device not found\"));\n\n            const config =  this.configurations.find(configuration => configuration.configurationValue === configurationValue);\n            if (!config) return reject(new Error(\"selectConfiguration error: configuration not found\"));\n\n            if (!this.opened) return reject(new Error(\"selectConfiguration error: invalid state\"));\n\n            adapter.selectConfiguration(this._handle, configurationValue)\n            .then(() => {\n                this._currentConfiguration = configurationValue;\n                this.configuration.interfaces.forEach(iface => iface.reset());\n                resolve();\n            })\n            .catch(error => {\n                reject(new Error(`selectConfiguration error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Claim an interface on the device\n     * @param interfaceNumber The interface number to claim\n     * @returns Promise containing any error\n     */\n    public claimInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"claimInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"claimInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"claimInterface error: invalid state\"));\n            if (iface.claimed) return resolve();\n\n            iface.claimInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`claimInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Release an interface on the device\n     * @param interfaceNumber The interface number to release\n     * @returns Promise containing any error\n     */\n    public releaseInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"releaseInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"releaseInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"releaseInterface error: invalid state\"));\n            if (!iface.claimed) return resolve();\n\n            iface.releaseInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`releaseInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select an alternate interface on the device\n     * @param interfaceNumber The interface number to change\n     * @param alternateSetting The alternate setting to use\n     * @returns Promise containing any error\n     */\n    public selectAlternateInterface(interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"selectAlternateInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"selectAlternateInterface error: interface not found\"));\n\n            if (!this.opened || !iface.claimed) return reject(new Error(\"selectAlternateInterface error: invalid state\"));\n\n            iface.selectAlternateInterface(alternateSetting)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`selectAlternateInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer in from the device\n     *\n     * @param setup The USB control transfer parameters\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferIn(setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferIn error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferIn error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferIn error: ${setupError}`));\n\n            adapter.controlTransferIn(this._handle, setup, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param setup The USB control transfer parameters\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferOut(setup: USBControlTransferParameters, data?: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferOut error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferOut error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferOut error: ${setupError}`));\n\n            adapter.controlTransferOut(this._handle, setup, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Clear a halt condition on an endpoint\n     *\n     * @param direction The direction of the endpoint to clear\n     * @param endpointNumber The endpoint number of the endpoint to clear\n     * @returns Promise containing any error\n     */\n    public clearHalt(direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"clearHalt error: device not found\"));\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"clearHalt error: endpoint not found\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"clearHalt error: invalid state\"));\n\n            adapter.clearHalt(this._handle, direction, endpointNumber)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`clearHalt error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer in from the device\n     *\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public transferIn(endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferIn error: invalid state\"));\n\n            adapter.transferIn(this._handle, endpointNumber, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public transferOut(endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferOut error: invalid state\"));\n\n            adapter.transferOut(this._handle, endpointNumber, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer in from the device\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferIn(endpointNumber: number, packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferIn error: invalid state\"));\n\n            adapter.isochronousTransferIn(this._handle, endpointNumber, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer out to the device\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferOut(endpointNumber: number, data: BufferSource, packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferOut error: invalid state\"));\n\n            adapter.isochronousTransferOut(this._handle, endpointNumber, data, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Soft reset the device\n     * @returns Promise containing any error\n     */\n    public reset(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"reset error: device not found\"));\n            if (!this.opened) return reject(new Error(\"reset error: invalid state\"));\n\n            adapter.reset(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`reset error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport {\n    getDeviceList,\n    Device,\n    Endpoint,\n    InEndpoint,\n    OutEndpoint,\n    ConfigDescriptor,\n    InterfaceDescriptor,\n    on,\n    removeListener,\n    LIBUSB_ENDPOINT_IN,\n    LIBUSB_ENDPOINT_OUT,\n    LIBUSB_TRANSFER_OVERFLOW,\n    LIBUSB_TRANSFER_STALL,\n    LIBUSB_TRANSFER_TYPE_INTERRUPT,\n    LIBUSB_TRANSFER_TYPE_BULK,\n    LIBUSB_RECIPIENT_DEVICE,\n    LIBUSB_RECIPIENT_INTERFACE,\n    LIBUSB_RECIPIENT_ENDPOINT,\n    LIBUSB_RECIPIENT_OTHER,\n    LIBUSB_REQUEST_TYPE_STANDARD,\n    LIBUSB_REQUEST_TYPE_CLASS,\n    LIBUSB_REQUEST_TYPE_VENDOR,\n    EndpointDescriptor,\n    DeviceDescriptor,\n    Capability\n} from \"usb\";\nimport { USBConfiguration } from \"./configuration\";\nimport { USBInterface } from \"./interface\";\nimport { USBAlternateInterface } from \"./alternate\";\nimport { USBEndpoint } from \"./endpoint\";\nimport { USBDevice } from \"./device\";\n\n/**\n * @hidden\n */\nconst DEFAULT_DELAY_TIMEOUT = 200;\n/**\n * @hidden\n */\nconst DEFAULT_RETRY_COUNT = 10;\n\n/**\n * @hidden\n */\nconst CONSTANTS = {\n    WEB_UUID: \"3408b638-09a9-47a0-8bfd-a0768815b665\",\n    LIBUSB_DT_BOS: 0x0f,\n    LIBUSB_DT_BOS_SIZE: 0x05,\n    LIBUSB_TRANSFER_TYPE_MASK: 0x03,\n    USB_VERSION: 0x201,\n    CAPABILITY_VERSION: 0x0100,\n    URL_REQUEST_TYPE: 0xC0,\n    URL_REQUEST_INDEX: 0x02,\n    CLEAR_FEATURE: 0x01,\n    ENDPOINT_HALT: 0x00\n};\n\n/**\n * @hidden\n */\nexport interface Adapter {\n    getConnected(handle: string): boolean;\n    getOpened(handle: string): boolean;\n\n    listUSBDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<USBDevice>>;\n    open(handle: string): Promise<void>;\n    close(handle: string): Promise<void>;\n    selectConfiguration(handle: string, id: number): Promise<void>;\n    claimInterface(handle: string, address: number): Promise<void>;\n    releaseInterface(handle: string, address: number): Promise<void>;\n    selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void>;\n    controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult>;\n    controlTransferOut(handle: string, setup: USBControlTransferParameters, data: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult>;\n    clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void>;\n    transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult>;\n    transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult>;\n    isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult>;\n    isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult>;\n    reset(handle: string): Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport class USBAdapter extends EventEmitter implements Adapter {\n\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    // Maintains a live list of connected Web USB devices\n    private devices: { [key: string]: { device: Device, url: string }} = {};\n\n    constructor() {\n        super();\n\n        const attachCallback = device => {\n            this.loadDevice(device, DEFAULT_RETRY_COUNT)\n            .then(loadedDevice => {\n                if (loadedDevice) {\n                    const handle = this.getDeviceHandle(loadedDevice);\n                    this.devicetoUSBDevice(handle)\n                    .then(usbDevice => {\n                        if (usbDevice) {\n                            this.emit(USBAdapter.EVENT_DEVICE_CONNECT, usbDevice);\n                        }\n                    });\n                }\n            });\n        };\n\n        const detachCallback = device => {\n            const handle = this.getDeviceHandle(device);\n\n            if (handle && this.devices[handle]) {\n                delete this.devices[handle];\n                this.emit(USBAdapter.EVENT_DEVICE_DISCONNECT, handle);\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                on(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                on(\"detach\", detachCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                removeListener(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                removeListener(\"detach\", detachCallback);\n            }\n        });\n    }\n\n    private getDeviceHandle(device: Device): string {\n        if (device.busNumber === null || device.deviceAddress === null) {\n            return null;\n        }\n\n        return `${device.busNumber}.${device.deviceAddress}`;\n    }\n\n    private serialPromises<T>(task: (param: any) => Promise<T>, params: Array<any>): Promise<Array<T>> {\n        function reducer(chain, param) {\n            return chain\n            .then(results => {\n                return task.call(this, param)\n                .then(result => {\n                    if (result) {\n                        results.push(result);\n                    }\n                    return results;\n                });\n            });\n        }\n        return params.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private serialDevicePromises<T>(task: (device: Device, descriptor: any) => Promise<T>, device: Device, descriptors: Array<any>): Promise<Array<T>> {\n        function reducer(chain, descriptor) {\n            return chain\n            .then(results => {\n                return task.call(this, device, descriptor)\n                .then(result => {\n                    results.push(result);\n                    return results;\n                });\n            });\n        }\n        return descriptors.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private delay(timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    private retryPromise(fn: () => Promise<any>, retries: number = 0, timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, reject) => {\n            fn()\n            .then(resolve)\n            .catch(error => {\n                if (retries === 0) {\n                    return reject(error);\n                }\n\n                return this.delay(timeout)\n                .then(() => this.retryPromise(fn, --retries, timeout))\n                .then(resolve)\n                .catch(retryError => reject(retryError));\n            });\n        });\n    }\n\n    private loadDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<Device>> {\n        // Reset device cache\n        this.devices = {};\n        let devices = getDeviceList();\n\n        if (preFilters) {\n            // Pre-filter devices\n            devices = this.preFilterDevices(devices, preFilters);\n        }\n\n        return this.serialPromises(this.loadDevice, devices);\n    }\n\n    private preFilterDevices(devices: Array<Device>, preFilters: Array<USBDeviceFilter>): Array<Device> {\n        // Just pre-filter on vid/pid\n        return devices.filter(device => preFilters.some(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.deviceDescriptor.idVendor) return false;\n\n            // Product\n            if (filter.productId && filter.productId !== device.deviceDescriptor.idProduct) return false;\n\n            // Ignore serial number for node-usb as it requires device connection\n            return true;\n        }));\n    }\n\n    private loadDevice(device: Device, retries: number = 0): Promise<Device> {\n\n        // Early guard against unsupported USB devices\n        try {\n            // tslint:disable-next-line:no-unused-expression\n            device.configDescriptor;\n            // tslint:disable-next-line:no-unused-expression\n            device.allConfigDescriptors;\n            // tslint:disable-next-line:no-unused-expression\n            device.deviceDescriptor;\n        } catch (_error) {\n            return Promise.resolve(null);\n        }\n\n        return this.getCapabilities(device, retries)\n        .then(capabilities => this.getWebCapability(capabilities))\n        .then(capability => {\n            return this.getWebUrl(device, capability)\n            .then(url => {\n                const handle = this.getDeviceHandle(device);\n                this.devices[handle] = {\n                    device: device,\n                    url: url\n                };\n                return device;\n            });\n        });\n    }\n\n    private getCapabilities(device: Device, retries: number): Promise<Array<Capability>> {\n        return new Promise((resolve, _reject) => {\n\n            this.openDevice(device, retries)\n            .then(() => {\n                device.getCapabilities((error, capabilities) => {\n                    try {\n                        // Older macs (<10.12) can error with some host devices during a close at this point\n                        device.close();\n                    // tslint:disable-next-line:no-empty\n                    } catch (_error) {}\n                    if (error) return resolve([]);\n                    resolve(capabilities);\n                });\n            })\n            .catch(_error => {\n                resolve([]);\n            });\n        });\n    }\n\n    private getWebCapability(capabilities: Array<Capability>): Capability {\n        const platformCapabilities = capabilities.filter(capability => {\n            return capability.type === 5;\n        });\n\n        const webCapability = platformCapabilities.find(capability => {\n            const uuid = this.decodeUUID(capability.data.slice(1, 17));\n            const version = capability.data.readUInt16LE(17);\n            return uuid === CONSTANTS.WEB_UUID && version === CONSTANTS.CAPABILITY_VERSION;\n        });\n\n        return webCapability;\n    }\n\n    private decodeUUID(buffer: Buffer): string {\n        const data1 = `00000000${buffer.readUInt32LE(0).toString(16)}`.slice(-8);\n        const data2 = `0000${buffer.readUInt16LE(4).toString(16)}`.slice(-4);\n        const data3 = `0000${buffer.readUInt16LE(6).toString(16)}`.slice(-4);\n\n        const data4 = [];\n        for (let i = 8; i < 10; i ++) {\n            data4.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        const data5 = [];\n        for (let i = 10; i < 16; i ++) {\n            data5.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        return `${data1}-${data2}-${data3}-${data4.join(\"\")}-${data5.join(\"\")}`;\n    }\n\n    private getWebUrl(device: Device, capability: Capability, suppressErrors: boolean = true): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (!capability || !capability.data || capability.data.byteLength < 20) return resolve(null);\n\n            const vendor = capability.data.readUInt8(19);\n            const page = capability.data.readUInt8(20);\n\n            this.openDevice(device)\n            .then(() => {\n                device.controlTransfer(CONSTANTS.URL_REQUEST_TYPE, vendor, page, CONSTANTS.URL_REQUEST_INDEX, 64, (error, buffer) => {\n                    device.close();\n\n                    if (error) {\n                        // An error may be due to the URL not existing\n                        if (suppressErrors) return resolve(null);\n                        else return reject(error);\n                    }\n\n                    // const length = buffer.readUInt8(0);\n                    // const type = buffer.readUInt8(1);\n                    let url = buffer.toString(\"utf8\", 3);\n\n                    const scheme = buffer.readUInt8(2); // 0 - http, 1 - https, 255 - in url\n                    if (scheme === 0) url = \"http://\" + url;\n                    if (scheme === 1) url = \"https://\" + url;\n\n                    resolve(url);\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private devicetoUSBDevice(handle: string): Promise<USBDevice> {\n        return new Promise((resolve, _reject) => {\n            const device = this.devices[handle].device;\n            const url = this.devices[handle].url;\n\n            let configs: Array<ConfigDescriptor> = null;\n            let configDescriptor: ConfigDescriptor = null;\n            let deviceDescriptor: DeviceDescriptor = null;\n\n            try {\n                configDescriptor = device.configDescriptor;\n                configs = device.allConfigDescriptors;\n                deviceDescriptor = device.deviceDescriptor;\n            } catch (_error) {\n                return resolve(null);\n            }\n\n            if (!configs) return resolve(null);\n\n            return this.serialDevicePromises(this.configToUSBConfiguration, device, configs)\n            .then(configurations => {\n\n                if (!deviceDescriptor) {\n                    return resolve(new USBDevice({\n                        _handle: this.getDeviceHandle(device),\n                        url: url,\n                        configurations: configurations\n                    }));\n                }\n\n                const deviceVersion = this.decodeVersion(deviceDescriptor.bcdDevice);\n                const usbVersion = this.decodeVersion(deviceDescriptor.bcdUSB);\n                let manufacturerName = null;\n                let productName = null;\n\n                return this.getStringDescriptor(device, deviceDescriptor.iManufacturer)\n                .then(name => {\n                    manufacturerName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iProduct);\n                })\n                .then(name => {\n                    productName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iSerialNumber);\n                })\n                .then(serialNumber => {\n                    const props: Partial<USBDevice> = {\n                        _handle: this.getDeviceHandle(device),\n                        _maxPacketSize: deviceDescriptor.bMaxPacketSize0,\n                        url: url,\n                        deviceClass: deviceDescriptor.bDeviceClass,\n                        deviceSubclass: deviceDescriptor.bDeviceSubClass,\n                        deviceProtocol: deviceDescriptor.bDeviceProtocol,\n                        productId: deviceDescriptor.idProduct,\n                        vendorId: deviceDescriptor.idVendor,\n                        deviceVersionMajor: deviceVersion.major,\n                        deviceVersionMinor: deviceVersion.minor,\n                        deviceVersionSubminor: deviceVersion.sub,\n                        usbVersionMajor: usbVersion.major,\n                        usbVersionMinor: usbVersion.minor,\n                        usbVersionSubminor: usbVersion.sub,\n                        manufacturerName: manufacturerName,\n                        productName: productName,\n                        serialNumber: serialNumber,\n                        configurations: configurations,\n                        _currentConfiguration: configDescriptor.bConfigurationValue\n                    };\n                    return resolve(new USBDevice(props));\n                });\n            }).catch(_error => {\n                resolve(null);\n            });\n        });\n    }\n\n    private decodeVersion(version: number): { [key: string]: number } {\n        const hex = `0000${version.toString(16)}`.slice(-4);\n        return {\n            major: parseInt(hex.substr(0, 2), null),\n            minor: parseInt(hex.substr(2, 1), null),\n            sub: parseInt(hex.substr(3, 1), null),\n        };\n    }\n\n    private getStringDescriptor(device: Device, index: number): Promise<string> {\n        return new Promise(resolve => {\n            this.openDevice(device)\n            .then(() => {\n                device.getStringDescriptor(index, (error, buffer) => {\n                    device.close();\n                    resolve(error ? \"\" : buffer.toString());\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private bufferToDataView(buffer: Buffer): DataView {\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private bufferSourceToBuffer(bufferSource: ArrayBuffer | ArrayBufferView): Buffer {\n        const arrayBuffer = ArrayBuffer.isView(bufferSource)\n            ? bufferSource.buffer.slice(bufferSource.byteOffset, bufferSource.byteOffset + bufferSource.byteLength)\n            : bufferSource;\n\n        return Buffer.from(arrayBuffer);\n    }\n\n    private getEndpoint(device: Device, direction: USBDirection, endpointNumber: number): Endpoint {\n        let endpoint: Endpoint = null;\n        const address = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n\n        device.interfaces.some(iface => {\n            const epoint = iface.endpoint(address);\n\n            if (epoint) {\n                endpoint = epoint;\n                return true;\n            }\n            return false;\n        });\n\n        return endpoint;\n    }\n\n    private getInEndpoint(device: Device, endpointNumber: number): InEndpoint {\n        const endpoint = this.getEndpoint(device, \"in\", endpointNumber);\n        if (endpoint && endpoint.direction === \"in\") return (endpoint as InEndpoint);\n    }\n\n    private getOutEndpoint(device: Device, endpointNumber: number): OutEndpoint {\n        const endpoint = this.getEndpoint(device, \"out\", endpointNumber);\n        if (endpoint && endpoint.direction === \"out\") return (endpoint as OutEndpoint);\n    }\n\n    private endpointToUSBEndpoint(descriptor: EndpointDescriptor): USBEndpoint {\n        const direction = descriptor.bEndpointAddress & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n        return new USBEndpoint({\n            endpointNumber: descriptor.bEndpointAddress ^ (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT),\n            direction: direction,\n            type: (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_BULK ? \"bulk\"\n                : (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_INTERRUPT ? \"interrupt\"\n                : \"isochronous\",\n            packetSize: descriptor.wMaxPacketSize\n        });\n    }\n\n    private interfaceToUSBAlternateInterface(device: Device, descriptor: InterfaceDescriptor): Promise<USBAlternateInterface> {\n        return this.getStringDescriptor(device, descriptor.iInterface)\n        .then(name => {\n            return new USBAlternateInterface({\n                alternateSetting: descriptor.bAlternateSetting,\n                interfaceClass: descriptor.bInterfaceClass,\n                interfaceSubclass: descriptor.bInterfaceSubClass,\n                interfaceProtocol: descriptor.bInterfaceProtocol,\n                interfaceName: name,\n                endpoints: descriptor.endpoints.map(this.endpointToUSBEndpoint)\n            });\n        });\n    }\n\n    private interfacesToUSBInterface(device: Device, descriptors: Array<InterfaceDescriptor>): Promise<USBInterface> {\n        return this.serialDevicePromises(this.interfaceToUSBAlternateInterface, device, descriptors)\n        .then(alternates => {\n            return new USBInterface({\n                _handle: this.getDeviceHandle(device),\n                interfaceNumber: descriptors[0].bInterfaceNumber,\n                alternates: alternates\n            });\n        });\n    }\n\n    private configToUSBConfiguration(device: Device, descriptor: ConfigDescriptor): Promise<USBConfiguration> {\n        return this.getStringDescriptor(device, descriptor.iConfiguration)\n        .then(name => {\n            const allInterfaces = descriptor.interfaces || [];\n\n            return this.serialDevicePromises(this.interfacesToUSBInterface, device, allInterfaces)\n            .then(interfaces => {\n                return new USBConfiguration({\n                    configurationValue: descriptor.bConfigurationValue,\n                    configurationName: name,\n                    interfaces: interfaces\n                });\n            });\n        });\n    }\n\n    private getDevice(handle: string): Device {\n        if (!this.devices[handle]) return null;\n        return this.devices[handle].device;\n    }\n\n    private controlTransferParamsToType(setup: USBControlTransferParameters, direction: number): number {\n        const recipient = setup.recipient === \"device\" ? LIBUSB_RECIPIENT_DEVICE\n                        : setup.recipient === \"interface\" ? LIBUSB_RECIPIENT_INTERFACE\n                        : setup.recipient === \"endpoint\" ? LIBUSB_RECIPIENT_ENDPOINT\n                        : LIBUSB_RECIPIENT_OTHER;\n\n        const requestType = setup.requestType === \"standard\" ? LIBUSB_REQUEST_TYPE_STANDARD\n                          : setup.requestType === \"class\" ? LIBUSB_REQUEST_TYPE_CLASS\n                          : LIBUSB_REQUEST_TYPE_VENDOR;\n\n        return recipient | requestType | direction;\n    }\n\n    private openDevice(device: Device, retries: number = 0): Promise<void> {\n        return this.retryPromise(() => {\n            return new Promise<void>((resolve, reject) => {\n                try {\n                    device.open();\n                } catch (error) {\n                    return reject(error);\n                }\n                resolve();\n            });\n        }, retries);\n    }\n\n    public getConnected(handle: string): boolean {\n        return this.getDevice(handle) !== null;\n    }\n\n    public getOpened(handle: string): boolean {\n        const device = this.getDevice(handle);\n        if (!device) return false;\n        return (device.interfaces !== null);\n    }\n\n    public listUSBDevices(preFilters?: Array<USBDeviceFilter>): Promise<Array<USBDevice>> {\n        return this.loadDevices(preFilters)\n        .then(() => {\n            return this.serialPromises(this.devicetoUSBDevice, Object.keys(this.devices));\n        });\n    }\n\n    public open(handle: string): Promise<void> {\n        const device = this.getDevice(handle);\n        return this.openDevice(device);\n    }\n\n    public close(handle: string): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.close();\n            resolve();\n        });\n    }\n\n    public selectConfiguration(handle: string, id: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.setConfiguration(id, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public claimInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).claim();\n            resolve();\n        });\n    }\n\n    public releaseInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).release(true, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const iface = device.interface(interfaceNumber);\n\n            iface.setAltSetting(alternateSetting, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_IN);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, length, (error, buffer) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(buffer),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public controlTransferOut(handle: string, setup: USBControlTransferParameters, data?: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_OUT);\n            const buffer = data ? this.bufferSourceToBuffer(data) : new Buffer(0);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const wIndex = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n            device.controlTransfer(LIBUSB_RECIPIENT_ENDPOINT, CONSTANTS.CLEAR_FEATURE, CONSTANTS.ENDPOINT_HALT, wIndex, 0, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getInEndpoint(device, endpointNumber);\n\n            endpoint.transfer(length, (error, data) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(data),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getOutEndpoint(device, endpointNumber);\n            const buffer = this.bufferSourceToBuffer(data);\n\n            endpoint.transfer(buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferIn error: method not implemented\");\n        });\n    }\n\n    public isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferOut error: method not implemented\");\n        });\n    }\n\n    public reset(handle: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            device.reset(error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n}\n\n/**\n * @hidden\n */\nexport const adapter = new USBAdapter();\n","/*\n* Node WebUSB\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n// tslint:disable:max-classes-per-file\n\n/**\n * @hidden\n */\nexport class DOMEvent implements Event {\n\n    /**\n     * Type of the event\n     */\n    public type: string;\n\n    /**\n     * @hidden\n     */\n    public target: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public currentTarget: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public srcElement: EventTarget;\n\n    /**\n     * @hidden\n     */\n    public timeStamp: number;\n\n    /**\n     * @hidden\n     */\n    public bubbles = false;\n\n    /**\n     * @hidden\n     */\n    public cancelable = false;\n\n    /**\n     * @hidden\n     */\n    public cancelBubble = false;\n\n    /**\n     * @hidden\n     */\n    public composed = false;\n\n    /**\n     * @hidden\n     */\n    public defaultPrevented = false;\n\n    /**\n     * @hidden\n     */\n    public eventPhase = 0;\n\n    /**\n     * @hidden\n     */\n    public isTrusted = true;\n\n    /**\n     * @hidden\n     */\n    public returnValue = true;\n\n    /**\n     * @hidden\n     */\n    public AT_TARGET: number;\n\n    /**\n     * @hidden\n     */\n    public BUBBLING_PHASE: number;\n\n    /**\n     * @hidden\n     */\n    public CAPTURING_PHASE: number;\n\n    /**\n     * @hidden\n     */\n    public NONE: number;\n\n    /**\n     * @hidden\n     */\n    public composedPath(): Array<EventTarget> {\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    public initEvent(type: string, bubbles?: boolean, cancelable?: boolean) {\n        this.type = type;\n        this.bubbles = bubbles;\n        this.cancelable = cancelable;\n    }\n\n    /**\n     * @hidden\n     */\n    public preventDefault() {\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public stopImmediatePropagation() {\n        return;\n    }\n\n    /**\n     * @hidden\n     */\n    public stopPropagation() {\n        return;\n    }\n}\n\n/**\n * @hidden\n */\nexport class W3CUSBConnectionEvent extends DOMEvent implements USBConnectionEvent {\n\n    /**\n     * Device connected or disconnected\n     */\n    public readonly device: USBDevice;\n\n    /**\n     * Type of the event\n     */\n    public readonly type: \"connect\" | \"disconnect\";\n\n    /**\n     * @hidden\n     */\n    constructor(target: EventTarget, type: \"connect\" | \"disconnect\", eventInitDict: USBConnectionEventInit) {\n        super();\n        this.initEvent(type, eventInitDict.bubbles, eventInitDict.cancelable);\n        this.target = target;\n        this.device = eventInitDict.device;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"./dispatcher\";\nimport { USBAdapter, adapter } from \"./adapter\";\nimport { W3CUSBConnectionEvent } from \"./events\";\nimport { W3CUSB } from \"./interfaces\";\nimport { USBDevice as Device } from \"./device\";\n\n/**\n * USB Options\n */\nexport interface USBOptions {\n    /**\n     * A `device found` callback function to allow the user to select a device\n     */\n    devicesFound?: (devices: Array<USBDevice>) => Promise<USBDevice | void>;\n}\n\n/**\n * @hidden\n */\nexport interface USBEvents {\n    /**\n     * USBDevice connected event\n     */\n    connect: USBConnectionEvent;\n    /**\n     * USBDevice disconnected event\n     */\n    disconnect: USBConnectionEvent;\n}\n\n/**\n * USB class\n */\nexport class USB extends (EventDispatcher as new() => TypedDispatcher<USBEvents>) implements W3CUSB {\n\n    private allowedDevices: Array<Device> = [];\n    private devicesFound: (devices: Array<USBDevice>) => Promise<USBDevice | void>;\n\n    private _onconnect: (ev: USBConnectionEvent) => void;\n    public set onconnect(fn: (ev: USBConnectionEvent) => void) {\n        if (this._onconnect) {\n            this.removeEventListener(\"connect\", this._onconnect);\n        }\n        this._onconnect = fn;\n        this.addEventListener(\"connect\", this._onconnect);\n    }\n\n    private _ondisconnect: (ev: USBConnectionEvent) => void;\n    public set ondisconnect(fn: (ev: USBConnectionEvent) => void) {\n        if (this._ondisconnect) {\n            this.removeEventListener(\"disconnect\", this._ondisconnect);\n        }\n        this._ondisconnect = fn;\n        this.addEventListener(\"disconnect\", this._ondisconnect);\n    }\n\n    /**\n     * USB constructor\n     * @param options USB initialisation options\n     */\n    constructor(options?: USBOptions) {\n        super();\n\n        options = options || {};\n        this.devicesFound = options.devicesFound;\n\n        const deviceConnectCallback = device => {\n            // When connected, emit an event if it was a known allowed device\n            if (this.replaceAllowedDevice(device)) {\n                const event = new W3CUSBConnectionEvent(this as EventTarget, \"connect\", { device }) as USBConnectionEvent;\n                this.dispatchEvent(event);\n\n                if (this.onconnect) {\n                    this.onconnect(event);\n                }\n            }\n        };\n\n        const deviceDisconnectCallback = handle => {\n            // When disconnected, emit an event if the device was a known allowed device\n            const device = this.allowedDevices.find(allowedDevices => allowedDevices._handle === handle);\n\n            if (device) {\n                const event = new W3CUSBConnectionEvent(this as EventTarget, \"disconnect\", { device }) as USBConnectionEvent;\n                this.dispatchEvent(event);\n\n                if (this.ondisconnect) {\n                    this.ondisconnect(event);\n                }\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === \"connect\") {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === \"disconnect\") {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === \"connect\") {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === \"disconnect\") {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n    }\n\n    private replaceAllowedDevice(device: Device): boolean {\n        for (const i in this.allowedDevices) {\n            if (this.isSameDevice(device, this.allowedDevices[i])) {\n                this.allowedDevices[i] = device;\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private isSameDevice(device1: USBDevice, device2: USBDevice): boolean {\n        return (device1.productId === device2.productId\n             && device1.vendorId === device2.vendorId\n             && device1.serialNumber === device2.serialNumber);\n    }\n\n    private filterDevice(options: USBDeviceRequestOptions, device: USBDevice): boolean {\n        return options.filters.some(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.vendorId) return false;\n\n            // Product\n            if (filter.productId && filter.productId !== device.productId) return false;\n\n            // Class\n            if (filter.classCode) {\n\n                // Interface Descriptors\n                const match = device.configuration.interfaces.some(iface => {\n                    // Class\n                    if (filter.classCode && filter.classCode !== iface.alternate.interfaceClass) return false;\n\n                    // Subclass\n                    if (filter.subclassCode && filter.subclassCode !== iface.alternate.interfaceSubclass) return false;\n\n                    // Protocol\n                    if (filter.protocolCode && filter.protocolCode !== iface.alternate.interfaceProtocol) return false;\n\n                    return true;\n                });\n\n                if (match) return true;\n            }\n\n            // Class\n            if (filter.classCode && filter.classCode !== device.deviceClass) return false;\n\n            // Subclass\n            if (filter.subclassCode && filter.subclassCode !== device.deviceSubclass) return false;\n\n            // Protocol\n            if (filter.protocolCode && filter.protocolCode !== device.deviceProtocol) return false;\n\n            // Serial\n            if (filter.serialNumber && filter.serialNumber !== device.serialNumber) return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Gets all allowed Web USB devices which are connected\n     * @returns Promise containing an array of devices\n     */\n    public getDevices(): Promise<Array<USBDevice>> {\n        // Create pre-filters\n        const preFilters = this.allowedDevices.map(device => ({\n            vendorId: device.vendorId || undefined,\n            productId: device.productId || undefined,\n            classCode: device.deviceClass || undefined,\n            subclassCode: device.deviceSubclass || undefined,\n            protocolCode: device.deviceProtocol || undefined,\n            serialNumber: device.serialNumber || undefined\n        }));\n\n        // Refresh devices and filter for allowed ones\n        return adapter.listUSBDevices(preFilters)\n        .then(devices => {\n            const allowed = devices.filter(device => {\n                if (!device.connected) {\n                    return false;\n                }\n\n                for (const i in this.allowedDevices) {\n                    if (this.isSameDevice(device, this.allowedDevices[i])) {\n                        return true;\n                    }\n                }\n\n                return false;\n            });\n\n            return allowed;\n        });\n    }\n\n    /**\n     * Requests a single Web USB device\n     * @param options The options to use when scanning\n     * @returns Promise containing the selected device\n     */\n    public requestDevice(options: USBDeviceRequestOptions): Promise<USBDevice> {\n        return new Promise((resolve, reject) => {\n            // Must have options\n            if (!options) {\n                return reject(new TypeError(\"requestDevice error: 1 argument required, but only 0 present\"));\n            }\n\n            // Options must be an object\n            if (options.constructor !== {}.constructor) {\n                return reject(new TypeError(\"requestDevice error: parameter 1 (options) is not an object\"));\n            }\n\n            // Must have a filter\n            if (!options.filters) {\n                return reject(new TypeError(\"requestDevice error: required member filters is undefined\"));\n            }\n\n            // Filter must be an array\n            if (options.filters.constructor !== [].constructor) {\n                return reject(new TypeError(\"requestDevice error: the provided value cannot be converted to a sequence\"));\n            }\n\n            // Check filters\n            const check = options.filters.every(filter => {\n\n                // Protocol & Subclass\n                if (filter.protocolCode && !filter.subclassCode) {\n                    reject(new TypeError(\"requestDevice error: subclass code is required\"));\n                    return false;\n                }\n\n                // Subclass & Class\n                if (filter.subclassCode && !filter.classCode) {\n                    reject(new TypeError(\"requestDevice error: class code is required\"));\n                    return false;\n                }\n\n                return true;\n            });\n\n            if (!check) return;\n\n            return adapter.listUSBDevices(options.filters)\n            .then(devices => {\n                devices = devices.filter(device => this.filterDevice(options, device));\n\n                if (devices.length === 0) {\n                    return reject(new Error(\"requestDevice error: no devices found\"));\n                }\n\n                function selectFn(device: USBDevice) {\n                    if (!this.replaceAllowedDevice(device)) this.allowedDevices.push(device);\n                    resolve(device);\n                }\n\n                // If no devicesFound function, select the first device found\n                if (!this.devicesFound) return selectFn.call(this, devices[0]);\n\n                return this.devicesFound(devices)\n                .then(device => {\n                    if (!device) {\n                        reject(new Error(\"selected device not found\"));\n                    }\n\n                    return selectFn.call(this, device);\n                });\n            }).catch(error => {\n                reject(new Error(`requestDevice error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USB, USBOptions } from \"./usb\";\n\n/**\n * Default usb instance synonymous with `navigator.usb`\n */\nexport const usb = new USB();\n\n/**\n * USB class for creating new instances\n */\nexport { USB, USBOptions };\n\n/**\n * Adapter\n */\nexport {\n    adapter,\n    USBAdapter\n} from \"./adapter\";\n","var usb = exports = module.exports = require('bindings')('usb_bindings');\nvar events = require('events')\nvar util = require('util')\n\nvar isBuffer = function(obj) {\n\treturn obj && obj instanceof Uint8Array\n}\n\nif (usb.INIT_ERROR) {\n\tconsole.warn(\"Failed to initialize libusb.\")\n\tusb.Device = function () { throw new Error(\"Device cannot be instantiated directly.\") };\n\tusb.Transfer = function () { throw new Error(\"Transfer cannot be instantiated directly.\") };\n\tusb.setDebugLevel = function () { };\n\tusb.getDeviceList = function () { return []; };\n\tusb._enableHotplugEvents = function () { };\n\tusb._disableHotplugEvents = function () { };\n}\n\nObject.keys(events.EventEmitter.prototype).forEach(function (key) {\n\texports[key] = events.EventEmitter.prototype[key];\n});\n\n// convenience method for finding a device by vendor and product id\nexports.findByIds = function(vid, pid) {\n\tvar devices = usb.getDeviceList()\n\n\tfor (var i = 0; i < devices.length; i++) {\n\t\tvar deviceDesc = devices[i].deviceDescriptor\n\t\tif ((deviceDesc.idVendor == vid) && (deviceDesc.idProduct == pid)) {\n\t\t\treturn devices[i]\n\t\t}\n\t}\n}\n\nusb.Device.prototype.timeout = 1000\n\nusb.Device.prototype.open = function(defaultConfig){\n\tthis.__open()\n\tif (defaultConfig === false) return\n\tthis.interfaces = []\n\tvar len = this.configDescriptor ? this.configDescriptor.interfaces.length : 0\n\tfor (var i=0; i<len; i++){\n\t\tthis.interfaces[i] = new Interface(this, i)\n\t}\n}\n\nusb.Device.prototype.close = function(){\n\tthis.__close()\n\tthis.interfaces = null\n}\n\nObject.defineProperty(usb.Device.prototype, \"configDescriptor\", {\n\tget: function() {\n\t\ttry {\n\t\t\treturn this._configDescriptor || (this._configDescriptor = this.__getConfigDescriptor())\n\t\t} catch(e) {\n\t\t\t// Check descriptor exists\n\t\t\tif (e.errno == usb.LIBUSB_ERROR_NOT_FOUND) return null;\n\t\t\tthrow e;\n\t\t}\n\t}\n});\n\nObject.defineProperty(usb.Device.prototype, \"allConfigDescriptors\", {\n\tget: function() {\n\t\ttry {\n\t\t\treturn this._allConfigDescriptors || (this._allConfigDescriptors = this.__getAllConfigDescriptors())\n\t\t} catch(e) {\n\t\t\t// Check descriptors exist\n\t\t\tif (e.errno == usb.LIBUSB_ERROR_NOT_FOUND) return [];\n\t\t\tthrow e;\n\t\t}\n\t}\n});\n\nObject.defineProperty(usb.Device.prototype, \"parent\", {\n\tget: function() {\n\t\treturn this._parent || (this._parent = this.__getParent())\n\t}\n});\n\nusb.Device.prototype.interface = function(addr){\n\tif (!this.interfaces){\n\t\tthrow new Error(\"Device must be open before searching for interfaces\")\n\t}\n\taddr = addr || 0\n\tfor (var i=0; i<this.interfaces.length; i++){\n\t\tif (this.interfaces[i].interfaceNumber == addr){\n\t\t\treturn this.interfaces[i]\n\t\t}\n\t}\n}\n\nvar SETUP_SIZE = usb.LIBUSB_CONTROL_SETUP_SIZE\n\nusb.Device.prototype.controlTransfer =\nfunction(bmRequestType, bRequest, wValue, wIndex, data_or_length, callback){\n\tvar self = this\n\tvar isIn = !!(bmRequestType & usb.LIBUSB_ENDPOINT_IN)\n\tvar wLength\n\n\tif (isIn){\n\t\tif (!(data_or_length >= 0)){\n\t\t\tthrow new TypeError(\"Expected size number for IN transfer (based on bmRequestType)\")\n\t\t}\n\t\twLength = data_or_length\n\t}else{\n\t\tif (!isBuffer(data_or_length)){\n\t\t\tthrow new TypeError(\"Expected buffer for OUT transfer (based on bmRequestType)\")\n\t\t}\n\t\twLength = data_or_length.length\n\t}\n\n\t// Buffer for the setup packet\n\t// http://libusbx.sourceforge.net/api-1.0/structlibusb__control__setup.html\n\tvar buf = Buffer.alloc(wLength + SETUP_SIZE)\n\tbuf.writeUInt8(   bmRequestType, 0)\n\tbuf.writeUInt8(   bRequest,      1)\n\tbuf.writeUInt16LE(wValue,        2)\n\tbuf.writeUInt16LE(wIndex,        4)\n\tbuf.writeUInt16LE(wLength,       6)\n\n\tif (!isIn){\n\t\tbuf.set(data_or_length, SETUP_SIZE)\n\t}\n\n\tvar transfer = new usb.Transfer(this, 0, usb.LIBUSB_TRANSFER_TYPE_CONTROL, this.timeout,\n\t\tfunction(error, buf, actual){\n\t\t\tif (callback){\n\t\t\t\tif (isIn){\n\t\t\t\t\tcallback.call(self, error, buf.slice(SETUP_SIZE, SETUP_SIZE + actual))\n\t\t\t\t}else{\n\t\t\t\t\tcallback.call(self, error)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t)\n\n\ttry {\n\t\ttransfer.submit(buf)\n\t} catch (e) {\n\t\tif (callback){\n\t\t\tprocess.nextTick(function() { callback.call(self, e); });\n\t\t}\n\t}\n\treturn this;\n}\n\nusb.Device.prototype.getStringDescriptor = function (desc_index, callback) {\n\tvar langid = 0x0409;\n\tvar length = 255;\n\tthis.controlTransfer(\n\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t((usb.LIBUSB_DT_STRING << 8) | desc_index),\n\t\tlangid,\n\t\tlength,\n\t\tfunction (error, buf) {\n\t\t\tif (error) return callback(error);\n\t\t\tcallback(undefined, buf.toString('utf16le', 2));\n\t\t}\n\t);\n}\n\nusb.Device.prototype.getBosDescriptor = function (callback) {\n\n\tif (this._bosDescriptor) {\n\t\t// Cached descriptor\n\t\treturn callback(undefined, this._bosDescriptor);\n\t}\n\n\tif (this.deviceDescriptor.bcdUSB < 0x201) {\n\t\t// BOS is only supported from USB 2.0.1\n\t\treturn callback(undefined, null);\n\t}\n\n\tthis.controlTransfer(\n\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t(usb.LIBUSB_DT_BOS << 8),\n\t\t0,\n\t\tusb.LIBUSB_DT_BOS_SIZE,\n\t\tfunction (error, buffer) {\n\t\t\tif (error) {\n\t\t\t\t// Check BOS descriptor exists\n\t\t\t\tif (error.errno == usb.LIBUSB_TRANSFER_STALL) return callback(undefined, null);\n\t\t\t\treturn callback(error, null);\n\t\t\t}\n\n\t\t\tvar totalLength = buffer.readUInt16LE(2);\n\t\t\tthis.controlTransfer(\n\t\t\t\tusb.LIBUSB_ENDPOINT_IN,\n\t\t\t\tusb.LIBUSB_REQUEST_GET_DESCRIPTOR,\n\t\t\t\t(usb.LIBUSB_DT_BOS << 8),\n\t\t\t\t0,\n\t\t\t\ttotalLength,\n\t\t\t\tfunction (error, buffer) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\t// Check BOS descriptor exists\n\t\t\t\t\t\tif (error.errno == usb.LIBUSB_TRANSFER_STALL) return callback(undefined, null);\n\t\t\t\t\t\treturn callback(error, null);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar descriptor = {\n\t\t\t\t\t\tbLength: buffer.readUInt8(0),\n\t\t\t\t\t\tbDescriptorType: buffer.readUInt8(1),\n\t\t\t\t\t\twTotalLength: buffer.readUInt16LE(2),\n\t\t\t\t\t\tbNumDeviceCaps: buffer.readUInt8(4),\n\t\t\t\t\t\tcapabilities: []\n\t\t\t\t\t};\n\n\t\t\t\t\tvar i = usb.LIBUSB_DT_BOS_SIZE;\n\t\t\t\t\twhile (i < descriptor.wTotalLength) {\n\t\t\t\t\t\tvar capability = {\n\t\t\t\t\t\t\tbLength: buffer.readUInt8(i + 0),\n\t\t\t\t\t\t\tbDescriptorType: buffer.readUInt8(i + 1),\n\t\t\t\t\t\t\tbDevCapabilityType: buffer.readUInt8(i + 2)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tcapability.dev_capability_data = buffer.slice(i + 3, i + capability.bLength);\n\t\t\t\t\t\tdescriptor.capabilities.push(capability);\n\t\t\t\t\t\ti += capability.bLength;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache descriptor\n\t\t\t\t\tthis._bosDescriptor = descriptor;\n\t\t\t\t\tcallback(undefined, this._bosDescriptor);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n}\n\nusb.Device.prototype.getCapabilities = function (callback) {\n\tvar capabilities = [];\n\tvar self = this;\n\n\tthis.getBosDescriptor(function(error, descriptor) {\n\t\tif (error) return callback(error, null);\n\n\t\tvar len = descriptor ? descriptor.capabilities.length : 0\n\t\tfor (var i=0; i<len; i++){\n\t\t\tcapabilities.push(new Capability(self, i))\n\t\t}\n\n\t\tcallback(undefined, capabilities);\n\t});\n}\n\nusb.Device.prototype.setConfiguration = function(desired, cb) {\n\tvar self = this;\n\tthis.__setConfiguration(desired, function(err) {\n\t\tif (!err) {\n\t\t\tthis.interfaces = []\n\t\t\tvar len = this.configDescriptor ? this.configDescriptor.interfaces.length : 0\n\t\t\tfor (var i=0; i<len; i++) {\n\t\t\t\tthis.interfaces[i] = new Interface(this, i)\n\t\t\t}\n\t\t}\n\t\tcb.call(self, err)\n\t});\n}\n\nfunction Interface(device, id){\n\tthis.device = device\n\tthis.id = id\n\tthis.altSetting = 0;\n\tthis.__refresh()\n}\n\nInterface.prototype.__refresh = function(){\n\tthis.descriptor = this.device.configDescriptor.interfaces[this.id][this.altSetting]\n\tthis.interfaceNumber = this.descriptor.bInterfaceNumber\n\tthis.endpoints = []\n\tvar len = this.descriptor.endpoints.length\n\tfor (var i=0; i<len; i++){\n\t\tvar desc = this.descriptor.endpoints[i]\n\t\tvar c = (desc.bEndpointAddress&usb.LIBUSB_ENDPOINT_IN)?InEndpoint:OutEndpoint\n\t\tthis.endpoints[i] = new c(this.device, desc)\n\t}\n}\n\nInterface.prototype.claim = function(){\n\tthis.device.__claimInterface(this.id)\n}\n\nInterface.prototype.release = function(closeEndpoints, cb){\n\tvar self = this;\n\tif (typeof closeEndpoints == 'function') {\n\t\tcb = closeEndpoints;\n\t\tcloseEndpoints = null;\n\t}\n\n\tif (!closeEndpoints || this.endpoints.length == 0) {\n\t\tnext();\n\t} else {\n\t\tvar n = self.endpoints.length;\n\t\tself.endpoints.forEach(function (ep, i) {\n\t\t\tif (ep.pollActive) {\n\t\t\t\tep.once('end', function () {\n\t\t\t\t\tif (--n == 0) next();\n\t\t\t\t});\n\t\t\t\tep.stopPoll();\n\t\t\t} else {\n\t\t\t\tif (--n == 0) next();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction next () {\n\t\tself.device.__releaseInterface(self.id, function(err){\n\t\t\tif (!err){\n\t\t\t\tself.altSetting = 0;\n\t\t\t\tself.__refresh()\n\t\t\t}\n\t\t\tcb.call(self, err)\n\t\t})\n\t}\n}\n\nInterface.prototype.isKernelDriverActive = function(){\n\treturn this.device.__isKernelDriverActive(this.id)\n}\n\nInterface.prototype.detachKernelDriver = function() {\n\treturn this.device.__detachKernelDriver(this.id)\n};\n\nInterface.prototype.attachKernelDriver = function() {\n\treturn this.device.__attachKernelDriver(this.id)\n};\n\n\nInterface.prototype.setAltSetting = function(altSetting, cb){\n\tvar self = this;\n\tthis.device.__setInterface(this.id, altSetting, function(err){\n\t\tif (!err){\n\t\t\tself.altSetting = altSetting;\n\t\t\tself.__refresh();\n\t\t}\n\t\tcb.call(self, err)\n\t})\n}\n\nInterface.prototype.endpoint = function(addr){\n\tfor (var i=0; i<this.endpoints.length; i++){\n\t\tif (this.endpoints[i].address == addr){\n\t\t\treturn this.endpoints[i]\n\t\t}\n\t}\n}\n\nfunction Capability(device, id){\n\tthis.device = device\n\tthis.id = id\n\tthis.descriptor = this.device._bosDescriptor.capabilities[this.id]\n\tthis.type = this.descriptor.bDevCapabilityType\n\tthis.data = this.descriptor.dev_capability_data\n}\n\nfunction Endpoint(device, descriptor){\n\tthis.device = device\n\tthis.descriptor = descriptor\n\tthis.address = descriptor.bEndpointAddress\n\tthis.transferType = descriptor.bmAttributes&0x03\n}\nutil.inherits(Endpoint, events.EventEmitter)\n\nEndpoint.prototype.timeout = 0\n\nEndpoint.prototype.clearHalt = function(callback){\n\treturn this.device.__clearHalt(this.address, callback);\n}\n\nEndpoint.prototype.makeTransfer = function(timeout, callback){\n\treturn new usb.Transfer(this.device, this.address, this.transferType, timeout, callback)\n}\n\nEndpoint.prototype.startPoll = function(nTransfers, transferSize, callback){\n\tif (this.pollTransfers){\n\t\tthrow new Error(\"Polling already active\")\n\t}\n\n\tnTransfers = nTransfers || 3;\n\tthis.pollTransferSize = transferSize || this.descriptor.wMaxPacketSize;\n\tthis.pollActive = true\n\tthis.pollPending = 0\n\n\tvar transfers = []\n\tfor (var i=0; i<nTransfers; i++){\n\t\ttransfers[i] = this.makeTransfer(0, callback)\n\t}\n\treturn transfers;\n}\n\nEndpoint.prototype.stopPoll = function(cb){\n\tif (!this.pollTransfers) {\n\t\tthrow new Error('Polling is not active.');\n\t}\n\tfor (var i=0; i<this.pollTransfers.length; i++){\n\t\ttry {\n\t\t\tthis.pollTransfers[i].cancel()\n\t\t} catch (err) {\n\t\t\tthis.emit('error', err);\n\t\t}\n\t}\n\tthis.pollActive = false\n\tif (cb) this.once('end', cb);\n}\n\nfunction InEndpoint(device, descriptor){\n\tEndpoint.call(this, device, descriptor)\n}\n\nexports.InEndpoint = InEndpoint\nutil.inherits(InEndpoint, Endpoint)\nInEndpoint.prototype.direction = \"in\"\n\nInEndpoint.prototype.transfer = function(length, cb){\n\tvar self = this\n\tvar buffer = Buffer.alloc(length)\n\n\tfunction callback(error, buf, actual){\n\t\tcb.call(self, error, buffer.slice(0, actual))\n\t}\n\n\ttry {\n\t\tthis.makeTransfer(this.timeout, callback).submit(buffer)\n\t} catch (e) {\n\t\tprocess.nextTick(function() { cb.call(self, e); });\n\t}\n\treturn this;\n}\n\nInEndpoint.prototype.startPoll = function(nTransfers, transferSize){\n\tvar self = this\n\tthis.pollTransfers = InEndpoint.super_.prototype.startPoll.call(this, nTransfers, transferSize, transferDone)\n\n\tfunction transferDone(error, buf, actual){\n\t\tif (!error){\n\t\t\tself.emit(\"data\", buf.slice(0, actual))\n\t\t}else if (error.errno != usb.LIBUSB_TRANSFER_CANCELLED){\n\t\t\tself.emit(\"error\", error)\n\t\t\tself.stopPoll()\n\t\t}\n\n\t\tif (self.pollActive){\n\t\t\tstartTransfer(this)\n\t\t}else{\n\t\t\tself.pollPending--\n\n\t\t\tif (self.pollPending == 0){\n\t\t\t\tdelete self.pollTransfers;\n\t\t\t\tself.emit('end')\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction startTransfer(t){\n\t\ttry {\n\t\t\tt.submit(Buffer.alloc(self.pollTransferSize), transferDone);\n\t\t} catch (e) {\n\t\t\tself.emit(\"error\", e);\n\t\t\tself.stopPoll();\n\t\t}\n\t}\n\n\tthis.pollTransfers.forEach(startTransfer)\n\tself.pollPending = this.pollTransfers.length\n}\n\n\n\nfunction OutEndpoint(device, descriptor){\n\tEndpoint.call(this, device, descriptor)\n}\nexports.OutEndpoint = OutEndpoint\nutil.inherits(OutEndpoint, Endpoint)\nOutEndpoint.prototype.direction = \"out\"\n\nOutEndpoint.prototype.transfer = function(buffer, cb){\n\tvar self = this\n\tif (!buffer){\n\t\tbuffer = Buffer.alloc(0)\n\t}else if (!isBuffer(buffer)){\n\t\tbuffer = Buffer.from(buffer)\n\t}\n\n\tfunction callback(error, buf, actual){\n\t\tif (cb) cb.call(self, error)\n\t}\n\n\ttry {\n\t\tthis.makeTransfer(this.timeout, callback).submit(buffer);\n\t} catch (e) {\n\t\tprocess.nextTick(function() { callback(e); });\n\t}\n\n\treturn this;\n}\n\nOutEndpoint.prototype.transferWithZLP = function (buf, cb) {\n\tif (buf.length % this.descriptor.wMaxPacketSize == 0) {\n\t\tthis.transfer(buf);\n\t\tthis.transfer(Buffer.alloc(0), cb);\n\t} else {\n\t\tthis.transfer(buf, cb);\n\t}\n}\n\nvar hotplugListeners = 0;\nexports.on('newListener', function(name) {\n\tif (name !== 'attach' && name !== 'detach') return;\n\tif (++hotplugListeners === 1) {\n\t\tusb._enableHotplugEvents();\n\t}\n});\n\nexports.on('removeListener', function(name) {\n\tif (name !== 'attach' && name !== 'detach') return;\n\tif (--hotplugListeners === 0) {\n\t\tusb._disableHotplugEvents();\n\t}\n});\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n  path = require('path'),\n  fileURLToPath = require('file-uri-to-path'),\n  join = path.join,\n  dirname = path.dirname,\n  exists =\n    (fs.accessSync &&\n      function(path) {\n        try {\n          fs.accessSync(path);\n        } catch (e) {\n          return false;\n        }\n        return true;\n      }) ||\n    fs.existsSync ||\n    path.existsSync,\n  defaults = {\n    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',\n    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',\n    platform: process.platform,\n    arch: process.arch,\n    nodePreGyp:\n      'node-v' +\n      process.versions.modules +\n      '-' +\n      process.platform +\n      '-' +\n      process.arch,\n    version: process.versions.node,\n    bindings: 'bindings.node',\n    try: [\n      // node-gyp's linked version in the \"build\" dir\n      ['module_root', 'build', 'bindings'],\n      // node-waf and gyp_addon (a.k.a node-gyp)\n      ['module_root', 'build', 'Debug', 'bindings'],\n      ['module_root', 'build', 'Release', 'bindings'],\n      // Debug files, for development (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Debug', 'bindings'],\n      ['module_root', 'Debug', 'bindings'],\n      // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Release', 'bindings'],\n      ['module_root', 'Release', 'bindings'],\n      // Legacy from node-waf, node <= 0.4.x\n      ['module_root', 'build', 'default', 'bindings'],\n      // Production \"Release\" buildtype binary (meh...)\n      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],\n      // node-qbs builds\n      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],\n      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}\n      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']\n    ]\n  };\n\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */\n\nfunction bindings(opts) {\n  // Argument surgery\n  if (typeof opts == 'string') {\n    opts = { bindings: opts };\n  } else if (!opts) {\n    opts = {};\n  }\n\n  // maps `defaults` onto `opts` object\n  Object.keys(defaults).map(function(i) {\n    if (!(i in opts)) opts[i] = defaults[i];\n  });\n\n  // Get the module root\n  if (!opts.module_root) {\n    opts.module_root = exports.getRoot(exports.getFileName());\n  }\n\n  // Ensure the given bindings name ends with .node\n  if (path.extname(opts.bindings) != '.node') {\n    opts.bindings += '.node';\n  }\n\n  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035\n  var requireFunc =\n    typeof __webpack_require__ === 'function'\n      ? __non_webpack_require__\n      : require;\n\n  var tries = [],\n    i = 0,\n    l = opts.try.length,\n    n,\n    b,\n    err;\n\n  for (; i < l; i++) {\n    n = join.apply(\n      null,\n      opts.try[i].map(function(p) {\n        return opts[p] || p;\n      })\n    );\n    tries.push(n);\n    try {\n      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);\n      if (!opts.path) {\n        b.path = n;\n      }\n      return b;\n    } catch (e) {\n      if (e.code !== 'MODULE_NOT_FOUND' &&\n          e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' &&\n          !/not find/i.test(e.message)) {\n        throw e;\n      }\n    }\n  }\n\n  err = new Error(\n    'Could not locate the bindings file. Tried:\\n' +\n      tries\n        .map(function(a) {\n          return opts.arrow + a;\n        })\n        .join('\\n')\n  );\n  err.tries = tries;\n  throw err;\n}\nmodule.exports = exports = bindings;\n\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */\n\nexports.getFileName = function getFileName(calling_file) {\n  var origPST = Error.prepareStackTrace,\n    origSTL = Error.stackTraceLimit,\n    dummy = {},\n    fileName;\n\n  Error.stackTraceLimit = 10;\n\n  Error.prepareStackTrace = function(e, st) {\n    for (var i = 0, l = st.length; i < l; i++) {\n      fileName = st[i].getFileName();\n      if (fileName !== __filename) {\n        if (calling_file) {\n          if (fileName !== calling_file) {\n            return;\n          }\n        } else {\n          return;\n        }\n      }\n    }\n  };\n\n  // run the 'prepareStackTrace' function above\n  Error.captureStackTrace(dummy);\n  dummy.stack;\n\n  // cleanup\n  Error.prepareStackTrace = origPST;\n  Error.stackTraceLimit = origSTL;\n\n  // handle filename that starts with \"file://\"\n  var fileSchema = 'file://';\n  if (fileName.indexOf(fileSchema) === 0) {\n    fileName = fileURLToPath(fileName);\n  }\n\n  return fileName;\n};\n\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */\n\nexports.getRoot = function getRoot(file) {\n  var dir = dirname(file),\n    prev;\n  while (true) {\n    if (dir === '.') {\n      // Avoids an infinite loop in rare cases, like the REPL\n      dir = process.cwd();\n    }\n    if (\n      exists(join(dir, 'package.json')) ||\n      exists(join(dir, 'node_modules'))\n    ) {\n      // Found the 'package.json' file or 'node_modules' dir; we're done\n      return dir;\n    }\n    if (prev === dir) {\n      // Got to the top\n      throw new Error(\n        'Could not find module root given file: \"' +\n          file +\n          '\". Do you have a `package.json` file? '\n      );\n    }\n    // Try the parent dir next\n    prev = dir;\n    dir = join(dir, '..');\n  }\n};\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","\n/**\n * Module dependencies.\n */\n\nvar sep = require('path').sep || '/';\n\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath (uri) {\n  if ('string' != typeof uri ||\n      uri.length <= 7 ||\n      'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1);\n\n  // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  }\n\n  // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n  path = path.replace(/^(.+)\\|/, '$1:');\n\n  // for Windows, we need to invert the path separators from what a URI uses\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {\n    // has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = sep + path;\n  }\n\n  return host + path;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nvar isArgumentsObject = require('is-arguments');\nvar isGeneratorFunction = require('is-generator-function');\nvar whichTypedArray = require('which-typed-array');\nvar isTypedArray = require('is-typed-array');\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n","'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n","'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n","'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n","\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach (obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n\n","'use strict';\n\nvar possibleNames = [\n\t'BigInt64Array',\n\t'BigUint64Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Int8Array',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray'\n];\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\n\nmodule.exports = function availableTypedArrays() {\n\tvar out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n","'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","import JDBridge from \"../bridge\"\nimport { inIFrame } from \"../iframeclient\"\n\nclass IFrameBridge extends JDBridge {\n    constructor(readonly targetOrigin: string) {\n        super()\n        this.handleMessage = this.handleMessage.bind(this)\n        window.addEventListener(\"message\", this.handleMessage, false)\n        this.mount(() =>\n            window.removeEventListener(\"message\", this.handleMessage)\n        )\n        console.debug(`jacdac: iframe bridge created`)\n    }\n\n    private handleMessage(msg: MessageEvent) {\n        const { data } = msg\n        if (data.channel === \"jacdac\" && data.type === \"messagepacket\") {\n            const payload: Uint8Array = data.data\n            this.receivePacket(payload)\n        }\n    }\n\n    protected sendPacket(data: Uint8Array): void {\n        const msg = {\n            type: \"messagepacket\",\n            channel: \"jacdac\",\n            data,\n            sender: this.bridgeId,\n            broadcast: true,\n        }\n        window.parent.postMessage(msg, this.targetOrigin)\n    }\n}\n\nexport default function createIFrameBridge(parentOrigin = \"*\"): JDBridge {\n    return inIFrame() && new IFrameBridge(parentOrigin)\n}\n\nexport function startDevTools() {\n    if (\n        typeof window !== \"undefined\" &&\n        !/^https:\\/\\/microsoft.github.io\\/jacdac-docs\\//.test(\n            window.location.href\n        )\n    )\n        window.location.href = `https://microsoft.github.io/jacdac-docs/clients/javascript/devtools.html#${window.location.href}`\n}\n","import {\n    BOUND,\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    DEVICE_DISCONNECT,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    UNBOUND,\n} from \"./constants\"\nimport JDBus from \"./bus\"\nimport JDDevice from \"./device\"\nimport JDService from \"./service\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { JDClient } from \"./client\"\n\n/**\n * A binding from a name to a service\n * @category Roles\n */\nexport interface RoleBinding {\n    role: string\n    serviceClass: number\n    preferredDeviceId?: string\n    service?: JDService\n}\n\n/**\n * A role manager\n * @category Roles\n */\nexport class RoleManager extends JDClient {\n    private readonly _roles: RoleBinding[] = []\n\n    /**\n     * Gets the bus for this role\n     */\n    public readonly bus: JDBus\n\n    constructor(bus: JDBus) {\n        super()\n        this.bus = bus\n        this.mount(\n            this.bus.subscribe(DEVICE_ANNOUNCE, this.addServices.bind(this))\n        )\n        this.mount(\n            this.bus.subscribe(\n                DEVICE_DISCONNECT,\n                this.removeServices.bind(this)\n            )\n        )\n\n        this.bindServices()\n    }\n\n    /**\n     * Indicates if all roles are bound.\n     */\n    get isBound() {\n        return this._roles.every(({ service }) => !!service)\n    }\n\n    /**\n     * Gets the list of roles tracked by the manager\n     */\n    roles(bound: boolean = undefined) {\n        if (bound !== undefined)\n            return this._roles.filter(({ service }) => !!service === bound)\n        else return this._roles.slice(0)\n    }\n\n    /**\n     * Updates the list of roles\n     * @param newRoles\n     */\n    updateRoles(newRoles: RoleBinding[]) {\n        const oldBound = this.isBound\n        let changed = false\n\n        // remove unknown roles\n        const supportedNewRoles = newRoles.filter(({ serviceClass }) =>\n            serviceSpecificationFromClassIdentifier(serviceClass)\n        )\n\n        // unbind removed roles\n        let i = 0\n        while (i < this._roles.length) {\n            const role = this._roles[i]\n            if (!supportedNewRoles.find(r => r.role === role.role)) {\n                changed = true\n                this._roles.splice(i, 1)\n                this.emit(ROLE_UNBOUND, role.role)\n            } else {\n                i++\n            }\n        }\n\n        // update or add roles\n        for (const newRole of supportedNewRoles) {\n            const existingRole = this._roles.find(r => r.role === newRole.role)\n            if (!existingRole) {\n                // added role\n                changed = true\n                this._roles.push({ ...newRole })\n            } else if (existingRole.serviceClass !== newRole.serviceClass) {\n                // modified type, force rebinding\n                changed = true\n                existingRole.serviceClass = newRole.serviceClass\n                if (existingRole.service) {\n                    existingRole.service = undefined\n                    this.emit(ROLE_UNBOUND, existingRole.role)\n                }\n            } // else unmodifed role\n        }\n        // bound services\n        this.bindServices(changed)\n        this.emitBoundEvents(oldBound)\n    }\n\n    /**\n     * Resolves the service bound to a given role.\n     * @param role\n     * @returns\n     */\n    public service(role: string): JDService {\n        return this._roles.find(r => r.role === role)?.service\n    }\n\n    /**\n     * Updates or creates a new role\n     * @param role name of the role\n     * @param serviceClass desired service class\n     * @param preferredDeviceId optional preferred device id\n     * @returns\n     */\n    public updateRole(\n        role: string,\n        serviceClass: number,\n        preferredDeviceId?: string\n    ) {\n        if (!serviceSpecificationFromClassIdentifier(serviceClass)) return // unknown role type\n\n        let binding = this._roles.find(r => r.role === role)\n\n        // check if we already have this role\n        if (binding && serviceClass === binding.serviceClass) {\n            if (!binding.service && preferredDeviceId) {\n                binding.preferredDeviceId = preferredDeviceId\n            }\n            return\n        }\n        const oldBound = this.isBound\n        // new role\n        binding = { role, serviceClass, preferredDeviceId }\n        this._roles.push(binding)\n        if (!this.bindRole(binding)) {\n            this.emit(ROLE_UNBOUND, role)\n        }\n        this.emit(CHANGE)\n        this.emitBoundEvents(oldBound)\n    }\n\n    private emitBoundEvents(oldBound: boolean) {\n        const bound = this.isBound\n        if (oldBound !== bound) this.emit(bound ? BOUND : UNBOUND)\n    }\n\n    // TODO: need to respect other (unbound) role's preferredDeviceId\n    private bindRole(role: RoleBinding) {\n        const ret = this.bus\n            .services({\n                ignoreInfrastructure: true,\n                serviceClass: role.serviceClass,\n            })\n            .filter(s => !this.roles(true).find(r => r.service === s))\n        if (ret.length) {\n            let theOne = ret[0]\n            if (role.preferredDeviceId) {\n                const newOne = ret.find(\n                    s => s.device.deviceId === role.preferredDeviceId\n                )\n                if (newOne) theOne = newOne\n            }\n            role.service = theOne\n            this.emit(ROLE_BOUND, role.role)\n            return true\n        }\n        return false\n    }\n\n    private bindServices(changed?: boolean) {\n        this.roles(false).forEach(binding => {\n            if (this.bindRole(binding)) changed = true\n        })\n        if (changed) this.emit(CHANGE)\n    }\n\n    private addServices(dev: JDDevice) {\n        if (dev === this.bus.selfDevice) return\n        this.bindServices()\n    }\n\n    private removeServices(dev: JDDevice) {\n        let changed = false\n        this._roles\n            .filter(r => r.service?.device === dev)\n            .forEach(r => {\n                r.service = undefined\n                this.emit(ROLE_UNBOUND, r.role)\n                changed = true\n            })\n        this.bindServices(changed)\n    }\n\n    toString() {\n        return this._roles\n            .map(({ role, service }) => `${role}->${service || \"?\"}`)\n            .join(\",\")\n    }\n}\nexport default RoleManager\n\n/**\n * Tracks a set of roles\n * @param bus bus hosting the devices\n * @param bindings map of role names to device service pairs\n * @param onUpdate callback to run whenver role assignments change\n * @param options Additional options\n * @returns A unsubscribe callback to cleanup handlers\n * @category Roles\n */\nexport function startRoles<\n    TRoles extends Record<\n        string,\n        { serviceClass: number; preferredDeviceId?: string }\n    >\n>(\n    bus: JDBus,\n    bindings: TRoles,\n    onUpdate: (roles: Record<keyof TRoles, JDService>) => void,\n    options?: {\n        /**\n         * Calls update even if not all role around bound\n         */\n        incomplete?: boolean\n    }\n): () => void {\n    const { incomplete } = options || {}\n    const roleManager = new RoleManager(bus)\n    roleManager.updateRoles(\n        Object.keys(bindings).map(role => ({\n            role,\n            serviceClass: bindings[role].serviceClass,\n            preferredDeviceId: bindings[role].preferredDeviceId,\n        }))\n    )\n    const roles = () => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const r: Record<keyof TRoles, JDService> = {} as any\n        for (const key in bindings) {\n            const srv = roleManager.service(key)\n            if (srv) r[key] = srv\n        }\n        return r\n    }\n    const update = () => {\n        if (!incomplete && !roleManager.isBound) return\n        onUpdate(roles())\n    }\n    const unsubscribe = roleManager.subscribe(CHANGE, update)\n    update()\n    return unsubscribe\n}\n\n/*\nfunction test(bus: JDBus) {\n    const bindings = {\n        thermo1: { serviceClass: SRV_BUTTON },\n        thermo2: { serviceClass: SRV_BUTTON },\n    }\n    trackRoles(\n        bus,\n        bindings,\n        ({ thermo1, thermo2 }) => {\n            console.log({ thermo1, thermo2 })\n        },\n        { incomplete: true }\n    )\n}\n*/\n","import JDBus from \"./bus\"\nimport { isSensor, serviceSpecifications } from \"./spec\"\nimport { toMap } from \"./utils\"\n\nlet _sensorSpecs: jdspec.ServiceSpec[]\n\n/**\n * Gets the list of sensor specifications available\n * @returns\n */\nexport function sensorSpecifications() {\n    if (!_sensorSpecs) {\n        _sensorSpecs = serviceSpecifications().filter(\n            srv => !srv.shortName.startsWith(\"_\") && isSensor(srv)\n        )\n    }\n    return _sensorSpecs\n}\n\n/**\n * Collects and flattens all sensor data into a serializable object\n * @param bus\n * @returns\n */\nexport function snapshotSensors(\n    bus: JDBus\n): Record<string, number[] | Record<string, number>[]> {\n    return toMap(\n        sensorSpecifications(),\n        srv => srv.camelName,\n        srv =>\n            bus\n                .services({\n                    serviceClass: srv.classIdentifier,\n                    ignoreInfrastructure: true,\n                    announced: true,\n                })\n                .map(srv => {\n                    const reg = srv.readingRegister\n                    const spec = reg.specification\n                    return spec.fields.length === 1\n                        ? reg.unpackedValue?.[0] || 0\n                        : reg.objectValue || {}\n                })\n    )\n}\n","import { SRV_CONTROL } from \"../jdom/constants\"\nimport {\n    isHighLevelRegister,\n    isInfrastructure,\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecifications,\n} from \"../jdom/spec\"\n\nexport enum ServiceTwinRegisterFlag {\n    Const = 0x0001,\n    Volatile = 0x0002,\n}\n\nexport interface ServiceTwinRegisterSpec {\n    code: number // code <= 255 => ro, otherwise rw\n    name: string\n    flags: ServiceTwinRegisterFlag\n    packf: string\n    fields?: string[]\n}\n\nexport interface ServiceTwinSpec {\n    serviceClass: number\n    name: string\n    registers: ServiceTwinRegisterSpec[]\n}\n\nexport function serviceSpecificationToServiceTwinSpecification(\n    specification: jdspec.ServiceSpec\n): ServiceTwinSpec {\n    if (!specification) return undefined\n\n    const {\n        classIdentifier: serviceClass,\n        camelName: name,\n        packets,\n    } = specification\n\n    const registers = packets\n        .filter(isHighLevelRegister) // TODO formalize\n        .map<ServiceTwinRegisterSpec>(reg => {\n            let flags = 0\n            if (reg.kind == \"const\") flags |= ServiceTwinRegisterFlag.Const\n            if (reg.volatile) flags |= ServiceTwinRegisterFlag.Volatile\n            const r: ServiceTwinRegisterSpec = {\n                code: reg.identifier,\n                name: reg.name,\n                flags,\n                packf: reg.packFormat,\n                fields:\n                    reg.fields.length > 1\n                        ? reg.fields.map(f => f.name)\n                        : undefined,\n            }\n            return r\n        })\n    const dspec: ServiceTwinSpec = {\n        serviceClass,\n        name,\n        registers,\n    }\n    return dspec\n}\n\nexport function serviceSpecificationsWithServiceTwinSpecification() {\n    const specs = [\n        serviceSpecificationFromClassIdentifier(SRV_CONTROL),\n        ...serviceSpecifications().filter(srv => !isInfrastructure(srv)),\n    ]\n    return specs\n}\n","import {\r\n    createWebBus, JDBus,\r\n} from \"jacdac-ts\";\r\n\r\nlet bus: JDBus;\r\n\r\nexport let initBus = (): JDBus => {\r\n    initBus = () => { throw \"multiple initialization\" };\r\n    bus = createWebBus();\r\n    return bus;\r\n}\r\n","import { CHANGE, SettingsCmd } from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { InPipeReader } from \"../pipes\"\nimport JDService from \"../service\"\nimport { JDServiceClient } from \"../serviceclient\"\nimport { bufferToString, stringToBuffer } from \"../utils\"\n\n/**\n * A settings service client implementation.\n * @category Clients\n */\nexport class SettingsClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        service.registersUseAcks = true\n    }\n\n    async clear() {\n        await this.service.sendCmdAsync(SettingsCmd.Clear)\n    }\n\n    async listKeys(): Promise<string[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.ListKeys),\n            true\n        )\n        const { output } = await inp.readAll()\n        const keys = output.map(pkt => pkt.stringData)\n        return keys.filter(k => !!k)\n    }\n\n    async list(): Promise<{ key: string; value?: Uint8Array }[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.List),\n            true\n        )\n        const { output } = await inp.readAll()\n        return output\n            .map(pkt => {\n                const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\")\n                return key && { key, value }\n            })\n            .filter(kv => !!kv)\n    }\n\n    async setValue(key: string, value: Uint8Array) {\n        key = key.trim()\n        if (value === undefined) {\n            await this.deleteValue(key)\n        } else {\n            const pkt = Packet.from(\n                SettingsCmd.Set,\n                jdpack(\"z b\", [key, value])\n            )\n            await this.service.sendPacketAsync(pkt)\n            this.emit(CHANGE)\n        }\n    }\n\n    async setStringValue(key: string, value: string) {\n        await this.setValue(key, value ? stringToBuffer(value) : undefined)\n    }\n\n    async getValue(key: string): Promise<Uint8Array> {\n        if (!key) return undefined\n\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Get, jdpack(\"s\", [key]))\n        const resp = await this.service.sendCmdAwaitResponseAsync(pkt)\n        const [rkey, value] = jdunpack<[string, Uint8Array]>(resp.data, \"z b\")\n        if (key !== rkey) {\n            console.error(\n                `device returned different key, got \"${rkey}\", expected \"${key}\"`\n            )\n            return undefined\n        }\n        return value\n    }\n\n    async getStringValue(key: string) {\n        const value = await this.getValue(key)\n        return value && bufferToString(value)\n    }\n\n    async deleteValue(key: string) {\n        if (!key) return\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Delete, jdpack(\"s\", [key]))\n        await this.service.sendPacketAsync(pkt)\n\n        this.emit(CHANGE)\n    }\n}\nexport default SettingsClient\n","import JDBus from \"../bus\"\nimport JDClient from \"../client\"\nimport { CHANGE, PACKET_PROCESS, PACKET_SEND, START, STOP } from \"../constants\"\nimport Packet from \"../packet\"\nimport Trace from \"./trace\"\n\nconst RECORDING_TRACE_MAX_ITEMS = 100000\n\n/**\n * A recorder of packets to create traces.\n * @category Trace\n */\nexport class TraceRecorder extends JDClient {\n    public maxRecordingLength = RECORDING_TRACE_MAX_ITEMS\n    private _trace: Trace\n    private _subscription: () => void\n\n    constructor(public readonly bus: JDBus) {\n        super()\n        this.handlePacket = this.handlePacket.bind(this)\n\n        this.mount(() => this._subscription?.())\n    }\n\n    start() {\n        if (this.recording) return\n\n        this._subscription = this.bus.subscribe(\n            [PACKET_PROCESS, PACKET_SEND],\n            this.handlePacket\n        )\n        this._trace = new Trace([], { maxLength: this.maxRecordingLength })\n        this.emit(START)\n        this.emit(CHANGE)\n    }\n\n    stop() {\n        if (!this.recording) return\n\n        this._subscription?.()\n        this._subscription = undefined\n        const t = this._trace\n        this._trace = undefined\n        this.emit(STOP)\n        this.emit(CHANGE)\n\n        return t\n    }\n\n    get recording() {\n        return !!this._trace\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    private handlePacket(pkt: Packet) {\n        // record packets in traces\n        this._trace.addPacket(pkt)\n        // notify that this packet has been processed\n        this.emit(PACKET_PROCESS, pkt)\n    }\n}\nexport default TraceRecorder\n","import JDBus from \"../bus\"\nimport { JDClient } from \"../client\"\nimport {\n    CHANGE,\n    DEVICE_ANNOUNCE,\n    META_ACK,\n    META_GET,\n    META_PIPE,\n    PACKET_PROCESS,\n    PACKET_SEND,\n    TRACE_FILTER_HORIZON,\n} from \"../constants\"\nimport Packet from \"../packet\"\nimport { PacketFilter, parsePacketFilter } from \"../packetfilter\"\nimport Trace from \"./trace\"\nimport { throttle, toHex } from \"../utils\"\n\nconst TRACE_MAX_ITEMS = 1000\nconst FILTERED_TRACE_MAX_ITEMS = 100\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE = 10\nconst DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME = 5000\n\n/**\n * A grouped packet\n * @category Trace\n */\nexport interface TracePacketProps {\n    /**\n     * Unique key used for React lists\n     */\n    key: string\n    /**\n     * Identifier to match packets together\n     */\n    hash: string\n    /**\n     * The packet\n     */\n    packet: Packet\n    count?: number\n}\n\n/**\n * A filtered view over a packet trace\n * @category Trace\n */\nexport class TraceView extends JDClient {\n    private id = \"v\" + Math.random()\n    private _maxFilteredLength = FILTERED_TRACE_MAX_ITEMS\n\n    private _paused = false\n    private _trace: Trace\n    private _filter: string\n    private _packetFilter: PacketFilter = undefined\n    private _filteredPackets: TracePacketProps[] = []\n\n    public silent = false\n    private notifyPacketsChanged: () => void\n\n    constructor(\n        public readonly bus: JDBus,\n        filter: string,\n        throttleDelay = 200\n    ) {\n        super()\n        this._trace = new Trace([], { maxLength: TRACE_MAX_ITEMS })\n        this.handlePacket = this.handlePacket.bind(this)\n        this.handleFilterUpdate = this.handleFilterUpdate.bind(this)\n\n        this.notifyPacketsChanged = throttle(() => {\n            if (!this.silent)\n                this.setFilteredPackets()\n        }, throttleDelay)\n\n        this.mount(\n            this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket)\n        )\n        this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.handleFilterUpdate))\n\n        this.filter = filter\n    }\n\n    /**\n     * No new packet is added to the filtered view\n     */\n    get paused() {\n        return this._paused\n    }\n\n    set paused(v: boolean) {\n        if (v !== this._paused) {\n            this._paused = v\n            if (!this._paused) {\n                this.refreshFilter()\n                this.emit(CHANGE)\n            }\n        }\n    }\n\n    get trace() {\n        return this._trace\n    }\n\n    set trace(t: Trace) {\n        if (t !== this._trace) {\n            this._trace = t\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    get filteredPackets() {\n        return this._filteredPackets\n    }\n\n    get filter() {\n        return this._filter\n    }\n\n    set filter(f: string) {\n        if (f !== this._filter) {\n            this._filter = f\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    get maxFilteredLength() {\n        return this._maxFilteredLength\n    }\n\n    set maxFilteredLength(v: number) {\n        if (this._maxFilteredLength !== v) {\n            this._maxFilteredLength = v\n            this.refreshFilter()\n            this.emit(CHANGE)\n        }\n    }\n\n    private setFilteredPackets() {\n        // always clone for React\n        this._filteredPackets = this._filteredPackets.slice(\n            0,\n            this._filteredPackets.length > this.maxFilteredLength * 1.1\n                ? this.maxFilteredLength\n                : this._filteredPackets.length\n        )\n        this.emit(CHANGE)\n    }\n\n    clear() {\n        this.trace = new Trace([], { maxLength: TRACE_MAX_ITEMS })\n        this._filteredPackets = []\n        this.setFilteredPackets()\n        this.emit(CHANGE)\n    }\n\n    private handleFilterUpdate() {\n        this.refreshFilter()\n    }\n\n    private refreshFilter() {\n        this.id = \"view\" + Math.random()\n        this._packetFilter = parsePacketFilter(this.bus, this._filter)\n        this._filteredPackets = []\n        const packets = this.trace.packets\n        // reapply filter to existing trace\n        for (\n            let i = packets.length - 1;\n            i >= 0 && this._filteredPackets.length < this.maxFilteredLength;\n            --i\n        ) {\n            const pkt = packets[i]\n            if (this._packetFilter?.filter(pkt)) {\n                this.addFilteredPacket(pkt)\n            }\n        }\n        this._filteredPackets = this._filteredPackets.reverse()\n        this.notifyPacketsChanged?.()\n    }\n\n    private handlePacket(pkt: Packet) {\n        if (this._paused) return\n\n        // remember packet\n        this.trace.addPacket(pkt)\n\n        // add packet to live list\n        if (this._packetFilter?.filter(pkt)) {\n            this.addFilteredPacket(pkt)\n            // debounced notification of changes\n            this.notifyPacketsChanged?.()\n        }\n    }\n\n    private addFilteredPacket(packet: Packet) {\n        if (packet.meta[this.id]) return\n        packet.meta[this.id] = true\n\n        // resolve packet device for pretty name\n        if (!packet.isMultiCommand && !packet.device)\n            packet.device = this.bus.device(\n                packet.deviceIdentifier,\n                false,\n                packet\n            )\n\n        // keep in filtered view\n        let filtered = true\n        const hash = toHex(packet.toBuffer())\n        if (this._packetFilter?.props.grouping) {\n            const old = this._filteredPackets\n                .slice(0, DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE)\n                .find(\n                    p =>\n                        packet.timestamp - p.packet.timestamp <\n                            DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME &&\n                        p.hash === hash\n                )\n            if (old) {\n                old.count++\n                filtered = false\n            }\n        }\n\n        // collapse acks\n        if (packet.isCRCAck) {\n            const pkts = this.trace.packets\n            const crc = packet.serviceCommand\n            const did = packet.deviceIdentifier\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON) // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i]\n                if (\n                    old.requiresAck &&\n                    old.deviceIdentifier === did &&\n                    old.crc === crc\n                ) {\n                    old.meta[META_ACK] = packet\n                    if (this._packetFilter?.props.collapseAck) filtered = false\n                    break\n                }\n            }\n        }\n        // report coming back\n        if (packet.isRegisterGet && packet.isReport && !packet.meta[META_GET]) {\n            const pkts = this.trace.packets\n            const did = packet.deviceIdentifier\n            const si = packet.serviceIndex\n            const rid = packet.registerIdentifier\n            const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON) // max scan 100 packets back\n            for (let i = pkts.length - 1; i >= m; i--) {\n                const old = pkts[i]\n                if (\n                    old.isRegisterGet &&\n                    old.isCommand &&\n                    old.deviceIdentifier === did &&\n                    old.serviceIndex === si &&\n                    old.registerIdentifier === rid\n                ) {\n                    // response from a get command\n                    packet.meta[META_GET] = old\n                    if (this._packetFilter?.props.collapseGets) {\n                        // remove old\n                        this._filteredPackets.splice(i, 1)\n                        // keep new\n                    }\n                    break\n                }\n            }\n        }\n        // collapse pipes\n        if (\n            this._packetFilter?.props.collapsePipes &&\n            packet.isPipe &&\n            packet.isCommand\n        ) {\n            const pkts = this._filteredPackets\n            const m = Math.min(pkts.length, TRACE_FILTER_HORIZON) // max scan 100 packets back\n            const port = packet.pipePort\n            const did = packet.deviceIdentifier\n            for (let i = 0; i < m; ++i) {\n                const old = pkts[i].packet\n                if (old.deviceIdentifier === did && old.pipePort === port) {\n                    let pipePackets = old.meta[META_PIPE] as Packet[]\n                    if (!pipePackets) pipePackets = old.meta[META_PIPE] = []\n                    pipePackets[packet.pipeCount] = packet\n                    filtered = false\n                    break\n                }\n            }\n        }\n\n        if (filtered) {\n            const key = packet.timestamp + hash\n            this._filteredPackets.unshift({\n                key,\n                hash,\n                packet,\n                count: 1,\n            })\n        }\n    }\n}\nexport default TraceView\n","import EventTargetObservable from \"./eventtargetobservable\"\nimport { HF2_DEVICE_MAJOR } from \"./hf2\"\nimport { MICROBIT_V2_PRODUCT_ID, MICROBIT_V2_VENDOR_ID } from \"./microbit\"\nimport { USBOptions } from \"./usbio\"\n\nexport function createNodeUSBOptions(): USBOptions {\n    console.debug(`jacdac: creating usb transport`)\n\n    async function devicesFound(devices: USBDevice[]): Promise<USBDevice> {\n        for (const device of devices) {\n            // microbit v2\n            if (\n                device.vendorId === MICROBIT_V2_VENDOR_ID &&\n                device.productId === MICROBIT_V2_PRODUCT_ID\n            ) {\n                return device\n            }\n            // jacdac device\n            else if (device.deviceVersionMajor == HF2_DEVICE_MAJOR) {\n                for (const iface of device.configuration.interfaces) {\n                    const alt = iface.alternates[0]\n                    if (\n                        alt.interfaceClass == 0xff &&\n                        alt.interfaceSubclass == HF2_DEVICE_MAJOR\n                    ) {\n                        return device\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const USB = require(\"webusb\").USB\n    const usb = new USB({\n        devicesFound,\n    })\n\n    async function requestDevice(\n        options: USBDeviceRequestOptions\n    ): Promise<USBDevice> {\n        console.debug(`requesting device...`)\n        try {\n            const device = await usb.requestDevice(options)\n            return device\n        } catch (e) {\n            console.debug(e)\n            return undefined\n        }\n    }\n\n    async function getDevices(\n        options: USBDeviceRequestOptions\n    ): Promise<USBDevice[]> {\n        //const devices = await usb.getDevices()\n        //return devices\n        const dev = await requestDevice(options)\n        return dev ? [dev] : []\n    }\n\n    const connectObservable = new EventTargetObservable(usb, \"connect\")\n    const disconnectObservable = new EventTargetObservable(usb, \"disconnect\")\n\n    return {\n        getDevices,\n        requestDevice,\n        connectObservable,\n        disconnectObservable,\n    }\n}\n","import JDBus from \"../bus\"\nimport { createUSBTransport, isWebUSBSupported } from \"./usb\"\nimport { createWebSerialTransport, isWebSerialSupported } from \"./webserial\"\nimport { createBluetoothTransport, isWebBluetoothSupported } from \"./bluetooth\"\nimport { USBOptions } from \"./usbio\"\nimport createIFrameBridge from \"../bridges/iframebridge\"\n\n/**\n * Creates a Jacdac bus using WebUSB, WebSerial or WebBluetooth\n * @param options\n * @returns\n * @category Transport\n */\nexport function createWebBus(options?: {\n    usbOptions?: USBOptions\n    iframeTargetOrigin?: string\n}) {\n    const { usbOptions, iframeTargetOrigin } = options || {}\n    const bus = new JDBus([\n        usbOptions !== null && createUSBTransport(usbOptions),\n        createWebSerialTransport(),\n        createBluetoothTransport(),\n    ])\n    const iframeBridge =\n        iframeTargetOrigin !== null && createIFrameBridge(iframeTargetOrigin)\n    if (iframeBridge) iframeBridge.bus = bus\n    return bus\n}\n\n/**\n * Indicates if any of the USB/Serial/Bluetooth transports is supported\n * @returns \n * @category Transport\n */\nexport function isWebTransportSupported() {\n    return (\n        isWebUSBSupported() ||\n        isWebSerialSupported() ||\n        isWebBluetoothSupported()\n    )\n}\n","/**\n * @internal\n */\nexport function hsvToCss(\n    hue: number,\n    saturation: number,\n    value: number,\n    brightness: number,\n    monochrome?: boolean\n) {\n    const csshue = (hue * 360) / 0xff\n    const csssat = (monochrome ? 0xff : saturation) / 0xff\n    const cssval = value / 0xff\n    const [h, s, l] = hsv_to_hsl(csshue, csssat, cssval)\n    const mixl = 0.3\n    const alpha = (mixl + (1 - mixl) * l) * brightness\n\n    return `hsla(${h}, ${s * 100}%, ${l * 100}%, ${alpha}`\n}\n\nfunction hsv_to_hsl(h: number, s: number, v: number) {\n    // both hsv and hsl values are in [0, 1]\n    const l = ((2 - s) * v) / 2\n\n    if (l != 0) {\n        if (l == 1) {\n            s = 0\n        } else if (l < 0.5) {\n            s = (s * v) / (l * 2)\n        } else {\n            s = (s * v) / (2 - l * 2)\n        }\n    }\n\n    return [h, s, l]\n}\n","import { setNumber, sizeOfNumberFormat } from \"./buffer\"\nimport { CMD_SET_REG, JD_SERIAL_MAX_PAYLOAD_SIZE } from \"./constants\"\nimport { PackedValues } from \"./pack\"\nimport Packet from \"./packet\"\nimport {\n    clampToStorage,\n    isRegister,\n    numberFormatFromStorageType,\n    scaleFloatToInt,\n} from \"./spec\"\nimport { stringToUint8Array, toUTF8 } from \"./utils\"\n\n/**\n * @internal\n */\nexport function packArguments(info: jdspec.PacketInfo, args: PackedValues) {\n    let repeatIdx = -1\n    let numReps = 0\n    let argIdx = 0\n    let dst = 0\n\n    const buf = new Uint8Array(256)\n\n    for (let i = 0; i < info.fields.length; ++argIdx, ++i) {\n        if (argIdx >= args.length && numReps > 0) break\n        const arg0 = argIdx < args.length ? args[argIdx] : 0\n        const fld = info.fields[i]\n\n        if (repeatIdx == -1 && fld.startRepeats) repeatIdx = i\n\n        const arg1 =\n            fld.type == \"string0\" && typeof arg0 == \"string\"\n                ? arg0 + \"\\u0000\"\n                : arg0\n\n        const arg =\n            typeof arg1 == \"boolean\"\n                ? arg1\n                    ? 1\n                    : 0\n                : typeof arg1 == \"string\"\n                ? stringToUint8Array(toUTF8(arg1))\n                : arg1\n\n        if (typeof arg == \"number\") {\n            const intVal = scaleFloatToInt(arg, fld)\n            if (fld.storage == 0)\n                throw new Error(`expecting ${fld.type} got number`)\n\n            const fmt = numberFormatFromStorageType(fld.storage)\n            setNumber(buf, fmt, dst, clampToStorage(intVal, fld.storage))\n            dst += sizeOfNumberFormat(fmt)\n        } else {\n            let size = Math.abs(fld.storage)\n            if (typeof arg1 == \"string\") {\n                if (size == 0) size = arg.length\n                const argCut = arg.slice(0, size)\n                buf.set(argCut, dst)\n                dst += size\n            } else if (size == 0 || size == arg.length) {\n                buf.set(arg, dst)\n                dst += arg.length\n            } else {\n                throw new Error(\n                    `expecting ${Math.abs(fld.storage)} bytes; got ${\n                        arg.length\n                    }`\n                )\n            }\n        }\n\n        if (dst >= JD_SERIAL_MAX_PAYLOAD_SIZE)\n            throw new Error(\n                `jacdac packet length too large, ${dst} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`\n            )\n\n        if (repeatIdx != -1 && i + 1 >= info.fields.length) {\n            i = repeatIdx - 1\n            numReps++\n        }\n    }\n\n    const cmd = isRegister(info)\n        ? info.identifier | CMD_SET_REG\n        : info.identifier\n    const pkt = Packet.from(cmd, buf.slice(0, dst))\n    if (info.kind != \"report\") pkt.isCommand = true\n    return pkt\n}\n","import * as U from \"./utils\"\nimport Packet from \"./packet\"\nimport JDDevice from \"./device\"\nimport { PACKET_REPORT, CMD_GET_REG, JD_SERVICE_INDEX_CTRL } from \"./constants\"\nimport { ControlReg } from \"../../jacdac-spec/dist/specconstants\"\n\n/**\n * @internal\n */\nexport async function packetSpeedTest(dev: JDDevice) {\n    const pingCmd = CMD_GET_REG | ControlReg.ProductIdentifier\n\n    dev.on(PACKET_REPORT, onPacket)\n    const t0 = Date.now()\n    let lastSend = Date.now()\n    let numpkt = 0\n    let timeouts = 0\n    let numrecv = 0\n    let done = false\n\n    await ask()\n    while (numpkt < 100) {\n        await U.delay(50)\n        const now = Date.now()\n        if (now - t0 > 3000) break\n        if (now - lastSend > 100) {\n            timeouts++\n            await ask()\n        }\n    }\n    done = true\n    await U.delay(250)\n    dev.off(PACKET_REPORT, onPacket)\n    const ms = Date.now() - t0\n\n    const pktsPerSecond = numpkt / (ms / 1000)\n    const dropRate = (100 * (numpkt - numrecv)) / numpkt\n\n    return {\n        msg: `${pktsPerSecond.toFixed(1)} pkts/s; ${dropRate.toFixed(\n            2\n        )}% dropped`,\n        pktsPerSecond,\n        dropRate,\n    }\n\n    async function ask() {\n        lastSend = Date.now()\n        numpkt++\n        await dev.sendCtrlCommand(pingCmd)\n    }\n\n    async function onPacket(p: Packet) {\n        if (\n            p.serviceIndex == JD_SERVICE_INDEX_CTRL &&\n            p.serviceCommand == pingCmd\n        ) {\n            numrecv++\n            if (!done) await ask()\n        }\n    }\n}\n","import { arrayConcatMany, fromHex } from \"./utils\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport TracePlayer from \"./trace/traceplayer\"\nimport Frame from \"./frame\"\nimport Trace from \"./trace/trace\"\nimport { META_TRACE } from \"./constants\"\n\n/**\n * Parse a trace text file\n * @param contents\n * @returns\n * @category Trace\n */\nexport function parseTrace(contents: string): Trace {\n    const description: string[] = []\n    const packets: Packet[] = []\n    contents?.split(/\\r?\\n/).forEach(ln => {\n        // parse data\n        const m = /^(\\d+.?\\d*)\\s+([a-f0-9]{12,})/i.exec(ln)\n        if (!m) {\n            // might be a stack trace\n            if (/^\\s+at\\s/.test(ln)) {\n                const lastPacket = packets[packets.length - 1]\n                if (lastPacket) {\n                    let trace = (lastPacket.meta[META_TRACE] as string) || \"\"\n                    trace += ln + \"\\n\"\n                    lastPacket.meta[META_TRACE] = trace\n                }\n            } else {\n                // probably junk data\n                if (packets.length == 0) description.push(ln)\n            }\n            return\n        }\n\n        const timestamp = parseInt(m[1])\n        const data = fromHex(m[2])\n        // add to array\n        packets.push(Packet.fromBinary(data, timestamp))\n    })\n    if (packets.length)\n        return new Trace(packets, {\n            description: description.join(\"\\n\").trim(),\n        })\n    else return undefined\n}\n\n/**\n * Parses a logic analyzer log into a trace\n * @param logcontents\n * @returns\n * @category Trace\n */\nexport function parseLogicLog(logcontents: string): Frame[] {\n    if (!logcontents) return undefined\n\n    const res: Frame[] = []\n    let frameBytes = []\n    let lastTime = 0\n    for (const ln of logcontents.split(/\\r?\\n/)) {\n        let m = /^JD (\\d+) ([0-9a-f]+)/i.exec(ln)\n        if (m) {\n            res.push({\n                timestamp: parseInt(m[1]),\n                data: fromHex(m[2]),\n            })\n            continue\n        }\n\n        /** Windows, logic 1.*\nTime [s],Value,Parity Error,Framing Error\n0.042909760000000,0x00,,Error\n0.042980320000000,0xD4,,\n0.042990240000000,0x81,,\n0.043000160000000,0x10,,\n0.043010240000000,0x00,,\n0.043020160000000,0xE8,,\n0.043030240000000,0xDF,,\n0.043040160000000,0xCB,,\n0.043050240000000,0xD1,,\n0.043060160000000,0x97,,\n0.043070240000000,0x34,,\n0.043080160000000,0x37,,\n0.043090240000000,0x48,,\n0.043100160000000,0x0C,,\n0.043110080000000,0x00,,\n0.043120160000000,0x00,,\n0.043130080000000,0x00,,\n0.043140160000000,0x00,,\n0.043150080000000,0x00,,\n0.043160160000000,0x00,,\n0.043170080000000,0x00,,\n0.043180160000000,0xCA,,\n0.043190080000000,0x1F,,\n0.043200160000000,0xDC,,\n0.043210080000000,0x12,,\n0.043220160000000,0x46,,\n0.043230080000000,0x47,,\n0.043240160000000,0x27,,\n0.043250080000000,0x1F,,\n0.043264800000000,0x00,,Error\n0.063968960000000,0x00,,Error\n         */\n        m = /^([\\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(ln)\n        if (!m) continue\n        const tm = parseFloat(m[1])\n        if (lastTime && tm - lastTime > 0.1) {\n            res.push({\n                timestamp: lastTime * 1000,\n                data: new Uint8Array(frameBytes),\n                info: \"timeout\",\n            })\n            frameBytes = []\n            lastTime = 0\n        }\n\n        lastTime = tm\n        if (/(framing error|Error)/.test(ln)) {\n            if (frameBytes.length > 0)\n                res.push({\n                    timestamp: lastTime * 1000,\n                    data: new Uint8Array(frameBytes),\n                })\n            frameBytes = []\n            lastTime = 0\n        } else {\n            frameBytes.push(parseInt(m[2]))\n        }\n    }\n\n    return res\n}\n\n/**\n * Replays a parsed logic log\n * @param bus\n * @param frames\n * @param speed\n * @category Trace\n */\nexport function replayLogicLog(\n    bus: JDBus,\n    frames: Frame[],\n    speed?: number\n): void {\n    const packets = arrayConcatMany(\n        frames.map(frame => Packet.fromFrame(frame.data, frame.timestamp))\n    )\n    const player = new TracePlayer(bus, speed)\n    player.trace = new Trace(packets)\n    bus.clear(packets[0].timestamp)\n    player.start()\n}\n","import { snapshotSensors, startDevTools, JoystickButtons } from \"jacdac-ts\";\r\nimport { initBus } from \"./bus\";\r\n\r\nconst debugEl = document.getElementById(\"debugbtn\") as HTMLButtonElement;\r\nconst connectDeviceEl = document.getElementById(\"connectbtn\") as HTMLButtonElement;\r\nconst wsAddressEl = document.getElementById(\"wsAddress\") as HTMLInputElement;\r\nconst wsConnectEl = document.getElementById(\"wsConnect\") as HTMLButtonElement;\r\nconst wsStatusEl = document.getElementById(\"wsStatus\") as HTMLElement;\r\n\r\nconst bus = initBus();\r\nlet ws: WebSocket;\r\nlet wsIsOpen = false;\r\n\r\nif (window.location.ancestorOrigins.length) {\r\n  debugEl.remove();\r\n  connectDeviceEl.remove();\r\n} else {\r\n  debugEl.onclick = (ev) => {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    if (!window.location.ancestorOrigins.length) {\r\n      startDevTools();\r\n    }\r\n  }\r\n  connectDeviceEl.onclick = (ev) => {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    bus.connected ? bus.disconnect() : bus.connect();\r\n  }\r\n}\r\n\r\nwsConnectEl.onclick = (ev) => {\r\n  ev.preventDefault();\r\n  ev.stopPropagation();\r\n  altspaceConnect(wsAddressEl.value);\r\n}\r\n\r\ntype Button = {\r\n  down: boolean;\r\n  pressed: boolean;\r\n  released: boolean;\r\n};\r\n\r\ntype Stick = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Input = {\r\n  button: Button;\r\n  stick: Stick;\r\n};\r\n\r\nconst input: Input = {\r\n  button: {\r\n    down: false,\r\n    pressed: false,\r\n    released: false\r\n  },\r\n  stick: {\r\n    x: 0,\r\n    y: 0\r\n  }\r\n};\r\n\r\n\r\nfunction step() {\r\n  const snap = snapshotSensors(bus);\r\n  //const str = JSON.stringify(snap);\r\n  //console.log(str);\r\n  const joysticks = snap.joystick;\r\n  if (joysticks.length) {\r\n    const joystick = joysticks[0];\r\n    const buttons = Number(joystick[\"buttons\"]);\r\n    // Update button state\r\n    input.button.pressed = false;\r\n    input.button.released = false;\r\n    if (buttons & JoystickButtons.A) {\r\n      input.button.pressed = !input.button.down;\r\n      input.button.down = true;\r\n    } else {\r\n      input.button.released = input.button.down;\r\n      input.button.down = false;\r\n    }\r\n    // Update stick state\r\n    input.stick.x = Number(joystick[\"x\"]) || 0;\r\n    input.stick.y = Number(joystick[\"y\"]) || 0;\r\n    //console.log(JSON.stringify(input));\r\n    if (wsIsOpen) {\r\n      const msg = {\r\n        type: 'input',\r\n        state: input\r\n      };\r\n      try {\r\n        ws.send(JSON.stringify(msg));\r\n      }\r\n      catch {\r\n        ws.close();\r\n        ws = null;\r\n      }\r\n    }\r\n  }\r\n  window.requestAnimationFrame(step);\r\n}\r\nwindow.requestAnimationFrame(step);\r\n\r\nfunction setSocketStatus(msg: string) {\r\n  wsStatusEl.innerText = msg;\r\n}\r\n\r\nfunction altspaceConnect(address: string) {\r\n  if (ws) {\r\n    try { ws.close(); } catch { }\r\n  }\r\n  setSocketStatus(\"Connecting...\");\r\n  ws = new WebSocket(address);\r\n  ws.onclose = (ev) => {\r\n    setSocketStatus(\"Disconnected\");\r\n    wsIsOpen = false;\r\n  };\r\n  ws.onerror = (ev) => {\r\n    setSocketStatus(\"Error\");\r\n    wsIsOpen = false;\r\n  };\r\n  ws.onopen = (ev) => {\r\n    setSocketStatus(\"Connected\");\r\n    wsIsOpen = true;\r\n  };\r\n}\r\n"],"names":["SystemReadingThreshold","SystemStatusCodes","SystemCmd","SystemReg","SystemEvent","BaseReg","BaseEvent","SensorReg","AccelerometerReg","AccelerometerEvent","ArcadeGamepadButton","ArcadeGamepadReg","ArcadeGamepadEvent","ArcadeSoundCmd","ArcadeSoundReg","AzureIotHubHealthConnectionStatus","AzureIotHubHealthReg","AzureIotHubHealthCmd","AzureIotHubHealthEvent","BarcodeReaderFormat","BarcodeReaderReg","BarcodeReaderEvent","BarometerReg","BitRadioReg","BitRadioCmd","$a63d36b3e5c3f9f6$var$SRV_BOOTLOADER","BootloaderError","BootloaderCmd","ButtonReg","ButtonEvent","BuzzerReg","BuzzerCmd","CapacitiveButtonReg","CapacitiveButtonCmd","CharacterScreenVariant","CharacterScreenTextDirection","CharacterScreenReg","CharacterScreenCmd","CodalMessageBusCmd","CodalMessageBusEvent","ColorReg","CompassReg","CompassCmd","$a63d36b3e5c3f9f6$var$SRV_CONTROL","ControlAnnounceFlags","ControlCmd","ControlReg","DimmerVariant","DimmerReg","DistanceVariant","DistanceReg","DmxReg","DmxCmd","DotMatrixVariant","DotMatrixReg","ECO2Variant","ECO2Reg","FlexVariant","FlexReg","GyroscopeReg","HeartRateVariant","HeartRateReg","HidAdapterReg","HidAdapterCmd","HidAdapterEvent","HidKeyboardModifiers","HidKeyboardAction","HidKeyboardCmd","HidMouseButton","HidMouseButtonEvent","HidMouseCmd","HumidityReg","IlluminanceReg","IndexedScreenCmd","IndexedScreenReg","$a63d36b3e5c3f9f6$var$SRV_INFRASTRUCTURE","JoystickButtons","JoystickVariant","JoystickReg","JoystickEvent","LedVariant","LedCmd","LedReg","LedPixelLightType","LedPixelVariant","LedPixelReg","LedPixelCmd","LightLevelVariant","LightLevelReg","$a63d36b3e5c3f9f6$var$SRV_LOGGER","LoggerPriority","LoggerReg","LoggerCmd","MagnetometerReg","MagnetometerCmd","MatrixKeypadVariant","MatrixKeypadReg","MatrixKeypadEvent","MicrophoneCmd","MicrophoneReg","MidiOutputReg","MidiOutputCmd","ModelRunnerModelFormat","ModelRunnerCmd","ModelRunnerReg","MotionVariant","MotionReg","MotionEvent","MotorReg","MultitouchReg","MultitouchEvent","PotentiometerVariant","PotentiometerReg","PowerPowerStatus","PowerReg","PowerCmd","PowerEvent","PressureButtonReg","$a63d36b3e5c3f9f6$var$SRV_PROTO_TEST","ProtoTestReg","ProtoTestEvent","ProtoTestCmd","PulseOximeterReg","RainGaugeReg","RealTimeClockVariant","RealTimeClockReg","RealTimeClockCmd","ReflectedLightVariant","ReflectedLightReg","ReflectedLightEvent","RelayVariant","RelayReg","RelayEvent","RngVariant","RngReg","$a63d36b3e5c3f9f6$var$SRV_ROLE_MANAGER","RoleManagerReg","RoleManagerCmd","RoleManagerEvent","RotaryEncoderReg","RoverReg","SensorAggregatorSampleType","SensorAggregatorReg","ServoReg","$a63d36b3e5c3f9f6$var$SRV_SETTINGS","SettingsCmd","SettingsEvent","SevenSegmentDisplayReg","SevenSegmentDisplayCmd","SoilMoistureVariant","SoilMoistureReg","SolenoidVariant","SolenoidReg","SoundLevelReg","SoundLevelEvent","SoundPlayerReg","SoundPlayerCmd","SoundSpectrumReg","SpeechSynthesisReg","SpeechSynthesisCmd","SwitchVariant","SwitchReg","SwitchEvent","TcpTcpError","TcpCmd","TcpPipeCmd","ThermocoupleVariant","ThermocoupleReg","ThermometerVariant","ThermometerReg","TrafficLightReg","TvocReg","UvIndexVariant","UvIndexReg","VerifiedTelemetryStatus","VerifiedTelemetryFingerprintType","VerifiedTelemetryReg","VerifiedTelemetryCmd","VerifiedTelemetryEvent","VibrationMotorReg","VibrationMotorCmd","WaterLevelVariant","WaterLevelReg","WeightScaleVariant","WeightScaleReg","WeightScaleCmd","WifiAPFlags","WifiCmd","WifiReg","WifiEvent","WindDirectionReg","WindSpeedReg","$a63d36b3e5c3f9f6$var$isMixinService","serviceClass","$a63d36b3e5c3f9f6$var$unitDescription","m","kg","s","A","K","cd","mol","Hz","rad","sr","N","Pa","J","W","C","V","F","Ohm","S","Wb","T","H","lm","lx","Bq","Gy","Sv","kat","m2","m3","bit","lat","lon","pH","dB","dBW","count","EL","B","VA","VAs","var","vars","hsv","rgb","rpm","uv","lux","bpm","mcd","px","$a63d36b3e5c3f9f6$var$secondaryUnitConverters","ms","name","unit","scale","offset","min","h","MHz","kW","kVA","kvar","Ah","Wh","kWh","varh","kvarh","kVAh","KiB","GB","mV","mA","dBm","ppm","ppb","hPa","mm","cm","km","nm","nT","frac","us","mWh","g","$a63d36b3e5c3f9f6$var$encodings","json","bitset","$a63d36b3e5c3f9f6$var$identifierRanges","rw","ro","const","command","report","event","$a63d36b3e5c3f9f6$var$values","o","r","k","Object","keys","push","$a63d36b3e5c3f9f6$var$toUpper","replace","x","a","b","toUpperCase","$a63d36b3e5c3f9f6$var$toLower","toLowerCase","$a63d36b3e5c3f9f6$var$cStorage","tp","indexOf","Math","abs","$a63d36b3e5c3f9f6$var$cSharpStorage","$a63d36b3e5c3f9f6$var$canonicalType","isRegister","toHex","n","undefined","toString","$a63d36b3e5c3f9f6$var$unitPref","f","prettyUnit","u","$a63d36b3e5c3f9f6$var$toH","info","hdDef","camelName","pref","shortName","shortId","classIdentifier","cst","constants","value","hex","en","enums","filter","en1","derived","enPref","storage","members","pkt","packets","cmt","$a63d36b3e5c3f9f6$var$addComment","$a63d36b3e5c3f9f6$var$wrapComment","comment","secondary","kind","inner","val","identifier","identifierName","isMetaPipe","needsStruct","tname","unaligned","i","fields","length","def","cst1","sz","$a63d36b3e5c3f9f6$var$memberSize","type","startRepeats","isSimpleType","iface","packed","$a63d36b3e5c3f9f6$var$camelize","slice","_","l","$a63d36b3e5c3f9f6$var$capitalize","$a63d36b3e5c3f9f6$var$upperCamel","$a63d36b3e5c3f9f6$var$snakify","$a63d36b3e5c3f9f6$var$humanify","typeInfo","f0","description","desc","$a63d36b3e5c3f9f6$var$wrapSnippet","code","$a63d36b3e5c3f9f6$var$packFormatForField","fld","isStatic","useBooleans","szSuff","tsType","fmt","test","exec","$a63d36b3e5c3f9f6$var$TYPESCRIPT_STATIC_NAMESPACE","$a63d36b3e5c3f9f6$var$packFormat","sinfo","_a","ff","join","$a63d36b3e5c3f9f6$var$packInfo","options","useJDOM","vartp","repeats","reptp","isArray","varname","console","log","pktName","buffers","i1","names","types","$a63d36b3e5c3f9f6$var$toTypescript","language","sts","csharp","useNamespace","indent","indent2","numberkw","hexkw","enumkw","exportkw","cskw","toLocaleUpperCase","tsEnums","pack","text","meta","client","$a63d36b3e5c3f9f6$var$generateDeviceSpecificationId","dev","$a63d36b3e5c3f9f6$var$escapeDeviceIdentifier","company","$a63d36b3e5c3f9f6$var$escapeDeviceNameIdentifier","designIdentifier","version","trim","$a63d36b3e5c3f9f6$var$Flags","$a63d36b3e5c3f9f6$var$throwError","msg","cancel","e","Error","__cancel","$a63d36b3e5c3f9f6$var$setAckError","__ack","$a63d36b3e5c3f9f6$var$delay","millis","Promise","resolve","setTimeout","$a63d36b3e5c3f9f6$var$memcpy","trg","trgOff","src","srcOff","len","$a63d36b3e5c3f9f6$var$strcmp","$a63d36b3e5c3f9f6$var$bufferEq","$a63d36b3e5c3f9f6$var$hash","buf","bits","$a63d36b3e5c3f9f6$var$fnv1","$a63d36b3e5c3f9f6$var$idiv","data","imul","$a63d36b3e5c3f9f6$var$crc","p","crc","$a63d36b3e5c3f9f6$var$ALIGN","$a63d36b3e5c3f9f6$var$stringToUint8Array","input","res","Uint8Array","charCodeAt","$a63d36b3e5c3f9f6$var$uint8ArrayToString","String","fromCharCode","$a63d36b3e5c3f9f6$var$fromUTF8","binstr","escaped","charAt","decodeURIComponent","$a63d36b3e5c3f9f6$var$toUTF8","str","cesu8","next","isNaN","diagnostics","trace","webUSB","webSerial","webBluetooth","$a63d36b3e5c3f9f6$var$PromiseBuffer","waiting","available","drain","this","pushError","v","shift","shiftAsync","timeout","reject","then","idx","splice","$a63d36b3e5c3f9f6$var$PromiseQueue","promises","enqueue","id","arr","cleanup","err","$a63d36b3e5c3f9f6$var$toFullHex","map","$a63d36b3e5c3f9f6$var$toHex","bytes","$a63d36b3e5c3f9f6$var$fromHex","parseInt","$a63d36b3e5c3f9f6$var$isSet","$a63d36b3e5c3f9f6$var$toArray","Array","$a63d36b3e5c3f9f6$var$hexNum","$a63d36b3e5c3f9f6$var$write32","pos","$a63d36b3e5c3f9f6$var$write16","$a63d36b3e5c3f9f6$var$read32","$a63d36b3e5c3f9f6$var$read16","$a63d36b3e5c3f9f6$var$encodeU32LE","words","$a63d36b3e5c3f9f6$var$isBufferEmpty","$a63d36b3e5c3f9f6$var$bufferToString","$a63d36b3e5c3f9f6$var$stringToBuffer","$a63d36b3e5c3f9f6$var$bufferConcat","set","$a63d36b3e5c3f9f6$var$arrayConcatMany","arrs","$a63d36b3e5c3f9f6$var$assert","cond","debugData","debug","$a63d36b3e5c3f9f6$var$clone","JSON","parse","stringify","$a63d36b3e5c3f9f6$var$throttle","handler","delay","enableCall","$a63d36b3e5c3f9f6$var$signal","signalled","signal","$a63d36b3e5c3f9f6$var$readBlobToUint8Array","blob","arrayBuffer","fileReader","FileReader","onload","result","onerror","readAsArrayBuffer","$a63d36b3e5c3f9f6$var$debounceAsync","timeOutId","clearTimeout","async","$a63d36b3e5c3f9f6$var$roundWithPrecision","digits","round","d","pow","Number","EPSILON","$a63d36b3e5c3f9f6$var$toMap","keyConverter","valueConverter","key","$a63d36b3e5c3f9f6$var$groupBy","list","forEach","item","$a63d36b3e5c3f9f6$var$pick","values","find","NumberFormat","$a63d36b3e5c3f9f6$var$fmtInfo","size","Int8LE","UInt8LE","Int16LE","UInt16LE","Int32LE","UInt32LE","Int64LE","UInt64LE","Int8BE","UInt8BE","Int16BE","UInt16BE","Int32BE","UInt32BE","Int64BE","UInt64BE","Float32LE","Float32BE","Float64LE","Float64BE","$a63d36b3e5c3f9f6$var$fmtInfoCore","signed","swap","isFloat","$a63d36b3e5c3f9f6$var$sizeOfNumberFormat","format","$a63d36b3e5c3f9f6$var$getNumber","inf","reverse","Float32Array","buffer","Float64Array","$a63d36b3e5c3f9f6$var$setNumber","$a63d36b3e5c3f9f6$var$uintOfBuffer","$a63d36b3e5c3f9f6$var$intOfBuffer","$a63d36b3e5c3f9f6$var$bufferToArray","off","$a63d36b3e5c3f9f6$var$_serviceSpecificationMap","$a63d36b3e5c3f9f6$var$_serviceSpecifications","$a63d36b3e5c3f9f6$var$_customServiceSpecifications","$a63d36b3e5c3f9f6$var$_deviceRegistry","$a63d36b3e5c3f9f6$var$serviceSpecifications","$a63d36b3e5c3f9f6$var$deviceSpecificationFromProductIdentifier","productIdentifier","spec1","productIdentifiers","$a63d36b3e5c3f9f6$var$isInstanceOf","requiredClassIdentifier","classSpec","$a63d36b3e5c3f9f6$var$serviceSpecificationFromClassIdentifier","extends","some","extend","extendSpec","$a63d36b3e5c3f9f6$var$serviceSpecificationFromName","$a63d36b3e5c3f9f6$var$isInfrastructure","spec","ser","srv","$a63d36b3e5c3f9f6$var$isSensor","$a63d36b3e5c3f9f6$var$isReading","StreamingSamples","StreamingInterval","$a63d36b3e5c3f9f6$var$isRegister","Reading","$a63d36b3e5c3f9f6$var$ignoredRegister","StatusCode","InstanceName","StreamingPreferredInterval","ReadingError","ReadingResolution","MinReading","MaxReading","MinValue","MaxValue","MaxPower","$a63d36b3e5c3f9f6$var$isHighLevelRegister","lowLevel","internal","$a63d36b3e5c3f9f6$var$ignoredEvents","StatusCodeChanged","$a63d36b3e5c3f9f6$var$isOptionalReadingRegisterCode","$a63d36b3e5c3f9f6$var$isIntensity","Intensity","$a63d36b3e5c3f9f6$var$isValue","Value","$a63d36b3e5c3f9f6$var$isConstRegister","$a63d36b3e5c3f9f6$var$isEvent","$a63d36b3e5c3f9f6$var$isIntegerType","$a63d36b3e5c3f9f6$var$numberFormatFromStorageType","$a63d36b3e5c3f9f6$var$numberFormatToStorageType","nf","$a63d36b3e5c3f9f6$var$scaleIntToFloat","$a63d36b3e5c3f9f6$var$scaleFloatToInt","$a63d36b3e5c3f9f6$var$storageTypeRange","$a63d36b3e5c3f9f6$var$clampToStorage","max","$a63d36b3e5c3f9f6$var$numberFormatOfType","$a63d36b3e5c3f9f6$var$bufferSlice","start","end","$a63d36b3e5c3f9f6$var$TokenParser","fmt1","fp","div","endp","word","dotIdx","c0","sz0","sz1","c1","nfmt","$a63d36b3e5c3f9f6$var$jdunpackCore","repeat","repeatRes","fp0","parser","endoff","subbuf","zerop","$a63d36b3e5c3f9f6$var$jdunpack","$a63d36b3e5c3f9f6$var$jdpackCore","dataItem","fmt0","velt","st","$a63d36b3e5c3f9f6$var$jdpack","RegisterType","$a63d36b3e5c3f9f6$var$prettyUnit","$a63d36b3e5c3f9f6$var$prettySize","$a63d36b3e5c3f9f6$var$prettyDuration","floor","$a63d36b3e5c3f9f6$var$prettyMicroDuration","$a63d36b3e5c3f9f6$var$shortDeviceId","devid","$a63d36b3e5c3f9f6$var$decodeMember","service","pktInfo","member","numValue","scaledValue","humanValue","enumInfo","isInt","getNumber","device","port","pipeType","isFlags","curr","$a63d36b3e5c3f9f6$var$reverseLookup","did","_b","bus","$a63d36b3e5c3f9f6$var$hexDump","toFixed","$a63d36b3e5c3f9f6$var$decodeMembers","findIndex","f1","mem","decoded","$a63d36b3e5c3f9f6$var$wrapDecodedMembers","$a63d36b3e5c3f9f6$var$syntheticPktInfo","addr","$a63d36b3e5c3f9f6$var$decodePacket","isSet","isRegisterSet","isGet","isRegisterGet","error","serviceCommand","regInfo","packFormat","recoded","message","$a63d36b3e5c3f9f6$var$decodeRegister","isCommand","isEvent","evCode","eventCode","evInfo","eventCounter","$a63d36b3e5c3f9f6$var$decodeEvent","cmdInfo","$a63d36b3e5c3f9f6$var$decodeCommand","$a63d36b3e5c3f9f6$var$decodePacketData","isPipe","cmd","pinfo","servId","dir","split","$a63d36b3e5c3f9f6$var$decodePipe","$a63d36b3e5c3f9f6$var$serviceClass","serv","$a63d36b3e5c3f9f6$var$serviceName","$a63d36b3e5c3f9f6$var$commandName","reg","regName","serviceSpec","_c","_d","$a63d36b3e5c3f9f6$var$num2str","$a63d36b3e5c3f9f6$var$toAscii","c","chunk","$a63d36b3e5c3f9f6$var$printPacket","opts","frame_flags","frameFlags","devname","friendlyDeviceName","service_name","friendlyServiceName","cmdname","friendlyCommandName","sender","pdesc","serviceIndex","lastServiceUpdate","timestamp","skipRepeatedAnnounce","services","sc","serviceClasses","v0","uintData","v1","intData","showTime","warn","$a63d36b3e5c3f9f6$var$Packet","_meta","_nextKey","_header","_data","service_command","from","toBuffer","header","deviceIdentifier","idb","isMultiCommand","_decoded","requiresAck","ack","serviceClassAt","$a63d36b3e5c3f9f6$var$CMD_SET_REG","$a63d36b3e5c3f9f6$var$CMD_GET_REG","registerIdentifier","isCRCAck","pipePort","pipeCount","jdunpack","stringData","fmt2","isAnnounce","isReport","Announce","isRepeatedAnnounce","clone","cloneForDevice","deviceId","fromBinary","compress","stripped","s1","withFrameStripped","sendCoreAsync","sendPacketAsync","sendReportAsync","sendCmdAsync","sendAsMultiCommandAsync","service_class","$a63d36b3e5c3f9f6$var$JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS","frame","computed","actual","ptr","psz","$a63d36b3e5c3f9f6$var$frameToPackets","nums","friendlyName","pkt1","$a63d36b3e5c3f9f6$var$stack","stack","$a63d36b3e5c3f9f6$var$cleanStack","$a63d36b3e5c3f9f6$var$Trace","options1","maxLength","duration","startTimestamp","endTimestamp","addPacket","packet","serializeToText","pkts","t","unshift","$a63d36b3e5c3f9f6$var$normalizeEventNames","eventNames","$a63d36b3e5c3f9f6$var$nextNodeId","$a63d36b3e5c3f9f6$var$JDEventSource","nodeId","listeners","eventStats","newListenerStats","on","eventName","addListenerInternal","removeListenerInternal","once","eventListeners","listener","listener1","stackTrace","emit","args","apply","listenerCount","listenerStackTraces","observe","$a63d36b3e5c3f9f6$var$EventObservable","subscribe","unsubscribe","changeId","eventEmitter","observer","$a63d36b3e5c3f9f6$var$JDNode","super","nodeData","_nodeData","emitPropagated","arg","current","parent","$a63d36b3e5c3f9f6$var$JDServiceMemberNode","service5","code3","isPacket","_specification","nodeKind","specification","qualifiedName","$a63d36b3e5c3f9f6$var$JDField","index1","index","children","parts","dataTypeName","$a63d36b3e5c3f9f6$var$unpackedToObject","defaultName","field","prettyName","repeatFields","rdata","r1","field1","value1","name1","$a63d36b3e5c3f9f6$var$JDRegister","service1","code1","_lastSetTimestamp","Infinity","_lastGetTimestamp","_lastGetAttempts","_fields","lastSetTimestamp","lastGetTimestamp","clearGetTimestamp","lastGetAttempts","sendSetAsync","autoRefresh","registersUseAcks","sendGetAsync","sendSetPackedAsync","sendSetBoolAsync","sendSetStringAsync","_lastReportPkt","lastDataTimestamp","unpackedValue","objectValue","specification1","intValue","uintValue","boolValue","stringValue","refresh","skipIfValue","withTimeout","catch","processPacket","processReport","updated","compareTo","$a63d36b3e5c3f9f6$var$JDEvent","service2","code2","_count","unpacked","processEvent","ec","ahead","behind","$a63d36b3e5c3f9f6$var$JDClient","unsubscribers","unmounted","mount","unmount","$a63d36b3e5c3f9f6$var$anyRandomUint32","window","vals","Uint32Array","crypto","getRandomValues","$a63d36b3e5c3f9f6$var$cryptoRandomUint32","random","$a63d36b3e5c3f9f6$var$randomBytes","$a63d36b3e5c3f9f6$var$randomDeviceId","devId","$a63d36b3e5c3f9f6$var$warn","$a63d36b3e5c3f9f6$var$OutPipe","device2","hosted1","hosted","idbuf","port1","isOpen","send","sendData","sendMeta","items","converter","close","flags","sendPktWithAck","free","$a63d36b3e5c3f9f6$var$InPipe","bus4","_handlePacket","bind","allocPort","selfDevice","_port","localPipe","openCommand","selfDeviceId","$a63d36b3e5c3f9f6$var$InPipeReader","bus1","done","output","readAll","$a63d36b3e5c3f9f6$var$JDService","device1","serviceIndex1","_reports","_clients","statusCodeChanged","statusCode","register","role","_role","reports","mixins","serviceLength","isMixin","twin","_twin","server","readingRegister","_readingRegister","valueRegister","_valueRegister","intensityRegister","_intensityRegister","statusCodeRegister","_statusCodeRegister","instanceName","events","registers","_registers","registerCode","_events","ev","invalidateRegisterValues","onlyHeader","sendCmdPackedAsync","sendCmdAwaitResponseAsync","bus2","handleRes","resp","clients","addClient","removeClient","inp","recv","readData","$a63d36b3e5c3f9f6$var$trgbToValues","trgb","$a63d36b3e5c3f9f6$var$LEDController","service3","to","interval","$a63d36b3e5c3f9f6$var$DeviceStatsMonitor","_receivedPackets","_restarts","_announce","fill","received","total","restarts","_dataIndex","announce","dropped","reduce","processAnnouncement","oldCurrent","processRestart","$a63d36b3e5c3f9f6$var$JDDevice","deviceId2","_flashing","stats","connected","_lost","_identifying","_source","_replay","replay","anonymizedDeviceId","_anonymizedId","describe","ignoredServices","isPhysical","source","announced","_servicesData","announceFlags","restartCounter","RestartCounterSteady","statusLightFlags","StatusLightRgbFade","isClient","IsClient","packetCount","_shortId","firmwareInfo","ctrl","deviceId1","DeviceDescription","firmwareVersion","ProductIdentifier","bootloaderProductIdentifier","BootloaderProductIdentifier","refreshFirmwareInfo","_services","FirmwareVersion","lost","flashing","sendStopStreaming","_eventCounter","hasService","_ports","ex","initServices","force","_statusLight","serviceName","sendCtrlCommand","payload","changed","w0","w1","servicesChanged","service4","disconnect","statusLight","StatusLightNone","SetStatusLight","blink","Identify","identifying","reset","Reset","retry","fwIdRegister","uptime","Uptime","initAcks","_ackAwaiting","drops","resends","cleanUp","rep","numdone","aa","okCb","aa1","resend","numdrop","retriesLeft","errCb","scheduler","passive","numPkts","pkt2","jdpacked","FloodPing","$a63d36b3e5c3f9f6$var$WallClockScheduler","_now","performance","now","Date","_startTime","resetTime","delta","handle","setInterval","clearInterval","$a63d36b3e5c3f9f6$var$_startTime","$a63d36b3e5c3f9f6$var$uf2ExtTags","pageSize","$a63d36b3e5c3f9f6$var$log","$a63d36b3e5c3f9f6$var$FlashClient","bus3","adpkt","flashSize","dev_class","handlePacket","PageData","lastStatus","stop","sessionId","d1","classClients","setsession","SetSession","allPending","d2","pending","sendCommandAsync","numPending","waitForStatusAsync","num","every","page","pageAddr","targetAddress","numSubpage","currSubpage","suboff","hd","session_id","page_error","pageAddrR","fw","progress","pages","prog","startFlashAsync","flashPage","endFlashAsync","$a63d36b3e5c3f9f6$var$parseUF2Firmware","uf2","store","blobs","currBlob","magic0","magic1","trgaddr","payloadSize","blkNo","numBlocks","familyID","flush","parseExtTags","currPage","desig","tg","$a63d36b3e5c3f9f6$var$sendStayInBootloaderCommand","bl_announce","Info","$a63d36b3e5c3f9f6$var$defaultFieldPayload","typicalMin","absoluteMin","typicalMax","absoluteMax","$a63d36b3e5c3f9f6$var$JDRegisterServer","identifier1","defaultValue1","skipBoundaryCheck","skipErrorInjection","serviceSpecification","optional","$a63d36b3e5c3f9f6$var$defaultPayload","vi","resetData","normalize","_a1","fieldi","shouldNormalize","setValues","skipChangeEvent","readOnly","_a2","_a3","errorRegister","vs","lastSetTime","$a63d36b3e5c3f9f6$var$JDServiceServer","serviceClass3","options2","commands","_locked","variant","valueValues","intensityValues","registerValues","isActive","addRegister","Ready","intensity","sendEvent","Active","Inactive","Variant","Calibrate","addCommand","handleCalibrate","CalibrationNeeded","handleTwinPacket","_device","_twinCleanup","tw","twinReg","_a4","_b1","addExistingRegister","defaultValue","lock","rid","createEventCmd","delayedSend","status","calibrate","Calibrating","$a63d36b3e5c3f9f6$var$SensorServer","serviceClass1","options3","lastStream","lastErrorReadingChanged","readingValues","streamingInterval","preferredStreamingInterval","readingError","reading","streamingSamples","preferredInterval","refreshRegisters","samples","_b2","_a5","_e","$a63d36b3e5c3f9f6$var$dateToClock","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","$a63d36b3e5c3f9f6$var$RealTimeClockServer","Computer","lastSecond","precision","Precision","SetTime","handleSetTime","refreshTime","ConnectionState","$a63d36b3e5c3f9f6$var$Transport","options4","disposed","_connectionState","Disconnected","_checkPulse","checkPulse","_cleanups","_b3","_a6","connectObservable","_a7","disconnected","_b4","document","visibilityState","connect","disconnectObservable","_bus","connectionState","setConnectionState","state","_connectionTime","Connected","_lastReceivedTime","Connecting","Disconnecting","connecting","disconnecting","safeBoot","devices","reconnect","transportSendPacketAsync","background","_connectPromise","_disconnectPromise","transportConnectAsync","old","new","errorHandler","transportDisconnectAsync","finally","handleFrame","fromFrame","context","exception","transport","dispose","$a63d36b3e5c3f9f6$var$BusStatsMonitor","bus5","_prev","acks","_previ","_temp","handlePacketSend","handlePacketProcess","handleSelfAnnounce","n2","assign","ignoreInfrastructure","simulators","serviceProviders","_a8","transports","accumulate","_a9","_b5","$a63d36b3e5c3f9f6$var$ControlServer","options5","statusLightColor","resetIn","startTime","deviceDescription","mcuTemperature","McuTemperature","ResetIn","Services","identify","handleReset","Noop","handleSetStatusLight","StatusLightRgbNoFade","SupportsACK","resetIn1","resetTimestamp","lastSet","toRed","toGreen","toBlue","$a63d36b3e5c3f9f6$var$JDServiceProvider","template","$a63d36b3e5c3f9f6$var$JDServerServiceProvider","template1","services1","options6","_restartCounter","_packetCount","controlService","updateServices","_a10","removeService","newServices","index2","_delayedPackets","processDelayedPackets","dp","sort","_a11","_b6","devIdMatch","multiCommandClass","npkt","_a12","$a63d36b3e5c3f9f6$var$ProtocolTestServer","init","RwBool","RoBool","CBool","EBool","RwI32","RoI32","CI32","EI32","RwU32","RoU32","CU32","EU32","RwString","RoString","CString","EString","rwBytes","RwBytes","RoBytes","CBytes","EBytes","RwI8U8U16I32","RoI8U8U16I32","CI8U8U16I32","EI8U8U16I32","RwU8String","RoU8String","CU8String","EU8String","CReportPipe","handleReportPipe","rwi","roi","ci","ei","pipe","respondForEach","$a63d36b3e5c3f9f6$var$ButtonServer","instanceName1","analog","INACTIVE_VALUE","Analog","handleRefresh","threshold","_threshold","_b7","_a13","_downTime","_nextHold","HOLD_TIME","Down","time","Hold","Up","ACTIVE_VALUE","$a63d36b3e5c3f9f6$var$BuzzerServer","options7","volume","Volume","PlayTone","handlePlayTone","period","frequency","PLAY_TONE","$a63d36b3e5c3f9f6$var$CharacterScreenServer","options8","rows","columns","variant1","textDirection","brightness","Message","Brightness","Rows","Columns","LCD","TextDirection","LeftToRight","SetLine","handleSetLine","Clear","handleClear","line","lineMessage","rows1","columns1","message1","lines","newMessage","$a63d36b3e5c3f9f6$var$JOYSTICK_DPAD_BUTTONS","Left","Right","$a63d36b3e5c3f9f6$var$JOYSTICK_ARCADE_BUTTONS","Menu","Select","Exit","$a63d36b3e5c3f9f6$var$JOYSTICK_DPAD_A_BUTTONS","$a63d36b3e5c3f9f6$var$JOYSTICK_DPAD_AB_BUTTONS","$a63d36b3e5c3f9f6$var$JOYSTICK_GAMEPAD_EXTRA_BUTTONS","$a63d36b3e5c3f9f6$var$standardGamepadMapping","$a63d36b3e5c3f9f6$var$JoystickServer","options9","variant2","Thumb","buttonsAvailable","ButtonsAvailable","isDigital","buttons","currentButtons","y","newButtons","updateReading","button","gamepad","axes","buttonsAvailable1","pressed","newX","newY","axeLeftRight","axeUpDown","oldButtons","ButtonsChanged","$a63d36b3e5c3f9f6$var$DotMatrixServer","options10","brightness1","variant3","dots","Dots","LED","updateDotsBuffer","rows2","columns2","_a14","$a63d36b3e5c3f9f6$var$rgb","$a63d36b3e5c3f9f6$var$hsv","hue","sat","brightness_floor","color_amplitude","section","rampup_adj_with_floor","rampdown_adj_with_floor","$a63d36b3e5c3f9f6$var$mulcol","c2","$a63d36b3e5c3f9f6$var$clamp","$a63d36b3e5c3f9f6$var$SCALE0","$a63d36b3e5c3f9f6$var$LedPixelServer","options11","pxbuffer","prog_mode","prog_tmpmode","range_start","range_end","range_len","range_ptr","prog_ptr","prog_size","prog_data","dirty","inited","power_enable","numColumns","maxPower","maxPixels","numPixels","actualBrightness","ActualBrightness","lightType","LightType","WS2812B_GRB","NumPixels","MaxPixels","Strip","numRepeats","NumRepeats","NumColumns","requested_intensity","allocRxBuffer","Run","handleRun","colors","maxpower","maxpixels","numpixels","jd_power_enable","is_enabled","reset_range","set_next","pi","limit_intensity","prev_intensity","current_full","current_prev","di","v2","current_limit","inten","prog_fetch_color","prog_fetch","dst","prog_fetch_num","defl","prev","fr","prog_fetch_cmd","prog_set","ok","prog_fade","usehsv","colidx","col0","col1","colstep","colpos","fade1","fade0","col","prog_rot","first","middle","last","tmp","tmp1","tmp2","fetch_mode","prog_process","animationFrame","pcmd","sync_config","$a63d36b3e5c3f9f6$var$MatrixKeypadServer","labels","Labels","valuei","$a63d36b3e5c3f9f6$var$MotorServer","instanceName2","duty","Duty","enabled","Enabled","loadTorque","LoadTorque","loadSpeed","LoadSpeed","$a63d36b3e5c3f9f6$var$LevelDetector","service6","inactiveThreshold","activeThreshold","update","_state","Neutral","level","setState","active","_a15","inactive","_b8","$a63d36b3e5c3f9f6$var$AnalogSensorServer","serviceClass2","options12","minReading","maxReading","readingResolution","InactiveThreshold","ActiveThreshold","levelDetector","$a63d36b3e5c3f9f6$var$RainGaugeServer","options13","_tiltCount","_level","bucketSize","precipitationPrecision","PrecipitationPrecision","tiltCount","fraction","tilt","bucket","$a63d36b3e5c3f9f6$var$ReflectedLightServer","options14","variant4","InfraredDigital","$a63d36b3e5c3f9f6$var$RotaryEncoderServer","clicksPerTurn","ClicksPerTurn","clicks","position","$a63d36b3e5c3f9f6$var$ServoServer","options15","minAngle","maxAngle","responseSpeed","stallTorque","angle","Angle","currentAngle","CurrentAngle","MinAngle","MaxAngle","Offset","ResponseSpeed","StallTorque","minAngle1","maxAngle1","$a63d36b3e5c3f9f6$var$SettingsServer","storageKey","Get","handleGet","Set","handleSet","Delete","handleDelete","ListKeys","handleListKeys","List","handleList","settings","read","getPayload","secret","save","localStorage","getItem","setItem","Change","$a63d36b3e5c3f9f6$var$SpeechSynthesisServer","synthesis","speechSynthesis","_a16","paused","pitch","Pitch","rate","Rate","lang","Lang","Speak","handleSpeak","Cancel","handleCancel","utterance","SpeechSynthesisUtterance","speak","_a17","$a63d36b3e5c3f9f6$var$SwitchServer","options16","autoOffDelay","variant5","AutoOffDelay","switchOff","switchOn","On","startAutoOff","Off","stopAutoOff","autoOffInterval","$a63d36b3e5c3f9f6$var$TrafficLightServer","options17","red","Red","orange","Orange","green","Green","$a63d36b3e5c3f9f6$var$LEDServer","options18","ledCount","variant6","ThroughHole","luminousIntensity","waveLength","color","maxPower1","Color","updateColor","LedCount","LuminousIntensity","WaveLength","Animate","handleAnimate","_animation","blue","speed","alpha","oneAlpha","newRed","newGreen","newBlue","$a63d36b3e5c3f9f6$var$SoundPlayerServer","sounds","ListSounds","handleListSounds","Play","handlePlay","sound","_a18","onPlay","call","$a63d36b3e5c3f9f6$var$RandomNumberGeneratorServer","WebCrypto","Random","$a63d36b3e5c3f9f6$var$CompassServer","$a63d36b3e5c3f9f6$var$DMXServer","Send","handleSend","$a63d36b3e5c3f9f6$var$inIFrame","self","top","$a63d36b3e5c3f9f6$var$getStringOffset","packetType","$a63d36b3e5c3f9f6$var$RadioPacket","data1","$a63d36b3e5c3f9f6$var$RADIO_MAX_PACKET_SIZE","serial","stringPayload","numberPayload","bufferPayload","$a63d36b3e5c3f9f6$var$PACKET_PREFIX_LENGTH","$a63d36b3e5c3f9f6$var$MAX_PAYLOAD_LENGTH","hasString","hasNumber","$a63d36b3e5c3f9f6$var$BitRadioServer","group","Group","transmissionPower","TransmissionPower","frequencyBand","FrequencyBand","SendString","handleSendString","SendNumber","handleSendNumber","SendValue","handleSendValue","SendBuffer","handleSendBuffer","rpkt","mkPacket","sendRadioPacket","data2","bus6","broadcast","rssi","groupId","bufferData","postMessage","$a63d36b3e5c3f9f6$var$PowerServer","options19","Allowed","overload","PowerStatus","$a63d36b3e5c3f9f6$var$CapacitiveButtonServer","options20","Threshold","$a63d36b3e5c3f9f6$var$HIDKeyboardServer","options21","Key","handleKey","lastKey","_lastKey","rest","$a63d36b3e5c3f9f6$var$selectors","j","q","w","z","$","enter","escape","backspace","tab","space","capslock","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","printscreen","scrolllock","pause","insert","home","pageup","delete","pagedown","arrowright","arrowleft","arrowdown","arrowup","numlock","numpaddivide","numpadmultiply","numpadsubstract","numpadadd","numpadenter","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","numpad0","numpaddecimal","numpadequal","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","execute","help","contextmenu","select","again","undo","cut","copy","paste","mute","volumeup","volumedown","numpadcomma","$a63d36b3e5c3f9f6$var$reverseSelectors","$a63d36b3e5c3f9f6$var$modifierCodes","controlleft","LeftControl","altleft","LeftAlt","shiftleft","LeftShift","metaleft","LeftGUI","controlright","RightControl","altright","RightAlt","shiftright","RightShift","metaright","RightGUI","$a63d36b3e5c3f9f6$var$renderHidMouseButtons","Middle","$a63d36b3e5c3f9f6$var$HIDMouseServer","options22","Move","handleMove","SetButton","handleSetButton","Wheel","handleWheel","lastCommand","_lastCommand","setLastCommand","dx","dy","btns","toLocaleLowerCase","$a63d36b3e5c3f9f6$var$DimmerServer","instanceName3","options23","variant7","Light","$a63d36b3e5c3f9f6$var$AzureIoTHubHealthServer","options24","hubName","HubName","hubDeviceId","HubDeviceId","connectionStatus","ConnectionStatus","ConnectionStatusChange","connectionString","Connect","handleConnect","Disconnect","handleDisconnect","SetConnectionString","handleSetConnectionString","newConnectionString","connStringParts","separator","kv","$a63d36b3e5c3f9f6$var$splitPair","$a63d36b3e5c3f9f6$var$parsePropertyBag","$a63d36b3e5c3f9f6$var$VibrationMotorServer","_animationStep","Vibrate","handleVibrate","pattern","elapsed","dt","VIBRATE_PATTERN","$a63d36b3e5c3f9f6$var$WifiServer","_lastScanResults","ssid","bssid","channel","WPS","IEEE_802_11B","_knownNetworks","password","priority","Ssid","ipAddress","IpAddress","eui48","Eui48","Scan","handleScan","Reconnect","handleReconnect","LastScanResults","handleLastScanResults","ListKnownNetworks","handleListKnownNetworks","AddNetwork","handleAddNetwork","ForgetAllNetworks","handleForgetAllNetworks","ForgetNetwork","handleForgetNetwork","SetNetworkPriority","handleSetNetworkPriority","handleIpChange","handleEnabledChange","ip","GotIp","LostIp","scannedKnownNetworks","kn","scan","known","networks","network","IEEE_802_11N","ScanComplete","scanned","NetworksChanged","currentSsid","network1","$a63d36b3e5c3f9f6$var$indoorThermometerOptions","Indoor","$a63d36b3e5c3f9f6$var$outdoorThermometerOptions","Outdoor","$a63d36b3e5c3f9f6$var$outdoorHumidityOptions","$a63d36b3e5c3f9f6$var$medicalThermometerOptions","Body","$a63d36b3e5c3f9f6$var$barometerOptions","$a63d36b3e5c3f9f6$var$sonarOptions","Ultrasonic","$a63d36b3e5c3f9f6$var$microServoOptions","$a63d36b3e5c3f9f6$var$microServo270Options","$a63d36b3e5c3f9f6$var$microServo360Options","$a63d36b3e5c3f9f6$var$SG90_RESPONSE_SPEED","$a63d36b3e5c3f9f6$var$windDirectionOptions","$a63d36b3e5c3f9f6$var$windSpeedOptions","MaxWindSpeed","$a63d36b3e5c3f9f6$var$eCO2Options","VOC","$a63d36b3e5c3f9f6$var$CO2Options","NDIR","$a63d36b3e5c3f9f6$var$tvocOptions","$a63d36b3e5c3f9f6$var$microbitSounds","$a63d36b3e5c3f9f6$var$soundLevel","MinDecibels","MaxDecibels","$a63d36b3e5c3f9f6$var$soundSpectrum","FftPow2Size","SmoothingTimeConstant","$a63d36b3e5c3f9f6$var$_providerDefinitions","DigitCount","DecimalPoint","config","OLED","RightToLeft","Braille","Fan","Linear22Inch","Finger","Gamepad","Ring","Jewel","Stick","Matrix","PhotoResistor","InfraredAnalog","Electromechanical","MaxSwitchingCurrent","SolidState","Rotary","Slider","Slide","PushButton","Toggle","Tilt","Proximity","TypeB","VibrationMotor","Jewelry","Food","LEDMatrix","factory","services2","pwr","$a63d36b3e5c3f9f6$var$addServiceProvider","definition","template2","others","sp","$a63d36b3e5c3f9f6$var$stableSimulatorDeviceId","options25","_a19","addServiceProvider","$a63d36b3e5c3f9f6$var$serviceProviderDefinitionFromServiceClass","provider","$a63d36b3e5c3f9f6$var$JDServiceClient","service7","$a63d36b3e5c3f9f6$var$RoleManagerClient","service8","_roles","_needRefresh","_lastRefreshAttempt","changeEvent","startRefreshRoles","refreshRoles","handleChange","assignRoles","roleManager","setRoleManagerService","clearRoles","roles","collectRoles","previousRolesHash","ListRequiredRoles","devidbuf","serviceIndex2","unroledSrvs","assignRole","hasRoleForService","_a20","compatibleRoles","_a21","previous","SetRole","startSimulators","_a22","todos","hostDefinition","todo","$a63d36b3e5c3f9f6$var$JDBus","_transports","_bridges","_devices","_lastPingLoggerTime","_lastResetInTime","_minLoggerPriority","Debug","_gcDevicesFrozen","_serviceProviders","_streaming","_passive","parentOrigin","tr","addTransport","handleRealTimeClockSync","handleRoleManager","configureBroadcastChannel","BroadcastChannel","unsubConnectionState","handleVisibilityChange","handleBroadcastMessage","transports1","ctr","addEventListener","_unsubscribeBroadcastChannel","removeEventListener","preConnect","bridges","addBridge","bridge","removeBridge","all","_announceInterval","backgroundRefreshRegisters","_gcInterval","gcDevices","_safeBootInterval","clear","_a23","host","devs","_roleManagerClient","_a24","_a25","_b9","_a26","_b10","_a27","_a28","node","type1","groups","_a29","_c1","_b11","_d1","_h","_g","_f","streaming","minLoggerPriority","syncTime","service9","firmwareBlobs","_firmwareBlobs","ignoreSimulators","findServiceProvider","physical","removeServiceProvider","removeDevice","devi","skipCreate","devicesFrozen","pushDeviceFrozen","popDeviceFrozen","lostCutoff","disconnectedCutoff","lastSeen","disconnectDevice","sendAnnounce","sendResetIn","sendPingLoggers","lastResetInTime","rst","readingRegisters","Silent","MinPriority","_refreshRegistersInterval","handleRefreshRegisters","device3","_a30","noDataYet","age","backoff","intervalRegister","preferredIntervalRegister","streamingSamplesRegister","volatile","promise","tid","$a63d36b3e5c3f9f6$var$TracePlayer","_busStartTimestamp","_index","_lastProgressEmit","tick","running","_interval","_trace","_a31","emitProgress","busElapsed","packets1","packetStart","_a32","packetElapsed","$a63d36b3e5c3f9f6$var$parsePacketFilter","bus7","props","grouping","repeatedAnnounce","minPriority","regGet","regSet","before","after","pipes","errors","collapseAck","collapsePipes","collapseGets","part","prefix","add","parseBoolean","deviceId3","_a33","pid","parseTimestamp","filters","hasAnyFlag","_a34","_b12","fwid","_a35","_a36","_a37","filter1","$a63d36b3e5c3f9f6$var$compileFilter","$a63d36b3e5c3f9f6$var$cmdCode","$a63d36b3e5c3f9f6$var$isWhiteSpace","code4","$a63d36b3e5c3f9f6$var$JDBridge","bridgeId","packetSent","packetProcessed","handleSendPacket","newBus","receiveFrame","dispatchPackets","receivePacket","sendPacket","$a63d36b3e5c3f9f6$var$isWebBluetoothSupported","navigator","bluetooth","requestDevice","$a63d36b3e5c3f9f6$var$BluetoothTransport","handleDisconnected","handleCharacteristicChanged","_a42","getDevices","$a63d36b3e5c3f9f6$var$bleGetDevices","options26","_b16","$a63d36b3e5c3f9f6$var$bleRequestDevice","namePrefix","optionalServices","gatt","_server","_service","getPrimaryService","_rxCharacteristic","getCharacteristic","_txCharacteristic","startNotifications","totalChunks","ceil","remainingChunks","sent","writeValueWithoutResponse","_a43","_rxBuffer","packetData","_rxChunkCounter","$a63d36b3e5c3f9f6$var$createBluetoothTransport","$a63d36b3e5c3f9f6$var$HF2Proto","io","eventHandlers","msgs","cmdSeq","frames","onData","onSerial","handleEvent","_a44","talkAsync","seq","numSkipped","handleReturnAsync","sendMsgAsync","loop","onEvent","onJDMessage","sendJDMessageAsync","evid","iserr","checkMode","mode","io1","disconnectAsync","$a63d36b3e5c3f9f6$var$CMSISProto","sendQ","startRecvToLoop","assert","_lastInterval","recvTo","stopRecvToLoop","_a45","xchgAddr","_onJDMsg","cb","io2","recvAsync","recvPacketAsync","cmds","response","talkHexAsync","decodeString","dapDelay","micros","setBaud","currSend","lastXchg","numev","readBytes","writeWord","triggerIRQ","sendFree","bbody","writeWords","bhead","lastSend","readSerial","pendingSerial","beg","lastPendingSerial","setupTAR","MAX","reqHd","req","overhang","ptrTX","dataBytes","lastCh","ch","jdmode","readWords","words1","memStart","checkSize","p0","p1","check","a0","a1","irqn","talkStringAsync","setBaudRate","freq","inits","ini","mask","readDP","xchg","findExchange","xchgLoop","$a63d36b3e5c3f9f6$var$JDError","jacdacName","$a63d36b3e5c3f9f6$var$errorCode","_a46","$a63d36b3e5c3f9f6$var$USB_FILTERS","classCode","subclassCode","vendorId","productId","$a63d36b3e5c3f9f6$var$USBIO","readLoopStarted","ready","rawMode","onError","mkProto","isMicrobit","clearDev","epIn","epOut","recvPacketCoreAsync","final","transferIn","endpointNumber","controlTransferIn","requestType","recipient","request","interfaceNumber","productName","transferOut","controlTransferOut","checkDevice","altIface","manufacturerName","subcl","configuration","interfaces","alt","alternates","interfaceClass","interfaceSubclass","serialNumber","tryReconnectAsync","requestDeviceAsync","openDeviceAsync","proto","postConnectAsync","open","selectConfiguration","endpoints","direction","packetSize","claimInterface","readLoop","$a63d36b3e5c3f9f6$var$WEB_SERIAL_FILTERS","usbVendorId","$a63d36b3e5c3f9f6$var$WebSerialIO","cancelStreams","devInfo","getInfo","usbProductId","reader","releaseLock","writer","_b17","readpkt","readable","getReader","_c3","write","ports","getPorts","requestPort","baudRate","bufferSize","_a47","writable","getWriter","$a63d36b3e5c3f9f6$var$EventTargetObservable","element","$a63d36b3e5c3f9f6$var$isWebUSBEnabled","$a63d36b3e5c3f9f6$var$isWebUSBSupported","usb","$a63d36b3e5c3f9f6$var$usbRequestDevice","options27","_b18","_a48","$a63d36b3e5c3f9f6$var$usbGetDevices","$a63d36b3e5c3f9f6$var$WebUSBTransport","hf2","connectAsync","$a63d36b3e5c3f9f6$var$createUSBTransport","options28","$a63d36b3e5c3f9f6$var$WorkerTransport","worker","handleMessage","postMessageAsync","jacdac","type2","type3","$a63d36b3e5c3f9f6$var$isWebSerialSupported","$a63d36b3e5c3f9f6$var$WebSerialTransport","mkTransport","$a63d36b3e5c3f9f6$var$createWebSerialTransport","mkTransport1","$a63d36b3e5c3f9f6$var$toPromise","EventHandlers","EventEmitter","$getMaxListeners","that","_maxListeners","defaultMaxListeners","emitNone","isFn","arrayClone","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","_addListener","target","prepend","existing","TypeError","newListener","_eventsCount","warned","emitter","_onceWrap","fired","removeListener","arguments","evlistener","prototype","create","usingDomains","domain","Domain","getPrototypeOf","setMaxListeners","getMaxListeners","er","doError","domainEmitter","domainThrown","addListener","prependListener","prependOnceListener","originalListener","pop","removeAllListeners","ret","Reflect","ownKeys","EventDispatcher","[object Object]","isEventListenerObject","callback","USBConfiguration","configurationValue","configurationName","USBInterface","_handle","claimed","_claimed","alternate","alternateSetting","_currentAlternate","adapter","selectAlternateInterface","releaseInterface","USBAlternateInterface","interfaceProtocol","interfaceName","USBEndpoint","USBDevice","usbVersionMajor","usbVersionMinor","usbVersionSubminor","deviceClass","deviceSubclass","deviceProtocol","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","_configurations","configurations","url","_maxPacketSize","_currentConfiguration","getConnected","opened","getOpened","endpoint","usbInterface","usbEndpoint","setup","LIBUSB_ENDPOINT_IN","getEndpoint","releaseInterfacePromises","_error","setupError","setupInvalid","clearHalt","packetLengths","isochronousTransferIn","isochronousTransferOut","CONSTANTS","WEB_UUID","USBAdapter","attachCallback","loadDevice","loadedDevice","getDeviceHandle","devicetoUSBDevice","usbDevice","EVENT_DEVICE_CONNECT","detachCallback","EVENT_DEVICE_DISCONNECT","busNumber","deviceAddress","task","params","chain","param","results","descriptors","descriptor","_reject","fn","retries","retryPromise","retryError","preFilters","getDeviceList","preFilterDevices","serialPromises","deviceDescriptor","idVendor","idProduct","configDescriptor","allConfigDescriptors","getCapabilities","capabilities","getWebCapability","capability","getWebUrl","openDevice","uuid","decodeUUID","readUInt16LE","readUInt32LE","data3","data4","readUInt8","data5","suppressErrors","byteLength","vendor","controlTransfer","scheme","configs","serialDevicePromises","configToUSBConfiguration","deviceVersion","decodeVersion","bcdDevice","usbVersion","bcdUSB","getStringDescriptor","iManufacturer","iProduct","iSerialNumber","bMaxPacketSize0","bDeviceClass","bDeviceSubClass","bDeviceProtocol","major","minor","sub","bConfigurationValue","substr","DataView","bufferSource","ArrayBuffer","isView","byteOffset","address","LIBUSB_ENDPOINT_OUT","epoint","bEndpointAddress","bmAttributes","LIBUSB_TRANSFER_TYPE_BULK","LIBUSB_TRANSFER_TYPE_INTERRUPT","wMaxPacketSize","iInterface","bAlternateSetting","bInterfaceClass","bInterfaceSubClass","bInterfaceProtocol","endpointToUSBEndpoint","interfaceToUSBAlternateInterface","bInterfaceNumber","iConfiguration","allInterfaces","interfacesToUSBInterface","LIBUSB_RECIPIENT_DEVICE","LIBUSB_RECIPIENT_INTERFACE","LIBUSB_RECIPIENT_ENDPOINT","LIBUSB_RECIPIENT_OTHER","LIBUSB_REQUEST_TYPE_STANDARD","LIBUSB_REQUEST_TYPE_CLASS","LIBUSB_REQUEST_TYPE_VENDOR","getDevice","loadDevices","setConfiguration","interface","claim","release","setAltSetting","controlTransferParamsToType","errno","LIBUSB_TRANSFER_STALL","LIBUSB_TRANSFER_OVERFLOW","bufferToDataView","bufferSourceToBuffer","$167bca066fa4f687$require$Buffer","bytesWritten","wIndex","getInEndpoint","transfer","getOutEndpoint","_endpointNumber","_packetLengths","_resolve","W3CUSBConnectionEvent","bubbles","cancelable","defaultPrevented","eventInitDict","initEvent","USB","devicesFound","deviceConnectCallback","replaceAllowedDevice","dispatchEvent","onconnect","deviceDisconnectCallback","allowedDevices","ondisconnect","_onconnect","_ondisconnect","isSameDevice","protocolCode","listUSBDevices","constructor","filterDevice","selectFn","exports","module","parcelRequire","isBuffer","obj","INIT_ERROR","Device","Transfer","setDebugLevel","_enableHotplugEvents","_disableHotplugEvents","$k8lWY","findByIds","vid","deviceDesc","defaultConfig","__open","Interface","__close","defineProperty","get","_configDescriptor","__getConfigDescriptor","LIBUSB_ERROR_NOT_FOUND","_allConfigDescriptors","__getAllConfigDescriptors","_parent","__getParent","SETUP_SIZE","LIBUSB_CONTROL_SETUP_SIZE","altSetting","__refresh","Capability","_bosDescriptor","bDevCapabilityType","dev_capability_data","Endpoint","transferType","InEndpoint","OutEndpoint","bmRequestType","bRequest","wValue","data_or_length","wLength","isIn","$3ab9cbd7dda4c354$require$Buffer","alloc","writeUInt8","writeUInt16LE","LIBUSB_TRANSFER_TYPE_CONTROL","buf1","submit","$g47tY","nextTick","desc_index","LIBUSB_REQUEST_GET_DESCRIPTOR","LIBUSB_DT_STRING","getBosDescriptor","LIBUSB_DT_BOS","LIBUSB_DT_BOS_SIZE","totalLength","error1","buffer1","bLength","bDescriptorType","wTotalLength","bNumDeviceCaps","desired","__setConfiguration","__claimInterface","closeEndpoints","ep","pollActive","stopPoll","__releaseInterface","isKernelDriverActive","__isKernelDriverActive","detachKernelDriver","__detachKernelDriver","attachKernelDriver","__attachKernelDriver","__setInterface","$h4Cg3","inherits","__clearHalt","makeTransfer","startPoll","nTransfers","transferSize","pollTransfers","pollTransferSize","pollPending","transfers","transferDone","LIBUSB_TRANSFER_CANCELLED","startTransfer","super_","transferWithZLP","hotplugListeners","$59ce19782de6bad3$export$2dd1e73548b4e655","$59ce19782de6bad3$export$74954538e33d2f49","$59ce19782de6bad3$var$customInspectSymbol","Symbol","$59ce19782de6bad3$var$Buffer","$59ce19782de6bad3$var$K_MAX_LENGTH","$59ce19782de6bad3$var$createBuffer","RangeError","setPrototypeOf","encodingOrOffset","$59ce19782de6bad3$var$allocUnsafe","$59ce19782de6bad3$var$from","string","encoding","isEncoding","$59ce19782de6bad3$var$byteLength","$59ce19782de6bad3$var$fromString","arrayView","$59ce19782de6bad3$var$isInstance","$59ce19782de6bad3$var$fromArrayBuffer","$59ce19782de6bad3$var$fromArrayLike","$59ce19782de6bad3$var$fromArrayView","SharedArrayBuffer","valueOf","$59ce19782de6bad3$var$checked","$59ce19782de6bad3$var$numberIsNaN","$59ce19782de6bad3$var$fromObject","toPrimitive","$59ce19782de6bad3$var$assertSize","array","mustMatch","loweredCase","$59ce19782de6bad3$var$utf8ToBytes","$59ce19782de6bad3$var$base64ToBytes","$59ce19782de6bad3$var$slowToString","$59ce19782de6bad3$var$hexSlice","$59ce19782de6bad3$var$utf8Slice","$59ce19782de6bad3$var$asciiSlice","$59ce19782de6bad3$var$latin1Slice","$59ce19782de6bad3$var$base64Slice","$59ce19782de6bad3$var$utf16leSlice","$59ce19782de6bad3$var$swap","$59ce19782de6bad3$var$bidirectionalIndexOf","$59ce19782de6bad3$var$arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","$59ce19782de6bad3$var$hexWrite","remaining","strLen","parsed","$59ce19782de6bad3$var$utf8Write","$59ce19782de6bad3$var$blitBuffer","$59ce19782de6bad3$var$asciiWrite","byteArray","$59ce19782de6bad3$var$asciiToBytes","$59ce19782de6bad3$var$base64Write","$59ce19782de6bad3$var$ucs2Write","units","hi","lo","$59ce19782de6bad3$var$utf16leToBytes","$kdCfV","fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","$59ce19782de6bad3$var$MAX_ARGUMENTS_LENGTH","$59ce19782de6bad3$var$decodeCodePointsArray","TYPED_ARRAY_SUPPORT","foo","$59ce19782de6bad3$var$typedArraySupport","enumerable","poolSize","$59ce19782de6bad3$var$alloc","allocUnsafe","allocUnsafeSlow","_isBuffer","compare","concat","swap16","swap32","swap64","toLocaleString","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","out","$59ce19782de6bad3$var$hexSliceLookupTable","$59ce19782de6bad3$var$checkOffset","ext","$59ce19782de6bad3$var$checkInt","$59ce19782de6bad3$var$checkIEEE754","$59ce19782de6bad3$var$writeFloat","littleEndian","noAssert","$h322F","$59ce19782de6bad3$var$writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUint16LE","readUint16BE","readUint32LE","readUint32BE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUint16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","$59ce19782de6bad3$var$INVALID_BASE64_RE","leadSurrogate","toByteArray","$59ce19782de6bad3$var$base64clean","alphabet","table","i16","$eb82b26290499607$export$2367b5e7922a95be","$eb82b26290499607$export$297b58465abed6df","b64","lens","$eb82b26290499607$var$getLens","validLen","placeHoldersLen","$eb82b26290499607$var$Arr","$eb82b26290499607$var$_byteLength","curByte","$eb82b26290499607$var$revLookup","uint8","extraBytes","maxChunkLength","len2","$eb82b26290499607$var$encodeChunk","$eb82b26290499607$var$lookup","$eb82b26290499607$var$code","$eb82b26290499607$var$i","$eb82b26290499607$var$len","$c6944cf83e276b6e$export$a9187e77005a4477","$c6944cf83e276b6e$export$2c262a1484748b93","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","$bb22d2ee3f2d8bd4$var$cachedSetTimeout","$bb22d2ee3f2d8bd4$var$cachedClearTimeout","$bb22d2ee3f2d8bd4$var$process","$bb22d2ee3f2d8bd4$var$defaultSetTimout","$bb22d2ee3f2d8bd4$var$defaultClearTimeout","$bb22d2ee3f2d8bd4$var$runTimeout","fun","e1","$bb22d2ee3f2d8bd4$var$currentQueue","$bb22d2ee3f2d8bd4$var$queue","$bb22d2ee3f2d8bd4$var$draining","$bb22d2ee3f2d8bd4$var$queueIndex","$bb22d2ee3f2d8bd4$var$cleanUpNextTick","$bb22d2ee3f2d8bd4$var$drainQueue","run","marker","$bb22d2ee3f2d8bd4$var$runClearTimeout","$bb22d2ee3f2d8bd4$var$Item","$bb22d2ee3f2d8bd4$var$noop","title","browser","env","argv","versions","binding","cwd","chdir","umask","$fye0Y","dirname","exists","$4b1yn","accessSync","path","existsSync","defaults","arrow","compiled","platform","arch","nodePreGyp","modules","bindings","try","module_root","getRoot","getFileName","extname","requireFunc","__webpack_require__","__non_webpack_require__","tries","calling_file","fileName","origPST","prepareStackTrace","origSTL","stackTraceLimit","dummy","captureStackTrace","$dcE70","file","$b524e708dbd14c5a$var$assertPath","$b524e708dbd14c5a$var$normalizeStringPosix","allowAboveRoot","lastSegmentLength","lastSlash","lastSlashIndex","$b524e708dbd14c5a$var$posix","resolvedPath","resolvedAbsolute","isAbsolute","trailingSeparator","joined","relative","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","_makeLong","hasRoot","matchedSlash","basename","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","pathObject","sep","root","base","$b524e708dbd14c5a$var$_format","isAbsolute1","delimiter","win32","posix","$99cb82c1409e1947$var$sep","uri","substring","decodeURI","firstSlash","$ea8594dda770cbcb$var$ReflectOwnKeys","$ea8594dda770cbcb$var$R","$ea8594dda770cbcb$var$ReflectApply","receiver","Function","getOwnPropertySymbols","getOwnPropertyNames","$ea8594dda770cbcb$var$NumberIsNaN","$ea8594dda770cbcb$var$EventEmitter","errorListener","resolver","$ea8594dda770cbcb$var$eventTargetAgnosticAddListener","$ea8594dda770cbcb$var$addErrorHandlerIfEventEmitter","$ea8594dda770cbcb$var$defaultMaxListeners","$ea8594dda770cbcb$var$checkListener","$ea8594dda770cbcb$var$_getMaxListeners","$ea8594dda770cbcb$var$_addListener","warning","$ea8594dda770cbcb$var$onceWrapper","wrapFn","$ea8594dda770cbcb$var$_onceWrap","wrapped","$ea8594dda770cbcb$var$_listeners","unwrap","$ea8594dda770cbcb$var$unwrapListeners","$ea8594dda770cbcb$var$arrayClone","$ea8594dda770cbcb$var$listenerCount","wrapListener","$ea8594dda770cbcb$var$spliceOne","rawListeners","$c6e07c99b9f7c955$var$getOwnPropertyDescriptors","getOwnPropertyDescriptors","getOwnPropertyDescriptor","$c6e07c99b9f7c955$var$formatRegExp","$c6e07c99b9f7c955$var$isString","objects","$c6e07c99b9f7c955$var$inspect","$c6e07c99b9f7c955$var$isNull","$c6e07c99b9f7c955$var$isObject","deprecate","noDeprecation","throwDeprecation","traceDeprecation","$c6e07c99b9f7c955$var$debugs","$c6e07c99b9f7c955$var$debugEnvRegex","ctx","seen","stylize","$c6e07c99b9f7c955$var$stylizeNoColor","depth","$c6e07c99b9f7c955$var$isBoolean","showHidden","_extend","$c6e07c99b9f7c955$var$isUndefined","customInspect","$c6e07c99b9f7c955$var$stylizeWithColor","$c6e07c99b9f7c955$var$formatValue","styleType","style","styles","recurseTimes","$c6e07c99b9f7c955$var$isFunction","primitive","simple","$c6e07c99b9f7c955$var$isNumber","$c6e07c99b9f7c955$var$formatPrimitive","visibleKeys","hash","$c6e07c99b9f7c955$var$arrayToHash","$c6e07c99b9f7c955$var$isError","$c6e07c99b9f7c955$var$formatError","$c6e07c99b9f7c955$var$isRegExp","RegExp","$c6e07c99b9f7c955$var$isDate","braces","$c6e07c99b9f7c955$var$isArray","toUTCString","$c6e07c99b9f7c955$var$hasOwnProperty","$c6e07c99b9f7c955$var$formatProperty","match","$c6e07c99b9f7c955$var$formatArray","numLinesEst","cur","$c6e07c99b9f7c955$var$reduceToSingleString","ar","re","$c6e07c99b9f7c955$var$objectToString","$c6e07c99b9f7c955$var$pad","debuglog","isBoolean","isNull","isNullOrUndefined","isNumber","isString","isSymbol","isUndefined","isRegExp","isObject","isDate","isError","isNativeError","isFunction","isPrimitive","$c6e07c99b9f7c955$var$months","$c6e07c99b9f7c955$var$timestamp","prop","hasOwnProperty","origin","$c6e07c99b9f7c955$var$kCustomPromisifiedSymbol","$c6e07c99b9f7c955$var$callbackifyOnRejected","reason","newReason","promisify","original","configurable","promiseResolve","promiseReject","defineProperties","custom","callbackify","callbackified","maybeCb","rej","$cf6dea9f390af97d$var$uncurryThis","$cf6dea9f390af97d$var$BigIntSupported","BigInt","$cf6dea9f390af97d$var$SymbolSupported","$cf6dea9f390af97d$var$ObjectToString","$cf6dea9f390af97d$var$numberValue","$cf6dea9f390af97d$var$stringValue","$cf6dea9f390af97d$var$booleanValue","Boolean","$cf6dea9f390af97d$var$bigIntValue","$cf6dea9f390af97d$var$symbolValue","$cf6dea9f390af97d$var$checkBoxedPrimitive","prototypeValueOf","$cf6dea9f390af97d$var$isMapToString","$cf6dea9f390af97d$var$isSetToString","$cf6dea9f390af97d$var$isWeakMapToString","$cf6dea9f390af97d$var$isWeakSetToString","$cf6dea9f390af97d$var$isArrayBufferToString","$cf6dea9f390af97d$var$isArrayBuffer","working","$cf6dea9f390af97d$var$isDataViewToString","$cf6dea9f390af97d$var$isDataView","isArgumentsObject","$biGXv","isGeneratorFunction","$bxBRr","isTypedArray","$3B9zg","isPromise","isArrayBufferView","isUint8Array","$kGe6S","isUint8ClampedArray","isUint16Array","isUint32Array","isInt8Array","isInt16Array","isInt32Array","isFloat32Array","isFloat64Array","isBigInt64Array","isBigUint64Array","Map","isMap","WeakMap","isWeakMap","WeakSet","isWeakSet","isArrayBuffer","isDataView","$cf6dea9f390af97d$var$SharedArrayBufferCopy","$cf6dea9f390af97d$var$isSharedArrayBufferToString","$cf6dea9f390af97d$var$isSharedArrayBuffer","$cf6dea9f390af97d$var$isNumberObject","$cf6dea9f390af97d$var$isStringObject","$cf6dea9f390af97d$var$isBooleanObject","$cf6dea9f390af97d$var$isBigIntObject","$cf6dea9f390af97d$var$isSymbolObject","isSharedArrayBuffer","isAsyncFunction","isMapIterator","isSetIterator","isGeneratorObject","isWebAssemblyCompiledModule","isNumberObject","isStringObject","isBooleanObject","isBigIntObject","isSymbolObject","isBoxedPrimitive","isAnyArrayBuffer","method","$83a2b2dc269955eb$var$hasToStringTag","$83a2b2dc269955eb$var$$toString","$3WJtC","$83a2b2dc269955eb$var$isStandardArguments","toStringTag","$83a2b2dc269955eb$var$isLegacyArguments","callee","$83a2b2dc269955eb$var$supportsStandardArguments","isLegacyArguments","$8xLv7","iterator","sym","symObj","syms","propertyIsEnumerable","$2dfa10962c924ec6$var$$indexOf","$idPLz","$jx2Xf","allowMissing","intrinsic","$e383641cb896376f$var$undefined","$e383641cb896376f$var$$SyntaxError","SyntaxError","$e383641cb896376f$var$$Function","$e383641cb896376f$var$$TypeError","$e383641cb896376f$var$getEvalledConstructor","expressionSyntax","$e383641cb896376f$var$$gOPD","$e383641cb896376f$var$throwTypeError","$e383641cb896376f$var$ThrowTypeError","calleeThrows","gOPDthrows","$e383641cb896376f$var$hasSymbols","$e383641cb896376f$var$getProto","__proto__","$e383641cb896376f$var$needsEval","$e383641cb896376f$var$TypedArray","$e383641cb896376f$var$INTRINSICS","AggregateError","Atomics","encodeURI","encodeURIComponent","eval","EvalError","FinalizationRegistry","Int8Array","Int16Array","Int32Array","parseFloat","Proxy","ReferenceError","Uint8ClampedArray","Uint16Array","URIError","WeakRef","$e383641cb896376f$var$doEval","doEval","gen","$e383641cb896376f$var$LEGACY_ALIASES","$e383641cb896376f$var$$concat","$b7Zhx","$e383641cb896376f$var$$spliceApply","$e383641cb896376f$var$$replace","$e383641cb896376f$var$$strSlice","$e383641cb896376f$var$rePropName","$e383641cb896376f$var$reEscapeChar","$e383641cb896376f$var$stringToPath","number","quote","subString","$e383641cb896376f$var$getBaseIntrinsic","alias","intrinsicName","$3bZdX","intrinsicBaseName","intrinsicRealName","skipFurtherCaching","isOwn","$6c871ec1eb1c2055$var$origSymbol","$aFmq8","$7c3f1ff1a61e23e4$var$ERROR_MESSAGE","$7c3f1ff1a61e23e4$var$slice","$7c3f1ff1a61e23e4$var$toStr","$7c3f1ff1a61e23e4$var$funcType","bound","binder","boundLength","boundArgs","Empty","$d441989d8b543d03$var$$apply","$d441989d8b543d03$var$$call","$d441989d8b543d03$var$$reflectApply","$d441989d8b543d03$var$$gOPD","$d441989d8b543d03$var$$defineProperty","$d441989d8b543d03$var$$max","originalFunction","func","$d441989d8b543d03$var$applyBind","$8670252c382cdf61$var$GeneratorFunction","$8670252c382cdf61$var$toStr","$8670252c382cdf61$var$fnToStr","$8670252c382cdf61$var$isFnRegex","$8670252c382cdf61$var$hasToStringTag","$8670252c382cdf61$var$getProto","generatorFunc","$8670252c382cdf61$var$getGeneratorFunc","$f0e2acce715fb5b7$var$$toString","$f0e2acce715fb5b7$var$hasToStringTag","$f0e2acce715fb5b7$var$g","globalThis","$parcel$global","$f0e2acce715fb5b7$var$typedArrays","$dknuK","$f0e2acce715fb5b7$var$$slice","$f0e2acce715fb5b7$var$toStrTags","$f0e2acce715fb5b7$var$getPrototypeOf","$8A0yE","$aBw6S","typedArray","superProto","foundName","getter","$f0e2acce715fb5b7$var$tryTypedArrays","$7b864470f42bfa4b$var$hasOwn","$7b864470f42bfa4b$var$toString","$9b3f5e3c197ba30a$var$possibleNames","$9b3f5e3c197ba30a$var$g","$63f21e5324cc6934$var$$gOPD","$29ec3fc38c4ba48f$var$$toString","$29ec3fc38c4ba48f$var$hasToStringTag","$29ec3fc38c4ba48f$var$g","$29ec3fc38c4ba48f$var$typedArrays","$29ec3fc38c4ba48f$var$$indexOf","$29ec3fc38c4ba48f$var$$slice","$29ec3fc38c4ba48f$var$toStrTags","$29ec3fc38c4ba48f$var$getPrototypeOf","tag","anyTrue","$29ec3fc38c4ba48f$var$tryTypedArrays","ctor","superCtor","TempCtor","$a63d36b3e5c3f9f6$var$IFrameBridge","targetOrigin","$a63d36b3e5c3f9f6$var$RoleManager","bus9","addServices","removeServices","bindServices","isBound","service10","updateRoles","newRoles","oldBound","supportedNewRoles","newRole","existingRole","emitBoundEvents","updateRole","preferredDeviceId","bindRole","theOne","newOne","_a49","$a63d36b3e5c3f9f6$var$_sensorSpecs","$a63d36b3e5c3f9f6$var$sensorSpecifications","startsWith","ServiceTwinRegisterFlag","$df0bcedb6c39daa2$var$bus","SerialPort","tmpdata","messsage","deleteValue","setValue","rkey","getValue","maxRecordingLength","_subscription","recording","_a38","bus8","throttleDelay","_maxFilteredLength","_paused","_packetFilter","_filteredPackets","silent","handleFilterUpdate","notifyPacketsChanged","setFilteredPackets","refreshFilter","filteredPackets","_filter","maxFilteredLength","_a39","addFilteredPacket","_b13","_a40","_b14","filtered","_a41","_b15","si","_c2","_d2","pipePackets","bufs","chunks","ch1","ts","cs","py","$a63d36b3e5c3f9f6$var$toPython","options29","worker1","usbOptions","iframeTargetOrigin","iframeBridge","$a63d36b3e5c3f9f6$var$createIFrameBridge","nodes","serv_id","includeDeprecated","includeExperimental","maxChars","ellipse","updateCandidates","ignoreFirmwareCheck","allFlashers","flashers","handlePkt","$a63d36b3e5c3f9f6$var$createFlashers","flashFirmwareBlob","saturation","brightness2","monochrome","csshue","csssat","cssval","$a63d36b3e5c3f9f6$var$hsv_to_hsl","pipeReport","left","right","outarr","currcmd","pushNumber","nextToken","token","t0","vv","specs","repo","link","tags","firmwares","vrow","arow","rname","repeatIdx","numReps","argIdx","arg0","intVal","argCut","pingCmd","onPacket","numpkt","numrecv","ask","U.delay","pktsPerSecond","dropRate","logcontents","frameBytes","lastTime","ln","tm","filecontent","filename","notes","lastCmd","packetsToDescribe","backticksType","packetInfo","pipePacket","lineNo","noteId","nextModifier","systemInfo","usedIds","processInclude","processLine","normalizeMD","line1","expanded","checkBraces","normalizeName","normalizeStorageType","startEnum","svalue","constant","restricted","kindSt","forceSection","w2","hasReport","prev1","atat","systemPacket","isUser","isSystem","isHigh","highCommands","generalKind","packetField","finishPacket","startPacket","rangeCheck","parseIntCheck","enumMember","looksRandom","genRandom","metadataMember","cont","newNoteId","paderr","pad","paddingError","hadzero","ranges","range","regid","md","sectionId","k1","typeShift","parseVal","eq","isOptional","op","tok","normalizeEncoding","normalizeUnit","multiSegmented","segmented","maxBytes","allowFloat","ww","$a63d36b3e5c3f9f6$var$parseIntFloat","hh","innerEnums","ie","innerPackets","ipkt","tp2","m1","contents","lastPacket","showDataType","readAsText","selector","modifiers","pretty","flag","sel","speed1","player","su","serviceClass4","Const","Volatile","packf","bus10","srv1","_a50","condition","yays","nays","location","href","onUpdate","incomplete","bitindex","byte","idv","scd","localeCompare","$df0bcedb6c39daa2$export$904b4f75d2133218","$a63d36b3e5c3f9f6$exports","createWebBus","$5fa183380b63d9cd$var$debugEl","getElementById","$5fa183380b63d9cd$var$connectDeviceEl","$5fa183380b63d9cd$var$wsAddressEl","$5fa183380b63d9cd$var$wsConnectEl","$5fa183380b63d9cd$var$wsStatusEl","$5fa183380b63d9cd$var$bus","$5fa183380b63d9cd$var$ws","$5fa183380b63d9cd$var$wsIsOpen","ancestorOrigins","remove","onclick","preventDefault","stopPropagation","startDevTools","$5fa183380b63d9cd$var$setSocketStatus","WebSocket","onclose","onopen","$5fa183380b63d9cd$var$altspaceConnect","$5fa183380b63d9cd$var$input","down","released","stick","innerText","requestAnimationFrame","$5fa183380b63d9cd$var$step","joysticks","snapshotSensors","joystick"],"version":3,"file":"index.08db05ac.js.map"}